
Camera2LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a848  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800aae8  0800aae8  0000bae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ac1c  0800ac1c  0000bc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ac24  0800ac24  0000bc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ac28  0800ac28  0000bc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800ac2c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800ac90  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800acf0  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  24000124  0800ad50  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ac0  0800ad50  0000cac0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   000281dc  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c49  00000000  00000000  0003432e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  00038f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001615  00000000  00000000  0003abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cbe7  00000000  00000000  0003c1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002ad03  00000000  00000000  00078dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001746d6  00000000  00000000  000a3acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002181a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e2c  00000000  00000000  002181e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00220014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800aad0 	.word	0x0800aad0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800aad0 	.word	0x0800aad0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <OV5640_WriteReg>:
		OV5640_FORMAT_RGB565
};

OV5640_CameraConfig* activeCameraConfigPtr = &activeCameraConfig;

HAL_StatusTypeDef OV5640_WriteReg(uint16_t regAddr, uint8_t data) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af04      	add	r7, sp, #16
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	80fb      	strh	r3, [r7, #6]
 80006c8:	4613      	mov	r3, r2
 80006ca:	717b      	strb	r3, [r7, #5]


	return HAL_I2C_Mem_Write(&hi2c1, OV5640_I2C_ADDR_W, regAddr,
 80006cc:	88fa      	ldrh	r2, [r7, #6]
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	9302      	str	r3, [sp, #8]
 80006d4:	2301      	movs	r3, #1
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	1d7b      	adds	r3, r7, #5
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2302      	movs	r3, #2
 80006de:	2178      	movs	r1, #120	@ 0x78
 80006e0:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <OV5640_WriteReg+0x34>)
 80006e2:	f003 f859 	bl	8003798 <HAL_I2C_Mem_Write>
 80006e6:	4603      	mov	r3, r0
			I2C_MEMADD_SIZE_16BIT,&data,1,HAL_MAX_DELAY);

}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	24000284 	.word	0x24000284

080006f4 <OV5640_ReadReg>:

HAL_StatusTypeDef OV5640_ReadReg(uint16_t regAddr, uint8_t *dataPtr) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	@ 0x38
 80006f8:	af04      	add	r7, sp, #16
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	80fb      	strh	r3, [r7, #6]
	char buff[25] = "readStart\r\n";
 8000700:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <OV5640_ReadReg+0x5c>)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	ca07      	ldmia	r2, {r0, r1, r2}
 8000708:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800070c:	f107 0318 	add.w	r3, r7, #24
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	731a      	strb	r2, [r3, #12]
	HAL_UART_Transmit(&huart3, &buff, sizeof(buff), HAL_MAX_DELAY);
 800071a:	f107 010c 	add.w	r1, r7, #12
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	2219      	movs	r2, #25
 8000724:	480b      	ldr	r0, [pc, #44]	@ (8000754 <OV5640_ReadReg+0x60>)
 8000726:	f008 f911 	bl	800894c <HAL_UART_Transmit>
	return HAL_I2C_Mem_Read(&hi2c1, OV5640_I2C_ADDR_R, regAddr,
 800072a:	88fa      	ldrh	r2, [r7, #6]
 800072c:	f04f 33ff 	mov.w	r3, #4294967295
 8000730:	9302      	str	r3, [sp, #8]
 8000732:	2301      	movs	r3, #1
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2302      	movs	r3, #2
 800073c:	2179      	movs	r1, #121	@ 0x79
 800073e:	4806      	ldr	r0, [pc, #24]	@ (8000758 <OV5640_ReadReg+0x64>)
 8000740:	f003 f93e 	bl	80039c0 <HAL_I2C_Mem_Read>
 8000744:	4603      	mov	r3, r0
			I2C_MEMADD_SIZE_16BIT, dataPtr, 1, HAL_MAX_DELAY);
}
 8000746:	4618      	mov	r0, r3
 8000748:	3728      	adds	r7, #40	@ 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	0800aae8 	.word	0x0800aae8
 8000754:	240003fc 	.word	0x240003fc
 8000758:	24000284 	.word	0x24000284

0800075c <OV5640_PowerUpSequence>:
		return HAL_ERROR;
	}

	return HAL_OK;
}
HAL_StatusTypeDef OV5640_PowerUpSequence(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 8000762:	200a      	movs	r0, #10
 8000764:	f001 fca2 	bl	80020ac <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	480f      	ldr	r0, [pc, #60]	@ (80007ac <OV5640_PowerUpSequence+0x50>)
 800076e:	f002 ff5d 	bl	800362c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000772:	2005      	movs	r0, #5
 8000774:	f001 fc9a 	bl	80020ac <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port, CAMERA_RST_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800077e:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <OV5640_PowerUpSequence+0x54>)
 8000780:	f002 ff54 	bl	800362c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000784:	2014      	movs	r0, #20
 8000786:	f001 fc91 	bl	80020ac <HAL_Delay>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800078a:	2100      	movs	r1, #0
 800078c:	4809      	ldr	r0, [pc, #36]	@ (80007b4 <OV5640_PowerUpSequence+0x58>)
 800078e:	f006 ff79 	bl	8007684 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 8000792:	2005      	movs	r0, #5
 8000794:	f001 fc8a 	bl	80020ac <HAL_Delay>
	HAL_StatusTypeDef status = OV5640_ConfigureCamera();
 8000798:	f000 f87c 	bl	8000894 <OV5640_ConfigureCamera>
 800079c:	4603      	mov	r3, r0
 800079e:	71fb      	strb	r3, [r7, #7]
	return status;
 80007a0:	79fb      	ldrb	r3, [r7, #7]

}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	58020000 	.word	0x58020000
 80007b0:	58021800 	.word	0x58021800
 80007b4:	240003b0 	.word	0x240003b0

080007b8 <OV5640_SetResolution>:
HAL_StatusTypeDef OV5640_SetResolution(void){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80007be:	2300      	movs	r3, #0
 80007c0:	71fb      	strb	r3, [r7, #7]
	const uint16_t selectedWidth =OV5640_Resolutions[activeCameraConfigPtr->resolution].width;
 80007c2:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <OV5640_SetResolution+0x9c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <OV5640_SetResolution+0xa0>)
 80007cc:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80007d0:	80bb      	strh	r3, [r7, #4]
	const uint16_t selectedHeight = OV5640_Resolutions[activeCameraConfigPtr->resolution].height;
 80007d2:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <OV5640_SetResolution+0x9c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000858 <OV5640_SetResolution+0xa0>)
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	885b      	ldrh	r3, [r3, #2]
 80007e0:	807b      	strh	r3, [r7, #2]
	status |= OV5640_WriteReg(OV5640_REG_OUT_WIDTH_H, (uint8_t)selectedWidth>>8);
 80007e2:	88bb      	ldrh	r3, [r7, #4]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	121b      	asrs	r3, r3, #8
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4619      	mov	r1, r3
 80007ec:	f643 0008 	movw	r0, #14344	@ 0x3808
 80007f0:	f7ff ff64 	bl	80006bc <OV5640_WriteReg>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_WIDTH_L, (uint8_t)selectedWidth&0xFF);
 80007fe:	88bb      	ldrh	r3, [r7, #4]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	f643 0009 	movw	r0, #14345	@ 0x3809
 8000808:	f7ff ff58 	bl	80006bc <OV5640_WriteReg>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4313      	orrs	r3, r2
 8000814:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_HEIGHT_H, (uint8_t)selectedHeight>>8);
 8000816:	887b      	ldrh	r3, [r7, #2]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	121b      	asrs	r3, r3, #8
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	f643 000a 	movw	r0, #14346	@ 0x380a
 8000824:	f7ff ff4a 	bl	80006bc <OV5640_WriteReg>
 8000828:	4603      	mov	r3, r0
 800082a:	461a      	mov	r2, r3
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4313      	orrs	r3, r2
 8000830:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_HEIGHT_L, (uint8_t)selectedHeight&0xFF);
 8000832:	887b      	ldrh	r3, [r7, #2]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	f643 000b 	movw	r0, #14347	@ 0x380b
 800083c:	f7ff ff3e 	bl	80006bc <OV5640_WriteReg>
 8000840:	4603      	mov	r3, r0
 8000842:	461a      	mov	r2, r3
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	4313      	orrs	r3, r2
 8000848:	71fb      	strb	r3, [r7, #7]
	return status;
 800084a:	79fb      	ldrb	r3, [r7, #7]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	24000000 	.word	0x24000000
 8000858:	0800ab94 	.word	0x0800ab94

0800085c <OV5640_SetFormat>:
HAL_StatusTypeDef OV5640_SetFormat(void){
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8000862:	2300      	movs	r3, #0
 8000864:	71fb      	strb	r3, [r7, #7]
	uint8_t formatData= OV5640_Formats[activeCameraConfigPtr->pixelFormat].formatValue;
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <OV5640_SetFormat+0x30>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	785b      	ldrb	r3, [r3, #1]
 800086c:	461a      	mov	r2, r3
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <OV5640_SetFormat+0x34>)
 8000870:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000874:	71bb      	strb	r3, [r7, #6]
	status | OV5640_WriteReg(OV5640_REG_FORMAT_CTRL, formatData);
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	4619      	mov	r1, r3
 800087a:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 800087e:	f7ff ff1d 	bl	80006bc <OV5640_WriteReg>
	return status;
 8000882:	79fb      	ldrb	r3, [r7, #7]


}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	24000000 	.word	0x24000000
 8000890:	0800aba0 	.word	0x0800aba0

08000894 <OV5640_ConfigureCamera>:
HAL_StatusTypeDef OV5640_ConfigureCamera(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	b092      	sub	sp, #72	@ 0x48
 8000898:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 800089a:	2300      	movs	r3, #0
 800089c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t resetValue = 0x0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

	OV5640_ReadReg(OV5640_SOFTWARE_RESET, &resetValue);
 80008a6:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 80008aa:	4619      	mov	r1, r3
 80008ac:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008b0:	f7ff ff20 	bl	80006f4 <OV5640_ReadReg>
	resetValue |=0x80;
 80008b4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80008b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	OV5640_WriteReg(OV5640_SOFTWARE_RESET, resetValue);
 80008c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80008c6:	4619      	mov	r1, r3
 80008c8:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008cc:	f7ff fef6 	bl	80006bc <OV5640_WriteReg>
	HAL_Delay(10);
 80008d0:	200a      	movs	r0, #10
 80008d2:	f001 fbeb 	bl	80020ac <HAL_Delay>
	resetValue &= ~0x80;
 80008d6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80008da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	OV5640_WriteReg(OV5640_SOFTWARE_RESET, resetValue);
 80008e4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80008e8:	4619      	mov	r1, r3
 80008ea:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008ee:	f7ff fee5 	bl	80006bc <OV5640_WriteReg>
	HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	@ 0x64
 80008f4:	f001 fbda 	bl	80020ac <HAL_Delay>

	status |= OV5640_SetResolution();
 80008f8:	f7ff ff5e 	bl	80007b8 <OV5640_SetResolution>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000904:	4313      	orrs	r3, r2
 8000906:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	status |= OV5640_SetFormat();
 800090a:	f7ff ffa7 	bl	800085c <OV5640_SetFormat>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000916:	4313      	orrs	r3, r2
 8000918:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	status |= OV5640_WriteReg(OV5640_POLARITY_CTRL, OV5640_POLARITY);
 800091c:	2123      	movs	r1, #35	@ 0x23
 800091e:	f244 7040 	movw	r0, #18240	@ 0x4740
 8000922:	f7ff fecb 	bl	80006bc <OV5640_WriteReg>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800092e:	4313      	orrs	r3, r2
 8000930:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t pol1;
	OV5640_ReadReg(OV5640_POLARITY_CTRL, &pol1);
 8000934:	f107 0345 	add.w	r3, r7, #69	@ 0x45
 8000938:	4619      	mov	r1, r3
 800093a:	f244 7040 	movw	r0, #18240	@ 0x4740
 800093e:	f7ff fed9 	bl	80006f4 <OV5640_ReadReg>
	char buff2[20];
	sprintf(buff2, "result of value: %d\n\r", pol1);
 8000942:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000946:	461a      	mov	r2, r3
 8000948:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800094c:	492e      	ldr	r1, [pc, #184]	@ (8000a08 <OV5640_ConfigureCamera+0x174>)
 800094e:	4618      	mov	r0, r3
 8000950:	f009 fc1e 	bl	800a190 <siprintf>
	HAL_UART_Transmit(&huart3, buff2, strlen(buff2), HAL_MAX_DELAY);
 8000954:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fcc1 	bl	80002e0 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	4828      	ldr	r0, [pc, #160]	@ (8000a0c <OV5640_ConfigureCamera+0x178>)
 800096c:	f007 ffee 	bl	800894c <HAL_UART_Transmit>
	OV5640_WriteReg(0x503D, 0x80);
 8000970:	2180      	movs	r1, #128	@ 0x80
 8000972:	f245 003d 	movw	r0, #20541	@ 0x503d
 8000976:	f7ff fea1 	bl	80006bc <OV5640_WriteReg>
	HAL_Delay(10);
 800097a:	200a      	movs	r0, #10
 800097c:	f001 fb96 	bl	80020ac <HAL_Delay>
	volatile uint8_t result = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	//write format for format control register to make format rgb565
	char buff3[20];
	OV5640_ReadReg(OV5640_REG_FORMAT_CTRL, &result);
 8000986:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800098a:	4619      	mov	r1, r3
 800098c:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 8000990:	f7ff feb0 	bl	80006f4 <OV5640_ReadReg>
	sprintf(buff3, "result of format: %d\n\r", result);
 8000994:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	f107 0318 	add.w	r3, r7, #24
 80009a0:	491b      	ldr	r1, [pc, #108]	@ (8000a10 <OV5640_ConfigureCamera+0x17c>)
 80009a2:	4618      	mov	r0, r3
 80009a4:	f009 fbf4 	bl	800a190 <siprintf>
	HAL_UART_Transmit(&huart3, buff3, strlen(buff3), HAL_MAX_DELAY);
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fc97 	bl	80002e0 <strlen>
 80009b2:	4603      	mov	r3, r0
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	f107 0118 	add.w	r1, r7, #24
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	4813      	ldr	r0, [pc, #76]	@ (8000a0c <OV5640_ConfigureCamera+0x178>)
 80009c0:	f007 ffc4 	bl	800894c <HAL_UART_Transmit>
	uint8_t result1 = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	75fb      	strb	r3, [r7, #23]
	OV5640_ReadReg(OV5640_REG_OUT_WIDTH_L, &result1);
 80009c8:	f107 0317 	add.w	r3, r7, #23
 80009cc:	4619      	mov	r1, r3
 80009ce:	f643 0009 	movw	r0, #14345	@ 0x3809
 80009d2:	f7ff fe8f 	bl	80006f4 <OV5640_ReadReg>
	char buff4[20];
	sprintf(buff4, "test format: %d\n\r", result1);
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	461a      	mov	r2, r3
 80009da:	463b      	mov	r3, r7
 80009dc:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <OV5640_ConfigureCamera+0x180>)
 80009de:	4618      	mov	r0, r3
 80009e0:	f009 fbd6 	bl	800a190 <siprintf>

	HAL_UART_Transmit(&huart3, buff4, strlen(buff4), HAL_MAX_DELAY);
 80009e4:	463b      	mov	r3, r7
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fc7a 	bl	80002e0 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	4639      	mov	r1, r7
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <OV5640_ConfigureCamera+0x178>)
 80009f8:	f007 ffa8 	bl	800894c <HAL_UART_Transmit>
	return status;
 80009fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47



}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3748      	adds	r7, #72	@ 0x48
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	0800ab04 	.word	0x0800ab04
 8000a0c:	240003fc 	.word	0x240003fc
 8000a10:	0800ab1c 	.word	0x0800ab1c
 8000a14:	0800ab34 	.word	0x0800ab34

08000a18 <frameCapture>:
void frameCapture(void){
 8000a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a1c:	b090      	sub	sp, #64	@ 0x40
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	466b      	mov	r3, sp
 8000a22:	4698      	mov	r8, r3
	__HAL_RCC_DCMI_CLK_ENABLE();
 8000a24:	4b54      	ldr	r3, [pc, #336]	@ (8000b78 <frameCapture+0x160>)
 8000a26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000a2a:	4a53      	ldr	r2, [pc, #332]	@ (8000b78 <frameCapture+0x160>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000a34:	4b50      	ldr	r3, [pc, #320]	@ (8000b78 <frameCapture+0x160>)
 8000a36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]

	uint16_t width = OV5640_Resolutions[activeCameraConfigPtr->resolution].width;
 8000a42:	4b4e      	ldr	r3, [pc, #312]	@ (8000b7c <frameCapture+0x164>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8000b80 <frameCapture+0x168>)
 8000a4c:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000a50:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint16_t height = OV5640_Resolutions[activeCameraConfigPtr->resolution].height;
 8000a52:	4b4a      	ldr	r3, [pc, #296]	@ (8000b7c <frameCapture+0x164>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4a49      	ldr	r2, [pc, #292]	@ (8000b80 <frameCapture+0x168>)
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	885b      	ldrh	r3, [r3, #2]
 8000a60:	873b      	strh	r3, [r7, #56]	@ 0x38
	uint8_t pixelSize = OV5640_Formats[activeCameraConfigPtr->pixelFormat].bytesPerPixel;
 8000a62:	4b46      	ldr	r3, [pc, #280]	@ (8000b7c <frameCapture+0x164>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	785b      	ldrb	r3, [r3, #1]
 8000a68:	4a46      	ldr	r2, [pc, #280]	@ (8000b84 <frameCapture+0x16c>)
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	885b      	ldrh	r3, [r3, #2]
 8000a70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	uint8_t frame[width*height*pixelSize];
 8000a74:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000a76:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000a78:	fb02 f303 	mul.w	r3, r2, r3
 8000a7c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000a80:	fb02 f603 	mul.w	r6, r2, r3
 8000a84:	1e73      	subs	r3, r6, #1
 8000a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a88:	4632      	mov	r2, r6
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	4614      	mov	r4, r2
 8000a8e:	461d      	mov	r5, r3
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	00eb      	lsls	r3, r5, #3
 8000a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a9e:	00e2      	lsls	r2, r4, #3
 8000aa0:	4632      	mov	r2, r6
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	4610      	mov	r0, r2
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 0200 	mov.w	r2, #0
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	00cb      	lsls	r3, r1, #3
 8000ab2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ab6:	00c2      	lsls	r2, r0, #3
 8000ab8:	4633      	mov	r3, r6
 8000aba:	3307      	adds	r3, #7
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	ebad 0d03 	sub.w	sp, sp, r3
 8000ac4:	466b      	mov	r3, sp
 8000ac6:	3300      	adds	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t timeout = HAL_MAX_DELAY;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
    char testBuff[10] = "In Frame\n\r";
 8000ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8000b88 <frameCapture+0x170>)
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ad8:	c303      	stmia	r3!, {r0, r1}
 8000ada:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart3, testBuff, strlen(testBuff), HAL_MAX_DELAY);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fbfd 	bl	80002e0 <strlen>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	f107 011c 	add.w	r1, r7, #28
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	4826      	ldr	r0, [pc, #152]	@ (8000b8c <frameCapture+0x174>)
 8000af4:	f007 ff2a 	bl	800894c <HAL_UART_Transmit>
	DCMI->CR |=DCMI_CR_ENABLE;
 8000af8:	4b25      	ldr	r3, [pc, #148]	@ (8000b90 <frameCapture+0x178>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a24      	ldr	r2, [pc, #144]	@ (8000b90 <frameCapture+0x178>)
 8000afe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b02:	6013      	str	r3, [r2, #0]
	DCMI->CR |=DCMI_CR_CM;
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <frameCapture+0x178>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a21      	ldr	r2, [pc, #132]	@ (8000b90 <frameCapture+0x178>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	6013      	str	r3, [r2, #0]
	DCMI->CR |= DCMI_CR_CAPTURE;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <frameCapture+0x178>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1e      	ldr	r2, [pc, #120]	@ (8000b90 <frameCapture+0x178>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6013      	str	r3, [r2, #0]
	for (int i = 0; i<sizeof(frame);i++){
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b20:	e020      	b.n	8000b64 <frameCapture+0x14c>
	    frame[i] = DCMI->DR;
 8000b22:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <frameCapture+0x178>)
 8000b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b26:	b2d9      	uxtb	r1, r3
 8000b28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b2c:	4413      	add	r3, r2
 8000b2e:	460a      	mov	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
		char buffFrame[20];
		if (i==0){
 8000b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d112      	bne.n	8000b5e <frameCapture+0x146>
			sprintf(buffFrame, "Start of image: %d,\n\r", DCMI->DR);
 8000b38:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <frameCapture+0x178>)
 8000b3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4915      	ldr	r1, [pc, #84]	@ (8000b94 <frameCapture+0x17c>)
 8000b40:	4618      	mov	r0, r3
 8000b42:	f009 fb25 	bl	800a190 <siprintf>
			HAL_UART_Transmit(&huart3, buffFrame, strlen(buffFrame),HAL_MAX_DELAY);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fbc9 	bl	80002e0 <strlen>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	1d39      	adds	r1, r7, #4
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <frameCapture+0x174>)
 8000b5a:	f007 fef7 	bl	800894c <HAL_UART_Transmit>
	for (int i = 0; i<sizeof(frame);i++){
 8000b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b60:	3301      	adds	r3, #1
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b64:	4632      	mov	r2, r6
 8000b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d8da      	bhi.n	8000b22 <frameCapture+0x10a>
 8000b6c:	46c5      	mov	sp, r8
		}

	}

}
 8000b6e:	bf00      	nop
 8000b70:	3740      	adds	r7, #64	@ 0x40
 8000b72:	46bd      	mov	sp, r7
 8000b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	24000000 	.word	0x24000000
 8000b80:	0800ab94 	.word	0x0800ab94
 8000b84:	0800aba0 	.word	0x0800aba0
 8000b88:	0800ab60 	.word	0x0800ab60
 8000b8c:	240003fc 	.word	0x240003fc
 8000b90:	48020000 	.word	0x48020000
 8000b94:	0800ab48 	.word	0x0800ab48

08000b98 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000b9e:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <MX_DCMI_Init+0x64>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000baa:	2220      	movs	r2, #32
 8000bac:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000bae:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bb0:	2280      	movs	r2, #128	@ 0x80
 8000bb2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000bb4:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bb6:	2240      	movs	r2, #64	@ 0x40
 8000bb8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000be6:	f001 fbb5 	bl	8002354 <HAL_DCMI_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000bf0:	f000 fcc6 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	24000144 	.word	0x24000144
 8000bfc:	48020000 	.word	0x48020000

08000c00 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	@ 0x38
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8000d94 <HAL_DCMI_MspInit+0x194>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	f040 80b3 	bne.w	8000d8a <HAL_DCMI_MspInit+0x18a>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000c24:	4b5c      	ldr	r3, [pc, #368]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000c2a:	4a5b      	ldr	r2, [pc, #364]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000c34:	4b58      	ldr	r3, [pc, #352]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	623b      	str	r3, [r7, #32]
 8000c40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c42:	4b55      	ldr	r3, [pc, #340]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c48:	4a53      	ldr	r2, [pc, #332]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c4a:	f043 0310 	orr.w	r3, r3, #16
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c52:	4b51      	ldr	r3, [pc, #324]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b4d      	ldr	r3, [pc, #308]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c66:	4a4c      	ldr	r2, [pc, #304]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c70:	4b49      	ldr	r3, [pc, #292]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	4b46      	ldr	r3, [pc, #280]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c84:	4a44      	ldr	r2, [pc, #272]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8e:	4b42      	ldr	r3, [pc, #264]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca2:	4a3d      	ldr	r2, [pc, #244]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cac:	4b3a      	ldr	r3, [pc, #232]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b37      	ldr	r3, [pc, #220]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc0:	4a35      	ldr	r2, [pc, #212]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cca:	4b33      	ldr	r3, [pc, #204]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000cd8:	2370      	movs	r3, #112	@ 0x70
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ce8:	230d      	movs	r3, #13
 8000cea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	482a      	ldr	r0, [pc, #168]	@ (8000d9c <HAL_DCMI_MspInit+0x19c>)
 8000cf4:	f002 faea 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000cf8:	2350      	movs	r3, #80	@ 0x50
 8000cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d08:	230d      	movs	r3, #13
 8000d0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4823      	ldr	r0, [pc, #140]	@ (8000da0 <HAL_DCMI_MspInit+0x1a0>)
 8000d14:	f002 fada 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d18:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d2a:	230d      	movs	r3, #13
 8000d2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	481b      	ldr	r0, [pc, #108]	@ (8000da4 <HAL_DCMI_MspInit+0x1a4>)
 8000d36:	f002 fac9 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d4a:	230d      	movs	r3, #13
 8000d4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4814      	ldr	r0, [pc, #80]	@ (8000da8 <HAL_DCMI_MspInit+0x1a8>)
 8000d56:	f002 fab9 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d5a:	2380      	movs	r3, #128	@ 0x80
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d6a:	230d      	movs	r3, #13
 8000d6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	480d      	ldr	r0, [pc, #52]	@ (8000dac <HAL_DCMI_MspInit+0x1ac>)
 8000d76:	f002 faa9 	bl	80032cc <HAL_GPIO_Init>

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	204e      	movs	r0, #78	@ 0x4e
 8000d80:	f001 fab3 	bl	80022ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000d84:	204e      	movs	r0, #78	@ 0x4e
 8000d86:	f001 faca 	bl	800231e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3738      	adds	r7, #56	@ 0x38
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	48020000 	.word	0x48020000
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	58021000 	.word	0x58021000
 8000da0:	58020000 	.word	0x58020000
 8000da4:	58020800 	.word	0x58020800
 8000da8:	58020c00 	.word	0x58020c00
 8000dac:	58020400 	.word	0x58020400

08000db0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000db6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e34 <MX_ETH_Init+0x84>)
 8000db8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000dba:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000dc2:	2280      	movs	r2, #128	@ 0x80
 8000dc4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000dc8:	22e1      	movs	r2, #225	@ 0xe1
 8000dca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000de0:	4a15      	ldr	r2, [pc, #84]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000de2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000dec:	4a13      	ldr	r2, [pc, #76]	@ (8000e3c <MX_ETH_Init+0x8c>)
 8000dee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000df2:	4a13      	ldr	r2, [pc, #76]	@ (8000e40 <MX_ETH_Init+0x90>)
 8000df4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000df8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000dfc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000dfe:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000e00:	f001 fe30 	bl	8002a64 <HAL_ETH_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000e0a:	f000 fbb9 	bl	8001580 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e0e:	2238      	movs	r2, #56	@ 0x38
 8000e10:	2100      	movs	r1, #0
 8000e12:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <MX_ETH_Init+0x94>)
 8000e14:	f009 f9de 	bl	800a1d4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <MX_ETH_Init+0x94>)
 8000e1a:	2221      	movs	r2, #33	@ 0x21
 8000e1c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <MX_ETH_Init+0x94>)
 8000e20:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e24:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <MX_ETH_Init+0x94>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	240001cc 	.word	0x240001cc
 8000e34:	40028000 	.word	0x40028000
 8000e38:	2400027c 	.word	0x2400027c
 8000e3c:	240000c4 	.word	0x240000c4
 8000e40:	24000064 	.word	0x24000064
 8000e44:	24000194 	.word	0x24000194

08000e48 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	@ 0x38
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a59      	ldr	r2, [pc, #356]	@ (8000fcc <HAL_ETH_MspInit+0x184>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	f040 80ab 	bne.w	8000fc2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e6c:	4b58      	ldr	r3, [pc, #352]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000e6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e72:	4a57      	ldr	r2, [pc, #348]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000e74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e78:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e7c:	4b54      	ldr	r3, [pc, #336]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e86:	623b      	str	r3, [r7, #32]
 8000e88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e8a:	4b51      	ldr	r3, [pc, #324]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000e8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e90:	4a4f      	ldr	r2, [pc, #316]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e96:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000e9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ea8:	4b49      	ldr	r3, [pc, #292]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000eaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eae:	4a48      	ldr	r2, [pc, #288]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eb8:	4b45      	ldr	r3, [pc, #276]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000eba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	4b42      	ldr	r3, [pc, #264]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ecc:	4a40      	ldr	r2, [pc, #256]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eea:	4a39      	ldr	r2, [pc, #228]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef4:	4b36      	ldr	r3, [pc, #216]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b33      	ldr	r3, [pc, #204]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f08:	4a31      	ldr	r2, [pc, #196]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f12:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f20:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f26:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000f28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f30:	4b27      	ldr	r3, [pc, #156]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f3e:	2332      	movs	r3, #50	@ 0x32
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f4e:	230b      	movs	r3, #11
 8000f50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	481e      	ldr	r0, [pc, #120]	@ (8000fd4 <HAL_ETH_MspInit+0x18c>)
 8000f5a:	f002 f9b7 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f5e:	2386      	movs	r3, #134	@ 0x86
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6e:	230b      	movs	r3, #11
 8000f70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f76:	4619      	mov	r1, r3
 8000f78:	4817      	ldr	r0, [pc, #92]	@ (8000fd8 <HAL_ETH_MspInit+0x190>)
 8000f7a:	f002 f9a7 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f90:	230b      	movs	r3, #11
 8000f92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4810      	ldr	r0, [pc, #64]	@ (8000fdc <HAL_ETH_MspInit+0x194>)
 8000f9c:	f002 f996 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fa0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb2:	230b      	movs	r3, #11
 8000fb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <HAL_ETH_MspInit+0x198>)
 8000fbe:	f002 f985 	bl	80032cc <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3738      	adds	r7, #56	@ 0x38
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40028000 	.word	0x40028000
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	58020800 	.word	0x58020800
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	58020400 	.word	0x58020400
 8000fe0:	58021800 	.word	0x58021800

08000fe4 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	@ 0x30
 8000fe8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffa:	4b7e      	ldr	r3, [pc, #504]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	4a7c      	ldr	r2, [pc, #496]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100a:	4b7a      	ldr	r3, [pc, #488]	@ (80011f4 <MX_GPIO_Init+0x210>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001018:	4b76      	ldr	r3, [pc, #472]	@ (80011f4 <MX_GPIO_Init+0x210>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101e:	4a75      	ldr	r2, [pc, #468]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001028:	4b72      	ldr	r3, [pc, #456]	@ (80011f4 <MX_GPIO_Init+0x210>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001036:	4b6f      	ldr	r3, [pc, #444]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103c:	4a6d      	ldr	r2, [pc, #436]	@ (80011f4 <MX_GPIO_Init+0x210>)
 800103e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001046:	4b6b      	ldr	r3, [pc, #428]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b67      	ldr	r3, [pc, #412]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	4a66      	ldr	r2, [pc, #408]	@ (80011f4 <MX_GPIO_Init+0x210>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001064:	4b63      	ldr	r3, [pc, #396]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b60      	ldr	r3, [pc, #384]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001078:	4a5e      	ldr	r2, [pc, #376]	@ (80011f4 <MX_GPIO_Init+0x210>)
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001082:	4b5c      	ldr	r3, [pc, #368]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001090:	4b58      	ldr	r3, [pc, #352]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001096:	4a57      	ldr	r2, [pc, #348]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a0:	4b54      	ldr	r3, [pc, #336]	@ (80011f4 <MX_GPIO_Init+0x210>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	4b51      	ldr	r3, [pc, #324]	@ (80011f4 <MX_GPIO_Init+0x210>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b4:	4a4f      	ldr	r2, [pc, #316]	@ (80011f4 <MX_GPIO_Init+0x210>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010be:	4b4d      	ldr	r3, [pc, #308]	@ (80011f4 <MX_GPIO_Init+0x210>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2101      	movs	r1, #1
 80010d0:	4849      	ldr	r0, [pc, #292]	@ (80011f8 <MX_GPIO_Init+0x214>)
 80010d2:	f002 faab 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f245 0101 	movw	r1, #20481	@ 0x5001
 80010dc:	4847      	ldr	r0, [pc, #284]	@ (80011fc <MX_GPIO_Init+0x218>)
 80010de:	f002 faa5 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_DC_Pin|CAMERA_RST_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f249 4102 	movw	r1, #37890	@ 0x9402
 80010e8:	4845      	ldr	r0, [pc, #276]	@ (8001200 <MX_GPIO_Init+0x21c>)
 80010ea:	f002 fa9f 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010f4:	4843      	ldr	r0, [pc, #268]	@ (8001204 <MX_GPIO_Init+0x220>)
 80010f6:	f002 fa99 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2102      	movs	r1, #2
 80010fe:	4842      	ldr	r0, [pc, #264]	@ (8001208 <MX_GPIO_Init+0x224>)
 8001100:	f002 fa94 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001104:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	483c      	ldr	r0, [pc, #240]	@ (800120c <MX_GPIO_Init+0x228>)
 800111a:	f002 f8d7 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin;
 800111e:	2301      	movs	r3, #1
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CAMERA_PWDN_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4830      	ldr	r0, [pc, #192]	@ (80011f8 <MX_GPIO_Init+0x214>)
 8001136:	f002 f8c9 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin;
 800113a:	f245 0301 	movw	r3, #20481	@ 0x5001
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	482a      	ldr	r0, [pc, #168]	@ (80011fc <MX_GPIO_Init+0x218>)
 8001154:	f002 f8ba 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|CAMERA_RST_Pin|LCD_RESET_Pin|LCD_CS_Pin;
 8001158:	f249 4302 	movw	r3, #37890	@ 0x9402
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	4823      	ldr	r0, [pc, #140]	@ (8001200 <MX_GPIO_Init+0x21c>)
 8001172:	f002 f8ab 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001176:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	481d      	ldr	r0, [pc, #116]	@ (8001204 <MX_GPIO_Init+0x220>)
 8001190:	f002 f89c 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001194:	2380      	movs	r3, #128	@ 0x80
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001198:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800119c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	4815      	ldr	r0, [pc, #84]	@ (8001200 <MX_GPIO_Init+0x21c>)
 80011aa:	f002 f88f 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	480b      	ldr	r0, [pc, #44]	@ (80011f8 <MX_GPIO_Init+0x214>)
 80011cc:	f002 f87e 	bl	80032cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4808      	ldr	r0, [pc, #32]	@ (8001208 <MX_GPIO_Init+0x224>)
 80011e8:	f002 f870 	bl	80032cc <HAL_GPIO_Init>

}
 80011ec:	bf00      	nop
 80011ee:	3730      	adds	r7, #48	@ 0x30
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58020000 	.word	0x58020000
 80011fc:	58020400 	.word	0x58020400
 8001200:	58021800 	.word	0x58021800
 8001204:	58020c00 	.word	0x58020c00
 8001208:	58021000 	.word	0x58021000
 800120c:	58020800 	.word	0x58020800

08001210 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001216:	4a1c      	ldr	r2, [pc, #112]	@ (8001288 <MX_I2C1_Init+0x78>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60000008;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_I2C1_Init+0x74>)
 800121c:	4a1b      	ldr	r2, [pc, #108]	@ (800128c <MX_I2C1_Init+0x7c>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001228:	2201      	movs	r2, #1
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124a:	480e      	ldr	r0, [pc, #56]	@ (8001284 <MX_I2C1_Init+0x74>)
 800124c:	f002 fa08 	bl	8003660 <HAL_I2C_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001256:	f000 f993 	bl	8001580 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4809      	ldr	r0, [pc, #36]	@ (8001284 <MX_I2C1_Init+0x74>)
 800125e:	f002 ff8b 	bl	8004178 <HAL_I2CEx_ConfigAnalogFilter>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001268:	f000 f98a 	bl	8001580 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001270:	f002 ffcd 	bl	800420e <HAL_I2CEx_ConfigDigitalFilter>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800127a:	f000 f981 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	24000284 	.word	0x24000284
 8001288:	40005400 	.word	0x40005400
 800128c:	60000008 	.word	0x60000008

08001290 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0ba      	sub	sp, #232	@ 0xe8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	22c0      	movs	r2, #192	@ 0xc0
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f008 ff8f 	bl	800a1d4 <memset>
  if(i2cHandle->Instance==I2C1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a30      	ldr	r2, [pc, #192]	@ (800137c <HAL_I2C_MspInit+0xec>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d158      	bne.n	8001372 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012c0:	f04f 0208 	mov.w	r2, #8
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 8;
 80012cc:	2308      	movs	r3, #8
 80012ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 150;
 80012d0:	2396      	movs	r3, #150	@ 0x96
 80012d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 10;
 80012d4:	230a      	movs	r3, #10
 80012d6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 80012d8:	230a      	movs	r3, #10
 80012da:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 10;
 80012dc:	230a      	movs	r3, #10
 80012de:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80012e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012e8:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80012ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4618      	mov	r0, r3
 80012fc:	f004 f99e 	bl	800563c <HAL_RCCEx_PeriphCLKConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 8001306:	f000 f93b 	bl	8001580 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_I2C_MspInit+0xf0>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001310:	4a1b      	ldr	r2, [pc, #108]	@ (8001380 <HAL_I2C_MspInit+0xf0>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800131a:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <HAL_I2C_MspInit+0xf0>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001328:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800132c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001342:	2304      	movs	r3, #4
 8001344:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800134c:	4619      	mov	r1, r3
 800134e:	480d      	ldr	r0, [pc, #52]	@ (8001384 <HAL_I2C_MspInit+0xf4>)
 8001350:	f001 ffbc 	bl	80032cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_I2C_MspInit+0xf0>)
 8001356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800135a:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <HAL_I2C_MspInit+0xf0>)
 800135c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001360:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_I2C_MspInit+0xf0>)
 8001366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800136a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001372:	bf00      	nop
 8001374:	37e8      	adds	r7, #232	@ 0xe8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40005400 	.word	0x40005400
 8001380:	58024400 	.word	0x58024400
 8001384:	58020400 	.word	0x58020400

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138e:	f000 fdfb 	bl	8001f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001392:	f000 f871 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001396:	f7ff fe25 	bl	8000fe4 <MX_GPIO_Init>
  MX_ETH_Init();
 800139a:	f7ff fd09 	bl	8000db0 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 800139e:	f000 fd1b 	bl	8001dd8 <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 80013a2:	f7ff fbf9 	bl	8000b98 <MX_DCMI_Init>
  MX_I2C1_Init();
 80013a6:	f7ff ff33 	bl	8001210 <MX_I2C1_Init>
  MX_SPI1_Init();
 80013aa:	f000 f8ef 	bl	800158c <MX_SPI1_Init>
  MX_TIM1_Init();
 80013ae:	f000 fb0d 	bl	80019cc <MX_TIM1_Init>
  MX_TIM4_Init();
 80013b2:	f000 fb61 	bl	8001a78 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80013b6:	f000 fc49 	bl	8001c4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_StatusTypeDef cameraConfigStatus = OV5640_PowerUpSequence();
 80013ba:	f7ff f9cf 	bl	800075c <OV5640_PowerUpSequence>
 80013be:	4603      	mov	r3, r0
 80013c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t reg1 = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  OV5640_ReadReg(OV5640_POLARITY_CTRL,&reg1);
 80013ca:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80013ce:	4619      	mov	r1, r3
 80013d0:	f244 7040 	movw	r0, #18240	@ 0x4740
 80013d4:	f7ff f98e 	bl	80006f4 <OV5640_ReadReg>
  char buffReg1[20];
  sprintf(buffReg1, "chipID1: %d\r\n", reg1);
 80013d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80013dc:	461a      	mov	r2, r3
 80013de:	f107 0318 	add.w	r3, r7, #24
 80013e2:	4920      	ldr	r1, [pc, #128]	@ (8001464 <main+0xdc>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f008 fed3 	bl	800a190 <siprintf>
  HAL_UART_Transmit(&huart3, buffReg1, strlen(buffReg1), HAL_MAX_DELAY);
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7fe ff76 	bl	80002e0 <strlen>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	f107 0118 	add.w	r1, r7, #24
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	4819      	ldr	r0, [pc, #100]	@ (8001468 <main+0xe0>)
 8001402:	f007 faa3 	bl	800894c <HAL_UART_Transmit>
	if (cameraConfigStatus == HAL_OK){
 8001406:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800140a:	2b00      	cmp	r3, #0
 800140c:	d113      	bne.n	8001436 <main+0xae>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001414:	4815      	ldr	r0, [pc, #84]	@ (800146c <main+0xe4>)
 8001416:	f002 f909 	bl	800362c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800141a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800141e:	f000 fe45 	bl	80020ac <HAL_Delay>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin,GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001428:	4810      	ldr	r0, [pc, #64]	@ (800146c <main+0xe4>)
 800142a:	f002 f8ff 	bl	800362c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800142e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001432:	f000 fe3b 	bl	80020ac <HAL_Delay>
	}

	frameCapture();
 8001436:	f7ff faef 	bl	8000a18 <frameCapture>
	char buffFrame[20];
	sprintf(buffFrame, "Start of image: %d,\n\r", DCMI->DR);
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <main+0xe8>)
 800143c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	490c      	ldr	r1, [pc, #48]	@ (8001474 <main+0xec>)
 8001442:	4618      	mov	r0, r3
 8001444:	f008 fea4 	bl	800a190 <siprintf>
	HAL_UART_Transmit(&huart3, buffFrame, strlen(buffFrame),HAL_MAX_DELAY);
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe ff48 	bl	80002e0 <strlen>
 8001450:	4603      	mov	r3, r0
 8001452:	b29a      	uxth	r2, r3
 8001454:	1d39      	adds	r1, r7, #4
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	4803      	ldr	r0, [pc, #12]	@ (8001468 <main+0xe0>)
 800145c:	f007 fa76 	bl	800894c <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <main+0xd8>
 8001464:	0800ab6c 	.word	0x0800ab6c
 8001468:	240003fc 	.word	0x240003fc
 800146c:	58020400 	.word	0x58020400
 8001470:	48020000 	.word	0x48020000
 8001474:	0800ab7c 	.word	0x0800ab7c

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b09c      	sub	sp, #112	@ 0x70
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001482:	224c      	movs	r2, #76	@ 0x4c
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f008 fea4 	bl	800a1d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2220      	movs	r2, #32
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f008 fe9e 	bl	800a1d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001498:	2002      	movs	r0, #2
 800149a:	f003 f835 	bl	8004508 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <SystemClock_Config+0x100>)
 80014a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a6:	4a34      	ldr	r2, [pc, #208]	@ (8001578 <SystemClock_Config+0x100>)
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80014ae:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <SystemClock_Config+0x100>)
 80014b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	4b30      	ldr	r3, [pc, #192]	@ (800157c <SystemClock_Config+0x104>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a2f      	ldr	r2, [pc, #188]	@ (800157c <SystemClock_Config+0x104>)
 80014be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <SystemClock_Config+0x104>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014d0:	bf00      	nop
 80014d2:	4b2a      	ldr	r3, [pc, #168]	@ (800157c <SystemClock_Config+0x104>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014de:	d1f8      	bne.n	80014d2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80014e0:	2321      	movs	r3, #33	@ 0x21
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014ea:	2301      	movs	r3, #1
 80014ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ee:	2302      	movs	r3, #2
 80014f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f2:	2302      	movs	r3, #2
 80014f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014f6:	2308      	movs	r3, #8
 80014f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 480;
 80014fa:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80014fe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001500:	2302      	movs	r3, #2
 8001502:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001504:	2304      	movs	r3, #4
 8001506:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001508:	2302      	movs	r3, #2
 800150a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800150c:	2300      	movs	r3, #0
 800150e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001510:	2300      	movs	r3, #0
 8001512:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151c:	4618      	mov	r0, r3
 800151e:	f003 f83d 	bl	800459c <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001528:	f000 f82a 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	233f      	movs	r3, #63	@ 0x3f
 800152e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001530:	2303      	movs	r3, #3
 8001532:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001538:	2308      	movs	r3, #8
 800153a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2101      	movs	r1, #1
 8001550:	4618      	mov	r0, r3
 8001552:	f003 fc7d 	bl	8004e50 <HAL_RCC_ClockConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800155c:	f000 f810 	bl	8001580 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8001560:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001564:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 8001568:	2000      	movs	r0, #0
 800156a:	f003 fe27 	bl	80051bc <HAL_RCC_MCOConfig>
}
 800156e:	bf00      	nop
 8001570:	3770      	adds	r7, #112	@ 0x70
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	58000400 	.word	0x58000400
 800157c:	58024800 	.word	0x58024800

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <Error_Handler+0x8>

0800158c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001590:	4b28      	ldr	r3, [pc, #160]	@ (8001634 <MX_SPI1_Init+0xa8>)
 8001592:	4a29      	ldr	r2, [pc, #164]	@ (8001638 <MX_SPI1_Init+0xac>)
 8001594:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001596:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <MX_SPI1_Init+0xa8>)
 8001598:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800159c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800159e:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80015a4:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015a6:	2203      	movs	r2, #3
 80015a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015bc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d0:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d6:	4b17      	ldr	r3, [pc, #92]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80015dc:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015e2:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015f0:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001602:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <MX_SPI1_Init+0xa8>)
 8001604:	2200      	movs	r2, #0
 8001606:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001608:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <MX_SPI1_Init+0xa8>)
 800160a:	2200      	movs	r2, #0
 800160c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <MX_SPI1_Init+0xa8>)
 8001610:	2200      	movs	r2, #0
 8001612:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <MX_SPI1_Init+0xa8>)
 8001616:	2200      	movs	r2, #0
 8001618:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <MX_SPI1_Init+0xa8>)
 800161c:	2200      	movs	r2, #0
 800161e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	@ (8001634 <MX_SPI1_Init+0xa8>)
 8001622:	f005 fe37 	bl	8007294 <HAL_SPI_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800162c:	f7ff ffa8 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	240002d8 	.word	0x240002d8
 8001638:	40013000 	.word	0x40013000

0800163c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0bc      	sub	sp, #240	@ 0xf0
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	22c0      	movs	r2, #192	@ 0xc0
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f008 fdb9 	bl	800a1d4 <memset>
  if(spiHandle->Instance==SPI1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a4b      	ldr	r2, [pc, #300]	@ (8001794 <HAL_SPI_MspInit+0x158>)
 8001668:	4293      	cmp	r3, r2
 800166a:	f040 808e 	bne.w	800178a <HAL_SPI_MspInit+0x14e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800166e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800167a:	2300      	movs	r3, #0
 800167c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167e:	f107 0318 	add.w	r3, r7, #24
 8001682:	4618      	mov	r0, r3
 8001684:	f003 ffda 	bl	800563c <HAL_RCCEx_PeriphCLKConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800168e:	f7ff ff77 	bl	8001580 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001692:	4b41      	ldr	r3, [pc, #260]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 8001694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001698:	4a3f      	ldr	r2, [pc, #252]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 800169a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800169e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b39      	ldr	r3, [pc, #228]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b6:	4a38      	ldr	r2, [pc, #224]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c0:	4b35      	ldr	r3, [pc, #212]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ce:	4b32      	ldr	r3, [pc, #200]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	4a30      	ldr	r2, [pc, #192]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016de:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f2:	4a29      	ldr	r2, [pc, #164]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fc:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800170a:	2320      	movs	r3, #32
 800170c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001722:	2305      	movs	r3, #5
 8001724:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800172c:	4619      	mov	r1, r3
 800172e:	481b      	ldr	r0, [pc, #108]	@ (800179c <HAL_SPI_MspInit+0x160>)
 8001730:	f001 fdcc 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800174c:	2305      	movs	r3, #5
 800174e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001752:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001756:	4619      	mov	r1, r3
 8001758:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <HAL_SPI_MspInit+0x164>)
 800175a:	f001 fdb7 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800175e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001778:	2305      	movs	r3, #5
 800177a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800177e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001782:	4619      	mov	r1, r3
 8001784:	4807      	ldr	r0, [pc, #28]	@ (80017a4 <HAL_SPI_MspInit+0x168>)
 8001786:	f001 fda1 	bl	80032cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800178a:	bf00      	nop
 800178c:	37f0      	adds	r7, #240	@ 0xf0
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40013000 	.word	0x40013000
 8001798:	58024400 	.word	0x58024400
 800179c:	58020000 	.word	0x58020000
 80017a0:	58020c00 	.word	0x58020c00
 80017a4:	58021800 	.word	0x58021800

080017a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_MspInit+0x30>)
 80017b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017b4:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <HAL_MspInit+0x30>)
 80017b6:	f043 0302 	orr.w	r3, r3, #2
 80017ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_MspInit+0x30>)
 80017c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	58024400 	.word	0x58024400

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <NMI_Handler+0x4>

080017e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <MemManage_Handler+0x4>

080017f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <UsageFault_Handler+0x4>

08001804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001832:	f000 fc1b 	bl	800206c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <DCMI_IRQHandler+0x10>)
 8001842:	f000 fe01 	bl	8002448 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	24000144 	.word	0x24000144

08001850 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001858:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
		errno = ENOMEM;
 8001880:	f008 fcb0 	bl	800a1e4 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	24080000 	.word	0x24080000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	24000360 	.word	0x24000360
 80018b8:	24000ac0 	.word	0x24000ac0

080018bc <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80018c0:	4b37      	ldr	r3, [pc, #220]	@ (80019a0 <SystemInit+0xe4>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c6:	4a36      	ldr	r2, [pc, #216]	@ (80019a0 <SystemInit+0xe4>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80018d0:	4b34      	ldr	r3, [pc, #208]	@ (80019a4 <SystemInit+0xe8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	2b06      	cmp	r3, #6
 80018da:	d807      	bhi.n	80018ec <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80018dc:	4b31      	ldr	r3, [pc, #196]	@ (80019a4 <SystemInit+0xe8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 030f 	bic.w	r3, r3, #15
 80018e4:	4a2f      	ldr	r2, [pc, #188]	@ (80019a4 <SystemInit+0xe8>)
 80018e6:	f043 0307 	orr.w	r3, r3, #7
 80018ea:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80018ec:	4b2e      	ldr	r3, [pc, #184]	@ (80019a8 <SystemInit+0xec>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2d      	ldr	r2, [pc, #180]	@ (80019a8 <SystemInit+0xec>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80018f8:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <SystemInit+0xec>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80018fe:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <SystemInit+0xec>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4929      	ldr	r1, [pc, #164]	@ (80019a8 <SystemInit+0xec>)
 8001904:	4b29      	ldr	r3, [pc, #164]	@ (80019ac <SystemInit+0xf0>)
 8001906:	4013      	ands	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800190a:	4b26      	ldr	r3, [pc, #152]	@ (80019a4 <SystemInit+0xe8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001916:	4b23      	ldr	r3, [pc, #140]	@ (80019a4 <SystemInit+0xe8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 030f 	bic.w	r3, r3, #15
 800191e:	4a21      	ldr	r2, [pc, #132]	@ (80019a4 <SystemInit+0xe8>)
 8001920:	f043 0307 	orr.w	r3, r3, #7
 8001924:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001926:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <SystemInit+0xec>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 800192c:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <SystemInit+0xec>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001932:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <SystemInit+0xec>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001938:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <SystemInit+0xec>)
 800193a:	4a1d      	ldr	r2, [pc, #116]	@ (80019b0 <SystemInit+0xf4>)
 800193c:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800193e:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <SystemInit+0xec>)
 8001940:	4a1c      	ldr	r2, [pc, #112]	@ (80019b4 <SystemInit+0xf8>)
 8001942:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001944:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <SystemInit+0xec>)
 8001946:	4a1c      	ldr	r2, [pc, #112]	@ (80019b8 <SystemInit+0xfc>)
 8001948:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <SystemInit+0xec>)
 800194c:	2200      	movs	r2, #0
 800194e:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001950:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <SystemInit+0xec>)
 8001952:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <SystemInit+0xfc>)
 8001954:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001956:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <SystemInit+0xec>)
 8001958:	2200      	movs	r2, #0
 800195a:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <SystemInit+0xec>)
 800195e:	4a16      	ldr	r2, [pc, #88]	@ (80019b8 <SystemInit+0xfc>)
 8001960:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <SystemInit+0xec>)
 8001964:	2200      	movs	r2, #0
 8001966:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001968:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <SystemInit+0xec>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0e      	ldr	r2, [pc, #56]	@ (80019a8 <SystemInit+0xec>)
 800196e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001972:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <SystemInit+0xec>)
 8001976:	2200      	movs	r2, #0
 8001978:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <SystemInit+0x100>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <SystemInit+0x104>)
 8001980:	4013      	ands	r3, r2
 8001982:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001986:	d202      	bcs.n	800198e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <SystemInit+0x108>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <SystemInit+0x10c>)
 8001990:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001994:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00
 80019a4:	52002000 	.word	0x52002000
 80019a8:	58024400 	.word	0x58024400
 80019ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80019b0:	02020200 	.word	0x02020200
 80019b4:	01ff0000 	.word	0x01ff0000
 80019b8:	01010280 	.word	0x01010280
 80019bc:	5c001000 	.word	0x5c001000
 80019c0:	ffff0000 	.word	0xffff0000
 80019c4:	51008108 	.word	0x51008108
 80019c8:	52004000 	.word	0x52004000

080019cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e2:	463b      	mov	r3, r7
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ec:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 80019ee:	4a21      	ldr	r2, [pc, #132]	@ (8001a74 <MX_TIM1_Init+0xa8>)
 80019f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a12:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a18:	4815      	ldr	r0, [pc, #84]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a1a:	f005 fd7a 	bl	8007512 <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001a24:	f7ff fdac 	bl	8001580 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4619      	mov	r1, r3
 8001a36:	480e      	ldr	r0, [pc, #56]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a38:	f006 f93e 	bl	8007cb8 <HAL_TIM_SlaveConfigSynchro>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a42:	f7ff fd9d 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a52:	463b      	mov	r3, r7
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a58:	f006 fe9a 	bl	8008790 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001a62:	f7ff fd8d 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	3720      	adds	r7, #32
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	24000364 	.word	0x24000364
 8001a74:	40010000 	.word	0x40010000

08001a78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	@ 0x38
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001aac:	4a2c      	ldr	r2, [pc, #176]	@ (8001b60 <MX_TIM4_Init+0xe8>)
 8001aae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	4b29      	ldr	r3, [pc, #164]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8001abc:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001abe:	2209      	movs	r2, #9
 8001ac0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b26      	ldr	r3, [pc, #152]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac8:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ace:	4823      	ldr	r0, [pc, #140]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001ad0:	f005 fd1f 	bl	8007512 <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ada:	f7ff fd51 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ae4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	481c      	ldr	r0, [pc, #112]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001aec:	f005 ffec 	bl	8007ac8 <HAL_TIM_ConfigClockSource>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001af6:	f7ff fd43 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001afa:	4818      	ldr	r0, [pc, #96]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001afc:	f005 fd60 	bl	80075c0 <HAL_TIM_PWM_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b06:	f7ff fd3b 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	4810      	ldr	r0, [pc, #64]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001b1a:	f006 fe39 	bl	8008790 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b24:	f7ff fd2c 	bl	8001580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b28:	2360      	movs	r3, #96	@ 0x60
 8001b2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4807      	ldr	r0, [pc, #28]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001b40:	f005 feae 	bl	80078a0 <HAL_TIM_PWM_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b4a:	f7ff fd19 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b4e:	4803      	ldr	r0, [pc, #12]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001b50:	f000 f842 	bl	8001bd8 <HAL_TIM_MspPostInit>

}
 8001b54:	bf00      	nop
 8001b56:	3738      	adds	r7, #56	@ 0x38
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	240003b0 	.word	0x240003b0
 8001b60:	40000800 	.word	0x40000800

08001b64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a16      	ldr	r2, [pc, #88]	@ (8001bcc <HAL_TIM_Base_MspInit+0x68>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d10f      	bne.n	8001b96 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b76:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b7c:	4a14      	ldr	r2, [pc, #80]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b86:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b94:	e013      	b.n	8001bbe <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM4)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x70>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d10e      	bne.n	8001bbe <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001ba2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bb0:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40010000 	.word	0x40010000
 8001bd0:	58024400 	.word	0x58024400
 8001bd4:	40000800 	.word	0x40000800

08001bd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <HAL_TIM_MspPostInit+0x68>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d11e      	bne.n	8001c38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_TIM_MspPostInit+0x6c>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c00:	4a10      	ldr	r2, [pc, #64]	@ (8001c44 <HAL_TIM_MspPostInit+0x6c>)
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_TIM_MspPostInit+0x6c>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c18:	2340      	movs	r3, #64	@ 0x40
 8001c1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	4619      	mov	r1, r3
 8001c32:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <HAL_TIM_MspPostInit+0x70>)
 8001c34:	f001 fb4a 	bl	80032cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40000800 	.word	0x40000800
 8001c44:	58024400 	.word	0x58024400
 8001c48:	58020400 	.word	0x58020400

08001c4c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c50:	4b22      	ldr	r3, [pc, #136]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c52:	4a23      	ldr	r2, [pc, #140]	@ (8001ce0 <MX_USART3_UART_Init+0x94>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c56:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b17      	ldr	r3, [pc, #92]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c82:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c94:	4811      	ldr	r0, [pc, #68]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c96:	f006 fe09 	bl	80088ac <HAL_UART_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ca0:	f7ff fc6e 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001ca8:	f007 fe9f 	bl	80099ea <HAL_UARTEx_SetTxFifoThreshold>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001cb2:	f7ff fc65 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4808      	ldr	r0, [pc, #32]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001cba:	f007 fed4 	bl	8009a66 <HAL_UARTEx_SetRxFifoThreshold>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001cc4:	f7ff fc5c 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001cc8:	4804      	ldr	r0, [pc, #16]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001cca:	f007 fe55 	bl	8009978 <HAL_UARTEx_DisableFifoMode>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001cd4:	f7ff fc54 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	240003fc 	.word	0x240003fc
 8001ce0:	40004800 	.word	0x40004800

08001ce4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b0ba      	sub	sp, #232	@ 0xe8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	22c0      	movs	r2, #192	@ 0xc0
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f008 fa65 	bl	800a1d4 <memset>
  if(uartHandle->Instance==USART3)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a2f      	ldr	r2, [pc, #188]	@ (8001dcc <HAL_UART_MspInit+0xe8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d156      	bne.n	8001dc2 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d14:	f04f 0202 	mov.w	r2, #2
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001d20:	2304      	movs	r3, #4
 8001d22:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 240;
 8001d24:	23f0      	movs	r3, #240	@ 0xf0
 8001d26:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001d30:	2302      	movs	r3, #2
 8001d32:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001d34:	2340      	movs	r3, #64	@ 0x40
 8001d36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8001d40:	2301      	movs	r3, #1
 8001d42:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 fc76 	bl	800563c <HAL_RCCEx_PeriphCLKConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8001d56:	f7ff fc13 	bl	8001580 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd0 <HAL_UART_MspInit+0xec>)
 8001d5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d60:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd0 <HAL_UART_MspInit+0xec>)
 8001d62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d6a:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_UART_MspInit+0xec>)
 8001d6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d78:	4b15      	ldr	r3, [pc, #84]	@ (8001dd0 <HAL_UART_MspInit+0xec>)
 8001d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d7e:	4a14      	ldr	r2, [pc, #80]	@ (8001dd0 <HAL_UART_MspInit+0xec>)
 8001d80:	f043 0308 	orr.w	r3, r3, #8
 8001d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d88:	4b11      	ldr	r3, [pc, #68]	@ (8001dd0 <HAL_UART_MspInit+0xec>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d8e:	f003 0308 	and.w	r3, r3, #8
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d96:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001db0:	2307      	movs	r3, #7
 8001db2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <HAL_UART_MspInit+0xf0>)
 8001dbe:	f001 fa85 	bl	80032cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	37e8      	adds	r7, #232	@ 0xe8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40004800 	.word	0x40004800
 8001dd0:	58024400 	.word	0x58024400
 8001dd4:	58020c00 	.word	0x58020c00

08001dd8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001ddc:	4b15      	ldr	r3, [pc, #84]	@ (8001e34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dde:	4a16      	ldr	r2, [pc, #88]	@ (8001e38 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001de0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001de2:	4b14      	ldr	r3, [pc, #80]	@ (8001e34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001de4:	2209      	movs	r2, #9
 8001de6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001de8:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dea:	2202      	movs	r2, #2
 8001dec:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001dee:	4b11      	ldr	r3, [pc, #68]	@ (8001e34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001df4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001df6:	2202      	movs	r2, #2
 8001df8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e00:	4b0c      	ldr	r3, [pc, #48]	@ (8001e34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	@ (8001e34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e12:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	@ (8001e34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e20:	f002 fa41 	bl	80042a6 <HAL_PCD_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001e2a:	f7ff fba9 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	24000490 	.word	0x24000490
 8001e38:	40080000 	.word	0x40080000

08001e3c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b0ba      	sub	sp, #232	@ 0xe8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	22c0      	movs	r2, #192	@ 0xc0
 8001e5a:	2100      	movs	r1, #0
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f008 f9b9 	bl	800a1d4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a30      	ldr	r2, [pc, #192]	@ (8001f28 <HAL_PCD_MspInit+0xec>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d159      	bne.n	8001f20 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e6c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001e78:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	4618      	mov	r0, r3
 8001e86:	f003 fbd9 	bl	800563c <HAL_RCCEx_PeriphCLKConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001e90:	f7ff fb76 	bl	8001580 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001e94:	f002 fb72 	bl	800457c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e98:	4b24      	ldr	r3, [pc, #144]	@ (8001f2c <HAL_PCD_MspInit+0xf0>)
 8001e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e9e:	4a23      	ldr	r2, [pc, #140]	@ (8001f2c <HAL_PCD_MspInit+0xf0>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ea8:	4b20      	ldr	r3, [pc, #128]	@ (8001f2c <HAL_PCD_MspInit+0xf0>)
 8001eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001eb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4817      	ldr	r0, [pc, #92]	@ (8001f30 <HAL_PCD_MspInit+0xf4>)
 8001ed2:	f001 f9fb 	bl	80032cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ed6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001eda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ede:	2302      	movs	r3, #2
 8001ee0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001ef0:	230a      	movs	r3, #10
 8001ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001efa:	4619      	mov	r1, r3
 8001efc:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <HAL_PCD_MspInit+0xf4>)
 8001efe:	f001 f9e5 	bl	80032cc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f02:	4b0a      	ldr	r3, [pc, #40]	@ (8001f2c <HAL_PCD_MspInit+0xf0>)
 8001f04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f08:	4a08      	ldr	r2, [pc, #32]	@ (8001f2c <HAL_PCD_MspInit+0xf0>)
 8001f0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f12:	4b06      	ldr	r3, [pc, #24]	@ (8001f2c <HAL_PCD_MspInit+0xf0>)
 8001f14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001f20:	bf00      	nop
 8001f22:	37e8      	adds	r7, #232	@ 0xe8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40080000 	.word	0x40080000
 8001f2c:	58024400 	.word	0x58024400
 8001f30:	58020000 	.word	0x58020000

08001f34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f38:	f7ff fcc0 	bl	80018bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f3c:	480c      	ldr	r0, [pc, #48]	@ (8001f70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f3e:	490d      	ldr	r1, [pc, #52]	@ (8001f74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f40:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f44:	e002      	b.n	8001f4c <LoopCopyDataInit>

08001f46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4a:	3304      	adds	r3, #4

08001f4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f50:	d3f9      	bcc.n	8001f46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f54:	4c0a      	ldr	r4, [pc, #40]	@ (8001f80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f58:	e001      	b.n	8001f5e <LoopFillZerobss>

08001f5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f5c:	3204      	adds	r2, #4

08001f5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f60:	d3fb      	bcc.n	8001f5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f62:	f008 f945 	bl	800a1f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f66:	f7ff fa0f 	bl	8001388 <main>
  bx  lr
 8001f6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f6c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f74:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001f78:	0800ac2c 	.word	0x0800ac2c
  ldr r2, =_sbss
 8001f7c:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001f80:	24000ac0 	.word	0x24000ac0

08001f84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f84:	e7fe      	b.n	8001f84 <ADC3_IRQHandler>
	...

08001f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f8e:	2003      	movs	r0, #3
 8001f90:	f000 f9a0 	bl	80022d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f94:	f003 f97c 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b15      	ldr	r3, [pc, #84]	@ (8001ff0 <HAL_Init+0x68>)
 8001f9c:	699b      	ldr	r3, [r3, #24]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	4913      	ldr	r1, [pc, #76]	@ (8001ff4 <HAL_Init+0x6c>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <HAL_Init+0x68>)
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	4a0e      	ldr	r2, [pc, #56]	@ (8001ff4 <HAL_Init+0x6c>)
 8001fbc:	5cd3      	ldrb	r3, [r2, r3]
 8001fbe:	f003 031f 	and.w	r3, r3, #31
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff8 <HAL_Init+0x70>)
 8001fca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8001ffc <HAL_Init+0x74>)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f000 f814 	bl	8002000 <HAL_InitTick>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e002      	b.n	8001fe8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fe2:	f7ff fbe1 	bl	80017a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	58024400 	.word	0x58024400
 8001ff4:	0800abb0 	.word	0x0800abb0
 8001ff8:	24000008 	.word	0x24000008
 8001ffc:	24000004 	.word	0x24000004

08002000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002008:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <HAL_InitTick+0x60>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e021      	b.n	8002058 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002014:	4b13      	ldr	r3, [pc, #76]	@ (8002064 <HAL_InitTick+0x64>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <HAL_InitTick+0x60>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002022:	fbb3 f3f1 	udiv	r3, r3, r1
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	4618      	mov	r0, r3
 800202c:	f000 f985 	bl	800233a <HAL_SYSTICK_Config>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e00e      	b.n	8002058 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b0f      	cmp	r3, #15
 800203e:	d80a      	bhi.n	8002056 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002040:	2200      	movs	r2, #0
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	f04f 30ff 	mov.w	r0, #4294967295
 8002048:	f000 f94f 	bl	80022ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800204c:	4a06      	ldr	r2, [pc, #24]	@ (8002068 <HAL_InitTick+0x68>)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	24000010 	.word	0x24000010
 8002064:	24000004 	.word	0x24000004
 8002068:	2400000c 	.word	0x2400000c

0800206c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002070:	4b06      	ldr	r3, [pc, #24]	@ (800208c <HAL_IncTick+0x20>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	461a      	mov	r2, r3
 8002076:	4b06      	ldr	r3, [pc, #24]	@ (8002090 <HAL_IncTick+0x24>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4413      	add	r3, r2
 800207c:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <HAL_IncTick+0x24>)
 800207e:	6013      	str	r3, [r2, #0]
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	24000010 	.word	0x24000010
 8002090:	24000974 	.word	0x24000974

08002094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b03      	ldr	r3, [pc, #12]	@ (80020a8 <HAL_GetTick+0x14>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	24000974 	.word	0x24000974

080020ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020b4:	f7ff ffee 	bl	8002094 <HAL_GetTick>
 80020b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020c4:	d005      	beq.n	80020d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020c6:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <HAL_Delay+0x44>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4413      	add	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d2:	bf00      	nop
 80020d4:	f7ff ffde 	bl	8002094 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	68fa      	ldr	r2, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d8f7      	bhi.n	80020d4 <HAL_Delay+0x28>
  {
  }
}
 80020e4:	bf00      	nop
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	24000010 	.word	0x24000010

080020f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020f8:	4b03      	ldr	r3, [pc, #12]	@ (8002108 <HAL_GetREVID+0x14>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	0c1b      	lsrs	r3, r3, #16
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	5c001000 	.word	0x5c001000

0800210c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002114:	4b06      	ldr	r3, [pc, #24]	@ (8002130 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 800211c:	4904      	ldr	r1, [pc, #16]	@ (8002130 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	58000400 	.word	0x58000400

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <__NVIC_SetPriorityGrouping+0x40>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	4313      	orrs	r3, r2
 8002160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002162:	4a04      	ldr	r2, [pc, #16]	@ (8002174 <__NVIC_SetPriorityGrouping+0x40>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	60d3      	str	r3, [r2, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00
 8002178:	05fa0000 	.word	0x05fa0000

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	@ (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	db0b      	blt.n	80021c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	f003 021f 	and.w	r2, r3, #31
 80021b0:	4907      	ldr	r1, [pc, #28]	@ (80021d0 <__NVIC_EnableIRQ+0x38>)
 80021b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021b6:	095b      	lsrs	r3, r3, #5
 80021b8:	2001      	movs	r0, #1
 80021ba:	fa00 f202 	lsl.w	r2, r0, r2
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000e100 	.word	0xe000e100

080021d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	4603      	mov	r3, r0
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	db0a      	blt.n	80021fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	490c      	ldr	r1, [pc, #48]	@ (8002220 <__NVIC_SetPriority+0x4c>)
 80021ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f2:	0112      	lsls	r2, r2, #4
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	440b      	add	r3, r1
 80021f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021fc:	e00a      	b.n	8002214 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4908      	ldr	r1, [pc, #32]	@ (8002224 <__NVIC_SetPriority+0x50>)
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	3b04      	subs	r3, #4
 800220c:	0112      	lsls	r2, r2, #4
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	440b      	add	r3, r1
 8002212:	761a      	strb	r2, [r3, #24]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000e100 	.word	0xe000e100
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b480      	push	{r7}
 800222a:	b089      	sub	sp, #36	@ 0x24
 800222c:	af00      	add	r7, sp, #0
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f1c3 0307 	rsb	r3, r3, #7
 8002242:	2b04      	cmp	r3, #4
 8002244:	bf28      	it	cs
 8002246:	2304      	movcs	r3, #4
 8002248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	3304      	adds	r3, #4
 800224e:	2b06      	cmp	r3, #6
 8002250:	d902      	bls.n	8002258 <NVIC_EncodePriority+0x30>
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3b03      	subs	r3, #3
 8002256:	e000      	b.n	800225a <NVIC_EncodePriority+0x32>
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43da      	mvns	r2, r3
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	401a      	ands	r2, r3
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002270:	f04f 31ff 	mov.w	r1, #4294967295
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43d9      	mvns	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002280:	4313      	orrs	r3, r2
         );
}
 8002282:	4618      	mov	r0, r3
 8002284:	3724      	adds	r7, #36	@ 0x24
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3b01      	subs	r3, #1
 800229c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022a0:	d301      	bcc.n	80022a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022a2:	2301      	movs	r3, #1
 80022a4:	e00f      	b.n	80022c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a6:	4a0a      	ldr	r2, [pc, #40]	@ (80022d0 <SysTick_Config+0x40>)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ae:	210f      	movs	r1, #15
 80022b0:	f04f 30ff 	mov.w	r0, #4294967295
 80022b4:	f7ff ff8e 	bl	80021d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b8:	4b05      	ldr	r3, [pc, #20]	@ (80022d0 <SysTick_Config+0x40>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022be:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <SysTick_Config+0x40>)
 80022c0:	2207      	movs	r2, #7
 80022c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	e000e010 	.word	0xe000e010

080022d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ff29 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b086      	sub	sp, #24
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
 80022f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022f8:	f7ff ff40 	bl	800217c <__NVIC_GetPriorityGrouping>
 80022fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	6978      	ldr	r0, [r7, #20]
 8002304:	f7ff ff90 	bl	8002228 <NVIC_EncodePriority>
 8002308:	4602      	mov	r2, r0
 800230a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800230e:	4611      	mov	r1, r2
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff5f 	bl	80021d4 <__NVIC_SetPriority>
}
 8002316:	bf00      	nop
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff33 	bl	8002198 <__NVIC_EnableIRQ>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7ff ffa4 	bl	8002290 <SysTick_Config>
 8002348:	4603      	mov	r3, r0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
	...

08002354 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e069      	b.n	800243a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fc44 	bl	8000c00 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4b2a      	ldr	r3, [pc, #168]	@ (8002444 <HAL_DCMI_Init+0xf0>)
 800239a:	400b      	ands	r3, r1
 800239c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	6819      	ldr	r1, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80023b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80023be:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80023ca:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80023d6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023dc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80023e2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b10      	cmp	r3, #16
 80023f2:	d112      	bne.n	800241a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7f1b      	ldrb	r3, [r3, #28]
 80023f8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7f5b      	ldrb	r3, [r3, #29]
 80023fe:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002400:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7f9b      	ldrb	r3, [r3, #30]
 8002406:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002408:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7fdb      	ldrb	r3, [r3, #31]
 8002410:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002416:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002418:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 021e 	orr.w	r2, r2, #30
 8002428:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	ffe0f007 	.word	0xffe0f007

08002448 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f003 0304 	and.w	r3, r3, #4
 800245e:	2b00      	cmp	r3, #0
 8002460:	d016      	beq.n	8002490 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2204      	movs	r2, #4
 8002468:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	f043 0202 	orr.w	r2, r3, #2
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2204      	movs	r2, #4
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002482:	4a31      	ldr	r2, [pc, #196]	@ (8002548 <HAL_DCMI_IRQHandler+0x100>)
 8002484:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f8a4 	bl	80025d8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d016      	beq.n	80024c8 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2202      	movs	r2, #2
 80024a0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a6:	f043 0201 	orr.w	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2204      	movs	r2, #4
 80024b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ba:	4a23      	ldr	r2, [pc, #140]	@ (8002548 <HAL_DCMI_IRQHandler+0x100>)
 80024bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f888 	bl	80025d8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d006      	beq.n	80024e0 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2210      	movs	r2, #16
 80024d8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f840 	bl	8002560 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d006      	beq.n	80024f8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2208      	movs	r2, #8
 80024f0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f83e 	bl	8002574 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d01d      	beq.n	800253e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0302 	and.w	r3, r3, #2
 800250c:	2b02      	cmp	r3, #2
 800250e:	d107      	bne.n	8002520 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 021e 	bic.w	r2, r2, #30
 800251e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68da      	ldr	r2, [r3, #12]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2201      	movs	r2, #1
 8002536:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f825 	bl	8002588 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800253e:	bf00      	nop
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	0800259d 	.word	0x0800259d

0800254c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025a8:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d009      	beq.n	80025c8 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f7ff ffbf 	bl	800254c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e237      	b.n	8002a5a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d004      	beq.n	8002600 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2280      	movs	r2, #128	@ 0x80
 80025fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e22c      	b.n	8002a5a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a5c      	ldr	r2, [pc, #368]	@ (8002778 <HAL_DMA_Abort_IT+0x1a0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d04a      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a5b      	ldr	r2, [pc, #364]	@ (800277c <HAL_DMA_Abort_IT+0x1a4>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d045      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a59      	ldr	r2, [pc, #356]	@ (8002780 <HAL_DMA_Abort_IT+0x1a8>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d040      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a58      	ldr	r2, [pc, #352]	@ (8002784 <HAL_DMA_Abort_IT+0x1ac>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d03b      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a56      	ldr	r2, [pc, #344]	@ (8002788 <HAL_DMA_Abort_IT+0x1b0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d036      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a55      	ldr	r2, [pc, #340]	@ (800278c <HAL_DMA_Abort_IT+0x1b4>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d031      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a53      	ldr	r2, [pc, #332]	@ (8002790 <HAL_DMA_Abort_IT+0x1b8>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d02c      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a52      	ldr	r2, [pc, #328]	@ (8002794 <HAL_DMA_Abort_IT+0x1bc>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d027      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a50      	ldr	r2, [pc, #320]	@ (8002798 <HAL_DMA_Abort_IT+0x1c0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d022      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a4f      	ldr	r2, [pc, #316]	@ (800279c <HAL_DMA_Abort_IT+0x1c4>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d01d      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a4d      	ldr	r2, [pc, #308]	@ (80027a0 <HAL_DMA_Abort_IT+0x1c8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d018      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a4c      	ldr	r2, [pc, #304]	@ (80027a4 <HAL_DMA_Abort_IT+0x1cc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d013      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a4a      	ldr	r2, [pc, #296]	@ (80027a8 <HAL_DMA_Abort_IT+0x1d0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00e      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a49      	ldr	r2, [pc, #292]	@ (80027ac <HAL_DMA_Abort_IT+0x1d4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d009      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a47      	ldr	r2, [pc, #284]	@ (80027b0 <HAL_DMA_Abort_IT+0x1d8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d004      	beq.n	80026a0 <HAL_DMA_Abort_IT+0xc8>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a46      	ldr	r2, [pc, #280]	@ (80027b4 <HAL_DMA_Abort_IT+0x1dc>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d101      	bne.n	80026a4 <HAL_DMA_Abort_IT+0xcc>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e000      	b.n	80026a6 <HAL_DMA_Abort_IT+0xce>
 80026a4:	2300      	movs	r3, #0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8086 	beq.w	80027b8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2204      	movs	r2, #4
 80026b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002778 <HAL_DMA_Abort_IT+0x1a0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d04a      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a2e      	ldr	r2, [pc, #184]	@ (800277c <HAL_DMA_Abort_IT+0x1a4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d045      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a2c      	ldr	r2, [pc, #176]	@ (8002780 <HAL_DMA_Abort_IT+0x1a8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d040      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a2b      	ldr	r2, [pc, #172]	@ (8002784 <HAL_DMA_Abort_IT+0x1ac>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d03b      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a29      	ldr	r2, [pc, #164]	@ (8002788 <HAL_DMA_Abort_IT+0x1b0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d036      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a28      	ldr	r2, [pc, #160]	@ (800278c <HAL_DMA_Abort_IT+0x1b4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d031      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a26      	ldr	r2, [pc, #152]	@ (8002790 <HAL_DMA_Abort_IT+0x1b8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d02c      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a25      	ldr	r2, [pc, #148]	@ (8002794 <HAL_DMA_Abort_IT+0x1bc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d027      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a23      	ldr	r2, [pc, #140]	@ (8002798 <HAL_DMA_Abort_IT+0x1c0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d022      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a22      	ldr	r2, [pc, #136]	@ (800279c <HAL_DMA_Abort_IT+0x1c4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d01d      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a20      	ldr	r2, [pc, #128]	@ (80027a0 <HAL_DMA_Abort_IT+0x1c8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d018      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a1f      	ldr	r2, [pc, #124]	@ (80027a4 <HAL_DMA_Abort_IT+0x1cc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d013      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a1d      	ldr	r2, [pc, #116]	@ (80027a8 <HAL_DMA_Abort_IT+0x1d0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00e      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a1c      	ldr	r2, [pc, #112]	@ (80027ac <HAL_DMA_Abort_IT+0x1d4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d009      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a1a      	ldr	r2, [pc, #104]	@ (80027b0 <HAL_DMA_Abort_IT+0x1d8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d004      	beq.n	8002754 <HAL_DMA_Abort_IT+0x17c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a19      	ldr	r2, [pc, #100]	@ (80027b4 <HAL_DMA_Abort_IT+0x1dc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d108      	bne.n	8002766 <HAL_DMA_Abort_IT+0x18e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0201 	bic.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	e178      	b.n	8002a58 <HAL_DMA_Abort_IT+0x480>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 0201 	bic.w	r2, r2, #1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	e16f      	b.n	8002a58 <HAL_DMA_Abort_IT+0x480>
 8002778:	40020010 	.word	0x40020010
 800277c:	40020028 	.word	0x40020028
 8002780:	40020040 	.word	0x40020040
 8002784:	40020058 	.word	0x40020058
 8002788:	40020070 	.word	0x40020070
 800278c:	40020088 	.word	0x40020088
 8002790:	400200a0 	.word	0x400200a0
 8002794:	400200b8 	.word	0x400200b8
 8002798:	40020410 	.word	0x40020410
 800279c:	40020428 	.word	0x40020428
 80027a0:	40020440 	.word	0x40020440
 80027a4:	40020458 	.word	0x40020458
 80027a8:	40020470 	.word	0x40020470
 80027ac:	40020488 	.word	0x40020488
 80027b0:	400204a0 	.word	0x400204a0
 80027b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 020e 	bic.w	r2, r2, #14
 80027c6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a6c      	ldr	r2, [pc, #432]	@ (8002980 <HAL_DMA_Abort_IT+0x3a8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d04a      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a6b      	ldr	r2, [pc, #428]	@ (8002984 <HAL_DMA_Abort_IT+0x3ac>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d045      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a69      	ldr	r2, [pc, #420]	@ (8002988 <HAL_DMA_Abort_IT+0x3b0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d040      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a68      	ldr	r2, [pc, #416]	@ (800298c <HAL_DMA_Abort_IT+0x3b4>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d03b      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a66      	ldr	r2, [pc, #408]	@ (8002990 <HAL_DMA_Abort_IT+0x3b8>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d036      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a65      	ldr	r2, [pc, #404]	@ (8002994 <HAL_DMA_Abort_IT+0x3bc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d031      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a63      	ldr	r2, [pc, #396]	@ (8002998 <HAL_DMA_Abort_IT+0x3c0>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d02c      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a62      	ldr	r2, [pc, #392]	@ (800299c <HAL_DMA_Abort_IT+0x3c4>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d027      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a60      	ldr	r2, [pc, #384]	@ (80029a0 <HAL_DMA_Abort_IT+0x3c8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d022      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a5f      	ldr	r2, [pc, #380]	@ (80029a4 <HAL_DMA_Abort_IT+0x3cc>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d01d      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a5d      	ldr	r2, [pc, #372]	@ (80029a8 <HAL_DMA_Abort_IT+0x3d0>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d018      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a5c      	ldr	r2, [pc, #368]	@ (80029ac <HAL_DMA_Abort_IT+0x3d4>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d013      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a5a      	ldr	r2, [pc, #360]	@ (80029b0 <HAL_DMA_Abort_IT+0x3d8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00e      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a59      	ldr	r2, [pc, #356]	@ (80029b4 <HAL_DMA_Abort_IT+0x3dc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d009      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a57      	ldr	r2, [pc, #348]	@ (80029b8 <HAL_DMA_Abort_IT+0x3e0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d004      	beq.n	8002868 <HAL_DMA_Abort_IT+0x290>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a56      	ldr	r2, [pc, #344]	@ (80029bc <HAL_DMA_Abort_IT+0x3e4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d108      	bne.n	800287a <HAL_DMA_Abort_IT+0x2a2>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 0201 	bic.w	r2, r2, #1
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	e007      	b.n	800288a <HAL_DMA_Abort_IT+0x2b2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a3c      	ldr	r2, [pc, #240]	@ (8002980 <HAL_DMA_Abort_IT+0x3a8>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d072      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a3a      	ldr	r2, [pc, #232]	@ (8002984 <HAL_DMA_Abort_IT+0x3ac>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d06d      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a39      	ldr	r2, [pc, #228]	@ (8002988 <HAL_DMA_Abort_IT+0x3b0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d068      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a37      	ldr	r2, [pc, #220]	@ (800298c <HAL_DMA_Abort_IT+0x3b4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d063      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a36      	ldr	r2, [pc, #216]	@ (8002990 <HAL_DMA_Abort_IT+0x3b8>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d05e      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a34      	ldr	r2, [pc, #208]	@ (8002994 <HAL_DMA_Abort_IT+0x3bc>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d059      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a33      	ldr	r2, [pc, #204]	@ (8002998 <HAL_DMA_Abort_IT+0x3c0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d054      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a31      	ldr	r2, [pc, #196]	@ (800299c <HAL_DMA_Abort_IT+0x3c4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d04f      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a30      	ldr	r2, [pc, #192]	@ (80029a0 <HAL_DMA_Abort_IT+0x3c8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d04a      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2e      	ldr	r2, [pc, #184]	@ (80029a4 <HAL_DMA_Abort_IT+0x3cc>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d045      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a2d      	ldr	r2, [pc, #180]	@ (80029a8 <HAL_DMA_Abort_IT+0x3d0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d040      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a2b      	ldr	r2, [pc, #172]	@ (80029ac <HAL_DMA_Abort_IT+0x3d4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d03b      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a2a      	ldr	r2, [pc, #168]	@ (80029b0 <HAL_DMA_Abort_IT+0x3d8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d036      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a28      	ldr	r2, [pc, #160]	@ (80029b4 <HAL_DMA_Abort_IT+0x3dc>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d031      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a27      	ldr	r2, [pc, #156]	@ (80029b8 <HAL_DMA_Abort_IT+0x3e0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d02c      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a25      	ldr	r2, [pc, #148]	@ (80029bc <HAL_DMA_Abort_IT+0x3e4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d027      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a24      	ldr	r2, [pc, #144]	@ (80029c0 <HAL_DMA_Abort_IT+0x3e8>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d022      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a22      	ldr	r2, [pc, #136]	@ (80029c4 <HAL_DMA_Abort_IT+0x3ec>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01d      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a21      	ldr	r2, [pc, #132]	@ (80029c8 <HAL_DMA_Abort_IT+0x3f0>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d018      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a1f      	ldr	r2, [pc, #124]	@ (80029cc <HAL_DMA_Abort_IT+0x3f4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a1e      	ldr	r2, [pc, #120]	@ (80029d0 <HAL_DMA_Abort_IT+0x3f8>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00e      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a1c      	ldr	r2, [pc, #112]	@ (80029d4 <HAL_DMA_Abort_IT+0x3fc>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d009      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a1b      	ldr	r2, [pc, #108]	@ (80029d8 <HAL_DMA_Abort_IT+0x400>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_DMA_Abort_IT+0x3a2>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a19      	ldr	r2, [pc, #100]	@ (80029dc <HAL_DMA_Abort_IT+0x404>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d132      	bne.n	80029e0 <HAL_DMA_Abort_IT+0x408>
 800297a:	2301      	movs	r3, #1
 800297c:	e031      	b.n	80029e2 <HAL_DMA_Abort_IT+0x40a>
 800297e:	bf00      	nop
 8002980:	40020010 	.word	0x40020010
 8002984:	40020028 	.word	0x40020028
 8002988:	40020040 	.word	0x40020040
 800298c:	40020058 	.word	0x40020058
 8002990:	40020070 	.word	0x40020070
 8002994:	40020088 	.word	0x40020088
 8002998:	400200a0 	.word	0x400200a0
 800299c:	400200b8 	.word	0x400200b8
 80029a0:	40020410 	.word	0x40020410
 80029a4:	40020428 	.word	0x40020428
 80029a8:	40020440 	.word	0x40020440
 80029ac:	40020458 	.word	0x40020458
 80029b0:	40020470 	.word	0x40020470
 80029b4:	40020488 	.word	0x40020488
 80029b8:	400204a0 	.word	0x400204a0
 80029bc:	400204b8 	.word	0x400204b8
 80029c0:	58025408 	.word	0x58025408
 80029c4:	5802541c 	.word	0x5802541c
 80029c8:	58025430 	.word	0x58025430
 80029cc:	58025444 	.word	0x58025444
 80029d0:	58025458 	.word	0x58025458
 80029d4:	5802546c 	.word	0x5802546c
 80029d8:	58025480 	.word	0x58025480
 80029dc:	58025494 	.word	0x58025494
 80029e0:	2300      	movs	r3, #0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d028      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029f4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a00:	f003 031f 	and.w	r3, r3, #31
 8002a04:	2201      	movs	r2, #1
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a14:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00c      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a2c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a36:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop

08002a64 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e0e3      	b.n	8002c3e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d106      	bne.n	8002a8e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2223      	movs	r2, #35	@ 0x23
 8002a84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7fe f9dd 	bl	8000e48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8e:	4b6e      	ldr	r3, [pc, #440]	@ (8002c48 <HAL_ETH_Init+0x1e4>)
 8002a90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a94:	4a6c      	ldr	r2, [pc, #432]	@ (8002c48 <HAL_ETH_Init+0x1e4>)
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002c48 <HAL_ETH_Init+0x1e4>)
 8002aa0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7a1b      	ldrb	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d103      	bne.n	8002abc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	f7ff fb29 	bl	800210c <HAL_SYSCFG_ETHInterfaceSelect>
 8002aba:	e003      	b.n	8002ac4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002abc:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002ac0:	f7ff fb24 	bl	800210c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002ac4:	4b61      	ldr	r3, [pc, #388]	@ (8002c4c <HAL_ETH_Init+0x1e8>)
 8002ac6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	6812      	ldr	r2, [r2, #0]
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ade:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ae0:	f7ff fad8 	bl	8002094 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002ae6:	e011      	b.n	8002b0c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ae8:	f7ff fad4 	bl	8002094 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002af6:	d909      	bls.n	8002b0c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2204      	movs	r2, #4
 8002afc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	22e0      	movs	r2, #224	@ 0xe0
 8002b04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e098      	b.n	8002c3e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e4      	bne.n	8002ae8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f000 f89e 	bl	8002c60 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002b24:	f002 fd2e 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4a49      	ldr	r2, [pc, #292]	@ (8002c50 <HAL_ETH_Init+0x1ec>)
 8002b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b30:	0c9a      	lsrs	r2, r3, #18
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3a01      	subs	r2, #1
 8002b38:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 fa81 	bl	8003044 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b4a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002b4e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6812      	ldr	r2, [r2, #0]
 8002b56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002b5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b5e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d009      	beq.n	8002b82 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2201      	movs	r2, #1
 8002b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	22e0      	movs	r2, #224	@ 0xe0
 8002b7a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e05d      	b.n	8002c3e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b8a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002b8e:	4b31      	ldr	r3, [pc, #196]	@ (8002c54 <HAL_ETH_Init+0x1f0>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6952      	ldr	r2, [r2, #20]
 8002b96:	0051      	lsls	r1, r2, #1
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ba2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fae9 	bl	800317e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 fb2f 	bl	8003210 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	3305      	adds	r3, #5
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	3303      	adds	r3, #3
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	061a      	lsls	r2, r3, #24
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	3302      	adds	r3, #2
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	041b      	lsls	r3, r3, #16
 8002be4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	3301      	adds	r3, #1
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002bf0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002bfe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c00:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <HAL_ETH_Init+0x1f4>)
 8002c12:	430b      	orrs	r3, r1
 8002c14:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	4b0d      	ldr	r3, [pc, #52]	@ (8002c5c <HAL_ETH_Init+0x1f8>)
 8002c26:	430b      	orrs	r3, r1
 8002c28:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2210      	movs	r2, #16
 8002c38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	58024400 	.word	0x58024400
 8002c4c:	58000400 	.word	0x58000400
 8002c50:	431bde83 	.word	0x431bde83
 8002c54:	ffff8001 	.word	0xffff8001
 8002c58:	0c020060 	.word	0x0c020060
 8002c5c:	0c20c000 	.word	0x0c20c000

08002c60 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c78:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c7a:	f002 fc83 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 8002c7e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	4a1a      	ldr	r2, [pc, #104]	@ (8002cec <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d804      	bhi.n	8002c92 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	e022      	b.n	8002cd8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4a16      	ldr	r2, [pc, #88]	@ (8002cf0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d204      	bcs.n	8002ca4 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e019      	b.n	8002cd8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	4a13      	ldr	r2, [pc, #76]	@ (8002cf4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d915      	bls.n	8002cd8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4a12      	ldr	r2, [pc, #72]	@ (8002cf8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d804      	bhi.n	8002cbe <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e00c      	b.n	8002cd8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8002cfc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d804      	bhi.n	8002cd0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	e003      	b.n	8002cd8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002cd6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002ce2:	bf00      	nop
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	02160ebf 	.word	0x02160ebf
 8002cf0:	03938700 	.word	0x03938700
 8002cf4:	05f5e0ff 	.word	0x05f5e0ff
 8002cf8:	08f0d17f 	.word	0x08f0d17f
 8002cfc:	0ee6b27f 	.word	0x0ee6b27f

08002d00 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002d12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	791b      	ldrb	r3, [r3, #4]
 8002d18:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002d1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	7b1b      	ldrb	r3, [r3, #12]
 8002d20:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002d22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	7b5b      	ldrb	r3, [r3, #13]
 8002d28:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	7b9b      	ldrb	r3, [r3, #14]
 8002d30:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	7bdb      	ldrb	r3, [r3, #15]
 8002d38:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d3a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	7c12      	ldrb	r2, [r2, #16]
 8002d40:	2a00      	cmp	r2, #0
 8002d42:	d102      	bne.n	8002d4a <ETH_SetMACConfig+0x4a>
 8002d44:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002d48:	e000      	b.n	8002d4c <ETH_SetMACConfig+0x4c>
 8002d4a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d4c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	7c52      	ldrb	r2, [r2, #17]
 8002d52:	2a00      	cmp	r2, #0
 8002d54:	d102      	bne.n	8002d5c <ETH_SetMACConfig+0x5c>
 8002d56:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d5a:	e000      	b.n	8002d5e <ETH_SetMACConfig+0x5e>
 8002d5c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	7c9b      	ldrb	r3, [r3, #18]
 8002d64:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d66:	431a      	orrs	r2, r3
               macconf->Speed |
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002d6c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002d72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	7f1b      	ldrb	r3, [r3, #28]
 8002d78:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002d7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	7f5b      	ldrb	r3, [r3, #29]
 8002d80:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002d82:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	7f92      	ldrb	r2, [r2, #30]
 8002d88:	2a00      	cmp	r2, #0
 8002d8a:	d102      	bne.n	8002d92 <ETH_SetMACConfig+0x92>
 8002d8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d90:	e000      	b.n	8002d94 <ETH_SetMACConfig+0x94>
 8002d92:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d94:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	7fdb      	ldrb	r3, [r3, #31]
 8002d9a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d9c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002da4:	2a00      	cmp	r2, #0
 8002da6:	d102      	bne.n	8002dae <ETH_SetMACConfig+0xae>
 8002da8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dac:	e000      	b.n	8002db0 <ETH_SetMACConfig+0xb0>
 8002dae:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002db0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002db6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002dbe:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002dc0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b56      	ldr	r3, [pc, #344]	@ (8002f2c <ETH_SetMACConfig+0x22c>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6812      	ldr	r2, [r2, #0]
 8002dd8:	68f9      	ldr	r1, [r7, #12]
 8002dda:	430b      	orrs	r3, r1
 8002ddc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002dea:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002dec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002df4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002df6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002dfe:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002e00:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002e08:	2a00      	cmp	r2, #0
 8002e0a:	d102      	bne.n	8002e12 <ETH_SetMACConfig+0x112>
 8002e0c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e10:	e000      	b.n	8002e14 <ETH_SetMACConfig+0x114>
 8002e12:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002e14:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	4b42      	ldr	r3, [pc, #264]	@ (8002f30 <ETH_SetMACConfig+0x230>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	6812      	ldr	r2, [r2, #0]
 8002e2c:	68f9      	ldr	r1, [r7, #12]
 8002e2e:	430b      	orrs	r3, r1
 8002e30:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e38:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	4b3a      	ldr	r3, [pc, #232]	@ (8002f34 <ETH_SetMACConfig+0x234>)
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	68f9      	ldr	r1, [r7, #12]
 8002e52:	430b      	orrs	r3, r1
 8002e54:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e5c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e62:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002e64:	683a      	ldr	r2, [r7, #0]
 8002e66:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002e6a:	2a00      	cmp	r2, #0
 8002e6c:	d101      	bne.n	8002e72 <ETH_SetMACConfig+0x172>
 8002e6e:	2280      	movs	r2, #128	@ 0x80
 8002e70:	e000      	b.n	8002e74 <ETH_SetMACConfig+0x174>
 8002e72:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002e74:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e7a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e86:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	68f9      	ldr	r1, [r7, #12]
 8002e92:	430b      	orrs	r3, r1
 8002e94:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002e9c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002ea4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb2:	f023 0103 	bic.w	r1, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002eca:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002ee6:	2a00      	cmp	r2, #0
 8002ee8:	d101      	bne.n	8002eee <ETH_SetMACConfig+0x1ee>
 8002eea:	2240      	movs	r2, #64	@ 0x40
 8002eec:	e000      	b.n	8002ef0 <ETH_SetMACConfig+0x1f0>
 8002eee:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002ef0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002ef8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002efa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002f02:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002f10:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	00048083 	.word	0x00048083
 8002f30:	c0f88000 	.word	0xc0f88000
 8002f34:	fffffef0 	.word	0xfffffef0

08002f38 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	4b38      	ldr	r3, [pc, #224]	@ (8003030 <ETH_SetDMAConfig+0xf8>)
 8002f4e:	4013      	ands	r3, r2
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	6811      	ldr	r1, [r2, #0]
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6812      	ldr	r2, [r2, #0]
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f5e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	791b      	ldrb	r3, [r3, #4]
 8002f64:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f6a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	7b1b      	ldrb	r3, [r3, #12]
 8002f70:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f72:	4313      	orrs	r3, r2
 8002f74:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	4b2c      	ldr	r3, [pc, #176]	@ (8003034 <ETH_SetDMAConfig+0xfc>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	68f9      	ldr	r1, [r7, #12]
 8002f8a:	430b      	orrs	r3, r1
 8002f8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f90:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	7b5b      	ldrb	r3, [r3, #13]
 8002f96:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fa8:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002fac:	4b22      	ldr	r3, [pc, #136]	@ (8003038 <ETH_SetDMAConfig+0x100>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	68f9      	ldr	r1, [r7, #12]
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fbc:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	7d1b      	ldrb	r3, [r3, #20]
 8002fc8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	7f5b      	ldrb	r3, [r3, #29]
 8002fd0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fde:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002fe2:	4b16      	ldr	r3, [pc, #88]	@ (800303c <ETH_SetDMAConfig+0x104>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	68f9      	ldr	r1, [r7, #12]
 8002fec:	430b      	orrs	r3, r1
 8002fee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002ff2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	7f1b      	ldrb	r3, [r3, #28]
 8002ffa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800300c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8003010:	4b0b      	ldr	r3, [pc, #44]	@ (8003040 <ETH_SetDMAConfig+0x108>)
 8003012:	4013      	ands	r3, r2
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	6812      	ldr	r2, [r2, #0]
 8003018:	68f9      	ldr	r1, [r7, #12]
 800301a:	430b      	orrs	r3, r1
 800301c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003020:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003024:	bf00      	nop
 8003026:	3714      	adds	r7, #20
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	ffff87fd 	.word	0xffff87fd
 8003034:	ffff2ffe 	.word	0xffff2ffe
 8003038:	fffec000 	.word	0xfffec000
 800303c:	ffc0efef 	.word	0xffc0efef
 8003040:	7fc0ffff 	.word	0x7fc0ffff

08003044 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b0a4      	sub	sp, #144	@ 0x90
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003052:	2300      	movs	r3, #0
 8003054:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800305c:	2300      	movs	r3, #0
 800305e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003068:	2301      	movs	r3, #1
 800306a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800306e:	2301      	movs	r3, #1
 8003070:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003074:	2300      	movs	r3, #0
 8003076:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800307a:	2301      	movs	r3, #1
 800307c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003080:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003084:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003086:	2300      	movs	r3, #0
 8003088:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800308c:	2300      	movs	r3, #0
 800308e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003090:	2300      	movs	r3, #0
 8003092:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003096:	2300      	movs	r3, #0
 8003098:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800309c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80030a0:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80030a8:	2300      	movs	r3, #0
 80030aa:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80030b8:	2300      	movs	r3, #0
 80030ba:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80030be:	2300      	movs	r3, #0
 80030c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80030c6:	2300      	movs	r3, #0
 80030c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80030dc:	2320      	movs	r3, #32
 80030de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80030e2:	2301      	movs	r3, #1
 80030e4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80030ee:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80030f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80030f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030f8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003100:	2302      	movs	r3, #2
 8003102:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003106:	2300      	movs	r3, #0
 8003108:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800310c:	2300      	movs	r3, #0
 800310e:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003118:	2301      	movs	r3, #1
 800311a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800311e:	2300      	movs	r3, #0
 8003120:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003128:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800312c:	4619      	mov	r1, r3
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fde6 	bl	8002d00 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003134:	2301      	movs	r3, #1
 8003136:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003138:	2301      	movs	r3, #1
 800313a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800313c:	2300      	movs	r3, #0
 800313e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003140:	2300      	movs	r3, #0
 8003142:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003146:	2300      	movs	r3, #0
 8003148:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800314a:	2300      	movs	r3, #0
 800314c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800314e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003152:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003154:	2300      	movs	r3, #0
 8003156:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003158:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800315c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800315e:	2300      	movs	r3, #0
 8003160:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003164:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003168:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800316a:	f107 0308 	add.w	r3, r7, #8
 800316e:	4619      	mov	r1, r3
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff fee1 	bl	8002f38 <ETH_SetDMAConfig>
}
 8003176:	bf00      	nop
 8003178:	3790      	adds	r7, #144	@ 0x90
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800317e:	b480      	push	{r7}
 8003180:	b085      	sub	sp, #20
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e01d      	b.n	80031c8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68d9      	ldr	r1, [r3, #12]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	440b      	add	r3, r1
 800319c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2200      	movs	r2, #0
 80031a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2200      	movs	r2, #0
 80031b4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	3206      	adds	r2, #6
 80031be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3301      	adds	r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b03      	cmp	r3, #3
 80031cc:	d9de      	bls.n	800318c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031dc:	461a      	mov	r2, r3
 80031de:	2303      	movs	r3, #3
 80031e0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031f0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003200:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003204:	bf00      	nop
 8003206:	3714      	adds	r7, #20
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	e023      	b.n	8003266 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6919      	ldr	r1, [r3, #16]
 8003222:	68fa      	ldr	r2, [r7, #12]
 8003224:	4613      	mov	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4413      	add	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	440b      	add	r3, r1
 800322e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2200      	movs	r2, #0
 8003234:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	2200      	movs	r2, #0
 800323a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2200      	movs	r2, #0
 8003240:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	2200      	movs	r2, #0
 8003246:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2200      	movs	r2, #0
 800324c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	2200      	movs	r2, #0
 8003252:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	3212      	adds	r2, #18
 800325c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	3301      	adds	r3, #1
 8003264:	60fb      	str	r3, [r7, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d9d8      	bls.n	800321e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003292:	461a      	mov	r2, r3
 8003294:	2303      	movs	r3, #3
 8003296:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032a6:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ba:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80032be:	bf00      	nop
 80032c0:	3714      	adds	r7, #20
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr
	...

080032cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b089      	sub	sp, #36	@ 0x24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80032da:	4b89      	ldr	r3, [pc, #548]	@ (8003500 <HAL_GPIO_Init+0x234>)
 80032dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032de:	e194      	b.n	800360a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	2101      	movs	r1, #1
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 8186 	beq.w	8003604 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b01      	cmp	r3, #1
 8003302:	d005      	beq.n	8003310 <HAL_GPIO_Init+0x44>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0303 	and.w	r3, r3, #3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d130      	bne.n	8003372 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	2203      	movs	r2, #3
 800331c:	fa02 f303 	lsl.w	r3, r2, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	4013      	ands	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003346:	2201      	movs	r2, #1
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	091b      	lsrs	r3, r3, #4
 800335c:	f003 0201 	and.w	r2, r3, #1
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	2b03      	cmp	r3, #3
 800337c:	d017      	beq.n	80033ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	2203      	movs	r2, #3
 800338a:	fa02 f303 	lsl.w	r3, r2, r3
 800338e:	43db      	mvns	r3, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4013      	ands	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f003 0303 	and.w	r3, r3, #3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d123      	bne.n	8003402 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	08da      	lsrs	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3208      	adds	r2, #8
 80033c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f003 0307 	and.w	r3, r3, #7
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	220f      	movs	r2, #15
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	43db      	mvns	r3, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4013      	ands	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	08da      	lsrs	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3208      	adds	r2, #8
 80033fc:	69b9      	ldr	r1, [r7, #24]
 80033fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	2203      	movs	r2, #3
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4013      	ands	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	f003 0203 	and.w	r2, r3, #3
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 80e0 	beq.w	8003604 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003444:	4b2f      	ldr	r3, [pc, #188]	@ (8003504 <HAL_GPIO_Init+0x238>)
 8003446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800344a:	4a2e      	ldr	r2, [pc, #184]	@ (8003504 <HAL_GPIO_Init+0x238>)
 800344c:	f043 0302 	orr.w	r3, r3, #2
 8003450:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003454:	4b2b      	ldr	r3, [pc, #172]	@ (8003504 <HAL_GPIO_Init+0x238>)
 8003456:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003462:	4a29      	ldr	r2, [pc, #164]	@ (8003508 <HAL_GPIO_Init+0x23c>)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	3302      	adds	r3, #2
 800346a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	220f      	movs	r2, #15
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a20      	ldr	r2, [pc, #128]	@ (800350c <HAL_GPIO_Init+0x240>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d052      	beq.n	8003534 <HAL_GPIO_Init+0x268>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a1f      	ldr	r2, [pc, #124]	@ (8003510 <HAL_GPIO_Init+0x244>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d031      	beq.n	80034fa <HAL_GPIO_Init+0x22e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a1e      	ldr	r2, [pc, #120]	@ (8003514 <HAL_GPIO_Init+0x248>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d02b      	beq.n	80034f6 <HAL_GPIO_Init+0x22a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003518 <HAL_GPIO_Init+0x24c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d025      	beq.n	80034f2 <HAL_GPIO_Init+0x226>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a1c      	ldr	r2, [pc, #112]	@ (800351c <HAL_GPIO_Init+0x250>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01f      	beq.n	80034ee <HAL_GPIO_Init+0x222>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a1b      	ldr	r2, [pc, #108]	@ (8003520 <HAL_GPIO_Init+0x254>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d019      	beq.n	80034ea <HAL_GPIO_Init+0x21e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003524 <HAL_GPIO_Init+0x258>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d013      	beq.n	80034e6 <HAL_GPIO_Init+0x21a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a19      	ldr	r2, [pc, #100]	@ (8003528 <HAL_GPIO_Init+0x25c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00d      	beq.n	80034e2 <HAL_GPIO_Init+0x216>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a18      	ldr	r2, [pc, #96]	@ (800352c <HAL_GPIO_Init+0x260>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d007      	beq.n	80034de <HAL_GPIO_Init+0x212>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a17      	ldr	r2, [pc, #92]	@ (8003530 <HAL_GPIO_Init+0x264>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d101      	bne.n	80034da <HAL_GPIO_Init+0x20e>
 80034d6:	2309      	movs	r3, #9
 80034d8:	e02d      	b.n	8003536 <HAL_GPIO_Init+0x26a>
 80034da:	230a      	movs	r3, #10
 80034dc:	e02b      	b.n	8003536 <HAL_GPIO_Init+0x26a>
 80034de:	2308      	movs	r3, #8
 80034e0:	e029      	b.n	8003536 <HAL_GPIO_Init+0x26a>
 80034e2:	2307      	movs	r3, #7
 80034e4:	e027      	b.n	8003536 <HAL_GPIO_Init+0x26a>
 80034e6:	2306      	movs	r3, #6
 80034e8:	e025      	b.n	8003536 <HAL_GPIO_Init+0x26a>
 80034ea:	2305      	movs	r3, #5
 80034ec:	e023      	b.n	8003536 <HAL_GPIO_Init+0x26a>
 80034ee:	2304      	movs	r3, #4
 80034f0:	e021      	b.n	8003536 <HAL_GPIO_Init+0x26a>
 80034f2:	2303      	movs	r3, #3
 80034f4:	e01f      	b.n	8003536 <HAL_GPIO_Init+0x26a>
 80034f6:	2302      	movs	r3, #2
 80034f8:	e01d      	b.n	8003536 <HAL_GPIO_Init+0x26a>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e01b      	b.n	8003536 <HAL_GPIO_Init+0x26a>
 80034fe:	bf00      	nop
 8003500:	58000080 	.word	0x58000080
 8003504:	58024400 	.word	0x58024400
 8003508:	58000400 	.word	0x58000400
 800350c:	58020000 	.word	0x58020000
 8003510:	58020400 	.word	0x58020400
 8003514:	58020800 	.word	0x58020800
 8003518:	58020c00 	.word	0x58020c00
 800351c:	58021000 	.word	0x58021000
 8003520:	58021400 	.word	0x58021400
 8003524:	58021800 	.word	0x58021800
 8003528:	58021c00 	.word	0x58021c00
 800352c:	58022000 	.word	0x58022000
 8003530:	58022400 	.word	0x58022400
 8003534:	2300      	movs	r3, #0
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	f002 0203 	and.w	r2, r2, #3
 800353c:	0092      	lsls	r2, r2, #2
 800353e:	4093      	lsls	r3, r2
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003546:	4938      	ldr	r1, [pc, #224]	@ (8003628 <HAL_GPIO_Init+0x35c>)
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	43db      	mvns	r3, r3
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	4013      	ands	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800357a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	43db      	mvns	r3, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4013      	ands	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80035a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	43db      	mvns	r3, r3
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	4013      	ands	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	3301      	adds	r3, #1
 8003608:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	f47f ae63 	bne.w	80032e0 <HAL_GPIO_Init+0x14>
  }
}
 800361a:	bf00      	nop
 800361c:	bf00      	nop
 800361e:	3724      	adds	r7, #36	@ 0x24
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr
 8003628:	58000400 	.word	0x58000400

0800362c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
 8003638:	4613      	mov	r3, r2
 800363a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800363c:	787b      	ldrb	r3, [r7, #1]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003648:	e003      	b.n	8003652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800364a:	887b      	ldrh	r3, [r7, #2]
 800364c:	041a      	lsls	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	619a      	str	r2, [r3, #24]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e08b      	b.n	800378a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fd fe02 	bl	8001290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2224      	movs	r2, #36	@ 0x24
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0201 	bic.w	r2, r2, #1
 80036a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d107      	bne.n	80036da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	e006      	b.n	80036e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d108      	bne.n	8003702 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	e007      	b.n	8003712 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003710:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6859      	ldr	r1, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	4b1d      	ldr	r3, [pc, #116]	@ (8003794 <HAL_I2C_Init+0x134>)
 800371e:	430b      	orrs	r3, r1
 8003720:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003730:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	430a      	orrs	r2, r1
 800374a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69d9      	ldr	r1, [r3, #28]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2220      	movs	r2, #32
 8003776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3708      	adds	r7, #8
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	02008000 	.word	0x02008000

08003798 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af02      	add	r7, sp, #8
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	4608      	mov	r0, r1
 80037a2:	4611      	mov	r1, r2
 80037a4:	461a      	mov	r2, r3
 80037a6:	4603      	mov	r3, r0
 80037a8:	817b      	strh	r3, [r7, #10]
 80037aa:	460b      	mov	r3, r1
 80037ac:	813b      	strh	r3, [r7, #8]
 80037ae:	4613      	mov	r3, r2
 80037b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b20      	cmp	r3, #32
 80037bc:	f040 80f9 	bne.w	80039b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <HAL_I2C_Mem_Write+0x34>
 80037c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d105      	bne.n	80037d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e0ed      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_I2C_Mem_Write+0x4e>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e0e6      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037ee:	f7fe fc51 	bl	8002094 <HAL_GetTick>
 80037f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	2319      	movs	r3, #25
 80037fa:	2201      	movs	r2, #1
 80037fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 fac3 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0d1      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2221      	movs	r2, #33	@ 0x21
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2240      	movs	r2, #64	@ 0x40
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a3a      	ldr	r2, [r7, #32]
 800382a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003830:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003838:	88f8      	ldrh	r0, [r7, #6]
 800383a:	893a      	ldrh	r2, [r7, #8]
 800383c:	8979      	ldrh	r1, [r7, #10]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	9301      	str	r3, [sp, #4]
 8003842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003844:	9300      	str	r3, [sp, #0]
 8003846:	4603      	mov	r3, r0
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f000 f9d3 	bl	8003bf4 <I2C_RequestMemoryWrite>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d005      	beq.n	8003860 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0a9      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	2bff      	cmp	r3, #255	@ 0xff
 8003868:	d90e      	bls.n	8003888 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	22ff      	movs	r2, #255	@ 0xff
 800386e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003874:	b2da      	uxtb	r2, r3
 8003876:	8979      	ldrh	r1, [r7, #10]
 8003878:	2300      	movs	r3, #0
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f000 fc47 	bl	8004114 <I2C_TransferConfig>
 8003886:	e00f      	b.n	80038a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003896:	b2da      	uxtb	r2, r3
 8003898:	8979      	ldrh	r1, [r7, #10]
 800389a:	2300      	movs	r3, #0
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fc36 	bl	8004114 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fac6 	bl	8003e3e <I2C_WaitOnTXISFlagUntilTimeout>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d001      	beq.n	80038bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e07b      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038cc:	1c5a      	adds	r2, r3, #1
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d034      	beq.n	8003960 <HAL_I2C_Mem_Write+0x1c8>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d130      	bne.n	8003960 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003904:	2200      	movs	r2, #0
 8003906:	2180      	movs	r1, #128	@ 0x80
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 fa3f 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e04d      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391c:	b29b      	uxth	r3, r3
 800391e:	2bff      	cmp	r3, #255	@ 0xff
 8003920:	d90e      	bls.n	8003940 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	22ff      	movs	r2, #255	@ 0xff
 8003926:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392c:	b2da      	uxtb	r2, r3
 800392e:	8979      	ldrh	r1, [r7, #10]
 8003930:	2300      	movs	r3, #0
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fbeb 	bl	8004114 <I2C_TransferConfig>
 800393e:	e00f      	b.n	8003960 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800394e:	b2da      	uxtb	r2, r3
 8003950:	8979      	ldrh	r1, [r7, #10]
 8003952:	2300      	movs	r3, #0
 8003954:	9300      	str	r3, [sp, #0]
 8003956:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fbda 	bl	8004114 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d19e      	bne.n	80038a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f000 faac 	bl	8003ecc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e01a      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2220      	movs	r2, #32
 8003984:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6859      	ldr	r1, [r3, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4b0a      	ldr	r3, [pc, #40]	@ (80039bc <HAL_I2C_Mem_Write+0x224>)
 8003992:	400b      	ands	r3, r1
 8003994:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2220      	movs	r2, #32
 800399a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	fe00e800 	.word	0xfe00e800

080039c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	4608      	mov	r0, r1
 80039ca:	4611      	mov	r1, r2
 80039cc:	461a      	mov	r2, r3
 80039ce:	4603      	mov	r3, r0
 80039d0:	817b      	strh	r3, [r7, #10]
 80039d2:	460b      	mov	r3, r1
 80039d4:	813b      	strh	r3, [r7, #8]
 80039d6:	4613      	mov	r3, r2
 80039d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b20      	cmp	r3, #32
 80039e4:	f040 80fd 	bne.w	8003be2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d002      	beq.n	80039f4 <HAL_I2C_Mem_Read+0x34>
 80039ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d105      	bne.n	8003a00 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0f1      	b.n	8003be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_I2C_Mem_Read+0x4e>
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	e0ea      	b.n	8003be4 <HAL_I2C_Mem_Read+0x224>
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a16:	f7fe fb3d 	bl	8002094 <HAL_GetTick>
 8003a1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	2319      	movs	r3, #25
 8003a22:	2201      	movs	r2, #1
 8003a24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f9af 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0d5      	b.n	8003be4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2222      	movs	r2, #34	@ 0x22
 8003a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2240      	movs	r2, #64	@ 0x40
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a3a      	ldr	r2, [r7, #32]
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a60:	88f8      	ldrh	r0, [r7, #6]
 8003a62:	893a      	ldrh	r2, [r7, #8]
 8003a64:	8979      	ldrh	r1, [r7, #10]
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	9301      	str	r3, [sp, #4]
 8003a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	4603      	mov	r3, r0
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 f913 	bl	8003c9c <I2C_RequestMemoryRead>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d005      	beq.n	8003a88 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0ad      	b.n	8003be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2bff      	cmp	r3, #255	@ 0xff
 8003a90:	d90e      	bls.n	8003ab0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	22ff      	movs	r2, #255	@ 0xff
 8003a96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	8979      	ldrh	r1, [r7, #10]
 8003aa0:	4b52      	ldr	r3, [pc, #328]	@ (8003bec <HAL_I2C_Mem_Read+0x22c>)
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fb33 	bl	8004114 <I2C_TransferConfig>
 8003aae:	e00f      	b.n	8003ad0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	8979      	ldrh	r1, [r7, #10]
 8003ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bec <HAL_I2C_Mem_Read+0x22c>)
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 fb22 	bl	8004114 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2104      	movs	r1, #4
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 f956 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e07c      	b.n	8003be4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d034      	beq.n	8003b90 <HAL_I2C_Mem_Read+0x1d0>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d130      	bne.n	8003b90 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b34:	2200      	movs	r2, #0
 8003b36:	2180      	movs	r1, #128	@ 0x80
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 f927 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e04d      	b.n	8003be4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2bff      	cmp	r3, #255	@ 0xff
 8003b50:	d90e      	bls.n	8003b70 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	22ff      	movs	r2, #255	@ 0xff
 8003b56:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	8979      	ldrh	r1, [r7, #10]
 8003b60:	2300      	movs	r3, #0
 8003b62:	9300      	str	r3, [sp, #0]
 8003b64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fad3 	bl	8004114 <I2C_TransferConfig>
 8003b6e:	e00f      	b.n	8003b90 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	8979      	ldrh	r1, [r7, #10]
 8003b82:	2300      	movs	r3, #0
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fac2 	bl	8004114 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d19a      	bne.n	8003ad0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f994 	bl	8003ecc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e01a      	b.n	8003be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <HAL_I2C_Mem_Read+0x230>)
 8003bc2:	400b      	ands	r3, r1
 8003bc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e000      	b.n	8003be4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003be2:	2302      	movs	r3, #2
  }
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3718      	adds	r7, #24
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	80002400 	.word	0x80002400
 8003bf0:	fe00e800 	.word	0xfe00e800

08003bf4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af02      	add	r7, sp, #8
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	4608      	mov	r0, r1
 8003bfe:	4611      	mov	r1, r2
 8003c00:	461a      	mov	r2, r3
 8003c02:	4603      	mov	r3, r0
 8003c04:	817b      	strh	r3, [r7, #10]
 8003c06:	460b      	mov	r3, r1
 8003c08:	813b      	strh	r3, [r7, #8]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c0e:	88fb      	ldrh	r3, [r7, #6]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	8979      	ldrh	r1, [r7, #10]
 8003c14:	4b20      	ldr	r3, [pc, #128]	@ (8003c98 <I2C_RequestMemoryWrite+0xa4>)
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 fa79 	bl	8004114 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	69b9      	ldr	r1, [r7, #24]
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f909 	bl	8003e3e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e02c      	b.n	8003c90 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c3c:	893b      	ldrh	r3, [r7, #8]
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c46:	e015      	b.n	8003c74 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c48:	893b      	ldrh	r3, [r7, #8]
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	69b9      	ldr	r1, [r7, #24]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f8ef 	bl	8003e3e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e012      	b.n	8003c90 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c6a:	893b      	ldrh	r3, [r7, #8]
 8003c6c:	b2da      	uxtb	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2180      	movs	r1, #128	@ 0x80
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f000 f884 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	80002000 	.word	0x80002000

08003c9c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	4608      	mov	r0, r1
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4603      	mov	r3, r0
 8003cac:	817b      	strh	r3, [r7, #10]
 8003cae:	460b      	mov	r3, r1
 8003cb0:	813b      	strh	r3, [r7, #8]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	8979      	ldrh	r1, [r7, #10]
 8003cbc:	4b20      	ldr	r3, [pc, #128]	@ (8003d40 <I2C_RequestMemoryRead+0xa4>)
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 fa26 	bl	8004114 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc8:	69fa      	ldr	r2, [r7, #28]
 8003cca:	69b9      	ldr	r1, [r7, #24]
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 f8b6 	bl	8003e3e <I2C_WaitOnTXISFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e02c      	b.n	8003d36 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d105      	bne.n	8003cee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ce2:	893b      	ldrh	r3, [r7, #8]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cec:	e015      	b.n	8003d1a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cee:	893b      	ldrh	r3, [r7, #8]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	b2da      	uxtb	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfc:	69fa      	ldr	r2, [r7, #28]
 8003cfe:	69b9      	ldr	r1, [r7, #24]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f89c 	bl	8003e3e <I2C_WaitOnTXISFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e012      	b.n	8003d36 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d10:	893b      	ldrh	r3, [r7, #8]
 8003d12:	b2da      	uxtb	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	2200      	movs	r2, #0
 8003d22:	2140      	movs	r1, #64	@ 0x40
 8003d24:	68f8      	ldr	r0, [r7, #12]
 8003d26:	f000 f831 	bl	8003d8c <I2C_WaitOnFlagUntilTimeout>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	80002000 	.word	0x80002000

08003d44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d103      	bne.n	8003d62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d007      	beq.n	8003d80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	619a      	str	r2, [r3, #24]
  }
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d9c:	e03b      	b.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	6839      	ldr	r1, [r7, #0]
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f8d6 	bl	8003f54 <I2C_IsErrorOccurred>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e041      	b.n	8003e36 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d02d      	beq.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dba:	f7fe f96b 	bl	8002094 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d302      	bcc.n	8003dd0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d122      	bne.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	699a      	ldr	r2, [r3, #24]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	68ba      	ldr	r2, [r7, #8]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	bf0c      	ite	eq
 8003de0:	2301      	moveq	r3, #1
 8003de2:	2300      	movne	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d113      	bne.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003df2:	f043 0220 	orr.w	r2, r3, #32
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e00f      	b.n	8003e36 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	699a      	ldr	r2, [r3, #24]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	bf0c      	ite	eq
 8003e26:	2301      	moveq	r3, #1
 8003e28:	2300      	movne	r3, #0
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	79fb      	ldrb	r3, [r7, #7]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d0b4      	beq.n	8003d9e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b084      	sub	sp, #16
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e4a:	e033      	b.n	8003eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	68b9      	ldr	r1, [r7, #8]
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 f87f 	bl	8003f54 <I2C_IsErrorOccurred>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e031      	b.n	8003ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e66:	d025      	beq.n	8003eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e68:	f7fe f914 	bl	8002094 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d302      	bcc.n	8003e7e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d11a      	bne.n	8003eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d013      	beq.n	8003eb4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e90:	f043 0220 	orr.w	r2, r3, #32
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e007      	b.n	8003ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d1c4      	bne.n	8003e4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3710      	adds	r7, #16
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ed8:	e02f      	b.n	8003f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	68b9      	ldr	r1, [r7, #8]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f838 	bl	8003f54 <I2C_IsErrorOccurred>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e02d      	b.n	8003f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eee:	f7fe f8d1 	bl	8002094 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d302      	bcc.n	8003f04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d11a      	bne.n	8003f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b20      	cmp	r3, #32
 8003f10:	d013      	beq.n	8003f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	f043 0220 	orr.w	r2, r3, #32
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2220      	movs	r2, #32
 8003f22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e007      	b.n	8003f4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b20      	cmp	r3, #32
 8003f46:	d1c8      	bne.n	8003eda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
	...

08003f54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08a      	sub	sp, #40	@ 0x28
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	699b      	ldr	r3, [r3, #24]
 8003f6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	f003 0310 	and.w	r3, r3, #16
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d068      	beq.n	8004052 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2210      	movs	r2, #16
 8003f86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f88:	e049      	b.n	800401e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f90:	d045      	beq.n	800401e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f92:	f7fe f87f 	bl	8002094 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	69fb      	ldr	r3, [r7, #28]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d302      	bcc.n	8003fa8 <I2C_IsErrorOccurred+0x54>
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d13a      	bne.n	800401e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003fba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fca:	d121      	bne.n	8004010 <I2C_IsErrorOccurred+0xbc>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fd2:	d01d      	beq.n	8004010 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fd4:	7cfb      	ldrb	r3, [r7, #19]
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d01a      	beq.n	8004010 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fe8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fea:	f7fe f853 	bl	8002094 <HAL_GetTick>
 8003fee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ff0:	e00e      	b.n	8004010 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ff2:	f7fe f84f 	bl	8002094 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b19      	cmp	r3, #25
 8003ffe:	d907      	bls.n	8004010 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	f043 0320 	orr.w	r3, r3, #32
 8004006:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800400e:	e006      	b.n	800401e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	f003 0320 	and.w	r3, r3, #32
 800401a:	2b20      	cmp	r3, #32
 800401c:	d1e9      	bne.n	8003ff2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b20      	cmp	r3, #32
 800402a:	d003      	beq.n	8004034 <I2C_IsErrorOccurred+0xe0>
 800402c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0aa      	beq.n	8003f8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004038:	2b00      	cmp	r3, #0
 800403a:	d103      	bne.n	8004044 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2220      	movs	r2, #32
 8004042:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	f043 0304 	orr.w	r3, r3, #4
 800404a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00b      	beq.n	800407c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004074:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f043 0308 	orr.w	r3, r3, #8
 800408c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004096:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00b      	beq.n	80040c0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	f043 0302 	orr.w	r3, r3, #2
 80040ae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80040c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01c      	beq.n	8004102 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f7ff fe3b 	bl	8003d44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6859      	ldr	r1, [r3, #4]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004110 <I2C_IsErrorOccurred+0x1bc>)
 80040da:	400b      	ands	r3, r1
 80040dc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	431a      	orrs	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2220      	movs	r2, #32
 80040ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004102:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004106:	4618      	mov	r0, r3
 8004108:	3728      	adds	r7, #40	@ 0x28
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	fe00e800 	.word	0xfe00e800

08004114 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	460b      	mov	r3, r1
 8004120:	817b      	strh	r3, [r7, #10]
 8004122:	4613      	mov	r3, r2
 8004124:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004126:	897b      	ldrh	r3, [r7, #10]
 8004128:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800412c:	7a7b      	ldrb	r3, [r7, #9]
 800412e:	041b      	lsls	r3, r3, #16
 8004130:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004134:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	4313      	orrs	r3, r2
 800413e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004142:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	6a3b      	ldr	r3, [r7, #32]
 800414c:	0d5b      	lsrs	r3, r3, #21
 800414e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004152:	4b08      	ldr	r3, [pc, #32]	@ (8004174 <I2C_TransferConfig+0x60>)
 8004154:	430b      	orrs	r3, r1
 8004156:	43db      	mvns	r3, r3
 8004158:	ea02 0103 	and.w	r1, r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	03ff63ff 	.word	0x03ff63ff

08004178 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b20      	cmp	r3, #32
 800418c:	d138      	bne.n	8004200 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004194:	2b01      	cmp	r3, #1
 8004196:	d101      	bne.n	800419c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004198:	2302      	movs	r3, #2
 800419a:	e032      	b.n	8004202 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2224      	movs	r2, #36	@ 0x24
 80041a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0201 	bic.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6819      	ldr	r1, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e000      	b.n	8004202 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004200:	2302      	movs	r3, #2
  }
}
 8004202:	4618      	mov	r0, r3
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b20      	cmp	r3, #32
 8004222:	d139      	bne.n	8004298 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800422e:	2302      	movs	r3, #2
 8004230:	e033      	b.n	800429a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2224      	movs	r2, #36	@ 0x24
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0201 	bic.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004260:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	021b      	lsls	r3, r3, #8
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	4313      	orrs	r3, r2
 800426a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68fa      	ldr	r2, [r7, #12]
 8004272:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0201 	orr.w	r2, r2, #1
 8004282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e000      	b.n	800429a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3714      	adds	r7, #20
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr

080042a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b086      	sub	sp, #24
 80042aa:	af02      	add	r7, sp, #8
 80042ac:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e0fe      	b.n	80044b6 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d106      	bne.n	80042d2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7fd fdb5 	bl	8001e3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2203      	movs	r2, #3
 80042d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f005 fcc0 	bl	8009c64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7c1a      	ldrb	r2, [r3, #16]
 80042ec:	f88d 2000 	strb.w	r2, [sp]
 80042f0:	3304      	adds	r3, #4
 80042f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042f4:	f005 fc44 	bl	8009b80 <USB_CoreInit>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0d5      	b.n	80044b6 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2100      	movs	r1, #0
 8004310:	4618      	mov	r0, r3
 8004312:	f005 fcb8 	bl	8009c86 <USB_SetCurrentMode>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0c6      	b.n	80044b6 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004328:	2300      	movs	r3, #0
 800432a:	73fb      	strb	r3, [r7, #15]
 800432c:	e04a      	b.n	80043c4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800432e:	7bfa      	ldrb	r2, [r7, #15]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	3315      	adds	r3, #21
 800433e:	2201      	movs	r2, #1
 8004340:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004342:	7bfa      	ldrb	r2, [r7, #15]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4413      	add	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	3314      	adds	r3, #20
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004356:	7bfa      	ldrb	r2, [r7, #15]
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	b298      	uxth	r0, r3
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4413      	add	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	332e      	adds	r3, #46	@ 0x2e
 800436a:	4602      	mov	r2, r0
 800436c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800436e:	7bfa      	ldrb	r2, [r7, #15]
 8004370:	6879      	ldr	r1, [r7, #4]
 8004372:	4613      	mov	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	440b      	add	r3, r1
 800437c:	3318      	adds	r3, #24
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004382:	7bfa      	ldrb	r2, [r7, #15]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	440b      	add	r3, r1
 8004390:	331c      	adds	r3, #28
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004396:	7bfa      	ldrb	r2, [r7, #15]
 8004398:	6879      	ldr	r1, [r7, #4]
 800439a:	4613      	mov	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	4413      	add	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	440b      	add	r3, r1
 80043a4:	3320      	adds	r3, #32
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043aa:	7bfa      	ldrb	r2, [r7, #15]
 80043ac:	6879      	ldr	r1, [r7, #4]
 80043ae:	4613      	mov	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	3324      	adds	r3, #36	@ 0x24
 80043ba:	2200      	movs	r2, #0
 80043bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	3301      	adds	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	791b      	ldrb	r3, [r3, #4]
 80043c8:	7bfa      	ldrb	r2, [r7, #15]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d3af      	bcc.n	800432e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]
 80043d2:	e044      	b.n	800445e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043d4:	7bfa      	ldrb	r2, [r7, #15]
 80043d6:	6879      	ldr	r1, [r7, #4]
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80043e6:	2200      	movs	r2, #0
 80043e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043ea:	7bfa      	ldrb	r2, [r7, #15]
 80043ec:	6879      	ldr	r1, [r7, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80043fc:	7bfa      	ldrb	r2, [r7, #15]
 80043fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004400:	7bfa      	ldrb	r2, [r7, #15]
 8004402:	6879      	ldr	r1, [r7, #4]
 8004404:	4613      	mov	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4413      	add	r3, r2
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	440b      	add	r3, r1
 800440e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004416:	7bfa      	ldrb	r2, [r7, #15]
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	4613      	mov	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4413      	add	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800442c:	7bfa      	ldrb	r2, [r7, #15]
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800443e:	2200      	movs	r2, #0
 8004440:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004442:	7bfa      	ldrb	r2, [r7, #15]
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	4413      	add	r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	3301      	adds	r3, #1
 800445c:	73fb      	strb	r3, [r7, #15]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	791b      	ldrb	r3, [r3, #4]
 8004462:	7bfa      	ldrb	r2, [r7, #15]
 8004464:	429a      	cmp	r2, r3
 8004466:	d3b5      	bcc.n	80043d4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6818      	ldr	r0, [r3, #0]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	7c1a      	ldrb	r2, [r3, #16]
 8004470:	f88d 2000 	strb.w	r2, [sp]
 8004474:	3304      	adds	r3, #4
 8004476:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004478:	f005 fc52 	bl	8009d20 <USB_DevInit>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d005      	beq.n	800448e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2202      	movs	r2, #2
 8004486:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e013      	b.n	80044b6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	7b1b      	ldrb	r3, [r3, #12]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d102      	bne.n	80044aa <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f000 f80b 	bl	80044c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f005 fe0d 	bl	800a0ce <USB_DevDisconnect>

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044ee:	4b05      	ldr	r3, [pc, #20]	@ (8004504 <HAL_PCDEx_ActivateLPM+0x44>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	10000003 	.word	0x10000003

08004508 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004510:	4b19      	ldr	r3, [pc, #100]	@ (8004578 <HAL_PWREx_ConfigSupply+0x70>)
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b04      	cmp	r3, #4
 800451a:	d00a      	beq.n	8004532 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800451c:	4b16      	ldr	r3, [pc, #88]	@ (8004578 <HAL_PWREx_ConfigSupply+0x70>)
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d001      	beq.n	800452e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e01f      	b.n	800456e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	e01d      	b.n	800456e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004532:	4b11      	ldr	r3, [pc, #68]	@ (8004578 <HAL_PWREx_ConfigSupply+0x70>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f023 0207 	bic.w	r2, r3, #7
 800453a:	490f      	ldr	r1, [pc, #60]	@ (8004578 <HAL_PWREx_ConfigSupply+0x70>)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	4313      	orrs	r3, r2
 8004540:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004542:	f7fd fda7 	bl	8002094 <HAL_GetTick>
 8004546:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004548:	e009      	b.n	800455e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800454a:	f7fd fda3 	bl	8002094 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004558:	d901      	bls.n	800455e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e007      	b.n	800456e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800455e:	4b06      	ldr	r3, [pc, #24]	@ (8004578 <HAL_PWREx_ConfigSupply+0x70>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004566:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800456a:	d1ee      	bne.n	800454a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	58024800 	.word	0x58024800

0800457c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004580:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4a04      	ldr	r2, [pc, #16]	@ (8004598 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004586:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800458a:	60d3      	str	r3, [r2, #12]
}
 800458c:	bf00      	nop
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	58024800 	.word	0x58024800

0800459c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08c      	sub	sp, #48	@ 0x30
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	f000 bc48 	b.w	8004e40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0301 	and.w	r3, r3, #1
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8088 	beq.w	80046ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045be:	4b99      	ldr	r3, [pc, #612]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045c8:	4b96      	ldr	r3, [pc, #600]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 80045ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80045ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d0:	2b10      	cmp	r3, #16
 80045d2:	d007      	beq.n	80045e4 <HAL_RCC_OscConfig+0x48>
 80045d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d6:	2b18      	cmp	r3, #24
 80045d8:	d111      	bne.n	80045fe <HAL_RCC_OscConfig+0x62>
 80045da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d10c      	bne.n	80045fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045e4:	4b8f      	ldr	r3, [pc, #572]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d06d      	beq.n	80046cc <HAL_RCC_OscConfig+0x130>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d169      	bne.n	80046cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f000 bc21 	b.w	8004e40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004606:	d106      	bne.n	8004616 <HAL_RCC_OscConfig+0x7a>
 8004608:	4b86      	ldr	r3, [pc, #536]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a85      	ldr	r2, [pc, #532]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 800460e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	e02e      	b.n	8004674 <HAL_RCC_OscConfig+0xd8>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10c      	bne.n	8004638 <HAL_RCC_OscConfig+0x9c>
 800461e:	4b81      	ldr	r3, [pc, #516]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a80      	ldr	r2, [pc, #512]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004624:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004628:	6013      	str	r3, [r2, #0]
 800462a:	4b7e      	ldr	r3, [pc, #504]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a7d      	ldr	r2, [pc, #500]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004630:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	e01d      	b.n	8004674 <HAL_RCC_OscConfig+0xd8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004640:	d10c      	bne.n	800465c <HAL_RCC_OscConfig+0xc0>
 8004642:	4b78      	ldr	r3, [pc, #480]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a77      	ldr	r2, [pc, #476]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004648:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800464c:	6013      	str	r3, [r2, #0]
 800464e:	4b75      	ldr	r3, [pc, #468]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a74      	ldr	r2, [pc, #464]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e00b      	b.n	8004674 <HAL_RCC_OscConfig+0xd8>
 800465c:	4b71      	ldr	r3, [pc, #452]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a70      	ldr	r2, [pc, #448]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	4b6e      	ldr	r3, [pc, #440]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a6d      	ldr	r2, [pc, #436]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 800466e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d013      	beq.n	80046a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fd fd0a 	bl	8002094 <HAL_GetTick>
 8004680:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004684:	f7fd fd06 	bl	8002094 <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b64      	cmp	r3, #100	@ 0x64
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e3d4      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004696:	4b63      	ldr	r3, [pc, #396]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0f0      	beq.n	8004684 <HAL_RCC_OscConfig+0xe8>
 80046a2:	e014      	b.n	80046ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a4:	f7fd fcf6 	bl	8002094 <HAL_GetTick>
 80046a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ac:	f7fd fcf2 	bl	8002094 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b64      	cmp	r3, #100	@ 0x64
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e3c0      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80046be:	4b59      	ldr	r3, [pc, #356]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x110>
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80ca 	beq.w	8004870 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046dc:	4b51      	ldr	r3, [pc, #324]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 80046e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d007      	beq.n	8004702 <HAL_RCC_OscConfig+0x166>
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	2b18      	cmp	r3, #24
 80046f6:	d156      	bne.n	80047a6 <HAL_RCC_OscConfig+0x20a>
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d151      	bne.n	80047a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004702:	4b48      	ldr	r3, [pc, #288]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_RCC_OscConfig+0x17e>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	68db      	ldr	r3, [r3, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e392      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800471a:	4b42      	ldr	r3, [pc, #264]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f023 0219 	bic.w	r2, r3, #25
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	493f      	ldr	r1, [pc, #252]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004728:	4313      	orrs	r3, r2
 800472a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800472c:	f7fd fcb2 	bl	8002094 <HAL_GetTick>
 8004730:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004734:	f7fd fcae 	bl	8002094 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e37c      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004746:	4b37      	ldr	r3, [pc, #220]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0f0      	beq.n	8004734 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004752:	f7fd fccf 	bl	80020f4 <HAL_GetREVID>
 8004756:	4603      	mov	r3, r0
 8004758:	f241 0203 	movw	r2, #4099	@ 0x1003
 800475c:	4293      	cmp	r3, r2
 800475e:	d817      	bhi.n	8004790 <HAL_RCC_OscConfig+0x1f4>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	2b40      	cmp	r3, #64	@ 0x40
 8004766:	d108      	bne.n	800477a <HAL_RCC_OscConfig+0x1de>
 8004768:	4b2e      	ldr	r3, [pc, #184]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004770:	4a2c      	ldr	r2, [pc, #176]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004776:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004778:	e07a      	b.n	8004870 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477a:	4b2a      	ldr	r3, [pc, #168]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	031b      	lsls	r3, r3, #12
 8004788:	4926      	ldr	r1, [pc, #152]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 800478a:	4313      	orrs	r3, r2
 800478c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800478e:	e06f      	b.n	8004870 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004790:	4b24      	ldr	r3, [pc, #144]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	061b      	lsls	r3, r3, #24
 800479e:	4921      	ldr	r1, [pc, #132]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047a4:	e064      	b.n	8004870 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d047      	beq.n	800483e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047ae:	4b1d      	ldr	r3, [pc, #116]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 0219 	bic.w	r2, r3, #25
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	491a      	ldr	r1, [pc, #104]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd fc68 	bl	8002094 <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c8:	f7fd fc64 	bl	8002094 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e332      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047da:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e6:	f7fd fc85 	bl	80020f4 <HAL_GetREVID>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d819      	bhi.n	8004828 <HAL_RCC_OscConfig+0x28c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b40      	cmp	r3, #64	@ 0x40
 80047fa:	d108      	bne.n	800480e <HAL_RCC_OscConfig+0x272>
 80047fc:	4b09      	ldr	r3, [pc, #36]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004804:	4a07      	ldr	r2, [pc, #28]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800480a:	6053      	str	r3, [r2, #4]
 800480c:	e030      	b.n	8004870 <HAL_RCC_OscConfig+0x2d4>
 800480e:	4b05      	ldr	r3, [pc, #20]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	031b      	lsls	r3, r3, #12
 800481c:	4901      	ldr	r1, [pc, #4]	@ (8004824 <HAL_RCC_OscConfig+0x288>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
 8004822:	e025      	b.n	8004870 <HAL_RCC_OscConfig+0x2d4>
 8004824:	58024400 	.word	0x58024400
 8004828:	4b9a      	ldr	r3, [pc, #616]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	061b      	lsls	r3, r3, #24
 8004836:	4997      	ldr	r1, [pc, #604]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004838:	4313      	orrs	r3, r2
 800483a:	604b      	str	r3, [r1, #4]
 800483c:	e018      	b.n	8004870 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800483e:	4b95      	ldr	r3, [pc, #596]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a94      	ldr	r2, [pc, #592]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004844:	f023 0301 	bic.w	r3, r3, #1
 8004848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fd fc23 	bl	8002094 <HAL_GetTick>
 800484e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004852:	f7fd fc1f 	bl	8002094 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e2ed      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004864:	4b8b      	ldr	r3, [pc, #556]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0304 	and.w	r3, r3, #4
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f0      	bne.n	8004852 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b00      	cmp	r3, #0
 800487a:	f000 80a9 	beq.w	80049d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800487e:	4b85      	ldr	r3, [pc, #532]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004886:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004888:	4b82      	ldr	r3, [pc, #520]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800488a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800488c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	2b08      	cmp	r3, #8
 8004892:	d007      	beq.n	80048a4 <HAL_RCC_OscConfig+0x308>
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	2b18      	cmp	r3, #24
 8004898:	d13a      	bne.n	8004910 <HAL_RCC_OscConfig+0x374>
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	d135      	bne.n	8004910 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048a4:	4b7b      	ldr	r3, [pc, #492]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d005      	beq.n	80048bc <HAL_RCC_OscConfig+0x320>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	69db      	ldr	r3, [r3, #28]
 80048b4:	2b80      	cmp	r3, #128	@ 0x80
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e2c1      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048bc:	f7fd fc1a 	bl	80020f4 <HAL_GetREVID>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d817      	bhi.n	80048fa <HAL_RCC_OscConfig+0x35e>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	2b20      	cmp	r3, #32
 80048d0:	d108      	bne.n	80048e4 <HAL_RCC_OscConfig+0x348>
 80048d2:	4b70      	ldr	r3, [pc, #448]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80048da:	4a6e      	ldr	r2, [pc, #440]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80048dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048e2:	e075      	b.n	80049d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048e4:	4b6b      	ldr	r3, [pc, #428]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	069b      	lsls	r3, r3, #26
 80048f2:	4968      	ldr	r1, [pc, #416]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048f8:	e06a      	b.n	80049d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048fa:	4b66      	ldr	r3, [pc, #408]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	061b      	lsls	r3, r3, #24
 8004908:	4962      	ldr	r1, [pc, #392]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800490a:	4313      	orrs	r3, r2
 800490c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800490e:	e05f      	b.n	80049d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	69db      	ldr	r3, [r3, #28]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d042      	beq.n	800499e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004918:	4b5e      	ldr	r3, [pc, #376]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a5d      	ldr	r2, [pc, #372]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800491e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004922:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004924:	f7fd fbb6 	bl	8002094 <HAL_GetTick>
 8004928:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800492c:	f7fd fbb2 	bl	8002094 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e280      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800493e:	4b55      	ldr	r3, [pc, #340]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004946:	2b00      	cmp	r3, #0
 8004948:	d0f0      	beq.n	800492c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800494a:	f7fd fbd3 	bl	80020f4 <HAL_GetREVID>
 800494e:	4603      	mov	r3, r0
 8004950:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004954:	4293      	cmp	r3, r2
 8004956:	d817      	bhi.n	8004988 <HAL_RCC_OscConfig+0x3ec>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	2b20      	cmp	r3, #32
 800495e:	d108      	bne.n	8004972 <HAL_RCC_OscConfig+0x3d6>
 8004960:	4b4c      	ldr	r3, [pc, #304]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004968:	4a4a      	ldr	r2, [pc, #296]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800496a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800496e:	6053      	str	r3, [r2, #4]
 8004970:	e02e      	b.n	80049d0 <HAL_RCC_OscConfig+0x434>
 8004972:	4b48      	ldr	r3, [pc, #288]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	069b      	lsls	r3, r3, #26
 8004980:	4944      	ldr	r1, [pc, #272]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004982:	4313      	orrs	r3, r2
 8004984:	604b      	str	r3, [r1, #4]
 8004986:	e023      	b.n	80049d0 <HAL_RCC_OscConfig+0x434>
 8004988:	4b42      	ldr	r3, [pc, #264]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a1b      	ldr	r3, [r3, #32]
 8004994:	061b      	lsls	r3, r3, #24
 8004996:	493f      	ldr	r1, [pc, #252]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004998:	4313      	orrs	r3, r2
 800499a:	60cb      	str	r3, [r1, #12]
 800499c:	e018      	b.n	80049d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800499e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a3c      	ldr	r2, [pc, #240]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80049a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049aa:	f7fd fb73 	bl	8002094 <HAL_GetTick>
 80049ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049b0:	e008      	b.n	80049c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049b2:	f7fd fb6f 	bl	8002094 <HAL_GetTick>
 80049b6:	4602      	mov	r2, r0
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	1ad3      	subs	r3, r2, r3
 80049bc:	2b02      	cmp	r3, #2
 80049be:	d901      	bls.n	80049c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e23d      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049c4:	4b33      	ldr	r3, [pc, #204]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1f0      	bne.n	80049b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d036      	beq.n	8004a4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	695b      	ldr	r3, [r3, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d019      	beq.n	8004a18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80049e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049f0:	f7fd fb50 	bl	8002094 <HAL_GetTick>
 80049f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049f8:	f7fd fb4c 	bl	8002094 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e21a      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a0a:	4b22      	ldr	r3, [pc, #136]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0x45c>
 8004a16:	e018      	b.n	8004a4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a18:	4b1e      	ldr	r3, [pc, #120]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a1c:	4a1d      	ldr	r2, [pc, #116]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a1e:	f023 0301 	bic.w	r3, r3, #1
 8004a22:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a24:	f7fd fb36 	bl	8002094 <HAL_GetTick>
 8004a28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a2c:	f7fd fb32 	bl	8002094 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e200      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a3e:	4b15      	ldr	r3, [pc, #84]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0320 	and.w	r3, r3, #32
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d039      	beq.n	8004aca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01c      	beq.n	8004a98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a0c      	ldr	r2, [pc, #48]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a64:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a6a:	f7fd fb13 	bl	8002094 <HAL_GetTick>
 8004a6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a70:	e008      	b.n	8004a84 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a72:	f7fd fb0f 	bl	8002094 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e1dd      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a84:	4b03      	ldr	r3, [pc, #12]	@ (8004a94 <HAL_RCC_OscConfig+0x4f8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCC_OscConfig+0x4d6>
 8004a90:	e01b      	b.n	8004aca <HAL_RCC_OscConfig+0x52e>
 8004a92:	bf00      	nop
 8004a94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a98:	4b9b      	ldr	r3, [pc, #620]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a9a      	ldr	r2, [pc, #616]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004a9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004aa2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004aa4:	f7fd faf6 	bl	8002094 <HAL_GetTick>
 8004aa8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004aac:	f7fd faf2 	bl	8002094 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e1c0      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004abe:	4b92      	ldr	r3, [pc, #584]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1f0      	bne.n	8004aac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	f000 8081 	beq.w	8004bda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ad8:	4b8c      	ldr	r3, [pc, #560]	@ (8004d0c <HAL_RCC_OscConfig+0x770>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a8b      	ldr	r2, [pc, #556]	@ (8004d0c <HAL_RCC_OscConfig+0x770>)
 8004ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ae2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ae4:	f7fd fad6 	bl	8002094 <HAL_GetTick>
 8004ae8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aec:	f7fd fad2 	bl	8002094 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b64      	cmp	r3, #100	@ 0x64
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e1a0      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004afe:	4b83      	ldr	r3, [pc, #524]	@ (8004d0c <HAL_RCC_OscConfig+0x770>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d106      	bne.n	8004b20 <HAL_RCC_OscConfig+0x584>
 8004b12:	4b7d      	ldr	r3, [pc, #500]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b16:	4a7c      	ldr	r2, [pc, #496]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b1e:	e02d      	b.n	8004b7c <HAL_RCC_OscConfig+0x5e0>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10c      	bne.n	8004b42 <HAL_RCC_OscConfig+0x5a6>
 8004b28:	4b77      	ldr	r3, [pc, #476]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2c:	4a76      	ldr	r2, [pc, #472]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b2e:	f023 0301 	bic.w	r3, r3, #1
 8004b32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b34:	4b74      	ldr	r3, [pc, #464]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b38:	4a73      	ldr	r2, [pc, #460]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b3a:	f023 0304 	bic.w	r3, r3, #4
 8004b3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b40:	e01c      	b.n	8004b7c <HAL_RCC_OscConfig+0x5e0>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b05      	cmp	r3, #5
 8004b48:	d10c      	bne.n	8004b64 <HAL_RCC_OscConfig+0x5c8>
 8004b4a:	4b6f      	ldr	r3, [pc, #444]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4e:	4a6e      	ldr	r2, [pc, #440]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b50:	f043 0304 	orr.w	r3, r3, #4
 8004b54:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b56:	4b6c      	ldr	r3, [pc, #432]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5a:	4a6b      	ldr	r2, [pc, #428]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b5c:	f043 0301 	orr.w	r3, r3, #1
 8004b60:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b62:	e00b      	b.n	8004b7c <HAL_RCC_OscConfig+0x5e0>
 8004b64:	4b68      	ldr	r3, [pc, #416]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b68:	4a67      	ldr	r2, [pc, #412]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b70:	4b65      	ldr	r3, [pc, #404]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b74:	4a64      	ldr	r2, [pc, #400]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004b76:	f023 0304 	bic.w	r3, r3, #4
 8004b7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d015      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b84:	f7fd fa86 	bl	8002094 <HAL_GetTick>
 8004b88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b8a:	e00a      	b.n	8004ba2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8c:	f7fd fa82 	bl	8002094 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e14e      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ba2:	4b59      	ldr	r3, [pc, #356]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0ee      	beq.n	8004b8c <HAL_RCC_OscConfig+0x5f0>
 8004bae:	e014      	b.n	8004bda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bb0:	f7fd fa70 	bl	8002094 <HAL_GetTick>
 8004bb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bb6:	e00a      	b.n	8004bce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb8:	f7fd fa6c 	bl	8002094 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d901      	bls.n	8004bce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	e138      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bce:	4b4e      	ldr	r3, [pc, #312]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004bd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1ee      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	f000 812d 	beq.w	8004e3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004be4:	4b48      	ldr	r3, [pc, #288]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bec:	2b18      	cmp	r3, #24
 8004bee:	f000 80bd 	beq.w	8004d6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	f040 809e 	bne.w	8004d38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bfc:	4b42      	ldr	r3, [pc, #264]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a41      	ldr	r2, [pc, #260]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c08:	f7fd fa44 	bl	8002094 <HAL_GetTick>
 8004c0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c10:	f7fd fa40 	bl	8002094 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e10e      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c22:	4b39      	ldr	r3, [pc, #228]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1f0      	bne.n	8004c10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c2e:	4b36      	ldr	r3, [pc, #216]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c32:	4b37      	ldr	r3, [pc, #220]	@ (8004d10 <HAL_RCC_OscConfig+0x774>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c3e:	0112      	lsls	r2, r2, #4
 8004c40:	430a      	orrs	r2, r1
 8004c42:	4931      	ldr	r1, [pc, #196]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c56:	3b01      	subs	r3, #1
 8004c58:	025b      	lsls	r3, r3, #9
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c62:	3b01      	subs	r3, #1
 8004c64:	041b      	lsls	r3, r3, #16
 8004c66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c70:	3b01      	subs	r3, #1
 8004c72:	061b      	lsls	r3, r3, #24
 8004c74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c78:	4923      	ldr	r1, [pc, #140]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c7e:	4b22      	ldr	r3, [pc, #136]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	4a21      	ldr	r2, [pc, #132]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c84:	f023 0301 	bic.w	r3, r3, #1
 8004c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c8e:	4b21      	ldr	r3, [pc, #132]	@ (8004d14 <HAL_RCC_OscConfig+0x778>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c96:	00d2      	lsls	r2, r2, #3
 8004c98:	491b      	ldr	r1, [pc, #108]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca2:	f023 020c 	bic.w	r2, r3, #12
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	4917      	ldr	r1, [pc, #92]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004cb0:	4b15      	ldr	r3, [pc, #84]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	f023 0202 	bic.w	r2, r3, #2
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cbc:	4912      	ldr	r1, [pc, #72]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004cc2:	4b11      	ldr	r3, [pc, #68]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc6:	4a10      	ldr	r2, [pc, #64]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ccc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cce:	4b0e      	ldr	r3, [pc, #56]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004cda:	4b0b      	ldr	r3, [pc, #44]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cde:	4a0a      	ldr	r2, [pc, #40]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004ce6:	4b08      	ldr	r3, [pc, #32]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004ce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cea:	4a07      	ldr	r2, [pc, #28]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cf2:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a04      	ldr	r2, [pc, #16]	@ (8004d08 <HAL_RCC_OscConfig+0x76c>)
 8004cf8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7fd f9c9 	bl	8002094 <HAL_GetTick>
 8004d02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d04:	e011      	b.n	8004d2a <HAL_RCC_OscConfig+0x78e>
 8004d06:	bf00      	nop
 8004d08:	58024400 	.word	0x58024400
 8004d0c:	58024800 	.word	0x58024800
 8004d10:	fffffc0c 	.word	0xfffffc0c
 8004d14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fd f9bc 	bl	8002094 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e08a      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d2a:	4b47      	ldr	r3, [pc, #284]	@ (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x77c>
 8004d36:	e082      	b.n	8004e3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d38:	4b43      	ldr	r3, [pc, #268]	@ (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a42      	ldr	r2, [pc, #264]	@ (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004d3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d44:	f7fd f9a6 	bl	8002094 <HAL_GetTick>
 8004d48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d4a:	e008      	b.n	8004d5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d4c:	f7fd f9a2 	bl	8002094 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e070      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1f0      	bne.n	8004d4c <HAL_RCC_OscConfig+0x7b0>
 8004d6a:	e068      	b.n	8004e3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d6c:	4b36      	ldr	r3, [pc, #216]	@ (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d72:	4b35      	ldr	r3, [pc, #212]	@ (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d031      	beq.n	8004de4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	f003 0203 	and.w	r2, r3, #3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d12a      	bne.n	8004de4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d122      	bne.n	8004de4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d11a      	bne.n	8004de4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	0a5b      	lsrs	r3, r3, #9
 8004db2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d111      	bne.n	8004de4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	0c1b      	lsrs	r3, r3, #16
 8004dc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dcc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d108      	bne.n	8004de4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	0e1b      	lsrs	r3, r3, #24
 8004dd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dde:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e02b      	b.n	8004e40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004de8:	4b17      	ldr	r3, [pc, #92]	@ (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dec:	08db      	lsrs	r3, r3, #3
 8004dee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004df2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d01f      	beq.n	8004e3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004dfe:	4b12      	ldr	r3, [pc, #72]	@ (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e02:	4a11      	ldr	r2, [pc, #68]	@ (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e0a:	f7fd f943 	bl	8002094 <HAL_GetTick>
 8004e0e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e10:	bf00      	nop
 8004e12:	f7fd f93f 	bl	8002094 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d0f9      	beq.n	8004e12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004e20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e22:	4b0a      	ldr	r3, [pc, #40]	@ (8004e4c <HAL_RCC_OscConfig+0x8b0>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e2a:	00d2      	lsls	r2, r2, #3
 8004e2c:	4906      	ldr	r1, [pc, #24]	@ (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e32:	4b05      	ldr	r3, [pc, #20]	@ (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e36:	4a04      	ldr	r2, [pc, #16]	@ (8004e48 <HAL_RCC_OscConfig+0x8ac>)
 8004e38:	f043 0301 	orr.w	r3, r3, #1
 8004e3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3730      	adds	r7, #48	@ 0x30
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	58024400 	.word	0x58024400
 8004e4c:	ffff0007 	.word	0xffff0007

08004e50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e19c      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e64:	4b8a      	ldr	r3, [pc, #552]	@ (8005090 <HAL_RCC_ClockConfig+0x240>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d910      	bls.n	8004e94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e72:	4b87      	ldr	r3, [pc, #540]	@ (8005090 <HAL_RCC_ClockConfig+0x240>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f023 020f 	bic.w	r2, r3, #15
 8004e7a:	4985      	ldr	r1, [pc, #532]	@ (8005090 <HAL_RCC_ClockConfig+0x240>)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	4b83      	ldr	r3, [pc, #524]	@ (8005090 <HAL_RCC_ClockConfig+0x240>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e184      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d010      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	4b7b      	ldr	r3, [pc, #492]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d908      	bls.n	8004ec2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004eb0:	4b78      	ldr	r3, [pc, #480]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	4975      	ldr	r1, [pc, #468]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0308 	and.w	r3, r3, #8
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d010      	beq.n	8004ef0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695a      	ldr	r2, [r3, #20]
 8004ed2:	4b70      	ldr	r3, [pc, #448]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004ed4:	69db      	ldr	r3, [r3, #28]
 8004ed6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d908      	bls.n	8004ef0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ede:	4b6d      	ldr	r3, [pc, #436]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004ee0:	69db      	ldr	r3, [r3, #28]
 8004ee2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	496a      	ldr	r1, [pc, #424]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d010      	beq.n	8004f1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	4b64      	ldr	r3, [pc, #400]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d908      	bls.n	8004f1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f0c:	4b61      	ldr	r3, [pc, #388]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	495e      	ldr	r1, [pc, #376]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0320 	and.w	r3, r3, #32
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d010      	beq.n	8004f4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69da      	ldr	r2, [r3, #28]
 8004f2e:	4b59      	ldr	r3, [pc, #356]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d908      	bls.n	8004f4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f3a:	4b56      	ldr	r3, [pc, #344]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	4953      	ldr	r1, [pc, #332]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0302 	and.w	r3, r3, #2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d010      	beq.n	8004f7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d908      	bls.n	8004f7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f68:	4b4a      	ldr	r3, [pc, #296]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	f023 020f 	bic.w	r2, r3, #15
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4947      	ldr	r1, [pc, #284]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d055      	beq.n	8005032 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f86:	4b43      	ldr	r3, [pc, #268]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	4940      	ldr	r1, [pc, #256]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d107      	bne.n	8004fb0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d121      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0f6      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d107      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004fb8:	4b36      	ldr	r3, [pc, #216]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d115      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0ea      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fd0:	4b30      	ldr	r3, [pc, #192]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d109      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e0de      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fe0:	4b2c      	ldr	r3, [pc, #176]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0d6      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004ff0:	4b28      	ldr	r3, [pc, #160]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	f023 0207 	bic.w	r2, r3, #7
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	4925      	ldr	r1, [pc, #148]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005002:	f7fd f847 	bl	8002094 <HAL_GetTick>
 8005006:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005008:	e00a      	b.n	8005020 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800500a:	f7fd f843 	bl	8002094 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005018:	4293      	cmp	r3, r2
 800501a:	d901      	bls.n	8005020 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e0be      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005020:	4b1c      	ldr	r3, [pc, #112]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	429a      	cmp	r2, r3
 8005030:	d1eb      	bne.n	800500a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d010      	beq.n	8005060 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	4b14      	ldr	r3, [pc, #80]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	f003 030f 	and.w	r3, r3, #15
 800504a:	429a      	cmp	r2, r3
 800504c:	d208      	bcs.n	8005060 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800504e:	4b11      	ldr	r3, [pc, #68]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f023 020f 	bic.w	r2, r3, #15
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	490e      	ldr	r1, [pc, #56]	@ (8005094 <HAL_RCC_ClockConfig+0x244>)
 800505c:	4313      	orrs	r3, r2
 800505e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005060:	4b0b      	ldr	r3, [pc, #44]	@ (8005090 <HAL_RCC_ClockConfig+0x240>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d214      	bcs.n	8005098 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506e:	4b08      	ldr	r3, [pc, #32]	@ (8005090 <HAL_RCC_ClockConfig+0x240>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f023 020f 	bic.w	r2, r3, #15
 8005076:	4906      	ldr	r1, [pc, #24]	@ (8005090 <HAL_RCC_ClockConfig+0x240>)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	4313      	orrs	r3, r2
 800507c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800507e:	4b04      	ldr	r3, [pc, #16]	@ (8005090 <HAL_RCC_ClockConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 030f 	and.w	r3, r3, #15
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	429a      	cmp	r2, r3
 800508a:	d005      	beq.n	8005098 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
 800508e:	e086      	b.n	800519e <HAL_RCC_ClockConfig+0x34e>
 8005090:	52002000 	.word	0x52002000
 8005094:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0304 	and.w	r3, r3, #4
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d010      	beq.n	80050c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	4b3f      	ldr	r3, [pc, #252]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d208      	bcs.n	80050c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80050b4:	4b3c      	ldr	r3, [pc, #240]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	4939      	ldr	r1, [pc, #228]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d010      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	695a      	ldr	r2, [r3, #20]
 80050d6:	4b34      	ldr	r3, [pc, #208]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050de:	429a      	cmp	r2, r3
 80050e0:	d208      	bcs.n	80050f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050e2:	4b31      	ldr	r3, [pc, #196]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	695b      	ldr	r3, [r3, #20]
 80050ee:	492e      	ldr	r1, [pc, #184]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d010      	beq.n	8005122 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	699a      	ldr	r2, [r3, #24]
 8005104:	4b28      	ldr	r3, [pc, #160]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 8005106:	69db      	ldr	r3, [r3, #28]
 8005108:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800510c:	429a      	cmp	r2, r3
 800510e:	d208      	bcs.n	8005122 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005110:	4b25      	ldr	r3, [pc, #148]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	4922      	ldr	r1, [pc, #136]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 800511e:	4313      	orrs	r3, r2
 8005120:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d010      	beq.n	8005150 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69da      	ldr	r2, [r3, #28]
 8005132:	4b1d      	ldr	r3, [pc, #116]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 8005134:	6a1b      	ldr	r3, [r3, #32]
 8005136:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800513a:	429a      	cmp	r2, r3
 800513c:	d208      	bcs.n	8005150 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800513e:	4b1a      	ldr	r3, [pc, #104]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	4917      	ldr	r1, [pc, #92]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 800514c:	4313      	orrs	r3, r2
 800514e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005150:	f000 f89e 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 8005154:	4602      	mov	r2, r0
 8005156:	4b14      	ldr	r3, [pc, #80]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	0a1b      	lsrs	r3, r3, #8
 800515c:	f003 030f 	and.w	r3, r3, #15
 8005160:	4912      	ldr	r1, [pc, #72]	@ (80051ac <HAL_RCC_ClockConfig+0x35c>)
 8005162:	5ccb      	ldrb	r3, [r1, r3]
 8005164:	f003 031f 	and.w	r3, r3, #31
 8005168:	fa22 f303 	lsr.w	r3, r2, r3
 800516c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800516e:	4b0e      	ldr	r3, [pc, #56]	@ (80051a8 <HAL_RCC_ClockConfig+0x358>)
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f003 030f 	and.w	r3, r3, #15
 8005176:	4a0d      	ldr	r2, [pc, #52]	@ (80051ac <HAL_RCC_ClockConfig+0x35c>)
 8005178:	5cd3      	ldrb	r3, [r2, r3]
 800517a:	f003 031f 	and.w	r3, r3, #31
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	fa22 f303 	lsr.w	r3, r2, r3
 8005184:	4a0a      	ldr	r2, [pc, #40]	@ (80051b0 <HAL_RCC_ClockConfig+0x360>)
 8005186:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005188:	4a0a      	ldr	r2, [pc, #40]	@ (80051b4 <HAL_RCC_ClockConfig+0x364>)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800518e:	4b0a      	ldr	r3, [pc, #40]	@ (80051b8 <HAL_RCC_ClockConfig+0x368>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f7fc ff34 	bl	8002000 <HAL_InitTick>
 8005198:	4603      	mov	r3, r0
 800519a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3718      	adds	r7, #24
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	58024400 	.word	0x58024400
 80051ac:	0800abb0 	.word	0x0800abb0
 80051b0:	24000008 	.word	0x24000008
 80051b4:	24000004 	.word	0x24000004
 80051b8:	2400000c 	.word	0x2400000c

080051bc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08c      	sub	sp, #48	@ 0x30
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d12a      	bne.n	8005224 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80051ce:	4b2d      	ldr	r3, [pc, #180]	@ (8005284 <HAL_RCC_MCOConfig+0xc8>)
 80051d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005284 <HAL_RCC_MCOConfig+0xc8>)
 80051d6:	f043 0301 	orr.w	r3, r3, #1
 80051da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80051de:	4b29      	ldr	r3, [pc, #164]	@ (8005284 <HAL_RCC_MCOConfig+0xc8>)
 80051e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80051ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051f2:	2302      	movs	r3, #2
 80051f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051f6:	2303      	movs	r3, #3
 80051f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051fa:	2300      	movs	r3, #0
 80051fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80051fe:	2300      	movs	r3, #0
 8005200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005202:	f107 031c 	add.w	r3, r7, #28
 8005206:	4619      	mov	r1, r3
 8005208:	481f      	ldr	r0, [pc, #124]	@ (8005288 <HAL_RCC_MCOConfig+0xcc>)
 800520a:	f7fe f85f 	bl	80032cc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800520e:	4b1d      	ldr	r3, [pc, #116]	@ (8005284 <HAL_RCC_MCOConfig+0xc8>)
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	430b      	orrs	r3, r1
 800521c:	4919      	ldr	r1, [pc, #100]	@ (8005284 <HAL_RCC_MCOConfig+0xc8>)
 800521e:	4313      	orrs	r3, r2
 8005220:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005222:	e02a      	b.n	800527a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005224:	4b17      	ldr	r3, [pc, #92]	@ (8005284 <HAL_RCC_MCOConfig+0xc8>)
 8005226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800522a:	4a16      	ldr	r2, [pc, #88]	@ (8005284 <HAL_RCC_MCOConfig+0xc8>)
 800522c:	f043 0304 	orr.w	r3, r3, #4
 8005230:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005234:	4b13      	ldr	r3, [pc, #76]	@ (8005284 <HAL_RCC_MCOConfig+0xc8>)
 8005236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005242:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005248:	2302      	movs	r3, #2
 800524a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800524c:	2303      	movs	r3, #3
 800524e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005250:	2300      	movs	r3, #0
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005254:	2300      	movs	r3, #0
 8005256:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005258:	f107 031c 	add.w	r3, r7, #28
 800525c:	4619      	mov	r1, r3
 800525e:	480b      	ldr	r0, [pc, #44]	@ (800528c <HAL_RCC_MCOConfig+0xd0>)
 8005260:	f7fe f834 	bl	80032cc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005264:	4b07      	ldr	r3, [pc, #28]	@ (8005284 <HAL_RCC_MCOConfig+0xc8>)
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	01d9      	lsls	r1, r3, #7
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	430b      	orrs	r3, r1
 8005274:	4903      	ldr	r1, [pc, #12]	@ (8005284 <HAL_RCC_MCOConfig+0xc8>)
 8005276:	4313      	orrs	r3, r2
 8005278:	610b      	str	r3, [r1, #16]
}
 800527a:	bf00      	nop
 800527c:	3730      	adds	r7, #48	@ 0x30
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	58024400 	.word	0x58024400
 8005288:	58020000 	.word	0x58020000
 800528c:	58020800 	.word	0x58020800

08005290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005290:	b480      	push	{r7}
 8005292:	b089      	sub	sp, #36	@ 0x24
 8005294:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005296:	4bb3      	ldr	r3, [pc, #716]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800529e:	2b18      	cmp	r3, #24
 80052a0:	f200 8155 	bhi.w	800554e <HAL_RCC_GetSysClockFreq+0x2be>
 80052a4:	a201      	add	r2, pc, #4	@ (adr r2, 80052ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	08005311 	.word	0x08005311
 80052b0:	0800554f 	.word	0x0800554f
 80052b4:	0800554f 	.word	0x0800554f
 80052b8:	0800554f 	.word	0x0800554f
 80052bc:	0800554f 	.word	0x0800554f
 80052c0:	0800554f 	.word	0x0800554f
 80052c4:	0800554f 	.word	0x0800554f
 80052c8:	0800554f 	.word	0x0800554f
 80052cc:	08005337 	.word	0x08005337
 80052d0:	0800554f 	.word	0x0800554f
 80052d4:	0800554f 	.word	0x0800554f
 80052d8:	0800554f 	.word	0x0800554f
 80052dc:	0800554f 	.word	0x0800554f
 80052e0:	0800554f 	.word	0x0800554f
 80052e4:	0800554f 	.word	0x0800554f
 80052e8:	0800554f 	.word	0x0800554f
 80052ec:	0800533d 	.word	0x0800533d
 80052f0:	0800554f 	.word	0x0800554f
 80052f4:	0800554f 	.word	0x0800554f
 80052f8:	0800554f 	.word	0x0800554f
 80052fc:	0800554f 	.word	0x0800554f
 8005300:	0800554f 	.word	0x0800554f
 8005304:	0800554f 	.word	0x0800554f
 8005308:	0800554f 	.word	0x0800554f
 800530c:	08005343 	.word	0x08005343
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005310:	4b94      	ldr	r3, [pc, #592]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0320 	and.w	r3, r3, #32
 8005318:	2b00      	cmp	r3, #0
 800531a:	d009      	beq.n	8005330 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800531c:	4b91      	ldr	r3, [pc, #580]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	08db      	lsrs	r3, r3, #3
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	4a90      	ldr	r2, [pc, #576]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005328:	fa22 f303 	lsr.w	r3, r2, r3
 800532c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800532e:	e111      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005330:	4b8d      	ldr	r3, [pc, #564]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005332:	61bb      	str	r3, [r7, #24]
      break;
 8005334:	e10e      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005336:	4b8d      	ldr	r3, [pc, #564]	@ (800556c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005338:	61bb      	str	r3, [r7, #24]
      break;
 800533a:	e10b      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800533c:	4b8c      	ldr	r3, [pc, #560]	@ (8005570 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800533e:	61bb      	str	r3, [r7, #24]
      break;
 8005340:	e108      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005342:	4b88      	ldr	r3, [pc, #544]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800534c:	4b85      	ldr	r3, [pc, #532]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800534e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005350:	091b      	lsrs	r3, r3, #4
 8005352:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005356:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005358:	4b82      	ldr	r3, [pc, #520]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800535a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005362:	4b80      	ldr	r3, [pc, #512]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005366:	08db      	lsrs	r3, r3, #3
 8005368:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	fb02 f303 	mul.w	r3, r2, r3
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80e1 	beq.w	8005548 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2b02      	cmp	r3, #2
 800538a:	f000 8083 	beq.w	8005494 <HAL_RCC_GetSysClockFreq+0x204>
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b02      	cmp	r3, #2
 8005392:	f200 80a1 	bhi.w	80054d8 <HAL_RCC_GetSysClockFreq+0x248>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_RCC_GetSysClockFreq+0x114>
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d056      	beq.n	8005450 <HAL_RCC_GetSysClockFreq+0x1c0>
 80053a2:	e099      	b.n	80054d8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053a4:	4b6f      	ldr	r3, [pc, #444]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d02d      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053b0:	4b6c      	ldr	r3, [pc, #432]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	08db      	lsrs	r3, r3, #3
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	4a6b      	ldr	r2, [pc, #428]	@ (8005568 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
 80053c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	ee07 3a90 	vmov	s15, r3
 80053c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053da:	4b62      	ldr	r3, [pc, #392]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053e2:	ee07 3a90 	vmov	s15, r3
 80053e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005574 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005406:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800540a:	e087      	b.n	800551c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005416:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005578 <HAL_RCC_GetSysClockFreq+0x2e8>
 800541a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800541e:	4b51      	ldr	r3, [pc, #324]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005426:	ee07 3a90 	vmov	s15, r3
 800542a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800542e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005432:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005574 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800543a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800543e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800544a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800544e:	e065      	b.n	800551c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800545a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800557c <HAL_RCC_GetSysClockFreq+0x2ec>
 800545e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005462:	4b40      	ldr	r3, [pc, #256]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800546a:	ee07 3a90 	vmov	s15, r3
 800546e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005472:	ed97 6a02 	vldr	s12, [r7, #8]
 8005476:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005574 <HAL_RCC_GetSysClockFreq+0x2e4>
 800547a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800547e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005482:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800548a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800548e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005492:	e043      	b.n	800551c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005580 <HAL_RCC_GetSysClockFreq+0x2f0>
 80054a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a6:	4b2f      	ldr	r3, [pc, #188]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005574 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054d6:	e021      	b.n	800551c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800557c <HAL_RCC_GetSysClockFreq+0x2ec>
 80054e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ea:	4b1e      	ldr	r3, [pc, #120]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80054fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005574 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800550e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005516:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800551a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800551c:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800551e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005520:	0a5b      	lsrs	r3, r3, #9
 8005522:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005526:	3301      	adds	r3, #1
 8005528:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005534:	edd7 6a07 	vldr	s13, [r7, #28]
 8005538:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800553c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005540:	ee17 3a90 	vmov	r3, s15
 8005544:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005546:	e005      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	61bb      	str	r3, [r7, #24]
      break;
 800554c:	e002      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800554e:	4b07      	ldr	r3, [pc, #28]	@ (800556c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005550:	61bb      	str	r3, [r7, #24]
      break;
 8005552:	bf00      	nop
  }

  return sysclockfreq;
 8005554:	69bb      	ldr	r3, [r7, #24]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3724      	adds	r7, #36	@ 0x24
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	58024400 	.word	0x58024400
 8005568:	03d09000 	.word	0x03d09000
 800556c:	003d0900 	.word	0x003d0900
 8005570:	007a1200 	.word	0x007a1200
 8005574:	46000000 	.word	0x46000000
 8005578:	4c742400 	.word	0x4c742400
 800557c:	4a742400 	.word	0x4a742400
 8005580:	4af42400 	.word	0x4af42400

08005584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800558a:	f7ff fe81 	bl	8005290 <HAL_RCC_GetSysClockFreq>
 800558e:	4602      	mov	r2, r0
 8005590:	4b10      	ldr	r3, [pc, #64]	@ (80055d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	0a1b      	lsrs	r3, r3, #8
 8005596:	f003 030f 	and.w	r3, r3, #15
 800559a:	490f      	ldr	r1, [pc, #60]	@ (80055d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800559c:	5ccb      	ldrb	r3, [r1, r3]
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	fa22 f303 	lsr.w	r3, r2, r3
 80055a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055a8:	4b0a      	ldr	r3, [pc, #40]	@ (80055d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	4a09      	ldr	r2, [pc, #36]	@ (80055d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80055b2:	5cd3      	ldrb	r3, [r2, r3]
 80055b4:	f003 031f 	and.w	r3, r3, #31
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	fa22 f303 	lsr.w	r3, r2, r3
 80055be:	4a07      	ldr	r2, [pc, #28]	@ (80055dc <HAL_RCC_GetHCLKFreq+0x58>)
 80055c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055c2:	4a07      	ldr	r2, [pc, #28]	@ (80055e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80055c8:	4b04      	ldr	r3, [pc, #16]	@ (80055dc <HAL_RCC_GetHCLKFreq+0x58>)
 80055ca:	681b      	ldr	r3, [r3, #0]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3708      	adds	r7, #8
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	58024400 	.word	0x58024400
 80055d8:	0800abb0 	.word	0x0800abb0
 80055dc:	24000008 	.word	0x24000008
 80055e0:	24000004 	.word	0x24000004

080055e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80055e8:	f7ff ffcc 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80055ec:	4602      	mov	r2, r0
 80055ee:	4b06      	ldr	r3, [pc, #24]	@ (8005608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	091b      	lsrs	r3, r3, #4
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	4904      	ldr	r1, [pc, #16]	@ (800560c <HAL_RCC_GetPCLK1Freq+0x28>)
 80055fa:	5ccb      	ldrb	r3, [r1, r3]
 80055fc:	f003 031f 	and.w	r3, r3, #31
 8005600:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005604:	4618      	mov	r0, r3
 8005606:	bd80      	pop	{r7, pc}
 8005608:	58024400 	.word	0x58024400
 800560c:	0800abb0 	.word	0x0800abb0

08005610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005614:	f7ff ffb6 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 8005618:	4602      	mov	r2, r0
 800561a:	4b06      	ldr	r3, [pc, #24]	@ (8005634 <HAL_RCC_GetPCLK2Freq+0x24>)
 800561c:	69db      	ldr	r3, [r3, #28]
 800561e:	0a1b      	lsrs	r3, r3, #8
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	4904      	ldr	r1, [pc, #16]	@ (8005638 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005626:	5ccb      	ldrb	r3, [r1, r3]
 8005628:	f003 031f 	and.w	r3, r3, #31
 800562c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005630:	4618      	mov	r0, r3
 8005632:	bd80      	pop	{r7, pc}
 8005634:	58024400 	.word	0x58024400
 8005638:	0800abb0 	.word	0x0800abb0

0800563c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800563c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005640:	b0ca      	sub	sp, #296	@ 0x128
 8005642:	af00      	add	r7, sp, #0
 8005644:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005648:	2300      	movs	r3, #0
 800564a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800564e:	2300      	movs	r3, #0
 8005650:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005660:	2500      	movs	r5, #0
 8005662:	ea54 0305 	orrs.w	r3, r4, r5
 8005666:	d049      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800566e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005672:	d02f      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005674:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005678:	d828      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800567a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800567e:	d01a      	beq.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005680:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005684:	d822      	bhi.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005686:	2b00      	cmp	r3, #0
 8005688:	d003      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800568a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800568e:	d007      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005690:	e01c      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005692:	4bb8      	ldr	r3, [pc, #736]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005696:	4ab7      	ldr	r2, [pc, #732]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800569c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800569e:	e01a      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a4:	3308      	adds	r3, #8
 80056a6:	2102      	movs	r1, #2
 80056a8:	4618      	mov	r0, r3
 80056aa:	f001 fc8f 	bl	8006fcc <RCCEx_PLL2_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056b4:	e00f      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ba:	3328      	adds	r3, #40	@ 0x28
 80056bc:	2102      	movs	r1, #2
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 fd36 	bl	8007130 <RCCEx_PLL3_Config>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056ca:	e004      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056d2:	e000      	b.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80056d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10a      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056de:	4ba5      	ldr	r3, [pc, #660]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80056e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056ec:	4aa1      	ldr	r2, [pc, #644]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056ee:	430b      	orrs	r3, r1
 80056f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80056f2:	e003      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005708:	f04f 0900 	mov.w	r9, #0
 800570c:	ea58 0309 	orrs.w	r3, r8, r9
 8005710:	d047      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005718:	2b04      	cmp	r3, #4
 800571a:	d82a      	bhi.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800571c:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005739 	.word	0x08005739
 8005728:	08005747 	.word	0x08005747
 800572c:	0800575d 	.word	0x0800575d
 8005730:	0800577b 	.word	0x0800577b
 8005734:	0800577b 	.word	0x0800577b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005738:	4b8e      	ldr	r3, [pc, #568]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800573a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573c:	4a8d      	ldr	r2, [pc, #564]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800573e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005742:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005744:	e01a      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574a:	3308      	adds	r3, #8
 800574c:	2100      	movs	r1, #0
 800574e:	4618      	mov	r0, r3
 8005750:	f001 fc3c 	bl	8006fcc <RCCEx_PLL2_Config>
 8005754:	4603      	mov	r3, r0
 8005756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800575a:	e00f      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800575c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005760:	3328      	adds	r3, #40	@ 0x28
 8005762:	2100      	movs	r1, #0
 8005764:	4618      	mov	r0, r3
 8005766:	f001 fce3 	bl	8007130 <RCCEx_PLL3_Config>
 800576a:	4603      	mov	r3, r0
 800576c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005770:	e004      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005778:	e000      	b.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800577a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800577c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005784:	4b7b      	ldr	r3, [pc, #492]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005786:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005788:	f023 0107 	bic.w	r1, r3, #7
 800578c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005792:	4a78      	ldr	r2, [pc, #480]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005794:	430b      	orrs	r3, r1
 8005796:	6513      	str	r3, [r2, #80]	@ 0x50
 8005798:	e003      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800579a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800579e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80057a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80057ae:	f04f 0b00 	mov.w	fp, #0
 80057b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80057b6:	d04c      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80057b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057c2:	d030      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80057c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057c8:	d829      	bhi.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80057cc:	d02d      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80057ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80057d0:	d825      	bhi.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057d2:	2b80      	cmp	r3, #128	@ 0x80
 80057d4:	d018      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80057d6:	2b80      	cmp	r3, #128	@ 0x80
 80057d8:	d821      	bhi.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d002      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80057de:	2b40      	cmp	r3, #64	@ 0x40
 80057e0:	d007      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80057e2:	e01c      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e4:	4b63      	ldr	r3, [pc, #396]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e8:	4a62      	ldr	r2, [pc, #392]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057f0:	e01c      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f6:	3308      	adds	r3, #8
 80057f8:	2100      	movs	r1, #0
 80057fa:	4618      	mov	r0, r3
 80057fc:	f001 fbe6 	bl	8006fcc <RCCEx_PLL2_Config>
 8005800:	4603      	mov	r3, r0
 8005802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005806:	e011      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800580c:	3328      	adds	r3, #40	@ 0x28
 800580e:	2100      	movs	r1, #0
 8005810:	4618      	mov	r0, r3
 8005812:	f001 fc8d 	bl	8007130 <RCCEx_PLL3_Config>
 8005816:	4603      	mov	r3, r0
 8005818:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800581c:	e006      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005824:	e002      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005826:	bf00      	nop
 8005828:	e000      	b.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800582a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800582c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10a      	bne.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005834:	4b4f      	ldr	r3, [pc, #316]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005838:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800583c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005842:	4a4c      	ldr	r2, [pc, #304]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005844:	430b      	orrs	r3, r1
 8005846:	6513      	str	r3, [r2, #80]	@ 0x50
 8005848:	e003      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800584a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800584e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800585e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005862:	2300      	movs	r3, #0
 8005864:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005868:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800586c:	460b      	mov	r3, r1
 800586e:	4313      	orrs	r3, r2
 8005870:	d053      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005876:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800587a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800587e:	d035      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005880:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005884:	d82e      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005886:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800588a:	d031      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800588c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005890:	d828      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005892:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005896:	d01a      	beq.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005898:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800589c:	d822      	bhi.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80058a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058a6:	d007      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80058a8:	e01c      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058aa:	4b32      	ldr	r3, [pc, #200]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ae:	4a31      	ldr	r2, [pc, #196]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058b6:	e01c      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058bc:	3308      	adds	r3, #8
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f001 fb83 	bl	8006fcc <RCCEx_PLL2_Config>
 80058c6:	4603      	mov	r3, r0
 80058c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80058cc:	e011      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d2:	3328      	adds	r3, #40	@ 0x28
 80058d4:	2100      	movs	r1, #0
 80058d6:	4618      	mov	r0, r3
 80058d8:	f001 fc2a 	bl	8007130 <RCCEx_PLL3_Config>
 80058dc:	4603      	mov	r3, r0
 80058de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058e2:	e006      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058ea:	e002      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058ec:	bf00      	nop
 80058ee:	e000      	b.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d10b      	bne.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80058fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005906:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800590a:	4a1a      	ldr	r2, [pc, #104]	@ (8005974 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800590c:	430b      	orrs	r3, r1
 800590e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005910:	e003      	b.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005916:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005922:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005926:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800592a:	2300      	movs	r3, #0
 800592c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005930:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005934:	460b      	mov	r3, r1
 8005936:	4313      	orrs	r3, r2
 8005938:	d056      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800593a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800593e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005942:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005946:	d038      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005948:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800594c:	d831      	bhi.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800594e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005952:	d034      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005954:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005958:	d82b      	bhi.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800595a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800595e:	d01d      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005960:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005964:	d825      	bhi.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005966:	2b00      	cmp	r3, #0
 8005968:	d006      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800596a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005970:	e01f      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005972:	bf00      	nop
 8005974:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005978:	4ba2      	ldr	r3, [pc, #648]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800597a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800597c:	4aa1      	ldr	r2, [pc, #644]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800597e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005984:	e01c      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800598a:	3308      	adds	r3, #8
 800598c:	2100      	movs	r1, #0
 800598e:	4618      	mov	r0, r3
 8005990:	f001 fb1c 	bl	8006fcc <RCCEx_PLL2_Config>
 8005994:	4603      	mov	r3, r0
 8005996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800599a:	e011      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a0:	3328      	adds	r3, #40	@ 0x28
 80059a2:	2100      	movs	r1, #0
 80059a4:	4618      	mov	r0, r3
 80059a6:	f001 fbc3 	bl	8007130 <RCCEx_PLL3_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059b0:	e006      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059b8:	e002      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80059ba:	bf00      	nop
 80059bc:	e000      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80059be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10b      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80059c8:	4b8e      	ldr	r3, [pc, #568]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80059d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059d8:	4a8a      	ldr	r2, [pc, #552]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059da:	430b      	orrs	r3, r1
 80059dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80059de:	e003      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80059f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059f8:	2300      	movs	r3, #0
 80059fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005a02:	460b      	mov	r3, r1
 8005a04:	4313      	orrs	r3, r2
 8005a06:	d03a      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a0e:	2b30      	cmp	r3, #48	@ 0x30
 8005a10:	d01f      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005a12:	2b30      	cmp	r3, #48	@ 0x30
 8005a14:	d819      	bhi.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005a16:	2b20      	cmp	r3, #32
 8005a18:	d00c      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	d815      	bhi.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d019      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005a22:	2b10      	cmp	r3, #16
 8005a24:	d111      	bne.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a26:	4b77      	ldr	r3, [pc, #476]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a2a:	4a76      	ldr	r2, [pc, #472]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a32:	e011      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a38:	3308      	adds	r3, #8
 8005a3a:	2102      	movs	r1, #2
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f001 fac5 	bl	8006fcc <RCCEx_PLL2_Config>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a48:	e006      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a50:	e002      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a52:	bf00      	nop
 8005a54:	e000      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a60:	4b68      	ldr	r3, [pc, #416]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a64:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a6e:	4a65      	ldr	r2, [pc, #404]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a70:	430b      	orrs	r3, r1
 8005a72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a74:	e003      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a86:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a8a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a94:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	d051      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aa8:	d035      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005aaa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aae:	d82e      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ab0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ab4:	d031      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005ab6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005aba:	d828      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005abc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ac0:	d01a      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005ac2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ac6:	d822      	bhi.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005acc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ad0:	d007      	beq.n	8005ae2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005ad2:	e01c      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad8:	4a4a      	ldr	r2, [pc, #296]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ade:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ae0:	e01c      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f001 fa6e 	bl	8006fcc <RCCEx_PLL2_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005af6:	e011      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afc:	3328      	adds	r3, #40	@ 0x28
 8005afe:	2100      	movs	r1, #0
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 fb15 	bl	8007130 <RCCEx_PLL3_Config>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b0c:	e006      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b14:	e002      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005b16:	bf00      	nop
 8005b18:	e000      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005b1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10a      	bne.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b24:	4b37      	ldr	r3, [pc, #220]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b28:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b32:	4a34      	ldr	r2, [pc, #208]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b34:	430b      	orrs	r3, r1
 8005b36:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b38:	e003      	b.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005b4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b52:	2300      	movs	r3, #0
 8005b54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b58:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005b5c:	460b      	mov	r3, r1
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	d056      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b6c:	d033      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005b6e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b72:	d82c      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b78:	d02f      	beq.n	8005bda <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005b7a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b7e:	d826      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b80:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b84:	d02b      	beq.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b86:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b8a:	d820      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b90:	d012      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005b92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b96:	d81a      	bhi.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d022      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ba0:	d115      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba6:	3308      	adds	r3, #8
 8005ba8:	2101      	movs	r1, #1
 8005baa:	4618      	mov	r0, r3
 8005bac:	f001 fa0e 	bl	8006fcc <RCCEx_PLL2_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005bb6:	e015      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbc:	3328      	adds	r3, #40	@ 0x28
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f001 fab5 	bl	8007130 <RCCEx_PLL3_Config>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005bcc:	e00a      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bd4:	e006      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bd6:	bf00      	nop
 8005bd8:	e004      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bda:	bf00      	nop
 8005bdc:	e002      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bde:	bf00      	nop
 8005be0:	e000      	b.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10d      	bne.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005bec:	4b05      	ldr	r3, [pc, #20]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bf0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bfa:	4a02      	ldr	r2, [pc, #8]	@ (8005c04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c00:	e006      	b.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005c02:	bf00      	nop
 8005c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c20:	2300      	movs	r3, #0
 8005c22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	d055      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c3c:	d033      	beq.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c42:	d82c      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c48:	d02f      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c4e:	d826      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c54:	d02b      	beq.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005c56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c5a:	d820      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c60:	d012      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005c62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c66:	d81a      	bhi.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d022      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005c6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c70:	d115      	bne.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c76:	3308      	adds	r3, #8
 8005c78:	2101      	movs	r1, #1
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f001 f9a6 	bl	8006fcc <RCCEx_PLL2_Config>
 8005c80:	4603      	mov	r3, r0
 8005c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c86:	e015      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8c:	3328      	adds	r3, #40	@ 0x28
 8005c8e:	2101      	movs	r1, #1
 8005c90:	4618      	mov	r0, r3
 8005c92:	f001 fa4d 	bl	8007130 <RCCEx_PLL3_Config>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c9c:	e00a      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ca4:	e006      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ca6:	bf00      	nop
 8005ca8:	e004      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005caa:	bf00      	nop
 8005cac:	e002      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cae:	bf00      	nop
 8005cb0:	e000      	b.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10b      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005cbc:	4ba3      	ldr	r3, [pc, #652]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ccc:	4a9f      	ldr	r2, [pc, #636]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cd2:	e003      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cec:	2300      	movs	r3, #0
 8005cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005cf2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	d037      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d06:	d00e      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005d08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d0c:	d816      	bhi.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d018      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005d12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d16:	d111      	bne.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d18:	4b8c      	ldr	r3, [pc, #560]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1c:	4a8b      	ldr	r2, [pc, #556]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d24:	e00f      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	2101      	movs	r1, #1
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 f94c 	bl	8006fcc <RCCEx_PLL2_Config>
 8005d34:	4603      	mov	r3, r0
 8005d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d3a:	e004      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d42:	e000      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10a      	bne.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d4e:	4b7f      	ldr	r3, [pc, #508]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5c:	4a7b      	ldr	r2, [pc, #492]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d5e:	430b      	orrs	r3, r1
 8005d60:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d62:	e003      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	d039      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d92:	2b03      	cmp	r3, #3
 8005d94:	d81c      	bhi.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005d96:	a201      	add	r2, pc, #4	@ (adr r2, 8005d9c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9c:	08005dd9 	.word	0x08005dd9
 8005da0:	08005dad 	.word	0x08005dad
 8005da4:	08005dbb 	.word	0x08005dbb
 8005da8:	08005dd9 	.word	0x08005dd9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dac:	4b67      	ldr	r3, [pc, #412]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db0:	4a66      	ldr	r2, [pc, #408]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005db8:	e00f      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	2102      	movs	r1, #2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f001 f902 	bl	8006fcc <RCCEx_PLL2_Config>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005dce:	e004      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dd6:	e000      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005de2:	4b5a      	ldr	r3, [pc, #360]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005de6:	f023 0103 	bic.w	r1, r3, #3
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005df0:	4a56      	ldr	r2, [pc, #344]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005df2:	430b      	orrs	r3, r1
 8005df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005df6:	e003      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005e0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e10:	2300      	movs	r3, #0
 8005e12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	f000 809f 	beq.w	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e22:	4b4b      	ldr	r3, [pc, #300]	@ (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a4a      	ldr	r2, [pc, #296]	@ (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e2e:	f7fc f931 	bl	8002094 <HAL_GetTick>
 8005e32:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e36:	e00b      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e38:	f7fc f92c 	bl	8002094 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b64      	cmp	r3, #100	@ 0x64
 8005e46:	d903      	bls.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e4e:	e005      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e50:	4b3f      	ldr	r3, [pc, #252]	@ (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0ed      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d179      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e64:	4b39      	ldr	r3, [pc, #228]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e70:	4053      	eors	r3, r2
 8005e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d015      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e7a:	4b34      	ldr	r3, [pc, #208]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e86:	4b31      	ldr	r3, [pc, #196]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e8a:	4a30      	ldr	r2, [pc, #192]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e92:	4b2e      	ldr	r3, [pc, #184]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e96:	4a2d      	ldr	r2, [pc, #180]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e9e:	4a2b      	ldr	r2, [pc, #172]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ea0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005ea4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eb2:	d118      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb4:	f7fc f8ee 	bl	8002094 <HAL_GetTick>
 8005eb8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ebc:	e00d      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ebe:	f7fc f8e9 	bl	8002094 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ec8:	1ad2      	subs	r2, r2, r3
 8005eca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d903      	bls.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005ed8:	e005      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eda:	4b1c      	ldr	r3, [pc, #112]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0eb      	beq.n	8005ebe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d129      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005efa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005efe:	d10e      	bne.n	8005f1e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005f00:	4b12      	ldr	r3, [pc, #72]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f10:	091a      	lsrs	r2, r3, #4
 8005f12:	4b10      	ldr	r3, [pc, #64]	@ (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005f14:	4013      	ands	r3, r2
 8005f16:	4a0d      	ldr	r2, [pc, #52]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f18:	430b      	orrs	r3, r1
 8005f1a:	6113      	str	r3, [r2, #16]
 8005f1c:	e005      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	4a0a      	ldr	r2, [pc, #40]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f28:	6113      	str	r3, [r2, #16]
 8005f2a:	4b08      	ldr	r3, [pc, #32]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f2c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f3a:	4a04      	ldr	r2, [pc, #16]	@ (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f40:	e00e      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005f4a:	e009      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005f4c:	58024400 	.word	0x58024400
 8005f50:	58024800 	.word	0x58024800
 8005f54:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	f002 0301 	and.w	r3, r2, #1
 8005f6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f70:	2300      	movs	r3, #0
 8005f72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f000 8089 	beq.w	8006094 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f88:	2b28      	cmp	r3, #40	@ 0x28
 8005f8a:	d86b      	bhi.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f92:	bf00      	nop
 8005f94:	0800606d 	.word	0x0800606d
 8005f98:	08006065 	.word	0x08006065
 8005f9c:	08006065 	.word	0x08006065
 8005fa0:	08006065 	.word	0x08006065
 8005fa4:	08006065 	.word	0x08006065
 8005fa8:	08006065 	.word	0x08006065
 8005fac:	08006065 	.word	0x08006065
 8005fb0:	08006065 	.word	0x08006065
 8005fb4:	08006039 	.word	0x08006039
 8005fb8:	08006065 	.word	0x08006065
 8005fbc:	08006065 	.word	0x08006065
 8005fc0:	08006065 	.word	0x08006065
 8005fc4:	08006065 	.word	0x08006065
 8005fc8:	08006065 	.word	0x08006065
 8005fcc:	08006065 	.word	0x08006065
 8005fd0:	08006065 	.word	0x08006065
 8005fd4:	0800604f 	.word	0x0800604f
 8005fd8:	08006065 	.word	0x08006065
 8005fdc:	08006065 	.word	0x08006065
 8005fe0:	08006065 	.word	0x08006065
 8005fe4:	08006065 	.word	0x08006065
 8005fe8:	08006065 	.word	0x08006065
 8005fec:	08006065 	.word	0x08006065
 8005ff0:	08006065 	.word	0x08006065
 8005ff4:	0800606d 	.word	0x0800606d
 8005ff8:	08006065 	.word	0x08006065
 8005ffc:	08006065 	.word	0x08006065
 8006000:	08006065 	.word	0x08006065
 8006004:	08006065 	.word	0x08006065
 8006008:	08006065 	.word	0x08006065
 800600c:	08006065 	.word	0x08006065
 8006010:	08006065 	.word	0x08006065
 8006014:	0800606d 	.word	0x0800606d
 8006018:	08006065 	.word	0x08006065
 800601c:	08006065 	.word	0x08006065
 8006020:	08006065 	.word	0x08006065
 8006024:	08006065 	.word	0x08006065
 8006028:	08006065 	.word	0x08006065
 800602c:	08006065 	.word	0x08006065
 8006030:	08006065 	.word	0x08006065
 8006034:	0800606d 	.word	0x0800606d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603c:	3308      	adds	r3, #8
 800603e:	2101      	movs	r1, #1
 8006040:	4618      	mov	r0, r3
 8006042:	f000 ffc3 	bl	8006fcc <RCCEx_PLL2_Config>
 8006046:	4603      	mov	r3, r0
 8006048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800604c:	e00f      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800604e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006052:	3328      	adds	r3, #40	@ 0x28
 8006054:	2101      	movs	r1, #1
 8006056:	4618      	mov	r0, r3
 8006058:	f001 f86a 	bl	8007130 <RCCEx_PLL3_Config>
 800605c:	4603      	mov	r3, r0
 800605e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006062:	e004      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800606a:	e000      	b.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800606c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800606e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10a      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006076:	4bbf      	ldr	r3, [pc, #764]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800607a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800607e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006082:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006084:	4abb      	ldr	r2, [pc, #748]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006086:	430b      	orrs	r3, r1
 8006088:	6553      	str	r3, [r2, #84]	@ 0x54
 800608a:	e003      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f002 0302 	and.w	r3, r2, #2
 80060a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060a4:	2300      	movs	r3, #0
 80060a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80060aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80060ae:	460b      	mov	r3, r1
 80060b0:	4313      	orrs	r3, r2
 80060b2:	d041      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80060b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060ba:	2b05      	cmp	r3, #5
 80060bc:	d824      	bhi.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80060be:	a201      	add	r2, pc, #4	@ (adr r2, 80060c4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80060c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060c4:	08006111 	.word	0x08006111
 80060c8:	080060dd 	.word	0x080060dd
 80060cc:	080060f3 	.word	0x080060f3
 80060d0:	08006111 	.word	0x08006111
 80060d4:	08006111 	.word	0x08006111
 80060d8:	08006111 	.word	0x08006111
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e0:	3308      	adds	r3, #8
 80060e2:	2101      	movs	r1, #1
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 ff71 	bl	8006fcc <RCCEx_PLL2_Config>
 80060ea:	4603      	mov	r3, r0
 80060ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060f0:	e00f      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060f6:	3328      	adds	r3, #40	@ 0x28
 80060f8:	2101      	movs	r1, #1
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 f818 	bl	8007130 <RCCEx_PLL3_Config>
 8006100:	4603      	mov	r3, r0
 8006102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006106:	e004      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800610e:	e000      	b.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10a      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800611a:	4b96      	ldr	r3, [pc, #600]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800611c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800611e:	f023 0107 	bic.w	r1, r3, #7
 8006122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006126:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006128:	4a92      	ldr	r2, [pc, #584]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800612a:	430b      	orrs	r3, r1
 800612c:	6553      	str	r3, [r2, #84]	@ 0x54
 800612e:	e003      	b.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006134:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006140:	f002 0304 	and.w	r3, r2, #4
 8006144:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006148:	2300      	movs	r3, #0
 800614a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800614e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006152:	460b      	mov	r3, r1
 8006154:	4313      	orrs	r3, r2
 8006156:	d044      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006160:	2b05      	cmp	r3, #5
 8006162:	d825      	bhi.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006164:	a201      	add	r2, pc, #4	@ (adr r2, 800616c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800616a:	bf00      	nop
 800616c:	080061b9 	.word	0x080061b9
 8006170:	08006185 	.word	0x08006185
 8006174:	0800619b 	.word	0x0800619b
 8006178:	080061b9 	.word	0x080061b9
 800617c:	080061b9 	.word	0x080061b9
 8006180:	080061b9 	.word	0x080061b9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006188:	3308      	adds	r3, #8
 800618a:	2101      	movs	r1, #1
 800618c:	4618      	mov	r0, r3
 800618e:	f000 ff1d 	bl	8006fcc <RCCEx_PLL2_Config>
 8006192:	4603      	mov	r3, r0
 8006194:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006198:	e00f      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800619a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619e:	3328      	adds	r3, #40	@ 0x28
 80061a0:	2101      	movs	r1, #1
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 ffc4 	bl	8007130 <RCCEx_PLL3_Config>
 80061a8:	4603      	mov	r3, r0
 80061aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80061ae:	e004      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061b6:	e000      	b.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80061b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10b      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061c2:	4b6c      	ldr	r3, [pc, #432]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c6:	f023 0107 	bic.w	r1, r3, #7
 80061ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061d2:	4a68      	ldr	r2, [pc, #416]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061d4:	430b      	orrs	r3, r1
 80061d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80061d8:	e003      	b.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ea:	f002 0320 	and.w	r3, r2, #32
 80061ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061f2:	2300      	movs	r3, #0
 80061f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061fc:	460b      	mov	r3, r1
 80061fe:	4313      	orrs	r3, r2
 8006200:	d055      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006206:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800620a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800620e:	d033      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006210:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006214:	d82c      	bhi.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800621a:	d02f      	beq.n	800627c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800621c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006220:	d826      	bhi.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006222:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006226:	d02b      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006228:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800622c:	d820      	bhi.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800622e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006232:	d012      	beq.n	800625a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006238:	d81a      	bhi.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800623a:	2b00      	cmp	r3, #0
 800623c:	d022      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800623e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006242:	d115      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006248:	3308      	adds	r3, #8
 800624a:	2100      	movs	r1, #0
 800624c:	4618      	mov	r0, r3
 800624e:	f000 febd 	bl	8006fcc <RCCEx_PLL2_Config>
 8006252:	4603      	mov	r3, r0
 8006254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006258:	e015      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625e:	3328      	adds	r3, #40	@ 0x28
 8006260:	2102      	movs	r1, #2
 8006262:	4618      	mov	r0, r3
 8006264:	f000 ff64 	bl	8007130 <RCCEx_PLL3_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800626e:	e00a      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006270:	2301      	movs	r3, #1
 8006272:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006276:	e006      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006278:	bf00      	nop
 800627a:	e004      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800627c:	bf00      	nop
 800627e:	e002      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006280:	bf00      	nop
 8006282:	e000      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006284:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800628a:	2b00      	cmp	r3, #0
 800628c:	d10b      	bne.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800628e:	4b39      	ldr	r3, [pc, #228]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006292:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629e:	4a35      	ldr	r2, [pc, #212]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062a0:	430b      	orrs	r3, r1
 80062a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80062a4:	e003      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80062ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80062ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062be:	2300      	movs	r3, #0
 80062c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4313      	orrs	r3, r2
 80062cc:	d058      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80062ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062da:	d033      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80062dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062e0:	d82c      	bhi.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062e6:	d02f      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80062e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062ec:	d826      	bhi.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062f2:	d02b      	beq.n	800634c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80062f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062f8:	d820      	bhi.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062fe:	d012      	beq.n	8006326 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006300:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006304:	d81a      	bhi.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d022      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800630a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800630e:	d115      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006314:	3308      	adds	r3, #8
 8006316:	2100      	movs	r1, #0
 8006318:	4618      	mov	r0, r3
 800631a:	f000 fe57 	bl	8006fcc <RCCEx_PLL2_Config>
 800631e:	4603      	mov	r3, r0
 8006320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006324:	e015      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632a:	3328      	adds	r3, #40	@ 0x28
 800632c:	2102      	movs	r1, #2
 800632e:	4618      	mov	r0, r3
 8006330:	f000 fefe 	bl	8007130 <RCCEx_PLL3_Config>
 8006334:	4603      	mov	r3, r0
 8006336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800633a:	e00a      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006342:	e006      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006344:	bf00      	nop
 8006346:	e004      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006348:	bf00      	nop
 800634a:	e002      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800634c:	bf00      	nop
 800634e:	e000      	b.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006352:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10e      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800635a:	4b06      	ldr	r3, [pc, #24]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800635c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800635e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006366:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800636a:	4a02      	ldr	r2, [pc, #8]	@ (8006374 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800636c:	430b      	orrs	r3, r1
 800636e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006370:	e006      	b.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006372:	bf00      	nop
 8006374:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006378:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800637c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006388:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800638c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006390:	2300      	movs	r3, #0
 8006392:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006396:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800639a:	460b      	mov	r3, r1
 800639c:	4313      	orrs	r3, r2
 800639e:	d055      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80063a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80063a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80063ac:	d033      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80063ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80063b2:	d82c      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063b8:	d02f      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80063ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063be:	d826      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063c4:	d02b      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80063c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063ca:	d820      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063d0:	d012      	beq.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80063d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063d6:	d81a      	bhi.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d022      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80063dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063e0:	d115      	bne.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e6:	3308      	adds	r3, #8
 80063e8:	2100      	movs	r1, #0
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fdee 	bl	8006fcc <RCCEx_PLL2_Config>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063f6:	e015      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fc:	3328      	adds	r3, #40	@ 0x28
 80063fe:	2102      	movs	r1, #2
 8006400:	4618      	mov	r0, r3
 8006402:	f000 fe95 	bl	8007130 <RCCEx_PLL3_Config>
 8006406:	4603      	mov	r3, r0
 8006408:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800640c:	e00a      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006414:	e006      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006416:	bf00      	nop
 8006418:	e004      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800641a:	bf00      	nop
 800641c:	e002      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800641e:	bf00      	nop
 8006420:	e000      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006422:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10b      	bne.n	8006444 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800642c:	4ba1      	ldr	r3, [pc, #644]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800642e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006430:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006438:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800643c:	4a9d      	ldr	r2, [pc, #628]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800643e:	430b      	orrs	r3, r1
 8006440:	6593      	str	r3, [r2, #88]	@ 0x58
 8006442:	e003      	b.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006444:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006448:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	f002 0308 	and.w	r3, r2, #8
 8006458:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800645c:	2300      	movs	r3, #0
 800645e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006462:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006466:	460b      	mov	r3, r1
 8006468:	4313      	orrs	r3, r2
 800646a:	d01e      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800646c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006470:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006474:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006478:	d10c      	bne.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800647a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647e:	3328      	adds	r3, #40	@ 0x28
 8006480:	2102      	movs	r1, #2
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fe54 	bl	8007130 <RCCEx_PLL3_Config>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006494:	4b87      	ldr	r3, [pc, #540]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006496:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006498:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800649c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064a4:	4a83      	ldr	r2, [pc, #524]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064a6:	430b      	orrs	r3, r1
 80064a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b2:	f002 0310 	and.w	r3, r2, #16
 80064b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80064ba:	2300      	movs	r3, #0
 80064bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80064c4:	460b      	mov	r3, r1
 80064c6:	4313      	orrs	r3, r2
 80064c8:	d01e      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80064ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d6:	d10c      	bne.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064dc:	3328      	adds	r3, #40	@ 0x28
 80064de:	2102      	movs	r1, #2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fe25 	bl	8007130 <RCCEx_PLL3_Config>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064f2:	4b70      	ldr	r3, [pc, #448]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006502:	4a6c      	ldr	r2, [pc, #432]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006504:	430b      	orrs	r3, r1
 8006506:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006514:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006518:	2300      	movs	r3, #0
 800651a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800651e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006522:	460b      	mov	r3, r1
 8006524:	4313      	orrs	r3, r2
 8006526:	d03e      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006530:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006534:	d022      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006536:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800653a:	d81b      	bhi.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006544:	d00b      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006546:	e015      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800654c:	3308      	adds	r3, #8
 800654e:	2100      	movs	r1, #0
 8006550:	4618      	mov	r0, r3
 8006552:	f000 fd3b 	bl	8006fcc <RCCEx_PLL2_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800655c:	e00f      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006562:	3328      	adds	r3, #40	@ 0x28
 8006564:	2102      	movs	r1, #2
 8006566:	4618      	mov	r0, r3
 8006568:	f000 fde2 	bl	8007130 <RCCEx_PLL3_Config>
 800656c:	4603      	mov	r3, r0
 800656e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006572:	e004      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800657a:	e000      	b.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800657c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800657e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10b      	bne.n	800659e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006586:	4b4b      	ldr	r3, [pc, #300]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800658a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006592:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006596:	4a47      	ldr	r2, [pc, #284]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006598:	430b      	orrs	r3, r1
 800659a:	6593      	str	r3, [r2, #88]	@ 0x58
 800659c:	e003      	b.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80065b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80065b4:	2300      	movs	r3, #0
 80065b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80065b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80065bc:	460b      	mov	r3, r1
 80065be:	4313      	orrs	r3, r2
 80065c0:	d03b      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80065c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065ce:	d01f      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80065d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065d4:	d818      	bhi.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80065d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065da:	d003      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80065dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065e0:	d007      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80065e2:	e011      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e4:	4b33      	ldr	r3, [pc, #204]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e8:	4a32      	ldr	r2, [pc, #200]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80065f0:	e00f      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f6:	3328      	adds	r3, #40	@ 0x28
 80065f8:	2101      	movs	r1, #1
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fd98 	bl	8007130 <RCCEx_PLL3_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006606:	e004      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800660e:	e000      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800661a:	4b26      	ldr	r3, [pc, #152]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800661c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800661e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662a:	4a22      	ldr	r2, [pc, #136]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800662c:	430b      	orrs	r3, r1
 800662e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006630:	e003      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006642:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006646:	673b      	str	r3, [r7, #112]	@ 0x70
 8006648:	2300      	movs	r3, #0
 800664a:	677b      	str	r3, [r7, #116]	@ 0x74
 800664c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006650:	460b      	mov	r3, r1
 8006652:	4313      	orrs	r3, r2
 8006654:	d034      	beq.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800665c:	2b00      	cmp	r3, #0
 800665e:	d003      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006664:	d007      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006666:	e011      	b.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006668:	4b12      	ldr	r3, [pc, #72]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800666a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800666c:	4a11      	ldr	r2, [pc, #68]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800666e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006672:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006674:	e00e      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800667a:	3308      	adds	r3, #8
 800667c:	2102      	movs	r1, #2
 800667e:	4618      	mov	r0, r3
 8006680:	f000 fca4 	bl	8006fcc <RCCEx_PLL2_Config>
 8006684:	4603      	mov	r3, r0
 8006686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800668a:	e003      	b.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006692:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006694:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006698:	2b00      	cmp	r3, #0
 800669a:	d10d      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800669c:	4b05      	ldr	r3, [pc, #20]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800669e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066aa:	4a02      	ldr	r2, [pc, #8]	@ (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ac:	430b      	orrs	r3, r1
 80066ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066b0:	e006      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80066b2:	bf00      	nop
 80066b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80066cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066ce:	2300      	movs	r3, #0
 80066d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80066d6:	460b      	mov	r3, r1
 80066d8:	4313      	orrs	r3, r2
 80066da:	d00c      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066e0:	3328      	adds	r3, #40	@ 0x28
 80066e2:	2102      	movs	r1, #2
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 fd23 	bl	8007130 <RCCEx_PLL3_Config>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80066f0:	2301      	movs	r3, #1
 80066f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006702:	663b      	str	r3, [r7, #96]	@ 0x60
 8006704:	2300      	movs	r3, #0
 8006706:	667b      	str	r3, [r7, #100]	@ 0x64
 8006708:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800670c:	460b      	mov	r3, r1
 800670e:	4313      	orrs	r3, r2
 8006710:	d038      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006716:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800671a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800671e:	d018      	beq.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006720:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006724:	d811      	bhi.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006726:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800672a:	d014      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800672c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006730:	d80b      	bhi.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006732:	2b00      	cmp	r3, #0
 8006734:	d011      	beq.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800673a:	d106      	bne.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800673c:	4bc3      	ldr	r3, [pc, #780]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800673e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006740:	4ac2      	ldr	r2, [pc, #776]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006742:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006746:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006748:	e008      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006750:	e004      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006752:	bf00      	nop
 8006754:	e002      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006756:	bf00      	nop
 8006758:	e000      	b.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800675a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800675c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006760:	2b00      	cmp	r3, #0
 8006762:	d10b      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006764:	4bb9      	ldr	r3, [pc, #740]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006766:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006768:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800676c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006774:	4ab5      	ldr	r2, [pc, #724]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006776:	430b      	orrs	r3, r1
 8006778:	6553      	str	r3, [r2, #84]	@ 0x54
 800677a:	e003      	b.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006780:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006790:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006792:	2300      	movs	r3, #0
 8006794:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006796:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800679a:	460b      	mov	r3, r1
 800679c:	4313      	orrs	r3, r2
 800679e:	d009      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80067a0:	4baa      	ldr	r3, [pc, #680]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80067a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ae:	4aa7      	ldr	r2, [pc, #668]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067b0:	430b      	orrs	r3, r1
 80067b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80067b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80067c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80067c2:	2300      	movs	r3, #0
 80067c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80067c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80067ca:	460b      	mov	r3, r1
 80067cc:	4313      	orrs	r3, r2
 80067ce:	d00a      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80067d0:	4b9e      	ldr	r3, [pc, #632]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80067d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067e0:	4a9a      	ldr	r2, [pc, #616]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067e2:	430b      	orrs	r3, r1
 80067e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80067f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f4:	2300      	movs	r3, #0
 80067f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80067fc:	460b      	mov	r3, r1
 80067fe:	4313      	orrs	r3, r2
 8006800:	d009      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006802:	4b92      	ldr	r3, [pc, #584]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006804:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006806:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800680a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006810:	4a8e      	ldr	r2, [pc, #568]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006812:	430b      	orrs	r3, r1
 8006814:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800681e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006822:	643b      	str	r3, [r7, #64]	@ 0x40
 8006824:	2300      	movs	r3, #0
 8006826:	647b      	str	r3, [r7, #68]	@ 0x44
 8006828:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800682c:	460b      	mov	r3, r1
 800682e:	4313      	orrs	r3, r2
 8006830:	d00e      	beq.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006832:	4b86      	ldr	r3, [pc, #536]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	4a85      	ldr	r2, [pc, #532]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006838:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800683c:	6113      	str	r3, [r2, #16]
 800683e:	4b83      	ldr	r3, [pc, #524]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006840:	6919      	ldr	r1, [r3, #16]
 8006842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006846:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800684a:	4a80      	ldr	r2, [pc, #512]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800684c:	430b      	orrs	r3, r1
 800684e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006858:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800685c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800685e:	2300      	movs	r3, #0
 8006860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006862:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006866:	460b      	mov	r3, r1
 8006868:	4313      	orrs	r3, r2
 800686a:	d009      	beq.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800686c:	4b77      	ldr	r3, [pc, #476]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800686e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006870:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800687a:	4a74      	ldr	r2, [pc, #464]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800687c:	430b      	orrs	r3, r1
 800687e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006888:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800688c:	633b      	str	r3, [r7, #48]	@ 0x30
 800688e:	2300      	movs	r3, #0
 8006890:	637b      	str	r3, [r7, #52]	@ 0x34
 8006892:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006896:	460b      	mov	r3, r1
 8006898:	4313      	orrs	r3, r2
 800689a:	d00a      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800689c:	4b6b      	ldr	r3, [pc, #428]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800689e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80068a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068ac:	4a67      	ldr	r2, [pc, #412]	@ (8006a4c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068ae:	430b      	orrs	r3, r1
 80068b0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80068b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	2100      	movs	r1, #0
 80068bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80068c8:	460b      	mov	r3, r1
 80068ca:	4313      	orrs	r3, r2
 80068cc:	d011      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d2:	3308      	adds	r3, #8
 80068d4:	2100      	movs	r1, #0
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fb78 	bl	8006fcc <RCCEx_PLL2_Config>
 80068dc:	4603      	mov	r3, r0
 80068de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d003      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80068f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fa:	2100      	movs	r1, #0
 80068fc:	6239      	str	r1, [r7, #32]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	627b      	str	r3, [r7, #36]	@ 0x24
 8006904:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006908:	460b      	mov	r3, r1
 800690a:	4313      	orrs	r3, r2
 800690c:	d011      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800690e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006912:	3308      	adds	r3, #8
 8006914:	2101      	movs	r1, #1
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fb58 	bl	8006fcc <RCCEx_PLL2_Config>
 800691c:	4603      	mov	r3, r0
 800691e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800692a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800692e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693a:	2100      	movs	r1, #0
 800693c:	61b9      	str	r1, [r7, #24]
 800693e:	f003 0304 	and.w	r3, r3, #4
 8006942:	61fb      	str	r3, [r7, #28]
 8006944:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006948:	460b      	mov	r3, r1
 800694a:	4313      	orrs	r3, r2
 800694c:	d011      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800694e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006952:	3308      	adds	r3, #8
 8006954:	2102      	movs	r1, #2
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fb38 	bl	8006fcc <RCCEx_PLL2_Config>
 800695c:	4603      	mov	r3, r0
 800695e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800696e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697a:	2100      	movs	r1, #0
 800697c:	6139      	str	r1, [r7, #16]
 800697e:	f003 0308 	and.w	r3, r3, #8
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006988:	460b      	mov	r3, r1
 800698a:	4313      	orrs	r3, r2
 800698c:	d011      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800698e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006992:	3328      	adds	r3, #40	@ 0x28
 8006994:	2100      	movs	r1, #0
 8006996:	4618      	mov	r0, r3
 8006998:	f000 fbca 	bl	8007130 <RCCEx_PLL3_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80069a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d003      	beq.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80069b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	2100      	movs	r1, #0
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	f003 0310 	and.w	r3, r3, #16
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069c8:	460b      	mov	r3, r1
 80069ca:	4313      	orrs	r3, r2
 80069cc:	d011      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d2:	3328      	adds	r3, #40	@ 0x28
 80069d4:	2101      	movs	r1, #1
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 fbaa 	bl	8007130 <RCCEx_PLL3_Config>
 80069dc:	4603      	mov	r3, r0
 80069de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fa:	2100      	movs	r1, #0
 80069fc:	6039      	str	r1, [r7, #0]
 80069fe:	f003 0320 	and.w	r3, r3, #32
 8006a02:	607b      	str	r3, [r7, #4]
 8006a04:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	d011      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a12:	3328      	adds	r3, #40	@ 0x28
 8006a14:	2102      	movs	r1, #2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f000 fb8a 	bl	8007130 <RCCEx_PLL3_Config>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006a32:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e000      	b.n	8006a40 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006a46:	46bd      	mov	sp, r7
 8006a48:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a4c:	58024400 	.word	0x58024400

08006a50 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a54:	f7fe fd96 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	4b06      	ldr	r3, [pc, #24]	@ (8006a74 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	091b      	lsrs	r3, r3, #4
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	4904      	ldr	r1, [pc, #16]	@ (8006a78 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a66:	5ccb      	ldrb	r3, [r1, r3]
 8006a68:	f003 031f 	and.w	r3, r3, #31
 8006a6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	bd80      	pop	{r7, pc}
 8006a74:	58024400 	.word	0x58024400
 8006a78:	0800abb0 	.word	0x0800abb0

08006a7c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b089      	sub	sp, #36	@ 0x24
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a84:	4ba1      	ldr	r3, [pc, #644]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a88:	f003 0303 	and.w	r3, r3, #3
 8006a8c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a8e:	4b9f      	ldr	r3, [pc, #636]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a92:	0b1b      	lsrs	r3, r3, #12
 8006a94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a98:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a9a:	4b9c      	ldr	r3, [pc, #624]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a9e:	091b      	lsrs	r3, r3, #4
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006aa6:	4b99      	ldr	r3, [pc, #612]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aaa:	08db      	lsrs	r3, r3, #3
 8006aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	fb02 f303 	mul.w	r3, r2, r3
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8111 	beq.w	8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	f000 8083 	beq.w	8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	f200 80a1 	bhi.w	8006c1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d003      	beq.n	8006ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d056      	beq.n	8006b94 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ae6:	e099      	b.n	8006c1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ae8:	4b88      	ldr	r3, [pc, #544]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d02d      	beq.n	8006b50 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006af4:	4b85      	ldr	r3, [pc, #532]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	08db      	lsrs	r3, r3, #3
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	4a84      	ldr	r2, [pc, #528]	@ (8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b00:	fa22 f303 	lsr.w	r3, r2, r3
 8006b04:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	ee07 3a90 	vmov	s15, r3
 8006b0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b1e:	4b7b      	ldr	r3, [pc, #492]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b32:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006d14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b4e:	e087      	b.n	8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b62:	4b6a      	ldr	r3, [pc, #424]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b76:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006d14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b92:	e065      	b.n	8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	ee07 3a90 	vmov	s15, r3
 8006b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b9e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ba6:	4b59      	ldr	r3, [pc, #356]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bae:	ee07 3a90 	vmov	s15, r3
 8006bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006d14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bd6:	e043      	b.n	8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006be6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bea:	4b48      	ldr	r3, [pc, #288]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bf2:	ee07 3a90 	vmov	s15, r3
 8006bf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bfe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006d14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c1a:	e021      	b.n	8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c2e:	4b37      	ldr	r3, [pc, #220]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006d14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006c60:	4b2a      	ldr	r3, [pc, #168]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c64:	0a5b      	lsrs	r3, r3, #9
 8006c66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c6a:	ee07 3a90 	vmov	s15, r3
 8006c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c86:	ee17 2a90 	vmov	r2, s15
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c92:	0c1b      	lsrs	r3, r3, #16
 8006c94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c98:	ee07 3a90 	vmov	s15, r3
 8006c9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ca4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ca8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cb4:	ee17 2a90 	vmov	r2, s15
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006cbc:	4b13      	ldr	r3, [pc, #76]	@ (8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc0:	0e1b      	lsrs	r3, r3, #24
 8006cc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cc6:	ee07 3a90 	vmov	s15, r3
 8006cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ce2:	ee17 2a90 	vmov	r2, s15
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006cea:	e008      	b.n	8006cfe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	609a      	str	r2, [r3, #8]
}
 8006cfe:	bf00      	nop
 8006d00:	3724      	adds	r7, #36	@ 0x24
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	58024400 	.word	0x58024400
 8006d10:	03d09000 	.word	0x03d09000
 8006d14:	46000000 	.word	0x46000000
 8006d18:	4c742400 	.word	0x4c742400
 8006d1c:	4a742400 	.word	0x4a742400
 8006d20:	4af42400 	.word	0x4af42400

08006d24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b089      	sub	sp, #36	@ 0x24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d2c:	4ba1      	ldr	r3, [pc, #644]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d30:	f003 0303 	and.w	r3, r3, #3
 8006d34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006d36:	4b9f      	ldr	r3, [pc, #636]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d3a:	0d1b      	lsrs	r3, r3, #20
 8006d3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d42:	4b9c      	ldr	r3, [pc, #624]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d46:	0a1b      	lsrs	r3, r3, #8
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d4e:	4b99      	ldr	r3, [pc, #612]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d52:	08db      	lsrs	r3, r3, #3
 8006d54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	fb02 f303 	mul.w	r3, r2, r3
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 8111 	beq.w	8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	f000 8083 	beq.w	8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	2b02      	cmp	r3, #2
 8006d7e:	f200 80a1 	bhi.w	8006ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d88:	69bb      	ldr	r3, [r7, #24]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d056      	beq.n	8006e3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d8e:	e099      	b.n	8006ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d90:	4b88      	ldr	r3, [pc, #544]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0320 	and.w	r3, r3, #32
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d02d      	beq.n	8006df8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d9c:	4b85      	ldr	r3, [pc, #532]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	08db      	lsrs	r3, r3, #3
 8006da2:	f003 0303 	and.w	r3, r3, #3
 8006da6:	4a84      	ldr	r2, [pc, #528]	@ (8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006da8:	fa22 f303 	lsr.w	r3, r2, r3
 8006dac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	ee07 3a90 	vmov	s15, r3
 8006db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dc6:	4b7b      	ldr	r3, [pc, #492]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006de6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006df6:	e087      	b.n	8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	ee07 3a90 	vmov	s15, r3
 8006dfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006e06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e0a:	4b6a      	ldr	r3, [pc, #424]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e3a:	e065      	b.n	8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	ee07 3a90 	vmov	s15, r3
 8006e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e4e:	4b59      	ldr	r3, [pc, #356]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e56:	ee07 3a90 	vmov	s15, r3
 8006e5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e7e:	e043      	b.n	8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e92:	4b48      	ldr	r3, [pc, #288]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e9a:	ee07 3a90 	vmov	s15, r3
 8006e9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ea6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ebe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ec2:	e021      	b.n	8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	ee07 3a90 	vmov	s15, r3
 8006eca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ece:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ed2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ed6:	4b37      	ldr	r3, [pc, #220]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ee6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ef2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ef6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006efa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006efe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006f08:	4b2a      	ldr	r3, [pc, #168]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0c:	0a5b      	lsrs	r3, r3, #9
 8006f0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f12:	ee07 3a90 	vmov	s15, r3
 8006f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f22:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f2e:	ee17 2a90 	vmov	r2, s15
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006f36:	4b1f      	ldr	r3, [pc, #124]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3a:	0c1b      	lsrs	r3, r3, #16
 8006f3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f5c:	ee17 2a90 	vmov	r2, s15
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006f64:	4b13      	ldr	r3, [pc, #76]	@ (8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f68:	0e1b      	lsrs	r3, r3, #24
 8006f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f8a:	ee17 2a90 	vmov	r2, s15
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f92:	e008      	b.n	8006fa6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	609a      	str	r2, [r3, #8]
}
 8006fa6:	bf00      	nop
 8006fa8:	3724      	adds	r7, #36	@ 0x24
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	58024400 	.word	0x58024400
 8006fb8:	03d09000 	.word	0x03d09000
 8006fbc:	46000000 	.word	0x46000000
 8006fc0:	4c742400 	.word	0x4c742400
 8006fc4:	4a742400 	.word	0x4a742400
 8006fc8:	4af42400 	.word	0x4af42400

08006fcc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fda:	4b53      	ldr	r3, [pc, #332]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fde:	f003 0303 	and.w	r3, r3, #3
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d101      	bne.n	8006fea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e099      	b.n	800711e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006fea:	4b4f      	ldr	r3, [pc, #316]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a4e      	ldr	r2, [pc, #312]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 8006ff0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ff4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ff6:	f7fb f84d 	bl	8002094 <HAL_GetTick>
 8006ffa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ffc:	e008      	b.n	8007010 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ffe:	f7fb f849 	bl	8002094 <HAL_GetTick>
 8007002:	4602      	mov	r2, r0
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	1ad3      	subs	r3, r2, r3
 8007008:	2b02      	cmp	r3, #2
 800700a:	d901      	bls.n	8007010 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e086      	b.n	800711e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007010:	4b45      	ldr	r3, [pc, #276]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1f0      	bne.n	8006ffe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800701c:	4b42      	ldr	r3, [pc, #264]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 800701e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007020:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	031b      	lsls	r3, r3, #12
 800702a:	493f      	ldr	r1, [pc, #252]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 800702c:	4313      	orrs	r3, r2
 800702e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	3b01      	subs	r3, #1
 8007036:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	3b01      	subs	r3, #1
 8007040:	025b      	lsls	r3, r3, #9
 8007042:	b29b      	uxth	r3, r3
 8007044:	431a      	orrs	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	3b01      	subs	r3, #1
 800704c:	041b      	lsls	r3, r3, #16
 800704e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007052:	431a      	orrs	r2, r3
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	3b01      	subs	r3, #1
 800705a:	061b      	lsls	r3, r3, #24
 800705c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007060:	4931      	ldr	r1, [pc, #196]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 8007062:	4313      	orrs	r3, r2
 8007064:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007066:	4b30      	ldr	r3, [pc, #192]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 8007068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	492d      	ldr	r1, [pc, #180]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 8007074:	4313      	orrs	r3, r2
 8007076:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007078:	4b2b      	ldr	r3, [pc, #172]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 800707a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707c:	f023 0220 	bic.w	r2, r3, #32
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	4928      	ldr	r1, [pc, #160]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 8007086:	4313      	orrs	r3, r2
 8007088:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800708a:	4b27      	ldr	r3, [pc, #156]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 800708c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708e:	4a26      	ldr	r2, [pc, #152]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 8007090:	f023 0310 	bic.w	r3, r3, #16
 8007094:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007096:	4b24      	ldr	r3, [pc, #144]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 8007098:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800709a:	4b24      	ldr	r3, [pc, #144]	@ (800712c <RCCEx_PLL2_Config+0x160>)
 800709c:	4013      	ands	r3, r2
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	69d2      	ldr	r2, [r2, #28]
 80070a2:	00d2      	lsls	r2, r2, #3
 80070a4:	4920      	ldr	r1, [pc, #128]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80070aa:	4b1f      	ldr	r3, [pc, #124]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 80070ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ae:	4a1e      	ldr	r2, [pc, #120]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 80070b0:	f043 0310 	orr.w	r3, r3, #16
 80070b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d106      	bne.n	80070ca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80070bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 80070be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c0:	4a19      	ldr	r2, [pc, #100]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 80070c2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070c8:	e00f      	b.n	80070ea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d106      	bne.n	80070de <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80070d0:	4b15      	ldr	r3, [pc, #84]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 80070d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d4:	4a14      	ldr	r2, [pc, #80]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 80070d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070dc:	e005      	b.n	80070ea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80070de:	4b12      	ldr	r3, [pc, #72]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 80070e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e2:	4a11      	ldr	r2, [pc, #68]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 80070e4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070ea:	4b0f      	ldr	r3, [pc, #60]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a0e      	ldr	r2, [pc, #56]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 80070f0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070f6:	f7fa ffcd 	bl	8002094 <HAL_GetTick>
 80070fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070fc:	e008      	b.n	8007110 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070fe:	f7fa ffc9 	bl	8002094 <HAL_GetTick>
 8007102:	4602      	mov	r2, r0
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	1ad3      	subs	r3, r2, r3
 8007108:	2b02      	cmp	r3, #2
 800710a:	d901      	bls.n	8007110 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800710c:	2303      	movs	r3, #3
 800710e:	e006      	b.n	800711e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007110:	4b05      	ldr	r3, [pc, #20]	@ (8007128 <RCCEx_PLL2_Config+0x15c>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007118:	2b00      	cmp	r3, #0
 800711a:	d0f0      	beq.n	80070fe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800711c:	7bfb      	ldrb	r3, [r7, #15]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	58024400 	.word	0x58024400
 800712c:	ffff0007 	.word	0xffff0007

08007130 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b084      	sub	sp, #16
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800713e:	4b53      	ldr	r3, [pc, #332]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007142:	f003 0303 	and.w	r3, r3, #3
 8007146:	2b03      	cmp	r3, #3
 8007148:	d101      	bne.n	800714e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e099      	b.n	8007282 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800714e:	4b4f      	ldr	r3, [pc, #316]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a4e      	ldr	r2, [pc, #312]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800715a:	f7fa ff9b 	bl	8002094 <HAL_GetTick>
 800715e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007160:	e008      	b.n	8007174 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007162:	f7fa ff97 	bl	8002094 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d901      	bls.n	8007174 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e086      	b.n	8007282 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007174:	4b45      	ldr	r3, [pc, #276]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1f0      	bne.n	8007162 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007180:	4b42      	ldr	r3, [pc, #264]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007184:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	051b      	lsls	r3, r3, #20
 800718e:	493f      	ldr	r1, [pc, #252]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007190:	4313      	orrs	r3, r2
 8007192:	628b      	str	r3, [r1, #40]	@ 0x28
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	3b01      	subs	r3, #1
 800719a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	025b      	lsls	r3, r3, #9
 80071a6:	b29b      	uxth	r3, r3
 80071a8:	431a      	orrs	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	68db      	ldr	r3, [r3, #12]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	041b      	lsls	r3, r3, #16
 80071b2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80071b6:	431a      	orrs	r2, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	3b01      	subs	r3, #1
 80071be:	061b      	lsls	r3, r3, #24
 80071c0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071c4:	4931      	ldr	r1, [pc, #196]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80071ca:	4b30      	ldr	r3, [pc, #192]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 80071cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	492d      	ldr	r1, [pc, #180]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 80071d8:	4313      	orrs	r3, r2
 80071da:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80071dc:	4b2b      	ldr	r3, [pc, #172]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 80071de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	4928      	ldr	r1, [pc, #160]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071ee:	4b27      	ldr	r3, [pc, #156]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 80071f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f2:	4a26      	ldr	r2, [pc, #152]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 80071f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071fa:	4b24      	ldr	r3, [pc, #144]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 80071fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071fe:	4b24      	ldr	r3, [pc, #144]	@ (8007290 <RCCEx_PLL3_Config+0x160>)
 8007200:	4013      	ands	r3, r2
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	69d2      	ldr	r2, [r2, #28]
 8007206:	00d2      	lsls	r2, r2, #3
 8007208:	4920      	ldr	r1, [pc, #128]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 800720a:	4313      	orrs	r3, r2
 800720c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800720e:	4b1f      	ldr	r3, [pc, #124]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007212:	4a1e      	ldr	r2, [pc, #120]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007214:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007218:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d106      	bne.n	800722e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007220:	4b1a      	ldr	r3, [pc, #104]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007224:	4a19      	ldr	r2, [pc, #100]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007226:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800722a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800722c:	e00f      	b.n	800724e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d106      	bne.n	8007242 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007234:	4b15      	ldr	r3, [pc, #84]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007238:	4a14      	ldr	r2, [pc, #80]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 800723a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800723e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007240:	e005      	b.n	800724e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007242:	4b12      	ldr	r3, [pc, #72]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007246:	4a11      	ldr	r2, [pc, #68]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007248:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800724c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800724e:	4b0f      	ldr	r3, [pc, #60]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a0e      	ldr	r2, [pc, #56]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800725a:	f7fa ff1b 	bl	8002094 <HAL_GetTick>
 800725e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007260:	e008      	b.n	8007274 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007262:	f7fa ff17 	bl	8002094 <HAL_GetTick>
 8007266:	4602      	mov	r2, r0
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	2b02      	cmp	r3, #2
 800726e:	d901      	bls.n	8007274 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e006      	b.n	8007282 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007274:	4b05      	ldr	r3, [pc, #20]	@ (800728c <RCCEx_PLL3_Config+0x15c>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0f0      	beq.n	8007262 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007280:	7bfb      	ldrb	r3, [r7, #15]
}
 8007282:	4618      	mov	r0, r3
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	58024400 	.word	0x58024400
 8007290:	ffff0007 	.word	0xffff0007

08007294 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d101      	bne.n	80072a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072a2:	2301      	movs	r3, #1
 80072a4:	e10f      	b.n	80074c6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a87      	ldr	r2, [pc, #540]	@ (80074d0 <HAL_SPI_Init+0x23c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d00f      	beq.n	80072d6 <HAL_SPI_Init+0x42>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a86      	ldr	r2, [pc, #536]	@ (80074d4 <HAL_SPI_Init+0x240>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00a      	beq.n	80072d6 <HAL_SPI_Init+0x42>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a84      	ldr	r2, [pc, #528]	@ (80074d8 <HAL_SPI_Init+0x244>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d005      	beq.n	80072d6 <HAL_SPI_Init+0x42>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	2b0f      	cmp	r3, #15
 80072d0:	d901      	bls.n	80072d6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e0f7      	b.n	80074c6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f900 	bl	80074dc <SPI_GetPacketSize>
 80072dc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a7b      	ldr	r2, [pc, #492]	@ (80074d0 <HAL_SPI_Init+0x23c>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d00c      	beq.n	8007302 <HAL_SPI_Init+0x6e>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a79      	ldr	r2, [pc, #484]	@ (80074d4 <HAL_SPI_Init+0x240>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d007      	beq.n	8007302 <HAL_SPI_Init+0x6e>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a78      	ldr	r2, [pc, #480]	@ (80074d8 <HAL_SPI_Init+0x244>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d002      	beq.n	8007302 <HAL_SPI_Init+0x6e>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2b08      	cmp	r3, #8
 8007300:	d811      	bhi.n	8007326 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007306:	4a72      	ldr	r2, [pc, #456]	@ (80074d0 <HAL_SPI_Init+0x23c>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d009      	beq.n	8007320 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a70      	ldr	r2, [pc, #448]	@ (80074d4 <HAL_SPI_Init+0x240>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d004      	beq.n	8007320 <HAL_SPI_Init+0x8c>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a6f      	ldr	r2, [pc, #444]	@ (80074d8 <HAL_SPI_Init+0x244>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d104      	bne.n	800732a <HAL_SPI_Init+0x96>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b10      	cmp	r3, #16
 8007324:	d901      	bls.n	800732a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	e0cd      	b.n	80074c6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b00      	cmp	r3, #0
 8007334:	d106      	bne.n	8007344 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fa f97c 	bl	800163c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0201 	bic.w	r2, r2, #1
 800735a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007366:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	699b      	ldr	r3, [r3, #24]
 800736c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007370:	d119      	bne.n	80073a6 <HAL_SPI_Init+0x112>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800737a:	d103      	bne.n	8007384 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007380:	2b00      	cmp	r3, #0
 8007382:	d008      	beq.n	8007396 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10c      	bne.n	80073a6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007390:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007394:	d107      	bne.n	80073a6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80073a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00f      	beq.n	80073d2 <HAL_SPI_Init+0x13e>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	2b06      	cmp	r3, #6
 80073b8:	d90b      	bls.n	80073d2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	430a      	orrs	r2, r1
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	e007      	b.n	80073e2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69da      	ldr	r2, [r3, #28]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ea:	431a      	orrs	r2, r3
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	431a      	orrs	r2, r3
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073f4:	ea42 0103 	orr.w	r1, r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	430a      	orrs	r2, r1
 8007402:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	431a      	orrs	r2, r3
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	431a      	orrs	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	431a      	orrs	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	431a      	orrs	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	431a      	orrs	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007442:	ea42 0103 	orr.w	r1, r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	430a      	orrs	r2, r1
 8007450:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d113      	bne.n	8007482 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800746c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007480:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0201 	bic.w	r2, r2, #1
 8007490:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800749a:	2b00      	cmp	r3, #0
 800749c:	d00a      	beq.n	80074b4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	40013000 	.word	0x40013000
 80074d4:	40003800 	.word	0x40003800
 80074d8:	40003c00 	.word	0x40003c00

080074dc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074e8:	095b      	lsrs	r3, r3, #5
 80074ea:	3301      	adds	r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	68db      	ldr	r3, [r3, #12]
 80074f2:	3301      	adds	r3, #1
 80074f4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	3307      	adds	r3, #7
 80074fa:	08db      	lsrs	r3, r3, #3
 80074fc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	68fa      	ldr	r2, [r7, #12]
 8007502:	fb02 f303 	mul.w	r3, r2, r3
}
 8007506:	4618      	mov	r0, r3
 8007508:	3714      	adds	r7, #20
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b082      	sub	sp, #8
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d101      	bne.n	8007524 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e049      	b.n	80075b8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	d106      	bne.n	800753e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7fa fb13 	bl	8001b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2202      	movs	r2, #2
 8007542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3304      	adds	r3, #4
 800754e:	4619      	mov	r1, r3
 8007550:	4610      	mov	r0, r2
 8007552:	f000 fbf3 	bl	8007d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2201      	movs	r2, #1
 80075a2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2201      	movs	r2, #1
 80075aa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2201      	movs	r2, #1
 80075b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d101      	bne.n	80075d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075ce:	2301      	movs	r3, #1
 80075d0:	e049      	b.n	8007666 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d106      	bne.n	80075ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f841 	bl	800766e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	3304      	adds	r3, #4
 80075fc:	4619      	mov	r1, r3
 80075fe:	4610      	mov	r0, r2
 8007600:	f000 fb9c 	bl	8007d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2201      	movs	r2, #1
 8007648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2201      	movs	r2, #1
 8007660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800766e:	b480      	push	{r7}
 8007670:	b083      	sub	sp, #12
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
	...

08007684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d109      	bne.n	80076a8 <HAL_TIM_PWM_Start+0x24>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800769a:	b2db      	uxtb	r3, r3
 800769c:	2b01      	cmp	r3, #1
 800769e:	bf14      	ite	ne
 80076a0:	2301      	movne	r3, #1
 80076a2:	2300      	moveq	r3, #0
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	e03c      	b.n	8007722 <HAL_TIM_PWM_Start+0x9e>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d109      	bne.n	80076c2 <HAL_TIM_PWM_Start+0x3e>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076b4:	b2db      	uxtb	r3, r3
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	bf14      	ite	ne
 80076ba:	2301      	movne	r3, #1
 80076bc:	2300      	moveq	r3, #0
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	e02f      	b.n	8007722 <HAL_TIM_PWM_Start+0x9e>
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d109      	bne.n	80076dc <HAL_TIM_PWM_Start+0x58>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	bf14      	ite	ne
 80076d4:	2301      	movne	r3, #1
 80076d6:	2300      	moveq	r3, #0
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	e022      	b.n	8007722 <HAL_TIM_PWM_Start+0x9e>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b0c      	cmp	r3, #12
 80076e0:	d109      	bne.n	80076f6 <HAL_TIM_PWM_Start+0x72>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	bf14      	ite	ne
 80076ee:	2301      	movne	r3, #1
 80076f0:	2300      	moveq	r3, #0
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	e015      	b.n	8007722 <HAL_TIM_PWM_Start+0x9e>
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b10      	cmp	r3, #16
 80076fa:	d109      	bne.n	8007710 <HAL_TIM_PWM_Start+0x8c>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	bf14      	ite	ne
 8007708:	2301      	movne	r3, #1
 800770a:	2300      	moveq	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	e008      	b.n	8007722 <HAL_TIM_PWM_Start+0x9e>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007716:	b2db      	uxtb	r3, r3
 8007718:	2b01      	cmp	r3, #1
 800771a:	bf14      	ite	ne
 800771c:	2301      	movne	r3, #1
 800771e:	2300      	moveq	r3, #0
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e0a1      	b.n	800786e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d104      	bne.n	800773a <HAL_TIM_PWM_Start+0xb6>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007738:	e023      	b.n	8007782 <HAL_TIM_PWM_Start+0xfe>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b04      	cmp	r3, #4
 800773e:	d104      	bne.n	800774a <HAL_TIM_PWM_Start+0xc6>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007748:	e01b      	b.n	8007782 <HAL_TIM_PWM_Start+0xfe>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b08      	cmp	r3, #8
 800774e:	d104      	bne.n	800775a <HAL_TIM_PWM_Start+0xd6>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007758:	e013      	b.n	8007782 <HAL_TIM_PWM_Start+0xfe>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b0c      	cmp	r3, #12
 800775e:	d104      	bne.n	800776a <HAL_TIM_PWM_Start+0xe6>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007768:	e00b      	b.n	8007782 <HAL_TIM_PWM_Start+0xfe>
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	2b10      	cmp	r3, #16
 800776e:	d104      	bne.n	800777a <HAL_TIM_PWM_Start+0xf6>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007778:	e003      	b.n	8007782 <HAL_TIM_PWM_Start+0xfe>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2202      	movs	r2, #2
 800777e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	2201      	movs	r2, #1
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 ffda 	bl	8008744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a38      	ldr	r2, [pc, #224]	@ (8007878 <HAL_TIM_PWM_Start+0x1f4>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d013      	beq.n	80077c2 <HAL_TIM_PWM_Start+0x13e>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a37      	ldr	r2, [pc, #220]	@ (800787c <HAL_TIM_PWM_Start+0x1f8>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00e      	beq.n	80077c2 <HAL_TIM_PWM_Start+0x13e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a35      	ldr	r2, [pc, #212]	@ (8007880 <HAL_TIM_PWM_Start+0x1fc>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d009      	beq.n	80077c2 <HAL_TIM_PWM_Start+0x13e>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a34      	ldr	r2, [pc, #208]	@ (8007884 <HAL_TIM_PWM_Start+0x200>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d004      	beq.n	80077c2 <HAL_TIM_PWM_Start+0x13e>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a32      	ldr	r2, [pc, #200]	@ (8007888 <HAL_TIM_PWM_Start+0x204>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d101      	bne.n	80077c6 <HAL_TIM_PWM_Start+0x142>
 80077c2:	2301      	movs	r3, #1
 80077c4:	e000      	b.n	80077c8 <HAL_TIM_PWM_Start+0x144>
 80077c6:	2300      	movs	r3, #0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d007      	beq.n	80077dc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a25      	ldr	r2, [pc, #148]	@ (8007878 <HAL_TIM_PWM_Start+0x1f4>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d022      	beq.n	800782c <HAL_TIM_PWM_Start+0x1a8>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ee:	d01d      	beq.n	800782c <HAL_TIM_PWM_Start+0x1a8>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a25      	ldr	r2, [pc, #148]	@ (800788c <HAL_TIM_PWM_Start+0x208>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d018      	beq.n	800782c <HAL_TIM_PWM_Start+0x1a8>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a24      	ldr	r2, [pc, #144]	@ (8007890 <HAL_TIM_PWM_Start+0x20c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d013      	beq.n	800782c <HAL_TIM_PWM_Start+0x1a8>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a22      	ldr	r2, [pc, #136]	@ (8007894 <HAL_TIM_PWM_Start+0x210>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d00e      	beq.n	800782c <HAL_TIM_PWM_Start+0x1a8>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a1a      	ldr	r2, [pc, #104]	@ (800787c <HAL_TIM_PWM_Start+0x1f8>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d009      	beq.n	800782c <HAL_TIM_PWM_Start+0x1a8>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a1e      	ldr	r2, [pc, #120]	@ (8007898 <HAL_TIM_PWM_Start+0x214>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d004      	beq.n	800782c <HAL_TIM_PWM_Start+0x1a8>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a16      	ldr	r2, [pc, #88]	@ (8007880 <HAL_TIM_PWM_Start+0x1fc>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d115      	bne.n	8007858 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689a      	ldr	r2, [r3, #8]
 8007832:	4b1a      	ldr	r3, [pc, #104]	@ (800789c <HAL_TIM_PWM_Start+0x218>)
 8007834:	4013      	ands	r3, r2
 8007836:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b06      	cmp	r3, #6
 800783c:	d015      	beq.n	800786a <HAL_TIM_PWM_Start+0x1e6>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007844:	d011      	beq.n	800786a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f042 0201 	orr.w	r2, r2, #1
 8007854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007856:	e008      	b.n	800786a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]
 8007868:	e000      	b.n	800786c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800786a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
 8007876:	bf00      	nop
 8007878:	40010000 	.word	0x40010000
 800787c:	40010400 	.word	0x40010400
 8007880:	40014000 	.word	0x40014000
 8007884:	40014400 	.word	0x40014400
 8007888:	40014800 	.word	0x40014800
 800788c:	40000400 	.word	0x40000400
 8007890:	40000800 	.word	0x40000800
 8007894:	40000c00 	.word	0x40000c00
 8007898:	40001800 	.word	0x40001800
 800789c:	00010007 	.word	0x00010007

080078a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078ac:	2300      	movs	r3, #0
 80078ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d101      	bne.n	80078be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078ba:	2302      	movs	r3, #2
 80078bc:	e0ff      	b.n	8007abe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2b14      	cmp	r3, #20
 80078ca:	f200 80f0 	bhi.w	8007aae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80078ce:	a201      	add	r2, pc, #4	@ (adr r2, 80078d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078d4:	08007929 	.word	0x08007929
 80078d8:	08007aaf 	.word	0x08007aaf
 80078dc:	08007aaf 	.word	0x08007aaf
 80078e0:	08007aaf 	.word	0x08007aaf
 80078e4:	08007969 	.word	0x08007969
 80078e8:	08007aaf 	.word	0x08007aaf
 80078ec:	08007aaf 	.word	0x08007aaf
 80078f0:	08007aaf 	.word	0x08007aaf
 80078f4:	080079ab 	.word	0x080079ab
 80078f8:	08007aaf 	.word	0x08007aaf
 80078fc:	08007aaf 	.word	0x08007aaf
 8007900:	08007aaf 	.word	0x08007aaf
 8007904:	080079eb 	.word	0x080079eb
 8007908:	08007aaf 	.word	0x08007aaf
 800790c:	08007aaf 	.word	0x08007aaf
 8007910:	08007aaf 	.word	0x08007aaf
 8007914:	08007a2d 	.word	0x08007a2d
 8007918:	08007aaf 	.word	0x08007aaf
 800791c:	08007aaf 	.word	0x08007aaf
 8007920:	08007aaf 	.word	0x08007aaf
 8007924:	08007a6d 	.word	0x08007a6d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68b9      	ldr	r1, [r7, #8]
 800792e:	4618      	mov	r0, r3
 8007930:	f000 faaa 	bl	8007e88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	699a      	ldr	r2, [r3, #24]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0208 	orr.w	r2, r2, #8
 8007942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0204 	bic.w	r2, r2, #4
 8007952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6999      	ldr	r1, [r3, #24]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	691a      	ldr	r2, [r3, #16]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	430a      	orrs	r2, r1
 8007964:	619a      	str	r2, [r3, #24]
      break;
 8007966:	e0a5      	b.n	8007ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68b9      	ldr	r1, [r7, #8]
 800796e:	4618      	mov	r0, r3
 8007970:	f000 fb1a 	bl	8007fa8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	699a      	ldr	r2, [r3, #24]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007982:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	699a      	ldr	r2, [r3, #24]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007992:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	6999      	ldr	r1, [r3, #24]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	021a      	lsls	r2, r3, #8
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	430a      	orrs	r2, r1
 80079a6:	619a      	str	r2, [r3, #24]
      break;
 80079a8:	e084      	b.n	8007ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68b9      	ldr	r1, [r7, #8]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 fb83 	bl	80080bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f042 0208 	orr.w	r2, r2, #8
 80079c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	69da      	ldr	r2, [r3, #28]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f022 0204 	bic.w	r2, r2, #4
 80079d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69d9      	ldr	r1, [r3, #28]
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	691a      	ldr	r2, [r3, #16]
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	61da      	str	r2, [r3, #28]
      break;
 80079e8:	e064      	b.n	8007ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f000 fbeb 	bl	80081cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69da      	ldr	r2, [r3, #28]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	69da      	ldr	r2, [r3, #28]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	69d9      	ldr	r1, [r3, #28]
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	021a      	lsls	r2, r3, #8
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	61da      	str	r2, [r3, #28]
      break;
 8007a2a:	e043      	b.n	8007ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68b9      	ldr	r1, [r7, #8]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 fc34 	bl	80082a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0208 	orr.w	r2, r2, #8
 8007a46:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f022 0204 	bic.w	r2, r2, #4
 8007a56:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	691a      	ldr	r2, [r3, #16]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	430a      	orrs	r2, r1
 8007a68:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007a6a:	e023      	b.n	8007ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68b9      	ldr	r1, [r7, #8]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 fc78 	bl	8008368 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a86:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a96:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	021a      	lsls	r2, r3, #8
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	430a      	orrs	r2, r1
 8007aaa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007aac:	e002      	b.n	8007ab4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop

08007ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d101      	bne.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c>
 8007ae0:	2302      	movs	r3, #2
 8007ae2:	e0dc      	b.n	8007c9e <HAL_TIM_ConfigClockSource+0x1d6>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	4b6a      	ldr	r3, [pc, #424]	@ (8007ca8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007b00:	4013      	ands	r3, r2
 8007b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a64      	ldr	r2, [pc, #400]	@ (8007cac <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	f000 80a9 	beq.w	8007c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b20:	4a62      	ldr	r2, [pc, #392]	@ (8007cac <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	f200 80ae 	bhi.w	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b28:	4a61      	ldr	r2, [pc, #388]	@ (8007cb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	f000 80a1 	beq.w	8007c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b30:	4a5f      	ldr	r2, [pc, #380]	@ (8007cb0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	f200 80a6 	bhi.w	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b38:	4a5e      	ldr	r2, [pc, #376]	@ (8007cb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	f000 8099 	beq.w	8007c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b40:	4a5c      	ldr	r2, [pc, #368]	@ (8007cb4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	f200 809e 	bhi.w	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b48:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b4c:	f000 8091 	beq.w	8007c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b54:	f200 8096 	bhi.w	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b5c:	f000 8089 	beq.w	8007c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b64:	f200 808e 	bhi.w	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b6c:	d03e      	beq.n	8007bec <HAL_TIM_ConfigClockSource+0x124>
 8007b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b72:	f200 8087 	bhi.w	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b7a:	f000 8086 	beq.w	8007c8a <HAL_TIM_ConfigClockSource+0x1c2>
 8007b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b82:	d87f      	bhi.n	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b84:	2b70      	cmp	r3, #112	@ 0x70
 8007b86:	d01a      	beq.n	8007bbe <HAL_TIM_ConfigClockSource+0xf6>
 8007b88:	2b70      	cmp	r3, #112	@ 0x70
 8007b8a:	d87b      	bhi.n	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b8c:	2b60      	cmp	r3, #96	@ 0x60
 8007b8e:	d050      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x16a>
 8007b90:	2b60      	cmp	r3, #96	@ 0x60
 8007b92:	d877      	bhi.n	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b94:	2b50      	cmp	r3, #80	@ 0x50
 8007b96:	d03c      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x14a>
 8007b98:	2b50      	cmp	r3, #80	@ 0x50
 8007b9a:	d873      	bhi.n	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b9c:	2b40      	cmp	r3, #64	@ 0x40
 8007b9e:	d058      	beq.n	8007c52 <HAL_TIM_ConfigClockSource+0x18a>
 8007ba0:	2b40      	cmp	r3, #64	@ 0x40
 8007ba2:	d86f      	bhi.n	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ba4:	2b30      	cmp	r3, #48	@ 0x30
 8007ba6:	d064      	beq.n	8007c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ba8:	2b30      	cmp	r3, #48	@ 0x30
 8007baa:	d86b      	bhi.n	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bac:	2b20      	cmp	r3, #32
 8007bae:	d060      	beq.n	8007c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8007bb0:	2b20      	cmp	r3, #32
 8007bb2:	d867      	bhi.n	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d05c      	beq.n	8007c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8007bb8:	2b10      	cmp	r3, #16
 8007bba:	d05a      	beq.n	8007c72 <HAL_TIM_ConfigClockSource+0x1aa>
 8007bbc:	e062      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bce:	f000 fd99 	bl	8008704 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007be0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	609a      	str	r2, [r3, #8]
      break;
 8007bea:	e04f      	b.n	8007c8c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bfc:	f000 fd82 	bl	8008704 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689a      	ldr	r2, [r3, #8]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c0e:	609a      	str	r2, [r3, #8]
      break;
 8007c10:	e03c      	b.n	8007c8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f000 fcf2 	bl	8008608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2150      	movs	r1, #80	@ 0x50
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fd4c 	bl	80086c8 <TIM_ITRx_SetConfig>
      break;
 8007c30:	e02c      	b.n	8007c8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f000 fd11 	bl	8008666 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2160      	movs	r1, #96	@ 0x60
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 fd3c 	bl	80086c8 <TIM_ITRx_SetConfig>
      break;
 8007c50:	e01c      	b.n	8007c8c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f000 fcd2 	bl	8008608 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2140      	movs	r1, #64	@ 0x40
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 fd2c 	bl	80086c8 <TIM_ITRx_SetConfig>
      break;
 8007c70:	e00c      	b.n	8007c8c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4619      	mov	r1, r3
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	f000 fd23 	bl	80086c8 <TIM_ITRx_SetConfig>
      break;
 8007c82:	e003      	b.n	8007c8c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
 8007c86:	73fb      	strb	r3, [r7, #15]
      break;
 8007c88:	e000      	b.n	8007c8c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007c8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2200      	movs	r2, #0
 8007c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	ffceff88 	.word	0xffceff88
 8007cac:	00100040 	.word	0x00100040
 8007cb0:	00100030 	.word	0x00100030
 8007cb4:	00100020 	.word	0x00100020

08007cb8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d101      	bne.n	8007cd0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007ccc:	2302      	movs	r3, #2
 8007cce:	e031      	b.n	8007d34 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2202      	movs	r2, #2
 8007cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007ce0:	6839      	ldr	r1, [r7, #0]
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fba6 	bl	8008434 <TIM_SlaveTimer_SetConfig>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d009      	beq.n	8007d02 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e018      	b.n	8007d34 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68da      	ldr	r2, [r3, #12]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d10:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68da      	ldr	r2, [r3, #12]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d20:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2201      	movs	r2, #1
 8007d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a46      	ldr	r2, [pc, #280]	@ (8007e68 <TIM_Base_SetConfig+0x12c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d013      	beq.n	8007d7c <TIM_Base_SetConfig+0x40>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d5a:	d00f      	beq.n	8007d7c <TIM_Base_SetConfig+0x40>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a43      	ldr	r2, [pc, #268]	@ (8007e6c <TIM_Base_SetConfig+0x130>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00b      	beq.n	8007d7c <TIM_Base_SetConfig+0x40>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a42      	ldr	r2, [pc, #264]	@ (8007e70 <TIM_Base_SetConfig+0x134>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d007      	beq.n	8007d7c <TIM_Base_SetConfig+0x40>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	4a41      	ldr	r2, [pc, #260]	@ (8007e74 <TIM_Base_SetConfig+0x138>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d003      	beq.n	8007d7c <TIM_Base_SetConfig+0x40>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a40      	ldr	r2, [pc, #256]	@ (8007e78 <TIM_Base_SetConfig+0x13c>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d108      	bne.n	8007d8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	68fa      	ldr	r2, [r7, #12]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a35      	ldr	r2, [pc, #212]	@ (8007e68 <TIM_Base_SetConfig+0x12c>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d01f      	beq.n	8007dd6 <TIM_Base_SetConfig+0x9a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d9c:	d01b      	beq.n	8007dd6 <TIM_Base_SetConfig+0x9a>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a32      	ldr	r2, [pc, #200]	@ (8007e6c <TIM_Base_SetConfig+0x130>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d017      	beq.n	8007dd6 <TIM_Base_SetConfig+0x9a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a31      	ldr	r2, [pc, #196]	@ (8007e70 <TIM_Base_SetConfig+0x134>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d013      	beq.n	8007dd6 <TIM_Base_SetConfig+0x9a>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a30      	ldr	r2, [pc, #192]	@ (8007e74 <TIM_Base_SetConfig+0x138>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d00f      	beq.n	8007dd6 <TIM_Base_SetConfig+0x9a>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a2f      	ldr	r2, [pc, #188]	@ (8007e78 <TIM_Base_SetConfig+0x13c>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d00b      	beq.n	8007dd6 <TIM_Base_SetConfig+0x9a>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a2e      	ldr	r2, [pc, #184]	@ (8007e7c <TIM_Base_SetConfig+0x140>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d007      	beq.n	8007dd6 <TIM_Base_SetConfig+0x9a>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a2d      	ldr	r2, [pc, #180]	@ (8007e80 <TIM_Base_SetConfig+0x144>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d003      	beq.n	8007dd6 <TIM_Base_SetConfig+0x9a>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a2c      	ldr	r2, [pc, #176]	@ (8007e84 <TIM_Base_SetConfig+0x148>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d108      	bne.n	8007de8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	68fa      	ldr	r2, [r7, #12]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	695b      	ldr	r3, [r3, #20]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	689a      	ldr	r2, [r3, #8]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a16      	ldr	r2, [pc, #88]	@ (8007e68 <TIM_Base_SetConfig+0x12c>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d00f      	beq.n	8007e34 <TIM_Base_SetConfig+0xf8>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a18      	ldr	r2, [pc, #96]	@ (8007e78 <TIM_Base_SetConfig+0x13c>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d00b      	beq.n	8007e34 <TIM_Base_SetConfig+0xf8>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a17      	ldr	r2, [pc, #92]	@ (8007e7c <TIM_Base_SetConfig+0x140>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d007      	beq.n	8007e34 <TIM_Base_SetConfig+0xf8>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a16      	ldr	r2, [pc, #88]	@ (8007e80 <TIM_Base_SetConfig+0x144>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d003      	beq.n	8007e34 <TIM_Base_SetConfig+0xf8>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a15      	ldr	r2, [pc, #84]	@ (8007e84 <TIM_Base_SetConfig+0x148>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d103      	bne.n	8007e3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	691a      	ldr	r2, [r3, #16]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d105      	bne.n	8007e5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	f023 0201 	bic.w	r2, r3, #1
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	611a      	str	r2, [r3, #16]
  }
}
 8007e5a:	bf00      	nop
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	40010000 	.word	0x40010000
 8007e6c:	40000400 	.word	0x40000400
 8007e70:	40000800 	.word	0x40000800
 8007e74:	40000c00 	.word	0x40000c00
 8007e78:	40010400 	.word	0x40010400
 8007e7c:	40014000 	.word	0x40014000
 8007e80:	40014400 	.word	0x40014400
 8007e84:	40014800 	.word	0x40014800

08007e88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b087      	sub	sp, #28
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6a1b      	ldr	r3, [r3, #32]
 8007e9c:	f023 0201 	bic.w	r2, r3, #1
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	4b37      	ldr	r3, [pc, #220]	@ (8007f90 <TIM_OC1_SetConfig+0x108>)
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f023 0303 	bic.w	r3, r3, #3
 8007ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68fa      	ldr	r2, [r7, #12]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	f023 0302 	bic.w	r3, r3, #2
 8007ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a2d      	ldr	r2, [pc, #180]	@ (8007f94 <TIM_OC1_SetConfig+0x10c>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d00f      	beq.n	8007f04 <TIM_OC1_SetConfig+0x7c>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8007f98 <TIM_OC1_SetConfig+0x110>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00b      	beq.n	8007f04 <TIM_OC1_SetConfig+0x7c>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a2b      	ldr	r2, [pc, #172]	@ (8007f9c <TIM_OC1_SetConfig+0x114>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d007      	beq.n	8007f04 <TIM_OC1_SetConfig+0x7c>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a2a      	ldr	r2, [pc, #168]	@ (8007fa0 <TIM_OC1_SetConfig+0x118>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d003      	beq.n	8007f04 <TIM_OC1_SetConfig+0x7c>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a29      	ldr	r2, [pc, #164]	@ (8007fa4 <TIM_OC1_SetConfig+0x11c>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d10c      	bne.n	8007f1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f023 0308 	bic.w	r3, r3, #8
 8007f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	697a      	ldr	r2, [r7, #20]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f023 0304 	bic.w	r3, r3, #4
 8007f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a1c      	ldr	r2, [pc, #112]	@ (8007f94 <TIM_OC1_SetConfig+0x10c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d00f      	beq.n	8007f46 <TIM_OC1_SetConfig+0xbe>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a1b      	ldr	r2, [pc, #108]	@ (8007f98 <TIM_OC1_SetConfig+0x110>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d00b      	beq.n	8007f46 <TIM_OC1_SetConfig+0xbe>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a1a      	ldr	r2, [pc, #104]	@ (8007f9c <TIM_OC1_SetConfig+0x114>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d007      	beq.n	8007f46 <TIM_OC1_SetConfig+0xbe>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a19      	ldr	r2, [pc, #100]	@ (8007fa0 <TIM_OC1_SetConfig+0x118>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d003      	beq.n	8007f46 <TIM_OC1_SetConfig+0xbe>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a18      	ldr	r2, [pc, #96]	@ (8007fa4 <TIM_OC1_SetConfig+0x11c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d111      	bne.n	8007f6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	697a      	ldr	r2, [r7, #20]
 8007f82:	621a      	str	r2, [r3, #32]
}
 8007f84:	bf00      	nop
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr
 8007f90:	fffeff8f 	.word	0xfffeff8f
 8007f94:	40010000 	.word	0x40010000
 8007f98:	40010400 	.word	0x40010400
 8007f9c:	40014000 	.word	0x40014000
 8007fa0:	40014400 	.word	0x40014400
 8007fa4:	40014800 	.word	0x40014800

08007fa8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b087      	sub	sp, #28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	6a1b      	ldr	r3, [r3, #32]
 8007fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	f023 0210 	bic.w	r2, r3, #16
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	699b      	ldr	r3, [r3, #24]
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	4b34      	ldr	r3, [pc, #208]	@ (80080a4 <TIM_OC2_SetConfig+0xfc>)
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	68fa      	ldr	r2, [r7, #12]
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	f023 0320 	bic.w	r3, r3, #32
 8007ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	011b      	lsls	r3, r3, #4
 8007ffa:	697a      	ldr	r2, [r7, #20]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a29      	ldr	r2, [pc, #164]	@ (80080a8 <TIM_OC2_SetConfig+0x100>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d003      	beq.n	8008010 <TIM_OC2_SetConfig+0x68>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a28      	ldr	r2, [pc, #160]	@ (80080ac <TIM_OC2_SetConfig+0x104>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d10d      	bne.n	800802c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	011b      	lsls	r3, r3, #4
 800801e:	697a      	ldr	r2, [r7, #20]
 8008020:	4313      	orrs	r3, r2
 8008022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800802a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a1e      	ldr	r2, [pc, #120]	@ (80080a8 <TIM_OC2_SetConfig+0x100>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d00f      	beq.n	8008054 <TIM_OC2_SetConfig+0xac>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a1d      	ldr	r2, [pc, #116]	@ (80080ac <TIM_OC2_SetConfig+0x104>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d00b      	beq.n	8008054 <TIM_OC2_SetConfig+0xac>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a1c      	ldr	r2, [pc, #112]	@ (80080b0 <TIM_OC2_SetConfig+0x108>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d007      	beq.n	8008054 <TIM_OC2_SetConfig+0xac>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	4a1b      	ldr	r2, [pc, #108]	@ (80080b4 <TIM_OC2_SetConfig+0x10c>)
 8008048:	4293      	cmp	r3, r2
 800804a:	d003      	beq.n	8008054 <TIM_OC2_SetConfig+0xac>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a1a      	ldr	r2, [pc, #104]	@ (80080b8 <TIM_OC2_SetConfig+0x110>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d113      	bne.n	800807c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800805a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008062:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	695b      	ldr	r3, [r3, #20]
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	4313      	orrs	r3, r2
 800806e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	4313      	orrs	r3, r2
 800807a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	621a      	str	r2, [r3, #32]
}
 8008096:	bf00      	nop
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	feff8fff 	.word	0xfeff8fff
 80080a8:	40010000 	.word	0x40010000
 80080ac:	40010400 	.word	0x40010400
 80080b0:	40014000 	.word	0x40014000
 80080b4:	40014400 	.word	0x40014400
 80080b8:	40014800 	.word	0x40014800

080080bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080bc:	b480      	push	{r7}
 80080be:	b087      	sub	sp, #28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	4b33      	ldr	r3, [pc, #204]	@ (80081b4 <TIM_OC3_SetConfig+0xf8>)
 80080e8:	4013      	ands	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f023 0303 	bic.w	r3, r3, #3
 80080f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68fa      	ldr	r2, [r7, #12]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	021b      	lsls	r3, r3, #8
 800810c:	697a      	ldr	r2, [r7, #20]
 800810e:	4313      	orrs	r3, r2
 8008110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a28      	ldr	r2, [pc, #160]	@ (80081b8 <TIM_OC3_SetConfig+0xfc>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d003      	beq.n	8008122 <TIM_OC3_SetConfig+0x66>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a27      	ldr	r2, [pc, #156]	@ (80081bc <TIM_OC3_SetConfig+0x100>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d10d      	bne.n	800813e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	021b      	lsls	r3, r3, #8
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800813c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a1d      	ldr	r2, [pc, #116]	@ (80081b8 <TIM_OC3_SetConfig+0xfc>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d00f      	beq.n	8008166 <TIM_OC3_SetConfig+0xaa>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a1c      	ldr	r2, [pc, #112]	@ (80081bc <TIM_OC3_SetConfig+0x100>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00b      	beq.n	8008166 <TIM_OC3_SetConfig+0xaa>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a1b      	ldr	r2, [pc, #108]	@ (80081c0 <TIM_OC3_SetConfig+0x104>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d007      	beq.n	8008166 <TIM_OC3_SetConfig+0xaa>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a1a      	ldr	r2, [pc, #104]	@ (80081c4 <TIM_OC3_SetConfig+0x108>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d003      	beq.n	8008166 <TIM_OC3_SetConfig+0xaa>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a19      	ldr	r2, [pc, #100]	@ (80081c8 <TIM_OC3_SetConfig+0x10c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d113      	bne.n	800818e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800816c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	695b      	ldr	r3, [r3, #20]
 800817a:	011b      	lsls	r3, r3, #4
 800817c:	693a      	ldr	r2, [r7, #16]
 800817e:	4313      	orrs	r3, r2
 8008180:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	699b      	ldr	r3, [r3, #24]
 8008186:	011b      	lsls	r3, r3, #4
 8008188:	693a      	ldr	r2, [r7, #16]
 800818a:	4313      	orrs	r3, r2
 800818c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	621a      	str	r2, [r3, #32]
}
 80081a8:	bf00      	nop
 80081aa:	371c      	adds	r7, #28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	fffeff8f 	.word	0xfffeff8f
 80081b8:	40010000 	.word	0x40010000
 80081bc:	40010400 	.word	0x40010400
 80081c0:	40014000 	.word	0x40014000
 80081c4:	40014400 	.word	0x40014400
 80081c8:	40014800 	.word	0x40014800

080081cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a1b      	ldr	r3, [r3, #32]
 80081da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	69db      	ldr	r3, [r3, #28]
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081f4:	68fa      	ldr	r2, [r7, #12]
 80081f6:	4b24      	ldr	r3, [pc, #144]	@ (8008288 <TIM_OC4_SetConfig+0xbc>)
 80081f8:	4013      	ands	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	021b      	lsls	r3, r3, #8
 800820a:	68fa      	ldr	r2, [r7, #12]
 800820c:	4313      	orrs	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	689b      	ldr	r3, [r3, #8]
 800821c:	031b      	lsls	r3, r3, #12
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	4313      	orrs	r3, r2
 8008222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a19      	ldr	r2, [pc, #100]	@ (800828c <TIM_OC4_SetConfig+0xc0>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d00f      	beq.n	800824c <TIM_OC4_SetConfig+0x80>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a18      	ldr	r2, [pc, #96]	@ (8008290 <TIM_OC4_SetConfig+0xc4>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d00b      	beq.n	800824c <TIM_OC4_SetConfig+0x80>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a17      	ldr	r2, [pc, #92]	@ (8008294 <TIM_OC4_SetConfig+0xc8>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d007      	beq.n	800824c <TIM_OC4_SetConfig+0x80>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a16      	ldr	r2, [pc, #88]	@ (8008298 <TIM_OC4_SetConfig+0xcc>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d003      	beq.n	800824c <TIM_OC4_SetConfig+0x80>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a15      	ldr	r2, [pc, #84]	@ (800829c <TIM_OC4_SetConfig+0xd0>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d109      	bne.n	8008260 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	019b      	lsls	r3, r3, #6
 800825a:	697a      	ldr	r2, [r7, #20]
 800825c:	4313      	orrs	r3, r2
 800825e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685a      	ldr	r2, [r3, #4]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	693a      	ldr	r2, [r7, #16]
 8008278:	621a      	str	r2, [r3, #32]
}
 800827a:	bf00      	nop
 800827c:	371c      	adds	r7, #28
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
 8008286:	bf00      	nop
 8008288:	feff8fff 	.word	0xfeff8fff
 800828c:	40010000 	.word	0x40010000
 8008290:	40010400 	.word	0x40010400
 8008294:	40014000 	.word	0x40014000
 8008298:	40014400 	.word	0x40014400
 800829c:	40014800 	.word	0x40014800

080082a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b087      	sub	sp, #28
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	4b21      	ldr	r3, [pc, #132]	@ (8008350 <TIM_OC5_SetConfig+0xb0>)
 80082cc:	4013      	ands	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80082e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	041b      	lsls	r3, r3, #16
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a18      	ldr	r2, [pc, #96]	@ (8008354 <TIM_OC5_SetConfig+0xb4>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d00f      	beq.n	8008316 <TIM_OC5_SetConfig+0x76>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	4a17      	ldr	r2, [pc, #92]	@ (8008358 <TIM_OC5_SetConfig+0xb8>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d00b      	beq.n	8008316 <TIM_OC5_SetConfig+0x76>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	4a16      	ldr	r2, [pc, #88]	@ (800835c <TIM_OC5_SetConfig+0xbc>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d007      	beq.n	8008316 <TIM_OC5_SetConfig+0x76>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	4a15      	ldr	r2, [pc, #84]	@ (8008360 <TIM_OC5_SetConfig+0xc0>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d003      	beq.n	8008316 <TIM_OC5_SetConfig+0x76>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a14      	ldr	r2, [pc, #80]	@ (8008364 <TIM_OC5_SetConfig+0xc4>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d109      	bne.n	800832a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800831c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	021b      	lsls	r3, r3, #8
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	4313      	orrs	r3, r2
 8008328:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	685a      	ldr	r2, [r3, #4]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	621a      	str	r2, [r3, #32]
}
 8008344:	bf00      	nop
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr
 8008350:	fffeff8f 	.word	0xfffeff8f
 8008354:	40010000 	.word	0x40010000
 8008358:	40010400 	.word	0x40010400
 800835c:	40014000 	.word	0x40014000
 8008360:	40014400 	.word	0x40014400
 8008364:	40014800 	.word	0x40014800

08008368 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008368:	b480      	push	{r7}
 800836a:	b087      	sub	sp, #28
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800838e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008390:	68fa      	ldr	r2, [r7, #12]
 8008392:	4b22      	ldr	r3, [pc, #136]	@ (800841c <TIM_OC6_SetConfig+0xb4>)
 8008394:	4013      	ands	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	021b      	lsls	r3, r3, #8
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	051b      	lsls	r3, r3, #20
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a19      	ldr	r2, [pc, #100]	@ (8008420 <TIM_OC6_SetConfig+0xb8>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d00f      	beq.n	80083e0 <TIM_OC6_SetConfig+0x78>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a18      	ldr	r2, [pc, #96]	@ (8008424 <TIM_OC6_SetConfig+0xbc>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00b      	beq.n	80083e0 <TIM_OC6_SetConfig+0x78>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a17      	ldr	r2, [pc, #92]	@ (8008428 <TIM_OC6_SetConfig+0xc0>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d007      	beq.n	80083e0 <TIM_OC6_SetConfig+0x78>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a16      	ldr	r2, [pc, #88]	@ (800842c <TIM_OC6_SetConfig+0xc4>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d003      	beq.n	80083e0 <TIM_OC6_SetConfig+0x78>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a15      	ldr	r2, [pc, #84]	@ (8008430 <TIM_OC6_SetConfig+0xc8>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d109      	bne.n	80083f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	029b      	lsls	r3, r3, #10
 80083ee:	697a      	ldr	r2, [r7, #20]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	697a      	ldr	r2, [r7, #20]
 80083f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	621a      	str	r2, [r3, #32]
}
 800840e:	bf00      	nop
 8008410:	371c      	adds	r7, #28
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	feff8fff 	.word	0xfeff8fff
 8008420:	40010000 	.word	0x40010000
 8008424:	40010400 	.word	0x40010400
 8008428:	40014000 	.word	0x40014000
 800842c:	40014400 	.word	0x40014400
 8008430:	40014800 	.word	0x40014800

08008434 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b086      	sub	sp, #24
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800843e:	2300      	movs	r3, #0
 8008440:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800844a:	693a      	ldr	r2, [r7, #16]
 800844c:	4b65      	ldr	r3, [pc, #404]	@ (80085e4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800844e:	4013      	ands	r3, r2
 8008450:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	693a      	ldr	r2, [r7, #16]
 8008458:	4313      	orrs	r3, r2
 800845a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	4b62      	ldr	r3, [pc, #392]	@ (80085e8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008460:	4013      	ands	r3, r2
 8008462:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	693a      	ldr	r2, [r7, #16]
 800846a:	4313      	orrs	r3, r2
 800846c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	693a      	ldr	r2, [r7, #16]
 8008474:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	4a5c      	ldr	r2, [pc, #368]	@ (80085ec <TIM_SlaveTimer_SetConfig+0x1b8>)
 800847c:	4293      	cmp	r3, r2
 800847e:	f000 80ab 	beq.w	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008482:	4a5a      	ldr	r2, [pc, #360]	@ (80085ec <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008484:	4293      	cmp	r3, r2
 8008486:	f200 80a4 	bhi.w	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 800848a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800848e:	f000 80a3 	beq.w	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008492:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008496:	f200 809c 	bhi.w	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 800849a:	4a55      	ldr	r2, [pc, #340]	@ (80085f0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800849c:	4293      	cmp	r3, r2
 800849e:	f000 809b 	beq.w	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80084a2:	4a53      	ldr	r2, [pc, #332]	@ (80085f0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	f200 8094 	bhi.w	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084aa:	4a52      	ldr	r2, [pc, #328]	@ (80085f4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	f000 8093 	beq.w	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80084b2:	4a50      	ldr	r2, [pc, #320]	@ (80085f4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	f200 808c 	bhi.w	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084ba:	4a4f      	ldr	r2, [pc, #316]	@ (80085f8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	f000 808b 	beq.w	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80084c2:	4a4d      	ldr	r2, [pc, #308]	@ (80085f8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	f200 8084 	bhi.w	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084ca:	4a4c      	ldr	r2, [pc, #304]	@ (80085fc <TIM_SlaveTimer_SetConfig+0x1c8>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	f000 8083 	beq.w	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80084d2:	4a4a      	ldr	r2, [pc, #296]	@ (80085fc <TIM_SlaveTimer_SetConfig+0x1c8>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d87c      	bhi.n	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084d8:	4a49      	ldr	r2, [pc, #292]	@ (8008600 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d07c      	beq.n	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80084de:	4a48      	ldr	r2, [pc, #288]	@ (8008600 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d876      	bhi.n	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084e4:	4a47      	ldr	r2, [pc, #284]	@ (8008604 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d076      	beq.n	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80084ea:	4a46      	ldr	r2, [pc, #280]	@ (8008604 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d870      	bhi.n	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80084f4:	d070      	beq.n	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80084f6:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80084fa:	d86a      	bhi.n	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008500:	d06a      	beq.n	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008502:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008506:	d864      	bhi.n	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008508:	2b70      	cmp	r3, #112	@ 0x70
 800850a:	d01a      	beq.n	8008542 <TIM_SlaveTimer_SetConfig+0x10e>
 800850c:	2b70      	cmp	r3, #112	@ 0x70
 800850e:	d860      	bhi.n	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008510:	2b60      	cmp	r3, #96	@ 0x60
 8008512:	d054      	beq.n	80085be <TIM_SlaveTimer_SetConfig+0x18a>
 8008514:	2b60      	cmp	r3, #96	@ 0x60
 8008516:	d85c      	bhi.n	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008518:	2b50      	cmp	r3, #80	@ 0x50
 800851a:	d046      	beq.n	80085aa <TIM_SlaveTimer_SetConfig+0x176>
 800851c:	2b50      	cmp	r3, #80	@ 0x50
 800851e:	d858      	bhi.n	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008520:	2b40      	cmp	r3, #64	@ 0x40
 8008522:	d019      	beq.n	8008558 <TIM_SlaveTimer_SetConfig+0x124>
 8008524:	2b40      	cmp	r3, #64	@ 0x40
 8008526:	d854      	bhi.n	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008528:	2b30      	cmp	r3, #48	@ 0x30
 800852a:	d055      	beq.n	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800852c:	2b30      	cmp	r3, #48	@ 0x30
 800852e:	d850      	bhi.n	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008530:	2b20      	cmp	r3, #32
 8008532:	d051      	beq.n	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008534:	2b20      	cmp	r3, #32
 8008536:	d84c      	bhi.n	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008538:	2b00      	cmp	r3, #0
 800853a:	d04d      	beq.n	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800853c:	2b10      	cmp	r3, #16
 800853e:	d04b      	beq.n	80085d8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008540:	e047      	b.n	80085d2 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008552:	f000 f8d7 	bl	8008704 <TIM_ETR_SetConfig>
      break;
 8008556:	e040      	b.n	80085da <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b05      	cmp	r3, #5
 800855e:	d101      	bne.n	8008564 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e03b      	b.n	80085dc <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6a1a      	ldr	r2, [r3, #32]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 0201 	bic.w	r2, r2, #1
 800857a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800858a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	011b      	lsls	r3, r3, #4
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	4313      	orrs	r3, r2
 8008596:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68ba      	ldr	r2, [r7, #8]
 800859e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	621a      	str	r2, [r3, #32]
      break;
 80085a8:	e017      	b.n	80085da <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085b6:	461a      	mov	r2, r3
 80085b8:	f000 f826 	bl	8008608 <TIM_TI1_ConfigInputStage>
      break;
 80085bc:	e00d      	b.n	80085da <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085ca:	461a      	mov	r2, r3
 80085cc:	f000 f84b 	bl	8008666 <TIM_TI2_ConfigInputStage>
      break;
 80085d0:	e003      	b.n	80085da <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	75fb      	strb	r3, [r7, #23]
      break;
 80085d6:	e000      	b.n	80085da <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80085d8:	bf00      	nop
  }

  return status;
 80085da:	7dfb      	ldrb	r3, [r7, #23]
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3718      	adds	r7, #24
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	ffcfff8f 	.word	0xffcfff8f
 80085e8:	fffefff8 	.word	0xfffefff8
 80085ec:	00200010 	.word	0x00200010
 80085f0:	00100070 	.word	0x00100070
 80085f4:	00100060 	.word	0x00100060
 80085f8:	00100050 	.word	0x00100050
 80085fc:	00100040 	.word	0x00100040
 8008600:	00100030 	.word	0x00100030
 8008604:	00100020 	.word	0x00100020

08008608 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008608:	b480      	push	{r7}
 800860a:	b087      	sub	sp, #28
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6a1b      	ldr	r3, [r3, #32]
 8008618:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	f023 0201 	bic.w	r2, r3, #1
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	699b      	ldr	r3, [r3, #24]
 800862a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800862c:	693b      	ldr	r3, [r7, #16]
 800862e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008632:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	011b      	lsls	r3, r3, #4
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	4313      	orrs	r3, r2
 800863c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f023 030a 	bic.w	r3, r3, #10
 8008644:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4313      	orrs	r3, r2
 800864c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	697a      	ldr	r2, [r7, #20]
 8008658:	621a      	str	r2, [r3, #32]
}
 800865a:	bf00      	nop
 800865c:	371c      	adds	r7, #28
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr

08008666 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008666:	b480      	push	{r7}
 8008668:	b087      	sub	sp, #28
 800866a:	af00      	add	r7, sp, #0
 800866c:	60f8      	str	r0, [r7, #12]
 800866e:	60b9      	str	r1, [r7, #8]
 8008670:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6a1b      	ldr	r3, [r3, #32]
 8008676:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6a1b      	ldr	r3, [r3, #32]
 800867c:	f023 0210 	bic.w	r2, r3, #16
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	699b      	ldr	r3, [r3, #24]
 8008688:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	031b      	lsls	r3, r3, #12
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	4313      	orrs	r3, r2
 800869a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80086a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	011b      	lsls	r3, r3, #4
 80086a8:	697a      	ldr	r2, [r7, #20]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	693a      	ldr	r2, [r7, #16]
 80086b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	697a      	ldr	r2, [r7, #20]
 80086b8:	621a      	str	r2, [r3, #32]
}
 80086ba:	bf00      	nop
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
	...

080086c8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	4b09      	ldr	r3, [pc, #36]	@ (8008700 <TIM_ITRx_SetConfig+0x38>)
 80086dc:	4013      	ands	r3, r2
 80086de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086e0:	683a      	ldr	r2, [r7, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	f043 0307 	orr.w	r3, r3, #7
 80086ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	609a      	str	r2, [r3, #8]
}
 80086f2:	bf00      	nop
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	ffcfff8f 	.word	0xffcfff8f

08008704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008704:	b480      	push	{r7}
 8008706:	b087      	sub	sp, #28
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	60b9      	str	r1, [r7, #8]
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800871e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	021a      	lsls	r2, r3, #8
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	431a      	orrs	r2, r3
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	4313      	orrs	r3, r2
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	4313      	orrs	r3, r2
 8008730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	697a      	ldr	r2, [r7, #20]
 8008736:	609a      	str	r2, [r3, #8]
}
 8008738:	bf00      	nop
 800873a:	371c      	adds	r7, #28
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008744:	b480      	push	{r7}
 8008746:	b087      	sub	sp, #28
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f003 031f 	and.w	r3, r3, #31
 8008756:	2201      	movs	r2, #1
 8008758:	fa02 f303 	lsl.w	r3, r2, r3
 800875c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6a1a      	ldr	r2, [r3, #32]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	43db      	mvns	r3, r3
 8008766:	401a      	ands	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a1a      	ldr	r2, [r3, #32]
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f003 031f 	and.w	r3, r3, #31
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	fa01 f303 	lsl.w	r3, r1, r3
 800877c:	431a      	orrs	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	621a      	str	r2, [r3, #32]
}
 8008782:	bf00      	nop
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
	...

08008790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d101      	bne.n	80087a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087a4:	2302      	movs	r3, #2
 80087a6:	e06d      	b.n	8008884 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2202      	movs	r2, #2
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a30      	ldr	r2, [pc, #192]	@ (8008890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d004      	beq.n	80087dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a2f      	ldr	r2, [pc, #188]	@ (8008894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d108      	bne.n	80087ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80087e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	68fa      	ldr	r2, [r7, #12]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a20      	ldr	r2, [pc, #128]	@ (8008890 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d022      	beq.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800881a:	d01d      	beq.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a1d      	ldr	r2, [pc, #116]	@ (8008898 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d018      	beq.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a1c      	ldr	r2, [pc, #112]	@ (800889c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d013      	beq.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a1a      	ldr	r2, [pc, #104]	@ (80088a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d00e      	beq.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4a15      	ldr	r2, [pc, #84]	@ (8008894 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d009      	beq.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a16      	ldr	r2, [pc, #88]	@ (80088a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d004      	beq.n	8008858 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	4a15      	ldr	r2, [pc, #84]	@ (80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d10c      	bne.n	8008872 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800885e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	4313      	orrs	r3, r2
 8008868:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2201      	movs	r2, #1
 8008876:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008882:	2300      	movs	r3, #0
}
 8008884:	4618      	mov	r0, r3
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	40010000 	.word	0x40010000
 8008894:	40010400 	.word	0x40010400
 8008898:	40000400 	.word	0x40000400
 800889c:	40000800 	.word	0x40000800
 80088a0:	40000c00 	.word	0x40000c00
 80088a4:	40001800 	.word	0x40001800
 80088a8:	40014000 	.word	0x40014000

080088ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d101      	bne.n	80088be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088ba:	2301      	movs	r3, #1
 80088bc:	e042      	b.n	8008944 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d106      	bne.n	80088d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f7f9 fa07 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2224      	movs	r2, #36	@ 0x24
 80088da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0201 	bic.w	r2, r2, #1
 80088ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d002      	beq.n	80088fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fe1e 	bl	8009538 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 f8b3 	bl	8008a68 <UART_SetConfig>
 8008902:	4603      	mov	r3, r0
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e01b      	b.n	8008944 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	685a      	ldr	r2, [r3, #4]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800891a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	689a      	ldr	r2, [r3, #8]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800892a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681a      	ldr	r2, [r3, #0]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f042 0201 	orr.w	r2, r2, #1
 800893a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 fe9d 	bl	800967c <UART_CheckIdleState>
 8008942:	4603      	mov	r3, r0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b08a      	sub	sp, #40	@ 0x28
 8008950:	af02      	add	r7, sp, #8
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	603b      	str	r3, [r7, #0]
 8008958:	4613      	mov	r3, r2
 800895a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008962:	2b20      	cmp	r3, #32
 8008964:	d17b      	bne.n	8008a5e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d002      	beq.n	8008972 <HAL_UART_Transmit+0x26>
 800896c:	88fb      	ldrh	r3, [r7, #6]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e074      	b.n	8008a60 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2200      	movs	r2, #0
 800897a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2221      	movs	r2, #33	@ 0x21
 8008982:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008986:	f7f9 fb85 	bl	8002094 <HAL_GetTick>
 800898a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	88fa      	ldrh	r2, [r7, #6]
 8008990:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	88fa      	ldrh	r2, [r7, #6]
 8008998:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089a4:	d108      	bne.n	80089b8 <HAL_UART_Transmit+0x6c>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d104      	bne.n	80089b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80089ae:	2300      	movs	r3, #0
 80089b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	61bb      	str	r3, [r7, #24]
 80089b6:	e003      	b.n	80089c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089bc:	2300      	movs	r3, #0
 80089be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089c0:	e030      	b.n	8008a24 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	9300      	str	r3, [sp, #0]
 80089c6:	697b      	ldr	r3, [r7, #20]
 80089c8:	2200      	movs	r2, #0
 80089ca:	2180      	movs	r1, #128	@ 0x80
 80089cc:	68f8      	ldr	r0, [r7, #12]
 80089ce:	f000 feff 	bl	80097d0 <UART_WaitOnFlagUntilTimeout>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d005      	beq.n	80089e4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2220      	movs	r2, #32
 80089dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80089e0:	2303      	movs	r3, #3
 80089e2:	e03d      	b.n	8008a60 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10b      	bne.n	8008a02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	461a      	mov	r2, r3
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089f8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	3302      	adds	r3, #2
 80089fe:	61bb      	str	r3, [r7, #24]
 8008a00:	e007      	b.n	8008a12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a02:	69fb      	ldr	r3, [r7, #28]
 8008a04:	781a      	ldrb	r2, [r3, #0]
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	3301      	adds	r3, #1
 8008a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d1c8      	bne.n	80089c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	2200      	movs	r2, #0
 8008a38:	2140      	movs	r1, #64	@ 0x40
 8008a3a:	68f8      	ldr	r0, [r7, #12]
 8008a3c:	f000 fec8 	bl	80097d0 <UART_WaitOnFlagUntilTimeout>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d005      	beq.n	8008a52 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2220      	movs	r2, #32
 8008a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e006      	b.n	8008a60 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2220      	movs	r2, #32
 8008a56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	e000      	b.n	8008a60 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008a5e:	2302      	movs	r3, #2
  }
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3720      	adds	r7, #32
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a6c:	b092      	sub	sp, #72	@ 0x48
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a72:	2300      	movs	r3, #0
 8008a74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	689a      	ldr	r2, [r3, #8]
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	431a      	orrs	r2, r3
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	695b      	ldr	r3, [r3, #20]
 8008a86:	431a      	orrs	r2, r3
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	69db      	ldr	r3, [r3, #28]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	4bbe      	ldr	r3, [pc, #760]	@ (8008d90 <UART_SetConfig+0x328>)
 8008a98:	4013      	ands	r3, r2
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	6812      	ldr	r2, [r2, #0]
 8008a9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008aa0:	430b      	orrs	r3, r1
 8008aa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	699b      	ldr	r3, [r3, #24]
 8008abe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	4ab3      	ldr	r2, [pc, #716]	@ (8008d94 <UART_SetConfig+0x32c>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d004      	beq.n	8008ad4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	6a1b      	ldr	r3, [r3, #32]
 8008ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	4baf      	ldr	r3, [pc, #700]	@ (8008d98 <UART_SetConfig+0x330>)
 8008adc:	4013      	ands	r3, r2
 8008ade:	697a      	ldr	r2, [r7, #20]
 8008ae0:	6812      	ldr	r2, [r2, #0]
 8008ae2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ae8:	697b      	ldr	r3, [r7, #20]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aee:	f023 010f 	bic.w	r1, r3, #15
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4aa6      	ldr	r2, [pc, #664]	@ (8008d9c <UART_SetConfig+0x334>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d177      	bne.n	8008bf8 <UART_SetConfig+0x190>
 8008b08:	4ba5      	ldr	r3, [pc, #660]	@ (8008da0 <UART_SetConfig+0x338>)
 8008b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b0c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b10:	2b28      	cmp	r3, #40	@ 0x28
 8008b12:	d86d      	bhi.n	8008bf0 <UART_SetConfig+0x188>
 8008b14:	a201      	add	r2, pc, #4	@ (adr r2, 8008b1c <UART_SetConfig+0xb4>)
 8008b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1a:	bf00      	nop
 8008b1c:	08008bc1 	.word	0x08008bc1
 8008b20:	08008bf1 	.word	0x08008bf1
 8008b24:	08008bf1 	.word	0x08008bf1
 8008b28:	08008bf1 	.word	0x08008bf1
 8008b2c:	08008bf1 	.word	0x08008bf1
 8008b30:	08008bf1 	.word	0x08008bf1
 8008b34:	08008bf1 	.word	0x08008bf1
 8008b38:	08008bf1 	.word	0x08008bf1
 8008b3c:	08008bc9 	.word	0x08008bc9
 8008b40:	08008bf1 	.word	0x08008bf1
 8008b44:	08008bf1 	.word	0x08008bf1
 8008b48:	08008bf1 	.word	0x08008bf1
 8008b4c:	08008bf1 	.word	0x08008bf1
 8008b50:	08008bf1 	.word	0x08008bf1
 8008b54:	08008bf1 	.word	0x08008bf1
 8008b58:	08008bf1 	.word	0x08008bf1
 8008b5c:	08008bd1 	.word	0x08008bd1
 8008b60:	08008bf1 	.word	0x08008bf1
 8008b64:	08008bf1 	.word	0x08008bf1
 8008b68:	08008bf1 	.word	0x08008bf1
 8008b6c:	08008bf1 	.word	0x08008bf1
 8008b70:	08008bf1 	.word	0x08008bf1
 8008b74:	08008bf1 	.word	0x08008bf1
 8008b78:	08008bf1 	.word	0x08008bf1
 8008b7c:	08008bd9 	.word	0x08008bd9
 8008b80:	08008bf1 	.word	0x08008bf1
 8008b84:	08008bf1 	.word	0x08008bf1
 8008b88:	08008bf1 	.word	0x08008bf1
 8008b8c:	08008bf1 	.word	0x08008bf1
 8008b90:	08008bf1 	.word	0x08008bf1
 8008b94:	08008bf1 	.word	0x08008bf1
 8008b98:	08008bf1 	.word	0x08008bf1
 8008b9c:	08008be1 	.word	0x08008be1
 8008ba0:	08008bf1 	.word	0x08008bf1
 8008ba4:	08008bf1 	.word	0x08008bf1
 8008ba8:	08008bf1 	.word	0x08008bf1
 8008bac:	08008bf1 	.word	0x08008bf1
 8008bb0:	08008bf1 	.word	0x08008bf1
 8008bb4:	08008bf1 	.word	0x08008bf1
 8008bb8:	08008bf1 	.word	0x08008bf1
 8008bbc:	08008be9 	.word	0x08008be9
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc6:	e222      	b.n	800900e <UART_SetConfig+0x5a6>
 8008bc8:	2304      	movs	r3, #4
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bce:	e21e      	b.n	800900e <UART_SetConfig+0x5a6>
 8008bd0:	2308      	movs	r3, #8
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e21a      	b.n	800900e <UART_SetConfig+0x5a6>
 8008bd8:	2310      	movs	r3, #16
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e216      	b.n	800900e <UART_SetConfig+0x5a6>
 8008be0:	2320      	movs	r3, #32
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be6:	e212      	b.n	800900e <UART_SetConfig+0x5a6>
 8008be8:	2340      	movs	r3, #64	@ 0x40
 8008bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bee:	e20e      	b.n	800900e <UART_SetConfig+0x5a6>
 8008bf0:	2380      	movs	r3, #128	@ 0x80
 8008bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bf6:	e20a      	b.n	800900e <UART_SetConfig+0x5a6>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a69      	ldr	r2, [pc, #420]	@ (8008da4 <UART_SetConfig+0x33c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d130      	bne.n	8008c64 <UART_SetConfig+0x1fc>
 8008c02:	4b67      	ldr	r3, [pc, #412]	@ (8008da0 <UART_SetConfig+0x338>)
 8008c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	2b05      	cmp	r3, #5
 8008c0c:	d826      	bhi.n	8008c5c <UART_SetConfig+0x1f4>
 8008c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c14 <UART_SetConfig+0x1ac>)
 8008c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c14:	08008c2d 	.word	0x08008c2d
 8008c18:	08008c35 	.word	0x08008c35
 8008c1c:	08008c3d 	.word	0x08008c3d
 8008c20:	08008c45 	.word	0x08008c45
 8008c24:	08008c4d 	.word	0x08008c4d
 8008c28:	08008c55 	.word	0x08008c55
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c32:	e1ec      	b.n	800900e <UART_SetConfig+0x5a6>
 8008c34:	2304      	movs	r3, #4
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3a:	e1e8      	b.n	800900e <UART_SetConfig+0x5a6>
 8008c3c:	2308      	movs	r3, #8
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c42:	e1e4      	b.n	800900e <UART_SetConfig+0x5a6>
 8008c44:	2310      	movs	r3, #16
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c4a:	e1e0      	b.n	800900e <UART_SetConfig+0x5a6>
 8008c4c:	2320      	movs	r3, #32
 8008c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c52:	e1dc      	b.n	800900e <UART_SetConfig+0x5a6>
 8008c54:	2340      	movs	r3, #64	@ 0x40
 8008c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c5a:	e1d8      	b.n	800900e <UART_SetConfig+0x5a6>
 8008c5c:	2380      	movs	r3, #128	@ 0x80
 8008c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c62:	e1d4      	b.n	800900e <UART_SetConfig+0x5a6>
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a4f      	ldr	r2, [pc, #316]	@ (8008da8 <UART_SetConfig+0x340>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d130      	bne.n	8008cd0 <UART_SetConfig+0x268>
 8008c6e:	4b4c      	ldr	r3, [pc, #304]	@ (8008da0 <UART_SetConfig+0x338>)
 8008c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c72:	f003 0307 	and.w	r3, r3, #7
 8008c76:	2b05      	cmp	r3, #5
 8008c78:	d826      	bhi.n	8008cc8 <UART_SetConfig+0x260>
 8008c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c80 <UART_SetConfig+0x218>)
 8008c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c80:	08008c99 	.word	0x08008c99
 8008c84:	08008ca1 	.word	0x08008ca1
 8008c88:	08008ca9 	.word	0x08008ca9
 8008c8c:	08008cb1 	.word	0x08008cb1
 8008c90:	08008cb9 	.word	0x08008cb9
 8008c94:	08008cc1 	.word	0x08008cc1
 8008c98:	2300      	movs	r3, #0
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9e:	e1b6      	b.n	800900e <UART_SetConfig+0x5a6>
 8008ca0:	2304      	movs	r3, #4
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca6:	e1b2      	b.n	800900e <UART_SetConfig+0x5a6>
 8008ca8:	2308      	movs	r3, #8
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cae:	e1ae      	b.n	800900e <UART_SetConfig+0x5a6>
 8008cb0:	2310      	movs	r3, #16
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb6:	e1aa      	b.n	800900e <UART_SetConfig+0x5a6>
 8008cb8:	2320      	movs	r3, #32
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cbe:	e1a6      	b.n	800900e <UART_SetConfig+0x5a6>
 8008cc0:	2340      	movs	r3, #64	@ 0x40
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc6:	e1a2      	b.n	800900e <UART_SetConfig+0x5a6>
 8008cc8:	2380      	movs	r3, #128	@ 0x80
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cce:	e19e      	b.n	800900e <UART_SetConfig+0x5a6>
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a35      	ldr	r2, [pc, #212]	@ (8008dac <UART_SetConfig+0x344>)
 8008cd6:	4293      	cmp	r3, r2
 8008cd8:	d130      	bne.n	8008d3c <UART_SetConfig+0x2d4>
 8008cda:	4b31      	ldr	r3, [pc, #196]	@ (8008da0 <UART_SetConfig+0x338>)
 8008cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cde:	f003 0307 	and.w	r3, r3, #7
 8008ce2:	2b05      	cmp	r3, #5
 8008ce4:	d826      	bhi.n	8008d34 <UART_SetConfig+0x2cc>
 8008ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cec <UART_SetConfig+0x284>)
 8008ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cec:	08008d05 	.word	0x08008d05
 8008cf0:	08008d0d 	.word	0x08008d0d
 8008cf4:	08008d15 	.word	0x08008d15
 8008cf8:	08008d1d 	.word	0x08008d1d
 8008cfc:	08008d25 	.word	0x08008d25
 8008d00:	08008d2d 	.word	0x08008d2d
 8008d04:	2300      	movs	r3, #0
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	e180      	b.n	800900e <UART_SetConfig+0x5a6>
 8008d0c:	2304      	movs	r3, #4
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d12:	e17c      	b.n	800900e <UART_SetConfig+0x5a6>
 8008d14:	2308      	movs	r3, #8
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1a:	e178      	b.n	800900e <UART_SetConfig+0x5a6>
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d22:	e174      	b.n	800900e <UART_SetConfig+0x5a6>
 8008d24:	2320      	movs	r3, #32
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	e170      	b.n	800900e <UART_SetConfig+0x5a6>
 8008d2c:	2340      	movs	r3, #64	@ 0x40
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e16c      	b.n	800900e <UART_SetConfig+0x5a6>
 8008d34:	2380      	movs	r3, #128	@ 0x80
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e168      	b.n	800900e <UART_SetConfig+0x5a6>
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a1b      	ldr	r2, [pc, #108]	@ (8008db0 <UART_SetConfig+0x348>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d142      	bne.n	8008dcc <UART_SetConfig+0x364>
 8008d46:	4b16      	ldr	r3, [pc, #88]	@ (8008da0 <UART_SetConfig+0x338>)
 8008d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d4a:	f003 0307 	and.w	r3, r3, #7
 8008d4e:	2b05      	cmp	r3, #5
 8008d50:	d838      	bhi.n	8008dc4 <UART_SetConfig+0x35c>
 8008d52:	a201      	add	r2, pc, #4	@ (adr r2, 8008d58 <UART_SetConfig+0x2f0>)
 8008d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d58:	08008d71 	.word	0x08008d71
 8008d5c:	08008d79 	.word	0x08008d79
 8008d60:	08008d81 	.word	0x08008d81
 8008d64:	08008d89 	.word	0x08008d89
 8008d68:	08008db5 	.word	0x08008db5
 8008d6c:	08008dbd 	.word	0x08008dbd
 8008d70:	2300      	movs	r3, #0
 8008d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d76:	e14a      	b.n	800900e <UART_SetConfig+0x5a6>
 8008d78:	2304      	movs	r3, #4
 8008d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d7e:	e146      	b.n	800900e <UART_SetConfig+0x5a6>
 8008d80:	2308      	movs	r3, #8
 8008d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d86:	e142      	b.n	800900e <UART_SetConfig+0x5a6>
 8008d88:	2310      	movs	r3, #16
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8e:	e13e      	b.n	800900e <UART_SetConfig+0x5a6>
 8008d90:	cfff69f3 	.word	0xcfff69f3
 8008d94:	58000c00 	.word	0x58000c00
 8008d98:	11fff4ff 	.word	0x11fff4ff
 8008d9c:	40011000 	.word	0x40011000
 8008da0:	58024400 	.word	0x58024400
 8008da4:	40004400 	.word	0x40004400
 8008da8:	40004800 	.word	0x40004800
 8008dac:	40004c00 	.word	0x40004c00
 8008db0:	40005000 	.word	0x40005000
 8008db4:	2320      	movs	r3, #32
 8008db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dba:	e128      	b.n	800900e <UART_SetConfig+0x5a6>
 8008dbc:	2340      	movs	r3, #64	@ 0x40
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dc2:	e124      	b.n	800900e <UART_SetConfig+0x5a6>
 8008dc4:	2380      	movs	r3, #128	@ 0x80
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dca:	e120      	b.n	800900e <UART_SetConfig+0x5a6>
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4acb      	ldr	r2, [pc, #812]	@ (8009100 <UART_SetConfig+0x698>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d176      	bne.n	8008ec4 <UART_SetConfig+0x45c>
 8008dd6:	4bcb      	ldr	r3, [pc, #812]	@ (8009104 <UART_SetConfig+0x69c>)
 8008dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dde:	2b28      	cmp	r3, #40	@ 0x28
 8008de0:	d86c      	bhi.n	8008ebc <UART_SetConfig+0x454>
 8008de2:	a201      	add	r2, pc, #4	@ (adr r2, 8008de8 <UART_SetConfig+0x380>)
 8008de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008de8:	08008e8d 	.word	0x08008e8d
 8008dec:	08008ebd 	.word	0x08008ebd
 8008df0:	08008ebd 	.word	0x08008ebd
 8008df4:	08008ebd 	.word	0x08008ebd
 8008df8:	08008ebd 	.word	0x08008ebd
 8008dfc:	08008ebd 	.word	0x08008ebd
 8008e00:	08008ebd 	.word	0x08008ebd
 8008e04:	08008ebd 	.word	0x08008ebd
 8008e08:	08008e95 	.word	0x08008e95
 8008e0c:	08008ebd 	.word	0x08008ebd
 8008e10:	08008ebd 	.word	0x08008ebd
 8008e14:	08008ebd 	.word	0x08008ebd
 8008e18:	08008ebd 	.word	0x08008ebd
 8008e1c:	08008ebd 	.word	0x08008ebd
 8008e20:	08008ebd 	.word	0x08008ebd
 8008e24:	08008ebd 	.word	0x08008ebd
 8008e28:	08008e9d 	.word	0x08008e9d
 8008e2c:	08008ebd 	.word	0x08008ebd
 8008e30:	08008ebd 	.word	0x08008ebd
 8008e34:	08008ebd 	.word	0x08008ebd
 8008e38:	08008ebd 	.word	0x08008ebd
 8008e3c:	08008ebd 	.word	0x08008ebd
 8008e40:	08008ebd 	.word	0x08008ebd
 8008e44:	08008ebd 	.word	0x08008ebd
 8008e48:	08008ea5 	.word	0x08008ea5
 8008e4c:	08008ebd 	.word	0x08008ebd
 8008e50:	08008ebd 	.word	0x08008ebd
 8008e54:	08008ebd 	.word	0x08008ebd
 8008e58:	08008ebd 	.word	0x08008ebd
 8008e5c:	08008ebd 	.word	0x08008ebd
 8008e60:	08008ebd 	.word	0x08008ebd
 8008e64:	08008ebd 	.word	0x08008ebd
 8008e68:	08008ead 	.word	0x08008ead
 8008e6c:	08008ebd 	.word	0x08008ebd
 8008e70:	08008ebd 	.word	0x08008ebd
 8008e74:	08008ebd 	.word	0x08008ebd
 8008e78:	08008ebd 	.word	0x08008ebd
 8008e7c:	08008ebd 	.word	0x08008ebd
 8008e80:	08008ebd 	.word	0x08008ebd
 8008e84:	08008ebd 	.word	0x08008ebd
 8008e88:	08008eb5 	.word	0x08008eb5
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e92:	e0bc      	b.n	800900e <UART_SetConfig+0x5a6>
 8008e94:	2304      	movs	r3, #4
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9a:	e0b8      	b.n	800900e <UART_SetConfig+0x5a6>
 8008e9c:	2308      	movs	r3, #8
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea2:	e0b4      	b.n	800900e <UART_SetConfig+0x5a6>
 8008ea4:	2310      	movs	r3, #16
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eaa:	e0b0      	b.n	800900e <UART_SetConfig+0x5a6>
 8008eac:	2320      	movs	r3, #32
 8008eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eb2:	e0ac      	b.n	800900e <UART_SetConfig+0x5a6>
 8008eb4:	2340      	movs	r3, #64	@ 0x40
 8008eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eba:	e0a8      	b.n	800900e <UART_SetConfig+0x5a6>
 8008ebc:	2380      	movs	r3, #128	@ 0x80
 8008ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ec2:	e0a4      	b.n	800900e <UART_SetConfig+0x5a6>
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a8f      	ldr	r2, [pc, #572]	@ (8009108 <UART_SetConfig+0x6a0>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d130      	bne.n	8008f30 <UART_SetConfig+0x4c8>
 8008ece:	4b8d      	ldr	r3, [pc, #564]	@ (8009104 <UART_SetConfig+0x69c>)
 8008ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ed2:	f003 0307 	and.w	r3, r3, #7
 8008ed6:	2b05      	cmp	r3, #5
 8008ed8:	d826      	bhi.n	8008f28 <UART_SetConfig+0x4c0>
 8008eda:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee0 <UART_SetConfig+0x478>)
 8008edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee0:	08008ef9 	.word	0x08008ef9
 8008ee4:	08008f01 	.word	0x08008f01
 8008ee8:	08008f09 	.word	0x08008f09
 8008eec:	08008f11 	.word	0x08008f11
 8008ef0:	08008f19 	.word	0x08008f19
 8008ef4:	08008f21 	.word	0x08008f21
 8008ef8:	2300      	movs	r3, #0
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efe:	e086      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f00:	2304      	movs	r3, #4
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f06:	e082      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f08:	2308      	movs	r3, #8
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0e:	e07e      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f10:	2310      	movs	r3, #16
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f16:	e07a      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f18:	2320      	movs	r3, #32
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1e:	e076      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f20:	2340      	movs	r3, #64	@ 0x40
 8008f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f26:	e072      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f28:	2380      	movs	r3, #128	@ 0x80
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2e:	e06e      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a75      	ldr	r2, [pc, #468]	@ (800910c <UART_SetConfig+0x6a4>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d130      	bne.n	8008f9c <UART_SetConfig+0x534>
 8008f3a:	4b72      	ldr	r3, [pc, #456]	@ (8009104 <UART_SetConfig+0x69c>)
 8008f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f3e:	f003 0307 	and.w	r3, r3, #7
 8008f42:	2b05      	cmp	r3, #5
 8008f44:	d826      	bhi.n	8008f94 <UART_SetConfig+0x52c>
 8008f46:	a201      	add	r2, pc, #4	@ (adr r2, 8008f4c <UART_SetConfig+0x4e4>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	08008f65 	.word	0x08008f65
 8008f50:	08008f6d 	.word	0x08008f6d
 8008f54:	08008f75 	.word	0x08008f75
 8008f58:	08008f7d 	.word	0x08008f7d
 8008f5c:	08008f85 	.word	0x08008f85
 8008f60:	08008f8d 	.word	0x08008f8d
 8008f64:	2300      	movs	r3, #0
 8008f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6a:	e050      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f6c:	2304      	movs	r3, #4
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f72:	e04c      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f74:	2308      	movs	r3, #8
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7a:	e048      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f7c:	2310      	movs	r3, #16
 8008f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f82:	e044      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f84:	2320      	movs	r3, #32
 8008f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8a:	e040      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f8c:	2340      	movs	r3, #64	@ 0x40
 8008f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f92:	e03c      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f94:	2380      	movs	r3, #128	@ 0x80
 8008f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9a:	e038      	b.n	800900e <UART_SetConfig+0x5a6>
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a5b      	ldr	r2, [pc, #364]	@ (8009110 <UART_SetConfig+0x6a8>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d130      	bne.n	8009008 <UART_SetConfig+0x5a0>
 8008fa6:	4b57      	ldr	r3, [pc, #348]	@ (8009104 <UART_SetConfig+0x69c>)
 8008fa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008faa:	f003 0307 	and.w	r3, r3, #7
 8008fae:	2b05      	cmp	r3, #5
 8008fb0:	d826      	bhi.n	8009000 <UART_SetConfig+0x598>
 8008fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb8 <UART_SetConfig+0x550>)
 8008fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb8:	08008fd1 	.word	0x08008fd1
 8008fbc:	08008fd9 	.word	0x08008fd9
 8008fc0:	08008fe1 	.word	0x08008fe1
 8008fc4:	08008fe9 	.word	0x08008fe9
 8008fc8:	08008ff1 	.word	0x08008ff1
 8008fcc:	08008ff9 	.word	0x08008ff9
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd6:	e01a      	b.n	800900e <UART_SetConfig+0x5a6>
 8008fd8:	2304      	movs	r3, #4
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fde:	e016      	b.n	800900e <UART_SetConfig+0x5a6>
 8008fe0:	2308      	movs	r3, #8
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe6:	e012      	b.n	800900e <UART_SetConfig+0x5a6>
 8008fe8:	2310      	movs	r3, #16
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fee:	e00e      	b.n	800900e <UART_SetConfig+0x5a6>
 8008ff0:	2320      	movs	r3, #32
 8008ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff6:	e00a      	b.n	800900e <UART_SetConfig+0x5a6>
 8008ff8:	2340      	movs	r3, #64	@ 0x40
 8008ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	e006      	b.n	800900e <UART_SetConfig+0x5a6>
 8009000:	2380      	movs	r3, #128	@ 0x80
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009006:	e002      	b.n	800900e <UART_SetConfig+0x5a6>
 8009008:	2380      	movs	r3, #128	@ 0x80
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a3f      	ldr	r2, [pc, #252]	@ (8009110 <UART_SetConfig+0x6a8>)
 8009014:	4293      	cmp	r3, r2
 8009016:	f040 80f8 	bne.w	800920a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800901a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800901e:	2b20      	cmp	r3, #32
 8009020:	dc46      	bgt.n	80090b0 <UART_SetConfig+0x648>
 8009022:	2b02      	cmp	r3, #2
 8009024:	f2c0 8082 	blt.w	800912c <UART_SetConfig+0x6c4>
 8009028:	3b02      	subs	r3, #2
 800902a:	2b1e      	cmp	r3, #30
 800902c:	d87e      	bhi.n	800912c <UART_SetConfig+0x6c4>
 800902e:	a201      	add	r2, pc, #4	@ (adr r2, 8009034 <UART_SetConfig+0x5cc>)
 8009030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009034:	080090b7 	.word	0x080090b7
 8009038:	0800912d 	.word	0x0800912d
 800903c:	080090bf 	.word	0x080090bf
 8009040:	0800912d 	.word	0x0800912d
 8009044:	0800912d 	.word	0x0800912d
 8009048:	0800912d 	.word	0x0800912d
 800904c:	080090cf 	.word	0x080090cf
 8009050:	0800912d 	.word	0x0800912d
 8009054:	0800912d 	.word	0x0800912d
 8009058:	0800912d 	.word	0x0800912d
 800905c:	0800912d 	.word	0x0800912d
 8009060:	0800912d 	.word	0x0800912d
 8009064:	0800912d 	.word	0x0800912d
 8009068:	0800912d 	.word	0x0800912d
 800906c:	080090df 	.word	0x080090df
 8009070:	0800912d 	.word	0x0800912d
 8009074:	0800912d 	.word	0x0800912d
 8009078:	0800912d 	.word	0x0800912d
 800907c:	0800912d 	.word	0x0800912d
 8009080:	0800912d 	.word	0x0800912d
 8009084:	0800912d 	.word	0x0800912d
 8009088:	0800912d 	.word	0x0800912d
 800908c:	0800912d 	.word	0x0800912d
 8009090:	0800912d 	.word	0x0800912d
 8009094:	0800912d 	.word	0x0800912d
 8009098:	0800912d 	.word	0x0800912d
 800909c:	0800912d 	.word	0x0800912d
 80090a0:	0800912d 	.word	0x0800912d
 80090a4:	0800912d 	.word	0x0800912d
 80090a8:	0800912d 	.word	0x0800912d
 80090ac:	0800911f 	.word	0x0800911f
 80090b0:	2b40      	cmp	r3, #64	@ 0x40
 80090b2:	d037      	beq.n	8009124 <UART_SetConfig+0x6bc>
 80090b4:	e03a      	b.n	800912c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80090b6:	f7fd fccb 	bl	8006a50 <HAL_RCCEx_GetD3PCLK1Freq>
 80090ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090bc:	e03c      	b.n	8009138 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fd fcda 	bl	8006a7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090cc:	e034      	b.n	8009138 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ce:	f107 0318 	add.w	r3, r7, #24
 80090d2:	4618      	mov	r0, r3
 80090d4:	f7fd fe26 	bl	8006d24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090d8:	69fb      	ldr	r3, [r7, #28]
 80090da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090dc:	e02c      	b.n	8009138 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090de:	4b09      	ldr	r3, [pc, #36]	@ (8009104 <UART_SetConfig+0x69c>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 0320 	and.w	r3, r3, #32
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d016      	beq.n	8009118 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090ea:	4b06      	ldr	r3, [pc, #24]	@ (8009104 <UART_SetConfig+0x69c>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	08db      	lsrs	r3, r3, #3
 80090f0:	f003 0303 	and.w	r3, r3, #3
 80090f4:	4a07      	ldr	r2, [pc, #28]	@ (8009114 <UART_SetConfig+0x6ac>)
 80090f6:	fa22 f303 	lsr.w	r3, r2, r3
 80090fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090fc:	e01c      	b.n	8009138 <UART_SetConfig+0x6d0>
 80090fe:	bf00      	nop
 8009100:	40011400 	.word	0x40011400
 8009104:	58024400 	.word	0x58024400
 8009108:	40007800 	.word	0x40007800
 800910c:	40007c00 	.word	0x40007c00
 8009110:	58000c00 	.word	0x58000c00
 8009114:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009118:	4b9d      	ldr	r3, [pc, #628]	@ (8009390 <UART_SetConfig+0x928>)
 800911a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800911c:	e00c      	b.n	8009138 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800911e:	4b9d      	ldr	r3, [pc, #628]	@ (8009394 <UART_SetConfig+0x92c>)
 8009120:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009122:	e009      	b.n	8009138 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009124:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009128:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800912a:	e005      	b.n	8009138 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800912c:	2300      	movs	r3, #0
 800912e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009136:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 81de 	beq.w	80094fc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009144:	4a94      	ldr	r2, [pc, #592]	@ (8009398 <UART_SetConfig+0x930>)
 8009146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800914a:	461a      	mov	r2, r3
 800914c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800914e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009152:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	4613      	mov	r3, r2
 800915a:	005b      	lsls	r3, r3, #1
 800915c:	4413      	add	r3, r2
 800915e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009160:	429a      	cmp	r2, r3
 8009162:	d305      	bcc.n	8009170 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800916a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800916c:	429a      	cmp	r2, r3
 800916e:	d903      	bls.n	8009178 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009176:	e1c1      	b.n	80094fc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800917a:	2200      	movs	r2, #0
 800917c:	60bb      	str	r3, [r7, #8]
 800917e:	60fa      	str	r2, [r7, #12]
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009184:	4a84      	ldr	r2, [pc, #528]	@ (8009398 <UART_SetConfig+0x930>)
 8009186:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800918a:	b29b      	uxth	r3, r3
 800918c:	2200      	movs	r2, #0
 800918e:	603b      	str	r3, [r7, #0]
 8009190:	607a      	str	r2, [r7, #4]
 8009192:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009196:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800919a:	f7f7 f8f9 	bl	8000390 <__aeabi_uldivmod>
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	4610      	mov	r0, r2
 80091a4:	4619      	mov	r1, r3
 80091a6:	f04f 0200 	mov.w	r2, #0
 80091aa:	f04f 0300 	mov.w	r3, #0
 80091ae:	020b      	lsls	r3, r1, #8
 80091b0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80091b4:	0202      	lsls	r2, r0, #8
 80091b6:	6979      	ldr	r1, [r7, #20]
 80091b8:	6849      	ldr	r1, [r1, #4]
 80091ba:	0849      	lsrs	r1, r1, #1
 80091bc:	2000      	movs	r0, #0
 80091be:	460c      	mov	r4, r1
 80091c0:	4605      	mov	r5, r0
 80091c2:	eb12 0804 	adds.w	r8, r2, r4
 80091c6:	eb43 0905 	adc.w	r9, r3, r5
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	469a      	mov	sl, r3
 80091d2:	4693      	mov	fp, r2
 80091d4:	4652      	mov	r2, sl
 80091d6:	465b      	mov	r3, fp
 80091d8:	4640      	mov	r0, r8
 80091da:	4649      	mov	r1, r9
 80091dc:	f7f7 f8d8 	bl	8000390 <__aeabi_uldivmod>
 80091e0:	4602      	mov	r2, r0
 80091e2:	460b      	mov	r3, r1
 80091e4:	4613      	mov	r3, r2
 80091e6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091ee:	d308      	bcc.n	8009202 <UART_SetConfig+0x79a>
 80091f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091f6:	d204      	bcs.n	8009202 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091fe:	60da      	str	r2, [r3, #12]
 8009200:	e17c      	b.n	80094fc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009202:	2301      	movs	r3, #1
 8009204:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009208:	e178      	b.n	80094fc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009212:	f040 80c5 	bne.w	80093a0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009216:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800921a:	2b20      	cmp	r3, #32
 800921c:	dc48      	bgt.n	80092b0 <UART_SetConfig+0x848>
 800921e:	2b00      	cmp	r3, #0
 8009220:	db7b      	blt.n	800931a <UART_SetConfig+0x8b2>
 8009222:	2b20      	cmp	r3, #32
 8009224:	d879      	bhi.n	800931a <UART_SetConfig+0x8b2>
 8009226:	a201      	add	r2, pc, #4	@ (adr r2, 800922c <UART_SetConfig+0x7c4>)
 8009228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800922c:	080092b7 	.word	0x080092b7
 8009230:	080092bf 	.word	0x080092bf
 8009234:	0800931b 	.word	0x0800931b
 8009238:	0800931b 	.word	0x0800931b
 800923c:	080092c7 	.word	0x080092c7
 8009240:	0800931b 	.word	0x0800931b
 8009244:	0800931b 	.word	0x0800931b
 8009248:	0800931b 	.word	0x0800931b
 800924c:	080092d7 	.word	0x080092d7
 8009250:	0800931b 	.word	0x0800931b
 8009254:	0800931b 	.word	0x0800931b
 8009258:	0800931b 	.word	0x0800931b
 800925c:	0800931b 	.word	0x0800931b
 8009260:	0800931b 	.word	0x0800931b
 8009264:	0800931b 	.word	0x0800931b
 8009268:	0800931b 	.word	0x0800931b
 800926c:	080092e7 	.word	0x080092e7
 8009270:	0800931b 	.word	0x0800931b
 8009274:	0800931b 	.word	0x0800931b
 8009278:	0800931b 	.word	0x0800931b
 800927c:	0800931b 	.word	0x0800931b
 8009280:	0800931b 	.word	0x0800931b
 8009284:	0800931b 	.word	0x0800931b
 8009288:	0800931b 	.word	0x0800931b
 800928c:	0800931b 	.word	0x0800931b
 8009290:	0800931b 	.word	0x0800931b
 8009294:	0800931b 	.word	0x0800931b
 8009298:	0800931b 	.word	0x0800931b
 800929c:	0800931b 	.word	0x0800931b
 80092a0:	0800931b 	.word	0x0800931b
 80092a4:	0800931b 	.word	0x0800931b
 80092a8:	0800931b 	.word	0x0800931b
 80092ac:	0800930d 	.word	0x0800930d
 80092b0:	2b40      	cmp	r3, #64	@ 0x40
 80092b2:	d02e      	beq.n	8009312 <UART_SetConfig+0x8aa>
 80092b4:	e031      	b.n	800931a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092b6:	f7fc f995 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 80092ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092bc:	e033      	b.n	8009326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80092be:	f7fc f9a7 	bl	8005610 <HAL_RCC_GetPCLK2Freq>
 80092c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092c4:	e02f      	b.n	8009326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fd fbd6 	bl	8006a7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092d4:	e027      	b.n	8009326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092d6:	f107 0318 	add.w	r3, r7, #24
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fd fd22 	bl	8006d24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092e4:	e01f      	b.n	8009326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092e6:	4b2d      	ldr	r3, [pc, #180]	@ (800939c <UART_SetConfig+0x934>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f003 0320 	and.w	r3, r3, #32
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d009      	beq.n	8009306 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092f2:	4b2a      	ldr	r3, [pc, #168]	@ (800939c <UART_SetConfig+0x934>)
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	08db      	lsrs	r3, r3, #3
 80092f8:	f003 0303 	and.w	r3, r3, #3
 80092fc:	4a24      	ldr	r2, [pc, #144]	@ (8009390 <UART_SetConfig+0x928>)
 80092fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009304:	e00f      	b.n	8009326 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009306:	4b22      	ldr	r3, [pc, #136]	@ (8009390 <UART_SetConfig+0x928>)
 8009308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800930a:	e00c      	b.n	8009326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800930c:	4b21      	ldr	r3, [pc, #132]	@ (8009394 <UART_SetConfig+0x92c>)
 800930e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009310:	e009      	b.n	8009326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009318:	e005      	b.n	8009326 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800931a:	2300      	movs	r3, #0
 800931c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009328:	2b00      	cmp	r3, #0
 800932a:	f000 80e7 	beq.w	80094fc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009332:	4a19      	ldr	r2, [pc, #100]	@ (8009398 <UART_SetConfig+0x930>)
 8009334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009338:	461a      	mov	r2, r3
 800933a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800933c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009340:	005a      	lsls	r2, r3, #1
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	085b      	lsrs	r3, r3, #1
 8009348:	441a      	add	r2, r3
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009352:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009356:	2b0f      	cmp	r3, #15
 8009358:	d916      	bls.n	8009388 <UART_SetConfig+0x920>
 800935a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009360:	d212      	bcs.n	8009388 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009364:	b29b      	uxth	r3, r3
 8009366:	f023 030f 	bic.w	r3, r3, #15
 800936a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800936c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936e:	085b      	lsrs	r3, r3, #1
 8009370:	b29b      	uxth	r3, r3
 8009372:	f003 0307 	and.w	r3, r3, #7
 8009376:	b29a      	uxth	r2, r3
 8009378:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800937a:	4313      	orrs	r3, r2
 800937c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009384:	60da      	str	r2, [r3, #12]
 8009386:	e0b9      	b.n	80094fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009388:	2301      	movs	r3, #1
 800938a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800938e:	e0b5      	b.n	80094fc <UART_SetConfig+0xa94>
 8009390:	03d09000 	.word	0x03d09000
 8009394:	003d0900 	.word	0x003d0900
 8009398:	0800abc0 	.word	0x0800abc0
 800939c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80093a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80093a4:	2b20      	cmp	r3, #32
 80093a6:	dc49      	bgt.n	800943c <UART_SetConfig+0x9d4>
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	db7c      	blt.n	80094a6 <UART_SetConfig+0xa3e>
 80093ac:	2b20      	cmp	r3, #32
 80093ae:	d87a      	bhi.n	80094a6 <UART_SetConfig+0xa3e>
 80093b0:	a201      	add	r2, pc, #4	@ (adr r2, 80093b8 <UART_SetConfig+0x950>)
 80093b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b6:	bf00      	nop
 80093b8:	08009443 	.word	0x08009443
 80093bc:	0800944b 	.word	0x0800944b
 80093c0:	080094a7 	.word	0x080094a7
 80093c4:	080094a7 	.word	0x080094a7
 80093c8:	08009453 	.word	0x08009453
 80093cc:	080094a7 	.word	0x080094a7
 80093d0:	080094a7 	.word	0x080094a7
 80093d4:	080094a7 	.word	0x080094a7
 80093d8:	08009463 	.word	0x08009463
 80093dc:	080094a7 	.word	0x080094a7
 80093e0:	080094a7 	.word	0x080094a7
 80093e4:	080094a7 	.word	0x080094a7
 80093e8:	080094a7 	.word	0x080094a7
 80093ec:	080094a7 	.word	0x080094a7
 80093f0:	080094a7 	.word	0x080094a7
 80093f4:	080094a7 	.word	0x080094a7
 80093f8:	08009473 	.word	0x08009473
 80093fc:	080094a7 	.word	0x080094a7
 8009400:	080094a7 	.word	0x080094a7
 8009404:	080094a7 	.word	0x080094a7
 8009408:	080094a7 	.word	0x080094a7
 800940c:	080094a7 	.word	0x080094a7
 8009410:	080094a7 	.word	0x080094a7
 8009414:	080094a7 	.word	0x080094a7
 8009418:	080094a7 	.word	0x080094a7
 800941c:	080094a7 	.word	0x080094a7
 8009420:	080094a7 	.word	0x080094a7
 8009424:	080094a7 	.word	0x080094a7
 8009428:	080094a7 	.word	0x080094a7
 800942c:	080094a7 	.word	0x080094a7
 8009430:	080094a7 	.word	0x080094a7
 8009434:	080094a7 	.word	0x080094a7
 8009438:	08009499 	.word	0x08009499
 800943c:	2b40      	cmp	r3, #64	@ 0x40
 800943e:	d02e      	beq.n	800949e <UART_SetConfig+0xa36>
 8009440:	e031      	b.n	80094a6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009442:	f7fc f8cf 	bl	80055e4 <HAL_RCC_GetPCLK1Freq>
 8009446:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009448:	e033      	b.n	80094b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800944a:	f7fc f8e1 	bl	8005610 <HAL_RCC_GetPCLK2Freq>
 800944e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009450:	e02f      	b.n	80094b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009456:	4618      	mov	r0, r3
 8009458:	f7fd fb10 	bl	8006a7c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800945c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800945e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009460:	e027      	b.n	80094b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009462:	f107 0318 	add.w	r3, r7, #24
 8009466:	4618      	mov	r0, r3
 8009468:	f7fd fc5c 	bl	8006d24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009470:	e01f      	b.n	80094b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009472:	4b2d      	ldr	r3, [pc, #180]	@ (8009528 <UART_SetConfig+0xac0>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f003 0320 	and.w	r3, r3, #32
 800947a:	2b00      	cmp	r3, #0
 800947c:	d009      	beq.n	8009492 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800947e:	4b2a      	ldr	r3, [pc, #168]	@ (8009528 <UART_SetConfig+0xac0>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	08db      	lsrs	r3, r3, #3
 8009484:	f003 0303 	and.w	r3, r3, #3
 8009488:	4a28      	ldr	r2, [pc, #160]	@ (800952c <UART_SetConfig+0xac4>)
 800948a:	fa22 f303 	lsr.w	r3, r2, r3
 800948e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009490:	e00f      	b.n	80094b2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009492:	4b26      	ldr	r3, [pc, #152]	@ (800952c <UART_SetConfig+0xac4>)
 8009494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009496:	e00c      	b.n	80094b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009498:	4b25      	ldr	r3, [pc, #148]	@ (8009530 <UART_SetConfig+0xac8>)
 800949a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800949c:	e009      	b.n	80094b2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800949e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094a4:	e005      	b.n	80094b2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80094aa:	2301      	movs	r3, #1
 80094ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80094b0:	bf00      	nop
    }

    if (pclk != 0U)
 80094b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d021      	beq.n	80094fc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009534 <UART_SetConfig+0xacc>)
 80094be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094c2:	461a      	mov	r2, r3
 80094c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80094ca:	697b      	ldr	r3, [r7, #20]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	085b      	lsrs	r3, r3, #1
 80094d0:	441a      	add	r2, r3
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	685b      	ldr	r3, [r3, #4]
 80094d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094da:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094de:	2b0f      	cmp	r3, #15
 80094e0:	d909      	bls.n	80094f6 <UART_SetConfig+0xa8e>
 80094e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094e8:	d205      	bcs.n	80094f6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60da      	str	r2, [r3, #12]
 80094f4:	e002      	b.n	80094fc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80094f6:	2301      	movs	r3, #1
 80094f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	2201      	movs	r2, #1
 8009500:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	2201      	movs	r2, #1
 8009508:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	2200      	movs	r2, #0
 8009510:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	2200      	movs	r2, #0
 8009516:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009518:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800951c:	4618      	mov	r0, r3
 800951e:	3748      	adds	r7, #72	@ 0x48
 8009520:	46bd      	mov	sp, r7
 8009522:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009526:	bf00      	nop
 8009528:	58024400 	.word	0x58024400
 800952c:	03d09000 	.word	0x03d09000
 8009530:	003d0900 	.word	0x003d0900
 8009534:	0800abc0 	.word	0x0800abc0

08009538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009544:	f003 0308 	and.w	r3, r3, #8
 8009548:	2b00      	cmp	r3, #0
 800954a:	d00a      	beq.n	8009562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	430a      	orrs	r2, r1
 8009560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	2b00      	cmp	r3, #0
 800956c:	d00a      	beq.n	8009584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	430a      	orrs	r2, r1
 8009582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009588:	f003 0302 	and.w	r3, r3, #2
 800958c:	2b00      	cmp	r3, #0
 800958e:	d00a      	beq.n	80095a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	430a      	orrs	r2, r1
 80095a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095aa:	f003 0304 	and.w	r3, r3, #4
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d00a      	beq.n	80095c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	685b      	ldr	r3, [r3, #4]
 80095b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	430a      	orrs	r2, r1
 80095c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095cc:	f003 0310 	and.w	r3, r3, #16
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d00a      	beq.n	80095ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	430a      	orrs	r2, r1
 80095e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00a      	beq.n	800960c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	430a      	orrs	r2, r1
 800960a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009614:	2b00      	cmp	r3, #0
 8009616:	d01a      	beq.n	800964e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	430a      	orrs	r2, r1
 800962c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009632:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009636:	d10a      	bne.n	800964e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00a      	beq.n	8009670 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	685b      	ldr	r3, [r3, #4]
 8009660:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	430a      	orrs	r2, r1
 800966e:	605a      	str	r2, [r3, #4]
  }
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b098      	sub	sp, #96	@ 0x60
 8009680:	af02      	add	r7, sp, #8
 8009682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800968c:	f7f8 fd02 	bl	8002094 <HAL_GetTick>
 8009690:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f003 0308 	and.w	r3, r3, #8
 800969c:	2b08      	cmp	r3, #8
 800969e:	d12f      	bne.n	8009700 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096a8:	2200      	movs	r2, #0
 80096aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f88e 	bl	80097d0 <UART_WaitOnFlagUntilTimeout>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d022      	beq.n	8009700 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096c2:	e853 3f00 	ldrex	r3, [r3]
 80096c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	461a      	mov	r2, r3
 80096d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80096da:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096e0:	e841 2300 	strex	r3, r2, [r1]
 80096e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d1e6      	bne.n	80096ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2220      	movs	r2, #32
 80096f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096fc:	2303      	movs	r3, #3
 80096fe:	e063      	b.n	80097c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f003 0304 	and.w	r3, r3, #4
 800970a:	2b04      	cmp	r3, #4
 800970c:	d149      	bne.n	80097a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800970e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009712:	9300      	str	r3, [sp, #0]
 8009714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009716:	2200      	movs	r2, #0
 8009718:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f857 	bl	80097d0 <UART_WaitOnFlagUntilTimeout>
 8009722:	4603      	mov	r3, r0
 8009724:	2b00      	cmp	r3, #0
 8009726:	d03c      	beq.n	80097a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009730:	e853 3f00 	ldrex	r3, [r3]
 8009734:	623b      	str	r3, [r7, #32]
   return(result);
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800973c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009746:	633b      	str	r3, [r7, #48]	@ 0x30
 8009748:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800974c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800974e:	e841 2300 	strex	r3, r2, [r1]
 8009752:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009756:	2b00      	cmp	r3, #0
 8009758:	d1e6      	bne.n	8009728 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3308      	adds	r3, #8
 8009760:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	e853 3f00 	ldrex	r3, [r3]
 8009768:	60fb      	str	r3, [r7, #12]
   return(result);
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f023 0301 	bic.w	r3, r3, #1
 8009770:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3308      	adds	r3, #8
 8009778:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800977a:	61fa      	str	r2, [r7, #28]
 800977c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977e:	69b9      	ldr	r1, [r7, #24]
 8009780:	69fa      	ldr	r2, [r7, #28]
 8009782:	e841 2300 	strex	r3, r2, [r1]
 8009786:	617b      	str	r3, [r7, #20]
   return(result);
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1e5      	bne.n	800975a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2220      	movs	r2, #32
 8009792:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e012      	b.n	80097c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2220      	movs	r2, #32
 80097a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2220      	movs	r2, #32
 80097ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2200      	movs	r2, #0
 80097bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3758      	adds	r7, #88	@ 0x58
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	4613      	mov	r3, r2
 80097de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097e0:	e04f      	b.n	8009882 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097e8:	d04b      	beq.n	8009882 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ea:	f7f8 fc53 	bl	8002094 <HAL_GetTick>
 80097ee:	4602      	mov	r2, r0
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	69ba      	ldr	r2, [r7, #24]
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d302      	bcc.n	8009800 <UART_WaitOnFlagUntilTimeout+0x30>
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d101      	bne.n	8009804 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009800:	2303      	movs	r3, #3
 8009802:	e04e      	b.n	80098a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f003 0304 	and.w	r3, r3, #4
 800980e:	2b00      	cmp	r3, #0
 8009810:	d037      	beq.n	8009882 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2b80      	cmp	r3, #128	@ 0x80
 8009816:	d034      	beq.n	8009882 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2b40      	cmp	r3, #64	@ 0x40
 800981c:	d031      	beq.n	8009882 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	69db      	ldr	r3, [r3, #28]
 8009824:	f003 0308 	and.w	r3, r3, #8
 8009828:	2b08      	cmp	r3, #8
 800982a:	d110      	bne.n	800984e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2208      	movs	r2, #8
 8009832:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 f839 	bl	80098ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2208      	movs	r2, #8
 800983e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2200      	movs	r2, #0
 8009846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e029      	b.n	80098a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800985c:	d111      	bne.n	8009882 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 f81f 	bl	80098ac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	2220      	movs	r2, #32
 8009872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	2200      	movs	r2, #0
 800987a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800987e:	2303      	movs	r3, #3
 8009880:	e00f      	b.n	80098a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	69da      	ldr	r2, [r3, #28]
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	4013      	ands	r3, r2
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	429a      	cmp	r2, r3
 8009890:	bf0c      	ite	eq
 8009892:	2301      	moveq	r3, #1
 8009894:	2300      	movne	r3, #0
 8009896:	b2db      	uxtb	r3, r3
 8009898:	461a      	mov	r2, r3
 800989a:	79fb      	ldrb	r3, [r7, #7]
 800989c:	429a      	cmp	r2, r3
 800989e:	d0a0      	beq.n	80097e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
	...

080098ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b095      	sub	sp, #84	@ 0x54
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098bc:	e853 3f00 	ldrex	r3, [r3]
 80098c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80098d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098da:	e841 2300 	strex	r3, r2, [r1]
 80098de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1e6      	bne.n	80098b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	3308      	adds	r3, #8
 80098ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80098f6:	69fa      	ldr	r2, [r7, #28]
 80098f8:	4b1e      	ldr	r3, [pc, #120]	@ (8009974 <UART_EndRxTransfer+0xc8>)
 80098fa:	4013      	ands	r3, r2
 80098fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	3308      	adds	r3, #8
 8009904:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009906:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009908:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800990c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e5      	bne.n	80098e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800991e:	2b01      	cmp	r3, #1
 8009920:	d118      	bne.n	8009954 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	e853 3f00 	ldrex	r3, [r3]
 800992e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	f023 0310 	bic.w	r3, r3, #16
 8009936:	647b      	str	r3, [r7, #68]	@ 0x44
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	461a      	mov	r2, r3
 800993e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009940:	61bb      	str	r3, [r7, #24]
 8009942:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009944:	6979      	ldr	r1, [r7, #20]
 8009946:	69ba      	ldr	r2, [r7, #24]
 8009948:	e841 2300 	strex	r3, r2, [r1]
 800994c:	613b      	str	r3, [r7, #16]
   return(result);
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d1e6      	bne.n	8009922 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2220      	movs	r2, #32
 8009958:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2200      	movs	r2, #0
 8009960:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2200      	movs	r2, #0
 8009966:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009968:	bf00      	nop
 800996a:	3754      	adds	r7, #84	@ 0x54
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr
 8009974:	effffffe 	.word	0xeffffffe

08009978 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009978:	b480      	push	{r7}
 800997a:	b085      	sub	sp, #20
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009986:	2b01      	cmp	r3, #1
 8009988:	d101      	bne.n	800998e <HAL_UARTEx_DisableFifoMode+0x16>
 800998a:	2302      	movs	r3, #2
 800998c:	e027      	b.n	80099de <HAL_UARTEx_DisableFifoMode+0x66>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2224      	movs	r2, #36	@ 0x24
 800999a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f022 0201 	bic.w	r2, r2, #1
 80099b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80099bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68fa      	ldr	r2, [r7, #12]
 80099ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2220      	movs	r2, #32
 80099d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3714      	adds	r7, #20
 80099e2:	46bd      	mov	sp, r7
 80099e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e8:	4770      	bx	lr

080099ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b084      	sub	sp, #16
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d101      	bne.n	8009a02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80099fe:	2302      	movs	r3, #2
 8009a00:	e02d      	b.n	8009a5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	2201      	movs	r2, #1
 8009a06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	2224      	movs	r2, #36	@ 0x24
 8009a0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f022 0201 	bic.w	r2, r2, #1
 8009a28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	683a      	ldr	r2, [r7, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f850 	bl	8009ae4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2200      	movs	r2, #0
 8009a58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3710      	adds	r7, #16
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b084      	sub	sp, #16
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d101      	bne.n	8009a7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	e02d      	b.n	8009ada <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2224      	movs	r2, #36	@ 0x24
 8009a8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f022 0201 	bic.w	r2, r2, #1
 8009aa4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	683a      	ldr	r2, [r7, #0]
 8009ab6:	430a      	orrs	r2, r1
 8009ab8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f000 f812 	bl	8009ae4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2220      	movs	r2, #32
 8009acc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
	...

08009ae4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b085      	sub	sp, #20
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d108      	bne.n	8009b06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009b04:	e031      	b.n	8009b6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009b06:	2310      	movs	r3, #16
 8009b08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009b0a:	2310      	movs	r3, #16
 8009b0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	689b      	ldr	r3, [r3, #8]
 8009b14:	0e5b      	lsrs	r3, r3, #25
 8009b16:	b2db      	uxtb	r3, r3
 8009b18:	f003 0307 	and.w	r3, r3, #7
 8009b1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	0f5b      	lsrs	r3, r3, #29
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f003 0307 	and.w	r3, r3, #7
 8009b2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b2e:	7bbb      	ldrb	r3, [r7, #14]
 8009b30:	7b3a      	ldrb	r2, [r7, #12]
 8009b32:	4911      	ldr	r1, [pc, #68]	@ (8009b78 <UARTEx_SetNbDataToProcess+0x94>)
 8009b34:	5c8a      	ldrb	r2, [r1, r2]
 8009b36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b3a:	7b3a      	ldrb	r2, [r7, #12]
 8009b3c:	490f      	ldr	r1, [pc, #60]	@ (8009b7c <UARTEx_SetNbDataToProcess+0x98>)
 8009b3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b40:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b4c:	7bfb      	ldrb	r3, [r7, #15]
 8009b4e:	7b7a      	ldrb	r2, [r7, #13]
 8009b50:	4909      	ldr	r1, [pc, #36]	@ (8009b78 <UARTEx_SetNbDataToProcess+0x94>)
 8009b52:	5c8a      	ldrb	r2, [r1, r2]
 8009b54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b58:	7b7a      	ldrb	r2, [r7, #13]
 8009b5a:	4908      	ldr	r1, [pc, #32]	@ (8009b7c <UARTEx_SetNbDataToProcess+0x98>)
 8009b5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009b6a:	bf00      	nop
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	0800abd8 	.word	0x0800abd8
 8009b7c:	0800abe0 	.word	0x0800abe0

08009b80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b80:	b084      	sub	sp, #16
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b084      	sub	sp, #16
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	f107 001c 	add.w	r0, r7, #28
 8009b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009b96:	2b01      	cmp	r3, #1
 8009b98:	d121      	bne.n	8009bde <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68da      	ldr	r2, [r3, #12]
 8009baa:	4b2c      	ldr	r3, [pc, #176]	@ (8009c5c <USB_CoreInit+0xdc>)
 8009bac:	4013      	ands	r3, r2
 8009bae:	687a      	ldr	r2, [r7, #4]
 8009bb0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009bbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d105      	bne.n	8009bd2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 faaa 	bl	800a12c <USB_CoreReset>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73fb      	strb	r3, [r7, #15]
 8009bdc:	e01b      	b.n	8009c16 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009bea:	6878      	ldr	r0, [r7, #4]
 8009bec:	f000 fa9e 	bl	800a12c <USB_CoreReset>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009bf4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d106      	bne.n	8009c0a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	639a      	str	r2, [r3, #56]	@ 0x38
 8009c08:	e005      	b.n	8009c16 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c0e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009c16:	7fbb      	ldrb	r3, [r7, #30]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d116      	bne.n	8009c4a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c20:	b29a      	uxth	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c60 <USB_CoreInit+0xe0>)
 8009c2c:	4313      	orrs	r3, r2
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	689b      	ldr	r3, [r3, #8]
 8009c36:	f043 0206 	orr.w	r2, r3, #6
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	f043 0220 	orr.w	r2, r3, #32
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3710      	adds	r7, #16
 8009c50:	46bd      	mov	sp, r7
 8009c52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c56:	b004      	add	sp, #16
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	ffbdffbf 	.word	0xffbdffbf
 8009c60:	03ee0000 	.word	0x03ee0000

08009c64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	f023 0201 	bic.w	r2, r3, #1
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr

08009c86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b084      	sub	sp, #16
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	460b      	mov	r3, r1
 8009c90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009c92:	2300      	movs	r3, #0
 8009c94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009ca2:	78fb      	ldrb	r3, [r7, #3]
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d115      	bne.n	8009cd4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009cb4:	200a      	movs	r0, #10
 8009cb6:	f7f8 f9f9 	bl	80020ac <HAL_Delay>
      ms += 10U;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	330a      	adds	r3, #10
 8009cbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f000 fa25 	bl	800a110 <USB_GetMode>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	2b01      	cmp	r3, #1
 8009cca:	d01e      	beq.n	8009d0a <USB_SetCurrentMode+0x84>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2bc7      	cmp	r3, #199	@ 0xc7
 8009cd0:	d9f0      	bls.n	8009cb4 <USB_SetCurrentMode+0x2e>
 8009cd2:	e01a      	b.n	8009d0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009cd4:	78fb      	ldrb	r3, [r7, #3]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d115      	bne.n	8009d06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009ce6:	200a      	movs	r0, #10
 8009ce8:	f7f8 f9e0 	bl	80020ac <HAL_Delay>
      ms += 10U;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	330a      	adds	r3, #10
 8009cf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fa0c 	bl	800a110 <USB_GetMode>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d005      	beq.n	8009d0a <USB_SetCurrentMode+0x84>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2bc7      	cmp	r3, #199	@ 0xc7
 8009d02:	d9f0      	bls.n	8009ce6 <USB_SetCurrentMode+0x60>
 8009d04:	e001      	b.n	8009d0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e005      	b.n	8009d16 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2bc8      	cmp	r3, #200	@ 0xc8
 8009d0e:	d101      	bne.n	8009d14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e000      	b.n	8009d16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3710      	adds	r7, #16
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
	...

08009d20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d20:	b084      	sub	sp, #16
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	613b      	str	r3, [r7, #16]
 8009d3e:	e009      	b.n	8009d54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009d40:	687a      	ldr	r2, [r7, #4]
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	3340      	adds	r3, #64	@ 0x40
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	4413      	add	r3, r2
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	3301      	adds	r3, #1
 8009d52:	613b      	str	r3, [r7, #16]
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	2b0e      	cmp	r3, #14
 8009d58:	d9f2      	bls.n	8009d40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d11c      	bne.n	8009d9c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d70:	f043 0302 	orr.w	r3, r3, #2
 8009d74:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d7a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	e005      	b.n	8009da8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009dae:	461a      	mov	r2, r3
 8009db0:	2300      	movs	r3, #0
 8009db2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009db4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d10d      	bne.n	8009dd8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d104      	bne.n	8009dce <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f968 	bl	800a09c <USB_SetDevSpeed>
 8009dcc:	e008      	b.n	8009de0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009dce:	2101      	movs	r1, #1
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f963 	bl	800a09c <USB_SetDevSpeed>
 8009dd6:	e003      	b.n	8009de0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009dd8:	2103      	movs	r1, #3
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f95e 	bl	800a09c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009de0:	2110      	movs	r1, #16
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f8fa 	bl	8009fdc <USB_FlushTxFifo>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d001      	beq.n	8009df2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009dee:	2301      	movs	r3, #1
 8009df0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f924 	bl	800a040 <USB_FlushRxFifo>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e08:	461a      	mov	r2, r3
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e14:	461a      	mov	r2, r3
 8009e16:	2300      	movs	r3, #0
 8009e18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e20:	461a      	mov	r2, r3
 8009e22:	2300      	movs	r3, #0
 8009e24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e26:	2300      	movs	r3, #0
 8009e28:	613b      	str	r3, [r7, #16]
 8009e2a:	e043      	b.n	8009eb4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e42:	d118      	bne.n	8009e76 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d10a      	bne.n	8009e60 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	015a      	lsls	r2, r3, #5
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e56:	461a      	mov	r2, r3
 8009e58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e5c:	6013      	str	r3, [r2, #0]
 8009e5e:	e013      	b.n	8009e88 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	015a      	lsls	r2, r3, #5
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009e72:	6013      	str	r3, [r2, #0]
 8009e74:	e008      	b.n	8009e88 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e82:	461a      	mov	r2, r3
 8009e84:	2300      	movs	r3, #0
 8009e86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	015a      	lsls	r2, r3, #5
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	4413      	add	r3, r2
 8009e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e94:	461a      	mov	r2, r3
 8009e96:	2300      	movs	r3, #0
 8009e98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	015a      	lsls	r2, r3, #5
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009eac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	3301      	adds	r3, #1
 8009eb2:	613b      	str	r3, [r7, #16]
 8009eb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009eb8:	461a      	mov	r2, r3
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d3b5      	bcc.n	8009e2c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	613b      	str	r3, [r7, #16]
 8009ec4:	e043      	b.n	8009f4e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009edc:	d118      	bne.n	8009f10 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10a      	bne.n	8009efa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	015a      	lsls	r2, r3, #5
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	e013      	b.n	8009f22 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	015a      	lsls	r2, r3, #5
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	4413      	add	r3, r2
 8009f02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f06:	461a      	mov	r2, r3
 8009f08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009f0c:	6013      	str	r3, [r2, #0]
 8009f0e:	e008      	b.n	8009f22 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	2300      	movs	r3, #0
 8009f20:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f2e:	461a      	mov	r2, r3
 8009f30:	2300      	movs	r3, #0
 8009f32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	015a      	lsls	r2, r3, #5
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	4413      	add	r3, r2
 8009f3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f40:	461a      	mov	r2, r3
 8009f42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009f46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	613b      	str	r3, [r7, #16]
 8009f4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009f52:	461a      	mov	r2, r3
 8009f54:	693b      	ldr	r3, [r7, #16]
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d3b5      	bcc.n	8009ec6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f6c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009f7a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009f7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d105      	bne.n	8009f90 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	f043 0210 	orr.w	r2, r3, #16
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	699a      	ldr	r2, [r3, #24]
 8009f94:	4b0f      	ldr	r3, [pc, #60]	@ (8009fd4 <USB_DevInit+0x2b4>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009f9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d005      	beq.n	8009fb0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	f043 0208 	orr.w	r2, r3, #8
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009fb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d105      	bne.n	8009fc4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	699a      	ldr	r2, [r3, #24]
 8009fbc:	4b06      	ldr	r3, [pc, #24]	@ (8009fd8 <USB_DevInit+0x2b8>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fd0:	b004      	add	sp, #16
 8009fd2:	4770      	bx	lr
 8009fd4:	803c3800 	.word	0x803c3800
 8009fd8:	40000004 	.word	0x40000004

08009fdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	3301      	adds	r3, #1
 8009fee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009ff6:	d901      	bls.n	8009ffc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e01b      	b.n	800a034 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	2b00      	cmp	r3, #0
 800a002:	daf2      	bge.n	8009fea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a004:	2300      	movs	r3, #0
 800a006:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	019b      	lsls	r3, r3, #6
 800a00c:	f043 0220 	orr.w	r2, r3, #32
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	3301      	adds	r3, #1
 800a018:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a020:	d901      	bls.n	800a026 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a022:	2303      	movs	r3, #3
 800a024:	e006      	b.n	800a034 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	691b      	ldr	r3, [r3, #16]
 800a02a:	f003 0320 	and.w	r3, r3, #32
 800a02e:	2b20      	cmp	r3, #32
 800a030:	d0f0      	beq.n	800a014 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	3301      	adds	r3, #1
 800a050:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a058:	d901      	bls.n	800a05e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e018      	b.n	800a090 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	691b      	ldr	r3, [r3, #16]
 800a062:	2b00      	cmp	r3, #0
 800a064:	daf2      	bge.n	800a04c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a066:	2300      	movs	r3, #0
 800a068:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2210      	movs	r2, #16
 800a06e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	3301      	adds	r3, #1
 800a074:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a07c:	d901      	bls.n	800a082 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e006      	b.n	800a090 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	691b      	ldr	r3, [r3, #16]
 800a086:	f003 0310 	and.w	r3, r3, #16
 800a08a:	2b10      	cmp	r3, #16
 800a08c:	d0f0      	beq.n	800a070 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a08e:	2300      	movs	r3, #0
}
 800a090:	4618      	mov	r0, r3
 800a092:	3714      	adds	r7, #20
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	460b      	mov	r3, r1
 800a0a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	78fb      	ldrb	r3, [r7, #3]
 800a0b6:	68f9      	ldr	r1, [r7, #12]
 800a0b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a0c0:	2300      	movs	r3, #0
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3714      	adds	r7, #20
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b085      	sub	sp, #20
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a0e8:	f023 0303 	bic.w	r3, r3, #3
 800a0ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0fc:	f043 0302 	orr.w	r3, r3, #2
 800a100:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a102:	2300      	movs	r3, #0
}
 800a104:	4618      	mov	r0, r3
 800a106:	3714      	adds	r7, #20
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	695b      	ldr	r3, [r3, #20]
 800a11c:	f003 0301 	and.w	r3, r3, #1
}
 800a120:	4618      	mov	r0, r3
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a12c:	b480      	push	{r7}
 800a12e:	b085      	sub	sp, #20
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3301      	adds	r3, #1
 800a13c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a144:	d901      	bls.n	800a14a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e01b      	b.n	800a182 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	daf2      	bge.n	800a138 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a152:	2300      	movs	r3, #0
 800a154:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	f043 0201 	orr.w	r2, r3, #1
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	3301      	adds	r3, #1
 800a166:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a16e:	d901      	bls.n	800a174 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e006      	b.n	800a182 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d0f0      	beq.n	800a162 <USB_CoreReset+0x36>

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr
	...

0800a190 <siprintf>:
 800a190:	b40e      	push	{r1, r2, r3}
 800a192:	b510      	push	{r4, lr}
 800a194:	b09d      	sub	sp, #116	@ 0x74
 800a196:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a198:	9002      	str	r0, [sp, #8]
 800a19a:	9006      	str	r0, [sp, #24]
 800a19c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a1a0:	480a      	ldr	r0, [pc, #40]	@ (800a1cc <siprintf+0x3c>)
 800a1a2:	9107      	str	r1, [sp, #28]
 800a1a4:	9104      	str	r1, [sp, #16]
 800a1a6:	490a      	ldr	r1, [pc, #40]	@ (800a1d0 <siprintf+0x40>)
 800a1a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ac:	9105      	str	r1, [sp, #20]
 800a1ae:	2400      	movs	r4, #0
 800a1b0:	a902      	add	r1, sp, #8
 800a1b2:	6800      	ldr	r0, [r0, #0]
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a1b8:	f000 f994 	bl	800a4e4 <_svfiprintf_r>
 800a1bc:	9b02      	ldr	r3, [sp, #8]
 800a1be:	701c      	strb	r4, [r3, #0]
 800a1c0:	b01d      	add	sp, #116	@ 0x74
 800a1c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1c6:	b003      	add	sp, #12
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	24000014 	.word	0x24000014
 800a1d0:	ffff0208 	.word	0xffff0208

0800a1d4 <memset>:
 800a1d4:	4402      	add	r2, r0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d100      	bne.n	800a1de <memset+0xa>
 800a1dc:	4770      	bx	lr
 800a1de:	f803 1b01 	strb.w	r1, [r3], #1
 800a1e2:	e7f9      	b.n	800a1d8 <memset+0x4>

0800a1e4 <__errno>:
 800a1e4:	4b01      	ldr	r3, [pc, #4]	@ (800a1ec <__errno+0x8>)
 800a1e6:	6818      	ldr	r0, [r3, #0]
 800a1e8:	4770      	bx	lr
 800a1ea:	bf00      	nop
 800a1ec:	24000014 	.word	0x24000014

0800a1f0 <__libc_init_array>:
 800a1f0:	b570      	push	{r4, r5, r6, lr}
 800a1f2:	4d0d      	ldr	r5, [pc, #52]	@ (800a228 <__libc_init_array+0x38>)
 800a1f4:	4c0d      	ldr	r4, [pc, #52]	@ (800a22c <__libc_init_array+0x3c>)
 800a1f6:	1b64      	subs	r4, r4, r5
 800a1f8:	10a4      	asrs	r4, r4, #2
 800a1fa:	2600      	movs	r6, #0
 800a1fc:	42a6      	cmp	r6, r4
 800a1fe:	d109      	bne.n	800a214 <__libc_init_array+0x24>
 800a200:	4d0b      	ldr	r5, [pc, #44]	@ (800a230 <__libc_init_array+0x40>)
 800a202:	4c0c      	ldr	r4, [pc, #48]	@ (800a234 <__libc_init_array+0x44>)
 800a204:	f000 fc64 	bl	800aad0 <_init>
 800a208:	1b64      	subs	r4, r4, r5
 800a20a:	10a4      	asrs	r4, r4, #2
 800a20c:	2600      	movs	r6, #0
 800a20e:	42a6      	cmp	r6, r4
 800a210:	d105      	bne.n	800a21e <__libc_init_array+0x2e>
 800a212:	bd70      	pop	{r4, r5, r6, pc}
 800a214:	f855 3b04 	ldr.w	r3, [r5], #4
 800a218:	4798      	blx	r3
 800a21a:	3601      	adds	r6, #1
 800a21c:	e7ee      	b.n	800a1fc <__libc_init_array+0xc>
 800a21e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a222:	4798      	blx	r3
 800a224:	3601      	adds	r6, #1
 800a226:	e7f2      	b.n	800a20e <__libc_init_array+0x1e>
 800a228:	0800ac24 	.word	0x0800ac24
 800a22c:	0800ac24 	.word	0x0800ac24
 800a230:	0800ac24 	.word	0x0800ac24
 800a234:	0800ac28 	.word	0x0800ac28

0800a238 <__retarget_lock_acquire_recursive>:
 800a238:	4770      	bx	lr

0800a23a <__retarget_lock_release_recursive>:
 800a23a:	4770      	bx	lr

0800a23c <_free_r>:
 800a23c:	b538      	push	{r3, r4, r5, lr}
 800a23e:	4605      	mov	r5, r0
 800a240:	2900      	cmp	r1, #0
 800a242:	d041      	beq.n	800a2c8 <_free_r+0x8c>
 800a244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a248:	1f0c      	subs	r4, r1, #4
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	bfb8      	it	lt
 800a24e:	18e4      	addlt	r4, r4, r3
 800a250:	f000 f8e0 	bl	800a414 <__malloc_lock>
 800a254:	4a1d      	ldr	r2, [pc, #116]	@ (800a2cc <_free_r+0x90>)
 800a256:	6813      	ldr	r3, [r2, #0]
 800a258:	b933      	cbnz	r3, 800a268 <_free_r+0x2c>
 800a25a:	6063      	str	r3, [r4, #4]
 800a25c:	6014      	str	r4, [r2, #0]
 800a25e:	4628      	mov	r0, r5
 800a260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a264:	f000 b8dc 	b.w	800a420 <__malloc_unlock>
 800a268:	42a3      	cmp	r3, r4
 800a26a:	d908      	bls.n	800a27e <_free_r+0x42>
 800a26c:	6820      	ldr	r0, [r4, #0]
 800a26e:	1821      	adds	r1, r4, r0
 800a270:	428b      	cmp	r3, r1
 800a272:	bf01      	itttt	eq
 800a274:	6819      	ldreq	r1, [r3, #0]
 800a276:	685b      	ldreq	r3, [r3, #4]
 800a278:	1809      	addeq	r1, r1, r0
 800a27a:	6021      	streq	r1, [r4, #0]
 800a27c:	e7ed      	b.n	800a25a <_free_r+0x1e>
 800a27e:	461a      	mov	r2, r3
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	b10b      	cbz	r3, 800a288 <_free_r+0x4c>
 800a284:	42a3      	cmp	r3, r4
 800a286:	d9fa      	bls.n	800a27e <_free_r+0x42>
 800a288:	6811      	ldr	r1, [r2, #0]
 800a28a:	1850      	adds	r0, r2, r1
 800a28c:	42a0      	cmp	r0, r4
 800a28e:	d10b      	bne.n	800a2a8 <_free_r+0x6c>
 800a290:	6820      	ldr	r0, [r4, #0]
 800a292:	4401      	add	r1, r0
 800a294:	1850      	adds	r0, r2, r1
 800a296:	4283      	cmp	r3, r0
 800a298:	6011      	str	r1, [r2, #0]
 800a29a:	d1e0      	bne.n	800a25e <_free_r+0x22>
 800a29c:	6818      	ldr	r0, [r3, #0]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	6053      	str	r3, [r2, #4]
 800a2a2:	4408      	add	r0, r1
 800a2a4:	6010      	str	r0, [r2, #0]
 800a2a6:	e7da      	b.n	800a25e <_free_r+0x22>
 800a2a8:	d902      	bls.n	800a2b0 <_free_r+0x74>
 800a2aa:	230c      	movs	r3, #12
 800a2ac:	602b      	str	r3, [r5, #0]
 800a2ae:	e7d6      	b.n	800a25e <_free_r+0x22>
 800a2b0:	6820      	ldr	r0, [r4, #0]
 800a2b2:	1821      	adds	r1, r4, r0
 800a2b4:	428b      	cmp	r3, r1
 800a2b6:	bf04      	itt	eq
 800a2b8:	6819      	ldreq	r1, [r3, #0]
 800a2ba:	685b      	ldreq	r3, [r3, #4]
 800a2bc:	6063      	str	r3, [r4, #4]
 800a2be:	bf04      	itt	eq
 800a2c0:	1809      	addeq	r1, r1, r0
 800a2c2:	6021      	streq	r1, [r4, #0]
 800a2c4:	6054      	str	r4, [r2, #4]
 800a2c6:	e7ca      	b.n	800a25e <_free_r+0x22>
 800a2c8:	bd38      	pop	{r3, r4, r5, pc}
 800a2ca:	bf00      	nop
 800a2cc:	24000abc 	.word	0x24000abc

0800a2d0 <sbrk_aligned>:
 800a2d0:	b570      	push	{r4, r5, r6, lr}
 800a2d2:	4e0f      	ldr	r6, [pc, #60]	@ (800a310 <sbrk_aligned+0x40>)
 800a2d4:	460c      	mov	r4, r1
 800a2d6:	6831      	ldr	r1, [r6, #0]
 800a2d8:	4605      	mov	r5, r0
 800a2da:	b911      	cbnz	r1, 800a2e2 <sbrk_aligned+0x12>
 800a2dc:	f000 fba4 	bl	800aa28 <_sbrk_r>
 800a2e0:	6030      	str	r0, [r6, #0]
 800a2e2:	4621      	mov	r1, r4
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	f000 fb9f 	bl	800aa28 <_sbrk_r>
 800a2ea:	1c43      	adds	r3, r0, #1
 800a2ec:	d103      	bne.n	800a2f6 <sbrk_aligned+0x26>
 800a2ee:	f04f 34ff 	mov.w	r4, #4294967295
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	bd70      	pop	{r4, r5, r6, pc}
 800a2f6:	1cc4      	adds	r4, r0, #3
 800a2f8:	f024 0403 	bic.w	r4, r4, #3
 800a2fc:	42a0      	cmp	r0, r4
 800a2fe:	d0f8      	beq.n	800a2f2 <sbrk_aligned+0x22>
 800a300:	1a21      	subs	r1, r4, r0
 800a302:	4628      	mov	r0, r5
 800a304:	f000 fb90 	bl	800aa28 <_sbrk_r>
 800a308:	3001      	adds	r0, #1
 800a30a:	d1f2      	bne.n	800a2f2 <sbrk_aligned+0x22>
 800a30c:	e7ef      	b.n	800a2ee <sbrk_aligned+0x1e>
 800a30e:	bf00      	nop
 800a310:	24000ab8 	.word	0x24000ab8

0800a314 <_malloc_r>:
 800a314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a318:	1ccd      	adds	r5, r1, #3
 800a31a:	f025 0503 	bic.w	r5, r5, #3
 800a31e:	3508      	adds	r5, #8
 800a320:	2d0c      	cmp	r5, #12
 800a322:	bf38      	it	cc
 800a324:	250c      	movcc	r5, #12
 800a326:	2d00      	cmp	r5, #0
 800a328:	4606      	mov	r6, r0
 800a32a:	db01      	blt.n	800a330 <_malloc_r+0x1c>
 800a32c:	42a9      	cmp	r1, r5
 800a32e:	d904      	bls.n	800a33a <_malloc_r+0x26>
 800a330:	230c      	movs	r3, #12
 800a332:	6033      	str	r3, [r6, #0]
 800a334:	2000      	movs	r0, #0
 800a336:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a33a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a410 <_malloc_r+0xfc>
 800a33e:	f000 f869 	bl	800a414 <__malloc_lock>
 800a342:	f8d8 3000 	ldr.w	r3, [r8]
 800a346:	461c      	mov	r4, r3
 800a348:	bb44      	cbnz	r4, 800a39c <_malloc_r+0x88>
 800a34a:	4629      	mov	r1, r5
 800a34c:	4630      	mov	r0, r6
 800a34e:	f7ff ffbf 	bl	800a2d0 <sbrk_aligned>
 800a352:	1c43      	adds	r3, r0, #1
 800a354:	4604      	mov	r4, r0
 800a356:	d158      	bne.n	800a40a <_malloc_r+0xf6>
 800a358:	f8d8 4000 	ldr.w	r4, [r8]
 800a35c:	4627      	mov	r7, r4
 800a35e:	2f00      	cmp	r7, #0
 800a360:	d143      	bne.n	800a3ea <_malloc_r+0xd6>
 800a362:	2c00      	cmp	r4, #0
 800a364:	d04b      	beq.n	800a3fe <_malloc_r+0xea>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	4639      	mov	r1, r7
 800a36a:	4630      	mov	r0, r6
 800a36c:	eb04 0903 	add.w	r9, r4, r3
 800a370:	f000 fb5a 	bl	800aa28 <_sbrk_r>
 800a374:	4581      	cmp	r9, r0
 800a376:	d142      	bne.n	800a3fe <_malloc_r+0xea>
 800a378:	6821      	ldr	r1, [r4, #0]
 800a37a:	1a6d      	subs	r5, r5, r1
 800a37c:	4629      	mov	r1, r5
 800a37e:	4630      	mov	r0, r6
 800a380:	f7ff ffa6 	bl	800a2d0 <sbrk_aligned>
 800a384:	3001      	adds	r0, #1
 800a386:	d03a      	beq.n	800a3fe <_malloc_r+0xea>
 800a388:	6823      	ldr	r3, [r4, #0]
 800a38a:	442b      	add	r3, r5
 800a38c:	6023      	str	r3, [r4, #0]
 800a38e:	f8d8 3000 	ldr.w	r3, [r8]
 800a392:	685a      	ldr	r2, [r3, #4]
 800a394:	bb62      	cbnz	r2, 800a3f0 <_malloc_r+0xdc>
 800a396:	f8c8 7000 	str.w	r7, [r8]
 800a39a:	e00f      	b.n	800a3bc <_malloc_r+0xa8>
 800a39c:	6822      	ldr	r2, [r4, #0]
 800a39e:	1b52      	subs	r2, r2, r5
 800a3a0:	d420      	bmi.n	800a3e4 <_malloc_r+0xd0>
 800a3a2:	2a0b      	cmp	r2, #11
 800a3a4:	d917      	bls.n	800a3d6 <_malloc_r+0xc2>
 800a3a6:	1961      	adds	r1, r4, r5
 800a3a8:	42a3      	cmp	r3, r4
 800a3aa:	6025      	str	r5, [r4, #0]
 800a3ac:	bf18      	it	ne
 800a3ae:	6059      	strne	r1, [r3, #4]
 800a3b0:	6863      	ldr	r3, [r4, #4]
 800a3b2:	bf08      	it	eq
 800a3b4:	f8c8 1000 	streq.w	r1, [r8]
 800a3b8:	5162      	str	r2, [r4, r5]
 800a3ba:	604b      	str	r3, [r1, #4]
 800a3bc:	4630      	mov	r0, r6
 800a3be:	f000 f82f 	bl	800a420 <__malloc_unlock>
 800a3c2:	f104 000b 	add.w	r0, r4, #11
 800a3c6:	1d23      	adds	r3, r4, #4
 800a3c8:	f020 0007 	bic.w	r0, r0, #7
 800a3cc:	1ac2      	subs	r2, r0, r3
 800a3ce:	bf1c      	itt	ne
 800a3d0:	1a1b      	subne	r3, r3, r0
 800a3d2:	50a3      	strne	r3, [r4, r2]
 800a3d4:	e7af      	b.n	800a336 <_malloc_r+0x22>
 800a3d6:	6862      	ldr	r2, [r4, #4]
 800a3d8:	42a3      	cmp	r3, r4
 800a3da:	bf0c      	ite	eq
 800a3dc:	f8c8 2000 	streq.w	r2, [r8]
 800a3e0:	605a      	strne	r2, [r3, #4]
 800a3e2:	e7eb      	b.n	800a3bc <_malloc_r+0xa8>
 800a3e4:	4623      	mov	r3, r4
 800a3e6:	6864      	ldr	r4, [r4, #4]
 800a3e8:	e7ae      	b.n	800a348 <_malloc_r+0x34>
 800a3ea:	463c      	mov	r4, r7
 800a3ec:	687f      	ldr	r7, [r7, #4]
 800a3ee:	e7b6      	b.n	800a35e <_malloc_r+0x4a>
 800a3f0:	461a      	mov	r2, r3
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	42a3      	cmp	r3, r4
 800a3f6:	d1fb      	bne.n	800a3f0 <_malloc_r+0xdc>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	6053      	str	r3, [r2, #4]
 800a3fc:	e7de      	b.n	800a3bc <_malloc_r+0xa8>
 800a3fe:	230c      	movs	r3, #12
 800a400:	6033      	str	r3, [r6, #0]
 800a402:	4630      	mov	r0, r6
 800a404:	f000 f80c 	bl	800a420 <__malloc_unlock>
 800a408:	e794      	b.n	800a334 <_malloc_r+0x20>
 800a40a:	6005      	str	r5, [r0, #0]
 800a40c:	e7d6      	b.n	800a3bc <_malloc_r+0xa8>
 800a40e:	bf00      	nop
 800a410:	24000abc 	.word	0x24000abc

0800a414 <__malloc_lock>:
 800a414:	4801      	ldr	r0, [pc, #4]	@ (800a41c <__malloc_lock+0x8>)
 800a416:	f7ff bf0f 	b.w	800a238 <__retarget_lock_acquire_recursive>
 800a41a:	bf00      	nop
 800a41c:	24000ab4 	.word	0x24000ab4

0800a420 <__malloc_unlock>:
 800a420:	4801      	ldr	r0, [pc, #4]	@ (800a428 <__malloc_unlock+0x8>)
 800a422:	f7ff bf0a 	b.w	800a23a <__retarget_lock_release_recursive>
 800a426:	bf00      	nop
 800a428:	24000ab4 	.word	0x24000ab4

0800a42c <__ssputs_r>:
 800a42c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a430:	688e      	ldr	r6, [r1, #8]
 800a432:	461f      	mov	r7, r3
 800a434:	42be      	cmp	r6, r7
 800a436:	680b      	ldr	r3, [r1, #0]
 800a438:	4682      	mov	sl, r0
 800a43a:	460c      	mov	r4, r1
 800a43c:	4690      	mov	r8, r2
 800a43e:	d82d      	bhi.n	800a49c <__ssputs_r+0x70>
 800a440:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a444:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a448:	d026      	beq.n	800a498 <__ssputs_r+0x6c>
 800a44a:	6965      	ldr	r5, [r4, #20]
 800a44c:	6909      	ldr	r1, [r1, #16]
 800a44e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a452:	eba3 0901 	sub.w	r9, r3, r1
 800a456:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a45a:	1c7b      	adds	r3, r7, #1
 800a45c:	444b      	add	r3, r9
 800a45e:	106d      	asrs	r5, r5, #1
 800a460:	429d      	cmp	r5, r3
 800a462:	bf38      	it	cc
 800a464:	461d      	movcc	r5, r3
 800a466:	0553      	lsls	r3, r2, #21
 800a468:	d527      	bpl.n	800a4ba <__ssputs_r+0x8e>
 800a46a:	4629      	mov	r1, r5
 800a46c:	f7ff ff52 	bl	800a314 <_malloc_r>
 800a470:	4606      	mov	r6, r0
 800a472:	b360      	cbz	r0, 800a4ce <__ssputs_r+0xa2>
 800a474:	6921      	ldr	r1, [r4, #16]
 800a476:	464a      	mov	r2, r9
 800a478:	f000 fae6 	bl	800aa48 <memcpy>
 800a47c:	89a3      	ldrh	r3, [r4, #12]
 800a47e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a486:	81a3      	strh	r3, [r4, #12]
 800a488:	6126      	str	r6, [r4, #16]
 800a48a:	6165      	str	r5, [r4, #20]
 800a48c:	444e      	add	r6, r9
 800a48e:	eba5 0509 	sub.w	r5, r5, r9
 800a492:	6026      	str	r6, [r4, #0]
 800a494:	60a5      	str	r5, [r4, #8]
 800a496:	463e      	mov	r6, r7
 800a498:	42be      	cmp	r6, r7
 800a49a:	d900      	bls.n	800a49e <__ssputs_r+0x72>
 800a49c:	463e      	mov	r6, r7
 800a49e:	6820      	ldr	r0, [r4, #0]
 800a4a0:	4632      	mov	r2, r6
 800a4a2:	4641      	mov	r1, r8
 800a4a4:	f000 faa6 	bl	800a9f4 <memmove>
 800a4a8:	68a3      	ldr	r3, [r4, #8]
 800a4aa:	1b9b      	subs	r3, r3, r6
 800a4ac:	60a3      	str	r3, [r4, #8]
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	4433      	add	r3, r6
 800a4b2:	6023      	str	r3, [r4, #0]
 800a4b4:	2000      	movs	r0, #0
 800a4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ba:	462a      	mov	r2, r5
 800a4bc:	f000 fad2 	bl	800aa64 <_realloc_r>
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	2800      	cmp	r0, #0
 800a4c4:	d1e0      	bne.n	800a488 <__ssputs_r+0x5c>
 800a4c6:	6921      	ldr	r1, [r4, #16]
 800a4c8:	4650      	mov	r0, sl
 800a4ca:	f7ff feb7 	bl	800a23c <_free_r>
 800a4ce:	230c      	movs	r3, #12
 800a4d0:	f8ca 3000 	str.w	r3, [sl]
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4da:	81a3      	strh	r3, [r4, #12]
 800a4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e0:	e7e9      	b.n	800a4b6 <__ssputs_r+0x8a>
	...

0800a4e4 <_svfiprintf_r>:
 800a4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e8:	4698      	mov	r8, r3
 800a4ea:	898b      	ldrh	r3, [r1, #12]
 800a4ec:	061b      	lsls	r3, r3, #24
 800a4ee:	b09d      	sub	sp, #116	@ 0x74
 800a4f0:	4607      	mov	r7, r0
 800a4f2:	460d      	mov	r5, r1
 800a4f4:	4614      	mov	r4, r2
 800a4f6:	d510      	bpl.n	800a51a <_svfiprintf_r+0x36>
 800a4f8:	690b      	ldr	r3, [r1, #16]
 800a4fa:	b973      	cbnz	r3, 800a51a <_svfiprintf_r+0x36>
 800a4fc:	2140      	movs	r1, #64	@ 0x40
 800a4fe:	f7ff ff09 	bl	800a314 <_malloc_r>
 800a502:	6028      	str	r0, [r5, #0]
 800a504:	6128      	str	r0, [r5, #16]
 800a506:	b930      	cbnz	r0, 800a516 <_svfiprintf_r+0x32>
 800a508:	230c      	movs	r3, #12
 800a50a:	603b      	str	r3, [r7, #0]
 800a50c:	f04f 30ff 	mov.w	r0, #4294967295
 800a510:	b01d      	add	sp, #116	@ 0x74
 800a512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a516:	2340      	movs	r3, #64	@ 0x40
 800a518:	616b      	str	r3, [r5, #20]
 800a51a:	2300      	movs	r3, #0
 800a51c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a51e:	2320      	movs	r3, #32
 800a520:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a524:	f8cd 800c 	str.w	r8, [sp, #12]
 800a528:	2330      	movs	r3, #48	@ 0x30
 800a52a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a6c8 <_svfiprintf_r+0x1e4>
 800a52e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a532:	f04f 0901 	mov.w	r9, #1
 800a536:	4623      	mov	r3, r4
 800a538:	469a      	mov	sl, r3
 800a53a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a53e:	b10a      	cbz	r2, 800a544 <_svfiprintf_r+0x60>
 800a540:	2a25      	cmp	r2, #37	@ 0x25
 800a542:	d1f9      	bne.n	800a538 <_svfiprintf_r+0x54>
 800a544:	ebba 0b04 	subs.w	fp, sl, r4
 800a548:	d00b      	beq.n	800a562 <_svfiprintf_r+0x7e>
 800a54a:	465b      	mov	r3, fp
 800a54c:	4622      	mov	r2, r4
 800a54e:	4629      	mov	r1, r5
 800a550:	4638      	mov	r0, r7
 800a552:	f7ff ff6b 	bl	800a42c <__ssputs_r>
 800a556:	3001      	adds	r0, #1
 800a558:	f000 80a7 	beq.w	800a6aa <_svfiprintf_r+0x1c6>
 800a55c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a55e:	445a      	add	r2, fp
 800a560:	9209      	str	r2, [sp, #36]	@ 0x24
 800a562:	f89a 3000 	ldrb.w	r3, [sl]
 800a566:	2b00      	cmp	r3, #0
 800a568:	f000 809f 	beq.w	800a6aa <_svfiprintf_r+0x1c6>
 800a56c:	2300      	movs	r3, #0
 800a56e:	f04f 32ff 	mov.w	r2, #4294967295
 800a572:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a576:	f10a 0a01 	add.w	sl, sl, #1
 800a57a:	9304      	str	r3, [sp, #16]
 800a57c:	9307      	str	r3, [sp, #28]
 800a57e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a582:	931a      	str	r3, [sp, #104]	@ 0x68
 800a584:	4654      	mov	r4, sl
 800a586:	2205      	movs	r2, #5
 800a588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a58c:	484e      	ldr	r0, [pc, #312]	@ (800a6c8 <_svfiprintf_r+0x1e4>)
 800a58e:	f7f5 feaf 	bl	80002f0 <memchr>
 800a592:	9a04      	ldr	r2, [sp, #16]
 800a594:	b9d8      	cbnz	r0, 800a5ce <_svfiprintf_r+0xea>
 800a596:	06d0      	lsls	r0, r2, #27
 800a598:	bf44      	itt	mi
 800a59a:	2320      	movmi	r3, #32
 800a59c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5a0:	0711      	lsls	r1, r2, #28
 800a5a2:	bf44      	itt	mi
 800a5a4:	232b      	movmi	r3, #43	@ 0x2b
 800a5a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5aa:	f89a 3000 	ldrb.w	r3, [sl]
 800a5ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5b0:	d015      	beq.n	800a5de <_svfiprintf_r+0xfa>
 800a5b2:	9a07      	ldr	r2, [sp, #28]
 800a5b4:	4654      	mov	r4, sl
 800a5b6:	2000      	movs	r0, #0
 800a5b8:	f04f 0c0a 	mov.w	ip, #10
 800a5bc:	4621      	mov	r1, r4
 800a5be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5c2:	3b30      	subs	r3, #48	@ 0x30
 800a5c4:	2b09      	cmp	r3, #9
 800a5c6:	d94b      	bls.n	800a660 <_svfiprintf_r+0x17c>
 800a5c8:	b1b0      	cbz	r0, 800a5f8 <_svfiprintf_r+0x114>
 800a5ca:	9207      	str	r2, [sp, #28]
 800a5cc:	e014      	b.n	800a5f8 <_svfiprintf_r+0x114>
 800a5ce:	eba0 0308 	sub.w	r3, r0, r8
 800a5d2:	fa09 f303 	lsl.w	r3, r9, r3
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	9304      	str	r3, [sp, #16]
 800a5da:	46a2      	mov	sl, r4
 800a5dc:	e7d2      	b.n	800a584 <_svfiprintf_r+0xa0>
 800a5de:	9b03      	ldr	r3, [sp, #12]
 800a5e0:	1d19      	adds	r1, r3, #4
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	9103      	str	r1, [sp, #12]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	bfbb      	ittet	lt
 800a5ea:	425b      	neglt	r3, r3
 800a5ec:	f042 0202 	orrlt.w	r2, r2, #2
 800a5f0:	9307      	strge	r3, [sp, #28]
 800a5f2:	9307      	strlt	r3, [sp, #28]
 800a5f4:	bfb8      	it	lt
 800a5f6:	9204      	strlt	r2, [sp, #16]
 800a5f8:	7823      	ldrb	r3, [r4, #0]
 800a5fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5fc:	d10a      	bne.n	800a614 <_svfiprintf_r+0x130>
 800a5fe:	7863      	ldrb	r3, [r4, #1]
 800a600:	2b2a      	cmp	r3, #42	@ 0x2a
 800a602:	d132      	bne.n	800a66a <_svfiprintf_r+0x186>
 800a604:	9b03      	ldr	r3, [sp, #12]
 800a606:	1d1a      	adds	r2, r3, #4
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	9203      	str	r2, [sp, #12]
 800a60c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a610:	3402      	adds	r4, #2
 800a612:	9305      	str	r3, [sp, #20]
 800a614:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a6d8 <_svfiprintf_r+0x1f4>
 800a618:	7821      	ldrb	r1, [r4, #0]
 800a61a:	2203      	movs	r2, #3
 800a61c:	4650      	mov	r0, sl
 800a61e:	f7f5 fe67 	bl	80002f0 <memchr>
 800a622:	b138      	cbz	r0, 800a634 <_svfiprintf_r+0x150>
 800a624:	9b04      	ldr	r3, [sp, #16]
 800a626:	eba0 000a 	sub.w	r0, r0, sl
 800a62a:	2240      	movs	r2, #64	@ 0x40
 800a62c:	4082      	lsls	r2, r0
 800a62e:	4313      	orrs	r3, r2
 800a630:	3401      	adds	r4, #1
 800a632:	9304      	str	r3, [sp, #16]
 800a634:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a638:	4824      	ldr	r0, [pc, #144]	@ (800a6cc <_svfiprintf_r+0x1e8>)
 800a63a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a63e:	2206      	movs	r2, #6
 800a640:	f7f5 fe56 	bl	80002f0 <memchr>
 800a644:	2800      	cmp	r0, #0
 800a646:	d036      	beq.n	800a6b6 <_svfiprintf_r+0x1d2>
 800a648:	4b21      	ldr	r3, [pc, #132]	@ (800a6d0 <_svfiprintf_r+0x1ec>)
 800a64a:	bb1b      	cbnz	r3, 800a694 <_svfiprintf_r+0x1b0>
 800a64c:	9b03      	ldr	r3, [sp, #12]
 800a64e:	3307      	adds	r3, #7
 800a650:	f023 0307 	bic.w	r3, r3, #7
 800a654:	3308      	adds	r3, #8
 800a656:	9303      	str	r3, [sp, #12]
 800a658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a65a:	4433      	add	r3, r6
 800a65c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a65e:	e76a      	b.n	800a536 <_svfiprintf_r+0x52>
 800a660:	fb0c 3202 	mla	r2, ip, r2, r3
 800a664:	460c      	mov	r4, r1
 800a666:	2001      	movs	r0, #1
 800a668:	e7a8      	b.n	800a5bc <_svfiprintf_r+0xd8>
 800a66a:	2300      	movs	r3, #0
 800a66c:	3401      	adds	r4, #1
 800a66e:	9305      	str	r3, [sp, #20]
 800a670:	4619      	mov	r1, r3
 800a672:	f04f 0c0a 	mov.w	ip, #10
 800a676:	4620      	mov	r0, r4
 800a678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a67c:	3a30      	subs	r2, #48	@ 0x30
 800a67e:	2a09      	cmp	r2, #9
 800a680:	d903      	bls.n	800a68a <_svfiprintf_r+0x1a6>
 800a682:	2b00      	cmp	r3, #0
 800a684:	d0c6      	beq.n	800a614 <_svfiprintf_r+0x130>
 800a686:	9105      	str	r1, [sp, #20]
 800a688:	e7c4      	b.n	800a614 <_svfiprintf_r+0x130>
 800a68a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a68e:	4604      	mov	r4, r0
 800a690:	2301      	movs	r3, #1
 800a692:	e7f0      	b.n	800a676 <_svfiprintf_r+0x192>
 800a694:	ab03      	add	r3, sp, #12
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	462a      	mov	r2, r5
 800a69a:	4b0e      	ldr	r3, [pc, #56]	@ (800a6d4 <_svfiprintf_r+0x1f0>)
 800a69c:	a904      	add	r1, sp, #16
 800a69e:	4638      	mov	r0, r7
 800a6a0:	f3af 8000 	nop.w
 800a6a4:	1c42      	adds	r2, r0, #1
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	d1d6      	bne.n	800a658 <_svfiprintf_r+0x174>
 800a6aa:	89ab      	ldrh	r3, [r5, #12]
 800a6ac:	065b      	lsls	r3, r3, #25
 800a6ae:	f53f af2d 	bmi.w	800a50c <_svfiprintf_r+0x28>
 800a6b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6b4:	e72c      	b.n	800a510 <_svfiprintf_r+0x2c>
 800a6b6:	ab03      	add	r3, sp, #12
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	462a      	mov	r2, r5
 800a6bc:	4b05      	ldr	r3, [pc, #20]	@ (800a6d4 <_svfiprintf_r+0x1f0>)
 800a6be:	a904      	add	r1, sp, #16
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f000 f879 	bl	800a7b8 <_printf_i>
 800a6c6:	e7ed      	b.n	800a6a4 <_svfiprintf_r+0x1c0>
 800a6c8:	0800abe8 	.word	0x0800abe8
 800a6cc:	0800abf2 	.word	0x0800abf2
 800a6d0:	00000000 	.word	0x00000000
 800a6d4:	0800a42d 	.word	0x0800a42d
 800a6d8:	0800abee 	.word	0x0800abee

0800a6dc <_printf_common>:
 800a6dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6e0:	4616      	mov	r6, r2
 800a6e2:	4698      	mov	r8, r3
 800a6e4:	688a      	ldr	r2, [r1, #8]
 800a6e6:	690b      	ldr	r3, [r1, #16]
 800a6e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	bfb8      	it	lt
 800a6f0:	4613      	movlt	r3, r2
 800a6f2:	6033      	str	r3, [r6, #0]
 800a6f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6f8:	4607      	mov	r7, r0
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	b10a      	cbz	r2, 800a702 <_printf_common+0x26>
 800a6fe:	3301      	adds	r3, #1
 800a700:	6033      	str	r3, [r6, #0]
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	0699      	lsls	r1, r3, #26
 800a706:	bf42      	ittt	mi
 800a708:	6833      	ldrmi	r3, [r6, #0]
 800a70a:	3302      	addmi	r3, #2
 800a70c:	6033      	strmi	r3, [r6, #0]
 800a70e:	6825      	ldr	r5, [r4, #0]
 800a710:	f015 0506 	ands.w	r5, r5, #6
 800a714:	d106      	bne.n	800a724 <_printf_common+0x48>
 800a716:	f104 0a19 	add.w	sl, r4, #25
 800a71a:	68e3      	ldr	r3, [r4, #12]
 800a71c:	6832      	ldr	r2, [r6, #0]
 800a71e:	1a9b      	subs	r3, r3, r2
 800a720:	42ab      	cmp	r3, r5
 800a722:	dc26      	bgt.n	800a772 <_printf_common+0x96>
 800a724:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a728:	6822      	ldr	r2, [r4, #0]
 800a72a:	3b00      	subs	r3, #0
 800a72c:	bf18      	it	ne
 800a72e:	2301      	movne	r3, #1
 800a730:	0692      	lsls	r2, r2, #26
 800a732:	d42b      	bmi.n	800a78c <_printf_common+0xb0>
 800a734:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a738:	4641      	mov	r1, r8
 800a73a:	4638      	mov	r0, r7
 800a73c:	47c8      	blx	r9
 800a73e:	3001      	adds	r0, #1
 800a740:	d01e      	beq.n	800a780 <_printf_common+0xa4>
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	6922      	ldr	r2, [r4, #16]
 800a746:	f003 0306 	and.w	r3, r3, #6
 800a74a:	2b04      	cmp	r3, #4
 800a74c:	bf02      	ittt	eq
 800a74e:	68e5      	ldreq	r5, [r4, #12]
 800a750:	6833      	ldreq	r3, [r6, #0]
 800a752:	1aed      	subeq	r5, r5, r3
 800a754:	68a3      	ldr	r3, [r4, #8]
 800a756:	bf0c      	ite	eq
 800a758:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a75c:	2500      	movne	r5, #0
 800a75e:	4293      	cmp	r3, r2
 800a760:	bfc4      	itt	gt
 800a762:	1a9b      	subgt	r3, r3, r2
 800a764:	18ed      	addgt	r5, r5, r3
 800a766:	2600      	movs	r6, #0
 800a768:	341a      	adds	r4, #26
 800a76a:	42b5      	cmp	r5, r6
 800a76c:	d11a      	bne.n	800a7a4 <_printf_common+0xc8>
 800a76e:	2000      	movs	r0, #0
 800a770:	e008      	b.n	800a784 <_printf_common+0xa8>
 800a772:	2301      	movs	r3, #1
 800a774:	4652      	mov	r2, sl
 800a776:	4641      	mov	r1, r8
 800a778:	4638      	mov	r0, r7
 800a77a:	47c8      	blx	r9
 800a77c:	3001      	adds	r0, #1
 800a77e:	d103      	bne.n	800a788 <_printf_common+0xac>
 800a780:	f04f 30ff 	mov.w	r0, #4294967295
 800a784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a788:	3501      	adds	r5, #1
 800a78a:	e7c6      	b.n	800a71a <_printf_common+0x3e>
 800a78c:	18e1      	adds	r1, r4, r3
 800a78e:	1c5a      	adds	r2, r3, #1
 800a790:	2030      	movs	r0, #48	@ 0x30
 800a792:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a796:	4422      	add	r2, r4
 800a798:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a79c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a7a0:	3302      	adds	r3, #2
 800a7a2:	e7c7      	b.n	800a734 <_printf_common+0x58>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	4622      	mov	r2, r4
 800a7a8:	4641      	mov	r1, r8
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	47c8      	blx	r9
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	d0e6      	beq.n	800a780 <_printf_common+0xa4>
 800a7b2:	3601      	adds	r6, #1
 800a7b4:	e7d9      	b.n	800a76a <_printf_common+0x8e>
	...

0800a7b8 <_printf_i>:
 800a7b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a7bc:	7e0f      	ldrb	r7, [r1, #24]
 800a7be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7c0:	2f78      	cmp	r7, #120	@ 0x78
 800a7c2:	4691      	mov	r9, r2
 800a7c4:	4680      	mov	r8, r0
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	469a      	mov	sl, r3
 800a7ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7ce:	d807      	bhi.n	800a7e0 <_printf_i+0x28>
 800a7d0:	2f62      	cmp	r7, #98	@ 0x62
 800a7d2:	d80a      	bhi.n	800a7ea <_printf_i+0x32>
 800a7d4:	2f00      	cmp	r7, #0
 800a7d6:	f000 80d1 	beq.w	800a97c <_printf_i+0x1c4>
 800a7da:	2f58      	cmp	r7, #88	@ 0x58
 800a7dc:	f000 80b8 	beq.w	800a950 <_printf_i+0x198>
 800a7e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7e8:	e03a      	b.n	800a860 <_printf_i+0xa8>
 800a7ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7ee:	2b15      	cmp	r3, #21
 800a7f0:	d8f6      	bhi.n	800a7e0 <_printf_i+0x28>
 800a7f2:	a101      	add	r1, pc, #4	@ (adr r1, 800a7f8 <_printf_i+0x40>)
 800a7f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7f8:	0800a851 	.word	0x0800a851
 800a7fc:	0800a865 	.word	0x0800a865
 800a800:	0800a7e1 	.word	0x0800a7e1
 800a804:	0800a7e1 	.word	0x0800a7e1
 800a808:	0800a7e1 	.word	0x0800a7e1
 800a80c:	0800a7e1 	.word	0x0800a7e1
 800a810:	0800a865 	.word	0x0800a865
 800a814:	0800a7e1 	.word	0x0800a7e1
 800a818:	0800a7e1 	.word	0x0800a7e1
 800a81c:	0800a7e1 	.word	0x0800a7e1
 800a820:	0800a7e1 	.word	0x0800a7e1
 800a824:	0800a963 	.word	0x0800a963
 800a828:	0800a88f 	.word	0x0800a88f
 800a82c:	0800a91d 	.word	0x0800a91d
 800a830:	0800a7e1 	.word	0x0800a7e1
 800a834:	0800a7e1 	.word	0x0800a7e1
 800a838:	0800a985 	.word	0x0800a985
 800a83c:	0800a7e1 	.word	0x0800a7e1
 800a840:	0800a88f 	.word	0x0800a88f
 800a844:	0800a7e1 	.word	0x0800a7e1
 800a848:	0800a7e1 	.word	0x0800a7e1
 800a84c:	0800a925 	.word	0x0800a925
 800a850:	6833      	ldr	r3, [r6, #0]
 800a852:	1d1a      	adds	r2, r3, #4
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	6032      	str	r2, [r6, #0]
 800a858:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a85c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a860:	2301      	movs	r3, #1
 800a862:	e09c      	b.n	800a99e <_printf_i+0x1e6>
 800a864:	6833      	ldr	r3, [r6, #0]
 800a866:	6820      	ldr	r0, [r4, #0]
 800a868:	1d19      	adds	r1, r3, #4
 800a86a:	6031      	str	r1, [r6, #0]
 800a86c:	0606      	lsls	r6, r0, #24
 800a86e:	d501      	bpl.n	800a874 <_printf_i+0xbc>
 800a870:	681d      	ldr	r5, [r3, #0]
 800a872:	e003      	b.n	800a87c <_printf_i+0xc4>
 800a874:	0645      	lsls	r5, r0, #25
 800a876:	d5fb      	bpl.n	800a870 <_printf_i+0xb8>
 800a878:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a87c:	2d00      	cmp	r5, #0
 800a87e:	da03      	bge.n	800a888 <_printf_i+0xd0>
 800a880:	232d      	movs	r3, #45	@ 0x2d
 800a882:	426d      	negs	r5, r5
 800a884:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a888:	4858      	ldr	r0, [pc, #352]	@ (800a9ec <_printf_i+0x234>)
 800a88a:	230a      	movs	r3, #10
 800a88c:	e011      	b.n	800a8b2 <_printf_i+0xfa>
 800a88e:	6821      	ldr	r1, [r4, #0]
 800a890:	6833      	ldr	r3, [r6, #0]
 800a892:	0608      	lsls	r0, r1, #24
 800a894:	f853 5b04 	ldr.w	r5, [r3], #4
 800a898:	d402      	bmi.n	800a8a0 <_printf_i+0xe8>
 800a89a:	0649      	lsls	r1, r1, #25
 800a89c:	bf48      	it	mi
 800a89e:	b2ad      	uxthmi	r5, r5
 800a8a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a8a2:	4852      	ldr	r0, [pc, #328]	@ (800a9ec <_printf_i+0x234>)
 800a8a4:	6033      	str	r3, [r6, #0]
 800a8a6:	bf14      	ite	ne
 800a8a8:	230a      	movne	r3, #10
 800a8aa:	2308      	moveq	r3, #8
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a8b2:	6866      	ldr	r6, [r4, #4]
 800a8b4:	60a6      	str	r6, [r4, #8]
 800a8b6:	2e00      	cmp	r6, #0
 800a8b8:	db05      	blt.n	800a8c6 <_printf_i+0x10e>
 800a8ba:	6821      	ldr	r1, [r4, #0]
 800a8bc:	432e      	orrs	r6, r5
 800a8be:	f021 0104 	bic.w	r1, r1, #4
 800a8c2:	6021      	str	r1, [r4, #0]
 800a8c4:	d04b      	beq.n	800a95e <_printf_i+0x1a6>
 800a8c6:	4616      	mov	r6, r2
 800a8c8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8cc:	fb03 5711 	mls	r7, r3, r1, r5
 800a8d0:	5dc7      	ldrb	r7, [r0, r7]
 800a8d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8d6:	462f      	mov	r7, r5
 800a8d8:	42bb      	cmp	r3, r7
 800a8da:	460d      	mov	r5, r1
 800a8dc:	d9f4      	bls.n	800a8c8 <_printf_i+0x110>
 800a8de:	2b08      	cmp	r3, #8
 800a8e0:	d10b      	bne.n	800a8fa <_printf_i+0x142>
 800a8e2:	6823      	ldr	r3, [r4, #0]
 800a8e4:	07df      	lsls	r7, r3, #31
 800a8e6:	d508      	bpl.n	800a8fa <_printf_i+0x142>
 800a8e8:	6923      	ldr	r3, [r4, #16]
 800a8ea:	6861      	ldr	r1, [r4, #4]
 800a8ec:	4299      	cmp	r1, r3
 800a8ee:	bfde      	ittt	le
 800a8f0:	2330      	movle	r3, #48	@ 0x30
 800a8f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8fa:	1b92      	subs	r2, r2, r6
 800a8fc:	6122      	str	r2, [r4, #16]
 800a8fe:	f8cd a000 	str.w	sl, [sp]
 800a902:	464b      	mov	r3, r9
 800a904:	aa03      	add	r2, sp, #12
 800a906:	4621      	mov	r1, r4
 800a908:	4640      	mov	r0, r8
 800a90a:	f7ff fee7 	bl	800a6dc <_printf_common>
 800a90e:	3001      	adds	r0, #1
 800a910:	d14a      	bne.n	800a9a8 <_printf_i+0x1f0>
 800a912:	f04f 30ff 	mov.w	r0, #4294967295
 800a916:	b004      	add	sp, #16
 800a918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a91c:	6823      	ldr	r3, [r4, #0]
 800a91e:	f043 0320 	orr.w	r3, r3, #32
 800a922:	6023      	str	r3, [r4, #0]
 800a924:	4832      	ldr	r0, [pc, #200]	@ (800a9f0 <_printf_i+0x238>)
 800a926:	2778      	movs	r7, #120	@ 0x78
 800a928:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a92c:	6823      	ldr	r3, [r4, #0]
 800a92e:	6831      	ldr	r1, [r6, #0]
 800a930:	061f      	lsls	r7, r3, #24
 800a932:	f851 5b04 	ldr.w	r5, [r1], #4
 800a936:	d402      	bmi.n	800a93e <_printf_i+0x186>
 800a938:	065f      	lsls	r7, r3, #25
 800a93a:	bf48      	it	mi
 800a93c:	b2ad      	uxthmi	r5, r5
 800a93e:	6031      	str	r1, [r6, #0]
 800a940:	07d9      	lsls	r1, r3, #31
 800a942:	bf44      	itt	mi
 800a944:	f043 0320 	orrmi.w	r3, r3, #32
 800a948:	6023      	strmi	r3, [r4, #0]
 800a94a:	b11d      	cbz	r5, 800a954 <_printf_i+0x19c>
 800a94c:	2310      	movs	r3, #16
 800a94e:	e7ad      	b.n	800a8ac <_printf_i+0xf4>
 800a950:	4826      	ldr	r0, [pc, #152]	@ (800a9ec <_printf_i+0x234>)
 800a952:	e7e9      	b.n	800a928 <_printf_i+0x170>
 800a954:	6823      	ldr	r3, [r4, #0]
 800a956:	f023 0320 	bic.w	r3, r3, #32
 800a95a:	6023      	str	r3, [r4, #0]
 800a95c:	e7f6      	b.n	800a94c <_printf_i+0x194>
 800a95e:	4616      	mov	r6, r2
 800a960:	e7bd      	b.n	800a8de <_printf_i+0x126>
 800a962:	6833      	ldr	r3, [r6, #0]
 800a964:	6825      	ldr	r5, [r4, #0]
 800a966:	6961      	ldr	r1, [r4, #20]
 800a968:	1d18      	adds	r0, r3, #4
 800a96a:	6030      	str	r0, [r6, #0]
 800a96c:	062e      	lsls	r6, r5, #24
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	d501      	bpl.n	800a976 <_printf_i+0x1be>
 800a972:	6019      	str	r1, [r3, #0]
 800a974:	e002      	b.n	800a97c <_printf_i+0x1c4>
 800a976:	0668      	lsls	r0, r5, #25
 800a978:	d5fb      	bpl.n	800a972 <_printf_i+0x1ba>
 800a97a:	8019      	strh	r1, [r3, #0]
 800a97c:	2300      	movs	r3, #0
 800a97e:	6123      	str	r3, [r4, #16]
 800a980:	4616      	mov	r6, r2
 800a982:	e7bc      	b.n	800a8fe <_printf_i+0x146>
 800a984:	6833      	ldr	r3, [r6, #0]
 800a986:	1d1a      	adds	r2, r3, #4
 800a988:	6032      	str	r2, [r6, #0]
 800a98a:	681e      	ldr	r6, [r3, #0]
 800a98c:	6862      	ldr	r2, [r4, #4]
 800a98e:	2100      	movs	r1, #0
 800a990:	4630      	mov	r0, r6
 800a992:	f7f5 fcad 	bl	80002f0 <memchr>
 800a996:	b108      	cbz	r0, 800a99c <_printf_i+0x1e4>
 800a998:	1b80      	subs	r0, r0, r6
 800a99a:	6060      	str	r0, [r4, #4]
 800a99c:	6863      	ldr	r3, [r4, #4]
 800a99e:	6123      	str	r3, [r4, #16]
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9a6:	e7aa      	b.n	800a8fe <_printf_i+0x146>
 800a9a8:	6923      	ldr	r3, [r4, #16]
 800a9aa:	4632      	mov	r2, r6
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	47d0      	blx	sl
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	d0ad      	beq.n	800a912 <_printf_i+0x15a>
 800a9b6:	6823      	ldr	r3, [r4, #0]
 800a9b8:	079b      	lsls	r3, r3, #30
 800a9ba:	d413      	bmi.n	800a9e4 <_printf_i+0x22c>
 800a9bc:	68e0      	ldr	r0, [r4, #12]
 800a9be:	9b03      	ldr	r3, [sp, #12]
 800a9c0:	4298      	cmp	r0, r3
 800a9c2:	bfb8      	it	lt
 800a9c4:	4618      	movlt	r0, r3
 800a9c6:	e7a6      	b.n	800a916 <_printf_i+0x15e>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	4632      	mov	r2, r6
 800a9cc:	4649      	mov	r1, r9
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	47d0      	blx	sl
 800a9d2:	3001      	adds	r0, #1
 800a9d4:	d09d      	beq.n	800a912 <_printf_i+0x15a>
 800a9d6:	3501      	adds	r5, #1
 800a9d8:	68e3      	ldr	r3, [r4, #12]
 800a9da:	9903      	ldr	r1, [sp, #12]
 800a9dc:	1a5b      	subs	r3, r3, r1
 800a9de:	42ab      	cmp	r3, r5
 800a9e0:	dcf2      	bgt.n	800a9c8 <_printf_i+0x210>
 800a9e2:	e7eb      	b.n	800a9bc <_printf_i+0x204>
 800a9e4:	2500      	movs	r5, #0
 800a9e6:	f104 0619 	add.w	r6, r4, #25
 800a9ea:	e7f5      	b.n	800a9d8 <_printf_i+0x220>
 800a9ec:	0800abf9 	.word	0x0800abf9
 800a9f0:	0800ac0a 	.word	0x0800ac0a

0800a9f4 <memmove>:
 800a9f4:	4288      	cmp	r0, r1
 800a9f6:	b510      	push	{r4, lr}
 800a9f8:	eb01 0402 	add.w	r4, r1, r2
 800a9fc:	d902      	bls.n	800aa04 <memmove+0x10>
 800a9fe:	4284      	cmp	r4, r0
 800aa00:	4623      	mov	r3, r4
 800aa02:	d807      	bhi.n	800aa14 <memmove+0x20>
 800aa04:	1e43      	subs	r3, r0, #1
 800aa06:	42a1      	cmp	r1, r4
 800aa08:	d008      	beq.n	800aa1c <memmove+0x28>
 800aa0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa12:	e7f8      	b.n	800aa06 <memmove+0x12>
 800aa14:	4402      	add	r2, r0
 800aa16:	4601      	mov	r1, r0
 800aa18:	428a      	cmp	r2, r1
 800aa1a:	d100      	bne.n	800aa1e <memmove+0x2a>
 800aa1c:	bd10      	pop	{r4, pc}
 800aa1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa26:	e7f7      	b.n	800aa18 <memmove+0x24>

0800aa28 <_sbrk_r>:
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	4d06      	ldr	r5, [pc, #24]	@ (800aa44 <_sbrk_r+0x1c>)
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	4604      	mov	r4, r0
 800aa30:	4608      	mov	r0, r1
 800aa32:	602b      	str	r3, [r5, #0]
 800aa34:	f7f6 ff0c 	bl	8001850 <_sbrk>
 800aa38:	1c43      	adds	r3, r0, #1
 800aa3a:	d102      	bne.n	800aa42 <_sbrk_r+0x1a>
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	b103      	cbz	r3, 800aa42 <_sbrk_r+0x1a>
 800aa40:	6023      	str	r3, [r4, #0]
 800aa42:	bd38      	pop	{r3, r4, r5, pc}
 800aa44:	24000ab0 	.word	0x24000ab0

0800aa48 <memcpy>:
 800aa48:	440a      	add	r2, r1
 800aa4a:	4291      	cmp	r1, r2
 800aa4c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa50:	d100      	bne.n	800aa54 <memcpy+0xc>
 800aa52:	4770      	bx	lr
 800aa54:	b510      	push	{r4, lr}
 800aa56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa5e:	4291      	cmp	r1, r2
 800aa60:	d1f9      	bne.n	800aa56 <memcpy+0xe>
 800aa62:	bd10      	pop	{r4, pc}

0800aa64 <_realloc_r>:
 800aa64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa68:	4607      	mov	r7, r0
 800aa6a:	4614      	mov	r4, r2
 800aa6c:	460d      	mov	r5, r1
 800aa6e:	b921      	cbnz	r1, 800aa7a <_realloc_r+0x16>
 800aa70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa74:	4611      	mov	r1, r2
 800aa76:	f7ff bc4d 	b.w	800a314 <_malloc_r>
 800aa7a:	b92a      	cbnz	r2, 800aa88 <_realloc_r+0x24>
 800aa7c:	f7ff fbde 	bl	800a23c <_free_r>
 800aa80:	4625      	mov	r5, r4
 800aa82:	4628      	mov	r0, r5
 800aa84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa88:	f000 f81a 	bl	800aac0 <_malloc_usable_size_r>
 800aa8c:	4284      	cmp	r4, r0
 800aa8e:	4606      	mov	r6, r0
 800aa90:	d802      	bhi.n	800aa98 <_realloc_r+0x34>
 800aa92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa96:	d8f4      	bhi.n	800aa82 <_realloc_r+0x1e>
 800aa98:	4621      	mov	r1, r4
 800aa9a:	4638      	mov	r0, r7
 800aa9c:	f7ff fc3a 	bl	800a314 <_malloc_r>
 800aaa0:	4680      	mov	r8, r0
 800aaa2:	b908      	cbnz	r0, 800aaa8 <_realloc_r+0x44>
 800aaa4:	4645      	mov	r5, r8
 800aaa6:	e7ec      	b.n	800aa82 <_realloc_r+0x1e>
 800aaa8:	42b4      	cmp	r4, r6
 800aaaa:	4622      	mov	r2, r4
 800aaac:	4629      	mov	r1, r5
 800aaae:	bf28      	it	cs
 800aab0:	4632      	movcs	r2, r6
 800aab2:	f7ff ffc9 	bl	800aa48 <memcpy>
 800aab6:	4629      	mov	r1, r5
 800aab8:	4638      	mov	r0, r7
 800aaba:	f7ff fbbf 	bl	800a23c <_free_r>
 800aabe:	e7f1      	b.n	800aaa4 <_realloc_r+0x40>

0800aac0 <_malloc_usable_size_r>:
 800aac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aac4:	1f18      	subs	r0, r3, #4
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	bfbc      	itt	lt
 800aaca:	580b      	ldrlt	r3, [r1, r0]
 800aacc:	18c0      	addlt	r0, r0, r3
 800aace:	4770      	bx	lr

0800aad0 <_init>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	bf00      	nop
 800aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad6:	bc08      	pop	{r3}
 800aad8:	469e      	mov	lr, r3
 800aada:	4770      	bx	lr

0800aadc <_fini>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	bf00      	nop
 800aae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae2:	bc08      	pop	{r3}
 800aae4:	469e      	mov	lr, r3
 800aae6:	4770      	bx	lr
