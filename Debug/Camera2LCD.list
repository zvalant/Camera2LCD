
Camera2LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab8c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800ae2c  0800ae2c  0000be2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800af54  0800af54  0000bf54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800af5c  0800af5c  0000bf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800af60  0800af60  0000bf60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800af64  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800afc8  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800b028  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002619c  24000124  0800b088  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240262c0  0800b088  0000c2c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028bb7  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c72  00000000  00000000  00034d09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c60  00000000  00000000  00039980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000161c  00000000  00000000  0003b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cb74  00000000  00000000  0003cbfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bbd2  00000000  00000000  00079770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001745d5  00000000  00000000  000a5342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00219917  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e34  00000000  00000000  0021995c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00221790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ae14 	.word	0x0800ae14

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800ae14 	.word	0x0800ae14

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <OV5640_WriteReg>:
		OV5640_FORMAT_RGB565
};

OV5640_CameraConfig* activeCameraConfigPtr = &activeCameraConfig;

HAL_StatusTypeDef OV5640_WriteReg(uint16_t regAddr, uint8_t data) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af04      	add	r7, sp, #16
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	80fb      	strh	r3, [r7, #6]
 800068c:	4613      	mov	r3, r2
 800068e:	717b      	strb	r3, [r7, #5]
	HAL_Delay(1);
 8000690:	2001      	movs	r0, #1
 8000692:	f001 fd31 	bl	80020f8 <HAL_Delay>


	return HAL_I2C_Mem_Write(&hi2c1, OV5640_I2C_ADDR_W, regAddr,
 8000696:	88fa      	ldrh	r2, [r7, #6]
 8000698:	f04f 33ff 	mov.w	r3, #4294967295
 800069c:	9302      	str	r3, [sp, #8]
 800069e:	2301      	movs	r3, #1
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	1d7b      	adds	r3, r7, #5
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	2302      	movs	r3, #2
 80006a8:	2178      	movs	r1, #120	@ 0x78
 80006aa:	4804      	ldr	r0, [pc, #16]	@ (80006bc <OV5640_WriteReg+0x3c>)
 80006ac:	f003 f89a 	bl	80037e4 <HAL_I2C_Mem_Write>
 80006b0:	4603      	mov	r3, r0
			I2C_MEMADD_SIZE_16BIT,&data,1,HAL_MAX_DELAY);

}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3708      	adds	r7, #8
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	24025a84 	.word	0x24025a84

080006c0 <OV5640_ReadReg>:

HAL_StatusTypeDef OV5640_ReadReg(uint16_t regAddr, uint8_t *dataPtr) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08e      	sub	sp, #56	@ 0x38
 80006c4:	af04      	add	r7, sp, #16
 80006c6:	4603      	mov	r3, r0
 80006c8:	6039      	str	r1, [r7, #0]
 80006ca:	80fb      	strh	r3, [r7, #6]
	char buff[25] = "readStart\r\n";
 80006cc:	4a13      	ldr	r2, [pc, #76]	@ (800071c <OV5640_ReadReg+0x5c>)
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80006d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80006d8:	f107 0318 	add.w	r3, r7, #24
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	731a      	strb	r2, [r3, #12]
	HAL_UART_Transmit(&huart3, &buff, sizeof(buff), HAL_MAX_DELAY);
 80006e6:	f107 010c 	add.w	r1, r7, #12
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	2219      	movs	r2, #25
 80006f0:	480b      	ldr	r0, [pc, #44]	@ (8000720 <OV5640_ReadReg+0x60>)
 80006f2:	f008 facd 	bl	8008c90 <HAL_UART_Transmit>
	return HAL_I2C_Mem_Read(&hi2c1, OV5640_I2C_ADDR_R, regAddr,
 80006f6:	88fa      	ldrh	r2, [r7, #6]
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295
 80006fc:	9302      	str	r3, [sp, #8]
 80006fe:	2301      	movs	r3, #1
 8000700:	9301      	str	r3, [sp, #4]
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2302      	movs	r3, #2
 8000708:	2179      	movs	r1, #121	@ 0x79
 800070a:	4806      	ldr	r0, [pc, #24]	@ (8000724 <OV5640_ReadReg+0x64>)
 800070c:	f003 f97e 	bl	8003a0c <HAL_I2C_Mem_Read>
 8000710:	4603      	mov	r3, r0
			I2C_MEMADD_SIZE_16BIT, dataPtr, 1, HAL_MAX_DELAY);
}
 8000712:	4618      	mov	r0, r3
 8000714:	3728      	adds	r7, #40	@ 0x28
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	0800ae2c 	.word	0x0800ae2c
 8000720:	24025bfc 	.word	0x24025bfc
 8000724:	24025a84 	.word	0x24025a84

08000728 <OV5640_PowerUpSequence>:
		return HAL_ERROR;
	}

	return HAL_OK;
}
HAL_StatusTypeDef OV5640_PowerUpSequence(void) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 800072e:	200a      	movs	r0, #10
 8000730:	f001 fce2 	bl	80020f8 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	2101      	movs	r1, #1
 8000738:	480f      	ldr	r0, [pc, #60]	@ (8000778 <OV5640_PowerUpSequence+0x50>)
 800073a:	f002 ff9d 	bl	8003678 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800073e:	2005      	movs	r0, #5
 8000740:	f001 fcda 	bl	80020f8 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port, CAMERA_RST_Pin, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800074a:	480c      	ldr	r0, [pc, #48]	@ (800077c <OV5640_PowerUpSequence+0x54>)
 800074c:	f002 ff94 	bl	8003678 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000750:	2014      	movs	r0, #20
 8000752:	f001 fcd1 	bl	80020f8 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000756:	2100      	movs	r1, #0
 8000758:	4809      	ldr	r0, [pc, #36]	@ (8000780 <OV5640_PowerUpSequence+0x58>)
 800075a:	f006 ffdd 	bl	8007718 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 800075e:	2005      	movs	r0, #5
 8000760:	f001 fcca 	bl	80020f8 <HAL_Delay>
	HAL_StatusTypeDef status = OV5640_ConfigureCamera();
 8000764:	f000 f884 	bl	8000870 <OV5640_ConfigureCamera>
 8000768:	4603      	mov	r3, r0
 800076a:	71fb      	strb	r3, [r7, #7]
	return status;
 800076c:	79fb      	ldrb	r3, [r7, #7]

}
 800076e:	4618      	mov	r0, r3
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	58020000 	.word	0x58020000
 800077c:	58021800 	.word	0x58021800
 8000780:	24025bb0 	.word	0x24025bb0

08000784 <OV5640_SetResolution>:
HAL_StatusTypeDef OV5640_SetResolution(void){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	71fb      	strb	r3, [r7, #7]
	const uint16_t selectedWidth =OV5640_Resolutions[activeCameraConfigPtr->resolution].width;
 800078e:	4b25      	ldr	r3, [pc, #148]	@ (8000824 <OV5640_SetResolution+0xa0>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	461a      	mov	r2, r3
 8000796:	4b24      	ldr	r3, [pc, #144]	@ (8000828 <OV5640_SetResolution+0xa4>)
 8000798:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 800079c:	80bb      	strh	r3, [r7, #4]
	const uint16_t selectedHeight = OV5640_Resolutions[activeCameraConfigPtr->resolution].height;
 800079e:	4b21      	ldr	r3, [pc, #132]	@ (8000824 <OV5640_SetResolution+0xa0>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4a20      	ldr	r2, [pc, #128]	@ (8000828 <OV5640_SetResolution+0xa4>)
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	4413      	add	r3, r2
 80007aa:	885b      	ldrh	r3, [r3, #2]
 80007ac:	807b      	strh	r3, [r7, #2]
	const uint8_t heightBit_H = selectedHeight>>8;
 80007ae:	887b      	ldrh	r3, [r7, #2]
 80007b0:	0a1b      	lsrs	r3, r3, #8
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	707b      	strb	r3, [r7, #1]
	status |= OV5640_WriteReg(OV5640_REG_OUT_WIDTH_H, (uint8_t)selectedWidth>>8);
 80007b6:	88bb      	ldrh	r3, [r7, #4]
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	121b      	asrs	r3, r3, #8
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	4619      	mov	r1, r3
 80007c0:	f643 0008 	movw	r0, #14344	@ 0x3808
 80007c4:	f7ff ff5c 	bl	8000680 <OV5640_WriteReg>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
 80007cc:	79fb      	ldrb	r3, [r7, #7]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_WIDTH_L, (uint8_t)selectedWidth&0xFF);
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	4619      	mov	r1, r3
 80007d8:	f643 0009 	movw	r0, #14345	@ 0x3809
 80007dc:	f7ff ff50 	bl	8000680 <OV5640_WriteReg>
 80007e0:	4603      	mov	r3, r0
 80007e2:	461a      	mov	r2, r3
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_HEIGHT_H, heightBit_H);
 80007ea:	787b      	ldrb	r3, [r7, #1]
 80007ec:	4619      	mov	r1, r3
 80007ee:	f643 000a 	movw	r0, #14346	@ 0x380a
 80007f2:	f7ff ff45 	bl	8000680 <OV5640_WriteReg>
 80007f6:	4603      	mov	r3, r0
 80007f8:	461a      	mov	r2, r3
 80007fa:	79fb      	ldrb	r3, [r7, #7]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_HEIGHT_L, (uint8_t)selectedHeight&0xFF);
 8000800:	887b      	ldrh	r3, [r7, #2]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4619      	mov	r1, r3
 8000806:	f643 000b 	movw	r0, #14347	@ 0x380b
 800080a:	f7ff ff39 	bl	8000680 <OV5640_WriteReg>
 800080e:	4603      	mov	r3, r0
 8000810:	461a      	mov	r2, r3
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	4313      	orrs	r3, r2
 8000816:	71fb      	strb	r3, [r7, #7]
	return status;
 8000818:	79fb      	ldrb	r3, [r7, #7]
}
 800081a:	4618      	mov	r0, r3
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	24000000 	.word	0x24000000
 8000828:	0800aecc 	.word	0x0800aecc

0800082c <OV5640_SetFormat>:
HAL_StatusTypeDef OV5640_SetFormat(void){
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8000832:	2300      	movs	r3, #0
 8000834:	71fb      	strb	r3, [r7, #7]
	uint8_t formatData= OV5640_Formats[activeCameraConfigPtr->pixelFormat].formatValue;
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <OV5640_SetFormat+0x3c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	785b      	ldrb	r3, [r3, #1]
 800083c:	461a      	mov	r2, r3
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <OV5640_SetFormat+0x40>)
 8000840:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000844:	71bb      	strb	r3, [r7, #6]
	status |= OV5640_WriteReg(OV5640_REG_FORMAT_CTRL, formatData);
 8000846:	79bb      	ldrb	r3, [r7, #6]
 8000848:	4619      	mov	r1, r3
 800084a:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 800084e:	f7ff ff17 	bl	8000680 <OV5640_WriteReg>
 8000852:	4603      	mov	r3, r0
 8000854:	461a      	mov	r2, r3
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	4313      	orrs	r3, r2
 800085a:	71fb      	strb	r3, [r7, #7]
	return status;
 800085c:	79fb      	ldrb	r3, [r7, #7]


}
 800085e:	4618      	mov	r0, r3
 8000860:	3708      	adds	r7, #8
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	24000000 	.word	0x24000000
 800086c:	0800aed8 	.word	0x0800aed8

08000870 <OV5640_ConfigureCamera>:
HAL_StatusTypeDef OV5640_ConfigureCamera(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	b09c      	sub	sp, #112	@ 0x70
 8000874:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t resetValue = 0x0;
 800087c:	2300      	movs	r3, #0
 800087e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	OV5640_ReadReg(OV5640_SOFTWARE_RESET, &resetValue);
 8000882:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 8000886:	4619      	mov	r1, r3
 8000888:	f243 0008 	movw	r0, #12296	@ 0x3008
 800088c:	f7ff ff18 	bl	80006c0 <OV5640_ReadReg>
	resetValue |=0x80;
 8000890:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000894:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	OV5640_WriteReg(OV5640_SOFTWARE_RESET, resetValue);
 800089e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80008a2:	4619      	mov	r1, r3
 80008a4:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008a8:	f7ff feea 	bl	8000680 <OV5640_WriteReg>
	HAL_Delay(10);
 80008ac:	200a      	movs	r0, #10
 80008ae:	f001 fc23 	bl	80020f8 <HAL_Delay>
	resetValue &= ~0x80;
 80008b2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80008b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	OV5640_WriteReg(OV5640_SOFTWARE_RESET, resetValue);
 80008c0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80008c4:	4619      	mov	r1, r3
 80008c6:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008ca:	f7ff fed9 	bl	8000680 <OV5640_WriteReg>
	HAL_Delay(100);
 80008ce:	2064      	movs	r0, #100	@ 0x64
 80008d0:	f001 fc12 	bl	80020f8 <HAL_Delay>

	status |= OV5640_SetResolution();
 80008d4:	f7ff ff56 	bl	8000784 <OV5640_SetResolution>
 80008d8:	4603      	mov	r3, r0
 80008da:	461a      	mov	r2, r3
 80008dc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80008e0:	4313      	orrs	r3, r2
 80008e2:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	status |= OV5640_SetFormat();
 80008e6:	f7ff ffa1 	bl	800082c <OV5640_SetFormat>
 80008ea:	4603      	mov	r3, r0
 80008ec:	461a      	mov	r2, r3
 80008ee:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80008f2:	4313      	orrs	r3, r2
 80008f4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	status |= OV5640_WriteReg(OV5640_POLARITY_CTRL, OV5640_POLARITY);
 80008f8:	2122      	movs	r1, #34	@ 0x22
 80008fa:	f244 7040 	movw	r0, #18240	@ 0x4740
 80008fe:	f7ff febf 	bl	8000680 <OV5640_WriteReg>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800090a:	4313      	orrs	r3, r2
 800090c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	status |= OV5640_WriteReg(0x3017, 0xFF);
 8000910:	21ff      	movs	r1, #255	@ 0xff
 8000912:	f243 0017 	movw	r0, #12311	@ 0x3017
 8000916:	f7ff feb3 	bl	8000680 <OV5640_WriteReg>
 800091a:	4603      	mov	r3, r0
 800091c:	461a      	mov	r2, r3
 800091e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000922:	4313      	orrs	r3, r2
 8000924:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t heightH = 0, heightL = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 800092e:	2300      	movs	r3, #0
 8000930:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
	OV5640_ReadReg(OV5640_REG_OUT_HEIGHT_H, &heightH);
 8000934:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 8000938:	4619      	mov	r1, r3
 800093a:	f643 000a 	movw	r0, #14346	@ 0x380a
 800093e:	f7ff febf 	bl	80006c0 <OV5640_ReadReg>
	OV5640_ReadReg(OV5640_REG_OUT_HEIGHT_L, &heightL);
 8000942:	f107 0369 	add.w	r3, r7, #105	@ 0x69
 8000946:	4619      	mov	r1, r3
 8000948:	f643 000b 	movw	r0, #14347	@ 0x380b
 800094c:	f7ff feb8 	bl	80006c0 <OV5640_ReadReg>
	char buff3[30];
	sprintf(buff3, "Height H: %d, L: %d\n\r", heightH, heightL);
 8000950:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000954:	461a      	mov	r2, r3
 8000956:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 800095a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800095e:	4947      	ldr	r1, [pc, #284]	@ (8000a7c <OV5640_ConfigureCamera+0x20c>)
 8000960:	f009 fdb8 	bl	800a4d4 <siprintf>
	HAL_UART_Transmit(&huart3, buff3, strlen(buff3), HAL_MAX_DELAY);
 8000964:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fcb9 	bl	80002e0 <strlen>
 800096e:	4603      	mov	r3, r0
 8000970:	b29a      	uxth	r2, r3
 8000972:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8000976:	f04f 33ff 	mov.w	r3, #4294967295
 800097a:	4841      	ldr	r0, [pc, #260]	@ (8000a80 <OV5640_ConfigureCamera+0x210>)
 800097c:	f008 f988 	bl	8008c90 <HAL_UART_Transmit>
	uint8_t pol1;
	OV5640_ReadReg(OV5640_REG_FORMAT_CTRL, &pol1);
 8000980:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 800098a:	f7ff fe99 	bl	80006c0 <OV5640_ReadReg>
	char buff2[20];
	sprintf(buff2, "format: : %d\n\r", pol1);
 800098e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000992:	461a      	mov	r2, r3
 8000994:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000998:	493a      	ldr	r1, [pc, #232]	@ (8000a84 <OV5640_ConfigureCamera+0x214>)
 800099a:	4618      	mov	r0, r3
 800099c:	f009 fd9a 	bl	800a4d4 <siprintf>
	HAL_UART_Transmit(&huart3, buff2, strlen(buff2), HAL_MAX_DELAY);
 80009a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fc9b 	bl	80002e0 <strlen>
 80009aa:	4603      	mov	r3, r0
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	4832      	ldr	r0, [pc, #200]	@ (8000a80 <OV5640_ConfigureCamera+0x210>)
 80009b8:	f008 f96a 	bl	8008c90 <HAL_UART_Transmit>
	OV5640_WriteReg(0x503D, 0x80);
 80009bc:	2180      	movs	r1, #128	@ 0x80
 80009be:	f245 003d 	movw	r0, #20541	@ 0x503d
 80009c2:	f7ff fe5d 	bl	8000680 <OV5640_WriteReg>
	HAL_Delay(10);
 80009c6:	200a      	movs	r0, #10
 80009c8:	f001 fb96 	bl	80020f8 <HAL_Delay>
	uint16_t result = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	uint8_t resultL = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t resultH = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	//write format for format control register to make format rgb565
	char buff5[20];
	OV5640_ReadReg(OV5640_REG_OUT_HEIGHT_L, &resultL);
 80009de:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80009e2:	4619      	mov	r1, r3
 80009e4:	f643 000b 	movw	r0, #14347	@ 0x380b
 80009e8:	f7ff fe6a 	bl	80006c0 <OV5640_ReadReg>
	OV5640_ReadReg(OV5640_REG_OUT_HEIGHT_H, &resultH);
 80009ec:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80009f0:	4619      	mov	r1, r3
 80009f2:	f643 000a 	movw	r0, #14346	@ 0x380a
 80009f6:	f7ff fe63 	bl	80006c0 <OV5640_ReadReg>
	result = (resultH<<8)+resultL;
 80009fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80009fe:	021b      	lsls	r3, r3, #8
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000a06:	4413      	add	r3, r2
 8000a08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

	sprintf(buff5, "result height: %d\n\r", result);
 8000a0c:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8000a10:	f107 0318 	add.w	r3, r7, #24
 8000a14:	491c      	ldr	r1, [pc, #112]	@ (8000a88 <OV5640_ConfigureCamera+0x218>)
 8000a16:	4618      	mov	r0, r3
 8000a18:	f009 fd5c 	bl	800a4d4 <siprintf>
	HAL_UART_Transmit(&huart3, buff5, strlen(buff5), HAL_MAX_DELAY);
 8000a1c:	f107 0318 	add.w	r3, r7, #24
 8000a20:	4618      	mov	r0, r3
 8000a22:	f7ff fc5d 	bl	80002e0 <strlen>
 8000a26:	4603      	mov	r3, r0
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	f107 0118 	add.w	r1, r7, #24
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	4813      	ldr	r0, [pc, #76]	@ (8000a80 <OV5640_ConfigureCamera+0x210>)
 8000a34:	f008 f92c 	bl	8008c90 <HAL_UART_Transmit>
	uint8_t result1 = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	75fb      	strb	r3, [r7, #23]
	OV5640_ReadReg(OV5640_REG_OUT_WIDTH_L, &result1);
 8000a3c:	f107 0317 	add.w	r3, r7, #23
 8000a40:	4619      	mov	r1, r3
 8000a42:	f643 0009 	movw	r0, #14345	@ 0x3809
 8000a46:	f7ff fe3b 	bl	80006c0 <OV5640_ReadReg>
	char buff4[20];
	sprintf(buff4, "width: %d\n\r", result1);
 8000a4a:	7dfb      	ldrb	r3, [r7, #23]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	463b      	mov	r3, r7
 8000a50:	490e      	ldr	r1, [pc, #56]	@ (8000a8c <OV5640_ConfigureCamera+0x21c>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f009 fd3e 	bl	800a4d4 <siprintf>

	HAL_UART_Transmit(&huart3, buff4, strlen(buff4), HAL_MAX_DELAY);
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fc40 	bl	80002e0 <strlen>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4639      	mov	r1, r7
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <OV5640_ConfigureCamera+0x210>)
 8000a6c:	f008 f910 	bl	8008c90 <HAL_UART_Transmit>
	return status;
 8000a70:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f



}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3770      	adds	r7, #112	@ 0x70
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	0800ae48 	.word	0x0800ae48
 8000a80:	24025bfc 	.word	0x24025bfc
 8000a84:	0800ae60 	.word	0x0800ae60
 8000a88:	0800ae70 	.word	0x0800ae70
 8000a8c:	0800ae84 	.word	0x0800ae84

08000a90 <frameCapture>:
void frameCapture(void){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08c      	sub	sp, #48	@ 0x30
 8000a94:	af00      	add	r7, sp, #0
	__HAL_RCC_DCMI_CLK_ENABLE();
 8000a96:	4b3a      	ldr	r3, [pc, #232]	@ (8000b80 <frameCapture+0xf0>)
 8000a98:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000a9c:	4a38      	ldr	r2, [pc, #224]	@ (8000b80 <frameCapture+0xf0>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000aa6:	4b36      	ldr	r3, [pc, #216]	@ (8000b80 <frameCapture+0xf0>)
 8000aa8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000aac:	f003 0301 	and.w	r3, r3, #1
 8000ab0:	623b      	str	r3, [r7, #32]
 8000ab2:	6a3b      	ldr	r3, [r7, #32]

	uint16_t width = OV5640_Resolutions[activeCameraConfigPtr->resolution].width;
 8000ab4:	4b33      	ldr	r3, [pc, #204]	@ (8000b84 <frameCapture+0xf4>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	4b32      	ldr	r3, [pc, #200]	@ (8000b88 <frameCapture+0xf8>)
 8000abe:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000ac2:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t height = OV5640_Resolutions[activeCameraConfigPtr->resolution].height;
 8000ac4:	4b2f      	ldr	r3, [pc, #188]	@ (8000b84 <frameCapture+0xf4>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	4a2f      	ldr	r2, [pc, #188]	@ (8000b88 <frameCapture+0xf8>)
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	4413      	add	r3, r2
 8000ad0:	885b      	ldrh	r3, [r3, #2]
 8000ad2:	853b      	strh	r3, [r7, #40]	@ 0x28
	uint8_t pixelSize = OV5640_Formats[activeCameraConfigPtr->pixelFormat].bytesPerPixel;
 8000ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b84 <frameCapture+0xf4>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	785b      	ldrb	r3, [r3, #1]
 8000ada:	4a2c      	ldr	r2, [pc, #176]	@ (8000b8c <frameCapture+0xfc>)
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	4413      	add	r3, r2
 8000ae0:	885b      	ldrh	r3, [r3, #2]
 8000ae2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	static uint32_t frameBuffer[240*320/2];

	// Enable DCMI
	DCMI->CR |= DCMI_CR_ENABLE;
 8000ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b90 <frameCapture+0x100>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a29      	ldr	r2, [pc, #164]	@ (8000b90 <frameCapture+0x100>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af0:	6013      	str	r3, [r2, #0]

	// Wait for VSYNC to go high (start of frame)
	while(!(DCMI->SR & DCMI_SR_VSYNC));
 8000af2:	bf00      	nop
 8000af4:	4b26      	ldr	r3, [pc, #152]	@ (8000b90 <frameCapture+0x100>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d0f9      	beq.n	8000af4 <frameCapture+0x64>

	// Wait for VSYNC to go low (active frame period)
	while(DCMI->SR & DCMI_SR_VSYNC);
 8000b00:	bf00      	nop
 8000b02:	4b23      	ldr	r3, [pc, #140]	@ (8000b90 <frameCapture+0x100>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d1f9      	bne.n	8000b02 <frameCapture+0x72>

	// Now capture data during active frame
	DCMI->CR |= DCMI_CR_CAPTURE;
 8000b0e:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <frameCapture+0x100>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a1f      	ldr	r2, [pc, #124]	@ (8000b90 <frameCapture+0x100>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6013      	str	r3, [r2, #0]

	// Read some pixels when FIFO has data
	for(int i = 0; i < 10 && i < sizeof(frameBuffer)/4; i++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b1e:	e024      	b.n	8000b6a <frameCapture+0xda>
		// Wait for data to be available
		while(!(DCMI->SR & DCMI_SR_FNE));  // FIFO not empty
 8000b20:	bf00      	nop
 8000b22:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <frameCapture+0x100>)
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d0f9      	beq.n	8000b22 <frameCapture+0x92>
		frameBuffer[i] = DCMI->DR;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	@ (8000b90 <frameCapture+0x100>)
 8000b30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b32:	4918      	ldr	r1, [pc, #96]	@ (8000b94 <frameCapture+0x104>)
 8000b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		char pixelBuff[30];
		sprintf(pixelBuff, "Pixel %d: 0x%08lX\n\r", i, frameBuffer[i]);
 8000b3a:	4a16      	ldr	r2, [pc, #88]	@ (8000b94 <frameCapture+0x104>)
 8000b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b42:	4638      	mov	r0, r7
 8000b44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b46:	4914      	ldr	r1, [pc, #80]	@ (8000b98 <frameCapture+0x108>)
 8000b48:	f009 fcc4 	bl	800a4d4 <siprintf>
		HAL_UART_Transmit(&huart3, pixelBuff, strlen(pixelBuff), HAL_MAX_DELAY);
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fbc6 	bl	80002e0 <strlen>
 8000b54:	4603      	mov	r3, r0
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	4639      	mov	r1, r7
 8000b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5e:	480f      	ldr	r0, [pc, #60]	@ (8000b9c <frameCapture+0x10c>)
 8000b60:	f008 f896 	bl	8008c90 <HAL_UART_Transmit>
	for(int i = 0; i < 10 && i < sizeof(frameBuffer)/4; i++) {
 8000b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b66:	3301      	adds	r3, #1
 8000b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b6c:	2b09      	cmp	r3, #9
 8000b6e:	dc03      	bgt.n	8000b78 <frameCapture+0xe8>
 8000b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b72:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000b76:	d3d3      	bcc.n	8000b20 <frameCapture+0x90>
	}

}
 8000b78:	bf00      	nop
 8000b7a:	3730      	adds	r7, #48	@ 0x30
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	58024400 	.word	0x58024400
 8000b84:	24000000 	.word	0x24000000
 8000b88:	0800aecc 	.word	0x0800aecc
 8000b8c:	0800aed8 	.word	0x0800aed8
 8000b90:	48020000 	.word	0x48020000
 8000b94:	24000144 	.word	0x24000144
 8000b98:	0800ae90 	.word	0x0800ae90
 8000b9c:	24025bfc 	.word	0x24025bfc

08000ba0 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000ba4:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <MX_DCMI_Init+0x60>)
 8000ba6:	4a17      	ldr	r2, [pc, #92]	@ (8000c04 <MX_DCMI_Init+0x64>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <MX_DCMI_Init+0x60>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <MX_DCMI_Init+0x60>)
 8000bb2:	2220      	movs	r2, #32
 8000bb4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <MX_DCMI_Init+0x60>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000bbc:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <MX_DCMI_Init+0x60>)
 8000bbe:	2240      	movs	r2, #64	@ 0x40
 8000bc0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <MX_DCMI_Init+0x60>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	@ (8000c00 <MX_DCMI_Init+0x60>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <MX_DCMI_Init+0x60>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <MX_DCMI_Init+0x60>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <MX_DCMI_Init+0x60>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000be0:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <MX_DCMI_Init+0x60>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000be6:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <MX_DCMI_Init+0x60>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	@ (8000c00 <MX_DCMI_Init+0x60>)
 8000bee:	f001 fbd7 	bl	80023a0 <HAL_DCMI_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000bf8:	f000 fcd4 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	24025944 	.word	0x24025944
 8000c04:	48020000 	.word	0x48020000

08000c08 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08e      	sub	sp, #56	@ 0x38
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a65      	ldr	r2, [pc, #404]	@ (8000dbc <HAL_DCMI_MspInit+0x1b4>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f040 80c3 	bne.w	8000db2 <HAL_DCMI_MspInit+0x1aa>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000c2c:	4b64      	ldr	r3, [pc, #400]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000c2e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000c32:	4a63      	ldr	r2, [pc, #396]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000c3c:	4b60      	ldr	r3, [pc, #384]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000c3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	623b      	str	r3, [r7, #32]
 8000c48:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4a:	4b5d      	ldr	r3, [pc, #372]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c50:	4a5b      	ldr	r2, [pc, #364]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5a:	4b59      	ldr	r3, [pc, #356]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b55      	ldr	r3, [pc, #340]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6e:	4a54      	ldr	r2, [pc, #336]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c78:	4b51      	ldr	r3, [pc, #324]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
 8000c84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c86:	4b4e      	ldr	r3, [pc, #312]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	4a4c      	ldr	r2, [pc, #304]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000c8e:	f043 0304 	orr.w	r3, r3, #4
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c96:	4b4a      	ldr	r3, [pc, #296]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	f003 0304 	and.w	r3, r3, #4
 8000ca0:	617b      	str	r3, [r7, #20]
 8000ca2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca4:	4b46      	ldr	r3, [pc, #280]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000caa:	4a45      	ldr	r2, [pc, #276]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000cac:	f043 0308 	orr.w	r3, r3, #8
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb4:	4b42      	ldr	r3, [pc, #264]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cba:	f003 0308 	and.w	r3, r3, #8
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b3f      	ldr	r3, [pc, #252]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	4a3d      	ldr	r2, [pc, #244]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd2:	4b3b      	ldr	r3, [pc, #236]	@ (8000dc0 <HAL_DCMI_MspInit+0x1b8>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000ce0:	2370      	movs	r3, #112	@ 0x70
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cec:	2300      	movs	r3, #0
 8000cee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000cf0:	230d      	movs	r3, #13
 8000cf2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cf4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4832      	ldr	r0, [pc, #200]	@ (8000dc4 <HAL_DCMI_MspInit+0x1bc>)
 8000cfc:	f002 fb0c 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d00:	2310      	movs	r3, #16
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d04:	2302      	movs	r3, #2
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d10:	230d      	movs	r3, #13
 8000d12:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d18:	4619      	mov	r1, r3
 8000d1a:	482b      	ldr	r0, [pc, #172]	@ (8000dc8 <HAL_DCMI_MspInit+0x1c0>)
 8000d1c:	f002 fafc 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d20:	2340      	movs	r3, #64	@ 0x40
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d24:	2302      	movs	r3, #2
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d30:	230d      	movs	r3, #13
 8000d32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4823      	ldr	r0, [pc, #140]	@ (8000dc8 <HAL_DCMI_MspInit+0x1c0>)
 8000d3c:	f002 faec 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d40:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d52:	230d      	movs	r3, #13
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	481b      	ldr	r0, [pc, #108]	@ (8000dcc <HAL_DCMI_MspInit+0x1c4>)
 8000d5e:	f002 fadb 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d62:	2308      	movs	r3, #8
 8000d64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d72:	230d      	movs	r3, #13
 8000d74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4814      	ldr	r0, [pc, #80]	@ (8000dd0 <HAL_DCMI_MspInit+0x1c8>)
 8000d7e:	f002 facb 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d82:	2380      	movs	r3, #128	@ 0x80
 8000d84:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d92:	230d      	movs	r3, #13
 8000d94:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <HAL_DCMI_MspInit+0x1cc>)
 8000d9e:	f002 fabb 	bl	8003318 <HAL_GPIO_Init>

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	204e      	movs	r0, #78	@ 0x4e
 8000da8:	f001 fac5 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000dac:	204e      	movs	r0, #78	@ 0x4e
 8000dae:	f001 fadc 	bl	800236a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000db2:	bf00      	nop
 8000db4:	3738      	adds	r7, #56	@ 0x38
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	48020000 	.word	0x48020000
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	58021000 	.word	0x58021000
 8000dc8:	58020000 	.word	0x58020000
 8000dcc:	58020800 	.word	0x58020800
 8000dd0:	58020c00 	.word	0x58020c00
 8000dd4:	58020400 	.word	0x58020400

08000dd8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <MX_ETH_Init+0x80>)
 8000dde:	4a1f      	ldr	r2, [pc, #124]	@ (8000e5c <MX_ETH_Init+0x84>)
 8000de0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000de2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e60 <MX_ETH_Init+0x88>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <MX_ETH_Init+0x88>)
 8000dea:	2280      	movs	r2, #128	@ 0x80
 8000dec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <MX_ETH_Init+0x88>)
 8000df0:	22e1      	movs	r2, #225	@ 0xe1
 8000df2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <MX_ETH_Init+0x88>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <MX_ETH_Init+0x88>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e00:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <MX_ETH_Init+0x88>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_ETH_Init+0x80>)
 8000e08:	4a15      	ldr	r2, [pc, #84]	@ (8000e60 <MX_ETH_Init+0x88>)
 8000e0a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_ETH_Init+0x80>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_ETH_Init+0x80>)
 8000e14:	4a13      	ldr	r2, [pc, #76]	@ (8000e64 <MX_ETH_Init+0x8c>)
 8000e16:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <MX_ETH_Init+0x80>)
 8000e1a:	4a13      	ldr	r2, [pc, #76]	@ (8000e68 <MX_ETH_Init+0x90>)
 8000e1c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <MX_ETH_Init+0x80>)
 8000e20:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000e24:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e26:	480c      	ldr	r0, [pc, #48]	@ (8000e58 <MX_ETH_Init+0x80>)
 8000e28:	f001 fe42 	bl	8002ab0 <HAL_ETH_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000e32:	f000 fbb7 	bl	80015a4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e36:	2238      	movs	r2, #56	@ 0x38
 8000e38:	2100      	movs	r1, #0
 8000e3a:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <MX_ETH_Init+0x94>)
 8000e3c:	f009 fb6a 	bl	800a514 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e40:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <MX_ETH_Init+0x94>)
 8000e42:	2221      	movs	r2, #33	@ 0x21
 8000e44:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <MX_ETH_Init+0x94>)
 8000e48:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e4c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e4e:	4b07      	ldr	r3, [pc, #28]	@ (8000e6c <MX_ETH_Init+0x94>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	240259cc 	.word	0x240259cc
 8000e5c:	40028000 	.word	0x40028000
 8000e60:	24025a7c 	.word	0x24025a7c
 8000e64:	240000c4 	.word	0x240000c4
 8000e68:	24000064 	.word	0x24000064
 8000e6c:	24025994 	.word	0x24025994

08000e70 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08e      	sub	sp, #56	@ 0x38
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a59      	ldr	r2, [pc, #356]	@ (8000ff4 <HAL_ETH_MspInit+0x184>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	f040 80ab 	bne.w	8000fea <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e94:	4b58      	ldr	r3, [pc, #352]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000e96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e9a:	4a57      	ldr	r2, [pc, #348]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000e9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ea0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ea4:	4b54      	ldr	r3, [pc, #336]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000ea6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eaa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000eae:	623b      	str	r3, [r7, #32]
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000eb2:	4b51      	ldr	r3, [pc, #324]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000eb4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eb8:	4a4f      	ldr	r2, [pc, #316]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000eba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ebe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ec2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000ec4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ec8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ecc:	61fb      	str	r3, [r7, #28]
 8000ece:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ed0:	4b49      	ldr	r3, [pc, #292]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000ed2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ed6:	4a48      	ldr	r2, [pc, #288]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000edc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ee0:	4b45      	ldr	r3, [pc, #276]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000ee2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b42      	ldr	r3, [pc, #264]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef4:	4a40      	ldr	r2, [pc, #256]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000ef6:	f043 0304 	orr.w	r3, r3, #4
 8000efa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000efe:	4b3e      	ldr	r3, [pc, #248]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f12:	4a39      	ldr	r2, [pc, #228]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f1c:	4b36      	ldr	r3, [pc, #216]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f30:	4a31      	ldr	r2, [pc, #196]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f40:	f003 0302 	and.w	r3, r3, #2
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f48:	4b2b      	ldr	r3, [pc, #172]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000f50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f58:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <HAL_ETH_MspInit+0x188>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f66:	2332      	movs	r3, #50	@ 0x32
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f76:	230b      	movs	r3, #11
 8000f78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	481e      	ldr	r0, [pc, #120]	@ (8000ffc <HAL_ETH_MspInit+0x18c>)
 8000f82:	f002 f9c9 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f86:	2386      	movs	r3, #134	@ 0x86
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	2300      	movs	r3, #0
 8000f94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f96:	230b      	movs	r3, #11
 8000f98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4817      	ldr	r0, [pc, #92]	@ (8001000 <HAL_ETH_MspInit+0x190>)
 8000fa2:	f002 f9b9 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000faa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb8:	230b      	movs	r3, #11
 8000fba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4810      	ldr	r0, [pc, #64]	@ (8001004 <HAL_ETH_MspInit+0x194>)
 8000fc4:	f002 f9a8 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fc8:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fda:	230b      	movs	r3, #11
 8000fdc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4808      	ldr	r0, [pc, #32]	@ (8001008 <HAL_ETH_MspInit+0x198>)
 8000fe6:	f002 f997 	bl	8003318 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3738      	adds	r7, #56	@ 0x38
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40028000 	.word	0x40028000
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	58020800 	.word	0x58020800
 8001000:	58020000 	.word	0x58020000
 8001004:	58020400 	.word	0x58020400
 8001008:	58021800 	.word	0x58021800

0800100c <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	@ 0x30
 8001010:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001022:	4b7e      	ldr	r3, [pc, #504]	@ (800121c <MX_GPIO_Init+0x210>)
 8001024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001028:	4a7c      	ldr	r2, [pc, #496]	@ (800121c <MX_GPIO_Init+0x210>)
 800102a:	f043 0310 	orr.w	r3, r3, #16
 800102e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001032:	4b7a      	ldr	r3, [pc, #488]	@ (800121c <MX_GPIO_Init+0x210>)
 8001034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001038:	f003 0310 	and.w	r3, r3, #16
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001040:	4b76      	ldr	r3, [pc, #472]	@ (800121c <MX_GPIO_Init+0x210>)
 8001042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001046:	4a75      	ldr	r2, [pc, #468]	@ (800121c <MX_GPIO_Init+0x210>)
 8001048:	f043 0304 	orr.w	r3, r3, #4
 800104c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001050:	4b72      	ldr	r3, [pc, #456]	@ (800121c <MX_GPIO_Init+0x210>)
 8001052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	617b      	str	r3, [r7, #20]
 800105c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105e:	4b6f      	ldr	r3, [pc, #444]	@ (800121c <MX_GPIO_Init+0x210>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	4a6d      	ldr	r2, [pc, #436]	@ (800121c <MX_GPIO_Init+0x210>)
 8001066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800106a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800106e:	4b6b      	ldr	r3, [pc, #428]	@ (800121c <MX_GPIO_Init+0x210>)
 8001070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001074:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107c:	4b67      	ldr	r3, [pc, #412]	@ (800121c <MX_GPIO_Init+0x210>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001082:	4a66      	ldr	r2, [pc, #408]	@ (800121c <MX_GPIO_Init+0x210>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800108c:	4b63      	ldr	r3, [pc, #396]	@ (800121c <MX_GPIO_Init+0x210>)
 800108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	4b60      	ldr	r3, [pc, #384]	@ (800121c <MX_GPIO_Init+0x210>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	4a5e      	ldr	r2, [pc, #376]	@ (800121c <MX_GPIO_Init+0x210>)
 80010a2:	f043 0302 	orr.w	r3, r3, #2
 80010a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010aa:	4b5c      	ldr	r3, [pc, #368]	@ (800121c <MX_GPIO_Init+0x210>)
 80010ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010b8:	4b58      	ldr	r3, [pc, #352]	@ (800121c <MX_GPIO_Init+0x210>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010be:	4a57      	ldr	r2, [pc, #348]	@ (800121c <MX_GPIO_Init+0x210>)
 80010c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c8:	4b54      	ldr	r3, [pc, #336]	@ (800121c <MX_GPIO_Init+0x210>)
 80010ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d6:	4b51      	ldr	r3, [pc, #324]	@ (800121c <MX_GPIO_Init+0x210>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010dc:	4a4f      	ldr	r2, [pc, #316]	@ (800121c <MX_GPIO_Init+0x210>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e6:	4b4d      	ldr	r3, [pc, #308]	@ (800121c <MX_GPIO_Init+0x210>)
 80010e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2101      	movs	r1, #1
 80010f8:	4849      	ldr	r0, [pc, #292]	@ (8001220 <MX_GPIO_Init+0x214>)
 80010fa:	f002 fabd 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f245 0101 	movw	r1, #20481	@ 0x5001
 8001104:	4847      	ldr	r0, [pc, #284]	@ (8001224 <MX_GPIO_Init+0x218>)
 8001106:	f002 fab7 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_DC_Pin|CAMERA_RST_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	f249 4102 	movw	r1, #37890	@ 0x9402
 8001110:	4845      	ldr	r0, [pc, #276]	@ (8001228 <MX_GPIO_Init+0x21c>)
 8001112:	f002 fab1 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800111c:	4843      	ldr	r0, [pc, #268]	@ (800122c <MX_GPIO_Init+0x220>)
 800111e:	f002 faab 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2102      	movs	r1, #2
 8001126:	4842      	ldr	r0, [pc, #264]	@ (8001230 <MX_GPIO_Init+0x224>)
 8001128:	f002 faa6 	bl	8003678 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800112c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	483c      	ldr	r0, [pc, #240]	@ (8001234 <MX_GPIO_Init+0x228>)
 8001142:	f002 f8e9 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin;
 8001146:	2301      	movs	r3, #1
 8001148:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CAMERA_PWDN_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 031c 	add.w	r3, r7, #28
 800115a:	4619      	mov	r1, r3
 800115c:	4830      	ldr	r0, [pc, #192]	@ (8001220 <MX_GPIO_Init+0x214>)
 800115e:	f002 f8db 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin;
 8001162:	f245 0301 	movw	r3, #20481	@ 0x5001
 8001166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	482a      	ldr	r0, [pc, #168]	@ (8001224 <MX_GPIO_Init+0x218>)
 800117c:	f002 f8cc 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|CAMERA_RST_Pin|LCD_RESET_Pin|LCD_CS_Pin;
 8001180:	f249 4302 	movw	r3, #37890	@ 0x9402
 8001184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001186:	2301      	movs	r3, #1
 8001188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001192:	f107 031c 	add.w	r3, r7, #28
 8001196:	4619      	mov	r1, r3
 8001198:	4823      	ldr	r0, [pc, #140]	@ (8001228 <MX_GPIO_Init+0x21c>)
 800119a:	f002 f8bd 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800119e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a4:	2301      	movs	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ac:	2300      	movs	r3, #0
 80011ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	481d      	ldr	r0, [pc, #116]	@ (800122c <MX_GPIO_Init+0x220>)
 80011b8:	f002 f8ae 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80011bc:	2380      	movs	r3, #128	@ 0x80
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4815      	ldr	r0, [pc, #84]	@ (8001228 <MX_GPIO_Init+0x21c>)
 80011d2:	f002 f8a1 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	480b      	ldr	r0, [pc, #44]	@ (8001220 <MX_GPIO_Init+0x214>)
 80011f4:	f002 f890 	bl	8003318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011f8:	2302      	movs	r3, #2
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	4808      	ldr	r0, [pc, #32]	@ (8001230 <MX_GPIO_Init+0x224>)
 8001210:	f002 f882 	bl	8003318 <HAL_GPIO_Init>

}
 8001214:	bf00      	nop
 8001216:	3730      	adds	r7, #48	@ 0x30
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	58024400 	.word	0x58024400
 8001220:	58020000 	.word	0x58020000
 8001224:	58020400 	.word	0x58020400
 8001228:	58021800 	.word	0x58021800
 800122c:	58020c00 	.word	0x58020c00
 8001230:	58021000 	.word	0x58021000
 8001234:	58020800 	.word	0x58020800

08001238 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800123c:	4b1b      	ldr	r3, [pc, #108]	@ (80012ac <MX_I2C1_Init+0x74>)
 800123e:	4a1c      	ldr	r2, [pc, #112]	@ (80012b0 <MX_I2C1_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60000008;
 8001242:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001244:	4a1b      	ldr	r2, [pc, #108]	@ (80012b4 <MX_I2C1_Init+0x7c>)
 8001246:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001248:	4b18      	ldr	r3, [pc, #96]	@ (80012ac <MX_I2C1_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124e:	4b17      	ldr	r3, [pc, #92]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001250:	2201      	movs	r2, #1
 8001252:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001254:	4b15      	ldr	r3, [pc, #84]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800125a:	4b14      	ldr	r3, [pc, #80]	@ (80012ac <MX_I2C1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001260:	4b12      	ldr	r3, [pc, #72]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001266:	4b11      	ldr	r3, [pc, #68]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800126c:	4b0f      	ldr	r3, [pc, #60]	@ (80012ac <MX_I2C1_Init+0x74>)
 800126e:	2200      	movs	r2, #0
 8001270:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001272:	480e      	ldr	r0, [pc, #56]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001274:	f002 fa1a 	bl	80036ac <HAL_I2C_Init>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800127e:	f000 f991 	bl	80015a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001282:	2100      	movs	r1, #0
 8001284:	4809      	ldr	r0, [pc, #36]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001286:	f002 ff9d 	bl	80041c4 <HAL_I2CEx_ConfigAnalogFilter>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001290:	f000 f988 	bl	80015a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001294:	2100      	movs	r1, #0
 8001296:	4805      	ldr	r0, [pc, #20]	@ (80012ac <MX_I2C1_Init+0x74>)
 8001298:	f002 ffdf 	bl	800425a <HAL_I2CEx_ConfigDigitalFilter>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012a2:	f000 f97f 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	24025a84 	.word	0x24025a84
 80012b0:	40005400 	.word	0x40005400
 80012b4:	60000008 	.word	0x60000008

080012b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b0ba      	sub	sp, #232	@ 0xe8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	22c0      	movs	r2, #192	@ 0xc0
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f009 f91b 	bl	800a514 <memset>
  if(i2cHandle->Instance==I2C1)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a30      	ldr	r2, [pc, #192]	@ (80013a4 <HAL_I2C_MspInit+0xec>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d158      	bne.n	800139a <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012e8:	f04f 0208 	mov.w	r2, #8
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 8;
 80012f4:	2308      	movs	r3, #8
 80012f6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 150;
 80012f8:	2396      	movs	r3, #150	@ 0x96
 80012fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 10;
 80012fc:	230a      	movs	r3, #10
 80012fe:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8001300:	230a      	movs	r3, #10
 8001302:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 10;
 8001304:	230a      	movs	r3, #10
 8001306:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001308:	2300      	movs	r3, #0
 800130a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 800130c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001310:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8001316:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	4618      	mov	r0, r3
 8001324:	f004 f9d4 	bl	80056d0 <HAL_RCCEx_PeriphCLKConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 800132e:	f000 f939 	bl	80015a4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <HAL_I2C_MspInit+0xf0>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001338:	4a1b      	ldr	r2, [pc, #108]	@ (80013a8 <HAL_I2C_MspInit+0xf0>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_I2C_MspInit+0xf0>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001350:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001354:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001358:	2312      	movs	r3, #18
 800135a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135e:	2301      	movs	r3, #1
 8001360:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800136a:	2304      	movs	r3, #4
 800136c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001374:	4619      	mov	r1, r3
 8001376:	480d      	ldr	r0, [pc, #52]	@ (80013ac <HAL_I2C_MspInit+0xf4>)
 8001378:	f001 ffce 	bl	8003318 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <HAL_I2C_MspInit+0xf0>)
 800137e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001382:	4a09      	ldr	r2, [pc, #36]	@ (80013a8 <HAL_I2C_MspInit+0xf0>)
 8001384:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001388:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800138c:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_I2C_MspInit+0xf0>)
 800138e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001392:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800139a:	bf00      	nop
 800139c:	37e8      	adds	r7, #232	@ 0xe8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40005400 	.word	0x40005400
 80013a8:	58024400 	.word	0x58024400
 80013ac:	58020400 	.word	0x58020400

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	@ 0x30
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b6:	f000 fe0d 	bl	8001fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ba:	f000 f871 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013be:	f7ff fe25 	bl	800100c <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013c2:	f000 fd2f 	bl	8001e24 <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 80013c6:	f7ff fbeb 	bl	8000ba0 <MX_DCMI_Init>
  MX_I2C1_Init();
 80013ca:	f7ff ff35 	bl	8001238 <MX_I2C1_Init>
  MX_SPI1_Init();
 80013ce:	f000 f8ef 	bl	80015b0 <MX_SPI1_Init>
  MX_TIM1_Init();
 80013d2:	f000 fb17 	bl	8001a04 <MX_TIM1_Init>
  MX_TIM4_Init();
 80013d6:	f000 fb6b 	bl	8001ab0 <MX_TIM4_Init>
  MX_ETH_Init();
 80013da:	f7ff fcfd 	bl	8000dd8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80013de:	f000 fc5b 	bl	8001c98 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  extern DCMI_HandleTypeDef hdcmi;
  HAL_StatusTypeDef cameraConfigStatus = OV5640_PowerUpSequence();
 80013e2:	f7ff f9a1 	bl	8000728 <OV5640_PowerUpSequence>
 80013e6:	4603      	mov	r3, r0
 80013e8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t reg1 = 0;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  OV5640_ReadReg(OV5640_POLARITY_CTRL,&reg1);
 80013f2:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80013f6:	4619      	mov	r1, r3
 80013f8:	f244 7040 	movw	r0, #18240	@ 0x4740
 80013fc:	f7ff f960 	bl	80006c0 <OV5640_ReadReg>
  char buffReg1[20];
  sprintf(buffReg1, "Polarity: %d\r\n", reg1);
 8001400:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001404:	461a      	mov	r2, r3
 8001406:	f107 0318 	add.w	r3, r7, #24
 800140a:	4920      	ldr	r1, [pc, #128]	@ (800148c <main+0xdc>)
 800140c:	4618      	mov	r0, r3
 800140e:	f009 f861 	bl	800a4d4 <siprintf>
  HAL_UART_Transmit(&huart3, buffReg1, strlen(buffReg1), HAL_MAX_DELAY);
 8001412:	f107 0318 	add.w	r3, r7, #24
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe ff62 	bl	80002e0 <strlen>
 800141c:	4603      	mov	r3, r0
 800141e:	b29a      	uxth	r2, r3
 8001420:	f107 0118 	add.w	r1, r7, #24
 8001424:	f04f 33ff 	mov.w	r3, #4294967295
 8001428:	4819      	ldr	r0, [pc, #100]	@ (8001490 <main+0xe0>)
 800142a:	f007 fc31 	bl	8008c90 <HAL_UART_Transmit>
	if (cameraConfigStatus == HAL_OK){
 800142e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001432:	2b00      	cmp	r3, #0
 8001434:	d113      	bne.n	800145e <main+0xae>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin, GPIO_PIN_SET);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800143c:	4815      	ldr	r0, [pc, #84]	@ (8001494 <main+0xe4>)
 800143e:	f002 f91b 	bl	8003678 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001442:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001446:	f000 fe57 	bl	80020f8 <HAL_Delay>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin,GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001450:	4810      	ldr	r0, [pc, #64]	@ (8001494 <main+0xe4>)
 8001452:	f002 f911 	bl	8003678 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001456:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800145a:	f000 fe4d 	bl	80020f8 <HAL_Delay>
	}

	frameCapture();
 800145e:	f7ff fb17 	bl	8000a90 <frameCapture>
	char buffFrame[20];
	sprintf(buffFrame, "Start of image: %d,\n\r", DCMI->DR);
 8001462:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <main+0xe8>)
 8001464:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	490c      	ldr	r1, [pc, #48]	@ (800149c <main+0xec>)
 800146a:	4618      	mov	r0, r3
 800146c:	f009 f832 	bl	800a4d4 <siprintf>
	HAL_UART_Transmit(&huart3, buffFrame, strlen(buffFrame),HAL_MAX_DELAY);
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4618      	mov	r0, r3
 8001474:	f7fe ff34 	bl	80002e0 <strlen>
 8001478:	4603      	mov	r3, r0
 800147a:	b29a      	uxth	r2, r3
 800147c:	1d39      	adds	r1, r7, #4
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	4803      	ldr	r0, [pc, #12]	@ (8001490 <main+0xe0>)
 8001484:	f007 fc04 	bl	8008c90 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <main+0xd8>
 800148c:	0800aea4 	.word	0x0800aea4
 8001490:	24025bfc 	.word	0x24025bfc
 8001494:	58020400 	.word	0x58020400
 8001498:	48020000 	.word	0x48020000
 800149c:	0800aeb4 	.word	0x0800aeb4

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b09c      	sub	sp, #112	@ 0x70
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014aa:	224c      	movs	r2, #76	@ 0x4c
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f009 f830 	bl	800a514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	2220      	movs	r2, #32
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f009 f82a 	bl	800a514 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f003 f86b 	bl	800459c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b34      	ldr	r3, [pc, #208]	@ (800159c <SystemClock_Config+0xfc>)
 80014cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ce:	4a33      	ldr	r2, [pc, #204]	@ (800159c <SystemClock_Config+0xfc>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80014d6:	4b31      	ldr	r3, [pc, #196]	@ (800159c <SystemClock_Config+0xfc>)
 80014d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	4b2f      	ldr	r3, [pc, #188]	@ (80015a0 <SystemClock_Config+0x100>)
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	4a2e      	ldr	r2, [pc, #184]	@ (80015a0 <SystemClock_Config+0x100>)
 80014e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014ea:	6193      	str	r3, [r2, #24]
 80014ec:	4b2c      	ldr	r3, [pc, #176]	@ (80015a0 <SystemClock_Config+0x100>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014f4:	603b      	str	r3, [r7, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014f8:	bf00      	nop
 80014fa:	4b29      	ldr	r3, [pc, #164]	@ (80015a0 <SystemClock_Config+0x100>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001502:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001506:	d1f8      	bne.n	80014fa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001508:	2321      	movs	r3, #33	@ 0x21
 800150a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800150c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001512:	2301      	movs	r3, #1
 8001514:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001516:	2302      	movs	r3, #2
 8001518:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800151a:	2302      	movs	r3, #2
 800151c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800151e:	2302      	movs	r3, #2
 8001520:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001522:	2360      	movs	r3, #96	@ 0x60
 8001524:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001526:	2304      	movs	r3, #4
 8001528:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800152a:	2308      	movs	r3, #8
 800152c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800152e:	2302      	movs	r3, #2
 8001530:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001532:	2308      	movs	r3, #8
 8001534:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001536:	2300      	movs	r3, #0
 8001538:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800153e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001542:	4618      	mov	r0, r3
 8001544:	f003 f874 	bl	8004630 <HAL_RCC_OscConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800154e:	f000 f829 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001552:	233f      	movs	r3, #63	@ 0x3f
 8001554:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001556:	2303      	movs	r3, #3
 8001558:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2101      	movs	r1, #1
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fcb4 	bl	8004ee4 <HAL_RCC_ClockConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001582:	f000 f80f 	bl	80015a4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8001586:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800158a:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 800158e:	2000      	movs	r0, #0
 8001590:	f003 fe5e 	bl	8005250 <HAL_RCC_MCOConfig>
}
 8001594:	bf00      	nop
 8001596:	3770      	adds	r7, #112	@ 0x70
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	58000400 	.word	0x58000400
 80015a0:	58024800 	.word	0x58024800

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <Error_Handler+0x8>

080015b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015b4:	4b28      	ldr	r3, [pc, #160]	@ (8001658 <MX_SPI1_Init+0xa8>)
 80015b6:	4a29      	ldr	r2, [pc, #164]	@ (800165c <MX_SPI1_Init+0xac>)
 80015b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015ba:	4b27      	ldr	r3, [pc, #156]	@ (8001658 <MX_SPI1_Init+0xa8>)
 80015bc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015c2:	4b25      	ldr	r3, [pc, #148]	@ (8001658 <MX_SPI1_Init+0xa8>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80015c8:	4b23      	ldr	r3, [pc, #140]	@ (8001658 <MX_SPI1_Init+0xa8>)
 80015ca:	2203      	movs	r2, #3
 80015cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015ce:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <MX_SPI1_Init+0xa8>)
 80015d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015d6:	4b20      	ldr	r3, [pc, #128]	@ (8001658 <MX_SPI1_Init+0xa8>)
 80015d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015dc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015de:	4b1e      	ldr	r3, [pc, #120]	@ (8001658 <MX_SPI1_Init+0xa8>)
 80015e0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001658 <MX_SPI1_Init+0xa8>)
 80015e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015ec:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001658 <MX_SPI1_Init+0xa8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <MX_SPI1_Init+0xa8>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015fa:	4b17      	ldr	r3, [pc, #92]	@ (8001658 <MX_SPI1_Init+0xa8>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001600:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <MX_SPI1_Init+0xa8>)
 8001602:	2200      	movs	r2, #0
 8001604:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001606:	4b14      	ldr	r3, [pc, #80]	@ (8001658 <MX_SPI1_Init+0xa8>)
 8001608:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800160c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800160e:	4b12      	ldr	r3, [pc, #72]	@ (8001658 <MX_SPI1_Init+0xa8>)
 8001610:	2200      	movs	r2, #0
 8001612:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001614:	4b10      	ldr	r3, [pc, #64]	@ (8001658 <MX_SPI1_Init+0xa8>)
 8001616:	2200      	movs	r2, #0
 8001618:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800161a:	4b0f      	ldr	r3, [pc, #60]	@ (8001658 <MX_SPI1_Init+0xa8>)
 800161c:	2200      	movs	r2, #0
 800161e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001620:	4b0d      	ldr	r3, [pc, #52]	@ (8001658 <MX_SPI1_Init+0xa8>)
 8001622:	2200      	movs	r2, #0
 8001624:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001626:	4b0c      	ldr	r3, [pc, #48]	@ (8001658 <MX_SPI1_Init+0xa8>)
 8001628:	2200      	movs	r2, #0
 800162a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800162c:	4b0a      	ldr	r3, [pc, #40]	@ (8001658 <MX_SPI1_Init+0xa8>)
 800162e:	2200      	movs	r2, #0
 8001630:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001632:	4b09      	ldr	r3, [pc, #36]	@ (8001658 <MX_SPI1_Init+0xa8>)
 8001634:	2200      	movs	r2, #0
 8001636:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001638:	4b07      	ldr	r3, [pc, #28]	@ (8001658 <MX_SPI1_Init+0xa8>)
 800163a:	2200      	movs	r2, #0
 800163c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800163e:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <MX_SPI1_Init+0xa8>)
 8001640:	2200      	movs	r2, #0
 8001642:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001644:	4804      	ldr	r0, [pc, #16]	@ (8001658 <MX_SPI1_Init+0xa8>)
 8001646:	f005 fe6f 	bl	8007328 <HAL_SPI_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001650:	f7ff ffa8 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001654:	bf00      	nop
 8001656:	bd80      	pop	{r7, pc}
 8001658:	24025ad8 	.word	0x24025ad8
 800165c:	40013000 	.word	0x40013000

08001660 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b0bc      	sub	sp, #240	@ 0xf0
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001678:	f107 0318 	add.w	r3, r7, #24
 800167c:	22c0      	movs	r2, #192	@ 0xc0
 800167e:	2100      	movs	r1, #0
 8001680:	4618      	mov	r0, r3
 8001682:	f008 ff47 	bl	800a514 <memset>
  if(spiHandle->Instance==SPI1)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a4b      	ldr	r2, [pc, #300]	@ (80017b8 <HAL_SPI_MspInit+0x158>)
 800168c:	4293      	cmp	r3, r2
 800168e:	f040 808e 	bne.w	80017ae <HAL_SPI_MspInit+0x14e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001692:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001696:	f04f 0300 	mov.w	r3, #0
 800169a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800169e:	2300      	movs	r3, #0
 80016a0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	4618      	mov	r0, r3
 80016a8:	f004 f812 	bl	80056d0 <HAL_RCCEx_PeriphCLKConfig>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80016b2:	f7ff ff77 	bl	80015a4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016b6:	4b41      	ldr	r3, [pc, #260]	@ (80017bc <HAL_SPI_MspInit+0x15c>)
 80016b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016bc:	4a3f      	ldr	r2, [pc, #252]	@ (80017bc <HAL_SPI_MspInit+0x15c>)
 80016be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016c6:	4b3d      	ldr	r3, [pc, #244]	@ (80017bc <HAL_SPI_MspInit+0x15c>)
 80016c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016d0:	617b      	str	r3, [r7, #20]
 80016d2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b39      	ldr	r3, [pc, #228]	@ (80017bc <HAL_SPI_MspInit+0x15c>)
 80016d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016da:	4a38      	ldr	r2, [pc, #224]	@ (80017bc <HAL_SPI_MspInit+0x15c>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016e4:	4b35      	ldr	r3, [pc, #212]	@ (80017bc <HAL_SPI_MspInit+0x15c>)
 80016e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f2:	4b32      	ldr	r3, [pc, #200]	@ (80017bc <HAL_SPI_MspInit+0x15c>)
 80016f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f8:	4a30      	ldr	r2, [pc, #192]	@ (80017bc <HAL_SPI_MspInit+0x15c>)
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001702:	4b2e      	ldr	r3, [pc, #184]	@ (80017bc <HAL_SPI_MspInit+0x15c>)
 8001704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001708:	f003 0308 	and.w	r3, r3, #8
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001710:	4b2a      	ldr	r3, [pc, #168]	@ (80017bc <HAL_SPI_MspInit+0x15c>)
 8001712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001716:	4a29      	ldr	r2, [pc, #164]	@ (80017bc <HAL_SPI_MspInit+0x15c>)
 8001718:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800171c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001720:	4b26      	ldr	r3, [pc, #152]	@ (80017bc <HAL_SPI_MspInit+0x15c>)
 8001722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001726:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800172e:	2320      	movs	r3, #32
 8001730:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001746:	2305      	movs	r3, #5
 8001748:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001750:	4619      	mov	r1, r3
 8001752:	481b      	ldr	r0, [pc, #108]	@ (80017c0 <HAL_SPI_MspInit+0x160>)
 8001754:	f001 fde0 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175e:	2302      	movs	r3, #2
 8001760:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176a:	2300      	movs	r3, #0
 800176c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001770:	2305      	movs	r3, #5
 8001772:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001776:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800177a:	4619      	mov	r1, r3
 800177c:	4811      	ldr	r0, [pc, #68]	@ (80017c4 <HAL_SPI_MspInit+0x164>)
 800177e:	f001 fdcb 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001782:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001786:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800179c:	2305      	movs	r3, #5
 800179e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017a6:	4619      	mov	r1, r3
 80017a8:	4807      	ldr	r0, [pc, #28]	@ (80017c8 <HAL_SPI_MspInit+0x168>)
 80017aa:	f001 fdb5 	bl	8003318 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017ae:	bf00      	nop
 80017b0:	37f0      	adds	r7, #240	@ 0xf0
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40013000 	.word	0x40013000
 80017bc:	58024400 	.word	0x58024400
 80017c0:	58020000 	.word	0x58020000
 80017c4:	58020c00 	.word	0x58020c00
 80017c8:	58021800 	.word	0x58021800

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b0a      	ldr	r3, [pc, #40]	@ (80017fc <HAL_MspInit+0x30>)
 80017d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017d8:	4a08      	ldr	r2, [pc, #32]	@ (80017fc <HAL_MspInit+0x30>)
 80017da:	f043 0302 	orr.w	r3, r3, #2
 80017de:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <HAL_MspInit+0x30>)
 80017e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	607b      	str	r3, [r7, #4]
 80017ee:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	58024400 	.word	0x58024400

08001800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <NMI_Handler+0x4>

08001808 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <HardFault_Handler+0x4>

08001810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <MemManage_Handler+0x4>

08001818 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <UsageFault_Handler+0x4>

08001828 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001852:	b580      	push	{r7, lr}
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001856:	f000 fc2f 	bl	80020b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <TIM4_IRQHandler+0x10>)
 8001866:	f006 f865 	bl	8007934 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	24025bb0 	.word	0x24025bb0

08001874 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <DCMI_IRQHandler+0x10>)
 800187a:	f000 fe0b 	bl	8002494 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	24025944 	.word	0x24025944

08001888 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001890:	4a14      	ldr	r2, [pc, #80]	@ (80018e4 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 8001892:	4b15      	ldr	r3, [pc, #84]	@ (80018e8 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 800189c:	4b13      	ldr	r3, [pc, #76]	@ (80018ec <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80018a4:	4b11      	ldr	r3, [pc, #68]	@ (80018ec <_sbrk+0x64>)
 80018a6:	4a12      	ldr	r2, [pc, #72]	@ (80018f0 <_sbrk+0x68>)
 80018a8:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80018aa:	4b10      	ldr	r3, [pc, #64]	@ (80018ec <_sbrk+0x64>)
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d207      	bcs.n	80018c8 <_sbrk+0x40>
		errno = ENOMEM;
 80018b8:	f008 fe34 	bl	800a524 <__errno>
 80018bc:	4603      	mov	r3, r0
 80018be:	220c      	movs	r2, #12
 80018c0:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
 80018c6:	e009      	b.n	80018dc <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80018c8:	4b08      	ldr	r3, [pc, #32]	@ (80018ec <_sbrk+0x64>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80018ce:	4b07      	ldr	r3, [pc, #28]	@ (80018ec <_sbrk+0x64>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a05      	ldr	r2, [pc, #20]	@ (80018ec <_sbrk+0x64>)
 80018d8:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3718      	adds	r7, #24
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	24080000 	.word	0x24080000
 80018e8:	00000400 	.word	0x00000400
 80018ec:	24025b60 	.word	0x24025b60
 80018f0:	240262c0 	.word	0x240262c0

080018f4 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80018f8:	4b37      	ldr	r3, [pc, #220]	@ (80019d8 <SystemInit+0xe4>)
 80018fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018fe:	4a36      	ldr	r2, [pc, #216]	@ (80019d8 <SystemInit+0xe4>)
 8001900:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001904:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001908:	4b34      	ldr	r3, [pc, #208]	@ (80019dc <SystemInit+0xe8>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	2b06      	cmp	r3, #6
 8001912:	d807      	bhi.n	8001924 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001914:	4b31      	ldr	r3, [pc, #196]	@ (80019dc <SystemInit+0xe8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f023 030f 	bic.w	r3, r3, #15
 800191c:	4a2f      	ldr	r2, [pc, #188]	@ (80019dc <SystemInit+0xe8>)
 800191e:	f043 0307 	orr.w	r3, r3, #7
 8001922:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001924:	4b2e      	ldr	r3, [pc, #184]	@ (80019e0 <SystemInit+0xec>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a2d      	ldr	r2, [pc, #180]	@ (80019e0 <SystemInit+0xec>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001930:	4b2b      	ldr	r3, [pc, #172]	@ (80019e0 <SystemInit+0xec>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 8001936:	4b2a      	ldr	r3, [pc, #168]	@ (80019e0 <SystemInit+0xec>)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	4929      	ldr	r1, [pc, #164]	@ (80019e0 <SystemInit+0xec>)
 800193c:	4b29      	ldr	r3, [pc, #164]	@ (80019e4 <SystemInit+0xf0>)
 800193e:	4013      	ands	r3, r2
 8001940:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001942:	4b26      	ldr	r3, [pc, #152]	@ (80019dc <SystemInit+0xe8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800194e:	4b23      	ldr	r3, [pc, #140]	@ (80019dc <SystemInit+0xe8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 030f 	bic.w	r3, r3, #15
 8001956:	4a21      	ldr	r2, [pc, #132]	@ (80019dc <SystemInit+0xe8>)
 8001958:	f043 0307 	orr.w	r3, r3, #7
 800195c:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 800195e:	4b20      	ldr	r3, [pc, #128]	@ (80019e0 <SystemInit+0xec>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8001964:	4b1e      	ldr	r3, [pc, #120]	@ (80019e0 <SystemInit+0xec>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800196a:	4b1d      	ldr	r3, [pc, #116]	@ (80019e0 <SystemInit+0xec>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001970:	4b1b      	ldr	r3, [pc, #108]	@ (80019e0 <SystemInit+0xec>)
 8001972:	4a1d      	ldr	r2, [pc, #116]	@ (80019e8 <SystemInit+0xf4>)
 8001974:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 8001976:	4b1a      	ldr	r3, [pc, #104]	@ (80019e0 <SystemInit+0xec>)
 8001978:	4a1c      	ldr	r2, [pc, #112]	@ (80019ec <SystemInit+0xf8>)
 800197a:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 800197c:	4b18      	ldr	r3, [pc, #96]	@ (80019e0 <SystemInit+0xec>)
 800197e:	4a1c      	ldr	r2, [pc, #112]	@ (80019f0 <SystemInit+0xfc>)
 8001980:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 8001982:	4b17      	ldr	r3, [pc, #92]	@ (80019e0 <SystemInit+0xec>)
 8001984:	2200      	movs	r2, #0
 8001986:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001988:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <SystemInit+0xec>)
 800198a:	4a19      	ldr	r2, [pc, #100]	@ (80019f0 <SystemInit+0xfc>)
 800198c:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800198e:	4b14      	ldr	r3, [pc, #80]	@ (80019e0 <SystemInit+0xec>)
 8001990:	2200      	movs	r2, #0
 8001992:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <SystemInit+0xec>)
 8001996:	4a16      	ldr	r2, [pc, #88]	@ (80019f0 <SystemInit+0xfc>)
 8001998:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 800199a:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <SystemInit+0xec>)
 800199c:	2200      	movs	r2, #0
 800199e:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <SystemInit+0xec>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0e      	ldr	r2, [pc, #56]	@ (80019e0 <SystemInit+0xec>)
 80019a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019aa:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <SystemInit+0xec>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80019b2:	4b10      	ldr	r3, [pc, #64]	@ (80019f4 <SystemInit+0x100>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <SystemInit+0x104>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019be:	d202      	bcs.n	80019c6 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80019c0:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <SystemInit+0x108>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80019c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a00 <SystemInit+0x10c>)
 80019c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80019cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00
 80019dc:	52002000 	.word	0x52002000
 80019e0:	58024400 	.word	0x58024400
 80019e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80019e8:	02020200 	.word	0x02020200
 80019ec:	01ff0000 	.word	0x01ff0000
 80019f0:	01010280 	.word	0x01010280
 80019f4:	5c001000 	.word	0x5c001000
 80019f8:	ffff0000 	.word	0xffff0000
 80019fc:	51008108 	.word	0x51008108
 8001a00:	52004000 	.word	0x52004000

08001a04 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1a:	463b      	mov	r3, r7
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a24:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <MX_TIM1_Init+0xa4>)
 8001a26:	4a21      	ldr	r2, [pc, #132]	@ (8001aac <MX_TIM1_Init+0xa8>)
 8001a28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa8 <MX_TIM1_Init+0xa4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a30:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <MX_TIM1_Init+0xa4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a36:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <MX_TIM1_Init+0xa4>)
 8001a38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa8 <MX_TIM1_Init+0xa4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a44:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <MX_TIM1_Init+0xa4>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4a:	4b17      	ldr	r3, [pc, #92]	@ (8001aa8 <MX_TIM1_Init+0xa4>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a50:	4815      	ldr	r0, [pc, #84]	@ (8001aa8 <MX_TIM1_Init+0xa4>)
 8001a52:	f005 fda8 	bl	80075a6 <HAL_TIM_Base_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001a5c:	f7ff fda2 	bl	80015a4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001a68:	f107 030c 	add.w	r3, r7, #12
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	480e      	ldr	r0, [pc, #56]	@ (8001aa8 <MX_TIM1_Init+0xa4>)
 8001a70:	f006 fa74 	bl	8007f5c <HAL_TIM_SlaveConfigSynchro>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a7a:	f7ff fd93 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a8a:	463b      	mov	r3, r7
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4806      	ldr	r0, [pc, #24]	@ (8001aa8 <MX_TIM1_Init+0xa4>)
 8001a90:	f007 f802 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001a9a:	f7ff fd83 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	24025b64 	.word	0x24025b64
 8001aac:	40010000 	.word	0x40010000

08001ab0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08e      	sub	sp, #56	@ 0x38
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ab6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	605a      	str	r2, [r3, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
 8001ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac4:	f107 031c 	add.w	r3, r7, #28
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]
 8001ade:	615a      	str	r2, [r3, #20]
 8001ae0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	@ (8001b94 <MX_TIM4_Init+0xe4>)
 8001ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8001b98 <MX_TIM4_Init+0xe8>)
 8001ae6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <MX_TIM4_Init+0xe4>)
 8001aea:	2201      	movs	r2, #1
 8001aec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aee:	4b29      	ldr	r3, [pc, #164]	@ (8001b94 <MX_TIM4_Init+0xe4>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3;
 8001af4:	4b27      	ldr	r3, [pc, #156]	@ (8001b94 <MX_TIM4_Init+0xe4>)
 8001af6:	2203      	movs	r2, #3
 8001af8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b26      	ldr	r3, [pc, #152]	@ (8001b94 <MX_TIM4_Init+0xe4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b00:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <MX_TIM4_Init+0xe4>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b06:	4823      	ldr	r0, [pc, #140]	@ (8001b94 <MX_TIM4_Init+0xe4>)
 8001b08:	f005 fd4d 	bl	80075a6 <HAL_TIM_Base_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b12:	f7ff fd47 	bl	80015a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b1c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b20:	4619      	mov	r1, r3
 8001b22:	481c      	ldr	r0, [pc, #112]	@ (8001b94 <MX_TIM4_Init+0xe4>)
 8001b24:	f006 f922 	bl	8007d6c <HAL_TIM_ConfigClockSource>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b2e:	f7ff fd39 	bl	80015a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b32:	4818      	ldr	r0, [pc, #96]	@ (8001b94 <MX_TIM4_Init+0xe4>)
 8001b34:	f005 fd8e 	bl	8007654 <HAL_TIM_PWM_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b3e:	f7ff fd31 	bl	80015a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b4a:	f107 031c 	add.w	r3, r7, #28
 8001b4e:	4619      	mov	r1, r3
 8001b50:	4810      	ldr	r0, [pc, #64]	@ (8001b94 <MX_TIM4_Init+0xe4>)
 8001b52:	f006 ffa1 	bl	8008a98 <HAL_TIMEx_MasterConfigSynchronization>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b5c:	f7ff fd22 	bl	80015a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b60:	2360      	movs	r3, #96	@ 0x60
 8001b62:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2;
 8001b64:	2302      	movs	r3, #2
 8001b66:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b70:	463b      	mov	r3, r7
 8001b72:	2200      	movs	r2, #0
 8001b74:	4619      	mov	r1, r3
 8001b76:	4807      	ldr	r0, [pc, #28]	@ (8001b94 <MX_TIM4_Init+0xe4>)
 8001b78:	f005 ffe4 	bl	8007b44 <HAL_TIM_PWM_ConfigChannel>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b82:	f7ff fd0f 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b86:	4803      	ldr	r0, [pc, #12]	@ (8001b94 <MX_TIM4_Init+0xe4>)
 8001b88:	f000 f848 	bl	8001c1c <HAL_TIM_MspPostInit>

}
 8001b8c:	bf00      	nop
 8001b8e:	3738      	adds	r7, #56	@ 0x38
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	24025bb0 	.word	0x24025bb0
 8001b98:	40000800 	.word	0x40000800

08001b9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a19      	ldr	r2, [pc, #100]	@ (8001c10 <HAL_TIM_Base_MspInit+0x74>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d10f      	bne.n	8001bce <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bae:	4b19      	ldr	r3, [pc, #100]	@ (8001c14 <HAL_TIM_Base_MspInit+0x78>)
 8001bb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bb4:	4a17      	ldr	r2, [pc, #92]	@ (8001c14 <HAL_TIM_Base_MspInit+0x78>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001bbe:	4b15      	ldr	r3, [pc, #84]	@ (8001c14 <HAL_TIM_Base_MspInit+0x78>)
 8001bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001bcc:	e01b      	b.n	8001c06 <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM4)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a11      	ldr	r2, [pc, #68]	@ (8001c18 <HAL_TIM_Base_MspInit+0x7c>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d116      	bne.n	8001c06 <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <HAL_TIM_Base_MspInit+0x78>)
 8001bda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bde:	4a0d      	ldr	r2, [pc, #52]	@ (8001c14 <HAL_TIM_Base_MspInit+0x78>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001be8:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <HAL_TIM_Base_MspInit+0x78>)
 8001bea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bee:	f003 0304 	and.w	r3, r3, #4
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	201e      	movs	r0, #30
 8001bfc:	f000 fb9b 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c00:	201e      	movs	r0, #30
 8001c02:	f000 fbb2 	bl	800236a <HAL_NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40010000 	.word	0x40010000
 8001c14:	58024400 	.word	0x58024400
 8001c18:	40000800 	.word	0x40000800

08001c1c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 030c 	add.w	r3, r7, #12
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a14      	ldr	r2, [pc, #80]	@ (8001c8c <HAL_TIM_MspPostInit+0x70>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d121      	bne.n	8001c82 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <HAL_TIM_MspPostInit+0x74>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c44:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <HAL_TIM_MspPostInit+0x74>)
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c4e:	4b10      	ldr	r3, [pc, #64]	@ (8001c90 <HAL_TIM_MspPostInit+0x74>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c5c:	2340      	movs	r3, #64	@ 0x40
 8001c5e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	4619      	mov	r1, r3
 8001c76:	4807      	ldr	r0, [pc, #28]	@ (8001c94 <HAL_TIM_MspPostInit+0x78>)
 8001c78:	f001 fb4e 	bl	8003318 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB6_FMP);
 8001c7c:	2010      	movs	r0, #16
 8001c7e:	f002 fb39 	bl	80042f4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c82:	bf00      	nop
 8001c84:	3720      	adds	r7, #32
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40000800 	.word	0x40000800
 8001c90:	58024400 	.word	0x58024400
 8001c94:	58020400 	.word	0x58020400

08001c98 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c9c:	4b22      	ldr	r3, [pc, #136]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001c9e:	4a23      	ldr	r2, [pc, #140]	@ (8001d2c <MX_USART3_UART_Init+0x94>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ca2:	4b21      	ldr	r3, [pc, #132]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001ca4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ca8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b1d      	ldr	r3, [pc, #116]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b19      	ldr	r3, [pc, #100]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cce:	4b16      	ldr	r3, [pc, #88]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cd4:	4b14      	ldr	r3, [pc, #80]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cda:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ce0:	4811      	ldr	r0, [pc, #68]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001ce2:	f006 ff85 	bl	8008bf0 <HAL_UART_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001cec:	f7ff fc5a 	bl	80015a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	480d      	ldr	r0, [pc, #52]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001cf4:	f008 f81b 	bl	8009d2e <HAL_UARTEx_SetTxFifoThreshold>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001cfe:	f7ff fc51 	bl	80015a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d02:	2100      	movs	r1, #0
 8001d04:	4808      	ldr	r0, [pc, #32]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001d06:	f008 f850 	bl	8009daa <HAL_UARTEx_SetRxFifoThreshold>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d10:	f7ff fc48 	bl	80015a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d14:	4804      	ldr	r0, [pc, #16]	@ (8001d28 <MX_USART3_UART_Init+0x90>)
 8001d16:	f007 ffd1 	bl	8009cbc <HAL_UARTEx_DisableFifoMode>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001d20:	f7ff fc40 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d24:	bf00      	nop
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	24025bfc 	.word	0x24025bfc
 8001d2c:	40004800 	.word	0x40004800

08001d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0ba      	sub	sp, #232	@ 0xe8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d48:	f107 0310 	add.w	r3, r7, #16
 8001d4c:	22c0      	movs	r2, #192	@ 0xc0
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f008 fbdf 	bl	800a514 <memset>
  if(uartHandle->Instance==USART3)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8001e18 <HAL_UART_MspInit+0xe8>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d156      	bne.n	8001e0e <HAL_UART_MspInit+0xde>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d60:	f04f 0202 	mov.w	r2, #2
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001d6c:	2304      	movs	r3, #4
 8001d6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 240;
 8001d70:	23f0      	movs	r3, #240	@ 0xf0
 8001d72:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001d74:	2308      	movs	r3, #8
 8001d76:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 8001d78:	2308      	movs	r3, #8
 8001d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001d80:	2340      	movs	r3, #64	@ 0x40
 8001d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001d84:	2300      	movs	r3, #0
 8001d86:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d92:	f107 0310 	add.w	r3, r7, #16
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fc9a 	bl	80056d0 <HAL_RCCEx_PeriphCLKConfig>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8001da2:	f7ff fbff 	bl	80015a4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001da6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <HAL_UART_MspInit+0xec>)
 8001da8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dac:	4a1b      	ldr	r2, [pc, #108]	@ (8001e1c <HAL_UART_MspInit+0xec>)
 8001dae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001db6:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_UART_MspInit+0xec>)
 8001db8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dbc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dc4:	4b15      	ldr	r3, [pc, #84]	@ (8001e1c <HAL_UART_MspInit+0xec>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dca:	4a14      	ldr	r2, [pc, #80]	@ (8001e1c <HAL_UART_MspInit+0xec>)
 8001dcc:	f043 0308 	orr.w	r3, r3, #8
 8001dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <HAL_UART_MspInit+0xec>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001de2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001de6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dfc:	2307      	movs	r3, #7
 8001dfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e02:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	@ (8001e20 <HAL_UART_MspInit+0xf0>)
 8001e0a:	f001 fa85 	bl	8003318 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e0e:	bf00      	nop
 8001e10:	37e8      	adds	r7, #232	@ 0xe8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40004800 	.word	0x40004800
 8001e1c:	58024400 	.word	0x58024400
 8001e20:	58020c00 	.word	0x58020c00

08001e24 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e28:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e2a:	4a16      	ldr	r2, [pc, #88]	@ (8001e84 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001e2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001e2e:	4b14      	ldr	r3, [pc, #80]	@ (8001e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e30:	2209      	movs	r2, #9
 8001e32:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e34:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e36:	2202      	movs	r2, #2
 8001e38:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e42:	2202      	movs	r2, #2
 8001e44:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	@ (8001e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001e64:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	@ (8001e80 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e6c:	f002 fa66 	bl	800433c <HAL_PCD_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001e76:	f7ff fb95 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	24025c90 	.word	0x24025c90
 8001e84:	40080000 	.word	0x40080000

08001e88 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b0ba      	sub	sp, #232	@ 0xe8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
 8001e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ea0:	f107 0310 	add.w	r3, r7, #16
 8001ea4:	22c0      	movs	r2, #192	@ 0xc0
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f008 fb33 	bl	800a514 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a30      	ldr	r2, [pc, #192]	@ (8001f74 <HAL_PCD_MspInit+0xec>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d159      	bne.n	8001f6c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001eb8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001ec4:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fbfd 	bl	80056d0 <HAL_RCCEx_PeriphCLKConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001edc:	f7ff fb62 	bl	80015a4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001ee0:	f002 fb96 	bl	8004610 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <HAL_PCD_MspInit+0xf0>)
 8001ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eea:	4a23      	ldr	r2, [pc, #140]	@ (8001f78 <HAL_PCD_MspInit+0xf0>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ef4:	4b20      	ldr	r3, [pc, #128]	@ (8001f78 <HAL_PCD_MspInit+0xf0>)
 8001ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f10:	2300      	movs	r3, #0
 8001f12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f16:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4817      	ldr	r0, [pc, #92]	@ (8001f7c <HAL_PCD_MspInit+0xf4>)
 8001f1e:	f001 f9fb 	bl	8003318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f22:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001f3c:	230a      	movs	r3, #10
 8001f3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f46:	4619      	mov	r1, r3
 8001f48:	480c      	ldr	r0, [pc, #48]	@ (8001f7c <HAL_PCD_MspInit+0xf4>)
 8001f4a:	f001 f9e5 	bl	8003318 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f78 <HAL_PCD_MspInit+0xf0>)
 8001f50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f54:	4a08      	ldr	r2, [pc, #32]	@ (8001f78 <HAL_PCD_MspInit+0xf0>)
 8001f56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f5a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001f5e:	4b06      	ldr	r3, [pc, #24]	@ (8001f78 <HAL_PCD_MspInit+0xf0>)
 8001f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	37e8      	adds	r7, #232	@ 0xe8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40080000 	.word	0x40080000
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	58020000 	.word	0x58020000

08001f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f84:	f7ff fcb6 	bl	80018f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f88:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f8a:	490d      	ldr	r1, [pc, #52]	@ (8001fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f90:	e002      	b.n	8001f98 <LoopCopyDataInit>

08001f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f96:	3304      	adds	r3, #4

08001f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f9c:	d3f9      	bcc.n	8001f92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa4:	e001      	b.n	8001faa <LoopFillZerobss>

08001fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa8:	3204      	adds	r2, #4

08001faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fac:	d3fb      	bcc.n	8001fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fae:	f008 fabf 	bl	800a530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb2:	f7ff f9fd 	bl	80013b0 <main>
  bx  lr
 8001fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fb8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001fbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fc0:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001fc4:	0800af64 	.word	0x0800af64
  ldr r2, =_sbss
 8001fc8:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001fcc:	240262c0 	.word	0x240262c0

08001fd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC3_IRQHandler>
	...

08001fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fda:	2003      	movs	r0, #3
 8001fdc:	f000 f9a0 	bl	8002320 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001fe0:	f003 f9a0 	bl	8005324 <HAL_RCC_GetSysClockFreq>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	4b15      	ldr	r3, [pc, #84]	@ (800203c <HAL_Init+0x68>)
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	4913      	ldr	r1, [pc, #76]	@ (8002040 <HAL_Init+0x6c>)
 8001ff2:	5ccb      	ldrb	r3, [r1, r3]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800203c <HAL_Init+0x68>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	4a0e      	ldr	r2, [pc, #56]	@ (8002040 <HAL_Init+0x6c>)
 8002008:	5cd3      	ldrb	r3, [r2, r3]
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
 8002014:	4a0b      	ldr	r2, [pc, #44]	@ (8002044 <HAL_Init+0x70>)
 8002016:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002018:	4a0b      	ldr	r2, [pc, #44]	@ (8002048 <HAL_Init+0x74>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800201e:	2000      	movs	r0, #0
 8002020:	f000 f814 	bl	800204c <HAL_InitTick>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e002      	b.n	8002034 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800202e:	f7ff fbcd 	bl	80017cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	58024400 	.word	0x58024400
 8002040:	0800aee8 	.word	0x0800aee8
 8002044:	24000008 	.word	0x24000008
 8002048:	24000004 	.word	0x24000004

0800204c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002054:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <HAL_InitTick+0x60>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e021      	b.n	80020a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002060:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <HAL_InitTick+0x64>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b11      	ldr	r3, [pc, #68]	@ (80020ac <HAL_InitTick+0x60>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	4619      	mov	r1, r3
 800206a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800206e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002072:	fbb2 f3f3 	udiv	r3, r2, r3
 8002076:	4618      	mov	r0, r3
 8002078:	f000 f985 	bl	8002386 <HAL_SYSTICK_Config>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e00e      	b.n	80020a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b0f      	cmp	r3, #15
 800208a:	d80a      	bhi.n	80020a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800208c:	2200      	movs	r2, #0
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f000 f94f 	bl	8002336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002098:	4a06      	ldr	r2, [pc, #24]	@ (80020b4 <HAL_InitTick+0x68>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800209e:	2300      	movs	r3, #0
 80020a0:	e000      	b.n	80020a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	24000010 	.word	0x24000010
 80020b0:	24000004 	.word	0x24000004
 80020b4:	2400000c 	.word	0x2400000c

080020b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <HAL_IncTick+0x20>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b06      	ldr	r3, [pc, #24]	@ (80020dc <HAL_IncTick+0x24>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	4a04      	ldr	r2, [pc, #16]	@ (80020dc <HAL_IncTick+0x24>)
 80020ca:	6013      	str	r3, [r2, #0]
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	24000010 	.word	0x24000010
 80020dc:	24026174 	.word	0x24026174

080020e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return uwTick;
 80020e4:	4b03      	ldr	r3, [pc, #12]	@ (80020f4 <HAL_GetTick+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	24026174 	.word	0x24026174

080020f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002100:	f7ff ffee 	bl	80020e0 <HAL_GetTick>
 8002104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002110:	d005      	beq.n	800211e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002112:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <HAL_Delay+0x44>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4413      	add	r3, r2
 800211c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800211e:	bf00      	nop
 8002120:	f7ff ffde 	bl	80020e0 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	429a      	cmp	r2, r3
 800212e:	d8f7      	bhi.n	8002120 <HAL_Delay+0x28>
  {
  }
}
 8002130:	bf00      	nop
 8002132:	bf00      	nop
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	24000010 	.word	0x24000010

08002140 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002144:	4b03      	ldr	r3, [pc, #12]	@ (8002154 <HAL_GetREVID+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0c1b      	lsrs	r3, r3, #16
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	5c001000 	.word	0x5c001000

08002158 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002168:	4904      	ldr	r1, [pc, #16]	@ (800217c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	58000400 	.word	0x58000400

08002180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002190:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <__NVIC_SetPriorityGrouping+0x40>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021a8:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ae:	4a04      	ldr	r2, [pc, #16]	@ (80021c0 <__NVIC_SetPriorityGrouping+0x40>)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	60d3      	str	r3, [r2, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00
 80021c4:	05fa0000 	.word	0x05fa0000

080021c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b04      	ldr	r3, [pc, #16]	@ (80021e0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 0307 	and.w	r3, r3, #7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db0b      	blt.n	800220e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	4907      	ldr	r1, [pc, #28]	@ (800221c <__NVIC_EnableIRQ+0x38>)
 80021fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2001      	movs	r0, #1
 8002206:	fa00 f202 	lsl.w	r2, r0, r2
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	@ (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	@ (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	88fb      	ldrh	r3, [r7, #6]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	@ 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	@ 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022ec:	d301      	bcc.n	80022f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00f      	b.n	8002312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f2:	4a0a      	ldr	r2, [pc, #40]	@ (800231c <SysTick_Config+0x40>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fa:	210f      	movs	r1, #15
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002300:	f7ff ff8e 	bl	8002220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002304:	4b05      	ldr	r3, [pc, #20]	@ (800231c <SysTick_Config+0x40>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230a:	4b04      	ldr	r3, [pc, #16]	@ (800231c <SysTick_Config+0x40>)
 800230c:	2207      	movs	r2, #7
 800230e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	e000e010 	.word	0xe000e010

08002320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff29 	bl	8002180 <__NVIC_SetPriorityGrouping>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002344:	f7ff ff40 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 8002348:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	6978      	ldr	r0, [r7, #20]
 8002350:	f7ff ff90 	bl	8002274 <NVIC_EncodePriority>
 8002354:	4602      	mov	r2, r0
 8002356:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800235a:	4611      	mov	r1, r2
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff5f 	bl	8002220 <__NVIC_SetPriority>
}
 8002362:	bf00      	nop
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	4603      	mov	r3, r0
 8002372:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002374:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff ff33 	bl	80021e4 <__NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff ffa4 	bl	80022dc <SysTick_Config>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
	...

080023a0 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e069      	b.n	8002486 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d102      	bne.n	80023c4 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7fe fc22 	bl	8000c08 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6819      	ldr	r1, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002490 <HAL_DCMI_Init+0xf0>)
 80023e6:	400b      	ands	r3, r1
 80023e8:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	695b      	ldr	r3, [r3, #20]
 80023f8:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80023fe:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800240a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	699b      	ldr	r3, [r3, #24]
 8002410:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002416:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002422:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002428:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800242e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b10      	cmp	r3, #16
 800243e:	d112      	bne.n	8002466 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7f1b      	ldrb	r3, [r3, #28]
 8002444:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	7f5b      	ldrb	r3, [r3, #29]
 800244a:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800244c:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	7f9b      	ldrb	r3, [r3, #30]
 8002452:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002454:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	7fdb      	ldrb	r3, [r3, #31]
 800245c:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002462:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002464:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68da      	ldr	r2, [r3, #12]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 021e 	orr.w	r2, r2, #30
 8002474:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	ffe0f007 	.word	0xffe0f007

08002494 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d016      	beq.n	80024dc <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2204      	movs	r2, #4
 80024b4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ba:	f043 0202 	orr.w	r2, r3, #2
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2204      	movs	r2, #4
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024ce:	4a31      	ldr	r2, [pc, #196]	@ (8002594 <HAL_DCMI_IRQHandler+0x100>)
 80024d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f8a4 	bl	8002624 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d016      	beq.n	8002514 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2202      	movs	r2, #2
 80024ec:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2204      	movs	r2, #4
 80024fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002506:	4a23      	ldr	r2, [pc, #140]	@ (8002594 <HAL_DCMI_IRQHandler+0x100>)
 8002508:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f888 	bl	8002624 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 0310 	and.w	r3, r3, #16
 800251a:	2b00      	cmp	r3, #0
 800251c:	d006      	beq.n	800252c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2210      	movs	r2, #16
 8002524:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f000 f840 	bl	80025ac <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d006      	beq.n	8002544 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2208      	movs	r2, #8
 800253c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f83e 	bl	80025c0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d01d      	beq.n	800258a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b02      	cmp	r3, #2
 800255a:	d107      	bne.n	800256c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 021e 	bic.w	r2, r2, #30
 800256a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2201      	movs	r2, #1
 8002582:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f825 	bl	80025d4 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800258a:	bf00      	nop
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	080025e9 	.word	0x080025e9

08002598 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f4:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d009      	beq.n	8002614 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff ffbf 	bl	8002598 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d101      	bne.n	8002636 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e237      	b.n	8002aa6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d004      	beq.n	800264c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2280      	movs	r2, #128	@ 0x80
 8002646:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e22c      	b.n	8002aa6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a5c      	ldr	r2, [pc, #368]	@ (80027c4 <HAL_DMA_Abort_IT+0x1a0>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d04a      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a5b      	ldr	r2, [pc, #364]	@ (80027c8 <HAL_DMA_Abort_IT+0x1a4>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d045      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a59      	ldr	r2, [pc, #356]	@ (80027cc <HAL_DMA_Abort_IT+0x1a8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d040      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a58      	ldr	r2, [pc, #352]	@ (80027d0 <HAL_DMA_Abort_IT+0x1ac>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d03b      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a56      	ldr	r2, [pc, #344]	@ (80027d4 <HAL_DMA_Abort_IT+0x1b0>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d036      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a55      	ldr	r2, [pc, #340]	@ (80027d8 <HAL_DMA_Abort_IT+0x1b4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d031      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a53      	ldr	r2, [pc, #332]	@ (80027dc <HAL_DMA_Abort_IT+0x1b8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d02c      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a52      	ldr	r2, [pc, #328]	@ (80027e0 <HAL_DMA_Abort_IT+0x1bc>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d027      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a50      	ldr	r2, [pc, #320]	@ (80027e4 <HAL_DMA_Abort_IT+0x1c0>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d022      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a4f      	ldr	r2, [pc, #316]	@ (80027e8 <HAL_DMA_Abort_IT+0x1c4>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d01d      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a4d      	ldr	r2, [pc, #308]	@ (80027ec <HAL_DMA_Abort_IT+0x1c8>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d018      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a4c      	ldr	r2, [pc, #304]	@ (80027f0 <HAL_DMA_Abort_IT+0x1cc>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d013      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a4a      	ldr	r2, [pc, #296]	@ (80027f4 <HAL_DMA_Abort_IT+0x1d0>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d00e      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a49      	ldr	r2, [pc, #292]	@ (80027f8 <HAL_DMA_Abort_IT+0x1d4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d009      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a47      	ldr	r2, [pc, #284]	@ (80027fc <HAL_DMA_Abort_IT+0x1d8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d004      	beq.n	80026ec <HAL_DMA_Abort_IT+0xc8>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a46      	ldr	r2, [pc, #280]	@ (8002800 <HAL_DMA_Abort_IT+0x1dc>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d101      	bne.n	80026f0 <HAL_DMA_Abort_IT+0xcc>
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <HAL_DMA_Abort_IT+0xce>
 80026f0:	2300      	movs	r3, #0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 8086 	beq.w	8002804 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2204      	movs	r2, #4
 80026fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a2f      	ldr	r2, [pc, #188]	@ (80027c4 <HAL_DMA_Abort_IT+0x1a0>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d04a      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a2e      	ldr	r2, [pc, #184]	@ (80027c8 <HAL_DMA_Abort_IT+0x1a4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d045      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a2c      	ldr	r2, [pc, #176]	@ (80027cc <HAL_DMA_Abort_IT+0x1a8>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d040      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a2b      	ldr	r2, [pc, #172]	@ (80027d0 <HAL_DMA_Abort_IT+0x1ac>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d03b      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a29      	ldr	r2, [pc, #164]	@ (80027d4 <HAL_DMA_Abort_IT+0x1b0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d036      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a28      	ldr	r2, [pc, #160]	@ (80027d8 <HAL_DMA_Abort_IT+0x1b4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d031      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a26      	ldr	r2, [pc, #152]	@ (80027dc <HAL_DMA_Abort_IT+0x1b8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d02c      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a25      	ldr	r2, [pc, #148]	@ (80027e0 <HAL_DMA_Abort_IT+0x1bc>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d027      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a23      	ldr	r2, [pc, #140]	@ (80027e4 <HAL_DMA_Abort_IT+0x1c0>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d022      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a22      	ldr	r2, [pc, #136]	@ (80027e8 <HAL_DMA_Abort_IT+0x1c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d01d      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a20      	ldr	r2, [pc, #128]	@ (80027ec <HAL_DMA_Abort_IT+0x1c8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d018      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1f      	ldr	r2, [pc, #124]	@ (80027f0 <HAL_DMA_Abort_IT+0x1cc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d013      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <HAL_DMA_Abort_IT+0x1d0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00e      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1c      	ldr	r2, [pc, #112]	@ (80027f8 <HAL_DMA_Abort_IT+0x1d4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a1a      	ldr	r2, [pc, #104]	@ (80027fc <HAL_DMA_Abort_IT+0x1d8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_DMA_Abort_IT+0x17c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a19      	ldr	r2, [pc, #100]	@ (8002800 <HAL_DMA_Abort_IT+0x1dc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d108      	bne.n	80027b2 <HAL_DMA_Abort_IT+0x18e>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e178      	b.n	8002aa4 <HAL_DMA_Abort_IT+0x480>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 0201 	bic.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
 80027c2:	e16f      	b.n	8002aa4 <HAL_DMA_Abort_IT+0x480>
 80027c4:	40020010 	.word	0x40020010
 80027c8:	40020028 	.word	0x40020028
 80027cc:	40020040 	.word	0x40020040
 80027d0:	40020058 	.word	0x40020058
 80027d4:	40020070 	.word	0x40020070
 80027d8:	40020088 	.word	0x40020088
 80027dc:	400200a0 	.word	0x400200a0
 80027e0:	400200b8 	.word	0x400200b8
 80027e4:	40020410 	.word	0x40020410
 80027e8:	40020428 	.word	0x40020428
 80027ec:	40020440 	.word	0x40020440
 80027f0:	40020458 	.word	0x40020458
 80027f4:	40020470 	.word	0x40020470
 80027f8:	40020488 	.word	0x40020488
 80027fc:	400204a0 	.word	0x400204a0
 8002800:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 020e 	bic.w	r2, r2, #14
 8002812:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a6c      	ldr	r2, [pc, #432]	@ (80029cc <HAL_DMA_Abort_IT+0x3a8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d04a      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6b      	ldr	r2, [pc, #428]	@ (80029d0 <HAL_DMA_Abort_IT+0x3ac>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d045      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a69      	ldr	r2, [pc, #420]	@ (80029d4 <HAL_DMA_Abort_IT+0x3b0>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d040      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a68      	ldr	r2, [pc, #416]	@ (80029d8 <HAL_DMA_Abort_IT+0x3b4>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d03b      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a66      	ldr	r2, [pc, #408]	@ (80029dc <HAL_DMA_Abort_IT+0x3b8>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d036      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a65      	ldr	r2, [pc, #404]	@ (80029e0 <HAL_DMA_Abort_IT+0x3bc>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d031      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a63      	ldr	r2, [pc, #396]	@ (80029e4 <HAL_DMA_Abort_IT+0x3c0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02c      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a62      	ldr	r2, [pc, #392]	@ (80029e8 <HAL_DMA_Abort_IT+0x3c4>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d027      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a60      	ldr	r2, [pc, #384]	@ (80029ec <HAL_DMA_Abort_IT+0x3c8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d022      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a5f      	ldr	r2, [pc, #380]	@ (80029f0 <HAL_DMA_Abort_IT+0x3cc>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d01d      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a5d      	ldr	r2, [pc, #372]	@ (80029f4 <HAL_DMA_Abort_IT+0x3d0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d018      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a5c      	ldr	r2, [pc, #368]	@ (80029f8 <HAL_DMA_Abort_IT+0x3d4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d013      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a5a      	ldr	r2, [pc, #360]	@ (80029fc <HAL_DMA_Abort_IT+0x3d8>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d00e      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a59      	ldr	r2, [pc, #356]	@ (8002a00 <HAL_DMA_Abort_IT+0x3dc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a57      	ldr	r2, [pc, #348]	@ (8002a04 <HAL_DMA_Abort_IT+0x3e0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_DMA_Abort_IT+0x290>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a56      	ldr	r2, [pc, #344]	@ (8002a08 <HAL_DMA_Abort_IT+0x3e4>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d108      	bne.n	80028c6 <HAL_DMA_Abort_IT+0x2a2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e007      	b.n	80028d6 <HAL_DMA_Abort_IT+0x2b2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0201 	bic.w	r2, r2, #1
 80028d4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a3c      	ldr	r2, [pc, #240]	@ (80029cc <HAL_DMA_Abort_IT+0x3a8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d072      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a3a      	ldr	r2, [pc, #232]	@ (80029d0 <HAL_DMA_Abort_IT+0x3ac>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d06d      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a39      	ldr	r2, [pc, #228]	@ (80029d4 <HAL_DMA_Abort_IT+0x3b0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d068      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a37      	ldr	r2, [pc, #220]	@ (80029d8 <HAL_DMA_Abort_IT+0x3b4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d063      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a36      	ldr	r2, [pc, #216]	@ (80029dc <HAL_DMA_Abort_IT+0x3b8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d05e      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a34      	ldr	r2, [pc, #208]	@ (80029e0 <HAL_DMA_Abort_IT+0x3bc>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d059      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a33      	ldr	r2, [pc, #204]	@ (80029e4 <HAL_DMA_Abort_IT+0x3c0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d054      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a31      	ldr	r2, [pc, #196]	@ (80029e8 <HAL_DMA_Abort_IT+0x3c4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d04f      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a30      	ldr	r2, [pc, #192]	@ (80029ec <HAL_DMA_Abort_IT+0x3c8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d04a      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2e      	ldr	r2, [pc, #184]	@ (80029f0 <HAL_DMA_Abort_IT+0x3cc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d045      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a2d      	ldr	r2, [pc, #180]	@ (80029f4 <HAL_DMA_Abort_IT+0x3d0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d040      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a2b      	ldr	r2, [pc, #172]	@ (80029f8 <HAL_DMA_Abort_IT+0x3d4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d03b      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a2a      	ldr	r2, [pc, #168]	@ (80029fc <HAL_DMA_Abort_IT+0x3d8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d036      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a28      	ldr	r2, [pc, #160]	@ (8002a00 <HAL_DMA_Abort_IT+0x3dc>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d031      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a27      	ldr	r2, [pc, #156]	@ (8002a04 <HAL_DMA_Abort_IT+0x3e0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d02c      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a25      	ldr	r2, [pc, #148]	@ (8002a08 <HAL_DMA_Abort_IT+0x3e4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d027      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a24      	ldr	r2, [pc, #144]	@ (8002a0c <HAL_DMA_Abort_IT+0x3e8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d022      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a22      	ldr	r2, [pc, #136]	@ (8002a10 <HAL_DMA_Abort_IT+0x3ec>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d01d      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a21      	ldr	r2, [pc, #132]	@ (8002a14 <HAL_DMA_Abort_IT+0x3f0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d018      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a1f      	ldr	r2, [pc, #124]	@ (8002a18 <HAL_DMA_Abort_IT+0x3f4>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d013      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a1c <HAL_DMA_Abort_IT+0x3f8>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d00e      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002a20 <HAL_DMA_Abort_IT+0x3fc>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d009      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a24 <HAL_DMA_Abort_IT+0x400>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d004      	beq.n	80029c6 <HAL_DMA_Abort_IT+0x3a2>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a19      	ldr	r2, [pc, #100]	@ (8002a28 <HAL_DMA_Abort_IT+0x404>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d132      	bne.n	8002a2c <HAL_DMA_Abort_IT+0x408>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e031      	b.n	8002a2e <HAL_DMA_Abort_IT+0x40a>
 80029ca:	bf00      	nop
 80029cc:	40020010 	.word	0x40020010
 80029d0:	40020028 	.word	0x40020028
 80029d4:	40020040 	.word	0x40020040
 80029d8:	40020058 	.word	0x40020058
 80029dc:	40020070 	.word	0x40020070
 80029e0:	40020088 	.word	0x40020088
 80029e4:	400200a0 	.word	0x400200a0
 80029e8:	400200b8 	.word	0x400200b8
 80029ec:	40020410 	.word	0x40020410
 80029f0:	40020428 	.word	0x40020428
 80029f4:	40020440 	.word	0x40020440
 80029f8:	40020458 	.word	0x40020458
 80029fc:	40020470 	.word	0x40020470
 8002a00:	40020488 	.word	0x40020488
 8002a04:	400204a0 	.word	0x400204a0
 8002a08:	400204b8 	.word	0x400204b8
 8002a0c:	58025408 	.word	0x58025408
 8002a10:	5802541c 	.word	0x5802541c
 8002a14:	58025430 	.word	0x58025430
 8002a18:	58025444 	.word	0x58025444
 8002a1c:	58025458 	.word	0x58025458
 8002a20:	5802546c 	.word	0x5802546c
 8002a24:	58025480 	.word	0x58025480
 8002a28:	58025494 	.word	0x58025494
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d028      	beq.n	8002a84 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a40:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a46:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	2201      	movs	r2, #1
 8002a52:	409a      	lsls	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a60:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00c      	beq.n	8002a84 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a78:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a82:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop

08002ab0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e0e3      	b.n	8002c8a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d106      	bne.n	8002ada <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2223      	movs	r2, #35	@ 0x23
 8002ad0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7fe f9cb 	bl	8000e70 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ada:	4b6e      	ldr	r3, [pc, #440]	@ (8002c94 <HAL_ETH_Init+0x1e4>)
 8002adc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ae0:	4a6c      	ldr	r2, [pc, #432]	@ (8002c94 <HAL_ETH_Init+0x1e4>)
 8002ae2:	f043 0302 	orr.w	r3, r3, #2
 8002ae6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002aea:	4b6a      	ldr	r3, [pc, #424]	@ (8002c94 <HAL_ETH_Init+0x1e4>)
 8002aec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7a1b      	ldrb	r3, [r3, #8]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d103      	bne.n	8002b08 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7ff fb29 	bl	8002158 <HAL_SYSCFG_ETHInterfaceSelect>
 8002b06:	e003      	b.n	8002b10 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002b08:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002b0c:	f7ff fb24 	bl	8002158 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002b10:	4b61      	ldr	r3, [pc, #388]	@ (8002c98 <HAL_ETH_Init+0x1e8>)
 8002b12:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6812      	ldr	r2, [r2, #0]
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b2a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b2c:	f7ff fad8 	bl	80020e0 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002b32:	e011      	b.n	8002b58 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002b34:	f7ff fad4 	bl	80020e0 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b42:	d909      	bls.n	8002b58 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2204      	movs	r2, #4
 8002b48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	22e0      	movs	r2, #224	@ 0xe0
 8002b50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e098      	b.n	8002c8a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1e4      	bne.n	8002b34 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f89e 	bl	8002cac <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002b70:	f002 fd52 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8002b74:	4603      	mov	r3, r0
 8002b76:	4a49      	ldr	r2, [pc, #292]	@ (8002c9c <HAL_ETH_Init+0x1ec>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	0c9a      	lsrs	r2, r3, #18
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3a01      	subs	r2, #1
 8002b84:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 fa81 	bl	8003090 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b96:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002b9a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002ba6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002baa:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	695b      	ldr	r3, [r3, #20]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d009      	beq.n	8002bce <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	22e0      	movs	r2, #224	@ 0xe0
 8002bc6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e05d      	b.n	8002c8a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bd6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002bda:	4b31      	ldr	r3, [pc, #196]	@ (8002ca0 <HAL_ETH_Init+0x1f0>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	6952      	ldr	r2, [r2, #20]
 8002be2:	0051      	lsls	r1, r2, #1
 8002be4:	687a      	ldr	r2, [r7, #4]
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	430b      	orrs	r3, r1
 8002bea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002bee:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fae9 	bl	80031ca <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fb2f 	bl	800325c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	3305      	adds	r3, #5
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	021a      	lsls	r2, r3, #8
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	4619      	mov	r1, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	3303      	adds	r3, #3
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	061a      	lsls	r2, r3, #24
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	3302      	adds	r3, #2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	041b      	lsls	r3, r3, #16
 8002c30:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	3301      	adds	r3, #1
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c3c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002c4a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c4c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <HAL_ETH_Init+0x1f4>)
 8002c5e:	430b      	orrs	r3, r1
 8002c60:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <HAL_ETH_Init+0x1f8>)
 8002c72:	430b      	orrs	r3, r1
 8002c74:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2210      	movs	r2, #16
 8002c84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	58024400 	.word	0x58024400
 8002c98:	58000400 	.word	0x58000400
 8002c9c:	431bde83 	.word	0x431bde83
 8002ca0:	ffff8001 	.word	0xffff8001
 8002ca4:	0c020060 	.word	0x0c020060
 8002ca8:	0c20c000 	.word	0x0c20c000

08002cac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002cc6:	f002 fca7 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8002cca:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4a1a      	ldr	r2, [pc, #104]	@ (8002d38 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d804      	bhi.n	8002cde <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	e022      	b.n	8002d24 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4a16      	ldr	r2, [pc, #88]	@ (8002d3c <HAL_ETH_SetMDIOClockRange+0x90>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d204      	bcs.n	8002cf0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	e019      	b.n	8002d24 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4a13      	ldr	r2, [pc, #76]	@ (8002d40 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d915      	bls.n	8002d24 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4a12      	ldr	r2, [pc, #72]	@ (8002d44 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d804      	bhi.n	8002d0a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	e00c      	b.n	8002d24 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002d48 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d804      	bhi.n	8002d1c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	e003      	b.n	8002d24 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002d22:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68fa      	ldr	r2, [r7, #12]
 8002d2a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002d2e:	bf00      	nop
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	02160ebf 	.word	0x02160ebf
 8002d3c:	03938700 	.word	0x03938700
 8002d40:	05f5e0ff 	.word	0x05f5e0ff
 8002d44:	08f0d17f 	.word	0x08f0d17f
 8002d48:	0ee6b27f 	.word	0x0ee6b27f

08002d4c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002d5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	791b      	ldrb	r3, [r3, #4]
 8002d64:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002d66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	7b1b      	ldrb	r3, [r3, #12]
 8002d6c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002d6e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	7b5b      	ldrb	r3, [r3, #13]
 8002d74:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d76:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	7b9b      	ldrb	r3, [r3, #14]
 8002d7c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d7e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	7bdb      	ldrb	r3, [r3, #15]
 8002d84:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d86:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	7c12      	ldrb	r2, [r2, #16]
 8002d8c:	2a00      	cmp	r2, #0
 8002d8e:	d102      	bne.n	8002d96 <ETH_SetMACConfig+0x4a>
 8002d90:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002d94:	e000      	b.n	8002d98 <ETH_SetMACConfig+0x4c>
 8002d96:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d98:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	7c52      	ldrb	r2, [r2, #17]
 8002d9e:	2a00      	cmp	r2, #0
 8002da0:	d102      	bne.n	8002da8 <ETH_SetMACConfig+0x5c>
 8002da2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002da6:	e000      	b.n	8002daa <ETH_SetMACConfig+0x5e>
 8002da8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002daa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	7c9b      	ldrb	r3, [r3, #18]
 8002db0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002db2:	431a      	orrs	r2, r3
               macconf->Speed |
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002db8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002dbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	7f1b      	ldrb	r3, [r3, #28]
 8002dc4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002dc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	7f5b      	ldrb	r3, [r3, #29]
 8002dcc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002dce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	7f92      	ldrb	r2, [r2, #30]
 8002dd4:	2a00      	cmp	r2, #0
 8002dd6:	d102      	bne.n	8002dde <ETH_SetMACConfig+0x92>
 8002dd8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ddc:	e000      	b.n	8002de0 <ETH_SetMACConfig+0x94>
 8002dde:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002de0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	7fdb      	ldrb	r3, [r3, #31]
 8002de6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002de8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002df0:	2a00      	cmp	r2, #0
 8002df2:	d102      	bne.n	8002dfa <ETH_SetMACConfig+0xae>
 8002df4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002df8:	e000      	b.n	8002dfc <ETH_SetMACConfig+0xb0>
 8002dfa:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002dfc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002e02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e0a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002e0c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	4b56      	ldr	r3, [pc, #344]	@ (8002f78 <ETH_SetMACConfig+0x22c>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6812      	ldr	r2, [r2, #0]
 8002e24:	68f9      	ldr	r1, [r7, #12]
 8002e26:	430b      	orrs	r3, r1
 8002e28:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e2e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e36:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002e38:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e40:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002e42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002e4a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002e4c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002e54:	2a00      	cmp	r2, #0
 8002e56:	d102      	bne.n	8002e5e <ETH_SetMACConfig+0x112>
 8002e58:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e5c:	e000      	b.n	8002e60 <ETH_SetMACConfig+0x114>
 8002e5e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002e60:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	4b42      	ldr	r3, [pc, #264]	@ (8002f7c <ETH_SetMACConfig+0x230>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	68f9      	ldr	r1, [r7, #12]
 8002e7a:	430b      	orrs	r3, r1
 8002e7c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e84:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	4b3a      	ldr	r3, [pc, #232]	@ (8002f80 <ETH_SetMACConfig+0x234>)
 8002e96:	4013      	ands	r3, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	68f9      	ldr	r1, [r7, #12]
 8002e9e:	430b      	orrs	r3, r1
 8002ea0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ea8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002eae:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002eb6:	2a00      	cmp	r2, #0
 8002eb8:	d101      	bne.n	8002ebe <ETH_SetMACConfig+0x172>
 8002eba:	2280      	movs	r2, #128	@ 0x80
 8002ebc:	e000      	b.n	8002ec0 <ETH_SetMACConfig+0x174>
 8002ebe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002ec0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ed2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	68f9      	ldr	r1, [r7, #12]
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002ee8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002ef0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002efe:	f023 0103 	bic.w	r1, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68fa      	ldr	r2, [r7, #12]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002f16:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002f32:	2a00      	cmp	r2, #0
 8002f34:	d101      	bne.n	8002f3a <ETH_SetMACConfig+0x1ee>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	e000      	b.n	8002f3c <ETH_SetMACConfig+0x1f0>
 8002f3a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002f3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002f44:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002f46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002f4e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002f50:	4313      	orrs	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002f5c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	68fa      	ldr	r2, [r7, #12]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002f6c:	bf00      	nop
 8002f6e:	3714      	adds	r7, #20
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	00048083 	.word	0x00048083
 8002f7c:	c0f88000 	.word	0xc0f88000
 8002f80:	fffffef0 	.word	0xfffffef0

08002f84 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b38      	ldr	r3, [pc, #224]	@ (800307c <ETH_SetDMAConfig+0xf8>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	6811      	ldr	r1, [r2, #0]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002faa:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	791b      	ldrb	r3, [r3, #4]
 8002fb0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002fb6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	7b1b      	ldrb	r3, [r3, #12]
 8002fbc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	4b2c      	ldr	r3, [pc, #176]	@ (8003080 <ETH_SetDMAConfig+0xfc>)
 8002fce:	4013      	ands	r3, r2
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	68f9      	ldr	r1, [r7, #12]
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fdc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	7b5b      	ldrb	r3, [r3, #13]
 8002fe2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ff4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002ff8:	4b22      	ldr	r3, [pc, #136]	@ (8003084 <ETH_SetDMAConfig+0x100>)
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	68f9      	ldr	r1, [r7, #12]
 8003002:	430b      	orrs	r3, r1
 8003004:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003008:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	7d1b      	ldrb	r3, [r3, #20]
 8003014:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003016:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	7f5b      	ldrb	r3, [r3, #29]
 800301c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800301e:	4313      	orrs	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800302a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800302e:	4b16      	ldr	r3, [pc, #88]	@ (8003088 <ETH_SetDMAConfig+0x104>)
 8003030:	4013      	ands	r3, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	6812      	ldr	r2, [r2, #0]
 8003036:	68f9      	ldr	r1, [r7, #12]
 8003038:	430b      	orrs	r3, r1
 800303a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800303e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	7f1b      	ldrb	r3, [r3, #28]
 8003046:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800304c:	4313      	orrs	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003058:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800305c:	4b0b      	ldr	r3, [pc, #44]	@ (800308c <ETH_SetDMAConfig+0x108>)
 800305e:	4013      	ands	r3, r2
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	68f9      	ldr	r1, [r7, #12]
 8003066:	430b      	orrs	r3, r1
 8003068:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800306c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	ffff87fd 	.word	0xffff87fd
 8003080:	ffff2ffe 	.word	0xffff2ffe
 8003084:	fffec000 	.word	0xfffec000
 8003088:	ffc0efef 	.word	0xffc0efef
 800308c:	7fc0ffff 	.word	0x7fc0ffff

08003090 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b0a4      	sub	sp, #144	@ 0x90
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003098:	2301      	movs	r3, #1
 800309a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800309e:	2300      	movs	r3, #0
 80030a0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80030ae:	2301      	movs	r3, #1
 80030b0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80030c0:	2300      	movs	r3, #0
 80030c2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80030cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030d0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80030d8:	2300      	movs	r3, #0
 80030da:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80030dc:	2300      	movs	r3, #0
 80030de:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80030e8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80030ec:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80030f4:	2300      	movs	r3, #0
 80030f6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80030fe:	2300      	movs	r3, #0
 8003100:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003104:	2300      	movs	r3, #0
 8003106:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800310a:	2300      	movs	r3, #0
 800310c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800310e:	2300      	movs	r3, #0
 8003110:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003112:	2300      	movs	r3, #0
 8003114:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003116:	2300      	movs	r3, #0
 8003118:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800311c:	2300      	movs	r3, #0
 800311e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003128:	2320      	movs	r3, #32
 800312a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003134:	2300      	movs	r3, #0
 8003136:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800313a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800313e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003140:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003144:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8003146:	2300      	movs	r3, #0
 8003148:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800314c:	2302      	movs	r3, #2
 800314e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800315e:	2300      	movs	r3, #0
 8003160:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800316a:	2300      	movs	r3, #0
 800316c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003174:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003178:	4619      	mov	r1, r3
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff fde6 	bl	8002d4c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003180:	2301      	movs	r3, #1
 8003182:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003184:	2301      	movs	r3, #1
 8003186:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003188:	2300      	movs	r3, #0
 800318a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003192:	2300      	movs	r3, #0
 8003194:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003196:	2300      	movs	r3, #0
 8003198:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800319a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800319e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80031a0:	2300      	movs	r3, #0
 80031a2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80031a4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80031a8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80031aa:	2300      	movs	r3, #0
 80031ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80031b0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80031b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80031b6:	f107 0308 	add.w	r3, r7, #8
 80031ba:	4619      	mov	r1, r3
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff fee1 	bl	8002f84 <ETH_SetDMAConfig>
}
 80031c2:	bf00      	nop
 80031c4:	3790      	adds	r7, #144	@ 0x90
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80031ca:	b480      	push	{r7}
 80031cc:	b085      	sub	sp, #20
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	e01d      	b.n	8003214 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68d9      	ldr	r1, [r3, #12]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4613      	mov	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	4413      	add	r3, r2
 80031e4:	00db      	lsls	r3, r3, #3
 80031e6:	440b      	add	r3, r1
 80031e8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2200      	movs	r2, #0
 80031f4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2200      	movs	r2, #0
 80031fa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2200      	movs	r2, #0
 8003200:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003202:	68b9      	ldr	r1, [r7, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	3206      	adds	r2, #6
 800320a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	3301      	adds	r3, #1
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d9de      	bls.n	80031d8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003228:	461a      	mov	r2, r3
 800322a:	2303      	movs	r3, #3
 800322c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800323c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800324c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	e023      	b.n	80032b2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6919      	ldr	r1, [r3, #16]
 800326e:	68fa      	ldr	r2, [r7, #12]
 8003270:	4613      	mov	r3, r2
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	4413      	add	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	440b      	add	r3, r1
 800327a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2200      	movs	r2, #0
 8003286:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2200      	movs	r2, #0
 800328c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2200      	movs	r2, #0
 8003292:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2200      	movs	r2, #0
 800329e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80032a0:	68b9      	ldr	r1, [r7, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	3212      	adds	r2, #18
 80032a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	3301      	adds	r3, #1
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b03      	cmp	r3, #3
 80032b6:	d9d8      	bls.n	800326a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032de:	461a      	mov	r2, r3
 80032e0:	2303      	movs	r3, #3
 80032e2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032f2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003306:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003318:	b480      	push	{r7}
 800331a:	b089      	sub	sp, #36	@ 0x24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003322:	2300      	movs	r3, #0
 8003324:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003326:	4b89      	ldr	r3, [pc, #548]	@ (800354c <HAL_GPIO_Init+0x234>)
 8003328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800332a:	e194      	b.n	8003656 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	2101      	movs	r1, #1
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	fa01 f303 	lsl.w	r3, r1, r3
 8003338:	4013      	ands	r3, r2
 800333a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f000 8186 	beq.w	8003650 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 0303 	and.w	r3, r3, #3
 800334c:	2b01      	cmp	r3, #1
 800334e:	d005      	beq.n	800335c <HAL_GPIO_Init+0x44>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d130      	bne.n	80033be <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	2203      	movs	r2, #3
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	43db      	mvns	r3, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4013      	ands	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	68da      	ldr	r2, [r3, #12]
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003392:	2201      	movs	r2, #1
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	091b      	lsrs	r3, r3, #4
 80033a8:	f003 0201 	and.w	r2, r3, #1
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f003 0303 	and.w	r3, r3, #3
 80033c6:	2b03      	cmp	r3, #3
 80033c8:	d017      	beq.n	80033fa <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	2203      	movs	r2, #3
 80033d6:	fa02 f303 	lsl.w	r3, r2, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4013      	ands	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	69ba      	ldr	r2, [r7, #24]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	2b02      	cmp	r3, #2
 8003404:	d123      	bne.n	800344e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	08da      	lsrs	r2, r3, #3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	3208      	adds	r2, #8
 800340e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003412:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	220f      	movs	r2, #15
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4013      	ands	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	691a      	ldr	r2, [r3, #16]
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	08da      	lsrs	r2, r3, #3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3208      	adds	r2, #8
 8003448:	69b9      	ldr	r1, [r7, #24]
 800344a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	2203      	movs	r2, #3
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f003 0203 	and.w	r2, r3, #3
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 80e0 	beq.w	8003650 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003490:	4b2f      	ldr	r3, [pc, #188]	@ (8003550 <HAL_GPIO_Init+0x238>)
 8003492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003496:	4a2e      	ldr	r2, [pc, #184]	@ (8003550 <HAL_GPIO_Init+0x238>)
 8003498:	f043 0302 	orr.w	r3, r3, #2
 800349c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80034a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003550 <HAL_GPIO_Init+0x238>)
 80034a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	60fb      	str	r3, [r7, #12]
 80034ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034ae:	4a29      	ldr	r2, [pc, #164]	@ (8003554 <HAL_GPIO_Init+0x23c>)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	089b      	lsrs	r3, r3, #2
 80034b4:	3302      	adds	r3, #2
 80034b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	220f      	movs	r2, #15
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43db      	mvns	r3, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4013      	ands	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a20      	ldr	r2, [pc, #128]	@ (8003558 <HAL_GPIO_Init+0x240>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d052      	beq.n	8003580 <HAL_GPIO_Init+0x268>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1f      	ldr	r2, [pc, #124]	@ (800355c <HAL_GPIO_Init+0x244>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d031      	beq.n	8003546 <HAL_GPIO_Init+0x22e>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003560 <HAL_GPIO_Init+0x248>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d02b      	beq.n	8003542 <HAL_GPIO_Init+0x22a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a1d      	ldr	r2, [pc, #116]	@ (8003564 <HAL_GPIO_Init+0x24c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d025      	beq.n	800353e <HAL_GPIO_Init+0x226>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003568 <HAL_GPIO_Init+0x250>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d01f      	beq.n	800353a <HAL_GPIO_Init+0x222>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a1b      	ldr	r2, [pc, #108]	@ (800356c <HAL_GPIO_Init+0x254>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d019      	beq.n	8003536 <HAL_GPIO_Init+0x21e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a1a      	ldr	r2, [pc, #104]	@ (8003570 <HAL_GPIO_Init+0x258>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d013      	beq.n	8003532 <HAL_GPIO_Init+0x21a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a19      	ldr	r2, [pc, #100]	@ (8003574 <HAL_GPIO_Init+0x25c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d00d      	beq.n	800352e <HAL_GPIO_Init+0x216>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a18      	ldr	r2, [pc, #96]	@ (8003578 <HAL_GPIO_Init+0x260>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d007      	beq.n	800352a <HAL_GPIO_Init+0x212>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a17      	ldr	r2, [pc, #92]	@ (800357c <HAL_GPIO_Init+0x264>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d101      	bne.n	8003526 <HAL_GPIO_Init+0x20e>
 8003522:	2309      	movs	r3, #9
 8003524:	e02d      	b.n	8003582 <HAL_GPIO_Init+0x26a>
 8003526:	230a      	movs	r3, #10
 8003528:	e02b      	b.n	8003582 <HAL_GPIO_Init+0x26a>
 800352a:	2308      	movs	r3, #8
 800352c:	e029      	b.n	8003582 <HAL_GPIO_Init+0x26a>
 800352e:	2307      	movs	r3, #7
 8003530:	e027      	b.n	8003582 <HAL_GPIO_Init+0x26a>
 8003532:	2306      	movs	r3, #6
 8003534:	e025      	b.n	8003582 <HAL_GPIO_Init+0x26a>
 8003536:	2305      	movs	r3, #5
 8003538:	e023      	b.n	8003582 <HAL_GPIO_Init+0x26a>
 800353a:	2304      	movs	r3, #4
 800353c:	e021      	b.n	8003582 <HAL_GPIO_Init+0x26a>
 800353e:	2303      	movs	r3, #3
 8003540:	e01f      	b.n	8003582 <HAL_GPIO_Init+0x26a>
 8003542:	2302      	movs	r3, #2
 8003544:	e01d      	b.n	8003582 <HAL_GPIO_Init+0x26a>
 8003546:	2301      	movs	r3, #1
 8003548:	e01b      	b.n	8003582 <HAL_GPIO_Init+0x26a>
 800354a:	bf00      	nop
 800354c:	58000080 	.word	0x58000080
 8003550:	58024400 	.word	0x58024400
 8003554:	58000400 	.word	0x58000400
 8003558:	58020000 	.word	0x58020000
 800355c:	58020400 	.word	0x58020400
 8003560:	58020800 	.word	0x58020800
 8003564:	58020c00 	.word	0x58020c00
 8003568:	58021000 	.word	0x58021000
 800356c:	58021400 	.word	0x58021400
 8003570:	58021800 	.word	0x58021800
 8003574:	58021c00 	.word	0x58021c00
 8003578:	58022000 	.word	0x58022000
 800357c:	58022400 	.word	0x58022400
 8003580:	2300      	movs	r3, #0
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	f002 0203 	and.w	r2, r2, #3
 8003588:	0092      	lsls	r2, r2, #2
 800358a:	4093      	lsls	r3, r2
 800358c:	69ba      	ldr	r2, [r7, #24]
 800358e:	4313      	orrs	r3, r2
 8003590:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003592:	4938      	ldr	r1, [pc, #224]	@ (8003674 <HAL_GPIO_Init+0x35c>)
 8003594:	69fb      	ldr	r3, [r7, #28]
 8003596:	089b      	lsrs	r3, r3, #2
 8003598:	3302      	adds	r3, #2
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80035be:	69ba      	ldr	r2, [r7, #24]
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80035c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80035ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	43db      	mvns	r3, r3
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	4013      	ands	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80035f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	43db      	mvns	r3, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4013      	ands	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	3301      	adds	r3, #1
 8003654:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	f47f ae63 	bne.w	800332c <HAL_GPIO_Init+0x14>
  }
}
 8003666:	bf00      	nop
 8003668:	bf00      	nop
 800366a:	3724      	adds	r7, #36	@ 0x24
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	58000400 	.word	0x58000400

08003678 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	807b      	strh	r3, [r7, #2]
 8003684:	4613      	mov	r3, r2
 8003686:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003688:	787b      	ldrb	r3, [r7, #1]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800368e:	887a      	ldrh	r2, [r7, #2]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003694:	e003      	b.n	800369e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003696:	887b      	ldrh	r3, [r7, #2]
 8003698:	041a      	lsls	r2, r3, #16
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	619a      	str	r2, [r3, #24]
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d101      	bne.n	80036be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e08b      	b.n	80037d6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d106      	bne.n	80036d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fd fdf0 	bl	80012b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2224      	movs	r2, #36	@ 0x24
 80036dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0201 	bic.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685a      	ldr	r2, [r3, #4]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800370c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d107      	bne.n	8003726 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003722:	609a      	str	r2, [r3, #8]
 8003724:	e006      	b.n	8003734 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689a      	ldr	r2, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003732:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d108      	bne.n	800374e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800374a:	605a      	str	r2, [r3, #4]
 800374c:	e007      	b.n	800375e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800375c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	4b1d      	ldr	r3, [pc, #116]	@ (80037e0 <HAL_I2C_Init+0x134>)
 800376a:	430b      	orrs	r3, r1
 800376c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800377c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69d9      	ldr	r1, [r3, #28]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1a      	ldr	r2, [r3, #32]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	02008000 	.word	0x02008000

080037e4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b088      	sub	sp, #32
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	4608      	mov	r0, r1
 80037ee:	4611      	mov	r1, r2
 80037f0:	461a      	mov	r2, r3
 80037f2:	4603      	mov	r3, r0
 80037f4:	817b      	strh	r3, [r7, #10]
 80037f6:	460b      	mov	r3, r1
 80037f8:	813b      	strh	r3, [r7, #8]
 80037fa:	4613      	mov	r3, r2
 80037fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b20      	cmp	r3, #32
 8003808:	f040 80f9 	bne.w	80039fe <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <HAL_I2C_Mem_Write+0x34>
 8003812:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800381e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0ed      	b.n	8003a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800382a:	2b01      	cmp	r3, #1
 800382c:	d101      	bne.n	8003832 <HAL_I2C_Mem_Write+0x4e>
 800382e:	2302      	movs	r3, #2
 8003830:	e0e6      	b.n	8003a00 <HAL_I2C_Mem_Write+0x21c>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800383a:	f7fe fc51 	bl	80020e0 <HAL_GetTick>
 800383e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	2319      	movs	r3, #25
 8003846:	2201      	movs	r2, #1
 8003848:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 fac3 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0d1      	b.n	8003a00 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2221      	movs	r2, #33	@ 0x21
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2240      	movs	r2, #64	@ 0x40
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a3a      	ldr	r2, [r7, #32]
 8003876:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800387c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003884:	88f8      	ldrh	r0, [r7, #6]
 8003886:	893a      	ldrh	r2, [r7, #8]
 8003888:	8979      	ldrh	r1, [r7, #10]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	9301      	str	r3, [sp, #4]
 800388e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	4603      	mov	r3, r0
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f9d3 	bl	8003c40 <I2C_RequestMemoryWrite>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e0a9      	b.n	8003a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2bff      	cmp	r3, #255	@ 0xff
 80038b4:	d90e      	bls.n	80038d4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	22ff      	movs	r2, #255	@ 0xff
 80038ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	8979      	ldrh	r1, [r7, #10]
 80038c4:	2300      	movs	r3, #0
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fc47 	bl	8004160 <I2C_TransferConfig>
 80038d2:	e00f      	b.n	80038f4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	8979      	ldrh	r1, [r7, #10]
 80038e6:	2300      	movs	r3, #0
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fc36 	bl	8004160 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038f8:	68f8      	ldr	r0, [r7, #12]
 80038fa:	f000 fac6 	bl	8003e8a <I2C_WaitOnTXISFlagUntilTimeout>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e07b      	b.n	8003a00 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390c:	781a      	ldrb	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	1c5a      	adds	r2, r3, #1
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003922:	b29b      	uxth	r3, r3
 8003924:	3b01      	subs	r3, #1
 8003926:	b29a      	uxth	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d034      	beq.n	80039ac <HAL_I2C_Mem_Write+0x1c8>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003946:	2b00      	cmp	r3, #0
 8003948:	d130      	bne.n	80039ac <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003950:	2200      	movs	r2, #0
 8003952:	2180      	movs	r1, #128	@ 0x80
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f000 fa3f 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d001      	beq.n	8003964 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e04d      	b.n	8003a00 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003968:	b29b      	uxth	r3, r3
 800396a:	2bff      	cmp	r3, #255	@ 0xff
 800396c:	d90e      	bls.n	800398c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	22ff      	movs	r2, #255	@ 0xff
 8003972:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003978:	b2da      	uxtb	r2, r3
 800397a:	8979      	ldrh	r1, [r7, #10]
 800397c:	2300      	movs	r3, #0
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fbeb 	bl	8004160 <I2C_TransferConfig>
 800398a:	e00f      	b.n	80039ac <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800399a:	b2da      	uxtb	r2, r3
 800399c:	8979      	ldrh	r1, [r7, #10]
 800399e:	2300      	movs	r3, #0
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 fbda 	bl	8004160 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d19e      	bne.n	80038f4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 faac 	bl	8003f18 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e01a      	b.n	8003a00 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2220      	movs	r2, #32
 80039d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003a08 <HAL_I2C_Mem_Write+0x224>)
 80039de:	400b      	ands	r3, r1
 80039e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	e000      	b.n	8003a00 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80039fe:	2302      	movs	r3, #2
  }
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}
 8003a08:	fe00e800 	.word	0xfe00e800

08003a0c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af02      	add	r7, sp, #8
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	4608      	mov	r0, r1
 8003a16:	4611      	mov	r1, r2
 8003a18:	461a      	mov	r2, r3
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	817b      	strh	r3, [r7, #10]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	813b      	strh	r3, [r7, #8]
 8003a22:	4613      	mov	r3, r2
 8003a24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a2c:	b2db      	uxtb	r3, r3
 8003a2e:	2b20      	cmp	r3, #32
 8003a30:	f040 80fd 	bne.w	8003c2e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a34:	6a3b      	ldr	r3, [r7, #32]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_I2C_Mem_Read+0x34>
 8003a3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a46:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0f1      	b.n	8003c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_I2C_Mem_Read+0x4e>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e0ea      	b.n	8003c30 <HAL_I2C_Mem_Read+0x224>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a62:	f7fe fb3d 	bl	80020e0 <HAL_GetTick>
 8003a66:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	2319      	movs	r3, #25
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f000 f9af 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0d5      	b.n	8003c30 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2222      	movs	r2, #34	@ 0x22
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2240      	movs	r2, #64	@ 0x40
 8003a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a3a      	ldr	r2, [r7, #32]
 8003a9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003aa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003aac:	88f8      	ldrh	r0, [r7, #6]
 8003aae:	893a      	ldrh	r2, [r7, #8]
 8003ab0:	8979      	ldrh	r1, [r7, #10]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	4603      	mov	r3, r0
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f913 	bl	8003ce8 <I2C_RequestMemoryRead>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0ad      	b.n	8003c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	2bff      	cmp	r3, #255	@ 0xff
 8003adc:	d90e      	bls.n	8003afc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	22ff      	movs	r2, #255	@ 0xff
 8003ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	8979      	ldrh	r1, [r7, #10]
 8003aec:	4b52      	ldr	r3, [pc, #328]	@ (8003c38 <HAL_I2C_Mem_Read+0x22c>)
 8003aee:	9300      	str	r3, [sp, #0]
 8003af0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 fb33 	bl	8004160 <I2C_TransferConfig>
 8003afa:	e00f      	b.n	8003b1c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	8979      	ldrh	r1, [r7, #10]
 8003b0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003c38 <HAL_I2C_Mem_Read+0x22c>)
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f000 fb22 	bl	8004160 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b22:	2200      	movs	r2, #0
 8003b24:	2104      	movs	r1, #4
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f956 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e07c      	b.n	8003c30 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d034      	beq.n	8003bdc <HAL_I2C_Mem_Read+0x1d0>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d130      	bne.n	8003bdc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b80:	2200      	movs	r2, #0
 8003b82:	2180      	movs	r1, #128	@ 0x80
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f927 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e04d      	b.n	8003c30 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2bff      	cmp	r3, #255	@ 0xff
 8003b9c:	d90e      	bls.n	8003bbc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	22ff      	movs	r2, #255	@ 0xff
 8003ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	8979      	ldrh	r1, [r7, #10]
 8003bac:	2300      	movs	r3, #0
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fad3 	bl	8004160 <I2C_TransferConfig>
 8003bba:	e00f      	b.n	8003bdc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bca:	b2da      	uxtb	r2, r3
 8003bcc:	8979      	ldrh	r1, [r7, #10]
 8003bce:	2300      	movs	r3, #0
 8003bd0:	9300      	str	r3, [sp, #0]
 8003bd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fac2 	bl	8004160 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d19a      	bne.n	8003b1c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f994 	bl	8003f18 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e01a      	b.n	8003c30 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <HAL_I2C_Mem_Read+0x230>)
 8003c0e:	400b      	ands	r3, r1
 8003c10:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3718      	adds	r7, #24
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	80002400 	.word	0x80002400
 8003c3c:	fe00e800 	.word	0xfe00e800

08003c40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af02      	add	r7, sp, #8
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	4608      	mov	r0, r1
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	4603      	mov	r3, r0
 8003c50:	817b      	strh	r3, [r7, #10]
 8003c52:	460b      	mov	r3, r1
 8003c54:	813b      	strh	r3, [r7, #8]
 8003c56:	4613      	mov	r3, r2
 8003c58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003c5a:	88fb      	ldrh	r3, [r7, #6]
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	8979      	ldrh	r1, [r7, #10]
 8003c60:	4b20      	ldr	r3, [pc, #128]	@ (8003ce4 <I2C_RequestMemoryWrite+0xa4>)
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 fa79 	bl	8004160 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	69b9      	ldr	r1, [r7, #24]
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f909 	bl	8003e8a <I2C_WaitOnTXISFlagUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e02c      	b.n	8003cdc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c82:	88fb      	ldrh	r3, [r7, #6]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d105      	bne.n	8003c94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c88:	893b      	ldrh	r3, [r7, #8]
 8003c8a:	b2da      	uxtb	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c92:	e015      	b.n	8003cc0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c94:	893b      	ldrh	r3, [r7, #8]
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	69b9      	ldr	r1, [r7, #24]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f8ef 	bl	8003e8a <I2C_WaitOnTXISFlagUntilTimeout>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e012      	b.n	8003cdc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cb6:	893b      	ldrh	r3, [r7, #8]
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2180      	movs	r1, #128	@ 0x80
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f000 f884 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3710      	adds	r7, #16
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	80002000 	.word	0x80002000

08003ce8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	4608      	mov	r0, r1
 8003cf2:	4611      	mov	r1, r2
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	817b      	strh	r3, [r7, #10]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	813b      	strh	r3, [r7, #8]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	8979      	ldrh	r1, [r7, #10]
 8003d08:	4b20      	ldr	r3, [pc, #128]	@ (8003d8c <I2C_RequestMemoryRead+0xa4>)
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fa26 	bl	8004160 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d14:	69fa      	ldr	r2, [r7, #28]
 8003d16:	69b9      	ldr	r1, [r7, #24]
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f000 f8b6 	bl	8003e8a <I2C_WaitOnTXISFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e02c      	b.n	8003d82 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d28:	88fb      	ldrh	r3, [r7, #6]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d105      	bne.n	8003d3a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d2e:	893b      	ldrh	r3, [r7, #8]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d38:	e015      	b.n	8003d66 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d3a:	893b      	ldrh	r3, [r7, #8]
 8003d3c:	0a1b      	lsrs	r3, r3, #8
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d48:	69fa      	ldr	r2, [r7, #28]
 8003d4a:	69b9      	ldr	r1, [r7, #24]
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f89c 	bl	8003e8a <I2C_WaitOnTXISFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e012      	b.n	8003d82 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d5c:	893b      	ldrh	r3, [r7, #8]
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2140      	movs	r1, #64	@ 0x40
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 f831 	bl	8003dd8 <I2C_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	80002000 	.word	0x80002000

08003d90 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d103      	bne.n	8003dae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2200      	movs	r2, #0
 8003dac:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d007      	beq.n	8003dcc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0201 	orr.w	r2, r2, #1
 8003dca:	619a      	str	r2, [r3, #24]
  }
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	60f8      	str	r0, [r7, #12]
 8003de0:	60b9      	str	r1, [r7, #8]
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	4613      	mov	r3, r2
 8003de6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003de8:	e03b      	b.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f8d6 	bl	8003fa0 <I2C_IsErrorOccurred>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d001      	beq.n	8003dfe <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e041      	b.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d02d      	beq.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e06:	f7fe f96b 	bl	80020e0 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d302      	bcc.n	8003e1c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d122      	bne.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	699a      	ldr	r2, [r3, #24]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	4013      	ands	r3, r2
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	bf0c      	ite	eq
 8003e2c:	2301      	moveq	r3, #1
 8003e2e:	2300      	movne	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	461a      	mov	r2, r3
 8003e34:	79fb      	ldrb	r3, [r7, #7]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d113      	bne.n	8003e62 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	f043 0220 	orr.w	r2, r3, #32
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e00f      	b.n	8003e82 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699a      	ldr	r2, [r3, #24]
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	68ba      	ldr	r2, [r7, #8]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	bf0c      	ite	eq
 8003e72:	2301      	moveq	r3, #1
 8003e74:	2300      	movne	r3, #0
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	461a      	mov	r2, r3
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d0b4      	beq.n	8003dea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e96:	e033      	b.n	8003f00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68b9      	ldr	r1, [r7, #8]
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f87f 	bl	8003fa0 <I2C_IsErrorOccurred>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e031      	b.n	8003f10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d025      	beq.n	8003f00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb4:	f7fe f914 	bl	80020e0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d11a      	bne.n	8003f00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d013      	beq.n	8003f00 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e007      	b.n	8003f10 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b02      	cmp	r3, #2
 8003f0c:	d1c4      	bne.n	8003e98 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f24:	e02f      	b.n	8003f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f000 f838 	bl	8003fa0 <I2C_IsErrorOccurred>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e02d      	b.n	8003f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3a:	f7fe f8d1 	bl	80020e0 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d302      	bcc.n	8003f50 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d11a      	bne.n	8003f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b20      	cmp	r3, #32
 8003f5c:	d013      	beq.n	8003f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	f043 0220 	orr.w	r2, r3, #32
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e007      	b.n	8003f96 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b20      	cmp	r3, #32
 8003f92:	d1c8      	bne.n	8003f26 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	@ 0x28
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d068      	beq.n	800409e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2210      	movs	r2, #16
 8003fd2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fd4:	e049      	b.n	800406a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d045      	beq.n	800406a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fde:	f7fe f87f 	bl	80020e0 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	68ba      	ldr	r2, [r7, #8]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d302      	bcc.n	8003ff4 <I2C_IsErrorOccurred+0x54>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d13a      	bne.n	800406a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ffe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004006:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004012:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004016:	d121      	bne.n	800405c <I2C_IsErrorOccurred+0xbc>
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800401e:	d01d      	beq.n	800405c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004020:	7cfb      	ldrb	r3, [r7, #19]
 8004022:	2b20      	cmp	r3, #32
 8004024:	d01a      	beq.n	800405c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004034:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004036:	f7fe f853 	bl	80020e0 <HAL_GetTick>
 800403a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800403c:	e00e      	b.n	800405c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800403e:	f7fe f84f 	bl	80020e0 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b19      	cmp	r3, #25
 800404a:	d907      	bls.n	800405c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	f043 0320 	orr.w	r3, r3, #32
 8004052:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800405a:	e006      	b.n	800406a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b20      	cmp	r3, #32
 8004068:	d1e9      	bne.n	800403e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	f003 0320 	and.w	r3, r3, #32
 8004074:	2b20      	cmp	r3, #32
 8004076:	d003      	beq.n	8004080 <I2C_IsErrorOccurred+0xe0>
 8004078:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0aa      	beq.n	8003fd6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004084:	2b00      	cmp	r3, #0
 8004086:	d103      	bne.n	8004090 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2220      	movs	r2, #32
 800408e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	f043 0304 	orr.w	r3, r3, #4
 8004096:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00b      	beq.n	80040c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80040b0:	6a3b      	ldr	r3, [r7, #32]
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80040c8:	69bb      	ldr	r3, [r7, #24]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00b      	beq.n	80040ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	f043 0308 	orr.w	r3, r3, #8
 80040d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00b      	beq.n	800410c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	f043 0302 	orr.w	r3, r3, #2
 80040fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004104:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800410c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01c      	beq.n	800414e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f7ff fe3b 	bl	8003d90 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6859      	ldr	r1, [r3, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	4b0d      	ldr	r3, [pc, #52]	@ (800415c <I2C_IsErrorOccurred+0x1bc>)
 8004126:	400b      	ands	r3, r1
 8004128:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800412e:	6a3b      	ldr	r3, [r7, #32]
 8004130:	431a      	orrs	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2220      	movs	r2, #32
 800413a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800414e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8004152:	4618      	mov	r0, r3
 8004154:	3728      	adds	r7, #40	@ 0x28
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	fe00e800 	.word	0xfe00e800

08004160 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	817b      	strh	r3, [r7, #10]
 800416e:	4613      	mov	r3, r2
 8004170:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004172:	897b      	ldrh	r3, [r7, #10]
 8004174:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004178:	7a7b      	ldrb	r3, [r7, #9]
 800417a:	041b      	lsls	r3, r3, #16
 800417c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004180:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	4313      	orrs	r3, r2
 800418a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800418e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685a      	ldr	r2, [r3, #4]
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	0d5b      	lsrs	r3, r3, #21
 800419a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800419e:	4b08      	ldr	r3, [pc, #32]	@ (80041c0 <I2C_TransferConfig+0x60>)
 80041a0:	430b      	orrs	r3, r1
 80041a2:	43db      	mvns	r3, r3
 80041a4:	ea02 0103 	and.w	r1, r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	03ff63ff 	.word	0x03ff63ff

080041c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d138      	bne.n	800424c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e032      	b.n	800424e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2224      	movs	r2, #36	@ 0x24
 80041f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0201 	bic.w	r2, r2, #1
 8004206:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004216:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6819      	ldr	r1, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	683a      	ldr	r2, [r7, #0]
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f042 0201 	orr.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004248:	2300      	movs	r3, #0
 800424a:	e000      	b.n	800424e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800424c:	2302      	movs	r3, #2
  }
}
 800424e:	4618      	mov	r0, r3
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr

0800425a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800425a:	b480      	push	{r7}
 800425c:	b085      	sub	sp, #20
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
 8004262:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b20      	cmp	r3, #32
 800426e:	d139      	bne.n	80042e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800427a:	2302      	movs	r3, #2
 800427c:	e033      	b.n	80042e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2224      	movs	r2, #36	@ 0x24
 800428a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f022 0201 	bic.w	r2, r2, #1
 800429c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80042ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	021b      	lsls	r3, r3, #8
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f042 0201 	orr.w	r2, r2, #1
 80042ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80042e4:	2302      	movs	r3, #2
  }
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
	...

080042f4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004334 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80042fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004302:	4a0c      	ldr	r2, [pc, #48]	@ (8004334 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8004304:	f043 0302 	orr.w	r3, r3, #2
 8004308:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800430c:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800430e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800431a:	4b07      	ldr	r3, [pc, #28]	@ (8004338 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	4906      	ldr	r1, [pc, #24]	@ (8004338 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4313      	orrs	r3, r2
 8004324:	604b      	str	r3, [r1, #4]
}
 8004326:	bf00      	nop
 8004328:	3714      	adds	r7, #20
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	58024400 	.word	0x58024400
 8004338:	58000400 	.word	0x58000400

0800433c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af02      	add	r7, sp, #8
 8004342:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e0fe      	b.n	800454c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b00      	cmp	r3, #0
 8004358:	d106      	bne.n	8004368 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7fd fd90 	bl	8001e88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2203      	movs	r2, #3
 800436c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f005 fe17 	bl	8009fa8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	7c1a      	ldrb	r2, [r3, #16]
 8004382:	f88d 2000 	strb.w	r2, [sp]
 8004386:	3304      	adds	r3, #4
 8004388:	cb0e      	ldmia	r3, {r1, r2, r3}
 800438a:	f005 fd9b 	bl	8009ec4 <USB_CoreInit>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e0d5      	b.n	800454c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2100      	movs	r1, #0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f005 fe0f 	bl	8009fca <USB_SetCurrentMode>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e0c6      	b.n	800454c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043be:	2300      	movs	r3, #0
 80043c0:	73fb      	strb	r3, [r7, #15]
 80043c2:	e04a      	b.n	800445a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043c4:	7bfa      	ldrb	r2, [r7, #15]
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	3315      	adds	r3, #21
 80043d4:	2201      	movs	r2, #1
 80043d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80043d8:	7bfa      	ldrb	r2, [r7, #15]
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	4613      	mov	r3, r2
 80043de:	00db      	lsls	r3, r3, #3
 80043e0:	4413      	add	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	3314      	adds	r3, #20
 80043e8:	7bfa      	ldrb	r2, [r7, #15]
 80043ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80043ec:	7bfa      	ldrb	r2, [r7, #15]
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	b298      	uxth	r0, r3
 80043f2:	6879      	ldr	r1, [r7, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	332e      	adds	r3, #46	@ 0x2e
 8004400:	4602      	mov	r2, r0
 8004402:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004404:	7bfa      	ldrb	r2, [r7, #15]
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	4413      	add	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	3318      	adds	r3, #24
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	331c      	adds	r3, #28
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800442c:	7bfa      	ldrb	r2, [r7, #15]
 800442e:	6879      	ldr	r1, [r7, #4]
 8004430:	4613      	mov	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	4413      	add	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	440b      	add	r3, r1
 800443a:	3320      	adds	r3, #32
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004440:	7bfa      	ldrb	r2, [r7, #15]
 8004442:	6879      	ldr	r1, [r7, #4]
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	3324      	adds	r3, #36	@ 0x24
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	3301      	adds	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	791b      	ldrb	r3, [r3, #4]
 800445e:	7bfa      	ldrb	r2, [r7, #15]
 8004460:	429a      	cmp	r2, r3
 8004462:	d3af      	bcc.n	80043c4 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004464:	2300      	movs	r3, #0
 8004466:	73fb      	strb	r3, [r7, #15]
 8004468:	e044      	b.n	80044f4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800446a:	7bfa      	ldrb	r2, [r7, #15]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	440b      	add	r3, r1
 8004478:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800447c:	2200      	movs	r2, #0
 800447e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004480:	7bfa      	ldrb	r2, [r7, #15]
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	4413      	add	r3, r2
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	440b      	add	r3, r1
 800448e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004492:	7bfa      	ldrb	r2, [r7, #15]
 8004494:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004496:	7bfa      	ldrb	r2, [r7, #15]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	440b      	add	r3, r1
 80044a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044ac:	7bfa      	ldrb	r2, [r7, #15]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	440b      	add	r3, r1
 80044ba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80044be:	2200      	movs	r2, #0
 80044c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044c2:	7bfa      	ldrb	r2, [r7, #15]
 80044c4:	6879      	ldr	r1, [r7, #4]
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80044d8:	7bfa      	ldrb	r2, [r7, #15]
 80044da:	6879      	ldr	r1, [r7, #4]
 80044dc:	4613      	mov	r3, r2
 80044de:	00db      	lsls	r3, r3, #3
 80044e0:	4413      	add	r3, r2
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	440b      	add	r3, r1
 80044e6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	3301      	adds	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	791b      	ldrb	r3, [r3, #4]
 80044f8:	7bfa      	ldrb	r2, [r7, #15]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d3b5      	bcc.n	800446a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	7c1a      	ldrb	r2, [r3, #16]
 8004506:	f88d 2000 	strb.w	r2, [sp]
 800450a:	3304      	adds	r3, #4
 800450c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800450e:	f005 fda9 	bl	800a064 <USB_DevInit>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e013      	b.n	800454c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	7b1b      	ldrb	r3, [r3, #12]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d102      	bne.n	8004540 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f80a 	bl	8004554 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f005 ff64 	bl	800a412 <USB_DevDisconnect>

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004582:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <HAL_PCDEx_ActivateLPM+0x44>)
 8004584:	4313      	orrs	r3, r2
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800458a:	2300      	movs	r3, #0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	10000003 	.word	0x10000003

0800459c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80045a4:	4b19      	ldr	r3, [pc, #100]	@ (800460c <HAL_PWREx_ConfigSupply+0x70>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d00a      	beq.n	80045c6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80045b0:	4b16      	ldr	r3, [pc, #88]	@ (800460c <HAL_PWREx_ConfigSupply+0x70>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d001      	beq.n	80045c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e01f      	b.n	8004602 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	e01d      	b.n	8004602 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80045c6:	4b11      	ldr	r3, [pc, #68]	@ (800460c <HAL_PWREx_ConfigSupply+0x70>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f023 0207 	bic.w	r2, r3, #7
 80045ce:	490f      	ldr	r1, [pc, #60]	@ (800460c <HAL_PWREx_ConfigSupply+0x70>)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80045d6:	f7fd fd83 	bl	80020e0 <HAL_GetTick>
 80045da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045dc:	e009      	b.n	80045f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80045de:	f7fd fd7f 	bl	80020e0 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80045ec:	d901      	bls.n	80045f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e007      	b.n	8004602 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80045f2:	4b06      	ldr	r3, [pc, #24]	@ (800460c <HAL_PWREx_ConfigSupply+0x70>)
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045fe:	d1ee      	bne.n	80045de <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3710      	adds	r7, #16
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	58024800 	.word	0x58024800

08004610 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004614:	4b05      	ldr	r3, [pc, #20]	@ (800462c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	4a04      	ldr	r2, [pc, #16]	@ (800462c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800461a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800461e:	60d3      	str	r3, [r2, #12]
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	58024800 	.word	0x58024800

08004630 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08c      	sub	sp, #48	@ 0x30
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d102      	bne.n	8004644 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	f000 bc48 	b.w	8004ed4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0301 	and.w	r3, r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8088 	beq.w	8004762 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004652:	4b99      	ldr	r3, [pc, #612]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800465a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800465c:	4b96      	ldr	r3, [pc, #600]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 800465e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004660:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004664:	2b10      	cmp	r3, #16
 8004666:	d007      	beq.n	8004678 <HAL_RCC_OscConfig+0x48>
 8004668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800466a:	2b18      	cmp	r3, #24
 800466c:	d111      	bne.n	8004692 <HAL_RCC_OscConfig+0x62>
 800466e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004670:	f003 0303 	and.w	r3, r3, #3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d10c      	bne.n	8004692 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004678:	4b8f      	ldr	r3, [pc, #572]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d06d      	beq.n	8004760 <HAL_RCC_OscConfig+0x130>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d169      	bne.n	8004760 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	f000 bc21 	b.w	8004ed4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800469a:	d106      	bne.n	80046aa <HAL_RCC_OscConfig+0x7a>
 800469c:	4b86      	ldr	r3, [pc, #536]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a85      	ldr	r2, [pc, #532]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80046a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e02e      	b.n	8004708 <HAL_RCC_OscConfig+0xd8>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0x9c>
 80046b2:	4b81      	ldr	r3, [pc, #516]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a80      	ldr	r2, [pc, #512]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80046b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b7e      	ldr	r3, [pc, #504]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a7d      	ldr	r2, [pc, #500]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80046c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	e01d      	b.n	8004708 <HAL_RCC_OscConfig+0xd8>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80046d4:	d10c      	bne.n	80046f0 <HAL_RCC_OscConfig+0xc0>
 80046d6:	4b78      	ldr	r3, [pc, #480]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a77      	ldr	r2, [pc, #476]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80046dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4b75      	ldr	r3, [pc, #468]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a74      	ldr	r2, [pc, #464]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80046e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	e00b      	b.n	8004708 <HAL_RCC_OscConfig+0xd8>
 80046f0:	4b71      	ldr	r3, [pc, #452]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a70      	ldr	r2, [pc, #448]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80046f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	4b6e      	ldr	r3, [pc, #440]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a6d      	ldr	r2, [pc, #436]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 8004702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d013      	beq.n	8004738 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fd fce6 	bl	80020e0 <HAL_GetTick>
 8004714:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004716:	e008      	b.n	800472a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004718:	f7fd fce2 	bl	80020e0 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	2b64      	cmp	r3, #100	@ 0x64
 8004724:	d901      	bls.n	800472a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e3d4      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800472a:	4b63      	ldr	r3, [pc, #396]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d0f0      	beq.n	8004718 <HAL_RCC_OscConfig+0xe8>
 8004736:	e014      	b.n	8004762 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004738:	f7fd fcd2 	bl	80020e0 <HAL_GetTick>
 800473c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004740:	f7fd fcce 	bl	80020e0 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b64      	cmp	r3, #100	@ 0x64
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e3c0      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004752:	4b59      	ldr	r3, [pc, #356]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x110>
 800475e:	e000      	b.n	8004762 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 80ca 	beq.w	8004904 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004770:	4b51      	ldr	r3, [pc, #324]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004778:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800477a:	4b4f      	ldr	r3, [pc, #316]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 800477c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d007      	beq.n	8004796 <HAL_RCC_OscConfig+0x166>
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	2b18      	cmp	r3, #24
 800478a:	d156      	bne.n	800483a <HAL_RCC_OscConfig+0x20a>
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d151      	bne.n	800483a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004796:	4b48      	ldr	r3, [pc, #288]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d005      	beq.n	80047ae <HAL_RCC_OscConfig+0x17e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e392      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80047ae:	4b42      	ldr	r3, [pc, #264]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 0219 	bic.w	r2, r3, #25
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	493f      	ldr	r1, [pc, #252]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd fc8e 	bl	80020e0 <HAL_GetTick>
 80047c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c8:	f7fd fc8a 	bl	80020e0 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e37c      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047da:	4b37      	ldr	r3, [pc, #220]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e6:	f7fd fcab 	bl	8002140 <HAL_GetREVID>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d817      	bhi.n	8004824 <HAL_RCC_OscConfig+0x1f4>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b40      	cmp	r3, #64	@ 0x40
 80047fa:	d108      	bne.n	800480e <HAL_RCC_OscConfig+0x1de>
 80047fc:	4b2e      	ldr	r3, [pc, #184]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004804:	4a2c      	ldr	r2, [pc, #176]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 8004806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800480a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800480c:	e07a      	b.n	8004904 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480e:	4b2a      	ldr	r3, [pc, #168]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	031b      	lsls	r3, r3, #12
 800481c:	4926      	ldr	r1, [pc, #152]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 800481e:	4313      	orrs	r3, r2
 8004820:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004822:	e06f      	b.n	8004904 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004824:	4b24      	ldr	r3, [pc, #144]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	061b      	lsls	r3, r3, #24
 8004832:	4921      	ldr	r1, [pc, #132]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 8004834:	4313      	orrs	r3, r2
 8004836:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004838:	e064      	b.n	8004904 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d047      	beq.n	80048d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004842:	4b1d      	ldr	r3, [pc, #116]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 0219 	bic.w	r2, r3, #25
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	491a      	ldr	r1, [pc, #104]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fd fc44 	bl	80020e0 <HAL_GetTick>
 8004858:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485c:	f7fd fc40 	bl	80020e0 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e332      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800486e:	4b12      	ldr	r3, [pc, #72]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487a:	f7fd fc61 	bl	8002140 <HAL_GetREVID>
 800487e:	4603      	mov	r3, r0
 8004880:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004884:	4293      	cmp	r3, r2
 8004886:	d819      	bhi.n	80048bc <HAL_RCC_OscConfig+0x28c>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	2b40      	cmp	r3, #64	@ 0x40
 800488e:	d108      	bne.n	80048a2 <HAL_RCC_OscConfig+0x272>
 8004890:	4b09      	ldr	r3, [pc, #36]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004898:	4a07      	ldr	r2, [pc, #28]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 800489a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800489e:	6053      	str	r3, [r2, #4]
 80048a0:	e030      	b.n	8004904 <HAL_RCC_OscConfig+0x2d4>
 80048a2:	4b05      	ldr	r3, [pc, #20]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	031b      	lsls	r3, r3, #12
 80048b0:	4901      	ldr	r1, [pc, #4]	@ (80048b8 <HAL_RCC_OscConfig+0x288>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	604b      	str	r3, [r1, #4]
 80048b6:	e025      	b.n	8004904 <HAL_RCC_OscConfig+0x2d4>
 80048b8:	58024400 	.word	0x58024400
 80048bc:	4b9a      	ldr	r3, [pc, #616]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	061b      	lsls	r3, r3, #24
 80048ca:	4997      	ldr	r1, [pc, #604]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
 80048d0:	e018      	b.n	8004904 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048d2:	4b95      	ldr	r3, [pc, #596]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a94      	ldr	r2, [pc, #592]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048de:	f7fd fbff 	bl	80020e0 <HAL_GetTick>
 80048e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e6:	f7fd fbfb 	bl	80020e0 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e2ed      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80048f8:	4b8b      	ldr	r3, [pc, #556]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f0      	bne.n	80048e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0310 	and.w	r3, r3, #16
 800490c:	2b00      	cmp	r3, #0
 800490e:	f000 80a9 	beq.w	8004a64 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004912:	4b85      	ldr	r3, [pc, #532]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004914:	691b      	ldr	r3, [r3, #16]
 8004916:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800491a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800491c:	4b82      	ldr	r3, [pc, #520]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 800491e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004920:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d007      	beq.n	8004938 <HAL_RCC_OscConfig+0x308>
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	2b18      	cmp	r3, #24
 800492c:	d13a      	bne.n	80049a4 <HAL_RCC_OscConfig+0x374>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f003 0303 	and.w	r3, r3, #3
 8004934:	2b01      	cmp	r3, #1
 8004936:	d135      	bne.n	80049a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004938:	4b7b      	ldr	r3, [pc, #492]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d005      	beq.n	8004950 <HAL_RCC_OscConfig+0x320>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	2b80      	cmp	r3, #128	@ 0x80
 800494a:	d001      	beq.n	8004950 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e2c1      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004950:	f7fd fbf6 	bl	8002140 <HAL_GetREVID>
 8004954:	4603      	mov	r3, r0
 8004956:	f241 0203 	movw	r2, #4099	@ 0x1003
 800495a:	4293      	cmp	r3, r2
 800495c:	d817      	bhi.n	800498e <HAL_RCC_OscConfig+0x35e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a1b      	ldr	r3, [r3, #32]
 8004962:	2b20      	cmp	r3, #32
 8004964:	d108      	bne.n	8004978 <HAL_RCC_OscConfig+0x348>
 8004966:	4b70      	ldr	r3, [pc, #448]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800496e:	4a6e      	ldr	r2, [pc, #440]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004970:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004974:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004976:	e075      	b.n	8004a64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004978:	4b6b      	ldr	r3, [pc, #428]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	069b      	lsls	r3, r3, #26
 8004986:	4968      	ldr	r1, [pc, #416]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800498c:	e06a      	b.n	8004a64 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800498e:	4b66      	ldr	r3, [pc, #408]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	061b      	lsls	r3, r3, #24
 800499c:	4962      	ldr	r1, [pc, #392]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049a2:	e05f      	b.n	8004a64 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	69db      	ldr	r3, [r3, #28]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d042      	beq.n	8004a32 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049ac:	4b5e      	ldr	r3, [pc, #376]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 80049b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b8:	f7fd fb92 	bl	80020e0 <HAL_GetTick>
 80049bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049c0:	f7fd fb8e 	bl	80020e0 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e280      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049d2:	4b55      	ldr	r3, [pc, #340]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f0      	beq.n	80049c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049de:	f7fd fbaf 	bl	8002140 <HAL_GetREVID>
 80049e2:	4603      	mov	r3, r0
 80049e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d817      	bhi.n	8004a1c <HAL_RCC_OscConfig+0x3ec>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d108      	bne.n	8004a06 <HAL_RCC_OscConfig+0x3d6>
 80049f4:	4b4c      	ldr	r3, [pc, #304]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80049fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 80049fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a02:	6053      	str	r3, [r2, #4]
 8004a04:	e02e      	b.n	8004a64 <HAL_RCC_OscConfig+0x434>
 8004a06:	4b48      	ldr	r3, [pc, #288]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a1b      	ldr	r3, [r3, #32]
 8004a12:	069b      	lsls	r3, r3, #26
 8004a14:	4944      	ldr	r1, [pc, #272]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	604b      	str	r3, [r1, #4]
 8004a1a:	e023      	b.n	8004a64 <HAL_RCC_OscConfig+0x434>
 8004a1c:	4b42      	ldr	r3, [pc, #264]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	061b      	lsls	r3, r3, #24
 8004a2a:	493f      	ldr	r1, [pc, #252]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60cb      	str	r3, [r1, #12]
 8004a30:	e018      	b.n	8004a64 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a32:	4b3d      	ldr	r3, [pc, #244]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a3c      	ldr	r2, [pc, #240]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004a38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3e:	f7fd fb4f 	bl	80020e0 <HAL_GetTick>
 8004a42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a46:	f7fd fb4b 	bl	80020e0 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e23d      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a58:	4b33      	ldr	r3, [pc, #204]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1f0      	bne.n	8004a46 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0308 	and.w	r3, r3, #8
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d036      	beq.n	8004ade <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d019      	beq.n	8004aac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a78:	4b2b      	ldr	r3, [pc, #172]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004a7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a7c:	4a2a      	ldr	r2, [pc, #168]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fd fb2c 	bl	80020e0 <HAL_GetTick>
 8004a88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a8c:	f7fd fb28 	bl	80020e0 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e21a      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a9e:	4b22      	ldr	r3, [pc, #136]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004aa0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aa2:	f003 0302 	and.w	r3, r3, #2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d0f0      	beq.n	8004a8c <HAL_RCC_OscConfig+0x45c>
 8004aaa:	e018      	b.n	8004ade <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aac:	4b1e      	ldr	r3, [pc, #120]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004aae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004ab2:	f023 0301 	bic.w	r3, r3, #1
 8004ab6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab8:	f7fd fb12 	bl	80020e0 <HAL_GetTick>
 8004abc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac0:	f7fd fb0e 	bl	80020e0 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e200      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004ad2:	4b15      	ldr	r3, [pc, #84]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1f0      	bne.n	8004ac0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0320 	and.w	r3, r3, #32
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d039      	beq.n	8004b5e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d01c      	beq.n	8004b2c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004af2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a0c      	ldr	r2, [pc, #48]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004af8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004afc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004afe:	f7fd faef 	bl	80020e0 <HAL_GetTick>
 8004b02:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b04:	e008      	b.n	8004b18 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b06:	f7fd faeb 	bl	80020e0 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	2b02      	cmp	r3, #2
 8004b12:	d901      	bls.n	8004b18 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e1dd      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b18:	4b03      	ldr	r3, [pc, #12]	@ (8004b28 <HAL_RCC_OscConfig+0x4f8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0f0      	beq.n	8004b06 <HAL_RCC_OscConfig+0x4d6>
 8004b24:	e01b      	b.n	8004b5e <HAL_RCC_OscConfig+0x52e>
 8004b26:	bf00      	nop
 8004b28:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b2c:	4b9b      	ldr	r3, [pc, #620]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a9a      	ldr	r2, [pc, #616]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b36:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b38:	f7fd fad2 	bl	80020e0 <HAL_GetTick>
 8004b3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b40:	f7fd face 	bl	80020e0 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e1c0      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b52:	4b92      	ldr	r3, [pc, #584]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0304 	and.w	r3, r3, #4
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 8081 	beq.w	8004c6e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b6c:	4b8c      	ldr	r3, [pc, #560]	@ (8004da0 <HAL_RCC_OscConfig+0x770>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a8b      	ldr	r2, [pc, #556]	@ (8004da0 <HAL_RCC_OscConfig+0x770>)
 8004b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b78:	f7fd fab2 	bl	80020e0 <HAL_GetTick>
 8004b7c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b80:	f7fd faae 	bl	80020e0 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b64      	cmp	r3, #100	@ 0x64
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e1a0      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b92:	4b83      	ldr	r3, [pc, #524]	@ (8004da0 <HAL_RCC_OscConfig+0x770>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d0f0      	beq.n	8004b80 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d106      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x584>
 8004ba6:	4b7d      	ldr	r3, [pc, #500]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004baa:	4a7c      	ldr	r2, [pc, #496]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb2:	e02d      	b.n	8004c10 <HAL_RCC_OscConfig+0x5e0>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10c      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x5a6>
 8004bbc:	4b77      	ldr	r3, [pc, #476]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc0:	4a76      	ldr	r2, [pc, #472]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc8:	4b74      	ldr	r3, [pc, #464]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bcc:	4a73      	ldr	r2, [pc, #460]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004bce:	f023 0304 	bic.w	r3, r3, #4
 8004bd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd4:	e01c      	b.n	8004c10 <HAL_RCC_OscConfig+0x5e0>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x5c8>
 8004bde:	4b6f      	ldr	r3, [pc, #444]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be2:	4a6e      	ldr	r2, [pc, #440]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004be4:	f043 0304 	orr.w	r3, r3, #4
 8004be8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bea:	4b6c      	ldr	r3, [pc, #432]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bee:	4a6b      	ldr	r2, [pc, #428]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCC_OscConfig+0x5e0>
 8004bf8:	4b68      	ldr	r3, [pc, #416]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bfc:	4a67      	ldr	r2, [pc, #412]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c04:	4b65      	ldr	r3, [pc, #404]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c08:	4a64      	ldr	r2, [pc, #400]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004c0a:	f023 0304 	bic.w	r3, r3, #4
 8004c0e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d015      	beq.n	8004c44 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c18:	f7fd fa62 	bl	80020e0 <HAL_GetTick>
 8004c1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c20:	f7fd fa5e 	bl	80020e0 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e14e      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c36:	4b59      	ldr	r3, [pc, #356]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0ee      	beq.n	8004c20 <HAL_RCC_OscConfig+0x5f0>
 8004c42:	e014      	b.n	8004c6e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c44:	f7fd fa4c 	bl	80020e0 <HAL_GetTick>
 8004c48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c4a:	e00a      	b.n	8004c62 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4c:	f7fd fa48 	bl	80020e0 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e138      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c62:	4b4e      	ldr	r3, [pc, #312]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1ee      	bne.n	8004c4c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 812d 	beq.w	8004ed2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c78:	4b48      	ldr	r3, [pc, #288]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c80:	2b18      	cmp	r3, #24
 8004c82:	f000 80bd 	beq.w	8004e00 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	f040 809e 	bne.w	8004dcc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c90:	4b42      	ldr	r3, [pc, #264]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a41      	ldr	r2, [pc, #260]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004c96:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9c:	f7fd fa20 	bl	80020e0 <HAL_GetTick>
 8004ca0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca4:	f7fd fa1c 	bl	80020e0 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e10e      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cb6:	4b39      	ldr	r3, [pc, #228]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004cc2:	4b36      	ldr	r3, [pc, #216]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004cc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004cc6:	4b37      	ldr	r3, [pc, #220]	@ (8004da4 <HAL_RCC_OscConfig+0x774>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cd2:	0112      	lsls	r2, r2, #4
 8004cd4:	430a      	orrs	r2, r1
 8004cd6:	4931      	ldr	r1, [pc, #196]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cea:	3b01      	subs	r3, #1
 8004cec:	025b      	lsls	r3, r3, #9
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	041b      	lsls	r3, r3, #16
 8004cfa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d04:	3b01      	subs	r3, #1
 8004d06:	061b      	lsls	r3, r3, #24
 8004d08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d0c:	4923      	ldr	r1, [pc, #140]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004d12:	4b22      	ldr	r3, [pc, #136]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d16:	4a21      	ldr	r2, [pc, #132]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d22:	4b21      	ldr	r3, [pc, #132]	@ (8004da8 <HAL_RCC_OscConfig+0x778>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d2a:	00d2      	lsls	r2, r2, #3
 8004d2c:	491b      	ldr	r1, [pc, #108]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d32:	4b1a      	ldr	r3, [pc, #104]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d36:	f023 020c 	bic.w	r2, r3, #12
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	4917      	ldr	r1, [pc, #92]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d44:	4b15      	ldr	r3, [pc, #84]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d48:	f023 0202 	bic.w	r2, r3, #2
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d50:	4912      	ldr	r1, [pc, #72]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d56:	4b11      	ldr	r3, [pc, #68]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5a:	4a10      	ldr	r2, [pc, #64]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d62:	4b0e      	ldr	r3, [pc, #56]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d66:	4a0d      	ldr	r2, [pc, #52]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	4a0a      	ldr	r2, [pc, #40]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d7a:	4b08      	ldr	r3, [pc, #32]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	4a07      	ldr	r2, [pc, #28]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d86:	4b05      	ldr	r3, [pc, #20]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a04      	ldr	r2, [pc, #16]	@ (8004d9c <HAL_RCC_OscConfig+0x76c>)
 8004d8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d92:	f7fd f9a5 	bl	80020e0 <HAL_GetTick>
 8004d96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d98:	e011      	b.n	8004dbe <HAL_RCC_OscConfig+0x78e>
 8004d9a:	bf00      	nop
 8004d9c:	58024400 	.word	0x58024400
 8004da0:	58024800 	.word	0x58024800
 8004da4:	fffffc0c 	.word	0xfffffc0c
 8004da8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dac:	f7fd f998 	bl	80020e0 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e08a      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dbe:	4b47      	ldr	r3, [pc, #284]	@ (8004edc <HAL_RCC_OscConfig+0x8ac>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <HAL_RCC_OscConfig+0x77c>
 8004dca:	e082      	b.n	8004ed2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dcc:	4b43      	ldr	r3, [pc, #268]	@ (8004edc <HAL_RCC_OscConfig+0x8ac>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a42      	ldr	r2, [pc, #264]	@ (8004edc <HAL_RCC_OscConfig+0x8ac>)
 8004dd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7fd f982 	bl	80020e0 <HAL_GetTick>
 8004ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dde:	e008      	b.n	8004df2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de0:	f7fd f97e 	bl	80020e0 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e070      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004df2:	4b3a      	ldr	r3, [pc, #232]	@ (8004edc <HAL_RCC_OscConfig+0x8ac>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x7b0>
 8004dfe:	e068      	b.n	8004ed2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e00:	4b36      	ldr	r3, [pc, #216]	@ (8004edc <HAL_RCC_OscConfig+0x8ac>)
 8004e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e06:	4b35      	ldr	r3, [pc, #212]	@ (8004edc <HAL_RCC_OscConfig+0x8ac>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d031      	beq.n	8004e78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f003 0203 	and.w	r2, r3, #3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d12a      	bne.n	8004e78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	091b      	lsrs	r3, r3, #4
 8004e26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d122      	bne.n	8004e78 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d11a      	bne.n	8004e78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	0a5b      	lsrs	r3, r3, #9
 8004e46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d111      	bne.n	8004e78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	0c1b      	lsrs	r3, r3, #16
 8004e58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d108      	bne.n	8004e78 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	0e1b      	lsrs	r3, r3, #24
 8004e6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d001      	beq.n	8004e7c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e02b      	b.n	8004ed4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e7c:	4b17      	ldr	r3, [pc, #92]	@ (8004edc <HAL_RCC_OscConfig+0x8ac>)
 8004e7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e80:	08db      	lsrs	r3, r3, #3
 8004e82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d01f      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e92:	4b12      	ldr	r3, [pc, #72]	@ (8004edc <HAL_RCC_OscConfig+0x8ac>)
 8004e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e96:	4a11      	ldr	r2, [pc, #68]	@ (8004edc <HAL_RCC_OscConfig+0x8ac>)
 8004e98:	f023 0301 	bic.w	r3, r3, #1
 8004e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e9e:	f7fd f91f 	bl	80020e0 <HAL_GetTick>
 8004ea2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ea4:	bf00      	nop
 8004ea6:	f7fd f91b 	bl	80020e0 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d0f9      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8004edc <HAL_RCC_OscConfig+0x8ac>)
 8004eb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ee0 <HAL_RCC_OscConfig+0x8b0>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ebe:	00d2      	lsls	r2, r2, #3
 8004ec0:	4906      	ldr	r1, [pc, #24]	@ (8004edc <HAL_RCC_OscConfig+0x8ac>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004ec6:	4b05      	ldr	r3, [pc, #20]	@ (8004edc <HAL_RCC_OscConfig+0x8ac>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	4a04      	ldr	r2, [pc, #16]	@ (8004edc <HAL_RCC_OscConfig+0x8ac>)
 8004ecc:	f043 0301 	orr.w	r3, r3, #1
 8004ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3730      	adds	r7, #48	@ 0x30
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	58024400 	.word	0x58024400
 8004ee0:	ffff0007 	.word	0xffff0007

08004ee4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d101      	bne.n	8004ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e19c      	b.n	8005232 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef8:	4b8a      	ldr	r3, [pc, #552]	@ (8005124 <HAL_RCC_ClockConfig+0x240>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d910      	bls.n	8004f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f06:	4b87      	ldr	r3, [pc, #540]	@ (8005124 <HAL_RCC_ClockConfig+0x240>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f023 020f 	bic.w	r2, r3, #15
 8004f0e:	4985      	ldr	r1, [pc, #532]	@ (8005124 <HAL_RCC_ClockConfig+0x240>)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f16:	4b83      	ldr	r3, [pc, #524]	@ (8005124 <HAL_RCC_ClockConfig+0x240>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 030f 	and.w	r3, r3, #15
 8004f1e:	683a      	ldr	r2, [r7, #0]
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d001      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e184      	b.n	8005232 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d010      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	4b7b      	ldr	r3, [pc, #492]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d908      	bls.n	8004f56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f44:	4b78      	ldr	r3, [pc, #480]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	4975      	ldr	r1, [pc, #468]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d010      	beq.n	8004f84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695a      	ldr	r2, [r3, #20]
 8004f66:	4b70      	ldr	r3, [pc, #448]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004f68:	69db      	ldr	r3, [r3, #28]
 8004f6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d908      	bls.n	8004f84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f72:	4b6d      	ldr	r3, [pc, #436]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	496a      	ldr	r1, [pc, #424]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0310 	and.w	r3, r3, #16
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d010      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	699a      	ldr	r2, [r3, #24]
 8004f94:	4b64      	ldr	r3, [pc, #400]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004f96:	69db      	ldr	r3, [r3, #28]
 8004f98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d908      	bls.n	8004fb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004fa0:	4b61      	ldr	r3, [pc, #388]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	495e      	ldr	r1, [pc, #376]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0320 	and.w	r3, r3, #32
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d010      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69da      	ldr	r2, [r3, #28]
 8004fc2:	4b59      	ldr	r3, [pc, #356]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d908      	bls.n	8004fe0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fce:	4b56      	ldr	r3, [pc, #344]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	4953      	ldr	r1, [pc, #332]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0302 	and.w	r3, r3, #2
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d010      	beq.n	800500e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	4b4d      	ldr	r3, [pc, #308]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004ff2:	699b      	ldr	r3, [r3, #24]
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d908      	bls.n	800500e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ffc:	4b4a      	ldr	r3, [pc, #296]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	f023 020f 	bic.w	r2, r3, #15
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	4947      	ldr	r1, [pc, #284]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 800500a:	4313      	orrs	r3, r2
 800500c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d055      	beq.n	80050c6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800501a:	4b43      	ldr	r3, [pc, #268]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	4940      	ldr	r1, [pc, #256]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8005028:	4313      	orrs	r3, r2
 800502a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d107      	bne.n	8005044 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005034:	4b3c      	ldr	r3, [pc, #240]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d121      	bne.n	8005084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0f6      	b.n	8005232 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	2b03      	cmp	r3, #3
 800504a:	d107      	bne.n	800505c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800504c:	4b36      	ldr	r3, [pc, #216]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d115      	bne.n	8005084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0ea      	b.n	8005232 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b01      	cmp	r3, #1
 8005062:	d107      	bne.n	8005074 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005064:	4b30      	ldr	r3, [pc, #192]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800506c:	2b00      	cmp	r3, #0
 800506e:	d109      	bne.n	8005084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0de      	b.n	8005232 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005074:	4b2c      	ldr	r3, [pc, #176]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0d6      	b.n	8005232 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005084:	4b28      	ldr	r3, [pc, #160]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	f023 0207 	bic.w	r2, r3, #7
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	4925      	ldr	r1, [pc, #148]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 8005092:	4313      	orrs	r3, r2
 8005094:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005096:	f7fd f823 	bl	80020e0 <HAL_GetTick>
 800509a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509c:	e00a      	b.n	80050b4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509e:	f7fd f81f 	bl	80020e0 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d901      	bls.n	80050b4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80050b0:	2303      	movs	r3, #3
 80050b2:	e0be      	b.n	8005232 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b4:	4b1c      	ldr	r3, [pc, #112]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d1eb      	bne.n	800509e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d010      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	4b14      	ldr	r3, [pc, #80]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	429a      	cmp	r2, r3
 80050e0:	d208      	bcs.n	80050f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050e2:	4b11      	ldr	r3, [pc, #68]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f023 020f 	bic.w	r2, r3, #15
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	490e      	ldr	r1, [pc, #56]	@ (8005128 <HAL_RCC_ClockConfig+0x244>)
 80050f0:	4313      	orrs	r3, r2
 80050f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <HAL_RCC_ClockConfig+0x240>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d214      	bcs.n	800512c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005102:	4b08      	ldr	r3, [pc, #32]	@ (8005124 <HAL_RCC_ClockConfig+0x240>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 020f 	bic.w	r2, r3, #15
 800510a:	4906      	ldr	r1, [pc, #24]	@ (8005124 <HAL_RCC_ClockConfig+0x240>)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005112:	4b04      	ldr	r3, [pc, #16]	@ (8005124 <HAL_RCC_ClockConfig+0x240>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f003 030f 	and.w	r3, r3, #15
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	429a      	cmp	r2, r3
 800511e:	d005      	beq.n	800512c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e086      	b.n	8005232 <HAL_RCC_ClockConfig+0x34e>
 8005124:	52002000 	.word	0x52002000
 8005128:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
 8005134:	2b00      	cmp	r3, #0
 8005136:	d010      	beq.n	800515a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	691a      	ldr	r2, [r3, #16]
 800513c:	4b3f      	ldr	r3, [pc, #252]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 800513e:	699b      	ldr	r3, [r3, #24]
 8005140:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005144:	429a      	cmp	r2, r3
 8005146:	d208      	bcs.n	800515a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005148:	4b3c      	ldr	r3, [pc, #240]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	4939      	ldr	r1, [pc, #228]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 8005156:	4313      	orrs	r3, r2
 8005158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d010      	beq.n	8005188 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695a      	ldr	r2, [r3, #20]
 800516a:	4b34      	ldr	r3, [pc, #208]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005172:	429a      	cmp	r2, r3
 8005174:	d208      	bcs.n	8005188 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005176:	4b31      	ldr	r3, [pc, #196]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	492e      	ldr	r1, [pc, #184]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 8005184:	4313      	orrs	r3, r2
 8005186:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	2b00      	cmp	r3, #0
 8005192:	d010      	beq.n	80051b6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699a      	ldr	r2, [r3, #24]
 8005198:	4b28      	ldr	r3, [pc, #160]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d208      	bcs.n	80051b6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80051a4:	4b25      	ldr	r3, [pc, #148]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 80051a6:	69db      	ldr	r3, [r3, #28]
 80051a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	4922      	ldr	r1, [pc, #136]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0320 	and.w	r3, r3, #32
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d010      	beq.n	80051e4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69da      	ldr	r2, [r3, #28]
 80051c6:	4b1d      	ldr	r3, [pc, #116]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d208      	bcs.n	80051e4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051d2:	4b1a      	ldr	r3, [pc, #104]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	4917      	ldr	r1, [pc, #92]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051e4:	f000 f89e 	bl	8005324 <HAL_RCC_GetSysClockFreq>
 80051e8:	4602      	mov	r2, r0
 80051ea:	4b14      	ldr	r3, [pc, #80]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	0a1b      	lsrs	r3, r3, #8
 80051f0:	f003 030f 	and.w	r3, r3, #15
 80051f4:	4912      	ldr	r1, [pc, #72]	@ (8005240 <HAL_RCC_ClockConfig+0x35c>)
 80051f6:	5ccb      	ldrb	r3, [r1, r3]
 80051f8:	f003 031f 	and.w	r3, r3, #31
 80051fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005200:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005202:	4b0e      	ldr	r3, [pc, #56]	@ (800523c <HAL_RCC_ClockConfig+0x358>)
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	4a0d      	ldr	r2, [pc, #52]	@ (8005240 <HAL_RCC_ClockConfig+0x35c>)
 800520c:	5cd3      	ldrb	r3, [r2, r3]
 800520e:	f003 031f 	and.w	r3, r3, #31
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
 8005218:	4a0a      	ldr	r2, [pc, #40]	@ (8005244 <HAL_RCC_ClockConfig+0x360>)
 800521a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800521c:	4a0a      	ldr	r2, [pc, #40]	@ (8005248 <HAL_RCC_ClockConfig+0x364>)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005222:	4b0a      	ldr	r3, [pc, #40]	@ (800524c <HAL_RCC_ClockConfig+0x368>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fc ff10 	bl	800204c <HAL_InitTick>
 800522c:	4603      	mov	r3, r0
 800522e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005230:	7bfb      	ldrb	r3, [r7, #15]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	58024400 	.word	0x58024400
 8005240:	0800aee8 	.word	0x0800aee8
 8005244:	24000008 	.word	0x24000008
 8005248:	24000004 	.word	0x24000004
 800524c:	2400000c 	.word	0x2400000c

08005250 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08c      	sub	sp, #48	@ 0x30
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d12a      	bne.n	80052b8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8005262:	4b2d      	ldr	r3, [pc, #180]	@ (8005318 <HAL_RCC_MCOConfig+0xc8>)
 8005264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005268:	4a2b      	ldr	r2, [pc, #172]	@ (8005318 <HAL_RCC_MCOConfig+0xc8>)
 800526a:	f043 0301 	orr.w	r3, r3, #1
 800526e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005272:	4b29      	ldr	r3, [pc, #164]	@ (8005318 <HAL_RCC_MCOConfig+0xc8>)
 8005274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005280:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005286:	2302      	movs	r3, #2
 8005288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800528a:	2303      	movs	r3, #3
 800528c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800528e:	2300      	movs	r3, #0
 8005290:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005292:	2300      	movs	r3, #0
 8005294:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005296:	f107 031c 	add.w	r3, r7, #28
 800529a:	4619      	mov	r1, r3
 800529c:	481f      	ldr	r0, [pc, #124]	@ (800531c <HAL_RCC_MCOConfig+0xcc>)
 800529e:	f7fe f83b 	bl	8003318 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80052a2:	4b1d      	ldr	r3, [pc, #116]	@ (8005318 <HAL_RCC_MCOConfig+0xc8>)
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 80052aa:	68b9      	ldr	r1, [r7, #8]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	430b      	orrs	r3, r1
 80052b0:	4919      	ldr	r1, [pc, #100]	@ (8005318 <HAL_RCC_MCOConfig+0xc8>)
 80052b2:	4313      	orrs	r3, r2
 80052b4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80052b6:	e02a      	b.n	800530e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80052b8:	4b17      	ldr	r3, [pc, #92]	@ (8005318 <HAL_RCC_MCOConfig+0xc8>)
 80052ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052be:	4a16      	ldr	r2, [pc, #88]	@ (8005318 <HAL_RCC_MCOConfig+0xc8>)
 80052c0:	f043 0304 	orr.w	r3, r3, #4
 80052c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80052c8:	4b13      	ldr	r3, [pc, #76]	@ (8005318 <HAL_RCC_MCOConfig+0xc8>)
 80052ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052ce:	f003 0304 	and.w	r3, r3, #4
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80052d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80052da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052dc:	2302      	movs	r3, #2
 80052de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e0:	2303      	movs	r3, #3
 80052e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80052e8:	2300      	movs	r3, #0
 80052ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80052ec:	f107 031c 	add.w	r3, r7, #28
 80052f0:	4619      	mov	r1, r3
 80052f2:	480b      	ldr	r0, [pc, #44]	@ (8005320 <HAL_RCC_MCOConfig+0xd0>)
 80052f4:	f7fe f810 	bl	8003318 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80052f8:	4b07      	ldr	r3, [pc, #28]	@ (8005318 <HAL_RCC_MCOConfig+0xc8>)
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	01d9      	lsls	r1, r3, #7
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	430b      	orrs	r3, r1
 8005308:	4903      	ldr	r1, [pc, #12]	@ (8005318 <HAL_RCC_MCOConfig+0xc8>)
 800530a:	4313      	orrs	r3, r2
 800530c:	610b      	str	r3, [r1, #16]
}
 800530e:	bf00      	nop
 8005310:	3730      	adds	r7, #48	@ 0x30
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	58024400 	.word	0x58024400
 800531c:	58020000 	.word	0x58020000
 8005320:	58020800 	.word	0x58020800

08005324 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005324:	b480      	push	{r7}
 8005326:	b089      	sub	sp, #36	@ 0x24
 8005328:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800532a:	4bb3      	ldr	r3, [pc, #716]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005332:	2b18      	cmp	r3, #24
 8005334:	f200 8155 	bhi.w	80055e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005338:	a201      	add	r2, pc, #4	@ (adr r2, 8005340 <HAL_RCC_GetSysClockFreq+0x1c>)
 800533a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533e:	bf00      	nop
 8005340:	080053a5 	.word	0x080053a5
 8005344:	080055e3 	.word	0x080055e3
 8005348:	080055e3 	.word	0x080055e3
 800534c:	080055e3 	.word	0x080055e3
 8005350:	080055e3 	.word	0x080055e3
 8005354:	080055e3 	.word	0x080055e3
 8005358:	080055e3 	.word	0x080055e3
 800535c:	080055e3 	.word	0x080055e3
 8005360:	080053cb 	.word	0x080053cb
 8005364:	080055e3 	.word	0x080055e3
 8005368:	080055e3 	.word	0x080055e3
 800536c:	080055e3 	.word	0x080055e3
 8005370:	080055e3 	.word	0x080055e3
 8005374:	080055e3 	.word	0x080055e3
 8005378:	080055e3 	.word	0x080055e3
 800537c:	080055e3 	.word	0x080055e3
 8005380:	080053d1 	.word	0x080053d1
 8005384:	080055e3 	.word	0x080055e3
 8005388:	080055e3 	.word	0x080055e3
 800538c:	080055e3 	.word	0x080055e3
 8005390:	080055e3 	.word	0x080055e3
 8005394:	080055e3 	.word	0x080055e3
 8005398:	080055e3 	.word	0x080055e3
 800539c:	080055e3 	.word	0x080055e3
 80053a0:	080053d7 	.word	0x080053d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053a4:	4b94      	ldr	r3, [pc, #592]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053b0:	4b91      	ldr	r3, [pc, #580]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	08db      	lsrs	r3, r3, #3
 80053b6:	f003 0303 	and.w	r3, r3, #3
 80053ba:	4a90      	ldr	r2, [pc, #576]	@ (80055fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
 80053c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80053c2:	e111      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80053c4:	4b8d      	ldr	r3, [pc, #564]	@ (80055fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053c6:	61bb      	str	r3, [r7, #24]
      break;
 80053c8:	e10e      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80053ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80053cc:	61bb      	str	r3, [r7, #24]
      break;
 80053ce:	e10b      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80053d0:	4b8c      	ldr	r3, [pc, #560]	@ (8005604 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80053d2:	61bb      	str	r3, [r7, #24]
      break;
 80053d4:	e108      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053d6:	4b88      	ldr	r3, [pc, #544]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80053e0:	4b85      	ldr	r3, [pc, #532]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e4:	091b      	lsrs	r3, r3, #4
 80053e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80053ec:	4b82      	ldr	r3, [pc, #520]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80053f6:	4b80      	ldr	r3, [pc, #512]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053fa:	08db      	lsrs	r3, r3, #3
 80053fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	fb02 f303 	mul.w	r3, r2, r3
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800540e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 80e1 	beq.w	80055dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2b02      	cmp	r3, #2
 800541e:	f000 8083 	beq.w	8005528 <HAL_RCC_GetSysClockFreq+0x204>
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	2b02      	cmp	r3, #2
 8005426:	f200 80a1 	bhi.w	800556c <HAL_RCC_GetSysClockFreq+0x248>
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d003      	beq.n	8005438 <HAL_RCC_GetSysClockFreq+0x114>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d056      	beq.n	80054e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005436:	e099      	b.n	800556c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005438:	4b6f      	ldr	r3, [pc, #444]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b00      	cmp	r3, #0
 8005442:	d02d      	beq.n	80054a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005444:	4b6c      	ldr	r3, [pc, #432]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	08db      	lsrs	r3, r3, #3
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	4a6b      	ldr	r2, [pc, #428]	@ (80055fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005450:	fa22 f303 	lsr.w	r3, r2, r3
 8005454:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	ee07 3a90 	vmov	s15, r3
 800545c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800546a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800546e:	4b62      	ldr	r3, [pc, #392]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005472:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005482:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005486:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800548a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005492:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005496:	ee67 7a27 	vmul.f32	s15, s14, s15
 800549a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800549e:	e087      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800560c <HAL_RCC_GetSysClockFreq+0x2e8>
 80054ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054b2:	4b51      	ldr	r3, [pc, #324]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80054c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005608 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054e2:	e065      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005610 <HAL_RCC_GetSysClockFreq+0x2ec>
 80054f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f6:	4b40      	ldr	r3, [pc, #256]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fe:	ee07 3a90 	vmov	s15, r3
 8005502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005506:	ed97 6a02 	vldr	s12, [r7, #8]
 800550a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005608 <HAL_RCC_GetSysClockFreq+0x2e4>
 800550e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005516:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800551a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800551e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005522:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005526:	e043      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005532:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005614 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800553a:	4b2f      	ldr	r3, [pc, #188]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005542:	ee07 3a90 	vmov	s15, r3
 8005546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800554a:	ed97 6a02 	vldr	s12, [r7, #8]
 800554e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800555a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800555e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005566:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800556a:	e021      	b.n	80055b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005576:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005610 <HAL_RCC_GetSysClockFreq+0x2ec>
 800557a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800557e:	4b1e      	ldr	r3, [pc, #120]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800558e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005592:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005608 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800559a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800559e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80055b0:	4b11      	ldr	r3, [pc, #68]	@ (80055f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055b4:	0a5b      	lsrs	r3, r3, #9
 80055b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055ba:	3301      	adds	r3, #1
 80055bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	ee07 3a90 	vmov	s15, r3
 80055c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80055cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d4:	ee17 3a90 	vmov	r3, s15
 80055d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80055da:	e005      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	61bb      	str	r3, [r7, #24]
      break;
 80055e0:	e002      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80055e2:	4b07      	ldr	r3, [pc, #28]	@ (8005600 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80055e4:	61bb      	str	r3, [r7, #24]
      break;
 80055e6:	bf00      	nop
  }

  return sysclockfreq;
 80055e8:	69bb      	ldr	r3, [r7, #24]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3724      	adds	r7, #36	@ 0x24
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	58024400 	.word	0x58024400
 80055fc:	03d09000 	.word	0x03d09000
 8005600:	003d0900 	.word	0x003d0900
 8005604:	007a1200 	.word	0x007a1200
 8005608:	46000000 	.word	0x46000000
 800560c:	4c742400 	.word	0x4c742400
 8005610:	4a742400 	.word	0x4a742400
 8005614:	4af42400 	.word	0x4af42400

08005618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800561e:	f7ff fe81 	bl	8005324 <HAL_RCC_GetSysClockFreq>
 8005622:	4602      	mov	r2, r0
 8005624:	4b10      	ldr	r3, [pc, #64]	@ (8005668 <HAL_RCC_GetHCLKFreq+0x50>)
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	490f      	ldr	r1, [pc, #60]	@ (800566c <HAL_RCC_GetHCLKFreq+0x54>)
 8005630:	5ccb      	ldrb	r3, [r1, r3]
 8005632:	f003 031f 	and.w	r3, r3, #31
 8005636:	fa22 f303 	lsr.w	r3, r2, r3
 800563a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800563c:	4b0a      	ldr	r3, [pc, #40]	@ (8005668 <HAL_RCC_GetHCLKFreq+0x50>)
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f003 030f 	and.w	r3, r3, #15
 8005644:	4a09      	ldr	r2, [pc, #36]	@ (800566c <HAL_RCC_GetHCLKFreq+0x54>)
 8005646:	5cd3      	ldrb	r3, [r2, r3]
 8005648:	f003 031f 	and.w	r3, r3, #31
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	fa22 f303 	lsr.w	r3, r2, r3
 8005652:	4a07      	ldr	r2, [pc, #28]	@ (8005670 <HAL_RCC_GetHCLKFreq+0x58>)
 8005654:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005656:	4a07      	ldr	r2, [pc, #28]	@ (8005674 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800565c:	4b04      	ldr	r3, [pc, #16]	@ (8005670 <HAL_RCC_GetHCLKFreq+0x58>)
 800565e:	681b      	ldr	r3, [r3, #0]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	58024400 	.word	0x58024400
 800566c:	0800aee8 	.word	0x0800aee8
 8005670:	24000008 	.word	0x24000008
 8005674:	24000004 	.word	0x24000004

08005678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800567c:	f7ff ffcc 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b06      	ldr	r3, [pc, #24]	@ (800569c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	091b      	lsrs	r3, r3, #4
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4904      	ldr	r1, [pc, #16]	@ (80056a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005698:	4618      	mov	r0, r3
 800569a:	bd80      	pop	{r7, pc}
 800569c:	58024400 	.word	0x58024400
 80056a0:	0800aee8 	.word	0x0800aee8

080056a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80056a8:	f7ff ffb6 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 80056ac:	4602      	mov	r2, r0
 80056ae:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	0a1b      	lsrs	r3, r3, #8
 80056b4:	f003 0307 	and.w	r3, r3, #7
 80056b8:	4904      	ldr	r1, [pc, #16]	@ (80056cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ba:	5ccb      	ldrb	r3, [r1, r3]
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	58024400 	.word	0x58024400
 80056cc:	0800aee8 	.word	0x0800aee8

080056d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d4:	b0ca      	sub	sp, #296	@ 0x128
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80056dc:	2300      	movs	r3, #0
 80056de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80056e2:	2300      	movs	r3, #0
 80056e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80056f4:	2500      	movs	r5, #0
 80056f6:	ea54 0305 	orrs.w	r3, r4, r5
 80056fa:	d049      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80056fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005702:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005706:	d02f      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005708:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800570c:	d828      	bhi.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800570e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005712:	d01a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005714:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005718:	d822      	bhi.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800571e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005722:	d007      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005724:	e01c      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005726:	4bb8      	ldr	r3, [pc, #736]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	4ab7      	ldr	r2, [pc, #732]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800572c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005730:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005732:	e01a      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005738:	3308      	adds	r3, #8
 800573a:	2102      	movs	r1, #2
 800573c:	4618      	mov	r0, r3
 800573e:	f001 fc8f 	bl	8007060 <RCCEx_PLL2_Config>
 8005742:	4603      	mov	r3, r0
 8005744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005748:	e00f      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800574a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574e:	3328      	adds	r3, #40	@ 0x28
 8005750:	2102      	movs	r1, #2
 8005752:	4618      	mov	r0, r3
 8005754:	f001 fd36 	bl	80071c4 <RCCEx_PLL3_Config>
 8005758:	4603      	mov	r3, r0
 800575a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800575e:	e004      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005766:	e000      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800576a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005772:	4ba5      	ldr	r3, [pc, #660]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005776:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800577a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800577e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005780:	4aa1      	ldr	r2, [pc, #644]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005782:	430b      	orrs	r3, r1
 8005784:	6513      	str	r3, [r2, #80]	@ 0x50
 8005786:	e003      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800578c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800579c:	f04f 0900 	mov.w	r9, #0
 80057a0:	ea58 0309 	orrs.w	r3, r8, r9
 80057a4:	d047      	beq.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d82a      	bhi.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80057b0:	a201      	add	r2, pc, #4	@ (adr r2, 80057b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80057b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b6:	bf00      	nop
 80057b8:	080057cd 	.word	0x080057cd
 80057bc:	080057db 	.word	0x080057db
 80057c0:	080057f1 	.word	0x080057f1
 80057c4:	0800580f 	.word	0x0800580f
 80057c8:	0800580f 	.word	0x0800580f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057cc:	4b8e      	ldr	r3, [pc, #568]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d0:	4a8d      	ldr	r2, [pc, #564]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057d8:	e01a      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057de:	3308      	adds	r3, #8
 80057e0:	2100      	movs	r1, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	f001 fc3c 	bl	8007060 <RCCEx_PLL2_Config>
 80057e8:	4603      	mov	r3, r0
 80057ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057ee:	e00f      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f4:	3328      	adds	r3, #40	@ 0x28
 80057f6:	2100      	movs	r1, #0
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 fce3 	bl	80071c4 <RCCEx_PLL3_Config>
 80057fe:	4603      	mov	r3, r0
 8005800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005804:	e004      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800580c:	e000      	b.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800580e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005818:	4b7b      	ldr	r3, [pc, #492]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800581a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800581c:	f023 0107 	bic.w	r1, r3, #7
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005826:	4a78      	ldr	r2, [pc, #480]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005828:	430b      	orrs	r3, r1
 800582a:	6513      	str	r3, [r2, #80]	@ 0x50
 800582c:	e003      	b.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005832:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005842:	f04f 0b00 	mov.w	fp, #0
 8005846:	ea5a 030b 	orrs.w	r3, sl, fp
 800584a:	d04c      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005856:	d030      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800585c:	d829      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800585e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005860:	d02d      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8005862:	2bc0      	cmp	r3, #192	@ 0xc0
 8005864:	d825      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005866:	2b80      	cmp	r3, #128	@ 0x80
 8005868:	d018      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800586a:	2b80      	cmp	r3, #128	@ 0x80
 800586c:	d821      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8005872:	2b40      	cmp	r3, #64	@ 0x40
 8005874:	d007      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8005876:	e01c      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005878:	4b63      	ldr	r3, [pc, #396]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800587a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587c:	4a62      	ldr	r2, [pc, #392]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800587e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005884:	e01c      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800588a:	3308      	adds	r3, #8
 800588c:	2100      	movs	r1, #0
 800588e:	4618      	mov	r0, r3
 8005890:	f001 fbe6 	bl	8007060 <RCCEx_PLL2_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800589a:	e011      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800589c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058a0:	3328      	adds	r3, #40	@ 0x28
 80058a2:	2100      	movs	r1, #0
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 fc8d 	bl	80071c4 <RCCEx_PLL3_Config>
 80058aa:	4603      	mov	r3, r0
 80058ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058b0:	e006      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058b8:	e002      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80058ba:	bf00      	nop
 80058bc:	e000      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80058be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10a      	bne.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80058c8:	4b4f      	ldr	r3, [pc, #316]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058cc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80058d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d6:	4a4c      	ldr	r2, [pc, #304]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058d8:	430b      	orrs	r3, r1
 80058da:	6513      	str	r3, [r2, #80]	@ 0x50
 80058dc:	e003      	b.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80058e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80058f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80058f6:	2300      	movs	r3, #0
 80058f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80058fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005900:	460b      	mov	r3, r1
 8005902:	4313      	orrs	r3, r2
 8005904:	d053      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800590a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800590e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005912:	d035      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005914:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005918:	d82e      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800591a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800591e:	d031      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005920:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005924:	d828      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005926:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800592a:	d01a      	beq.n	8005962 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800592c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005930:	d822      	bhi.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800593a:	d007      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800593c:	e01c      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800593e:	4b32      	ldr	r3, [pc, #200]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005942:	4a31      	ldr	r2, [pc, #196]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005948:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800594a:	e01c      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800594c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005950:	3308      	adds	r3, #8
 8005952:	2100      	movs	r1, #0
 8005954:	4618      	mov	r0, r3
 8005956:	f001 fb83 	bl	8007060 <RCCEx_PLL2_Config>
 800595a:	4603      	mov	r3, r0
 800595c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005960:	e011      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005966:	3328      	adds	r3, #40	@ 0x28
 8005968:	2100      	movs	r1, #0
 800596a:	4618      	mov	r0, r3
 800596c:	f001 fc2a 	bl	80071c4 <RCCEx_PLL3_Config>
 8005970:	4603      	mov	r3, r0
 8005972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005976:	e006      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800597e:	e002      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005980:	bf00      	nop
 8005982:	e000      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10b      	bne.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800598e:	4b1e      	ldr	r3, [pc, #120]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005992:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800599a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800599e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059a0:	430b      	orrs	r3, r1
 80059a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80059a4:	e003      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80059ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80059ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80059be:	2300      	movs	r3, #0
 80059c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80059c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80059c8:	460b      	mov	r3, r1
 80059ca:	4313      	orrs	r3, r2
 80059cc:	d056      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80059ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059da:	d038      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80059dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059e0:	d831      	bhi.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80059e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059e6:	d034      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80059e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80059ec:	d82b      	bhi.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80059ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059f2:	d01d      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80059f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80059f8:	d825      	bhi.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d006      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80059fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a02:	d00a      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a04:	e01f      	b.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a06:	bf00      	nop
 8005a08:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a0c:	4ba2      	ldr	r3, [pc, #648]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a10:	4aa1      	ldr	r2, [pc, #644]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a18:	e01c      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a1e:	3308      	adds	r3, #8
 8005a20:	2100      	movs	r1, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 fb1c 	bl	8007060 <RCCEx_PLL2_Config>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a2e:	e011      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a34:	3328      	adds	r3, #40	@ 0x28
 8005a36:	2100      	movs	r1, #0
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 fbc3 	bl	80071c4 <RCCEx_PLL3_Config>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a44:	e006      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a4c:	e002      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a4e:	bf00      	nop
 8005a50:	e000      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10b      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005a5c:	4b8e      	ldr	r3, [pc, #568]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a60:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a6c:	4a8a      	ldr	r2, [pc, #552]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a72:	e003      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a84:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005a88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005a92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005a96:	460b      	mov	r3, r1
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	d03a      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aa2:	2b30      	cmp	r3, #48	@ 0x30
 8005aa4:	d01f      	beq.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005aa6:	2b30      	cmp	r3, #48	@ 0x30
 8005aa8:	d819      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005aaa:	2b20      	cmp	r3, #32
 8005aac:	d00c      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d815      	bhi.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d019      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005ab6:	2b10      	cmp	r3, #16
 8005ab8:	d111      	bne.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aba:	4b77      	ldr	r3, [pc, #476]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abe:	4a76      	ldr	r2, [pc, #472]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005ac6:	e011      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005acc:	3308      	adds	r3, #8
 8005ace:	2102      	movs	r1, #2
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f001 fac5 	bl	8007060 <RCCEx_PLL2_Config>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005adc:	e006      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ae4:	e002      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005ae6:	bf00      	nop
 8005ae8:	e000      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10a      	bne.n	8005b0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005af4:	4b68      	ldr	r3, [pc, #416]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b02:	4a65      	ldr	r2, [pc, #404]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b04:	430b      	orrs	r3, r1
 8005b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b08:	e003      	b.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b1a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b22:	2300      	movs	r3, #0
 8005b24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005b28:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	d051      	beq.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b3c:	d035      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005b3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b42:	d82e      	bhi.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b48:	d031      	beq.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005b4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005b4e:	d828      	bhi.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b54:	d01a      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b5a:	d822      	bhi.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b64:	d007      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005b66:	e01c      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b68:	4b4b      	ldr	r3, [pc, #300]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b74:	e01c      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 fa6e 	bl	8007060 <RCCEx_PLL2_Config>
 8005b84:	4603      	mov	r3, r0
 8005b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b8a:	e011      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b90:	3328      	adds	r3, #40	@ 0x28
 8005b92:	2100      	movs	r1, #0
 8005b94:	4618      	mov	r0, r3
 8005b96:	f001 fb15 	bl	80071c4 <RCCEx_PLL3_Config>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ba0:	e006      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ba8:	e002      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005baa:	bf00      	nop
 8005bac:	e000      	b.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10a      	bne.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005bb8:	4b37      	ldr	r3, [pc, #220]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bbc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc6:	4a34      	ldr	r2, [pc, #208]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bc8:	430b      	orrs	r3, r1
 8005bca:	6513      	str	r3, [r2, #80]	@ 0x50
 8005bcc:	e003      	b.n	8005bd6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bde:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005be6:	2300      	movs	r3, #0
 8005be8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005bec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005bf0:	460b      	mov	r3, r1
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	d056      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c00:	d033      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c06:	d82c      	bhi.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c0c:	d02f      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005c0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c12:	d826      	bhi.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c18:	d02b      	beq.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005c1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c1e:	d820      	bhi.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c24:	d012      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005c26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c2a:	d81a      	bhi.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d022      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c34:	d115      	bne.n	8005c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	2101      	movs	r1, #1
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f001 fa0e 	bl	8007060 <RCCEx_PLL2_Config>
 8005c44:	4603      	mov	r3, r0
 8005c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c4a:	e015      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c50:	3328      	adds	r3, #40	@ 0x28
 8005c52:	2101      	movs	r1, #1
 8005c54:	4618      	mov	r0, r3
 8005c56:	f001 fab5 	bl	80071c4 <RCCEx_PLL3_Config>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005c60:	e00a      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c68:	e006      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c6a:	bf00      	nop
 8005c6c:	e004      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c6e:	bf00      	nop
 8005c70:	e002      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c72:	bf00      	nop
 8005c74:	e000      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d10d      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c80:	4b05      	ldr	r3, [pc, #20]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c8e:	4a02      	ldr	r2, [pc, #8]	@ (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c94:	e006      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005c96:	bf00      	nop
 8005c98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	d055      	beq.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cd0:	d033      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005cd6:	d82c      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cdc:	d02f      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ce2:	d826      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005ce4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ce8:	d02b      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005cea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005cee:	d820      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cf4:	d012      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005cf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cfa:	d81a      	bhi.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d022      	beq.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005d00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d04:	d115      	bne.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 f9a6 	bl	8007060 <RCCEx_PLL2_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d1a:	e015      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d20:	3328      	adds	r3, #40	@ 0x28
 8005d22:	2101      	movs	r1, #1
 8005d24:	4618      	mov	r0, r3
 8005d26:	f001 fa4d 	bl	80071c4 <RCCEx_PLL3_Config>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d30:	e00a      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d38:	e006      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d3a:	bf00      	nop
 8005d3c:	e004      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d3e:	bf00      	nop
 8005d40:	e002      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d42:	bf00      	nop
 8005d44:	e000      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10b      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005d50:	4ba3      	ldr	r3, [pc, #652]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d54:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d60:	4a9f      	ldr	r2, [pc, #636]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d62:	430b      	orrs	r3, r1
 8005d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d66:	e003      	b.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d78:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d80:	2300      	movs	r3, #0
 8005d82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005d86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	d037      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d9a:	d00e      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005d9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005da0:	d816      	bhi.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d018      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005daa:	d111      	bne.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dac:	4b8c      	ldr	r3, [pc, #560]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db0:	4a8b      	ldr	r2, [pc, #556]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005db8:	e00f      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbe:	3308      	adds	r3, #8
 8005dc0:	2101      	movs	r1, #1
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f001 f94c 	bl	8007060 <RCCEx_PLL2_Config>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005dce:	e004      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dd6:	e000      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10a      	bne.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005de2:	4b7f      	ldr	r3, [pc, #508]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df0:	4a7b      	ldr	r2, [pc, #492]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005df2:	430b      	orrs	r3, r1
 8005df4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005df6:	e003      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e08:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e10:	2300      	movs	r3, #0
 8005e12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005e16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	d039      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d81c      	bhi.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8005e30 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e6d 	.word	0x08005e6d
 8005e34:	08005e41 	.word	0x08005e41
 8005e38:	08005e4f 	.word	0x08005e4f
 8005e3c:	08005e6d 	.word	0x08005e6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e40:	4b67      	ldr	r3, [pc, #412]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e44:	4a66      	ldr	r2, [pc, #408]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e4c:	e00f      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e52:	3308      	adds	r3, #8
 8005e54:	2102      	movs	r1, #2
 8005e56:	4618      	mov	r0, r3
 8005e58:	f001 f902 	bl	8007060 <RCCEx_PLL2_Config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005e62:	e004      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e6a:	e000      	b.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e76:	4b5a      	ldr	r3, [pc, #360]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e7a:	f023 0103 	bic.w	r1, r3, #3
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e84:	4a56      	ldr	r2, [pc, #344]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e86:	430b      	orrs	r3, r1
 8005e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e8a:	e003      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005eaa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005eae:	460b      	mov	r3, r1
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	f000 809f 	beq.w	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a4a      	ldr	r2, [pc, #296]	@ (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ec0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ec2:	f7fc f90d 	bl	80020e0 <HAL_GetTick>
 8005ec6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eca:	e00b      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ecc:	f7fc f908 	bl	80020e0 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ed6:	1ad3      	subs	r3, r2, r3
 8005ed8:	2b64      	cmp	r3, #100	@ 0x64
 8005eda:	d903      	bls.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005edc:	2303      	movs	r3, #3
 8005ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ee2:	e005      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0ed      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d179      	bne.n	8005fec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005ef8:	4b39      	ldr	r3, [pc, #228]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005efa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f04:	4053      	eors	r3, r2
 8005f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d015      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f0e:	4b34      	ldr	r3, [pc, #208]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f1a:	4b31      	ldr	r3, [pc, #196]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f1e:	4a30      	ldr	r2, [pc, #192]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f24:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f26:	4b2e      	ldr	r3, [pc, #184]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f30:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005f32:	4a2b      	ldr	r2, [pc, #172]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005f38:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f46:	d118      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fc f8ca 	bl	80020e0 <HAL_GetTick>
 8005f4c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f50:	e00d      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f52:	f7fc f8c5 	bl	80020e0 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f5c:	1ad2      	subs	r2, r2, r3
 8005f5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d903      	bls.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005f66:	2303      	movs	r3, #3
 8005f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005f6c:	e005      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0eb      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d129      	bne.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f92:	d10e      	bne.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005f94:	4b12      	ldr	r3, [pc, #72]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fa4:	091a      	lsrs	r2, r3, #4
 8005fa6:	4b10      	ldr	r3, [pc, #64]	@ (8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005fa8:	4013      	ands	r3, r2
 8005faa:	4a0d      	ldr	r2, [pc, #52]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fac:	430b      	orrs	r3, r1
 8005fae:	6113      	str	r3, [r2, #16]
 8005fb0:	e005      	b.n	8005fbe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fb8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005fbc:	6113      	str	r3, [r2, #16]
 8005fbe:	4b08      	ldr	r3, [pc, #32]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fc0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fce:	4a04      	ldr	r2, [pc, #16]	@ (8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fd0:	430b      	orrs	r3, r1
 8005fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fd4:	e00e      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005fde:	e009      	b.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005fe0:	58024400 	.word	0x58024400
 8005fe4:	58024800 	.word	0x58024800
 8005fe8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffc:	f002 0301 	and.w	r3, r2, #1
 8006000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006004:	2300      	movs	r3, #0
 8006006:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800600a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800600e:	460b      	mov	r3, r1
 8006010:	4313      	orrs	r3, r2
 8006012:	f000 8089 	beq.w	8006128 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800601c:	2b28      	cmp	r3, #40	@ 0x28
 800601e:	d86b      	bhi.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006020:	a201      	add	r2, pc, #4	@ (adr r2, 8006028 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006026:	bf00      	nop
 8006028:	08006101 	.word	0x08006101
 800602c:	080060f9 	.word	0x080060f9
 8006030:	080060f9 	.word	0x080060f9
 8006034:	080060f9 	.word	0x080060f9
 8006038:	080060f9 	.word	0x080060f9
 800603c:	080060f9 	.word	0x080060f9
 8006040:	080060f9 	.word	0x080060f9
 8006044:	080060f9 	.word	0x080060f9
 8006048:	080060cd 	.word	0x080060cd
 800604c:	080060f9 	.word	0x080060f9
 8006050:	080060f9 	.word	0x080060f9
 8006054:	080060f9 	.word	0x080060f9
 8006058:	080060f9 	.word	0x080060f9
 800605c:	080060f9 	.word	0x080060f9
 8006060:	080060f9 	.word	0x080060f9
 8006064:	080060f9 	.word	0x080060f9
 8006068:	080060e3 	.word	0x080060e3
 800606c:	080060f9 	.word	0x080060f9
 8006070:	080060f9 	.word	0x080060f9
 8006074:	080060f9 	.word	0x080060f9
 8006078:	080060f9 	.word	0x080060f9
 800607c:	080060f9 	.word	0x080060f9
 8006080:	080060f9 	.word	0x080060f9
 8006084:	080060f9 	.word	0x080060f9
 8006088:	08006101 	.word	0x08006101
 800608c:	080060f9 	.word	0x080060f9
 8006090:	080060f9 	.word	0x080060f9
 8006094:	080060f9 	.word	0x080060f9
 8006098:	080060f9 	.word	0x080060f9
 800609c:	080060f9 	.word	0x080060f9
 80060a0:	080060f9 	.word	0x080060f9
 80060a4:	080060f9 	.word	0x080060f9
 80060a8:	08006101 	.word	0x08006101
 80060ac:	080060f9 	.word	0x080060f9
 80060b0:	080060f9 	.word	0x080060f9
 80060b4:	080060f9 	.word	0x080060f9
 80060b8:	080060f9 	.word	0x080060f9
 80060bc:	080060f9 	.word	0x080060f9
 80060c0:	080060f9 	.word	0x080060f9
 80060c4:	080060f9 	.word	0x080060f9
 80060c8:	08006101 	.word	0x08006101
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d0:	3308      	adds	r3, #8
 80060d2:	2101      	movs	r1, #1
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 ffc3 	bl	8007060 <RCCEx_PLL2_Config>
 80060da:	4603      	mov	r3, r0
 80060dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80060e0:	e00f      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e6:	3328      	adds	r3, #40	@ 0x28
 80060e8:	2101      	movs	r1, #1
 80060ea:	4618      	mov	r0, r3
 80060ec:	f001 f86a 	bl	80071c4 <RCCEx_PLL3_Config>
 80060f0:	4603      	mov	r3, r0
 80060f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80060f6:	e004      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060fe:	e000      	b.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10a      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800610a:	4bbf      	ldr	r3, [pc, #764]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800610c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006118:	4abb      	ldr	r2, [pc, #748]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800611a:	430b      	orrs	r3, r1
 800611c:	6553      	str	r3, [r2, #84]	@ 0x54
 800611e:	e003      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006124:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f002 0302 	and.w	r3, r2, #2
 8006134:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006138:	2300      	movs	r3, #0
 800613a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800613e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8006142:	460b      	mov	r3, r1
 8006144:	4313      	orrs	r3, r2
 8006146:	d041      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800614c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800614e:	2b05      	cmp	r3, #5
 8006150:	d824      	bhi.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8006152:	a201      	add	r2, pc, #4	@ (adr r2, 8006158 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8006154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006158:	080061a5 	.word	0x080061a5
 800615c:	08006171 	.word	0x08006171
 8006160:	08006187 	.word	0x08006187
 8006164:	080061a5 	.word	0x080061a5
 8006168:	080061a5 	.word	0x080061a5
 800616c:	080061a5 	.word	0x080061a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006174:	3308      	adds	r3, #8
 8006176:	2101      	movs	r1, #1
 8006178:	4618      	mov	r0, r3
 800617a:	f000 ff71 	bl	8007060 <RCCEx_PLL2_Config>
 800617e:	4603      	mov	r3, r0
 8006180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006184:	e00f      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618a:	3328      	adds	r3, #40	@ 0x28
 800618c:	2101      	movs	r1, #1
 800618e:	4618      	mov	r0, r3
 8006190:	f001 f818 	bl	80071c4 <RCCEx_PLL3_Config>
 8006194:	4603      	mov	r3, r0
 8006196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800619a:	e004      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80061a2:	e000      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80061a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10a      	bne.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80061ae:	4b96      	ldr	r3, [pc, #600]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b2:	f023 0107 	bic.w	r1, r3, #7
 80061b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061bc:	4a92      	ldr	r2, [pc, #584]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061be:	430b      	orrs	r3, r1
 80061c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80061c2:	e003      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f002 0304 	and.w	r3, r2, #4
 80061d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80061dc:	2300      	movs	r3, #0
 80061de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80061e6:	460b      	mov	r3, r1
 80061e8:	4313      	orrs	r3, r2
 80061ea:	d044      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80061ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061f4:	2b05      	cmp	r3, #5
 80061f6:	d825      	bhi.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80061f8:	a201      	add	r2, pc, #4	@ (adr r2, 8006200 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80061fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fe:	bf00      	nop
 8006200:	0800624d 	.word	0x0800624d
 8006204:	08006219 	.word	0x08006219
 8006208:	0800622f 	.word	0x0800622f
 800620c:	0800624d 	.word	0x0800624d
 8006210:	0800624d 	.word	0x0800624d
 8006214:	0800624d 	.word	0x0800624d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621c:	3308      	adds	r3, #8
 800621e:	2101      	movs	r1, #1
 8006220:	4618      	mov	r0, r3
 8006222:	f000 ff1d 	bl	8007060 <RCCEx_PLL2_Config>
 8006226:	4603      	mov	r3, r0
 8006228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800622c:	e00f      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800622e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006232:	3328      	adds	r3, #40	@ 0x28
 8006234:	2101      	movs	r1, #1
 8006236:	4618      	mov	r0, r3
 8006238:	f000 ffc4 	bl	80071c4 <RCCEx_PLL3_Config>
 800623c:	4603      	mov	r3, r0
 800623e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006242:	e004      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800624a:	e000      	b.n	800624e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800624c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006252:	2b00      	cmp	r3, #0
 8006254:	d10b      	bne.n	800626e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006256:	4b6c      	ldr	r3, [pc, #432]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800625a:	f023 0107 	bic.w	r1, r3, #7
 800625e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006262:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006266:	4a68      	ldr	r2, [pc, #416]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006268:	430b      	orrs	r3, r1
 800626a:	6593      	str	r3, [r2, #88]	@ 0x58
 800626c:	e003      	b.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800626e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f002 0320 	and.w	r3, r2, #32
 8006282:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006286:	2300      	movs	r3, #0
 8006288:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800628c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006290:	460b      	mov	r3, r1
 8006292:	4313      	orrs	r3, r2
 8006294:	d055      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800629e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062a2:	d033      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80062a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062a8:	d82c      	bhi.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ae:	d02f      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80062b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062b4:	d826      	bhi.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062ba:	d02b      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80062bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80062c0:	d820      	bhi.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062c6:	d012      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80062c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80062cc:	d81a      	bhi.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d022      	beq.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80062d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80062d6:	d115      	bne.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062dc:	3308      	adds	r3, #8
 80062de:	2100      	movs	r1, #0
 80062e0:	4618      	mov	r0, r3
 80062e2:	f000 febd 	bl	8007060 <RCCEx_PLL2_Config>
 80062e6:	4603      	mov	r3, r0
 80062e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80062ec:	e015      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f2:	3328      	adds	r3, #40	@ 0x28
 80062f4:	2102      	movs	r1, #2
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 ff64 	bl	80071c4 <RCCEx_PLL3_Config>
 80062fc:	4603      	mov	r3, r0
 80062fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006302:	e00a      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800630a:	e006      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800630c:	bf00      	nop
 800630e:	e004      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006310:	bf00      	nop
 8006312:	e002      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006314:	bf00      	nop
 8006316:	e000      	b.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800631a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10b      	bne.n	800633a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006322:	4b39      	ldr	r3, [pc, #228]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006326:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800632a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006332:	4a35      	ldr	r2, [pc, #212]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006334:	430b      	orrs	r3, r1
 8006336:	6553      	str	r3, [r2, #84]	@ 0x54
 8006338:	e003      	b.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800633e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800634e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006352:	2300      	movs	r3, #0
 8006354:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006358:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800635c:	460b      	mov	r3, r1
 800635e:	4313      	orrs	r3, r2
 8006360:	d058      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006366:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800636a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800636e:	d033      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8006370:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006374:	d82c      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800637a:	d02f      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800637c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006380:	d826      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006382:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006386:	d02b      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006388:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800638c:	d820      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800638e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006392:	d012      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006398:	d81a      	bhi.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800639a:	2b00      	cmp	r3, #0
 800639c:	d022      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800639e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a2:	d115      	bne.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a8:	3308      	adds	r3, #8
 80063aa:	2100      	movs	r1, #0
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 fe57 	bl	8007060 <RCCEx_PLL2_Config>
 80063b2:	4603      	mov	r3, r0
 80063b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80063b8:	e015      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063be:	3328      	adds	r3, #40	@ 0x28
 80063c0:	2102      	movs	r1, #2
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 fefe 	bl	80071c4 <RCCEx_PLL3_Config>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80063ce:	e00a      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063d6:	e006      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80063d8:	bf00      	nop
 80063da:	e004      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80063dc:	bf00      	nop
 80063de:	e002      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80063e0:	bf00      	nop
 80063e2:	e000      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80063e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10e      	bne.n	800640c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80063ee:	4b06      	ldr	r3, [pc, #24]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80063f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063fe:	4a02      	ldr	r2, [pc, #8]	@ (8006408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006400:	430b      	orrs	r3, r1
 8006402:	6593      	str	r3, [r2, #88]	@ 0x58
 8006404:	e006      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006406:	bf00      	nop
 8006408:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800640c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006420:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006424:	2300      	movs	r3, #0
 8006426:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800642a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800642e:	460b      	mov	r3, r1
 8006430:	4313      	orrs	r3, r2
 8006432:	d055      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006438:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800643c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006440:	d033      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8006442:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006446:	d82c      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800644c:	d02f      	beq.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800644e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006452:	d826      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006454:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006458:	d02b      	beq.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800645a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800645e:	d820      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006460:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006464:	d012      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8006466:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800646a:	d81a      	bhi.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d022      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8006470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006474:	d115      	bne.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647a:	3308      	adds	r3, #8
 800647c:	2100      	movs	r1, #0
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fdee 	bl	8007060 <RCCEx_PLL2_Config>
 8006484:	4603      	mov	r3, r0
 8006486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800648a:	e015      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800648c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006490:	3328      	adds	r3, #40	@ 0x28
 8006492:	2102      	movs	r1, #2
 8006494:	4618      	mov	r0, r3
 8006496:	f000 fe95 	bl	80071c4 <RCCEx_PLL3_Config>
 800649a:	4603      	mov	r3, r0
 800649c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064a0:	e00a      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064a8:	e006      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064aa:	bf00      	nop
 80064ac:	e004      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064ae:	bf00      	nop
 80064b0:	e002      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064b2:	bf00      	nop
 80064b4:	e000      	b.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80064b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d10b      	bne.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80064c0:	4ba1      	ldr	r3, [pc, #644]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80064c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064d0:	4a9d      	ldr	r2, [pc, #628]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064d2:	430b      	orrs	r3, r1
 80064d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80064d6:	e003      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80064e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e8:	f002 0308 	and.w	r3, r2, #8
 80064ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80064f0:	2300      	movs	r3, #0
 80064f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80064f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80064fa:	460b      	mov	r3, r1
 80064fc:	4313      	orrs	r3, r2
 80064fe:	d01e      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800650c:	d10c      	bne.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006512:	3328      	adds	r3, #40	@ 0x28
 8006514:	2102      	movs	r1, #2
 8006516:	4618      	mov	r0, r3
 8006518:	f000 fe54 	bl	80071c4 <RCCEx_PLL3_Config>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006528:	4b87      	ldr	r3, [pc, #540]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800652a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006538:	4a83      	ldr	r2, [pc, #524]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800653a:	430b      	orrs	r3, r1
 800653c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800653e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006546:	f002 0310 	and.w	r3, r2, #16
 800654a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800654e:	2300      	movs	r3, #0
 8006550:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006554:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006558:	460b      	mov	r3, r1
 800655a:	4313      	orrs	r3, r2
 800655c:	d01e      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800655e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006562:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800656a:	d10c      	bne.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800656c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006570:	3328      	adds	r3, #40	@ 0x28
 8006572:	2102      	movs	r1, #2
 8006574:	4618      	mov	r0, r3
 8006576:	f000 fe25 	bl	80071c4 <RCCEx_PLL3_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d002      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006586:	4b70      	ldr	r3, [pc, #448]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800658a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800658e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006592:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006596:	4a6c      	ldr	r2, [pc, #432]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006598:	430b      	orrs	r3, r1
 800659a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800659c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80065a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80065ac:	2300      	movs	r3, #0
 80065ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80065b6:	460b      	mov	r3, r1
 80065b8:	4313      	orrs	r3, r2
 80065ba:	d03e      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80065bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80065c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065c8:	d022      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80065ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80065ce:	d81b      	bhi.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80065d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d8:	d00b      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80065da:	e015      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80065dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e0:	3308      	adds	r3, #8
 80065e2:	2100      	movs	r1, #0
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fd3b 	bl	8007060 <RCCEx_PLL2_Config>
 80065ea:	4603      	mov	r3, r0
 80065ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80065f0:	e00f      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80065f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f6:	3328      	adds	r3, #40	@ 0x28
 80065f8:	2102      	movs	r1, #2
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fde2 	bl	80071c4 <RCCEx_PLL3_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006606:	e004      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800660e:	e000      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800661a:	4b4b      	ldr	r3, [pc, #300]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800661c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800661e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006626:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800662a:	4a47      	ldr	r2, [pc, #284]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800662c:	430b      	orrs	r3, r1
 800662e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006630:	e003      	b.n	800663a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800663a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006642:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006646:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006648:	2300      	movs	r3, #0
 800664a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800664c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006650:	460b      	mov	r3, r1
 8006652:	4313      	orrs	r3, r2
 8006654:	d03b      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800665e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006662:	d01f      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8006664:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006668:	d818      	bhi.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800666a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800666e:	d003      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8006670:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006674:	d007      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8006676:	e011      	b.n	800669c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006678:	4b33      	ldr	r3, [pc, #204]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800667a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667c:	4a32      	ldr	r2, [pc, #200]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800667e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006684:	e00f      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800668a:	3328      	adds	r3, #40	@ 0x28
 800668c:	2101      	movs	r1, #1
 800668e:	4618      	mov	r0, r3
 8006690:	f000 fd98 	bl	80071c4 <RCCEx_PLL3_Config>
 8006694:	4603      	mov	r3, r0
 8006696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800669a:	e004      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80066a2:	e000      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80066a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10b      	bne.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066ae:	4b26      	ldr	r3, [pc, #152]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80066b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066be:	4a22      	ldr	r2, [pc, #136]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066c0:	430b      	orrs	r3, r1
 80066c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80066c4:	e003      	b.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80066da:	673b      	str	r3, [r7, #112]	@ 0x70
 80066dc:	2300      	movs	r3, #0
 80066de:	677b      	str	r3, [r7, #116]	@ 0x74
 80066e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80066e4:	460b      	mov	r3, r1
 80066e6:	4313      	orrs	r3, r2
 80066e8:	d034      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80066ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d003      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80066f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066f8:	d007      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80066fa:	e011      	b.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066fc:	4b12      	ldr	r3, [pc, #72]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006700:	4a11      	ldr	r2, [pc, #68]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006706:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006708:	e00e      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800670a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670e:	3308      	adds	r3, #8
 8006710:	2102      	movs	r1, #2
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fca4 	bl	8007060 <RCCEx_PLL2_Config>
 8006718:	4603      	mov	r3, r0
 800671a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800671e:	e003      	b.n	8006728 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10d      	bne.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006730:	4b05      	ldr	r3, [pc, #20]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006734:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800673c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800673e:	4a02      	ldr	r2, [pc, #8]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006740:	430b      	orrs	r3, r1
 8006742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006744:	e006      	b.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006746:	bf00      	nop
 8006748:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800674c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006750:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8006760:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006762:	2300      	movs	r3, #0
 8006764:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006766:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800676a:	460b      	mov	r3, r1
 800676c:	4313      	orrs	r3, r2
 800676e:	d00c      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006774:	3328      	adds	r3, #40	@ 0x28
 8006776:	2102      	movs	r1, #2
 8006778:	4618      	mov	r0, r3
 800677a:	f000 fd23 	bl	80071c4 <RCCEx_PLL3_Config>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800678a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006792:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006796:	663b      	str	r3, [r7, #96]	@ 0x60
 8006798:	2300      	movs	r3, #0
 800679a:	667b      	str	r3, [r7, #100]	@ 0x64
 800679c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80067a0:	460b      	mov	r3, r1
 80067a2:	4313      	orrs	r3, r2
 80067a4:	d038      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067b2:	d018      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80067b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067b8:	d811      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80067ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067be:	d014      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80067c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067c4:	d80b      	bhi.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d011      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80067ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067ce:	d106      	bne.n	80067de <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d0:	4bc3      	ldr	r3, [pc, #780]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d4:	4ac2      	ldr	r2, [pc, #776]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80067dc:	e008      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80067e4:	e004      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80067e6:	bf00      	nop
 80067e8:	e002      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80067ea:	bf00      	nop
 80067ec:	e000      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80067ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d10b      	bne.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067f8:	4bb9      	ldr	r3, [pc, #740]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006808:	4ab5      	ldr	r2, [pc, #724]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800680a:	430b      	orrs	r3, r1
 800680c:	6553      	str	r3, [r2, #84]	@ 0x54
 800680e:	e003      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006814:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006820:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006824:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006826:	2300      	movs	r3, #0
 8006828:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800682a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800682e:	460b      	mov	r3, r1
 8006830:	4313      	orrs	r3, r2
 8006832:	d009      	beq.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006834:	4baa      	ldr	r3, [pc, #680]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006838:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800683c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006842:	4aa7      	ldr	r2, [pc, #668]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006844:	430b      	orrs	r3, r1
 8006846:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800684c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006850:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006854:	653b      	str	r3, [r7, #80]	@ 0x50
 8006856:	2300      	movs	r3, #0
 8006858:	657b      	str	r3, [r7, #84]	@ 0x54
 800685a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800685e:	460b      	mov	r3, r1
 8006860:	4313      	orrs	r3, r2
 8006862:	d00a      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006864:	4b9e      	ldr	r3, [pc, #632]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800686c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006870:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006874:	4a9a      	ldr	r2, [pc, #616]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006876:	430b      	orrs	r3, r1
 8006878:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800687a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800687e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006882:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8006886:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006888:	2300      	movs	r3, #0
 800688a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800688c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006890:	460b      	mov	r3, r1
 8006892:	4313      	orrs	r3, r2
 8006894:	d009      	beq.n	80068aa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006896:	4b92      	ldr	r3, [pc, #584]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800689a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800689e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068a4:	4a8e      	ldr	r2, [pc, #568]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068a6:	430b      	orrs	r3, r1
 80068a8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80068aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80068b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80068b8:	2300      	movs	r3, #0
 80068ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80068bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80068c0:	460b      	mov	r3, r1
 80068c2:	4313      	orrs	r3, r2
 80068c4:	d00e      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80068c6:	4b86      	ldr	r3, [pc, #536]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	4a85      	ldr	r2, [pc, #532]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80068d0:	6113      	str	r3, [r2, #16]
 80068d2:	4b83      	ldr	r3, [pc, #524]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068d4:	6919      	ldr	r1, [r3, #16]
 80068d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80068de:	4a80      	ldr	r2, [pc, #512]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068e0:	430b      	orrs	r3, r1
 80068e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80068e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80068f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80068f2:	2300      	movs	r3, #0
 80068f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80068fa:	460b      	mov	r3, r1
 80068fc:	4313      	orrs	r3, r2
 80068fe:	d009      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006900:	4b77      	ldr	r3, [pc, #476]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006904:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800690e:	4a74      	ldr	r2, [pc, #464]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006910:	430b      	orrs	r3, r1
 8006912:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006920:	633b      	str	r3, [r7, #48]	@ 0x30
 8006922:	2300      	movs	r3, #0
 8006924:	637b      	str	r3, [r7, #52]	@ 0x34
 8006926:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800692a:	460b      	mov	r3, r1
 800692c:	4313      	orrs	r3, r2
 800692e:	d00a      	beq.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006930:	4b6b      	ldr	r3, [pc, #428]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006934:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800693c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006940:	4a67      	ldr	r2, [pc, #412]	@ (8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006942:	430b      	orrs	r3, r1
 8006944:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694e:	2100      	movs	r1, #0
 8006950:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006952:	f003 0301 	and.w	r3, r3, #1
 8006956:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006958:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800695c:	460b      	mov	r3, r1
 800695e:	4313      	orrs	r3, r2
 8006960:	d011      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006966:	3308      	adds	r3, #8
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f000 fb78 	bl	8007060 <RCCEx_PLL2_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800697e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8006986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800698a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698e:	2100      	movs	r1, #0
 8006990:	6239      	str	r1, [r7, #32]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	627b      	str	r3, [r7, #36]	@ 0x24
 8006998:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800699c:	460b      	mov	r3, r1
 800699e:	4313      	orrs	r3, r2
 80069a0:	d011      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80069a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069a6:	3308      	adds	r3, #8
 80069a8:	2101      	movs	r1, #1
 80069aa:	4618      	mov	r0, r3
 80069ac:	f000 fb58 	bl	8007060 <RCCEx_PLL2_Config>
 80069b0:	4603      	mov	r3, r0
 80069b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80069c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ce:	2100      	movs	r1, #0
 80069d0:	61b9      	str	r1, [r7, #24]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	61fb      	str	r3, [r7, #28]
 80069d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80069dc:	460b      	mov	r3, r1
 80069de:	4313      	orrs	r3, r2
 80069e0:	d011      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80069e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069e6:	3308      	adds	r3, #8
 80069e8:	2102      	movs	r1, #2
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fb38 	bl	8007060 <RCCEx_PLL2_Config>
 80069f0:	4603      	mov	r3, r0
 80069f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a0e:	2100      	movs	r1, #0
 8006a10:	6139      	str	r1, [r7, #16]
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a1c:	460b      	mov	r3, r1
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	d011      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a26:	3328      	adds	r3, #40	@ 0x28
 8006a28:	2100      	movs	r1, #0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fbca 	bl	80071c4 <RCCEx_PLL3_Config>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d003      	beq.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a4e:	2100      	movs	r1, #0
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	f003 0310 	and.w	r3, r3, #16
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	d011      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a66:	3328      	adds	r3, #40	@ 0x28
 8006a68:	2101      	movs	r1, #1
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 fbaa 	bl	80071c4 <RCCEx_PLL3_Config>
 8006a70:	4603      	mov	r3, r0
 8006a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d003      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	2100      	movs	r1, #0
 8006a90:	6039      	str	r1, [r7, #0]
 8006a92:	f003 0320 	and.w	r3, r3, #32
 8006a96:	607b      	str	r3, [r7, #4]
 8006a98:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a9c:	460b      	mov	r3, r1
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	d011      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa6:	3328      	adds	r3, #40	@ 0x28
 8006aa8:	2102      	movs	r1, #2
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 fb8a 	bl	80071c4 <RCCEx_PLL3_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ac2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006ac6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e000      	b.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006ada:	46bd      	mov	sp, r7
 8006adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ae0:	58024400 	.word	0x58024400

08006ae4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006ae8:	f7fe fd96 	bl	8005618 <HAL_RCC_GetHCLKFreq>
 8006aec:	4602      	mov	r2, r0
 8006aee:	4b06      	ldr	r3, [pc, #24]	@ (8006b08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	091b      	lsrs	r3, r3, #4
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	4904      	ldr	r1, [pc, #16]	@ (8006b0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006afa:	5ccb      	ldrb	r3, [r1, r3]
 8006afc:	f003 031f 	and.w	r3, r3, #31
 8006b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	58024400 	.word	0x58024400
 8006b0c:	0800aee8 	.word	0x0800aee8

08006b10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b089      	sub	sp, #36	@ 0x24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b18:	4ba1      	ldr	r3, [pc, #644]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1c:	f003 0303 	and.w	r3, r3, #3
 8006b20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b22:	4b9f      	ldr	r3, [pc, #636]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b26:	0b1b      	lsrs	r3, r3, #12
 8006b28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b2e:	4b9c      	ldr	r3, [pc, #624]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b32:	091b      	lsrs	r3, r3, #4
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006b3a:	4b99      	ldr	r3, [pc, #612]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b3e:	08db      	lsrs	r3, r3, #3
 8006b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	fb02 f303 	mul.w	r3, r2, r3
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 8111 	beq.w	8006d80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b02      	cmp	r3, #2
 8006b62:	f000 8083 	beq.w	8006c6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	f200 80a1 	bhi.w	8006cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006b74:	69bb      	ldr	r3, [r7, #24]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d056      	beq.n	8006c28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006b7a:	e099      	b.n	8006cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b7c:	4b88      	ldr	r3, [pc, #544]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0320 	and.w	r3, r3, #32
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d02d      	beq.n	8006be4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b88:	4b85      	ldr	r3, [pc, #532]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	08db      	lsrs	r3, r3, #3
 8006b8e:	f003 0303 	and.w	r3, r3, #3
 8006b92:	4a84      	ldr	r2, [pc, #528]	@ (8006da4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006b94:	fa22 f303 	lsr.w	r3, r2, r3
 8006b98:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	ee07 3a90 	vmov	s15, r3
 8006ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ba4:	697b      	ldr	r3, [r7, #20]
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bb2:	4b7b      	ldr	r3, [pc, #492]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bc6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006be2:	e087      	b.n	8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006dac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c26:	e065      	b.n	8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c3a:	4b59      	ldr	r3, [pc, #356]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c6a:	e043      	b.n	8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c7e:	4b48      	ldr	r3, [pc, #288]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c86:	ee07 3a90 	vmov	s15, r3
 8006c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cae:	e021      	b.n	8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cc2:	4b37      	ldr	r3, [pc, #220]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cca:	ee07 3a90 	vmov	s15, r3
 8006cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cf2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf8:	0a5b      	lsrs	r3, r3, #9
 8006cfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d1a:	ee17 2a90 	vmov	r2, s15
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d22:	4b1f      	ldr	r3, [pc, #124]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d26:	0c1b      	lsrs	r3, r3, #16
 8006d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d2c:	ee07 3a90 	vmov	s15, r3
 8006d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d48:	ee17 2a90 	vmov	r2, s15
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006d50:	4b13      	ldr	r3, [pc, #76]	@ (8006da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d54:	0e1b      	lsrs	r3, r3, #24
 8006d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d76:	ee17 2a90 	vmov	r2, s15
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006d7e:	e008      	b.n	8006d92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	609a      	str	r2, [r3, #8]
}
 8006d92:	bf00      	nop
 8006d94:	3724      	adds	r7, #36	@ 0x24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	58024400 	.word	0x58024400
 8006da4:	03d09000 	.word	0x03d09000
 8006da8:	46000000 	.word	0x46000000
 8006dac:	4c742400 	.word	0x4c742400
 8006db0:	4a742400 	.word	0x4a742400
 8006db4:	4af42400 	.word	0x4af42400

08006db8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b089      	sub	sp, #36	@ 0x24
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006dc0:	4ba1      	ldr	r3, [pc, #644]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc4:	f003 0303 	and.w	r3, r3, #3
 8006dc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006dca:	4b9f      	ldr	r3, [pc, #636]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dce:	0d1b      	lsrs	r3, r3, #20
 8006dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006dd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006dd6:	4b9c      	ldr	r3, [pc, #624]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dda:	0a1b      	lsrs	r3, r3, #8
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006de2:	4b99      	ldr	r3, [pc, #612]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006de6:	08db      	lsrs	r3, r3, #3
 8006de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	fb02 f303 	mul.w	r3, r2, r3
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8111 	beq.w	8007028 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e06:	69bb      	ldr	r3, [r7, #24]
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	f000 8083 	beq.w	8006f14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	f200 80a1 	bhi.w	8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d056      	beq.n	8006ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e22:	e099      	b.n	8006f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e24:	4b88      	ldr	r3, [pc, #544]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0320 	and.w	r3, r3, #32
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d02d      	beq.n	8006e8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006e30:	4b85      	ldr	r3, [pc, #532]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	08db      	lsrs	r3, r3, #3
 8006e36:	f003 0303 	and.w	r3, r3, #3
 8006e3a:	4a84      	ldr	r2, [pc, #528]	@ (800704c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006e40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e5a:	4b7b      	ldr	r3, [pc, #492]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006e8a:	e087      	b.n	8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	ee07 3a90 	vmov	s15, r3
 8006e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007054 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ece:	e065      	b.n	8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ee2:	4b59      	ldr	r3, [pc, #356]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006eea:	ee07 3a90 	vmov	s15, r3
 8006eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ef6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f12:	e043      	b.n	8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800705c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f26:	4b48      	ldr	r3, [pc, #288]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f2e:	ee07 3a90 	vmov	s15, r3
 8006f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f56:	e021      	b.n	8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f6a:	4b37      	ldr	r3, [pc, #220]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f72:	ee07 3a90 	vmov	s15, r3
 8006f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa0:	0a5b      	lsrs	r3, r3, #9
 8006fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fc2:	ee17 2a90 	vmov	r2, s15
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006fca:	4b1f      	ldr	r3, [pc, #124]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fce:	0c1b      	lsrs	r3, r3, #16
 8006fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006fd4:	ee07 3a90 	vmov	s15, r3
 8006fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ff0:	ee17 2a90 	vmov	r2, s15
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006ff8:	4b13      	ldr	r3, [pc, #76]	@ (8007048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ffc:	0e1b      	lsrs	r3, r3, #24
 8006ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800700a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800700e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007012:	edd7 6a07 	vldr	s13, [r7, #28]
 8007016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800701a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800701e:	ee17 2a90 	vmov	r2, s15
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007026:	e008      	b.n	800703a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	609a      	str	r2, [r3, #8]
}
 800703a:	bf00      	nop
 800703c:	3724      	adds	r7, #36	@ 0x24
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	58024400 	.word	0x58024400
 800704c:	03d09000 	.word	0x03d09000
 8007050:	46000000 	.word	0x46000000
 8007054:	4c742400 	.word	0x4c742400
 8007058:	4a742400 	.word	0x4a742400
 800705c:	4af42400 	.word	0x4af42400

08007060 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800706a:	2300      	movs	r3, #0
 800706c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800706e:	4b53      	ldr	r3, [pc, #332]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007072:	f003 0303 	and.w	r3, r3, #3
 8007076:	2b03      	cmp	r3, #3
 8007078:	d101      	bne.n	800707e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e099      	b.n	80071b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800707e:	4b4f      	ldr	r3, [pc, #316]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	4a4e      	ldr	r2, [pc, #312]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007084:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800708a:	f7fb f829 	bl	80020e0 <HAL_GetTick>
 800708e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007090:	e008      	b.n	80070a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007092:	f7fb f825 	bl	80020e0 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	2b02      	cmp	r3, #2
 800709e:	d901      	bls.n	80070a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070a0:	2303      	movs	r3, #3
 80070a2:	e086      	b.n	80071b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80070a4:	4b45      	ldr	r3, [pc, #276]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d1f0      	bne.n	8007092 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80070b0:	4b42      	ldr	r3, [pc, #264]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 80070b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	031b      	lsls	r3, r3, #12
 80070be:	493f      	ldr	r1, [pc, #252]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	3b01      	subs	r3, #1
 80070d4:	025b      	lsls	r3, r3, #9
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	431a      	orrs	r2, r3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	3b01      	subs	r3, #1
 80070e0:	041b      	lsls	r3, r3, #16
 80070e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	061b      	lsls	r3, r3, #24
 80070f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80070f4:	4931      	ldr	r1, [pc, #196]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80070fa:	4b30      	ldr	r3, [pc, #192]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 80070fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	492d      	ldr	r1, [pc, #180]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007108:	4313      	orrs	r3, r2
 800710a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800710c:	4b2b      	ldr	r3, [pc, #172]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 800710e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007110:	f023 0220 	bic.w	r2, r3, #32
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	4928      	ldr	r1, [pc, #160]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 800711a:	4313      	orrs	r3, r2
 800711c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800711e:	4b27      	ldr	r3, [pc, #156]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007122:	4a26      	ldr	r2, [pc, #152]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007124:	f023 0310 	bic.w	r3, r3, #16
 8007128:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800712a:	4b24      	ldr	r3, [pc, #144]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 800712c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800712e:	4b24      	ldr	r3, [pc, #144]	@ (80071c0 <RCCEx_PLL2_Config+0x160>)
 8007130:	4013      	ands	r3, r2
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	69d2      	ldr	r2, [r2, #28]
 8007136:	00d2      	lsls	r2, r2, #3
 8007138:	4920      	ldr	r1, [pc, #128]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 800713a:	4313      	orrs	r3, r2
 800713c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800713e:	4b1f      	ldr	r3, [pc, #124]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007142:	4a1e      	ldr	r2, [pc, #120]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007144:	f043 0310 	orr.w	r3, r3, #16
 8007148:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d106      	bne.n	800715e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007150:	4b1a      	ldr	r3, [pc, #104]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007154:	4a19      	ldr	r2, [pc, #100]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007156:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800715a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800715c:	e00f      	b.n	800717e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d106      	bne.n	8007172 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007164:	4b15      	ldr	r3, [pc, #84]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007168:	4a14      	ldr	r2, [pc, #80]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 800716a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800716e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007170:	e005      	b.n	800717e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007172:	4b12      	ldr	r3, [pc, #72]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007176:	4a11      	ldr	r2, [pc, #68]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007178:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800717c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800717e:	4b0f      	ldr	r3, [pc, #60]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a0e      	ldr	r2, [pc, #56]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 8007184:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800718a:	f7fa ffa9 	bl	80020e0 <HAL_GetTick>
 800718e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007190:	e008      	b.n	80071a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007192:	f7fa ffa5 	bl	80020e0 <HAL_GetTick>
 8007196:	4602      	mov	r2, r0
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	2b02      	cmp	r3, #2
 800719e:	d901      	bls.n	80071a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071a0:	2303      	movs	r3, #3
 80071a2:	e006      	b.n	80071b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80071a4:	4b05      	ldr	r3, [pc, #20]	@ (80071bc <RCCEx_PLL2_Config+0x15c>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d0f0      	beq.n	8007192 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	58024400 	.word	0x58024400
 80071c0:	ffff0007 	.word	0xffff0007

080071c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80071ce:	2300      	movs	r3, #0
 80071d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80071d2:	4b53      	ldr	r3, [pc, #332]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 80071d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	2b03      	cmp	r3, #3
 80071dc:	d101      	bne.n	80071e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e099      	b.n	8007316 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80071e2:	4b4f      	ldr	r3, [pc, #316]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a4e      	ldr	r2, [pc, #312]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 80071e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80071ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071ee:	f7fa ff77 	bl	80020e0 <HAL_GetTick>
 80071f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80071f4:	e008      	b.n	8007208 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071f6:	f7fa ff73 	bl	80020e0 <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b02      	cmp	r3, #2
 8007202:	d901      	bls.n	8007208 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e086      	b.n	8007316 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007208:	4b45      	ldr	r3, [pc, #276]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1f0      	bne.n	80071f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007214:	4b42      	ldr	r3, [pc, #264]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 8007216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007218:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	051b      	lsls	r3, r3, #20
 8007222:	493f      	ldr	r1, [pc, #252]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 8007224:	4313      	orrs	r3, r2
 8007226:	628b      	str	r3, [r1, #40]	@ 0x28
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	3b01      	subs	r3, #1
 800722e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	3b01      	subs	r3, #1
 8007238:	025b      	lsls	r3, r3, #9
 800723a:	b29b      	uxth	r3, r3
 800723c:	431a      	orrs	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	3b01      	subs	r3, #1
 8007244:	041b      	lsls	r3, r3, #16
 8007246:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800724a:	431a      	orrs	r2, r3
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	3b01      	subs	r3, #1
 8007252:	061b      	lsls	r3, r3, #24
 8007254:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007258:	4931      	ldr	r1, [pc, #196]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 800725a:	4313      	orrs	r3, r2
 800725c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800725e:	4b30      	ldr	r3, [pc, #192]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 8007260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007262:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	695b      	ldr	r3, [r3, #20]
 800726a:	492d      	ldr	r1, [pc, #180]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 800726c:	4313      	orrs	r3, r2
 800726e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007270:	4b2b      	ldr	r3, [pc, #172]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 8007272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007274:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	4928      	ldr	r1, [pc, #160]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 800727e:	4313      	orrs	r3, r2
 8007280:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007282:	4b27      	ldr	r3, [pc, #156]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 8007284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007286:	4a26      	ldr	r2, [pc, #152]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 8007288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800728c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800728e:	4b24      	ldr	r3, [pc, #144]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 8007290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007292:	4b24      	ldr	r3, [pc, #144]	@ (8007324 <RCCEx_PLL3_Config+0x160>)
 8007294:	4013      	ands	r3, r2
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	69d2      	ldr	r2, [r2, #28]
 800729a:	00d2      	lsls	r2, r2, #3
 800729c:	4920      	ldr	r1, [pc, #128]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80072a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 80072a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 80072a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d106      	bne.n	80072c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80072b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 80072b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b8:	4a19      	ldr	r2, [pc, #100]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 80072ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80072be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072c0:	e00f      	b.n	80072e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d106      	bne.n	80072d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80072c8:	4b15      	ldr	r3, [pc, #84]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	4a14      	ldr	r2, [pc, #80]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 80072ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80072d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80072d4:	e005      	b.n	80072e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80072d6:	4b12      	ldr	r3, [pc, #72]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 80072d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072da:	4a11      	ldr	r2, [pc, #68]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 80072dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80072e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80072e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 80072e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80072ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072ee:	f7fa fef7 	bl	80020e0 <HAL_GetTick>
 80072f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80072f4:	e008      	b.n	8007308 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80072f6:	f7fa fef3 	bl	80020e0 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d901      	bls.n	8007308 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e006      	b.n	8007316 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007308:	4b05      	ldr	r3, [pc, #20]	@ (8007320 <RCCEx_PLL3_Config+0x15c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d0f0      	beq.n	80072f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007314:	7bfb      	ldrb	r3, [r7, #15]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3710      	adds	r7, #16
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	58024400 	.word	0x58024400
 8007324:	ffff0007 	.word	0xffff0007

08007328 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e10f      	b.n	800755a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a87      	ldr	r2, [pc, #540]	@ (8007564 <HAL_SPI_Init+0x23c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00f      	beq.n	800736a <HAL_SPI_Init+0x42>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a86      	ldr	r2, [pc, #536]	@ (8007568 <HAL_SPI_Init+0x240>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d00a      	beq.n	800736a <HAL_SPI_Init+0x42>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a84      	ldr	r2, [pc, #528]	@ (800756c <HAL_SPI_Init+0x244>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d005      	beq.n	800736a <HAL_SPI_Init+0x42>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	2b0f      	cmp	r3, #15
 8007364:	d901      	bls.n	800736a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e0f7      	b.n	800755a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f900 	bl	8007570 <SPI_GetPacketSize>
 8007370:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a7b      	ldr	r2, [pc, #492]	@ (8007564 <HAL_SPI_Init+0x23c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00c      	beq.n	8007396 <HAL_SPI_Init+0x6e>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a79      	ldr	r2, [pc, #484]	@ (8007568 <HAL_SPI_Init+0x240>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d007      	beq.n	8007396 <HAL_SPI_Init+0x6e>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a78      	ldr	r2, [pc, #480]	@ (800756c <HAL_SPI_Init+0x244>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d002      	beq.n	8007396 <HAL_SPI_Init+0x6e>
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b08      	cmp	r3, #8
 8007394:	d811      	bhi.n	80073ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800739a:	4a72      	ldr	r2, [pc, #456]	@ (8007564 <HAL_SPI_Init+0x23c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d009      	beq.n	80073b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a70      	ldr	r2, [pc, #448]	@ (8007568 <HAL_SPI_Init+0x240>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d004      	beq.n	80073b4 <HAL_SPI_Init+0x8c>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a6f      	ldr	r2, [pc, #444]	@ (800756c <HAL_SPI_Init+0x244>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d104      	bne.n	80073be <HAL_SPI_Init+0x96>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2b10      	cmp	r3, #16
 80073b8:	d901      	bls.n	80073be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e0cd      	b.n	800755a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d106      	bne.n	80073d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fa f944 	bl	8001660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 0201 	bic.w	r2, r2, #1
 80073ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 80073fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007404:	d119      	bne.n	800743a <HAL_SPI_Init+0x112>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800740e:	d103      	bne.n	8007418 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007414:	2b00      	cmp	r3, #0
 8007416:	d008      	beq.n	800742a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10c      	bne.n	800743a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007424:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007428:	d107      	bne.n	800743a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007438:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00f      	beq.n	8007466 <HAL_SPI_Init+0x13e>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	2b06      	cmp	r3, #6
 800744c:	d90b      	bls.n	8007466 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	430a      	orrs	r2, r1
 8007462:	601a      	str	r2, [r3, #0]
 8007464:	e007      	b.n	8007476 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007474:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69da      	ldr	r2, [r3, #28]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800747e:	431a      	orrs	r2, r3
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	431a      	orrs	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007488:	ea42 0103 	orr.w	r1, r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	68da      	ldr	r2, [r3, #12]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a6:	431a      	orrs	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	695b      	ldr	r3, [r3, #20]
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a1b      	ldr	r3, [r3, #32]
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	431a      	orrs	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074ca:	431a      	orrs	r2, r3
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074d6:	ea42 0103 	orr.w	r1, r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d113      	bne.n	8007516 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007500:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007514:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f022 0201 	bic.w	r2, r2, #1
 8007524:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	430a      	orrs	r2, r1
 8007546:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3710      	adds	r7, #16
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40013000 	.word	0x40013000
 8007568:	40003800 	.word	0x40003800
 800756c:	40003c00 	.word	0x40003c00

08007570 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800757c:	095b      	lsrs	r3, r3, #5
 800757e:	3301      	adds	r3, #1
 8007580:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	3301      	adds	r3, #1
 8007588:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	3307      	adds	r3, #7
 800758e:	08db      	lsrs	r3, r3, #3
 8007590:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	fb02 f303 	mul.w	r3, r2, r3
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b082      	sub	sp, #8
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e049      	b.n	800764c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d106      	bne.n	80075d2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7fa fae5 	bl	8001b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2202      	movs	r2, #2
 80075d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	3304      	adds	r3, #4
 80075e2:	4619      	mov	r1, r3
 80075e4:	4610      	mov	r0, r2
 80075e6:	f000 fd2d 	bl	8008044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2201      	movs	r2, #1
 80075ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2201      	movs	r2, #1
 80075f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2201      	movs	r2, #1
 800762e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2201      	movs	r2, #1
 8007636:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2201      	movs	r2, #1
 800763e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800764a:	2300      	movs	r3, #0
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e049      	b.n	80076fa <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d106      	bne.n	8007680 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f841 	bl	8007702 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2202      	movs	r2, #2
 8007684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	3304      	adds	r3, #4
 8007690:	4619      	mov	r1, r3
 8007692:	4610      	mov	r0, r2
 8007694:	f000 fcd6 	bl	8008044 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3708      	adds	r7, #8
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}

08007702 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007702:	b480      	push	{r7}
 8007704:	b083      	sub	sp, #12
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
	...

08007718 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d109      	bne.n	800773c <HAL_TIM_PWM_Start+0x24>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b01      	cmp	r3, #1
 8007732:	bf14      	ite	ne
 8007734:	2301      	movne	r3, #1
 8007736:	2300      	moveq	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	e03c      	b.n	80077b6 <HAL_TIM_PWM_Start+0x9e>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2b04      	cmp	r3, #4
 8007740:	d109      	bne.n	8007756 <HAL_TIM_PWM_Start+0x3e>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b01      	cmp	r3, #1
 800774c:	bf14      	ite	ne
 800774e:	2301      	movne	r3, #1
 8007750:	2300      	moveq	r3, #0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	e02f      	b.n	80077b6 <HAL_TIM_PWM_Start+0x9e>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b08      	cmp	r3, #8
 800775a:	d109      	bne.n	8007770 <HAL_TIM_PWM_Start+0x58>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b01      	cmp	r3, #1
 8007766:	bf14      	ite	ne
 8007768:	2301      	movne	r3, #1
 800776a:	2300      	moveq	r3, #0
 800776c:	b2db      	uxtb	r3, r3
 800776e:	e022      	b.n	80077b6 <HAL_TIM_PWM_Start+0x9e>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2b0c      	cmp	r3, #12
 8007774:	d109      	bne.n	800778a <HAL_TIM_PWM_Start+0x72>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b01      	cmp	r3, #1
 8007780:	bf14      	ite	ne
 8007782:	2301      	movne	r3, #1
 8007784:	2300      	moveq	r3, #0
 8007786:	b2db      	uxtb	r3, r3
 8007788:	e015      	b.n	80077b6 <HAL_TIM_PWM_Start+0x9e>
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b10      	cmp	r3, #16
 800778e:	d109      	bne.n	80077a4 <HAL_TIM_PWM_Start+0x8c>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b01      	cmp	r3, #1
 800779a:	bf14      	ite	ne
 800779c:	2301      	movne	r3, #1
 800779e:	2300      	moveq	r3, #0
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	e008      	b.n	80077b6 <HAL_TIM_PWM_Start+0x9e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	bf14      	ite	ne
 80077b0:	2301      	movne	r3, #1
 80077b2:	2300      	moveq	r3, #0
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e0a1      	b.n	8007902 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d104      	bne.n	80077ce <HAL_TIM_PWM_Start+0xb6>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077cc:	e023      	b.n	8007816 <HAL_TIM_PWM_Start+0xfe>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b04      	cmp	r3, #4
 80077d2:	d104      	bne.n	80077de <HAL_TIM_PWM_Start+0xc6>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077dc:	e01b      	b.n	8007816 <HAL_TIM_PWM_Start+0xfe>
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	2b08      	cmp	r3, #8
 80077e2:	d104      	bne.n	80077ee <HAL_TIM_PWM_Start+0xd6>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077ec:	e013      	b.n	8007816 <HAL_TIM_PWM_Start+0xfe>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b0c      	cmp	r3, #12
 80077f2:	d104      	bne.n	80077fe <HAL_TIM_PWM_Start+0xe6>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80077fc:	e00b      	b.n	8007816 <HAL_TIM_PWM_Start+0xfe>
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	2b10      	cmp	r3, #16
 8007802:	d104      	bne.n	800780e <HAL_TIM_PWM_Start+0xf6>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2202      	movs	r2, #2
 8007808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800780c:	e003      	b.n	8007816 <HAL_TIM_PWM_Start+0xfe>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2202      	movs	r2, #2
 8007812:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2201      	movs	r2, #1
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	4618      	mov	r0, r3
 8007820:	f001 f914 	bl	8008a4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a38      	ldr	r2, [pc, #224]	@ (800790c <HAL_TIM_PWM_Start+0x1f4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d013      	beq.n	8007856 <HAL_TIM_PWM_Start+0x13e>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a37      	ldr	r2, [pc, #220]	@ (8007910 <HAL_TIM_PWM_Start+0x1f8>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d00e      	beq.n	8007856 <HAL_TIM_PWM_Start+0x13e>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a35      	ldr	r2, [pc, #212]	@ (8007914 <HAL_TIM_PWM_Start+0x1fc>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d009      	beq.n	8007856 <HAL_TIM_PWM_Start+0x13e>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a34      	ldr	r2, [pc, #208]	@ (8007918 <HAL_TIM_PWM_Start+0x200>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d004      	beq.n	8007856 <HAL_TIM_PWM_Start+0x13e>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a32      	ldr	r2, [pc, #200]	@ (800791c <HAL_TIM_PWM_Start+0x204>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d101      	bne.n	800785a <HAL_TIM_PWM_Start+0x142>
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <HAL_TIM_PWM_Start+0x144>
 800785a:	2300      	movs	r3, #0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d007      	beq.n	8007870 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800786e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a25      	ldr	r2, [pc, #148]	@ (800790c <HAL_TIM_PWM_Start+0x1f4>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d022      	beq.n	80078c0 <HAL_TIM_PWM_Start+0x1a8>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007882:	d01d      	beq.n	80078c0 <HAL_TIM_PWM_Start+0x1a8>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a25      	ldr	r2, [pc, #148]	@ (8007920 <HAL_TIM_PWM_Start+0x208>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d018      	beq.n	80078c0 <HAL_TIM_PWM_Start+0x1a8>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a24      	ldr	r2, [pc, #144]	@ (8007924 <HAL_TIM_PWM_Start+0x20c>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d013      	beq.n	80078c0 <HAL_TIM_PWM_Start+0x1a8>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a22      	ldr	r2, [pc, #136]	@ (8007928 <HAL_TIM_PWM_Start+0x210>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d00e      	beq.n	80078c0 <HAL_TIM_PWM_Start+0x1a8>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a1a      	ldr	r2, [pc, #104]	@ (8007910 <HAL_TIM_PWM_Start+0x1f8>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d009      	beq.n	80078c0 <HAL_TIM_PWM_Start+0x1a8>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a1e      	ldr	r2, [pc, #120]	@ (800792c <HAL_TIM_PWM_Start+0x214>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d004      	beq.n	80078c0 <HAL_TIM_PWM_Start+0x1a8>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a16      	ldr	r2, [pc, #88]	@ (8007914 <HAL_TIM_PWM_Start+0x1fc>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d115      	bne.n	80078ec <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689a      	ldr	r2, [r3, #8]
 80078c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007930 <HAL_TIM_PWM_Start+0x218>)
 80078c8:	4013      	ands	r3, r2
 80078ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2b06      	cmp	r3, #6
 80078d0:	d015      	beq.n	80078fe <HAL_TIM_PWM_Start+0x1e6>
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078d8:	d011      	beq.n	80078fe <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f042 0201 	orr.w	r2, r2, #1
 80078e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ea:	e008      	b.n	80078fe <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f042 0201 	orr.w	r2, r2, #1
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	e000      	b.n	8007900 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3710      	adds	r7, #16
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40010000 	.word	0x40010000
 8007910:	40010400 	.word	0x40010400
 8007914:	40014000 	.word	0x40014000
 8007918:	40014400 	.word	0x40014400
 800791c:	40014800 	.word	0x40014800
 8007920:	40000400 	.word	0x40000400
 8007924:	40000800 	.word	0x40000800
 8007928:	40000c00 	.word	0x40000c00
 800792c:	40001800 	.word	0x40001800
 8007930:	00010007 	.word	0x00010007

08007934 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f003 0302 	and.w	r3, r3, #2
 8007952:	2b00      	cmp	r3, #0
 8007954:	d020      	beq.n	8007998 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01b      	beq.n	8007998 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f06f 0202 	mvn.w	r2, #2
 8007968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fb42 	bl	8008008 <HAL_TIM_IC_CaptureCallback>
 8007984:	e005      	b.n	8007992 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 fb34 	bl	8007ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 fb45 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	f003 0304 	and.w	r3, r3, #4
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d020      	beq.n	80079e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01b      	beq.n	80079e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f06f 0204 	mvn.w	r2, #4
 80079b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2202      	movs	r2, #2
 80079ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fb1c 	bl	8008008 <HAL_TIM_IC_CaptureCallback>
 80079d0:	e005      	b.n	80079de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fb0e 	bl	8007ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fb1f 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	f003 0308 	and.w	r3, r3, #8
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d020      	beq.n	8007a30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f003 0308 	and.w	r3, r3, #8
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d01b      	beq.n	8007a30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f06f 0208 	mvn.w	r2, #8
 8007a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2204      	movs	r2, #4
 8007a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69db      	ldr	r3, [r3, #28]
 8007a0e:	f003 0303 	and.w	r3, r3, #3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d003      	beq.n	8007a1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 faf6 	bl	8008008 <HAL_TIM_IC_CaptureCallback>
 8007a1c:	e005      	b.n	8007a2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fae8 	bl	8007ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 faf9 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	f003 0310 	and.w	r3, r3, #16
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d020      	beq.n	8007a7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	f003 0310 	and.w	r3, r3, #16
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01b      	beq.n	8007a7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f06f 0210 	mvn.w	r2, #16
 8007a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2208      	movs	r2, #8
 8007a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d003      	beq.n	8007a6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fad0 	bl	8008008 <HAL_TIM_IC_CaptureCallback>
 8007a68:	e005      	b.n	8007a76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 fac2 	bl	8007ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fad3 	bl	800801c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	f003 0301 	and.w	r3, r3, #1
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00c      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d007      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f06f 0201 	mvn.w	r2, #1
 8007a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 faa0 	bl	8007fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d104      	bne.n	8007ab4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00c      	beq.n	8007ace <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d007      	beq.n	8007ace <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007ac6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 f87d 	bl	8008bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00c      	beq.n	8007af2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d007      	beq.n	8007af2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f001 f875 	bl	8008bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00c      	beq.n	8007b16 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d007      	beq.n	8007b16 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fa8d 	bl	8008030 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	f003 0320 	and.w	r3, r3, #32
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00c      	beq.n	8007b3a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f06f 0220 	mvn.w	r2, #32
 8007b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 f83d 	bl	8008bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b3a:	bf00      	nop
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
	...

08007b44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d101      	bne.n	8007b62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b5e:	2302      	movs	r3, #2
 8007b60:	e0ff      	b.n	8007d62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2201      	movs	r2, #1
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b14      	cmp	r3, #20
 8007b6e:	f200 80f0 	bhi.w	8007d52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007b72:	a201      	add	r2, pc, #4	@ (adr r2, 8007b78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b78:	08007bcd 	.word	0x08007bcd
 8007b7c:	08007d53 	.word	0x08007d53
 8007b80:	08007d53 	.word	0x08007d53
 8007b84:	08007d53 	.word	0x08007d53
 8007b88:	08007c0d 	.word	0x08007c0d
 8007b8c:	08007d53 	.word	0x08007d53
 8007b90:	08007d53 	.word	0x08007d53
 8007b94:	08007d53 	.word	0x08007d53
 8007b98:	08007c4f 	.word	0x08007c4f
 8007b9c:	08007d53 	.word	0x08007d53
 8007ba0:	08007d53 	.word	0x08007d53
 8007ba4:	08007d53 	.word	0x08007d53
 8007ba8:	08007c8f 	.word	0x08007c8f
 8007bac:	08007d53 	.word	0x08007d53
 8007bb0:	08007d53 	.word	0x08007d53
 8007bb4:	08007d53 	.word	0x08007d53
 8007bb8:	08007cd1 	.word	0x08007cd1
 8007bbc:	08007d53 	.word	0x08007d53
 8007bc0:	08007d53 	.word	0x08007d53
 8007bc4:	08007d53 	.word	0x08007d53
 8007bc8:	08007d11 	.word	0x08007d11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	68b9      	ldr	r1, [r7, #8]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f000 fadc 	bl	8008190 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699a      	ldr	r2, [r3, #24]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f042 0208 	orr.w	r2, r2, #8
 8007be6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	699a      	ldr	r2, [r3, #24]
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f022 0204 	bic.w	r2, r2, #4
 8007bf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6999      	ldr	r1, [r3, #24]
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	691a      	ldr	r2, [r3, #16]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	430a      	orrs	r2, r1
 8007c08:	619a      	str	r2, [r3, #24]
      break;
 8007c0a:	e0a5      	b.n	8007d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68b9      	ldr	r1, [r7, #8]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fb4c 	bl	80082b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	699a      	ldr	r2, [r3, #24]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	699a      	ldr	r2, [r3, #24]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6999      	ldr	r1, [r3, #24]
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	021a      	lsls	r2, r3, #8
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	430a      	orrs	r2, r1
 8007c4a:	619a      	str	r2, [r3, #24]
      break;
 8007c4c:	e084      	b.n	8007d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68b9      	ldr	r1, [r7, #8]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 fbb5 	bl	80083c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69da      	ldr	r2, [r3, #28]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f042 0208 	orr.w	r2, r2, #8
 8007c68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69da      	ldr	r2, [r3, #28]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f022 0204 	bic.w	r2, r2, #4
 8007c78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	69d9      	ldr	r1, [r3, #28]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	691a      	ldr	r2, [r3, #16]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	61da      	str	r2, [r3, #28]
      break;
 8007c8c:	e064      	b.n	8007d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68b9      	ldr	r1, [r7, #8]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 fc1d 	bl	80084d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	69da      	ldr	r2, [r3, #28]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ca8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	69da      	ldr	r2, [r3, #28]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007cb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	69d9      	ldr	r1, [r3, #28]
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	691b      	ldr	r3, [r3, #16]
 8007cc4:	021a      	lsls	r2, r3, #8
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	61da      	str	r2, [r3, #28]
      break;
 8007cce:	e043      	b.n	8007d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68b9      	ldr	r1, [r7, #8]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 fc66 	bl	80085a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f042 0208 	orr.w	r2, r2, #8
 8007cea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0204 	bic.w	r2, r2, #4
 8007cfa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	691a      	ldr	r2, [r3, #16]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	430a      	orrs	r2, r1
 8007d0c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007d0e:	e023      	b.n	8007d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	68b9      	ldr	r1, [r7, #8]
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 fcaa 	bl	8008670 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d2a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d3a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	021a      	lsls	r2, r3, #8
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	430a      	orrs	r2, r1
 8007d4e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007d50:	e002      	b.n	8007d58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	75fb      	strb	r3, [r7, #23]
      break;
 8007d56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop

08007d6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d101      	bne.n	8007d88 <HAL_TIM_ConfigClockSource+0x1c>
 8007d84:	2302      	movs	r3, #2
 8007d86:	e0dc      	b.n	8007f42 <HAL_TIM_ConfigClockSource+0x1d6>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2202      	movs	r2, #2
 8007d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007da0:	68ba      	ldr	r2, [r7, #8]
 8007da2:	4b6a      	ldr	r3, [pc, #424]	@ (8007f4c <HAL_TIM_ConfigClockSource+0x1e0>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007dae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a64      	ldr	r2, [pc, #400]	@ (8007f50 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	f000 80a9 	beq.w	8007f16 <HAL_TIM_ConfigClockSource+0x1aa>
 8007dc4:	4a62      	ldr	r2, [pc, #392]	@ (8007f50 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	f200 80ae 	bhi.w	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dcc:	4a61      	ldr	r2, [pc, #388]	@ (8007f54 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007dce:	4293      	cmp	r3, r2
 8007dd0:	f000 80a1 	beq.w	8007f16 <HAL_TIM_ConfigClockSource+0x1aa>
 8007dd4:	4a5f      	ldr	r2, [pc, #380]	@ (8007f54 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	f200 80a6 	bhi.w	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ddc:	4a5e      	ldr	r2, [pc, #376]	@ (8007f58 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	f000 8099 	beq.w	8007f16 <HAL_TIM_ConfigClockSource+0x1aa>
 8007de4:	4a5c      	ldr	r2, [pc, #368]	@ (8007f58 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	f200 809e 	bhi.w	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007df0:	f000 8091 	beq.w	8007f16 <HAL_TIM_ConfigClockSource+0x1aa>
 8007df4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007df8:	f200 8096 	bhi.w	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
 8007dfc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e00:	f000 8089 	beq.w	8007f16 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e08:	f200 808e 	bhi.w	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e10:	d03e      	beq.n	8007e90 <HAL_TIM_ConfigClockSource+0x124>
 8007e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e16:	f200 8087 	bhi.w	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e1e:	f000 8086 	beq.w	8007f2e <HAL_TIM_ConfigClockSource+0x1c2>
 8007e22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e26:	d87f      	bhi.n	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e28:	2b70      	cmp	r3, #112	@ 0x70
 8007e2a:	d01a      	beq.n	8007e62 <HAL_TIM_ConfigClockSource+0xf6>
 8007e2c:	2b70      	cmp	r3, #112	@ 0x70
 8007e2e:	d87b      	bhi.n	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e30:	2b60      	cmp	r3, #96	@ 0x60
 8007e32:	d050      	beq.n	8007ed6 <HAL_TIM_ConfigClockSource+0x16a>
 8007e34:	2b60      	cmp	r3, #96	@ 0x60
 8007e36:	d877      	bhi.n	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e38:	2b50      	cmp	r3, #80	@ 0x50
 8007e3a:	d03c      	beq.n	8007eb6 <HAL_TIM_ConfigClockSource+0x14a>
 8007e3c:	2b50      	cmp	r3, #80	@ 0x50
 8007e3e:	d873      	bhi.n	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e40:	2b40      	cmp	r3, #64	@ 0x40
 8007e42:	d058      	beq.n	8007ef6 <HAL_TIM_ConfigClockSource+0x18a>
 8007e44:	2b40      	cmp	r3, #64	@ 0x40
 8007e46:	d86f      	bhi.n	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e48:	2b30      	cmp	r3, #48	@ 0x30
 8007e4a:	d064      	beq.n	8007f16 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e4c:	2b30      	cmp	r3, #48	@ 0x30
 8007e4e:	d86b      	bhi.n	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e50:	2b20      	cmp	r3, #32
 8007e52:	d060      	beq.n	8007f16 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e54:	2b20      	cmp	r3, #32
 8007e56:	d867      	bhi.n	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d05c      	beq.n	8007f16 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e5c:	2b10      	cmp	r3, #16
 8007e5e:	d05a      	beq.n	8007f16 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e60:	e062      	b.n	8007f28 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007e72:	f000 fdcb 	bl	8008a0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007e84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	609a      	str	r2, [r3, #8]
      break;
 8007e8e:	e04f      	b.n	8007f30 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ea0:	f000 fdb4 	bl	8008a0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007eb2:	609a      	str	r2, [r3, #8]
      break;
 8007eb4:	e03c      	b.n	8007f30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	f000 fd24 	bl	8008910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2150      	movs	r1, #80	@ 0x50
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 fd7e 	bl	80089d0 <TIM_ITRx_SetConfig>
      break;
 8007ed4:	e02c      	b.n	8007f30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	f000 fd43 	bl	800896e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2160      	movs	r1, #96	@ 0x60
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 fd6e 	bl	80089d0 <TIM_ITRx_SetConfig>
      break;
 8007ef4:	e01c      	b.n	8007f30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f02:	461a      	mov	r2, r3
 8007f04:	f000 fd04 	bl	8008910 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2140      	movs	r1, #64	@ 0x40
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 fd5e 	bl	80089d0 <TIM_ITRx_SetConfig>
      break;
 8007f14:	e00c      	b.n	8007f30 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4610      	mov	r0, r2
 8007f22:	f000 fd55 	bl	80089d0 <TIM_ITRx_SetConfig>
      break;
 8007f26:	e003      	b.n	8007f30 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f2c:	e000      	b.n	8007f30 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3710      	adds	r7, #16
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	ffceff88 	.word	0xffceff88
 8007f50:	00100040 	.word	0x00100040
 8007f54:	00100030 	.word	0x00100030
 8007f58:	00100020 	.word	0x00100020

08007f5c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007f70:	2302      	movs	r3, #2
 8007f72:	e031      	b.n	8007fd8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fbd8 	bl	800873c <TIM_SlaveTimer_SetConfig>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d009      	beq.n	8007fa6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2201      	movs	r2, #1
 8007f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e018      	b.n	8007fd8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fb4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007fc4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007fd6:	2300      	movs	r3, #0
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3708      	adds	r7, #8
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ffc:	bf00      	nop
 8007ffe:	370c      	adds	r7, #12
 8008000:	46bd      	mov	sp, r7
 8008002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008006:	4770      	bx	lr

08008008 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a46      	ldr	r2, [pc, #280]	@ (8008170 <TIM_Base_SetConfig+0x12c>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d013      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008062:	d00f      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a43      	ldr	r2, [pc, #268]	@ (8008174 <TIM_Base_SetConfig+0x130>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d00b      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a42      	ldr	r2, [pc, #264]	@ (8008178 <TIM_Base_SetConfig+0x134>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d007      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a41      	ldr	r2, [pc, #260]	@ (800817c <TIM_Base_SetConfig+0x138>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d003      	beq.n	8008084 <TIM_Base_SetConfig+0x40>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a40      	ldr	r2, [pc, #256]	@ (8008180 <TIM_Base_SetConfig+0x13c>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d108      	bne.n	8008096 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800808a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	4313      	orrs	r3, r2
 8008094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	4a35      	ldr	r2, [pc, #212]	@ (8008170 <TIM_Base_SetConfig+0x12c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d01f      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a4:	d01b      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	4a32      	ldr	r2, [pc, #200]	@ (8008174 <TIM_Base_SetConfig+0x130>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d017      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4a31      	ldr	r2, [pc, #196]	@ (8008178 <TIM_Base_SetConfig+0x134>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d013      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a30      	ldr	r2, [pc, #192]	@ (800817c <TIM_Base_SetConfig+0x138>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d00f      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a2f      	ldr	r2, [pc, #188]	@ (8008180 <TIM_Base_SetConfig+0x13c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d00b      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a2e      	ldr	r2, [pc, #184]	@ (8008184 <TIM_Base_SetConfig+0x140>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d007      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008188 <TIM_Base_SetConfig+0x144>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d003      	beq.n	80080de <TIM_Base_SetConfig+0x9a>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a2c      	ldr	r2, [pc, #176]	@ (800818c <TIM_Base_SetConfig+0x148>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d108      	bne.n	80080f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	695b      	ldr	r3, [r3, #20]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	689a      	ldr	r2, [r3, #8]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	4a16      	ldr	r2, [pc, #88]	@ (8008170 <TIM_Base_SetConfig+0x12c>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d00f      	beq.n	800813c <TIM_Base_SetConfig+0xf8>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	4a18      	ldr	r2, [pc, #96]	@ (8008180 <TIM_Base_SetConfig+0x13c>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d00b      	beq.n	800813c <TIM_Base_SetConfig+0xf8>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	4a17      	ldr	r2, [pc, #92]	@ (8008184 <TIM_Base_SetConfig+0x140>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d007      	beq.n	800813c <TIM_Base_SetConfig+0xf8>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a16      	ldr	r2, [pc, #88]	@ (8008188 <TIM_Base_SetConfig+0x144>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d003      	beq.n	800813c <TIM_Base_SetConfig+0xf8>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a15      	ldr	r2, [pc, #84]	@ (800818c <TIM_Base_SetConfig+0x148>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d103      	bne.n	8008144 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	691a      	ldr	r2, [r3, #16]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	2b01      	cmp	r3, #1
 8008154:	d105      	bne.n	8008162 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	f023 0201 	bic.w	r2, r3, #1
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	611a      	str	r2, [r3, #16]
  }
}
 8008162:	bf00      	nop
 8008164:	3714      	adds	r7, #20
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	40010000 	.word	0x40010000
 8008174:	40000400 	.word	0x40000400
 8008178:	40000800 	.word	0x40000800
 800817c:	40000c00 	.word	0x40000c00
 8008180:	40010400 	.word	0x40010400
 8008184:	40014000 	.word	0x40014000
 8008188:	40014400 	.word	0x40014400
 800818c:	40014800 	.word	0x40014800

08008190 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a1b      	ldr	r3, [r3, #32]
 80081a4:	f023 0201 	bic.w	r2, r3, #1
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081b8:	68fa      	ldr	r2, [r7, #12]
 80081ba:	4b37      	ldr	r3, [pc, #220]	@ (8008298 <TIM_OC1_SetConfig+0x108>)
 80081bc:	4013      	ands	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f023 0303 	bic.w	r3, r3, #3
 80081c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68fa      	ldr	r2, [r7, #12]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	f023 0302 	bic.w	r3, r3, #2
 80081d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	697a      	ldr	r2, [r7, #20]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a2d      	ldr	r2, [pc, #180]	@ (800829c <TIM_OC1_SetConfig+0x10c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d00f      	beq.n	800820c <TIM_OC1_SetConfig+0x7c>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a2c      	ldr	r2, [pc, #176]	@ (80082a0 <TIM_OC1_SetConfig+0x110>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d00b      	beq.n	800820c <TIM_OC1_SetConfig+0x7c>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a2b      	ldr	r2, [pc, #172]	@ (80082a4 <TIM_OC1_SetConfig+0x114>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d007      	beq.n	800820c <TIM_OC1_SetConfig+0x7c>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a2a      	ldr	r2, [pc, #168]	@ (80082a8 <TIM_OC1_SetConfig+0x118>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d003      	beq.n	800820c <TIM_OC1_SetConfig+0x7c>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a29      	ldr	r2, [pc, #164]	@ (80082ac <TIM_OC1_SetConfig+0x11c>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d10c      	bne.n	8008226 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f023 0308 	bic.w	r3, r3, #8
 8008212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	697a      	ldr	r2, [r7, #20]
 800821a:	4313      	orrs	r3, r2
 800821c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f023 0304 	bic.w	r3, r3, #4
 8008224:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	4a1c      	ldr	r2, [pc, #112]	@ (800829c <TIM_OC1_SetConfig+0x10c>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d00f      	beq.n	800824e <TIM_OC1_SetConfig+0xbe>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a1b      	ldr	r2, [pc, #108]	@ (80082a0 <TIM_OC1_SetConfig+0x110>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d00b      	beq.n	800824e <TIM_OC1_SetConfig+0xbe>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a1a      	ldr	r2, [pc, #104]	@ (80082a4 <TIM_OC1_SetConfig+0x114>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d007      	beq.n	800824e <TIM_OC1_SetConfig+0xbe>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a19      	ldr	r2, [pc, #100]	@ (80082a8 <TIM_OC1_SetConfig+0x118>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d003      	beq.n	800824e <TIM_OC1_SetConfig+0xbe>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a18      	ldr	r2, [pc, #96]	@ (80082ac <TIM_OC1_SetConfig+0x11c>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d111      	bne.n	8008272 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800825c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	695b      	ldr	r3, [r3, #20]
 8008262:	693a      	ldr	r2, [r7, #16]
 8008264:	4313      	orrs	r3, r2
 8008266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	4313      	orrs	r3, r2
 8008270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	621a      	str	r2, [r3, #32]
}
 800828c:	bf00      	nop
 800828e:	371c      	adds	r7, #28
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr
 8008298:	fffeff8f 	.word	0xfffeff8f
 800829c:	40010000 	.word	0x40010000
 80082a0:	40010400 	.word	0x40010400
 80082a4:	40014000 	.word	0x40014000
 80082a8:	40014400 	.word	0x40014400
 80082ac:	40014800 	.word	0x40014800

080082b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b087      	sub	sp, #28
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6a1b      	ldr	r3, [r3, #32]
 80082c4:	f023 0210 	bic.w	r2, r3, #16
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	699b      	ldr	r3, [r3, #24]
 80082d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082d8:	68fa      	ldr	r2, [r7, #12]
 80082da:	4b34      	ldr	r3, [pc, #208]	@ (80083ac <TIM_OC2_SetConfig+0xfc>)
 80082dc:	4013      	ands	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	021b      	lsls	r3, r3, #8
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	4313      	orrs	r3, r2
 80082f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f023 0320 	bic.w	r3, r3, #32
 80082fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	011b      	lsls	r3, r3, #4
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	4313      	orrs	r3, r2
 8008306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a29      	ldr	r2, [pc, #164]	@ (80083b0 <TIM_OC2_SetConfig+0x100>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d003      	beq.n	8008318 <TIM_OC2_SetConfig+0x68>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a28      	ldr	r2, [pc, #160]	@ (80083b4 <TIM_OC2_SetConfig+0x104>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d10d      	bne.n	8008334 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800831e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	011b      	lsls	r3, r3, #4
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	4313      	orrs	r3, r2
 800832a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008332:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	4a1e      	ldr	r2, [pc, #120]	@ (80083b0 <TIM_OC2_SetConfig+0x100>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d00f      	beq.n	800835c <TIM_OC2_SetConfig+0xac>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a1d      	ldr	r2, [pc, #116]	@ (80083b4 <TIM_OC2_SetConfig+0x104>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00b      	beq.n	800835c <TIM_OC2_SetConfig+0xac>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a1c      	ldr	r2, [pc, #112]	@ (80083b8 <TIM_OC2_SetConfig+0x108>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d007      	beq.n	800835c <TIM_OC2_SetConfig+0xac>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a1b      	ldr	r2, [pc, #108]	@ (80083bc <TIM_OC2_SetConfig+0x10c>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d003      	beq.n	800835c <TIM_OC2_SetConfig+0xac>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a1a      	ldr	r2, [pc, #104]	@ (80083c0 <TIM_OC2_SetConfig+0x110>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d113      	bne.n	8008384 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800836a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	4313      	orrs	r3, r2
 8008376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	009b      	lsls	r3, r3, #2
 800837e:	693a      	ldr	r2, [r7, #16]
 8008380:	4313      	orrs	r3, r2
 8008382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685a      	ldr	r2, [r3, #4]
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	621a      	str	r2, [r3, #32]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	feff8fff 	.word	0xfeff8fff
 80083b0:	40010000 	.word	0x40010000
 80083b4:	40010400 	.word	0x40010400
 80083b8:	40014000 	.word	0x40014000
 80083bc:	40014400 	.word	0x40014400
 80083c0:	40014800 	.word	0x40014800

080083c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b087      	sub	sp, #28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6a1b      	ldr	r3, [r3, #32]
 80083d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	4b33      	ldr	r3, [pc, #204]	@ (80084bc <TIM_OC3_SetConfig+0xf8>)
 80083f0:	4013      	ands	r3, r2
 80083f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f023 0303 	bic.w	r3, r3, #3
 80083fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800840c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	021b      	lsls	r3, r3, #8
 8008414:	697a      	ldr	r2, [r7, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a28      	ldr	r2, [pc, #160]	@ (80084c0 <TIM_OC3_SetConfig+0xfc>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d003      	beq.n	800842a <TIM_OC3_SetConfig+0x66>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a27      	ldr	r2, [pc, #156]	@ (80084c4 <TIM_OC3_SetConfig+0x100>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d10d      	bne.n	8008446 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	021b      	lsls	r3, r3, #8
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	4313      	orrs	r3, r2
 800843c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a1d      	ldr	r2, [pc, #116]	@ (80084c0 <TIM_OC3_SetConfig+0xfc>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d00f      	beq.n	800846e <TIM_OC3_SetConfig+0xaa>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a1c      	ldr	r2, [pc, #112]	@ (80084c4 <TIM_OC3_SetConfig+0x100>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d00b      	beq.n	800846e <TIM_OC3_SetConfig+0xaa>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a1b      	ldr	r2, [pc, #108]	@ (80084c8 <TIM_OC3_SetConfig+0x104>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d007      	beq.n	800846e <TIM_OC3_SetConfig+0xaa>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a1a      	ldr	r2, [pc, #104]	@ (80084cc <TIM_OC3_SetConfig+0x108>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d003      	beq.n	800846e <TIM_OC3_SetConfig+0xaa>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a19      	ldr	r2, [pc, #100]	@ (80084d0 <TIM_OC3_SetConfig+0x10c>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d113      	bne.n	8008496 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800846e:	693b      	ldr	r3, [r7, #16]
 8008470:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008474:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800847c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	695b      	ldr	r3, [r3, #20]
 8008482:	011b      	lsls	r3, r3, #4
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	4313      	orrs	r3, r2
 8008488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	4313      	orrs	r3, r2
 8008494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	693a      	ldr	r2, [r7, #16]
 800849a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	621a      	str	r2, [r3, #32]
}
 80084b0:	bf00      	nop
 80084b2:	371c      	adds	r7, #28
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	fffeff8f 	.word	0xfffeff8f
 80084c0:	40010000 	.word	0x40010000
 80084c4:	40010400 	.word	0x40010400
 80084c8:	40014000 	.word	0x40014000
 80084cc:	40014400 	.word	0x40014400
 80084d0:	40014800 	.word	0x40014800

080084d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6a1b      	ldr	r3, [r3, #32]
 80084e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a1b      	ldr	r3, [r3, #32]
 80084e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	69db      	ldr	r3, [r3, #28]
 80084fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	4b24      	ldr	r3, [pc, #144]	@ (8008590 <TIM_OC4_SetConfig+0xbc>)
 8008500:	4013      	ands	r3, r2
 8008502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800850a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	021b      	lsls	r3, r3, #8
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800851e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	031b      	lsls	r3, r3, #12
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	4313      	orrs	r3, r2
 800852a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a19      	ldr	r2, [pc, #100]	@ (8008594 <TIM_OC4_SetConfig+0xc0>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d00f      	beq.n	8008554 <TIM_OC4_SetConfig+0x80>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a18      	ldr	r2, [pc, #96]	@ (8008598 <TIM_OC4_SetConfig+0xc4>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00b      	beq.n	8008554 <TIM_OC4_SetConfig+0x80>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a17      	ldr	r2, [pc, #92]	@ (800859c <TIM_OC4_SetConfig+0xc8>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d007      	beq.n	8008554 <TIM_OC4_SetConfig+0x80>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a16      	ldr	r2, [pc, #88]	@ (80085a0 <TIM_OC4_SetConfig+0xcc>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d003      	beq.n	8008554 <TIM_OC4_SetConfig+0x80>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a15      	ldr	r2, [pc, #84]	@ (80085a4 <TIM_OC4_SetConfig+0xd0>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d109      	bne.n	8008568 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800855a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	695b      	ldr	r3, [r3, #20]
 8008560:	019b      	lsls	r3, r3, #6
 8008562:	697a      	ldr	r2, [r7, #20]
 8008564:	4313      	orrs	r3, r2
 8008566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	685a      	ldr	r2, [r3, #4]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	621a      	str	r2, [r3, #32]
}
 8008582:	bf00      	nop
 8008584:	371c      	adds	r7, #28
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	feff8fff 	.word	0xfeff8fff
 8008594:	40010000 	.word	0x40010000
 8008598:	40010400 	.word	0x40010400
 800859c:	40014000 	.word	0x40014000
 80085a0:	40014400 	.word	0x40014400
 80085a4:	40014800 	.word	0x40014800

080085a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a1b      	ldr	r3, [r3, #32]
 80085b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80085d0:	68fa      	ldr	r2, [r7, #12]
 80085d2:	4b21      	ldr	r3, [pc, #132]	@ (8008658 <TIM_OC5_SetConfig+0xb0>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	4313      	orrs	r3, r2
 80085e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80085e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	041b      	lsls	r3, r3, #16
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a18      	ldr	r2, [pc, #96]	@ (800865c <TIM_OC5_SetConfig+0xb4>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d00f      	beq.n	800861e <TIM_OC5_SetConfig+0x76>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a17      	ldr	r2, [pc, #92]	@ (8008660 <TIM_OC5_SetConfig+0xb8>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d00b      	beq.n	800861e <TIM_OC5_SetConfig+0x76>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a16      	ldr	r2, [pc, #88]	@ (8008664 <TIM_OC5_SetConfig+0xbc>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d007      	beq.n	800861e <TIM_OC5_SetConfig+0x76>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a15      	ldr	r2, [pc, #84]	@ (8008668 <TIM_OC5_SetConfig+0xc0>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d003      	beq.n	800861e <TIM_OC5_SetConfig+0x76>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a14      	ldr	r2, [pc, #80]	@ (800866c <TIM_OC5_SetConfig+0xc4>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d109      	bne.n	8008632 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008624:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	021b      	lsls	r3, r3, #8
 800862c:	697a      	ldr	r2, [r7, #20]
 800862e:	4313      	orrs	r3, r2
 8008630:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	697a      	ldr	r2, [r7, #20]
 8008636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	693a      	ldr	r2, [r7, #16]
 800864a:	621a      	str	r2, [r3, #32]
}
 800864c:	bf00      	nop
 800864e:	371c      	adds	r7, #28
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	fffeff8f 	.word	0xfffeff8f
 800865c:	40010000 	.word	0x40010000
 8008660:	40010400 	.word	0x40010400
 8008664:	40014000 	.word	0x40014000
 8008668:	40014400 	.word	0x40014400
 800866c:	40014800 	.word	0x40014800

08008670 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	4b22      	ldr	r3, [pc, #136]	@ (8008724 <TIM_OC6_SetConfig+0xb4>)
 800869c:	4013      	ands	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	68fa      	ldr	r2, [r7, #12]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80086b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	689b      	ldr	r3, [r3, #8]
 80086b8:	051b      	lsls	r3, r3, #20
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	4313      	orrs	r3, r2
 80086be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	4a19      	ldr	r2, [pc, #100]	@ (8008728 <TIM_OC6_SetConfig+0xb8>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d00f      	beq.n	80086e8 <TIM_OC6_SetConfig+0x78>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	4a18      	ldr	r2, [pc, #96]	@ (800872c <TIM_OC6_SetConfig+0xbc>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d00b      	beq.n	80086e8 <TIM_OC6_SetConfig+0x78>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a17      	ldr	r2, [pc, #92]	@ (8008730 <TIM_OC6_SetConfig+0xc0>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d007      	beq.n	80086e8 <TIM_OC6_SetConfig+0x78>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a16      	ldr	r2, [pc, #88]	@ (8008734 <TIM_OC6_SetConfig+0xc4>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d003      	beq.n	80086e8 <TIM_OC6_SetConfig+0x78>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a15      	ldr	r2, [pc, #84]	@ (8008738 <TIM_OC6_SetConfig+0xc8>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d109      	bne.n	80086fc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80086ee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	695b      	ldr	r3, [r3, #20]
 80086f4:	029b      	lsls	r3, r3, #10
 80086f6:	697a      	ldr	r2, [r7, #20]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	68fa      	ldr	r2, [r7, #12]
 8008706:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	621a      	str	r2, [r3, #32]
}
 8008716:	bf00      	nop
 8008718:	371c      	adds	r7, #28
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	feff8fff 	.word	0xfeff8fff
 8008728:	40010000 	.word	0x40010000
 800872c:	40010400 	.word	0x40010400
 8008730:	40014000 	.word	0x40014000
 8008734:	40014400 	.word	0x40014400
 8008738:	40014800 	.word	0x40014800

0800873c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b086      	sub	sp, #24
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	4b65      	ldr	r3, [pc, #404]	@ (80088ec <TIM_SlaveTimer_SetConfig+0x1b0>)
 8008756:	4013      	ands	r3, r2
 8008758:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	693a      	ldr	r2, [r7, #16]
 8008760:	4313      	orrs	r3, r2
 8008762:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	4b62      	ldr	r3, [pc, #392]	@ (80088f0 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008768:	4013      	ands	r3, r2
 800876a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	4313      	orrs	r3, r2
 8008774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	693a      	ldr	r2, [r7, #16]
 800877c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	4a5c      	ldr	r2, [pc, #368]	@ (80088f4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008784:	4293      	cmp	r3, r2
 8008786:	f000 80ab 	beq.w	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800878a:	4a5a      	ldr	r2, [pc, #360]	@ (80088f4 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800878c:	4293      	cmp	r3, r2
 800878e:	f200 80a4 	bhi.w	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 8008792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008796:	f000 80a3 	beq.w	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800879a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800879e:	f200 809c 	bhi.w	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 80087a2:	4a55      	ldr	r2, [pc, #340]	@ (80088f8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	f000 809b 	beq.w	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087aa:	4a53      	ldr	r2, [pc, #332]	@ (80088f8 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	f200 8094 	bhi.w	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 80087b2:	4a52      	ldr	r2, [pc, #328]	@ (80088fc <TIM_SlaveTimer_SetConfig+0x1c0>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	f000 8093 	beq.w	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087ba:	4a50      	ldr	r2, [pc, #320]	@ (80088fc <TIM_SlaveTimer_SetConfig+0x1c0>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	f200 808c 	bhi.w	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 80087c2:	4a4f      	ldr	r2, [pc, #316]	@ (8008900 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	f000 808b 	beq.w	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087ca:	4a4d      	ldr	r2, [pc, #308]	@ (8008900 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	f200 8084 	bhi.w	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 80087d2:	4a4c      	ldr	r2, [pc, #304]	@ (8008904 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	f000 8083 	beq.w	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087da:	4a4a      	ldr	r2, [pc, #296]	@ (8008904 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d87c      	bhi.n	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 80087e0:	4a49      	ldr	r2, [pc, #292]	@ (8008908 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d07c      	beq.n	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087e6:	4a48      	ldr	r2, [pc, #288]	@ (8008908 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d876      	bhi.n	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 80087ec:	4a47      	ldr	r2, [pc, #284]	@ (800890c <TIM_SlaveTimer_SetConfig+0x1d0>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d076      	beq.n	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087f2:	4a46      	ldr	r2, [pc, #280]	@ (800890c <TIM_SlaveTimer_SetConfig+0x1d0>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d870      	bhi.n	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 80087f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80087fc:	d070      	beq.n	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087fe:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008802:	d86a      	bhi.n	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 8008804:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008808:	d06a      	beq.n	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800880a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800880e:	d864      	bhi.n	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 8008810:	2b70      	cmp	r3, #112	@ 0x70
 8008812:	d01a      	beq.n	800884a <TIM_SlaveTimer_SetConfig+0x10e>
 8008814:	2b70      	cmp	r3, #112	@ 0x70
 8008816:	d860      	bhi.n	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 8008818:	2b60      	cmp	r3, #96	@ 0x60
 800881a:	d054      	beq.n	80088c6 <TIM_SlaveTimer_SetConfig+0x18a>
 800881c:	2b60      	cmp	r3, #96	@ 0x60
 800881e:	d85c      	bhi.n	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 8008820:	2b50      	cmp	r3, #80	@ 0x50
 8008822:	d046      	beq.n	80088b2 <TIM_SlaveTimer_SetConfig+0x176>
 8008824:	2b50      	cmp	r3, #80	@ 0x50
 8008826:	d858      	bhi.n	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 8008828:	2b40      	cmp	r3, #64	@ 0x40
 800882a:	d019      	beq.n	8008860 <TIM_SlaveTimer_SetConfig+0x124>
 800882c:	2b40      	cmp	r3, #64	@ 0x40
 800882e:	d854      	bhi.n	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 8008830:	2b30      	cmp	r3, #48	@ 0x30
 8008832:	d055      	beq.n	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008834:	2b30      	cmp	r3, #48	@ 0x30
 8008836:	d850      	bhi.n	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 8008838:	2b20      	cmp	r3, #32
 800883a:	d051      	beq.n	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 800883c:	2b20      	cmp	r3, #32
 800883e:	d84c      	bhi.n	80088da <TIM_SlaveTimer_SetConfig+0x19e>
 8008840:	2b00      	cmp	r3, #0
 8008842:	d04d      	beq.n	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008844:	2b10      	cmp	r3, #16
 8008846:	d04b      	beq.n	80088e0 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008848:	e047      	b.n	80088da <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800885a:	f000 f8d7 	bl	8008a0c <TIM_ETR_SetConfig>
      break;
 800885e:	e040      	b.n	80088e2 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b05      	cmp	r3, #5
 8008866:	d101      	bne.n	800886c <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e03b      	b.n	80088e4 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6a1a      	ldr	r2, [r3, #32]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f022 0201 	bic.w	r2, r2, #1
 8008882:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	699b      	ldr	r3, [r3, #24]
 800888a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008892:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	011b      	lsls	r3, r3, #4
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	4313      	orrs	r3, r2
 800889e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	68ba      	ldr	r2, [r7, #8]
 80088a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68fa      	ldr	r2, [r7, #12]
 80088ae:	621a      	str	r2, [r3, #32]
      break;
 80088b0:	e017      	b.n	80088e2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088be:	461a      	mov	r2, r3
 80088c0:	f000 f826 	bl	8008910 <TIM_TI1_ConfigInputStage>
      break;
 80088c4:	e00d      	b.n	80088e2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80088d2:	461a      	mov	r2, r3
 80088d4:	f000 f84b 	bl	800896e <TIM_TI2_ConfigInputStage>
      break;
 80088d8:	e003      	b.n	80088e2 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	75fb      	strb	r3, [r7, #23]
      break;
 80088de:	e000      	b.n	80088e2 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80088e0:	bf00      	nop
  }

  return status;
 80088e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	3718      	adds	r7, #24
 80088e8:	46bd      	mov	sp, r7
 80088ea:	bd80      	pop	{r7, pc}
 80088ec:	ffcfff8f 	.word	0xffcfff8f
 80088f0:	fffefff8 	.word	0xfffefff8
 80088f4:	00200010 	.word	0x00200010
 80088f8:	00100070 	.word	0x00100070
 80088fc:	00100060 	.word	0x00100060
 8008900:	00100050 	.word	0x00100050
 8008904:	00100040 	.word	0x00100040
 8008908:	00100030 	.word	0x00100030
 800890c:	00100020 	.word	0x00100020

08008910 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6a1b      	ldr	r3, [r3, #32]
 8008920:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	f023 0201 	bic.w	r2, r3, #1
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	699b      	ldr	r3, [r3, #24]
 8008932:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800893a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	011b      	lsls	r3, r3, #4
 8008940:	693a      	ldr	r2, [r7, #16]
 8008942:	4313      	orrs	r3, r2
 8008944:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	f023 030a 	bic.w	r3, r3, #10
 800894c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4313      	orrs	r3, r2
 8008954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	693a      	ldr	r2, [r7, #16]
 800895a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	621a      	str	r2, [r3, #32]
}
 8008962:	bf00      	nop
 8008964:	371c      	adds	r7, #28
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800896e:	b480      	push	{r7}
 8008970:	b087      	sub	sp, #28
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	6a1b      	ldr	r3, [r3, #32]
 800897e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	f023 0210 	bic.w	r2, r3, #16
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008998:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	031b      	lsls	r3, r3, #12
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	4313      	orrs	r3, r2
 80089a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80089aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	011b      	lsls	r3, r3, #4
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	621a      	str	r2, [r3, #32]
}
 80089c2:	bf00      	nop
 80089c4:	371c      	adds	r7, #28
 80089c6:	46bd      	mov	sp, r7
 80089c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089cc:	4770      	bx	lr
	...

080089d0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089e0:	68fa      	ldr	r2, [r7, #12]
 80089e2:	4b09      	ldr	r3, [pc, #36]	@ (8008a08 <TIM_ITRx_SetConfig+0x38>)
 80089e4:	4013      	ands	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	f043 0307 	orr.w	r3, r3, #7
 80089f2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	609a      	str	r2, [r3, #8]
}
 80089fa:	bf00      	nop
 80089fc:	3714      	adds	r7, #20
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	ffcfff8f 	.word	0xffcfff8f

08008a0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b087      	sub	sp, #28
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	607a      	str	r2, [r7, #4]
 8008a18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	021a      	lsls	r2, r3, #8
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	431a      	orrs	r2, r3
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	4313      	orrs	r3, r2
 8008a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	697a      	ldr	r2, [r7, #20]
 8008a3e:	609a      	str	r2, [r3, #8]
}
 8008a40:	bf00      	nop
 8008a42:	371c      	adds	r7, #28
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr

08008a4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b087      	sub	sp, #28
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	60f8      	str	r0, [r7, #12]
 8008a54:	60b9      	str	r1, [r7, #8]
 8008a56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f003 031f 	and.w	r3, r3, #31
 8008a5e:	2201      	movs	r2, #1
 8008a60:	fa02 f303 	lsl.w	r3, r2, r3
 8008a64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	6a1a      	ldr	r2, [r3, #32]
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	43db      	mvns	r3, r3
 8008a6e:	401a      	ands	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6a1a      	ldr	r2, [r3, #32]
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f003 031f 	and.w	r3, r3, #31
 8008a7e:	6879      	ldr	r1, [r7, #4]
 8008a80:	fa01 f303 	lsl.w	r3, r1, r3
 8008a84:	431a      	orrs	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	621a      	str	r2, [r3, #32]
}
 8008a8a:	bf00      	nop
 8008a8c:	371c      	adds	r7, #28
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
	...

08008a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d101      	bne.n	8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008aac:	2302      	movs	r3, #2
 8008aae:	e06d      	b.n	8008b8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2202      	movs	r2, #2
 8008abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4a30      	ldr	r2, [pc, #192]	@ (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d004      	beq.n	8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a2f      	ldr	r2, [pc, #188]	@ (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d108      	bne.n	8008af6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008aea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	68fa      	ldr	r2, [r7, #12]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008afc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a20      	ldr	r2, [pc, #128]	@ (8008b98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d022      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b22:	d01d      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d018      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	4a1c      	ldr	r2, [pc, #112]	@ (8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d013      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a1a      	ldr	r2, [pc, #104]	@ (8008ba8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d00e      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a15      	ldr	r2, [pc, #84]	@ (8008b9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d009      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a16      	ldr	r2, [pc, #88]	@ (8008bac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d004      	beq.n	8008b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a15      	ldr	r2, [pc, #84]	@ (8008bb0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d10c      	bne.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	68ba      	ldr	r2, [r7, #8]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr
 8008b98:	40010000 	.word	0x40010000
 8008b9c:	40010400 	.word	0x40010400
 8008ba0:	40000400 	.word	0x40000400
 8008ba4:	40000800 	.word	0x40000800
 8008ba8:	40000c00 	.word	0x40000c00
 8008bac:	40001800 	.word	0x40001800
 8008bb0:	40014000 	.word	0x40014000

08008bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b083      	sub	sp, #12
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bbc:	bf00      	nop
 8008bbe:	370c      	adds	r7, #12
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc6:	4770      	bx	lr

08008bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008be4:	bf00      	nop
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d101      	bne.n	8008c02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e042      	b.n	8008c88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d106      	bne.n	8008c1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7f9 f88b 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2224      	movs	r2, #36	@ 0x24
 8008c1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681a      	ldr	r2, [r3, #0]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f022 0201 	bic.w	r2, r2, #1
 8008c30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d002      	beq.n	8008c40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fe1e 	bl	800987c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f8b3 	bl	8008dac <UART_SetConfig>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d101      	bne.n	8008c50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	e01b      	b.n	8008c88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	685a      	ldr	r2, [r3, #4]
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689a      	ldr	r2, [r3, #8]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f042 0201 	orr.w	r2, r2, #1
 8008c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fe9d 	bl	80099c0 <UART_CheckIdleState>
 8008c86:	4603      	mov	r3, r0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08a      	sub	sp, #40	@ 0x28
 8008c94:	af02      	add	r7, sp, #8
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ca6:	2b20      	cmp	r3, #32
 8008ca8:	d17b      	bne.n	8008da2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <HAL_UART_Transmit+0x26>
 8008cb0:	88fb      	ldrh	r3, [r7, #6]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e074      	b.n	8008da4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2221      	movs	r2, #33	@ 0x21
 8008cc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008cca:	f7f9 fa09 	bl	80020e0 <HAL_GetTick>
 8008cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	88fa      	ldrh	r2, [r7, #6]
 8008cd4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	88fa      	ldrh	r2, [r7, #6]
 8008cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ce8:	d108      	bne.n	8008cfc <HAL_UART_Transmit+0x6c>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d104      	bne.n	8008cfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	61bb      	str	r3, [r7, #24]
 8008cfa:	e003      	b.n	8008d04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d04:	e030      	b.n	8008d68 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	9300      	str	r3, [sp, #0]
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2180      	movs	r1, #128	@ 0x80
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f000 feff 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 8008d16:	4603      	mov	r3, r0
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d005      	beq.n	8008d28 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2220      	movs	r2, #32
 8008d20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e03d      	b.n	8008da4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10b      	bne.n	8008d46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d2e:	69bb      	ldr	r3, [r7, #24]
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	3302      	adds	r3, #2
 8008d42:	61bb      	str	r3, [r7, #24]
 8008d44:	e007      	b.n	8008d56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d46:	69fb      	ldr	r3, [r7, #28]
 8008d48:	781a      	ldrb	r2, [r3, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	3301      	adds	r3, #1
 8008d54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1c8      	bne.n	8008d06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	9300      	str	r3, [sp, #0]
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2140      	movs	r1, #64	@ 0x40
 8008d7e:	68f8      	ldr	r0, [r7, #12]
 8008d80:	f000 fec8 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2220      	movs	r2, #32
 8008d8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e006      	b.n	8008da4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2220      	movs	r2, #32
 8008d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e000      	b.n	8008da4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008da2:	2302      	movs	r3, #2
  }
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3720      	adds	r7, #32
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008db0:	b092      	sub	sp, #72	@ 0x48
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	689a      	ldr	r2, [r3, #8]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	431a      	orrs	r2, r3
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	695b      	ldr	r3, [r3, #20]
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	69db      	ldr	r3, [r3, #28]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	681a      	ldr	r2, [r3, #0]
 8008dda:	4bbe      	ldr	r3, [pc, #760]	@ (80090d4 <UART_SetConfig+0x328>)
 8008ddc:	4013      	ands	r3, r2
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	6812      	ldr	r2, [r2, #0]
 8008de2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008de4:	430b      	orrs	r3, r1
 8008de6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4ab3      	ldr	r2, [pc, #716]	@ (80090d8 <UART_SetConfig+0x32c>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d004      	beq.n	8008e18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	6a1b      	ldr	r3, [r3, #32]
 8008e12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e14:	4313      	orrs	r3, r2
 8008e16:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	689a      	ldr	r2, [r3, #8]
 8008e1e:	4baf      	ldr	r3, [pc, #700]	@ (80090dc <UART_SetConfig+0x330>)
 8008e20:	4013      	ands	r3, r2
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	6812      	ldr	r2, [r2, #0]
 8008e26:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e28:	430b      	orrs	r3, r1
 8008e2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e32:	f023 010f 	bic.w	r1, r3, #15
 8008e36:	697b      	ldr	r3, [r7, #20]
 8008e38:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	430a      	orrs	r2, r1
 8008e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4aa6      	ldr	r2, [pc, #664]	@ (80090e0 <UART_SetConfig+0x334>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d177      	bne.n	8008f3c <UART_SetConfig+0x190>
 8008e4c:	4ba5      	ldr	r3, [pc, #660]	@ (80090e4 <UART_SetConfig+0x338>)
 8008e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e50:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e54:	2b28      	cmp	r3, #40	@ 0x28
 8008e56:	d86d      	bhi.n	8008f34 <UART_SetConfig+0x188>
 8008e58:	a201      	add	r2, pc, #4	@ (adr r2, 8008e60 <UART_SetConfig+0xb4>)
 8008e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5e:	bf00      	nop
 8008e60:	08008f05 	.word	0x08008f05
 8008e64:	08008f35 	.word	0x08008f35
 8008e68:	08008f35 	.word	0x08008f35
 8008e6c:	08008f35 	.word	0x08008f35
 8008e70:	08008f35 	.word	0x08008f35
 8008e74:	08008f35 	.word	0x08008f35
 8008e78:	08008f35 	.word	0x08008f35
 8008e7c:	08008f35 	.word	0x08008f35
 8008e80:	08008f0d 	.word	0x08008f0d
 8008e84:	08008f35 	.word	0x08008f35
 8008e88:	08008f35 	.word	0x08008f35
 8008e8c:	08008f35 	.word	0x08008f35
 8008e90:	08008f35 	.word	0x08008f35
 8008e94:	08008f35 	.word	0x08008f35
 8008e98:	08008f35 	.word	0x08008f35
 8008e9c:	08008f35 	.word	0x08008f35
 8008ea0:	08008f15 	.word	0x08008f15
 8008ea4:	08008f35 	.word	0x08008f35
 8008ea8:	08008f35 	.word	0x08008f35
 8008eac:	08008f35 	.word	0x08008f35
 8008eb0:	08008f35 	.word	0x08008f35
 8008eb4:	08008f35 	.word	0x08008f35
 8008eb8:	08008f35 	.word	0x08008f35
 8008ebc:	08008f35 	.word	0x08008f35
 8008ec0:	08008f1d 	.word	0x08008f1d
 8008ec4:	08008f35 	.word	0x08008f35
 8008ec8:	08008f35 	.word	0x08008f35
 8008ecc:	08008f35 	.word	0x08008f35
 8008ed0:	08008f35 	.word	0x08008f35
 8008ed4:	08008f35 	.word	0x08008f35
 8008ed8:	08008f35 	.word	0x08008f35
 8008edc:	08008f35 	.word	0x08008f35
 8008ee0:	08008f25 	.word	0x08008f25
 8008ee4:	08008f35 	.word	0x08008f35
 8008ee8:	08008f35 	.word	0x08008f35
 8008eec:	08008f35 	.word	0x08008f35
 8008ef0:	08008f35 	.word	0x08008f35
 8008ef4:	08008f35 	.word	0x08008f35
 8008ef8:	08008f35 	.word	0x08008f35
 8008efc:	08008f35 	.word	0x08008f35
 8008f00:	08008f2d 	.word	0x08008f2d
 8008f04:	2301      	movs	r3, #1
 8008f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0a:	e222      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008f0c:	2304      	movs	r3, #4
 8008f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f12:	e21e      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008f14:	2308      	movs	r3, #8
 8008f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f1a:	e21a      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008f1c:	2310      	movs	r3, #16
 8008f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f22:	e216      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008f24:	2320      	movs	r3, #32
 8008f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f2a:	e212      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008f2c:	2340      	movs	r3, #64	@ 0x40
 8008f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f32:	e20e      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008f34:	2380      	movs	r3, #128	@ 0x80
 8008f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f3a:	e20a      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a69      	ldr	r2, [pc, #420]	@ (80090e8 <UART_SetConfig+0x33c>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d130      	bne.n	8008fa8 <UART_SetConfig+0x1fc>
 8008f46:	4b67      	ldr	r3, [pc, #412]	@ (80090e4 <UART_SetConfig+0x338>)
 8008f48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f4a:	f003 0307 	and.w	r3, r3, #7
 8008f4e:	2b05      	cmp	r3, #5
 8008f50:	d826      	bhi.n	8008fa0 <UART_SetConfig+0x1f4>
 8008f52:	a201      	add	r2, pc, #4	@ (adr r2, 8008f58 <UART_SetConfig+0x1ac>)
 8008f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f58:	08008f71 	.word	0x08008f71
 8008f5c:	08008f79 	.word	0x08008f79
 8008f60:	08008f81 	.word	0x08008f81
 8008f64:	08008f89 	.word	0x08008f89
 8008f68:	08008f91 	.word	0x08008f91
 8008f6c:	08008f99 	.word	0x08008f99
 8008f70:	2300      	movs	r3, #0
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f76:	e1ec      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008f78:	2304      	movs	r3, #4
 8008f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7e:	e1e8      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008f80:	2308      	movs	r3, #8
 8008f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f86:	e1e4      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008f88:	2310      	movs	r3, #16
 8008f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8e:	e1e0      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008f90:	2320      	movs	r3, #32
 8008f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f96:	e1dc      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008f98:	2340      	movs	r3, #64	@ 0x40
 8008f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9e:	e1d8      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008fa0:	2380      	movs	r3, #128	@ 0x80
 8008fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fa6:	e1d4      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a4f      	ldr	r2, [pc, #316]	@ (80090ec <UART_SetConfig+0x340>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d130      	bne.n	8009014 <UART_SetConfig+0x268>
 8008fb2:	4b4c      	ldr	r3, [pc, #304]	@ (80090e4 <UART_SetConfig+0x338>)
 8008fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fb6:	f003 0307 	and.w	r3, r3, #7
 8008fba:	2b05      	cmp	r3, #5
 8008fbc:	d826      	bhi.n	800900c <UART_SetConfig+0x260>
 8008fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8008fc4 <UART_SetConfig+0x218>)
 8008fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc4:	08008fdd 	.word	0x08008fdd
 8008fc8:	08008fe5 	.word	0x08008fe5
 8008fcc:	08008fed 	.word	0x08008fed
 8008fd0:	08008ff5 	.word	0x08008ff5
 8008fd4:	08008ffd 	.word	0x08008ffd
 8008fd8:	08009005 	.word	0x08009005
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe2:	e1b6      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008fe4:	2304      	movs	r3, #4
 8008fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fea:	e1b2      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008fec:	2308      	movs	r3, #8
 8008fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff2:	e1ae      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008ff4:	2310      	movs	r3, #16
 8008ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffa:	e1aa      	b.n	8009352 <UART_SetConfig+0x5a6>
 8008ffc:	2320      	movs	r3, #32
 8008ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009002:	e1a6      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009004:	2340      	movs	r3, #64	@ 0x40
 8009006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900a:	e1a2      	b.n	8009352 <UART_SetConfig+0x5a6>
 800900c:	2380      	movs	r3, #128	@ 0x80
 800900e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009012:	e19e      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a35      	ldr	r2, [pc, #212]	@ (80090f0 <UART_SetConfig+0x344>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d130      	bne.n	8009080 <UART_SetConfig+0x2d4>
 800901e:	4b31      	ldr	r3, [pc, #196]	@ (80090e4 <UART_SetConfig+0x338>)
 8009020:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	2b05      	cmp	r3, #5
 8009028:	d826      	bhi.n	8009078 <UART_SetConfig+0x2cc>
 800902a:	a201      	add	r2, pc, #4	@ (adr r2, 8009030 <UART_SetConfig+0x284>)
 800902c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009030:	08009049 	.word	0x08009049
 8009034:	08009051 	.word	0x08009051
 8009038:	08009059 	.word	0x08009059
 800903c:	08009061 	.word	0x08009061
 8009040:	08009069 	.word	0x08009069
 8009044:	08009071 	.word	0x08009071
 8009048:	2300      	movs	r3, #0
 800904a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904e:	e180      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009050:	2304      	movs	r3, #4
 8009052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009056:	e17c      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009058:	2308      	movs	r3, #8
 800905a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905e:	e178      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009060:	2310      	movs	r3, #16
 8009062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009066:	e174      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009068:	2320      	movs	r3, #32
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906e:	e170      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009070:	2340      	movs	r3, #64	@ 0x40
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009076:	e16c      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009078:	2380      	movs	r3, #128	@ 0x80
 800907a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800907e:	e168      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a1b      	ldr	r2, [pc, #108]	@ (80090f4 <UART_SetConfig+0x348>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d142      	bne.n	8009110 <UART_SetConfig+0x364>
 800908a:	4b16      	ldr	r3, [pc, #88]	@ (80090e4 <UART_SetConfig+0x338>)
 800908c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800908e:	f003 0307 	and.w	r3, r3, #7
 8009092:	2b05      	cmp	r3, #5
 8009094:	d838      	bhi.n	8009108 <UART_SetConfig+0x35c>
 8009096:	a201      	add	r2, pc, #4	@ (adr r2, 800909c <UART_SetConfig+0x2f0>)
 8009098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909c:	080090b5 	.word	0x080090b5
 80090a0:	080090bd 	.word	0x080090bd
 80090a4:	080090c5 	.word	0x080090c5
 80090a8:	080090cd 	.word	0x080090cd
 80090ac:	080090f9 	.word	0x080090f9
 80090b0:	08009101 	.word	0x08009101
 80090b4:	2300      	movs	r3, #0
 80090b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ba:	e14a      	b.n	8009352 <UART_SetConfig+0x5a6>
 80090bc:	2304      	movs	r3, #4
 80090be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c2:	e146      	b.n	8009352 <UART_SetConfig+0x5a6>
 80090c4:	2308      	movs	r3, #8
 80090c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ca:	e142      	b.n	8009352 <UART_SetConfig+0x5a6>
 80090cc:	2310      	movs	r3, #16
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d2:	e13e      	b.n	8009352 <UART_SetConfig+0x5a6>
 80090d4:	cfff69f3 	.word	0xcfff69f3
 80090d8:	58000c00 	.word	0x58000c00
 80090dc:	11fff4ff 	.word	0x11fff4ff
 80090e0:	40011000 	.word	0x40011000
 80090e4:	58024400 	.word	0x58024400
 80090e8:	40004400 	.word	0x40004400
 80090ec:	40004800 	.word	0x40004800
 80090f0:	40004c00 	.word	0x40004c00
 80090f4:	40005000 	.word	0x40005000
 80090f8:	2320      	movs	r3, #32
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090fe:	e128      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009100:	2340      	movs	r3, #64	@ 0x40
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009106:	e124      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009108:	2380      	movs	r3, #128	@ 0x80
 800910a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800910e:	e120      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4acb      	ldr	r2, [pc, #812]	@ (8009444 <UART_SetConfig+0x698>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d176      	bne.n	8009208 <UART_SetConfig+0x45c>
 800911a:	4bcb      	ldr	r3, [pc, #812]	@ (8009448 <UART_SetConfig+0x69c>)
 800911c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800911e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009122:	2b28      	cmp	r3, #40	@ 0x28
 8009124:	d86c      	bhi.n	8009200 <UART_SetConfig+0x454>
 8009126:	a201      	add	r2, pc, #4	@ (adr r2, 800912c <UART_SetConfig+0x380>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	080091d1 	.word	0x080091d1
 8009130:	08009201 	.word	0x08009201
 8009134:	08009201 	.word	0x08009201
 8009138:	08009201 	.word	0x08009201
 800913c:	08009201 	.word	0x08009201
 8009140:	08009201 	.word	0x08009201
 8009144:	08009201 	.word	0x08009201
 8009148:	08009201 	.word	0x08009201
 800914c:	080091d9 	.word	0x080091d9
 8009150:	08009201 	.word	0x08009201
 8009154:	08009201 	.word	0x08009201
 8009158:	08009201 	.word	0x08009201
 800915c:	08009201 	.word	0x08009201
 8009160:	08009201 	.word	0x08009201
 8009164:	08009201 	.word	0x08009201
 8009168:	08009201 	.word	0x08009201
 800916c:	080091e1 	.word	0x080091e1
 8009170:	08009201 	.word	0x08009201
 8009174:	08009201 	.word	0x08009201
 8009178:	08009201 	.word	0x08009201
 800917c:	08009201 	.word	0x08009201
 8009180:	08009201 	.word	0x08009201
 8009184:	08009201 	.word	0x08009201
 8009188:	08009201 	.word	0x08009201
 800918c:	080091e9 	.word	0x080091e9
 8009190:	08009201 	.word	0x08009201
 8009194:	08009201 	.word	0x08009201
 8009198:	08009201 	.word	0x08009201
 800919c:	08009201 	.word	0x08009201
 80091a0:	08009201 	.word	0x08009201
 80091a4:	08009201 	.word	0x08009201
 80091a8:	08009201 	.word	0x08009201
 80091ac:	080091f1 	.word	0x080091f1
 80091b0:	08009201 	.word	0x08009201
 80091b4:	08009201 	.word	0x08009201
 80091b8:	08009201 	.word	0x08009201
 80091bc:	08009201 	.word	0x08009201
 80091c0:	08009201 	.word	0x08009201
 80091c4:	08009201 	.word	0x08009201
 80091c8:	08009201 	.word	0x08009201
 80091cc:	080091f9 	.word	0x080091f9
 80091d0:	2301      	movs	r3, #1
 80091d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091d6:	e0bc      	b.n	8009352 <UART_SetConfig+0x5a6>
 80091d8:	2304      	movs	r3, #4
 80091da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091de:	e0b8      	b.n	8009352 <UART_SetConfig+0x5a6>
 80091e0:	2308      	movs	r3, #8
 80091e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091e6:	e0b4      	b.n	8009352 <UART_SetConfig+0x5a6>
 80091e8:	2310      	movs	r3, #16
 80091ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091ee:	e0b0      	b.n	8009352 <UART_SetConfig+0x5a6>
 80091f0:	2320      	movs	r3, #32
 80091f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091f6:	e0ac      	b.n	8009352 <UART_SetConfig+0x5a6>
 80091f8:	2340      	movs	r3, #64	@ 0x40
 80091fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80091fe:	e0a8      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009200:	2380      	movs	r3, #128	@ 0x80
 8009202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009206:	e0a4      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a8f      	ldr	r2, [pc, #572]	@ (800944c <UART_SetConfig+0x6a0>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d130      	bne.n	8009274 <UART_SetConfig+0x4c8>
 8009212:	4b8d      	ldr	r3, [pc, #564]	@ (8009448 <UART_SetConfig+0x69c>)
 8009214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009216:	f003 0307 	and.w	r3, r3, #7
 800921a:	2b05      	cmp	r3, #5
 800921c:	d826      	bhi.n	800926c <UART_SetConfig+0x4c0>
 800921e:	a201      	add	r2, pc, #4	@ (adr r2, 8009224 <UART_SetConfig+0x478>)
 8009220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009224:	0800923d 	.word	0x0800923d
 8009228:	08009245 	.word	0x08009245
 800922c:	0800924d 	.word	0x0800924d
 8009230:	08009255 	.word	0x08009255
 8009234:	0800925d 	.word	0x0800925d
 8009238:	08009265 	.word	0x08009265
 800923c:	2300      	movs	r3, #0
 800923e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009242:	e086      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009244:	2304      	movs	r3, #4
 8009246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800924a:	e082      	b.n	8009352 <UART_SetConfig+0x5a6>
 800924c:	2308      	movs	r3, #8
 800924e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009252:	e07e      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009254:	2310      	movs	r3, #16
 8009256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925a:	e07a      	b.n	8009352 <UART_SetConfig+0x5a6>
 800925c:	2320      	movs	r3, #32
 800925e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009262:	e076      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009264:	2340      	movs	r3, #64	@ 0x40
 8009266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800926a:	e072      	b.n	8009352 <UART_SetConfig+0x5a6>
 800926c:	2380      	movs	r3, #128	@ 0x80
 800926e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009272:	e06e      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a75      	ldr	r2, [pc, #468]	@ (8009450 <UART_SetConfig+0x6a4>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d130      	bne.n	80092e0 <UART_SetConfig+0x534>
 800927e:	4b72      	ldr	r3, [pc, #456]	@ (8009448 <UART_SetConfig+0x69c>)
 8009280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009282:	f003 0307 	and.w	r3, r3, #7
 8009286:	2b05      	cmp	r3, #5
 8009288:	d826      	bhi.n	80092d8 <UART_SetConfig+0x52c>
 800928a:	a201      	add	r2, pc, #4	@ (adr r2, 8009290 <UART_SetConfig+0x4e4>)
 800928c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009290:	080092a9 	.word	0x080092a9
 8009294:	080092b1 	.word	0x080092b1
 8009298:	080092b9 	.word	0x080092b9
 800929c:	080092c1 	.word	0x080092c1
 80092a0:	080092c9 	.word	0x080092c9
 80092a4:	080092d1 	.word	0x080092d1
 80092a8:	2300      	movs	r3, #0
 80092aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ae:	e050      	b.n	8009352 <UART_SetConfig+0x5a6>
 80092b0:	2304      	movs	r3, #4
 80092b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092b6:	e04c      	b.n	8009352 <UART_SetConfig+0x5a6>
 80092b8:	2308      	movs	r3, #8
 80092ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092be:	e048      	b.n	8009352 <UART_SetConfig+0x5a6>
 80092c0:	2310      	movs	r3, #16
 80092c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092c6:	e044      	b.n	8009352 <UART_SetConfig+0x5a6>
 80092c8:	2320      	movs	r3, #32
 80092ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ce:	e040      	b.n	8009352 <UART_SetConfig+0x5a6>
 80092d0:	2340      	movs	r3, #64	@ 0x40
 80092d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092d6:	e03c      	b.n	8009352 <UART_SetConfig+0x5a6>
 80092d8:	2380      	movs	r3, #128	@ 0x80
 80092da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092de:	e038      	b.n	8009352 <UART_SetConfig+0x5a6>
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a5b      	ldr	r2, [pc, #364]	@ (8009454 <UART_SetConfig+0x6a8>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d130      	bne.n	800934c <UART_SetConfig+0x5a0>
 80092ea:	4b57      	ldr	r3, [pc, #348]	@ (8009448 <UART_SetConfig+0x69c>)
 80092ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ee:	f003 0307 	and.w	r3, r3, #7
 80092f2:	2b05      	cmp	r3, #5
 80092f4:	d826      	bhi.n	8009344 <UART_SetConfig+0x598>
 80092f6:	a201      	add	r2, pc, #4	@ (adr r2, 80092fc <UART_SetConfig+0x550>)
 80092f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092fc:	08009315 	.word	0x08009315
 8009300:	0800931d 	.word	0x0800931d
 8009304:	08009325 	.word	0x08009325
 8009308:	0800932d 	.word	0x0800932d
 800930c:	08009335 	.word	0x08009335
 8009310:	0800933d 	.word	0x0800933d
 8009314:	2302      	movs	r3, #2
 8009316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931a:	e01a      	b.n	8009352 <UART_SetConfig+0x5a6>
 800931c:	2304      	movs	r3, #4
 800931e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009322:	e016      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009324:	2308      	movs	r3, #8
 8009326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932a:	e012      	b.n	8009352 <UART_SetConfig+0x5a6>
 800932c:	2310      	movs	r3, #16
 800932e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009332:	e00e      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009334:	2320      	movs	r3, #32
 8009336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933a:	e00a      	b.n	8009352 <UART_SetConfig+0x5a6>
 800933c:	2340      	movs	r3, #64	@ 0x40
 800933e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009342:	e006      	b.n	8009352 <UART_SetConfig+0x5a6>
 8009344:	2380      	movs	r3, #128	@ 0x80
 8009346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800934a:	e002      	b.n	8009352 <UART_SetConfig+0x5a6>
 800934c:	2380      	movs	r3, #128	@ 0x80
 800934e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4a3f      	ldr	r2, [pc, #252]	@ (8009454 <UART_SetConfig+0x6a8>)
 8009358:	4293      	cmp	r3, r2
 800935a:	f040 80f8 	bne.w	800954e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800935e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009362:	2b20      	cmp	r3, #32
 8009364:	dc46      	bgt.n	80093f4 <UART_SetConfig+0x648>
 8009366:	2b02      	cmp	r3, #2
 8009368:	f2c0 8082 	blt.w	8009470 <UART_SetConfig+0x6c4>
 800936c:	3b02      	subs	r3, #2
 800936e:	2b1e      	cmp	r3, #30
 8009370:	d87e      	bhi.n	8009470 <UART_SetConfig+0x6c4>
 8009372:	a201      	add	r2, pc, #4	@ (adr r2, 8009378 <UART_SetConfig+0x5cc>)
 8009374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009378:	080093fb 	.word	0x080093fb
 800937c:	08009471 	.word	0x08009471
 8009380:	08009403 	.word	0x08009403
 8009384:	08009471 	.word	0x08009471
 8009388:	08009471 	.word	0x08009471
 800938c:	08009471 	.word	0x08009471
 8009390:	08009413 	.word	0x08009413
 8009394:	08009471 	.word	0x08009471
 8009398:	08009471 	.word	0x08009471
 800939c:	08009471 	.word	0x08009471
 80093a0:	08009471 	.word	0x08009471
 80093a4:	08009471 	.word	0x08009471
 80093a8:	08009471 	.word	0x08009471
 80093ac:	08009471 	.word	0x08009471
 80093b0:	08009423 	.word	0x08009423
 80093b4:	08009471 	.word	0x08009471
 80093b8:	08009471 	.word	0x08009471
 80093bc:	08009471 	.word	0x08009471
 80093c0:	08009471 	.word	0x08009471
 80093c4:	08009471 	.word	0x08009471
 80093c8:	08009471 	.word	0x08009471
 80093cc:	08009471 	.word	0x08009471
 80093d0:	08009471 	.word	0x08009471
 80093d4:	08009471 	.word	0x08009471
 80093d8:	08009471 	.word	0x08009471
 80093dc:	08009471 	.word	0x08009471
 80093e0:	08009471 	.word	0x08009471
 80093e4:	08009471 	.word	0x08009471
 80093e8:	08009471 	.word	0x08009471
 80093ec:	08009471 	.word	0x08009471
 80093f0:	08009463 	.word	0x08009463
 80093f4:	2b40      	cmp	r3, #64	@ 0x40
 80093f6:	d037      	beq.n	8009468 <UART_SetConfig+0x6bc>
 80093f8:	e03a      	b.n	8009470 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80093fa:	f7fd fb73 	bl	8006ae4 <HAL_RCCEx_GetD3PCLK1Freq>
 80093fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009400:	e03c      	b.n	800947c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009402:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009406:	4618      	mov	r0, r3
 8009408:	f7fd fb82 	bl	8006b10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800940c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009410:	e034      	b.n	800947c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009412:	f107 0318 	add.w	r3, r7, #24
 8009416:	4618      	mov	r0, r3
 8009418:	f7fd fcce 	bl	8006db8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800941c:	69fb      	ldr	r3, [r7, #28]
 800941e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009420:	e02c      	b.n	800947c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009422:	4b09      	ldr	r3, [pc, #36]	@ (8009448 <UART_SetConfig+0x69c>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0320 	and.w	r3, r3, #32
 800942a:	2b00      	cmp	r3, #0
 800942c:	d016      	beq.n	800945c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800942e:	4b06      	ldr	r3, [pc, #24]	@ (8009448 <UART_SetConfig+0x69c>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	08db      	lsrs	r3, r3, #3
 8009434:	f003 0303 	and.w	r3, r3, #3
 8009438:	4a07      	ldr	r2, [pc, #28]	@ (8009458 <UART_SetConfig+0x6ac>)
 800943a:	fa22 f303 	lsr.w	r3, r2, r3
 800943e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009440:	e01c      	b.n	800947c <UART_SetConfig+0x6d0>
 8009442:	bf00      	nop
 8009444:	40011400 	.word	0x40011400
 8009448:	58024400 	.word	0x58024400
 800944c:	40007800 	.word	0x40007800
 8009450:	40007c00 	.word	0x40007c00
 8009454:	58000c00 	.word	0x58000c00
 8009458:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800945c:	4b9d      	ldr	r3, [pc, #628]	@ (80096d4 <UART_SetConfig+0x928>)
 800945e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009460:	e00c      	b.n	800947c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009462:	4b9d      	ldr	r3, [pc, #628]	@ (80096d8 <UART_SetConfig+0x92c>)
 8009464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009466:	e009      	b.n	800947c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009468:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800946c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800946e:	e005      	b.n	800947c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009470:	2300      	movs	r3, #0
 8009472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800947a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800947c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 81de 	beq.w	8009840 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009488:	4a94      	ldr	r2, [pc, #592]	@ (80096dc <UART_SetConfig+0x930>)
 800948a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800948e:	461a      	mov	r2, r3
 8009490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009492:	fbb3 f3f2 	udiv	r3, r3, r2
 8009496:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	4613      	mov	r3, r2
 800949e:	005b      	lsls	r3, r3, #1
 80094a0:	4413      	add	r3, r2
 80094a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d305      	bcc.n	80094b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d903      	bls.n	80094bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80094b4:	2301      	movs	r3, #1
 80094b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80094ba:	e1c1      	b.n	8009840 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094be:	2200      	movs	r2, #0
 80094c0:	60bb      	str	r3, [r7, #8]
 80094c2:	60fa      	str	r2, [r7, #12]
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094c8:	4a84      	ldr	r2, [pc, #528]	@ (80096dc <UART_SetConfig+0x930>)
 80094ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	2200      	movs	r2, #0
 80094d2:	603b      	str	r3, [r7, #0]
 80094d4:	607a      	str	r2, [r7, #4]
 80094d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80094de:	f7f6 ff57 	bl	8000390 <__aeabi_uldivmod>
 80094e2:	4602      	mov	r2, r0
 80094e4:	460b      	mov	r3, r1
 80094e6:	4610      	mov	r0, r2
 80094e8:	4619      	mov	r1, r3
 80094ea:	f04f 0200 	mov.w	r2, #0
 80094ee:	f04f 0300 	mov.w	r3, #0
 80094f2:	020b      	lsls	r3, r1, #8
 80094f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094f8:	0202      	lsls	r2, r0, #8
 80094fa:	6979      	ldr	r1, [r7, #20]
 80094fc:	6849      	ldr	r1, [r1, #4]
 80094fe:	0849      	lsrs	r1, r1, #1
 8009500:	2000      	movs	r0, #0
 8009502:	460c      	mov	r4, r1
 8009504:	4605      	mov	r5, r0
 8009506:	eb12 0804 	adds.w	r8, r2, r4
 800950a:	eb43 0905 	adc.w	r9, r3, r5
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	469a      	mov	sl, r3
 8009516:	4693      	mov	fp, r2
 8009518:	4652      	mov	r2, sl
 800951a:	465b      	mov	r3, fp
 800951c:	4640      	mov	r0, r8
 800951e:	4649      	mov	r1, r9
 8009520:	f7f6 ff36 	bl	8000390 <__aeabi_uldivmod>
 8009524:	4602      	mov	r2, r0
 8009526:	460b      	mov	r3, r1
 8009528:	4613      	mov	r3, r2
 800952a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800952c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800952e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009532:	d308      	bcc.n	8009546 <UART_SetConfig+0x79a>
 8009534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800953a:	d204      	bcs.n	8009546 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009542:	60da      	str	r2, [r3, #12]
 8009544:	e17c      	b.n	8009840 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800954c:	e178      	b.n	8009840 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009556:	f040 80c5 	bne.w	80096e4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800955a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800955e:	2b20      	cmp	r3, #32
 8009560:	dc48      	bgt.n	80095f4 <UART_SetConfig+0x848>
 8009562:	2b00      	cmp	r3, #0
 8009564:	db7b      	blt.n	800965e <UART_SetConfig+0x8b2>
 8009566:	2b20      	cmp	r3, #32
 8009568:	d879      	bhi.n	800965e <UART_SetConfig+0x8b2>
 800956a:	a201      	add	r2, pc, #4	@ (adr r2, 8009570 <UART_SetConfig+0x7c4>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	080095fb 	.word	0x080095fb
 8009574:	08009603 	.word	0x08009603
 8009578:	0800965f 	.word	0x0800965f
 800957c:	0800965f 	.word	0x0800965f
 8009580:	0800960b 	.word	0x0800960b
 8009584:	0800965f 	.word	0x0800965f
 8009588:	0800965f 	.word	0x0800965f
 800958c:	0800965f 	.word	0x0800965f
 8009590:	0800961b 	.word	0x0800961b
 8009594:	0800965f 	.word	0x0800965f
 8009598:	0800965f 	.word	0x0800965f
 800959c:	0800965f 	.word	0x0800965f
 80095a0:	0800965f 	.word	0x0800965f
 80095a4:	0800965f 	.word	0x0800965f
 80095a8:	0800965f 	.word	0x0800965f
 80095ac:	0800965f 	.word	0x0800965f
 80095b0:	0800962b 	.word	0x0800962b
 80095b4:	0800965f 	.word	0x0800965f
 80095b8:	0800965f 	.word	0x0800965f
 80095bc:	0800965f 	.word	0x0800965f
 80095c0:	0800965f 	.word	0x0800965f
 80095c4:	0800965f 	.word	0x0800965f
 80095c8:	0800965f 	.word	0x0800965f
 80095cc:	0800965f 	.word	0x0800965f
 80095d0:	0800965f 	.word	0x0800965f
 80095d4:	0800965f 	.word	0x0800965f
 80095d8:	0800965f 	.word	0x0800965f
 80095dc:	0800965f 	.word	0x0800965f
 80095e0:	0800965f 	.word	0x0800965f
 80095e4:	0800965f 	.word	0x0800965f
 80095e8:	0800965f 	.word	0x0800965f
 80095ec:	0800965f 	.word	0x0800965f
 80095f0:	08009651 	.word	0x08009651
 80095f4:	2b40      	cmp	r3, #64	@ 0x40
 80095f6:	d02e      	beq.n	8009656 <UART_SetConfig+0x8aa>
 80095f8:	e031      	b.n	800965e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095fa:	f7fc f83d 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 80095fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009600:	e033      	b.n	800966a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009602:	f7fc f84f 	bl	80056a4 <HAL_RCC_GetPCLK2Freq>
 8009606:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009608:	e02f      	b.n	800966a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800960a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800960e:	4618      	mov	r0, r3
 8009610:	f7fd fa7e 	bl	8006b10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009616:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009618:	e027      	b.n	800966a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800961a:	f107 0318 	add.w	r3, r7, #24
 800961e:	4618      	mov	r0, r3
 8009620:	f7fd fbca 	bl	8006db8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009628:	e01f      	b.n	800966a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800962a:	4b2d      	ldr	r3, [pc, #180]	@ (80096e0 <UART_SetConfig+0x934>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 0320 	and.w	r3, r3, #32
 8009632:	2b00      	cmp	r3, #0
 8009634:	d009      	beq.n	800964a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009636:	4b2a      	ldr	r3, [pc, #168]	@ (80096e0 <UART_SetConfig+0x934>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	08db      	lsrs	r3, r3, #3
 800963c:	f003 0303 	and.w	r3, r3, #3
 8009640:	4a24      	ldr	r2, [pc, #144]	@ (80096d4 <UART_SetConfig+0x928>)
 8009642:	fa22 f303 	lsr.w	r3, r2, r3
 8009646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009648:	e00f      	b.n	800966a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800964a:	4b22      	ldr	r3, [pc, #136]	@ (80096d4 <UART_SetConfig+0x928>)
 800964c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800964e:	e00c      	b.n	800966a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009650:	4b21      	ldr	r3, [pc, #132]	@ (80096d8 <UART_SetConfig+0x92c>)
 8009652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009654:	e009      	b.n	800966a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800965a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800965c:	e005      	b.n	800966a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800965e:	2300      	movs	r3, #0
 8009660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009668:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800966a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800966c:	2b00      	cmp	r3, #0
 800966e:	f000 80e7 	beq.w	8009840 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009676:	4a19      	ldr	r2, [pc, #100]	@ (80096dc <UART_SetConfig+0x930>)
 8009678:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800967c:	461a      	mov	r2, r3
 800967e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009680:	fbb3 f3f2 	udiv	r3, r3, r2
 8009684:	005a      	lsls	r2, r3, #1
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	085b      	lsrs	r3, r3, #1
 800968c:	441a      	add	r2, r3
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	fbb2 f3f3 	udiv	r3, r2, r3
 8009696:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800969a:	2b0f      	cmp	r3, #15
 800969c:	d916      	bls.n	80096cc <UART_SetConfig+0x920>
 800969e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80096a4:	d212      	bcs.n	80096cc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80096a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	f023 030f 	bic.w	r3, r3, #15
 80096ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80096b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096b2:	085b      	lsrs	r3, r3, #1
 80096b4:	b29b      	uxth	r3, r3
 80096b6:	f003 0307 	and.w	r3, r3, #7
 80096ba:	b29a      	uxth	r2, r3
 80096bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80096be:	4313      	orrs	r3, r2
 80096c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80096c2:	697b      	ldr	r3, [r7, #20]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80096c8:	60da      	str	r2, [r3, #12]
 80096ca:	e0b9      	b.n	8009840 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80096d2:	e0b5      	b.n	8009840 <UART_SetConfig+0xa94>
 80096d4:	03d09000 	.word	0x03d09000
 80096d8:	003d0900 	.word	0x003d0900
 80096dc:	0800aef8 	.word	0x0800aef8
 80096e0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80096e4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	dc49      	bgt.n	8009780 <UART_SetConfig+0x9d4>
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	db7c      	blt.n	80097ea <UART_SetConfig+0xa3e>
 80096f0:	2b20      	cmp	r3, #32
 80096f2:	d87a      	bhi.n	80097ea <UART_SetConfig+0xa3e>
 80096f4:	a201      	add	r2, pc, #4	@ (adr r2, 80096fc <UART_SetConfig+0x950>)
 80096f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fa:	bf00      	nop
 80096fc:	08009787 	.word	0x08009787
 8009700:	0800978f 	.word	0x0800978f
 8009704:	080097eb 	.word	0x080097eb
 8009708:	080097eb 	.word	0x080097eb
 800970c:	08009797 	.word	0x08009797
 8009710:	080097eb 	.word	0x080097eb
 8009714:	080097eb 	.word	0x080097eb
 8009718:	080097eb 	.word	0x080097eb
 800971c:	080097a7 	.word	0x080097a7
 8009720:	080097eb 	.word	0x080097eb
 8009724:	080097eb 	.word	0x080097eb
 8009728:	080097eb 	.word	0x080097eb
 800972c:	080097eb 	.word	0x080097eb
 8009730:	080097eb 	.word	0x080097eb
 8009734:	080097eb 	.word	0x080097eb
 8009738:	080097eb 	.word	0x080097eb
 800973c:	080097b7 	.word	0x080097b7
 8009740:	080097eb 	.word	0x080097eb
 8009744:	080097eb 	.word	0x080097eb
 8009748:	080097eb 	.word	0x080097eb
 800974c:	080097eb 	.word	0x080097eb
 8009750:	080097eb 	.word	0x080097eb
 8009754:	080097eb 	.word	0x080097eb
 8009758:	080097eb 	.word	0x080097eb
 800975c:	080097eb 	.word	0x080097eb
 8009760:	080097eb 	.word	0x080097eb
 8009764:	080097eb 	.word	0x080097eb
 8009768:	080097eb 	.word	0x080097eb
 800976c:	080097eb 	.word	0x080097eb
 8009770:	080097eb 	.word	0x080097eb
 8009774:	080097eb 	.word	0x080097eb
 8009778:	080097eb 	.word	0x080097eb
 800977c:	080097dd 	.word	0x080097dd
 8009780:	2b40      	cmp	r3, #64	@ 0x40
 8009782:	d02e      	beq.n	80097e2 <UART_SetConfig+0xa36>
 8009784:	e031      	b.n	80097ea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009786:	f7fb ff77 	bl	8005678 <HAL_RCC_GetPCLK1Freq>
 800978a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800978c:	e033      	b.n	80097f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800978e:	f7fb ff89 	bl	80056a4 <HAL_RCC_GetPCLK2Freq>
 8009792:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009794:	e02f      	b.n	80097f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800979a:	4618      	mov	r0, r3
 800979c:	f7fd f9b8 	bl	8006b10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80097a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097a4:	e027      	b.n	80097f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80097a6:	f107 0318 	add.w	r3, r7, #24
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7fd fb04 	bl	8006db8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097b4:	e01f      	b.n	80097f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097b6:	4b2d      	ldr	r3, [pc, #180]	@ (800986c <UART_SetConfig+0xac0>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0320 	and.w	r3, r3, #32
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d009      	beq.n	80097d6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80097c2:	4b2a      	ldr	r3, [pc, #168]	@ (800986c <UART_SetConfig+0xac0>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	08db      	lsrs	r3, r3, #3
 80097c8:	f003 0303 	and.w	r3, r3, #3
 80097cc:	4a28      	ldr	r2, [pc, #160]	@ (8009870 <UART_SetConfig+0xac4>)
 80097ce:	fa22 f303 	lsr.w	r3, r2, r3
 80097d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80097d4:	e00f      	b.n	80097f6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80097d6:	4b26      	ldr	r3, [pc, #152]	@ (8009870 <UART_SetConfig+0xac4>)
 80097d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097da:	e00c      	b.n	80097f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80097dc:	4b25      	ldr	r3, [pc, #148]	@ (8009874 <UART_SetConfig+0xac8>)
 80097de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097e0:	e009      	b.n	80097f6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80097e8:	e005      	b.n	80097f6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80097ea:	2300      	movs	r3, #0
 80097ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80097ee:	2301      	movs	r3, #1
 80097f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80097f4:	bf00      	nop
    }

    if (pclk != 0U)
 80097f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d021      	beq.n	8009840 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009800:	4a1d      	ldr	r2, [pc, #116]	@ (8009878 <UART_SetConfig+0xacc>)
 8009802:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009806:	461a      	mov	r2, r3
 8009808:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800980a:	fbb3 f2f2 	udiv	r2, r3, r2
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	085b      	lsrs	r3, r3, #1
 8009814:	441a      	add	r2, r3
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	fbb2 f3f3 	udiv	r3, r2, r3
 800981e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009822:	2b0f      	cmp	r3, #15
 8009824:	d909      	bls.n	800983a <UART_SetConfig+0xa8e>
 8009826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800982c:	d205      	bcs.n	800983a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800982e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009830:	b29a      	uxth	r2, r3
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	60da      	str	r2, [r3, #12]
 8009838:	e002      	b.n	8009840 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	2201      	movs	r2, #1
 8009844:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2201      	movs	r2, #1
 800984c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	2200      	movs	r2, #0
 8009854:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2200      	movs	r2, #0
 800985a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800985c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009860:	4618      	mov	r0, r3
 8009862:	3748      	adds	r7, #72	@ 0x48
 8009864:	46bd      	mov	sp, r7
 8009866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800986a:	bf00      	nop
 800986c:	58024400 	.word	0x58024400
 8009870:	03d09000 	.word	0x03d09000
 8009874:	003d0900 	.word	0x003d0900
 8009878:	0800aef8 	.word	0x0800aef8

0800987c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009888:	f003 0308 	and.w	r3, r3, #8
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00a      	beq.n	80098a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00a      	beq.n	80098c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	685b      	ldr	r3, [r3, #4]
 80098b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	430a      	orrs	r2, r1
 80098c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098cc:	f003 0302 	and.w	r3, r3, #2
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00a      	beq.n	80098ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	430a      	orrs	r2, r1
 80098e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ee:	f003 0304 	and.w	r3, r3, #4
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	430a      	orrs	r2, r1
 800990a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009910:	f003 0310 	and.w	r3, r3, #16
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00a      	beq.n	800992e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689b      	ldr	r3, [r3, #8]
 800991e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	430a      	orrs	r2, r1
 800992c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009932:	f003 0320 	and.w	r3, r3, #32
 8009936:	2b00      	cmp	r3, #0
 8009938:	d00a      	beq.n	8009950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	430a      	orrs	r2, r1
 800994e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009958:	2b00      	cmp	r3, #0
 800995a:	d01a      	beq.n	8009992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	430a      	orrs	r2, r1
 8009970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800997a:	d10a      	bne.n	8009992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00a      	beq.n	80099b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	430a      	orrs	r2, r1
 80099b2:	605a      	str	r2, [r3, #4]
  }
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b098      	sub	sp, #96	@ 0x60
 80099c4:	af02      	add	r7, sp, #8
 80099c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80099d0:	f7f8 fb86 	bl	80020e0 <HAL_GetTick>
 80099d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0308 	and.w	r3, r3, #8
 80099e0:	2b08      	cmp	r3, #8
 80099e2:	d12f      	bne.n	8009a44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099e8:	9300      	str	r3, [sp, #0]
 80099ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099ec:	2200      	movs	r2, #0
 80099ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 f88e 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d022      	beq.n	8009a44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a06:	e853 3f00 	ldrex	r3, [r3]
 8009a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a24:	e841 2300 	strex	r3, r2, [r1]
 8009a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d1e6      	bne.n	80099fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2220      	movs	r2, #32
 8009a34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a40:	2303      	movs	r3, #3
 8009a42:	e063      	b.n	8009b0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f003 0304 	and.w	r3, r3, #4
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d149      	bne.n	8009ae6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f857 	bl	8009b14 <UART_WaitOnFlagUntilTimeout>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d03c      	beq.n	8009ae6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a74:	e853 3f00 	ldrex	r3, [r3]
 8009a78:	623b      	str	r3, [r7, #32]
   return(result);
 8009a7a:	6a3b      	ldr	r3, [r7, #32]
 8009a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a92:	e841 2300 	strex	r3, r2, [r1]
 8009a96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e6      	bne.n	8009a6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	3308      	adds	r3, #8
 8009aa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	e853 3f00 	ldrex	r3, [r3]
 8009aac:	60fb      	str	r3, [r7, #12]
   return(result);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f023 0301 	bic.w	r3, r3, #1
 8009ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	3308      	adds	r3, #8
 8009abc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009abe:	61fa      	str	r2, [r7, #28]
 8009ac0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac2:	69b9      	ldr	r1, [r7, #24]
 8009ac4:	69fa      	ldr	r2, [r7, #28]
 8009ac6:	e841 2300 	strex	r3, r2, [r1]
 8009aca:	617b      	str	r3, [r7, #20]
   return(result);
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e5      	bne.n	8009a9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2220      	movs	r2, #32
 8009ad6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	e012      	b.n	8009b0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2220      	movs	r2, #32
 8009aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2220      	movs	r2, #32
 8009af2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3758      	adds	r7, #88	@ 0x58
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	603b      	str	r3, [r7, #0]
 8009b20:	4613      	mov	r3, r2
 8009b22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b24:	e04f      	b.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b2c:	d04b      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b2e:	f7f8 fad7 	bl	80020e0 <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	69ba      	ldr	r2, [r7, #24]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d302      	bcc.n	8009b44 <UART_WaitOnFlagUntilTimeout+0x30>
 8009b3e:	69bb      	ldr	r3, [r7, #24]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d101      	bne.n	8009b48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009b44:	2303      	movs	r3, #3
 8009b46:	e04e      	b.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0304 	and.w	r3, r3, #4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d037      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	2b80      	cmp	r3, #128	@ 0x80
 8009b5a:	d034      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	2b40      	cmp	r3, #64	@ 0x40
 8009b60:	d031      	beq.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	69db      	ldr	r3, [r3, #28]
 8009b68:	f003 0308 	and.w	r3, r3, #8
 8009b6c:	2b08      	cmp	r3, #8
 8009b6e:	d110      	bne.n	8009b92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2208      	movs	r2, #8
 8009b76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 f839 	bl	8009bf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2208      	movs	r2, #8
 8009b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e029      	b.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ba0:	d111      	bne.n	8009bc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009baa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f000 f81f 	bl	8009bf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2220      	movs	r2, #32
 8009bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e00f      	b.n	8009be6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69da      	ldr	r2, [r3, #28]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	4013      	ands	r3, r2
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	bf0c      	ite	eq
 8009bd6:	2301      	moveq	r3, #1
 8009bd8:	2300      	movne	r3, #0
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	461a      	mov	r2, r3
 8009bde:	79fb      	ldrb	r3, [r7, #7]
 8009be0:	429a      	cmp	r2, r3
 8009be2:	d0a0      	beq.n	8009b26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009be4:	2300      	movs	r3, #0
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
	...

08009bf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b095      	sub	sp, #84	@ 0x54
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c00:	e853 3f00 	ldrex	r3, [r3]
 8009c04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c16:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c18:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c1e:	e841 2300 	strex	r3, r2, [r1]
 8009c22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d1e6      	bne.n	8009bf8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	3308      	adds	r3, #8
 8009c30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c32:	6a3b      	ldr	r3, [r7, #32]
 8009c34:	e853 3f00 	ldrex	r3, [r3]
 8009c38:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c3a:	69fa      	ldr	r2, [r7, #28]
 8009c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8009cb8 <UART_EndRxTransfer+0xc8>)
 8009c3e:	4013      	ands	r3, r2
 8009c40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3308      	adds	r3, #8
 8009c48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c52:	e841 2300 	strex	r3, r2, [r1]
 8009c56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1e5      	bne.n	8009c2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d118      	bne.n	8009c98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	e853 3f00 	ldrex	r3, [r3]
 8009c72:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f023 0310 	bic.w	r3, r3, #16
 8009c7a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	461a      	mov	r2, r3
 8009c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c84:	61bb      	str	r3, [r7, #24]
 8009c86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c88:	6979      	ldr	r1, [r7, #20]
 8009c8a:	69ba      	ldr	r2, [r7, #24]
 8009c8c:	e841 2300 	strex	r3, r2, [r1]
 8009c90:	613b      	str	r3, [r7, #16]
   return(result);
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d1e6      	bne.n	8009c66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009cac:	bf00      	nop
 8009cae:	3754      	adds	r7, #84	@ 0x54
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr
 8009cb8:	effffffe 	.word	0xeffffffe

08009cbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d101      	bne.n	8009cd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009cce:	2302      	movs	r3, #2
 8009cd0:	e027      	b.n	8009d22 <HAL_UARTEx_DisableFifoMode+0x66>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2201      	movs	r2, #1
 8009cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2224      	movs	r2, #36	@ 0x24
 8009cde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f022 0201 	bic.w	r2, r2, #1
 8009cf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009d00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2200      	movs	r2, #0
 8009d06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2220      	movs	r2, #32
 8009d14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3714      	adds	r7, #20
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b084      	sub	sp, #16
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d101      	bne.n	8009d46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009d42:	2302      	movs	r3, #2
 8009d44:	e02d      	b.n	8009da2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2224      	movs	r2, #36	@ 0x24
 8009d52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	681a      	ldr	r2, [r3, #0]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f022 0201 	bic.w	r2, r2, #1
 8009d6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f850 	bl	8009e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	68fa      	ldr	r2, [r7, #12]
 8009d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2220      	movs	r2, #32
 8009d94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d101      	bne.n	8009dc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009dbe:	2302      	movs	r3, #2
 8009dc0:	e02d      	b.n	8009e1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2224      	movs	r2, #36	@ 0x24
 8009dce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 0201 	bic.w	r2, r2, #1
 8009de8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	683a      	ldr	r2, [r7, #0]
 8009dfa:	430a      	orrs	r2, r1
 8009dfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f812 	bl	8009e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	68fa      	ldr	r2, [r7, #12]
 8009e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2220      	movs	r2, #32
 8009e10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b085      	sub	sp, #20
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d108      	bne.n	8009e4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009e48:	e031      	b.n	8009eae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009e4a:	2310      	movs	r3, #16
 8009e4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009e4e:	2310      	movs	r3, #16
 8009e50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	0e5b      	lsrs	r3, r3, #25
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	f003 0307 	and.w	r3, r3, #7
 8009e60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	0f5b      	lsrs	r3, r3, #29
 8009e6a:	b2db      	uxtb	r3, r3
 8009e6c:	f003 0307 	and.w	r3, r3, #7
 8009e70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e72:	7bbb      	ldrb	r3, [r7, #14]
 8009e74:	7b3a      	ldrb	r2, [r7, #12]
 8009e76:	4911      	ldr	r1, [pc, #68]	@ (8009ebc <UARTEx_SetNbDataToProcess+0x94>)
 8009e78:	5c8a      	ldrb	r2, [r1, r2]
 8009e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009e7e:	7b3a      	ldrb	r2, [r7, #12]
 8009e80:	490f      	ldr	r1, [pc, #60]	@ (8009ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8009e82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
 8009e92:	7b7a      	ldrb	r2, [r7, #13]
 8009e94:	4909      	ldr	r1, [pc, #36]	@ (8009ebc <UARTEx_SetNbDataToProcess+0x94>)
 8009e96:	5c8a      	ldrb	r2, [r1, r2]
 8009e98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009e9c:	7b7a      	ldrb	r2, [r7, #13]
 8009e9e:	4908      	ldr	r1, [pc, #32]	@ (8009ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8009ea0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009eae:	bf00      	nop
 8009eb0:	3714      	adds	r7, #20
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop
 8009ebc:	0800af10 	.word	0x0800af10
 8009ec0:	0800af18 	.word	0x0800af18

08009ec4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ec4:	b084      	sub	sp, #16
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b084      	sub	sp, #16
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
 8009ece:	f107 001c 	add.w	r0, r7, #28
 8009ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ed6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d121      	bne.n	8009f22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ee2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	68da      	ldr	r2, [r3, #12]
 8009eee:	4b2c      	ldr	r3, [pc, #176]	@ (8009fa0 <USB_CoreInit+0xdc>)
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	68db      	ldr	r3, [r3, #12]
 8009efa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009f02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d105      	bne.n	8009f16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 faaa 	bl	800a470 <USB_CoreReset>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	73fb      	strb	r3, [r7, #15]
 8009f20:	e01b      	b.n	8009f5a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 fa9e 	bl	800a470 <USB_CoreReset>
 8009f34:	4603      	mov	r3, r0
 8009f36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009f38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d106      	bne.n	8009f4e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8009f4c:	e005      	b.n	8009f5a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009f5a:	7fbb      	ldrb	r3, [r7, #30]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d116      	bne.n	8009f8e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009fa4 <USB_CoreInit+0xe0>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	689b      	ldr	r3, [r3, #8]
 8009f7a:	f043 0206 	orr.w	r2, r3, #6
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f043 0220 	orr.w	r2, r3, #32
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f90:	4618      	mov	r0, r3
 8009f92:	3710      	adds	r7, #16
 8009f94:	46bd      	mov	sp, r7
 8009f96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f9a:	b004      	add	sp, #16
 8009f9c:	4770      	bx	lr
 8009f9e:	bf00      	nop
 8009fa0:	ffbdffbf 	.word	0xffbdffbf
 8009fa4:	03ee0000 	.word	0x03ee0000

08009fa8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b083      	sub	sp, #12
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	f023 0201 	bic.w	r2, r3, #1
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr

08009fca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b084      	sub	sp, #16
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	68db      	ldr	r3, [r3, #12]
 8009fde:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fe6:	78fb      	ldrb	r3, [r7, #3]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d115      	bne.n	800a018 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009ff8:	200a      	movs	r0, #10
 8009ffa:	f7f8 f87d 	bl	80020f8 <HAL_Delay>
      ms += 10U;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	330a      	adds	r3, #10
 800a002:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a004:	6878      	ldr	r0, [r7, #4]
 800a006:	f000 fa25 	bl	800a454 <USB_GetMode>
 800a00a:	4603      	mov	r3, r0
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d01e      	beq.n	800a04e <USB_SetCurrentMode+0x84>
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2bc7      	cmp	r3, #199	@ 0xc7
 800a014:	d9f0      	bls.n	8009ff8 <USB_SetCurrentMode+0x2e>
 800a016:	e01a      	b.n	800a04e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a018:	78fb      	ldrb	r3, [r7, #3]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d115      	bne.n	800a04a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a02a:	200a      	movs	r0, #10
 800a02c:	f7f8 f864 	bl	80020f8 <HAL_Delay>
      ms += 10U;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	330a      	adds	r3, #10
 800a034:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	f000 fa0c 	bl	800a454 <USB_GetMode>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d005      	beq.n	800a04e <USB_SetCurrentMode+0x84>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2bc7      	cmp	r3, #199	@ 0xc7
 800a046:	d9f0      	bls.n	800a02a <USB_SetCurrentMode+0x60>
 800a048:	e001      	b.n	800a04e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a04a:	2301      	movs	r3, #1
 800a04c:	e005      	b.n	800a05a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2bc8      	cmp	r3, #200	@ 0xc8
 800a052:	d101      	bne.n	800a058 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	e000      	b.n	800a05a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
	...

0800a064 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a064:	b084      	sub	sp, #16
 800a066:	b580      	push	{r7, lr}
 800a068:	b086      	sub	sp, #24
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a076:	2300      	movs	r3, #0
 800a078:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a07e:	2300      	movs	r3, #0
 800a080:	613b      	str	r3, [r7, #16]
 800a082:	e009      	b.n	800a098 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	3340      	adds	r3, #64	@ 0x40
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	4413      	add	r3, r2
 800a08e:	2200      	movs	r2, #0
 800a090:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	3301      	adds	r3, #1
 800a096:	613b      	str	r3, [r7, #16]
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	2b0e      	cmp	r3, #14
 800a09c:	d9f2      	bls.n	800a084 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a09e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d11c      	bne.n	800a0e0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0b4:	f043 0302 	orr.w	r3, r3, #2
 800a0b8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0be:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	e005      	b.n	800a0ec <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a0f8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d10d      	bne.n	800a11c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a104:	2b00      	cmp	r3, #0
 800a106:	d104      	bne.n	800a112 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a108:	2100      	movs	r1, #0
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f968 	bl	800a3e0 <USB_SetDevSpeed>
 800a110:	e008      	b.n	800a124 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a112:	2101      	movs	r1, #1
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f963 	bl	800a3e0 <USB_SetDevSpeed>
 800a11a:	e003      	b.n	800a124 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a11c:	2103      	movs	r1, #3
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f95e 	bl	800a3e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a124:	2110      	movs	r1, #16
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f8fa 	bl	800a320 <USB_FlushTxFifo>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f924 	bl	800a384 <USB_FlushRxFifo>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a142:	2301      	movs	r3, #1
 800a144:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a14c:	461a      	mov	r2, r3
 800a14e:	2300      	movs	r3, #0
 800a150:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a158:	461a      	mov	r2, r3
 800a15a:	2300      	movs	r3, #0
 800a15c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a164:	461a      	mov	r2, r3
 800a166:	2300      	movs	r3, #0
 800a168:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a16a:	2300      	movs	r3, #0
 800a16c:	613b      	str	r3, [r7, #16]
 800a16e:	e043      	b.n	800a1f8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	015a      	lsls	r2, r3, #5
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	4413      	add	r3, r2
 800a178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a182:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a186:	d118      	bne.n	800a1ba <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d10a      	bne.n	800a1a4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a19a:	461a      	mov	r2, r3
 800a19c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a1a0:	6013      	str	r3, [r2, #0]
 800a1a2:	e013      	b.n	800a1cc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a1b6:	6013      	str	r3, [r2, #0]
 800a1b8:	e008      	b.n	800a1cc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	015a      	lsls	r2, r3, #5
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	015a      	lsls	r2, r3, #5
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	4413      	add	r3, r2
 800a1d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d8:	461a      	mov	r2, r3
 800a1da:	2300      	movs	r3, #0
 800a1dc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1de:	693b      	ldr	r3, [r7, #16]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a1f0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	613b      	str	r3, [r7, #16]
 800a1f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	693b      	ldr	r3, [r7, #16]
 800a200:	4293      	cmp	r3, r2
 800a202:	d3b5      	bcc.n	800a170 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a204:	2300      	movs	r3, #0
 800a206:	613b      	str	r3, [r7, #16]
 800a208:	e043      	b.n	800a292 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	015a      	lsls	r2, r3, #5
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	4413      	add	r3, r2
 800a212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a21c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a220:	d118      	bne.n	800a254 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d10a      	bne.n	800a23e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a234:	461a      	mov	r2, r3
 800a236:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a23a:	6013      	str	r3, [r2, #0]
 800a23c:	e013      	b.n	800a266 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a24a:	461a      	mov	r2, r3
 800a24c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a250:	6013      	str	r3, [r2, #0]
 800a252:	e008      	b.n	800a266 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	015a      	lsls	r2, r3, #5
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	4413      	add	r3, r2
 800a25c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a260:	461a      	mov	r2, r3
 800a262:	2300      	movs	r3, #0
 800a264:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	015a      	lsls	r2, r3, #5
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	4413      	add	r3, r2
 800a26e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a272:	461a      	mov	r2, r3
 800a274:	2300      	movs	r3, #0
 800a276:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	015a      	lsls	r2, r3, #5
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	4413      	add	r3, r2
 800a280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a284:	461a      	mov	r2, r3
 800a286:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a28a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	3301      	adds	r3, #1
 800a290:	613b      	str	r3, [r7, #16]
 800a292:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a296:	461a      	mov	r2, r3
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d3b5      	bcc.n	800a20a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2a4:	691b      	ldr	r3, [r3, #16]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a2ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2b0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a2be:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a2c0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d105      	bne.n	800a2d4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	f043 0210 	orr.w	r2, r3, #16
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699a      	ldr	r2, [r3, #24]
 800a2d8:	4b0f      	ldr	r3, [pc, #60]	@ (800a318 <USB_DevInit+0x2b4>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2e0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d005      	beq.n	800a2f4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	699b      	ldr	r3, [r3, #24]
 800a2ec:	f043 0208 	orr.w	r2, r3, #8
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a2f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d105      	bne.n	800a308 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	699a      	ldr	r2, [r3, #24]
 800a300:	4b06      	ldr	r3, [pc, #24]	@ (800a31c <USB_DevInit+0x2b8>)
 800a302:	4313      	orrs	r3, r2
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a308:	7dfb      	ldrb	r3, [r7, #23]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a314:	b004      	add	sp, #16
 800a316:	4770      	bx	lr
 800a318:	803c3800 	.word	0x803c3800
 800a31c:	40000004 	.word	0x40000004

0800a320 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a320:	b480      	push	{r7}
 800a322:	b085      	sub	sp, #20
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3301      	adds	r3, #1
 800a332:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a33a:	d901      	bls.n	800a340 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a33c:	2303      	movs	r3, #3
 800a33e:	e01b      	b.n	800a378 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	2b00      	cmp	r3, #0
 800a346:	daf2      	bge.n	800a32e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a348:	2300      	movs	r3, #0
 800a34a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	019b      	lsls	r3, r3, #6
 800a350:	f043 0220 	orr.w	r2, r3, #32
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	3301      	adds	r3, #1
 800a35c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a364:	d901      	bls.n	800a36a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e006      	b.n	800a378 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f003 0320 	and.w	r3, r3, #32
 800a372:	2b20      	cmp	r3, #32
 800a374:	d0f0      	beq.n	800a358 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3714      	adds	r7, #20
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3301      	adds	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a39c:	d901      	bls.n	800a3a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e018      	b.n	800a3d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	daf2      	bge.n	800a390 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2210      	movs	r2, #16
 800a3b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3c0:	d901      	bls.n	800a3c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e006      	b.n	800a3d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	f003 0310 	and.w	r3, r3, #16
 800a3ce:	2b10      	cmp	r3, #16
 800a3d0:	d0f0      	beq.n	800a3b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
 800a3e8:	460b      	mov	r3, r1
 800a3ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3f6:	681a      	ldr	r2, [r3, #0]
 800a3f8:	78fb      	ldrb	r3, [r7, #3]
 800a3fa:	68f9      	ldr	r1, [r7, #12]
 800a3fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a400:	4313      	orrs	r3, r2
 800a402:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a404:	2300      	movs	r3, #0
}
 800a406:	4618      	mov	r0, r3
 800a408:	3714      	adds	r7, #20
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr

0800a412 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a412:	b480      	push	{r7}
 800a414:	b085      	sub	sp, #20
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68fa      	ldr	r2, [r7, #12]
 800a428:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a42c:	f023 0303 	bic.w	r3, r3, #3
 800a430:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	68fa      	ldr	r2, [r7, #12]
 800a43c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a440:	f043 0302 	orr.w	r3, r3, #2
 800a444:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a446:	2300      	movs	r3, #0
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3714      	adds	r7, #20
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	f003 0301 	and.w	r3, r3, #1
}
 800a464:	4618      	mov	r0, r3
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a478:	2300      	movs	r3, #0
 800a47a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	3301      	adds	r3, #1
 800a480:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a488:	d901      	bls.n	800a48e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a48a:	2303      	movs	r3, #3
 800a48c:	e01b      	b.n	800a4c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	2b00      	cmp	r3, #0
 800a494:	daf2      	bge.n	800a47c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a496:	2300      	movs	r3, #0
 800a498:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	f043 0201 	orr.w	r2, r3, #1
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4b2:	d901      	bls.n	800a4b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a4b4:	2303      	movs	r3, #3
 800a4b6:	e006      	b.n	800a4c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d0f0      	beq.n	800a4a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800a4c4:	2300      	movs	r3, #0
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
	...

0800a4d4 <siprintf>:
 800a4d4:	b40e      	push	{r1, r2, r3}
 800a4d6:	b500      	push	{lr}
 800a4d8:	b09c      	sub	sp, #112	@ 0x70
 800a4da:	ab1d      	add	r3, sp, #116	@ 0x74
 800a4dc:	9002      	str	r0, [sp, #8]
 800a4de:	9006      	str	r0, [sp, #24]
 800a4e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a4e4:	4809      	ldr	r0, [pc, #36]	@ (800a50c <siprintf+0x38>)
 800a4e6:	9107      	str	r1, [sp, #28]
 800a4e8:	9104      	str	r1, [sp, #16]
 800a4ea:	4909      	ldr	r1, [pc, #36]	@ (800a510 <siprintf+0x3c>)
 800a4ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f0:	9105      	str	r1, [sp, #20]
 800a4f2:	6800      	ldr	r0, [r0, #0]
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	a902      	add	r1, sp, #8
 800a4f8:	f000 f994 	bl	800a824 <_svfiprintf_r>
 800a4fc:	9b02      	ldr	r3, [sp, #8]
 800a4fe:	2200      	movs	r2, #0
 800a500:	701a      	strb	r2, [r3, #0]
 800a502:	b01c      	add	sp, #112	@ 0x70
 800a504:	f85d eb04 	ldr.w	lr, [sp], #4
 800a508:	b003      	add	sp, #12
 800a50a:	4770      	bx	lr
 800a50c:	24000014 	.word	0x24000014
 800a510:	ffff0208 	.word	0xffff0208

0800a514 <memset>:
 800a514:	4402      	add	r2, r0
 800a516:	4603      	mov	r3, r0
 800a518:	4293      	cmp	r3, r2
 800a51a:	d100      	bne.n	800a51e <memset+0xa>
 800a51c:	4770      	bx	lr
 800a51e:	f803 1b01 	strb.w	r1, [r3], #1
 800a522:	e7f9      	b.n	800a518 <memset+0x4>

0800a524 <__errno>:
 800a524:	4b01      	ldr	r3, [pc, #4]	@ (800a52c <__errno+0x8>)
 800a526:	6818      	ldr	r0, [r3, #0]
 800a528:	4770      	bx	lr
 800a52a:	bf00      	nop
 800a52c:	24000014 	.word	0x24000014

0800a530 <__libc_init_array>:
 800a530:	b570      	push	{r4, r5, r6, lr}
 800a532:	4d0d      	ldr	r5, [pc, #52]	@ (800a568 <__libc_init_array+0x38>)
 800a534:	4c0d      	ldr	r4, [pc, #52]	@ (800a56c <__libc_init_array+0x3c>)
 800a536:	1b64      	subs	r4, r4, r5
 800a538:	10a4      	asrs	r4, r4, #2
 800a53a:	2600      	movs	r6, #0
 800a53c:	42a6      	cmp	r6, r4
 800a53e:	d109      	bne.n	800a554 <__libc_init_array+0x24>
 800a540:	4d0b      	ldr	r5, [pc, #44]	@ (800a570 <__libc_init_array+0x40>)
 800a542:	4c0c      	ldr	r4, [pc, #48]	@ (800a574 <__libc_init_array+0x44>)
 800a544:	f000 fc66 	bl	800ae14 <_init>
 800a548:	1b64      	subs	r4, r4, r5
 800a54a:	10a4      	asrs	r4, r4, #2
 800a54c:	2600      	movs	r6, #0
 800a54e:	42a6      	cmp	r6, r4
 800a550:	d105      	bne.n	800a55e <__libc_init_array+0x2e>
 800a552:	bd70      	pop	{r4, r5, r6, pc}
 800a554:	f855 3b04 	ldr.w	r3, [r5], #4
 800a558:	4798      	blx	r3
 800a55a:	3601      	adds	r6, #1
 800a55c:	e7ee      	b.n	800a53c <__libc_init_array+0xc>
 800a55e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a562:	4798      	blx	r3
 800a564:	3601      	adds	r6, #1
 800a566:	e7f2      	b.n	800a54e <__libc_init_array+0x1e>
 800a568:	0800af5c 	.word	0x0800af5c
 800a56c:	0800af5c 	.word	0x0800af5c
 800a570:	0800af5c 	.word	0x0800af5c
 800a574:	0800af60 	.word	0x0800af60

0800a578 <__retarget_lock_acquire_recursive>:
 800a578:	4770      	bx	lr

0800a57a <__retarget_lock_release_recursive>:
 800a57a:	4770      	bx	lr

0800a57c <_free_r>:
 800a57c:	b538      	push	{r3, r4, r5, lr}
 800a57e:	4605      	mov	r5, r0
 800a580:	2900      	cmp	r1, #0
 800a582:	d041      	beq.n	800a608 <_free_r+0x8c>
 800a584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a588:	1f0c      	subs	r4, r1, #4
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	bfb8      	it	lt
 800a58e:	18e4      	addlt	r4, r4, r3
 800a590:	f000 f8e0 	bl	800a754 <__malloc_lock>
 800a594:	4a1d      	ldr	r2, [pc, #116]	@ (800a60c <_free_r+0x90>)
 800a596:	6813      	ldr	r3, [r2, #0]
 800a598:	b933      	cbnz	r3, 800a5a8 <_free_r+0x2c>
 800a59a:	6063      	str	r3, [r4, #4]
 800a59c:	6014      	str	r4, [r2, #0]
 800a59e:	4628      	mov	r0, r5
 800a5a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a5a4:	f000 b8dc 	b.w	800a760 <__malloc_unlock>
 800a5a8:	42a3      	cmp	r3, r4
 800a5aa:	d908      	bls.n	800a5be <_free_r+0x42>
 800a5ac:	6820      	ldr	r0, [r4, #0]
 800a5ae:	1821      	adds	r1, r4, r0
 800a5b0:	428b      	cmp	r3, r1
 800a5b2:	bf01      	itttt	eq
 800a5b4:	6819      	ldreq	r1, [r3, #0]
 800a5b6:	685b      	ldreq	r3, [r3, #4]
 800a5b8:	1809      	addeq	r1, r1, r0
 800a5ba:	6021      	streq	r1, [r4, #0]
 800a5bc:	e7ed      	b.n	800a59a <_free_r+0x1e>
 800a5be:	461a      	mov	r2, r3
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	b10b      	cbz	r3, 800a5c8 <_free_r+0x4c>
 800a5c4:	42a3      	cmp	r3, r4
 800a5c6:	d9fa      	bls.n	800a5be <_free_r+0x42>
 800a5c8:	6811      	ldr	r1, [r2, #0]
 800a5ca:	1850      	adds	r0, r2, r1
 800a5cc:	42a0      	cmp	r0, r4
 800a5ce:	d10b      	bne.n	800a5e8 <_free_r+0x6c>
 800a5d0:	6820      	ldr	r0, [r4, #0]
 800a5d2:	4401      	add	r1, r0
 800a5d4:	1850      	adds	r0, r2, r1
 800a5d6:	4283      	cmp	r3, r0
 800a5d8:	6011      	str	r1, [r2, #0]
 800a5da:	d1e0      	bne.n	800a59e <_free_r+0x22>
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	6053      	str	r3, [r2, #4]
 800a5e2:	4408      	add	r0, r1
 800a5e4:	6010      	str	r0, [r2, #0]
 800a5e6:	e7da      	b.n	800a59e <_free_r+0x22>
 800a5e8:	d902      	bls.n	800a5f0 <_free_r+0x74>
 800a5ea:	230c      	movs	r3, #12
 800a5ec:	602b      	str	r3, [r5, #0]
 800a5ee:	e7d6      	b.n	800a59e <_free_r+0x22>
 800a5f0:	6820      	ldr	r0, [r4, #0]
 800a5f2:	1821      	adds	r1, r4, r0
 800a5f4:	428b      	cmp	r3, r1
 800a5f6:	bf04      	itt	eq
 800a5f8:	6819      	ldreq	r1, [r3, #0]
 800a5fa:	685b      	ldreq	r3, [r3, #4]
 800a5fc:	6063      	str	r3, [r4, #4]
 800a5fe:	bf04      	itt	eq
 800a600:	1809      	addeq	r1, r1, r0
 800a602:	6021      	streq	r1, [r4, #0]
 800a604:	6054      	str	r4, [r2, #4]
 800a606:	e7ca      	b.n	800a59e <_free_r+0x22>
 800a608:	bd38      	pop	{r3, r4, r5, pc}
 800a60a:	bf00      	nop
 800a60c:	240262bc 	.word	0x240262bc

0800a610 <sbrk_aligned>:
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	4e0f      	ldr	r6, [pc, #60]	@ (800a650 <sbrk_aligned+0x40>)
 800a614:	460c      	mov	r4, r1
 800a616:	6831      	ldr	r1, [r6, #0]
 800a618:	4605      	mov	r5, r0
 800a61a:	b911      	cbnz	r1, 800a622 <sbrk_aligned+0x12>
 800a61c:	f000 fba6 	bl	800ad6c <_sbrk_r>
 800a620:	6030      	str	r0, [r6, #0]
 800a622:	4621      	mov	r1, r4
 800a624:	4628      	mov	r0, r5
 800a626:	f000 fba1 	bl	800ad6c <_sbrk_r>
 800a62a:	1c43      	adds	r3, r0, #1
 800a62c:	d103      	bne.n	800a636 <sbrk_aligned+0x26>
 800a62e:	f04f 34ff 	mov.w	r4, #4294967295
 800a632:	4620      	mov	r0, r4
 800a634:	bd70      	pop	{r4, r5, r6, pc}
 800a636:	1cc4      	adds	r4, r0, #3
 800a638:	f024 0403 	bic.w	r4, r4, #3
 800a63c:	42a0      	cmp	r0, r4
 800a63e:	d0f8      	beq.n	800a632 <sbrk_aligned+0x22>
 800a640:	1a21      	subs	r1, r4, r0
 800a642:	4628      	mov	r0, r5
 800a644:	f000 fb92 	bl	800ad6c <_sbrk_r>
 800a648:	3001      	adds	r0, #1
 800a64a:	d1f2      	bne.n	800a632 <sbrk_aligned+0x22>
 800a64c:	e7ef      	b.n	800a62e <sbrk_aligned+0x1e>
 800a64e:	bf00      	nop
 800a650:	240262b8 	.word	0x240262b8

0800a654 <_malloc_r>:
 800a654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a658:	1ccd      	adds	r5, r1, #3
 800a65a:	f025 0503 	bic.w	r5, r5, #3
 800a65e:	3508      	adds	r5, #8
 800a660:	2d0c      	cmp	r5, #12
 800a662:	bf38      	it	cc
 800a664:	250c      	movcc	r5, #12
 800a666:	2d00      	cmp	r5, #0
 800a668:	4606      	mov	r6, r0
 800a66a:	db01      	blt.n	800a670 <_malloc_r+0x1c>
 800a66c:	42a9      	cmp	r1, r5
 800a66e:	d904      	bls.n	800a67a <_malloc_r+0x26>
 800a670:	230c      	movs	r3, #12
 800a672:	6033      	str	r3, [r6, #0]
 800a674:	2000      	movs	r0, #0
 800a676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a67a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a750 <_malloc_r+0xfc>
 800a67e:	f000 f869 	bl	800a754 <__malloc_lock>
 800a682:	f8d8 3000 	ldr.w	r3, [r8]
 800a686:	461c      	mov	r4, r3
 800a688:	bb44      	cbnz	r4, 800a6dc <_malloc_r+0x88>
 800a68a:	4629      	mov	r1, r5
 800a68c:	4630      	mov	r0, r6
 800a68e:	f7ff ffbf 	bl	800a610 <sbrk_aligned>
 800a692:	1c43      	adds	r3, r0, #1
 800a694:	4604      	mov	r4, r0
 800a696:	d158      	bne.n	800a74a <_malloc_r+0xf6>
 800a698:	f8d8 4000 	ldr.w	r4, [r8]
 800a69c:	4627      	mov	r7, r4
 800a69e:	2f00      	cmp	r7, #0
 800a6a0:	d143      	bne.n	800a72a <_malloc_r+0xd6>
 800a6a2:	2c00      	cmp	r4, #0
 800a6a4:	d04b      	beq.n	800a73e <_malloc_r+0xea>
 800a6a6:	6823      	ldr	r3, [r4, #0]
 800a6a8:	4639      	mov	r1, r7
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	eb04 0903 	add.w	r9, r4, r3
 800a6b0:	f000 fb5c 	bl	800ad6c <_sbrk_r>
 800a6b4:	4581      	cmp	r9, r0
 800a6b6:	d142      	bne.n	800a73e <_malloc_r+0xea>
 800a6b8:	6821      	ldr	r1, [r4, #0]
 800a6ba:	1a6d      	subs	r5, r5, r1
 800a6bc:	4629      	mov	r1, r5
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f7ff ffa6 	bl	800a610 <sbrk_aligned>
 800a6c4:	3001      	adds	r0, #1
 800a6c6:	d03a      	beq.n	800a73e <_malloc_r+0xea>
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	442b      	add	r3, r5
 800a6cc:	6023      	str	r3, [r4, #0]
 800a6ce:	f8d8 3000 	ldr.w	r3, [r8]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	bb62      	cbnz	r2, 800a730 <_malloc_r+0xdc>
 800a6d6:	f8c8 7000 	str.w	r7, [r8]
 800a6da:	e00f      	b.n	800a6fc <_malloc_r+0xa8>
 800a6dc:	6822      	ldr	r2, [r4, #0]
 800a6de:	1b52      	subs	r2, r2, r5
 800a6e0:	d420      	bmi.n	800a724 <_malloc_r+0xd0>
 800a6e2:	2a0b      	cmp	r2, #11
 800a6e4:	d917      	bls.n	800a716 <_malloc_r+0xc2>
 800a6e6:	1961      	adds	r1, r4, r5
 800a6e8:	42a3      	cmp	r3, r4
 800a6ea:	6025      	str	r5, [r4, #0]
 800a6ec:	bf18      	it	ne
 800a6ee:	6059      	strne	r1, [r3, #4]
 800a6f0:	6863      	ldr	r3, [r4, #4]
 800a6f2:	bf08      	it	eq
 800a6f4:	f8c8 1000 	streq.w	r1, [r8]
 800a6f8:	5162      	str	r2, [r4, r5]
 800a6fa:	604b      	str	r3, [r1, #4]
 800a6fc:	4630      	mov	r0, r6
 800a6fe:	f000 f82f 	bl	800a760 <__malloc_unlock>
 800a702:	f104 000b 	add.w	r0, r4, #11
 800a706:	1d23      	adds	r3, r4, #4
 800a708:	f020 0007 	bic.w	r0, r0, #7
 800a70c:	1ac2      	subs	r2, r0, r3
 800a70e:	bf1c      	itt	ne
 800a710:	1a1b      	subne	r3, r3, r0
 800a712:	50a3      	strne	r3, [r4, r2]
 800a714:	e7af      	b.n	800a676 <_malloc_r+0x22>
 800a716:	6862      	ldr	r2, [r4, #4]
 800a718:	42a3      	cmp	r3, r4
 800a71a:	bf0c      	ite	eq
 800a71c:	f8c8 2000 	streq.w	r2, [r8]
 800a720:	605a      	strne	r2, [r3, #4]
 800a722:	e7eb      	b.n	800a6fc <_malloc_r+0xa8>
 800a724:	4623      	mov	r3, r4
 800a726:	6864      	ldr	r4, [r4, #4]
 800a728:	e7ae      	b.n	800a688 <_malloc_r+0x34>
 800a72a:	463c      	mov	r4, r7
 800a72c:	687f      	ldr	r7, [r7, #4]
 800a72e:	e7b6      	b.n	800a69e <_malloc_r+0x4a>
 800a730:	461a      	mov	r2, r3
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	42a3      	cmp	r3, r4
 800a736:	d1fb      	bne.n	800a730 <_malloc_r+0xdc>
 800a738:	2300      	movs	r3, #0
 800a73a:	6053      	str	r3, [r2, #4]
 800a73c:	e7de      	b.n	800a6fc <_malloc_r+0xa8>
 800a73e:	230c      	movs	r3, #12
 800a740:	6033      	str	r3, [r6, #0]
 800a742:	4630      	mov	r0, r6
 800a744:	f000 f80c 	bl	800a760 <__malloc_unlock>
 800a748:	e794      	b.n	800a674 <_malloc_r+0x20>
 800a74a:	6005      	str	r5, [r0, #0]
 800a74c:	e7d6      	b.n	800a6fc <_malloc_r+0xa8>
 800a74e:	bf00      	nop
 800a750:	240262bc 	.word	0x240262bc

0800a754 <__malloc_lock>:
 800a754:	4801      	ldr	r0, [pc, #4]	@ (800a75c <__malloc_lock+0x8>)
 800a756:	f7ff bf0f 	b.w	800a578 <__retarget_lock_acquire_recursive>
 800a75a:	bf00      	nop
 800a75c:	240262b4 	.word	0x240262b4

0800a760 <__malloc_unlock>:
 800a760:	4801      	ldr	r0, [pc, #4]	@ (800a768 <__malloc_unlock+0x8>)
 800a762:	f7ff bf0a 	b.w	800a57a <__retarget_lock_release_recursive>
 800a766:	bf00      	nop
 800a768:	240262b4 	.word	0x240262b4

0800a76c <__ssputs_r>:
 800a76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a770:	688e      	ldr	r6, [r1, #8]
 800a772:	461f      	mov	r7, r3
 800a774:	42be      	cmp	r6, r7
 800a776:	680b      	ldr	r3, [r1, #0]
 800a778:	4682      	mov	sl, r0
 800a77a:	460c      	mov	r4, r1
 800a77c:	4690      	mov	r8, r2
 800a77e:	d82d      	bhi.n	800a7dc <__ssputs_r+0x70>
 800a780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a784:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a788:	d026      	beq.n	800a7d8 <__ssputs_r+0x6c>
 800a78a:	6965      	ldr	r5, [r4, #20]
 800a78c:	6909      	ldr	r1, [r1, #16]
 800a78e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a792:	eba3 0901 	sub.w	r9, r3, r1
 800a796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a79a:	1c7b      	adds	r3, r7, #1
 800a79c:	444b      	add	r3, r9
 800a79e:	106d      	asrs	r5, r5, #1
 800a7a0:	429d      	cmp	r5, r3
 800a7a2:	bf38      	it	cc
 800a7a4:	461d      	movcc	r5, r3
 800a7a6:	0553      	lsls	r3, r2, #21
 800a7a8:	d527      	bpl.n	800a7fa <__ssputs_r+0x8e>
 800a7aa:	4629      	mov	r1, r5
 800a7ac:	f7ff ff52 	bl	800a654 <_malloc_r>
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	b360      	cbz	r0, 800a80e <__ssputs_r+0xa2>
 800a7b4:	6921      	ldr	r1, [r4, #16]
 800a7b6:	464a      	mov	r2, r9
 800a7b8:	f000 fae8 	bl	800ad8c <memcpy>
 800a7bc:	89a3      	ldrh	r3, [r4, #12]
 800a7be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7c6:	81a3      	strh	r3, [r4, #12]
 800a7c8:	6126      	str	r6, [r4, #16]
 800a7ca:	6165      	str	r5, [r4, #20]
 800a7cc:	444e      	add	r6, r9
 800a7ce:	eba5 0509 	sub.w	r5, r5, r9
 800a7d2:	6026      	str	r6, [r4, #0]
 800a7d4:	60a5      	str	r5, [r4, #8]
 800a7d6:	463e      	mov	r6, r7
 800a7d8:	42be      	cmp	r6, r7
 800a7da:	d900      	bls.n	800a7de <__ssputs_r+0x72>
 800a7dc:	463e      	mov	r6, r7
 800a7de:	6820      	ldr	r0, [r4, #0]
 800a7e0:	4632      	mov	r2, r6
 800a7e2:	4641      	mov	r1, r8
 800a7e4:	f000 faa8 	bl	800ad38 <memmove>
 800a7e8:	68a3      	ldr	r3, [r4, #8]
 800a7ea:	1b9b      	subs	r3, r3, r6
 800a7ec:	60a3      	str	r3, [r4, #8]
 800a7ee:	6823      	ldr	r3, [r4, #0]
 800a7f0:	4433      	add	r3, r6
 800a7f2:	6023      	str	r3, [r4, #0]
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7fa:	462a      	mov	r2, r5
 800a7fc:	f000 fad4 	bl	800ada8 <_realloc_r>
 800a800:	4606      	mov	r6, r0
 800a802:	2800      	cmp	r0, #0
 800a804:	d1e0      	bne.n	800a7c8 <__ssputs_r+0x5c>
 800a806:	6921      	ldr	r1, [r4, #16]
 800a808:	4650      	mov	r0, sl
 800a80a:	f7ff feb7 	bl	800a57c <_free_r>
 800a80e:	230c      	movs	r3, #12
 800a810:	f8ca 3000 	str.w	r3, [sl]
 800a814:	89a3      	ldrh	r3, [r4, #12]
 800a816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a81a:	81a3      	strh	r3, [r4, #12]
 800a81c:	f04f 30ff 	mov.w	r0, #4294967295
 800a820:	e7e9      	b.n	800a7f6 <__ssputs_r+0x8a>
	...

0800a824 <_svfiprintf_r>:
 800a824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a828:	4698      	mov	r8, r3
 800a82a:	898b      	ldrh	r3, [r1, #12]
 800a82c:	061b      	lsls	r3, r3, #24
 800a82e:	b09d      	sub	sp, #116	@ 0x74
 800a830:	4607      	mov	r7, r0
 800a832:	460d      	mov	r5, r1
 800a834:	4614      	mov	r4, r2
 800a836:	d510      	bpl.n	800a85a <_svfiprintf_r+0x36>
 800a838:	690b      	ldr	r3, [r1, #16]
 800a83a:	b973      	cbnz	r3, 800a85a <_svfiprintf_r+0x36>
 800a83c:	2140      	movs	r1, #64	@ 0x40
 800a83e:	f7ff ff09 	bl	800a654 <_malloc_r>
 800a842:	6028      	str	r0, [r5, #0]
 800a844:	6128      	str	r0, [r5, #16]
 800a846:	b930      	cbnz	r0, 800a856 <_svfiprintf_r+0x32>
 800a848:	230c      	movs	r3, #12
 800a84a:	603b      	str	r3, [r7, #0]
 800a84c:	f04f 30ff 	mov.w	r0, #4294967295
 800a850:	b01d      	add	sp, #116	@ 0x74
 800a852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a856:	2340      	movs	r3, #64	@ 0x40
 800a858:	616b      	str	r3, [r5, #20]
 800a85a:	2300      	movs	r3, #0
 800a85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a85e:	2320      	movs	r3, #32
 800a860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a864:	f8cd 800c 	str.w	r8, [sp, #12]
 800a868:	2330      	movs	r3, #48	@ 0x30
 800a86a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa08 <_svfiprintf_r+0x1e4>
 800a86e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a872:	f04f 0901 	mov.w	r9, #1
 800a876:	4623      	mov	r3, r4
 800a878:	469a      	mov	sl, r3
 800a87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a87e:	b10a      	cbz	r2, 800a884 <_svfiprintf_r+0x60>
 800a880:	2a25      	cmp	r2, #37	@ 0x25
 800a882:	d1f9      	bne.n	800a878 <_svfiprintf_r+0x54>
 800a884:	ebba 0b04 	subs.w	fp, sl, r4
 800a888:	d00b      	beq.n	800a8a2 <_svfiprintf_r+0x7e>
 800a88a:	465b      	mov	r3, fp
 800a88c:	4622      	mov	r2, r4
 800a88e:	4629      	mov	r1, r5
 800a890:	4638      	mov	r0, r7
 800a892:	f7ff ff6b 	bl	800a76c <__ssputs_r>
 800a896:	3001      	adds	r0, #1
 800a898:	f000 80a7 	beq.w	800a9ea <_svfiprintf_r+0x1c6>
 800a89c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a89e:	445a      	add	r2, fp
 800a8a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	f000 809f 	beq.w	800a9ea <_svfiprintf_r+0x1c6>
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8b6:	f10a 0a01 	add.w	sl, sl, #1
 800a8ba:	9304      	str	r3, [sp, #16]
 800a8bc:	9307      	str	r3, [sp, #28]
 800a8be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a8c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800a8c4:	4654      	mov	r4, sl
 800a8c6:	2205      	movs	r2, #5
 800a8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8cc:	484e      	ldr	r0, [pc, #312]	@ (800aa08 <_svfiprintf_r+0x1e4>)
 800a8ce:	f7f5 fd0f 	bl	80002f0 <memchr>
 800a8d2:	9a04      	ldr	r2, [sp, #16]
 800a8d4:	b9d8      	cbnz	r0, 800a90e <_svfiprintf_r+0xea>
 800a8d6:	06d0      	lsls	r0, r2, #27
 800a8d8:	bf44      	itt	mi
 800a8da:	2320      	movmi	r3, #32
 800a8dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8e0:	0711      	lsls	r1, r2, #28
 800a8e2:	bf44      	itt	mi
 800a8e4:	232b      	movmi	r3, #43	@ 0x2b
 800a8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8f0:	d015      	beq.n	800a91e <_svfiprintf_r+0xfa>
 800a8f2:	9a07      	ldr	r2, [sp, #28]
 800a8f4:	4654      	mov	r4, sl
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	f04f 0c0a 	mov.w	ip, #10
 800a8fc:	4621      	mov	r1, r4
 800a8fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a902:	3b30      	subs	r3, #48	@ 0x30
 800a904:	2b09      	cmp	r3, #9
 800a906:	d94b      	bls.n	800a9a0 <_svfiprintf_r+0x17c>
 800a908:	b1b0      	cbz	r0, 800a938 <_svfiprintf_r+0x114>
 800a90a:	9207      	str	r2, [sp, #28]
 800a90c:	e014      	b.n	800a938 <_svfiprintf_r+0x114>
 800a90e:	eba0 0308 	sub.w	r3, r0, r8
 800a912:	fa09 f303 	lsl.w	r3, r9, r3
 800a916:	4313      	orrs	r3, r2
 800a918:	9304      	str	r3, [sp, #16]
 800a91a:	46a2      	mov	sl, r4
 800a91c:	e7d2      	b.n	800a8c4 <_svfiprintf_r+0xa0>
 800a91e:	9b03      	ldr	r3, [sp, #12]
 800a920:	1d19      	adds	r1, r3, #4
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	9103      	str	r1, [sp, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	bfbb      	ittet	lt
 800a92a:	425b      	neglt	r3, r3
 800a92c:	f042 0202 	orrlt.w	r2, r2, #2
 800a930:	9307      	strge	r3, [sp, #28]
 800a932:	9307      	strlt	r3, [sp, #28]
 800a934:	bfb8      	it	lt
 800a936:	9204      	strlt	r2, [sp, #16]
 800a938:	7823      	ldrb	r3, [r4, #0]
 800a93a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a93c:	d10a      	bne.n	800a954 <_svfiprintf_r+0x130>
 800a93e:	7863      	ldrb	r3, [r4, #1]
 800a940:	2b2a      	cmp	r3, #42	@ 0x2a
 800a942:	d132      	bne.n	800a9aa <_svfiprintf_r+0x186>
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	1d1a      	adds	r2, r3, #4
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	9203      	str	r2, [sp, #12]
 800a94c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a950:	3402      	adds	r4, #2
 800a952:	9305      	str	r3, [sp, #20]
 800a954:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa18 <_svfiprintf_r+0x1f4>
 800a958:	7821      	ldrb	r1, [r4, #0]
 800a95a:	2203      	movs	r2, #3
 800a95c:	4650      	mov	r0, sl
 800a95e:	f7f5 fcc7 	bl	80002f0 <memchr>
 800a962:	b138      	cbz	r0, 800a974 <_svfiprintf_r+0x150>
 800a964:	9b04      	ldr	r3, [sp, #16]
 800a966:	eba0 000a 	sub.w	r0, r0, sl
 800a96a:	2240      	movs	r2, #64	@ 0x40
 800a96c:	4082      	lsls	r2, r0
 800a96e:	4313      	orrs	r3, r2
 800a970:	3401      	adds	r4, #1
 800a972:	9304      	str	r3, [sp, #16]
 800a974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a978:	4824      	ldr	r0, [pc, #144]	@ (800aa0c <_svfiprintf_r+0x1e8>)
 800a97a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a97e:	2206      	movs	r2, #6
 800a980:	f7f5 fcb6 	bl	80002f0 <memchr>
 800a984:	2800      	cmp	r0, #0
 800a986:	d036      	beq.n	800a9f6 <_svfiprintf_r+0x1d2>
 800a988:	4b21      	ldr	r3, [pc, #132]	@ (800aa10 <_svfiprintf_r+0x1ec>)
 800a98a:	bb1b      	cbnz	r3, 800a9d4 <_svfiprintf_r+0x1b0>
 800a98c:	9b03      	ldr	r3, [sp, #12]
 800a98e:	3307      	adds	r3, #7
 800a990:	f023 0307 	bic.w	r3, r3, #7
 800a994:	3308      	adds	r3, #8
 800a996:	9303      	str	r3, [sp, #12]
 800a998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a99a:	4433      	add	r3, r6
 800a99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a99e:	e76a      	b.n	800a876 <_svfiprintf_r+0x52>
 800a9a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9a4:	460c      	mov	r4, r1
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	e7a8      	b.n	800a8fc <_svfiprintf_r+0xd8>
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	3401      	adds	r4, #1
 800a9ae:	9305      	str	r3, [sp, #20]
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	f04f 0c0a 	mov.w	ip, #10
 800a9b6:	4620      	mov	r0, r4
 800a9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9bc:	3a30      	subs	r2, #48	@ 0x30
 800a9be:	2a09      	cmp	r2, #9
 800a9c0:	d903      	bls.n	800a9ca <_svfiprintf_r+0x1a6>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d0c6      	beq.n	800a954 <_svfiprintf_r+0x130>
 800a9c6:	9105      	str	r1, [sp, #20]
 800a9c8:	e7c4      	b.n	800a954 <_svfiprintf_r+0x130>
 800a9ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9ce:	4604      	mov	r4, r0
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e7f0      	b.n	800a9b6 <_svfiprintf_r+0x192>
 800a9d4:	ab03      	add	r3, sp, #12
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	462a      	mov	r2, r5
 800a9da:	4b0e      	ldr	r3, [pc, #56]	@ (800aa14 <_svfiprintf_r+0x1f0>)
 800a9dc:	a904      	add	r1, sp, #16
 800a9de:	4638      	mov	r0, r7
 800a9e0:	f3af 8000 	nop.w
 800a9e4:	1c42      	adds	r2, r0, #1
 800a9e6:	4606      	mov	r6, r0
 800a9e8:	d1d6      	bne.n	800a998 <_svfiprintf_r+0x174>
 800a9ea:	89ab      	ldrh	r3, [r5, #12]
 800a9ec:	065b      	lsls	r3, r3, #25
 800a9ee:	f53f af2d 	bmi.w	800a84c <_svfiprintf_r+0x28>
 800a9f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9f4:	e72c      	b.n	800a850 <_svfiprintf_r+0x2c>
 800a9f6:	ab03      	add	r3, sp, #12
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	462a      	mov	r2, r5
 800a9fc:	4b05      	ldr	r3, [pc, #20]	@ (800aa14 <_svfiprintf_r+0x1f0>)
 800a9fe:	a904      	add	r1, sp, #16
 800aa00:	4638      	mov	r0, r7
 800aa02:	f000 f879 	bl	800aaf8 <_printf_i>
 800aa06:	e7ed      	b.n	800a9e4 <_svfiprintf_r+0x1c0>
 800aa08:	0800af20 	.word	0x0800af20
 800aa0c:	0800af2a 	.word	0x0800af2a
 800aa10:	00000000 	.word	0x00000000
 800aa14:	0800a76d 	.word	0x0800a76d
 800aa18:	0800af26 	.word	0x0800af26

0800aa1c <_printf_common>:
 800aa1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa20:	4616      	mov	r6, r2
 800aa22:	4698      	mov	r8, r3
 800aa24:	688a      	ldr	r2, [r1, #8]
 800aa26:	690b      	ldr	r3, [r1, #16]
 800aa28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	bfb8      	it	lt
 800aa30:	4613      	movlt	r3, r2
 800aa32:	6033      	str	r3, [r6, #0]
 800aa34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aa38:	4607      	mov	r7, r0
 800aa3a:	460c      	mov	r4, r1
 800aa3c:	b10a      	cbz	r2, 800aa42 <_printf_common+0x26>
 800aa3e:	3301      	adds	r3, #1
 800aa40:	6033      	str	r3, [r6, #0]
 800aa42:	6823      	ldr	r3, [r4, #0]
 800aa44:	0699      	lsls	r1, r3, #26
 800aa46:	bf42      	ittt	mi
 800aa48:	6833      	ldrmi	r3, [r6, #0]
 800aa4a:	3302      	addmi	r3, #2
 800aa4c:	6033      	strmi	r3, [r6, #0]
 800aa4e:	6825      	ldr	r5, [r4, #0]
 800aa50:	f015 0506 	ands.w	r5, r5, #6
 800aa54:	d106      	bne.n	800aa64 <_printf_common+0x48>
 800aa56:	f104 0a19 	add.w	sl, r4, #25
 800aa5a:	68e3      	ldr	r3, [r4, #12]
 800aa5c:	6832      	ldr	r2, [r6, #0]
 800aa5e:	1a9b      	subs	r3, r3, r2
 800aa60:	42ab      	cmp	r3, r5
 800aa62:	dc26      	bgt.n	800aab2 <_printf_common+0x96>
 800aa64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aa68:	6822      	ldr	r2, [r4, #0]
 800aa6a:	3b00      	subs	r3, #0
 800aa6c:	bf18      	it	ne
 800aa6e:	2301      	movne	r3, #1
 800aa70:	0692      	lsls	r2, r2, #26
 800aa72:	d42b      	bmi.n	800aacc <_printf_common+0xb0>
 800aa74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa78:	4641      	mov	r1, r8
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	47c8      	blx	r9
 800aa7e:	3001      	adds	r0, #1
 800aa80:	d01e      	beq.n	800aac0 <_printf_common+0xa4>
 800aa82:	6823      	ldr	r3, [r4, #0]
 800aa84:	6922      	ldr	r2, [r4, #16]
 800aa86:	f003 0306 	and.w	r3, r3, #6
 800aa8a:	2b04      	cmp	r3, #4
 800aa8c:	bf02      	ittt	eq
 800aa8e:	68e5      	ldreq	r5, [r4, #12]
 800aa90:	6833      	ldreq	r3, [r6, #0]
 800aa92:	1aed      	subeq	r5, r5, r3
 800aa94:	68a3      	ldr	r3, [r4, #8]
 800aa96:	bf0c      	ite	eq
 800aa98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa9c:	2500      	movne	r5, #0
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	bfc4      	itt	gt
 800aaa2:	1a9b      	subgt	r3, r3, r2
 800aaa4:	18ed      	addgt	r5, r5, r3
 800aaa6:	2600      	movs	r6, #0
 800aaa8:	341a      	adds	r4, #26
 800aaaa:	42b5      	cmp	r5, r6
 800aaac:	d11a      	bne.n	800aae4 <_printf_common+0xc8>
 800aaae:	2000      	movs	r0, #0
 800aab0:	e008      	b.n	800aac4 <_printf_common+0xa8>
 800aab2:	2301      	movs	r3, #1
 800aab4:	4652      	mov	r2, sl
 800aab6:	4641      	mov	r1, r8
 800aab8:	4638      	mov	r0, r7
 800aaba:	47c8      	blx	r9
 800aabc:	3001      	adds	r0, #1
 800aabe:	d103      	bne.n	800aac8 <_printf_common+0xac>
 800aac0:	f04f 30ff 	mov.w	r0, #4294967295
 800aac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aac8:	3501      	adds	r5, #1
 800aaca:	e7c6      	b.n	800aa5a <_printf_common+0x3e>
 800aacc:	18e1      	adds	r1, r4, r3
 800aace:	1c5a      	adds	r2, r3, #1
 800aad0:	2030      	movs	r0, #48	@ 0x30
 800aad2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aad6:	4422      	add	r2, r4
 800aad8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aadc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aae0:	3302      	adds	r3, #2
 800aae2:	e7c7      	b.n	800aa74 <_printf_common+0x58>
 800aae4:	2301      	movs	r3, #1
 800aae6:	4622      	mov	r2, r4
 800aae8:	4641      	mov	r1, r8
 800aaea:	4638      	mov	r0, r7
 800aaec:	47c8      	blx	r9
 800aaee:	3001      	adds	r0, #1
 800aaf0:	d0e6      	beq.n	800aac0 <_printf_common+0xa4>
 800aaf2:	3601      	adds	r6, #1
 800aaf4:	e7d9      	b.n	800aaaa <_printf_common+0x8e>
	...

0800aaf8 <_printf_i>:
 800aaf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aafc:	7e0f      	ldrb	r7, [r1, #24]
 800aafe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab00:	2f78      	cmp	r7, #120	@ 0x78
 800ab02:	4691      	mov	r9, r2
 800ab04:	4680      	mov	r8, r0
 800ab06:	460c      	mov	r4, r1
 800ab08:	469a      	mov	sl, r3
 800ab0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab0e:	d807      	bhi.n	800ab20 <_printf_i+0x28>
 800ab10:	2f62      	cmp	r7, #98	@ 0x62
 800ab12:	d80a      	bhi.n	800ab2a <_printf_i+0x32>
 800ab14:	2f00      	cmp	r7, #0
 800ab16:	f000 80d2 	beq.w	800acbe <_printf_i+0x1c6>
 800ab1a:	2f58      	cmp	r7, #88	@ 0x58
 800ab1c:	f000 80b9 	beq.w	800ac92 <_printf_i+0x19a>
 800ab20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab28:	e03a      	b.n	800aba0 <_printf_i+0xa8>
 800ab2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab2e:	2b15      	cmp	r3, #21
 800ab30:	d8f6      	bhi.n	800ab20 <_printf_i+0x28>
 800ab32:	a101      	add	r1, pc, #4	@ (adr r1, 800ab38 <_printf_i+0x40>)
 800ab34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab38:	0800ab91 	.word	0x0800ab91
 800ab3c:	0800aba5 	.word	0x0800aba5
 800ab40:	0800ab21 	.word	0x0800ab21
 800ab44:	0800ab21 	.word	0x0800ab21
 800ab48:	0800ab21 	.word	0x0800ab21
 800ab4c:	0800ab21 	.word	0x0800ab21
 800ab50:	0800aba5 	.word	0x0800aba5
 800ab54:	0800ab21 	.word	0x0800ab21
 800ab58:	0800ab21 	.word	0x0800ab21
 800ab5c:	0800ab21 	.word	0x0800ab21
 800ab60:	0800ab21 	.word	0x0800ab21
 800ab64:	0800aca5 	.word	0x0800aca5
 800ab68:	0800abcf 	.word	0x0800abcf
 800ab6c:	0800ac5f 	.word	0x0800ac5f
 800ab70:	0800ab21 	.word	0x0800ab21
 800ab74:	0800ab21 	.word	0x0800ab21
 800ab78:	0800acc7 	.word	0x0800acc7
 800ab7c:	0800ab21 	.word	0x0800ab21
 800ab80:	0800abcf 	.word	0x0800abcf
 800ab84:	0800ab21 	.word	0x0800ab21
 800ab88:	0800ab21 	.word	0x0800ab21
 800ab8c:	0800ac67 	.word	0x0800ac67
 800ab90:	6833      	ldr	r3, [r6, #0]
 800ab92:	1d1a      	adds	r2, r3, #4
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6032      	str	r2, [r6, #0]
 800ab98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800aba0:	2301      	movs	r3, #1
 800aba2:	e09d      	b.n	800ace0 <_printf_i+0x1e8>
 800aba4:	6833      	ldr	r3, [r6, #0]
 800aba6:	6820      	ldr	r0, [r4, #0]
 800aba8:	1d19      	adds	r1, r3, #4
 800abaa:	6031      	str	r1, [r6, #0]
 800abac:	0606      	lsls	r6, r0, #24
 800abae:	d501      	bpl.n	800abb4 <_printf_i+0xbc>
 800abb0:	681d      	ldr	r5, [r3, #0]
 800abb2:	e003      	b.n	800abbc <_printf_i+0xc4>
 800abb4:	0645      	lsls	r5, r0, #25
 800abb6:	d5fb      	bpl.n	800abb0 <_printf_i+0xb8>
 800abb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800abbc:	2d00      	cmp	r5, #0
 800abbe:	da03      	bge.n	800abc8 <_printf_i+0xd0>
 800abc0:	232d      	movs	r3, #45	@ 0x2d
 800abc2:	426d      	negs	r5, r5
 800abc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abc8:	4859      	ldr	r0, [pc, #356]	@ (800ad30 <_printf_i+0x238>)
 800abca:	230a      	movs	r3, #10
 800abcc:	e011      	b.n	800abf2 <_printf_i+0xfa>
 800abce:	6821      	ldr	r1, [r4, #0]
 800abd0:	6833      	ldr	r3, [r6, #0]
 800abd2:	0608      	lsls	r0, r1, #24
 800abd4:	f853 5b04 	ldr.w	r5, [r3], #4
 800abd8:	d402      	bmi.n	800abe0 <_printf_i+0xe8>
 800abda:	0649      	lsls	r1, r1, #25
 800abdc:	bf48      	it	mi
 800abde:	b2ad      	uxthmi	r5, r5
 800abe0:	2f6f      	cmp	r7, #111	@ 0x6f
 800abe2:	4853      	ldr	r0, [pc, #332]	@ (800ad30 <_printf_i+0x238>)
 800abe4:	6033      	str	r3, [r6, #0]
 800abe6:	bf14      	ite	ne
 800abe8:	230a      	movne	r3, #10
 800abea:	2308      	moveq	r3, #8
 800abec:	2100      	movs	r1, #0
 800abee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800abf2:	6866      	ldr	r6, [r4, #4]
 800abf4:	60a6      	str	r6, [r4, #8]
 800abf6:	2e00      	cmp	r6, #0
 800abf8:	bfa2      	ittt	ge
 800abfa:	6821      	ldrge	r1, [r4, #0]
 800abfc:	f021 0104 	bicge.w	r1, r1, #4
 800ac00:	6021      	strge	r1, [r4, #0]
 800ac02:	b90d      	cbnz	r5, 800ac08 <_printf_i+0x110>
 800ac04:	2e00      	cmp	r6, #0
 800ac06:	d04b      	beq.n	800aca0 <_printf_i+0x1a8>
 800ac08:	4616      	mov	r6, r2
 800ac0a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac0e:	fb03 5711 	mls	r7, r3, r1, r5
 800ac12:	5dc7      	ldrb	r7, [r0, r7]
 800ac14:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac18:	462f      	mov	r7, r5
 800ac1a:	42bb      	cmp	r3, r7
 800ac1c:	460d      	mov	r5, r1
 800ac1e:	d9f4      	bls.n	800ac0a <_printf_i+0x112>
 800ac20:	2b08      	cmp	r3, #8
 800ac22:	d10b      	bne.n	800ac3c <_printf_i+0x144>
 800ac24:	6823      	ldr	r3, [r4, #0]
 800ac26:	07df      	lsls	r7, r3, #31
 800ac28:	d508      	bpl.n	800ac3c <_printf_i+0x144>
 800ac2a:	6923      	ldr	r3, [r4, #16]
 800ac2c:	6861      	ldr	r1, [r4, #4]
 800ac2e:	4299      	cmp	r1, r3
 800ac30:	bfde      	ittt	le
 800ac32:	2330      	movle	r3, #48	@ 0x30
 800ac34:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac38:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac3c:	1b92      	subs	r2, r2, r6
 800ac3e:	6122      	str	r2, [r4, #16]
 800ac40:	f8cd a000 	str.w	sl, [sp]
 800ac44:	464b      	mov	r3, r9
 800ac46:	aa03      	add	r2, sp, #12
 800ac48:	4621      	mov	r1, r4
 800ac4a:	4640      	mov	r0, r8
 800ac4c:	f7ff fee6 	bl	800aa1c <_printf_common>
 800ac50:	3001      	adds	r0, #1
 800ac52:	d14a      	bne.n	800acea <_printf_i+0x1f2>
 800ac54:	f04f 30ff 	mov.w	r0, #4294967295
 800ac58:	b004      	add	sp, #16
 800ac5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	f043 0320 	orr.w	r3, r3, #32
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	4833      	ldr	r0, [pc, #204]	@ (800ad34 <_printf_i+0x23c>)
 800ac68:	2778      	movs	r7, #120	@ 0x78
 800ac6a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ac6e:	6823      	ldr	r3, [r4, #0]
 800ac70:	6831      	ldr	r1, [r6, #0]
 800ac72:	061f      	lsls	r7, r3, #24
 800ac74:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac78:	d402      	bmi.n	800ac80 <_printf_i+0x188>
 800ac7a:	065f      	lsls	r7, r3, #25
 800ac7c:	bf48      	it	mi
 800ac7e:	b2ad      	uxthmi	r5, r5
 800ac80:	6031      	str	r1, [r6, #0]
 800ac82:	07d9      	lsls	r1, r3, #31
 800ac84:	bf44      	itt	mi
 800ac86:	f043 0320 	orrmi.w	r3, r3, #32
 800ac8a:	6023      	strmi	r3, [r4, #0]
 800ac8c:	b11d      	cbz	r5, 800ac96 <_printf_i+0x19e>
 800ac8e:	2310      	movs	r3, #16
 800ac90:	e7ac      	b.n	800abec <_printf_i+0xf4>
 800ac92:	4827      	ldr	r0, [pc, #156]	@ (800ad30 <_printf_i+0x238>)
 800ac94:	e7e9      	b.n	800ac6a <_printf_i+0x172>
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	f023 0320 	bic.w	r3, r3, #32
 800ac9c:	6023      	str	r3, [r4, #0]
 800ac9e:	e7f6      	b.n	800ac8e <_printf_i+0x196>
 800aca0:	4616      	mov	r6, r2
 800aca2:	e7bd      	b.n	800ac20 <_printf_i+0x128>
 800aca4:	6833      	ldr	r3, [r6, #0]
 800aca6:	6825      	ldr	r5, [r4, #0]
 800aca8:	6961      	ldr	r1, [r4, #20]
 800acaa:	1d18      	adds	r0, r3, #4
 800acac:	6030      	str	r0, [r6, #0]
 800acae:	062e      	lsls	r6, r5, #24
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	d501      	bpl.n	800acb8 <_printf_i+0x1c0>
 800acb4:	6019      	str	r1, [r3, #0]
 800acb6:	e002      	b.n	800acbe <_printf_i+0x1c6>
 800acb8:	0668      	lsls	r0, r5, #25
 800acba:	d5fb      	bpl.n	800acb4 <_printf_i+0x1bc>
 800acbc:	8019      	strh	r1, [r3, #0]
 800acbe:	2300      	movs	r3, #0
 800acc0:	6123      	str	r3, [r4, #16]
 800acc2:	4616      	mov	r6, r2
 800acc4:	e7bc      	b.n	800ac40 <_printf_i+0x148>
 800acc6:	6833      	ldr	r3, [r6, #0]
 800acc8:	1d1a      	adds	r2, r3, #4
 800acca:	6032      	str	r2, [r6, #0]
 800accc:	681e      	ldr	r6, [r3, #0]
 800acce:	6862      	ldr	r2, [r4, #4]
 800acd0:	2100      	movs	r1, #0
 800acd2:	4630      	mov	r0, r6
 800acd4:	f7f5 fb0c 	bl	80002f0 <memchr>
 800acd8:	b108      	cbz	r0, 800acde <_printf_i+0x1e6>
 800acda:	1b80      	subs	r0, r0, r6
 800acdc:	6060      	str	r0, [r4, #4]
 800acde:	6863      	ldr	r3, [r4, #4]
 800ace0:	6123      	str	r3, [r4, #16]
 800ace2:	2300      	movs	r3, #0
 800ace4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ace8:	e7aa      	b.n	800ac40 <_printf_i+0x148>
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	4632      	mov	r2, r6
 800acee:	4649      	mov	r1, r9
 800acf0:	4640      	mov	r0, r8
 800acf2:	47d0      	blx	sl
 800acf4:	3001      	adds	r0, #1
 800acf6:	d0ad      	beq.n	800ac54 <_printf_i+0x15c>
 800acf8:	6823      	ldr	r3, [r4, #0]
 800acfa:	079b      	lsls	r3, r3, #30
 800acfc:	d413      	bmi.n	800ad26 <_printf_i+0x22e>
 800acfe:	68e0      	ldr	r0, [r4, #12]
 800ad00:	9b03      	ldr	r3, [sp, #12]
 800ad02:	4298      	cmp	r0, r3
 800ad04:	bfb8      	it	lt
 800ad06:	4618      	movlt	r0, r3
 800ad08:	e7a6      	b.n	800ac58 <_printf_i+0x160>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	4632      	mov	r2, r6
 800ad0e:	4649      	mov	r1, r9
 800ad10:	4640      	mov	r0, r8
 800ad12:	47d0      	blx	sl
 800ad14:	3001      	adds	r0, #1
 800ad16:	d09d      	beq.n	800ac54 <_printf_i+0x15c>
 800ad18:	3501      	adds	r5, #1
 800ad1a:	68e3      	ldr	r3, [r4, #12]
 800ad1c:	9903      	ldr	r1, [sp, #12]
 800ad1e:	1a5b      	subs	r3, r3, r1
 800ad20:	42ab      	cmp	r3, r5
 800ad22:	dcf2      	bgt.n	800ad0a <_printf_i+0x212>
 800ad24:	e7eb      	b.n	800acfe <_printf_i+0x206>
 800ad26:	2500      	movs	r5, #0
 800ad28:	f104 0619 	add.w	r6, r4, #25
 800ad2c:	e7f5      	b.n	800ad1a <_printf_i+0x222>
 800ad2e:	bf00      	nop
 800ad30:	0800af31 	.word	0x0800af31
 800ad34:	0800af42 	.word	0x0800af42

0800ad38 <memmove>:
 800ad38:	4288      	cmp	r0, r1
 800ad3a:	b510      	push	{r4, lr}
 800ad3c:	eb01 0402 	add.w	r4, r1, r2
 800ad40:	d902      	bls.n	800ad48 <memmove+0x10>
 800ad42:	4284      	cmp	r4, r0
 800ad44:	4623      	mov	r3, r4
 800ad46:	d807      	bhi.n	800ad58 <memmove+0x20>
 800ad48:	1e43      	subs	r3, r0, #1
 800ad4a:	42a1      	cmp	r1, r4
 800ad4c:	d008      	beq.n	800ad60 <memmove+0x28>
 800ad4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad56:	e7f8      	b.n	800ad4a <memmove+0x12>
 800ad58:	4402      	add	r2, r0
 800ad5a:	4601      	mov	r1, r0
 800ad5c:	428a      	cmp	r2, r1
 800ad5e:	d100      	bne.n	800ad62 <memmove+0x2a>
 800ad60:	bd10      	pop	{r4, pc}
 800ad62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad6a:	e7f7      	b.n	800ad5c <memmove+0x24>

0800ad6c <_sbrk_r>:
 800ad6c:	b538      	push	{r3, r4, r5, lr}
 800ad6e:	4d06      	ldr	r5, [pc, #24]	@ (800ad88 <_sbrk_r+0x1c>)
 800ad70:	2300      	movs	r3, #0
 800ad72:	4604      	mov	r4, r0
 800ad74:	4608      	mov	r0, r1
 800ad76:	602b      	str	r3, [r5, #0]
 800ad78:	f7f6 fd86 	bl	8001888 <_sbrk>
 800ad7c:	1c43      	adds	r3, r0, #1
 800ad7e:	d102      	bne.n	800ad86 <_sbrk_r+0x1a>
 800ad80:	682b      	ldr	r3, [r5, #0]
 800ad82:	b103      	cbz	r3, 800ad86 <_sbrk_r+0x1a>
 800ad84:	6023      	str	r3, [r4, #0]
 800ad86:	bd38      	pop	{r3, r4, r5, pc}
 800ad88:	240262b0 	.word	0x240262b0

0800ad8c <memcpy>:
 800ad8c:	440a      	add	r2, r1
 800ad8e:	4291      	cmp	r1, r2
 800ad90:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad94:	d100      	bne.n	800ad98 <memcpy+0xc>
 800ad96:	4770      	bx	lr
 800ad98:	b510      	push	{r4, lr}
 800ad9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ada2:	4291      	cmp	r1, r2
 800ada4:	d1f9      	bne.n	800ad9a <memcpy+0xe>
 800ada6:	bd10      	pop	{r4, pc}

0800ada8 <_realloc_r>:
 800ada8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adac:	4680      	mov	r8, r0
 800adae:	4615      	mov	r5, r2
 800adb0:	460c      	mov	r4, r1
 800adb2:	b921      	cbnz	r1, 800adbe <_realloc_r+0x16>
 800adb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adb8:	4611      	mov	r1, r2
 800adba:	f7ff bc4b 	b.w	800a654 <_malloc_r>
 800adbe:	b92a      	cbnz	r2, 800adcc <_realloc_r+0x24>
 800adc0:	f7ff fbdc 	bl	800a57c <_free_r>
 800adc4:	2400      	movs	r4, #0
 800adc6:	4620      	mov	r0, r4
 800adc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adcc:	f000 f81a 	bl	800ae04 <_malloc_usable_size_r>
 800add0:	4285      	cmp	r5, r0
 800add2:	4606      	mov	r6, r0
 800add4:	d802      	bhi.n	800addc <_realloc_r+0x34>
 800add6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800adda:	d8f4      	bhi.n	800adc6 <_realloc_r+0x1e>
 800addc:	4629      	mov	r1, r5
 800adde:	4640      	mov	r0, r8
 800ade0:	f7ff fc38 	bl	800a654 <_malloc_r>
 800ade4:	4607      	mov	r7, r0
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d0ec      	beq.n	800adc4 <_realloc_r+0x1c>
 800adea:	42b5      	cmp	r5, r6
 800adec:	462a      	mov	r2, r5
 800adee:	4621      	mov	r1, r4
 800adf0:	bf28      	it	cs
 800adf2:	4632      	movcs	r2, r6
 800adf4:	f7ff ffca 	bl	800ad8c <memcpy>
 800adf8:	4621      	mov	r1, r4
 800adfa:	4640      	mov	r0, r8
 800adfc:	f7ff fbbe 	bl	800a57c <_free_r>
 800ae00:	463c      	mov	r4, r7
 800ae02:	e7e0      	b.n	800adc6 <_realloc_r+0x1e>

0800ae04 <_malloc_usable_size_r>:
 800ae04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae08:	1f18      	subs	r0, r3, #4
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	bfbc      	itt	lt
 800ae0e:	580b      	ldrlt	r3, [r1, r0]
 800ae10:	18c0      	addlt	r0, r0, r3
 800ae12:	4770      	bx	lr

0800ae14 <_init>:
 800ae14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae16:	bf00      	nop
 800ae18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae1a:	bc08      	pop	{r3}
 800ae1c:	469e      	mov	lr, r3
 800ae1e:	4770      	bx	lr

0800ae20 <_fini>:
 800ae20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae22:	bf00      	nop
 800ae24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae26:	bc08      	pop	{r3}
 800ae28:	469e      	mov	lr, r3
 800ae2a:	4770      	bx	lr
