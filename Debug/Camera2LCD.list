
Camera2LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d0c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08009fac  08009fac  0000afac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a064  0800a064  0000b064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a06c  0800a06c  0000b06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a070  0800a070  0000b070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800a074  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800a0d4  0000c060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800a134  0000c0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  24000120  0800a194  0000c120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ab8  0800a194  0000cab8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026462  00000000  00000000  0000c14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000048a4  00000000  00000000  000325b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba8  00000000  00000000  00036e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001585  00000000  00000000  00038a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c7ce  00000000  00000000  00039f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029170  00000000  00000000  00076753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00173cd1  00000000  00000000  0009f8c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00213594  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b28  00000000  00000000  002135d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0021b100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009f94 	.word	0x08009f94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08009f94 	.word	0x08009f94

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <OV5640_WriteReg>:
		[OV5640_FORMAT_RAW] = 0X03//rg/gb
};



HAL_StatusTypeDef OV5640_WriteReg(uint16_t regAddr, uint8_t data) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af02      	add	r7, sp, #8
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	80fb      	strh	r3, [r7, #6]
 800068c:	4613      	mov	r3, r2
 800068e:	717b      	strb	r3, [r7, #5]
	uint8_t transmitData[3];
	transmitData[0] = (regAddr >> 8);
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b29b      	uxth	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	733b      	strb	r3, [r7, #12]
	transmitData[1] = regAddr & 0xFF;
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	737b      	strb	r3, [r7, #13]
	transmitData[2] = data;
 80006a0:	797b      	ldrb	r3, [r7, #5]
 80006a2:	73bb      	strb	r3, [r7, #14]

	return HAL_I2C_Master_Transmit(&hi2c1, OV5640_I2C_ADDR, transmitData, 3,
 80006a4:	f107 020c 	add.w	r2, r7, #12
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2303      	movs	r3, #3
 80006b0:	2178      	movs	r1, #120	@ 0x78
 80006b2:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <OV5640_WriteReg+0x44>)
 80006b4:	f002 fb0e 	bl	8002cd4 <HAL_I2C_Master_Transmit>
 80006b8:	4603      	mov	r3, r0
			HAL_MAX_DELAY);

}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	2400027c 	.word	0x2400027c

080006c8 <OV5640_ReadReg>:

HAL_StatusTypeDef OV5640_ReadReg(uint16_t regAddr, uint8_t *dataPtr) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b09a      	sub	sp, #104	@ 0x68
 80006cc:	af02      	add	r7, sp, #8
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	80fb      	strh	r3, [r7, #6]
	char buff[25] = "readStart\r\n";
 80006d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000784 <OV5640_ReadReg+0xbc>)
 80006d6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006da:	ca07      	ldmia	r2, {r0, r1, r2}
 80006dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80006e0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	731a      	strb	r2, [r3, #12]
	HAL_UART_Transmit(&huart3, &buff, sizeof(buff), HAL_MAX_DELAY);
 80006ee:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295
 80006f6:	2219      	movs	r2, #25
 80006f8:	4823      	ldr	r0, [pc, #140]	@ (8000788 <OV5640_ReadReg+0xc0>)
 80006fa:	f007 fb89 	bl	8007e10 <HAL_UART_Transmit>
	uint8_t transmitData[2];
	transmitData[0] = (regAddr >> 8);
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	b29b      	uxth	r3, r3
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	transmitData[1] = regAddr & 0xFF;
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, OV5640_I2C_ADDR,
 8000712:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2302      	movs	r3, #2
 800071e:	2178      	movs	r1, #120	@ 0x78
 8000720:	481a      	ldr	r0, [pc, #104]	@ (800078c <OV5640_ReadReg+0xc4>)
 8000722:	f002 fad7 	bl	8002cd4 <HAL_I2C_Master_Transmit>
 8000726:	4603      	mov	r3, r0
 8000728:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			transmitData, 2, HAL_MAX_DELAY);
	char buffStatus[50];
	sprintf(buffStatus, "transmit Status: %d \r\n", status);
 800072c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4916      	ldr	r1, [pc, #88]	@ (8000790 <OV5640_ReadReg+0xc8>)
 8000736:	4618      	mov	r0, r3
 8000738:	f008 ff8c 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&huart3, buffStatus, strlen(buffStatus), HAL_MAX_DELAY);
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fdcd 	bl	80002e0 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	f107 010c 	add.w	r1, r7, #12
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	480d      	ldr	r0, [pc, #52]	@ (8000788 <OV5640_ReadReg+0xc0>)
 8000754:	f007 fb5c 	bl	8007e10 <HAL_UART_Transmit>
	if (status != HAL_OK) {
 8000758:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800075c:	2b00      	cmp	r3, #0
 800075e:	d002      	beq.n	8000766 <OV5640_ReadReg+0x9e>
		return status;
 8000760:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000764:	e009      	b.n	800077a <OV5640_ReadReg+0xb2>
	}
	return HAL_I2C_Master_Receive(&hi2c1, OV5640_I2C_ADDR, dataPtr, 1,
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2301      	movs	r3, #1
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	2178      	movs	r1, #120	@ 0x78
 8000772:	4806      	ldr	r0, [pc, #24]	@ (800078c <OV5640_ReadReg+0xc4>)
 8000774:	f002 fbc6 	bl	8002f04 <HAL_I2C_Master_Receive>
 8000778:	4603      	mov	r3, r0
			HAL_MAX_DELAY);
}
 800077a:	4618      	mov	r0, r3
 800077c:	3760      	adds	r7, #96	@ 0x60
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	08009fc4 	.word	0x08009fc4
 8000788:	240003f4 	.word	0x240003f4
 800078c:	2400027c 	.word	0x2400027c
 8000790:	08009fac 	.word	0x08009fac

08000794 <OV5640_PowerUpSequence>:
		return HAL_ERROR;
	}

	return HAL_OK;
}
void OV5640_PowerUpSequence(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 8000798:	200a      	movs	r0, #10
 800079a:	f001 fa5f 	bl	8001c5c <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	2101      	movs	r1, #1
 80007a2:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <OV5640_PowerUpSequence+0x40>)
 80007a4:	f002 f9e0 	bl	8002b68 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80007a8:	2005      	movs	r0, #5
 80007aa:	f001 fa57 	bl	8001c5c <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port, CAMERA_RST_Pin, GPIO_PIN_SET);
 80007ae:	2201      	movs	r2, #1
 80007b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007b4:	4808      	ldr	r0, [pc, #32]	@ (80007d8 <OV5640_PowerUpSequence+0x44>)
 80007b6:	f002 f9d7 	bl	8002b68 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80007ba:	2014      	movs	r0, #20
 80007bc:	f001 fa4e 	bl	8001c5c <HAL_Delay>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80007c0:	2100      	movs	r1, #0
 80007c2:	4806      	ldr	r0, [pc, #24]	@ (80007dc <OV5640_PowerUpSequence+0x48>)
 80007c4:	f006 f9c0 	bl	8006b48 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 80007c8:	2005      	movs	r0, #5
 80007ca:	f001 fa47 	bl	8001c5c <HAL_Delay>

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	58020000 	.word	0x58020000
 80007d8:	58021800 	.word	0x58021800
 80007dc:	240003a8 	.word	0x240003a8

080007e0 <OV5640_ConfigureCamera>:
	status | OV5640_WriteReg(OV5640_REG_FORMAT_CTRL, formatData);
	return status;


}
void OV5640_ConfigureCamera(void){
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80007e6:	2300      	movs	r3, #0
 80007e8:	71fb      	strb	r3, [r7, #7]
	if (OV5640_TestConnection != HAL_OK){
		return;
 80007ea:	bf00      	nop
	HAL_Delay(500);
	return;



}
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <MX_DCMI_Init>:
/* USER CODE END 0 */

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
	/* USER CODE END DCMI_Init 0 */

	/* USER CODE BEGIN DCMI_Init 1 */

	/* USER CODE END DCMI_Init 1 */
	hdcmi.Instance = DCMI;
 80007fc:	4b16      	ldr	r3, [pc, #88]	@ (8000858 <MX_DCMI_Init+0x60>)
 80007fe:	4a17      	ldr	r2, [pc, #92]	@ (800085c <MX_DCMI_Init+0x64>)
 8000800:	601a      	str	r2, [r3, #0]
	hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000802:	4b15      	ldr	r3, [pc, #84]	@ (8000858 <MX_DCMI_Init+0x60>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
	hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <MX_DCMI_Init+0x60>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
	hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800080e:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <MX_DCMI_Init+0x60>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
	hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000814:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <MX_DCMI_Init+0x60>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
	hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800081a:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <MX_DCMI_Init+0x60>)
 800081c:	2200      	movs	r2, #0
 800081e:	615a      	str	r2, [r3, #20]
	hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000820:	4b0d      	ldr	r3, [pc, #52]	@ (8000858 <MX_DCMI_Init+0x60>)
 8000822:	2200      	movs	r2, #0
 8000824:	619a      	str	r2, [r3, #24]
	hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000826:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_DCMI_Init+0x60>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
	hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800082c:	4b0a      	ldr	r3, [pc, #40]	@ (8000858 <MX_DCMI_Init+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	625a      	str	r2, [r3, #36]	@ 0x24
	hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000832:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_DCMI_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	629a      	str	r2, [r3, #40]	@ 0x28
	hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000838:	4b07      	ldr	r3, [pc, #28]	@ (8000858 <MX_DCMI_Init+0x60>)
 800083a:	2200      	movs	r2, #0
 800083c:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800083e:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_DCMI_Init+0x60>)
 8000840:	2200      	movs	r2, #0
 8000842:	631a      	str	r2, [r3, #48]	@ 0x30
	if (HAL_DCMI_Init(&hdcmi) != HAL_OK) {
 8000844:	4804      	ldr	r0, [pc, #16]	@ (8000858 <MX_DCMI_Init+0x60>)
 8000846:	f001 fb31 	bl	8001eac <HAL_DCMI_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_DCMI_Init+0x5c>
		Error_Handler();
 8000850:	f000 fc88 	bl	8001164 <Error_Handler>
	}
	/* USER CODE BEGIN DCMI_Init 2 */

	/* USER CODE END DCMI_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	2400013c 	.word	0x2400013c
 800085c:	48020000 	.word	0x48020000

08000860 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef *dcmiHandle) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	@ 0x38
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
	if (dcmiHandle->Instance == DCMI) {
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a59      	ldr	r2, [pc, #356]	@ (80009e4 <HAL_DCMI_MspInit+0x184>)
 800087e:	4293      	cmp	r3, r2
 8000880:	f040 80ab 	bne.w	80009da <HAL_DCMI_MspInit+0x17a>
		/* USER CODE BEGIN DCMI_MspInit 0 */

		/* USER CODE END DCMI_MspInit 0 */
		/* DCMI clock enable */
		__HAL_RCC_DCMI_CLK_ENABLE();
 8000884:	4b58      	ldr	r3, [pc, #352]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 8000886:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800088a:	4a57      	ldr	r2, [pc, #348]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000894:	4b54      	ldr	r3, [pc, #336]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 8000896:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	623b      	str	r3, [r7, #32]
 80008a0:	6a3b      	ldr	r3, [r7, #32]

		__HAL_RCC_GPIOE_CLK_ENABLE();
 80008a2:	4b51      	ldr	r3, [pc, #324]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a8:	4a4f      	ldr	r2, [pc, #316]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 80008aa:	f043 0310 	orr.w	r3, r3, #16
 80008ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b2:	4b4d      	ldr	r3, [pc, #308]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 80008b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b8:	f003 0310 	and.w	r3, r3, #16
 80008bc:	61fb      	str	r3, [r7, #28]
 80008be:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b49      	ldr	r3, [pc, #292]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c6:	4a48      	ldr	r2, [pc, #288]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d0:	4b45      	ldr	r3, [pc, #276]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 80008d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b42      	ldr	r3, [pc, #264]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e4:	4a40      	ldr	r2, [pc, #256]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ee:	4b3e      	ldr	r3, [pc, #248]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80008fc:	4b3a      	ldr	r3, [pc, #232]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	4a39      	ldr	r2, [pc, #228]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090c:	4b36      	ldr	r3, [pc, #216]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000912:	f003 0308 	and.w	r3, r3, #8
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b33      	ldr	r3, [pc, #204]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000920:	4a31      	ldr	r2, [pc, #196]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 8000922:	f043 0302 	orr.w	r3, r3, #2
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800092a:	4b2f      	ldr	r3, [pc, #188]	@ (80009e8 <HAL_DCMI_MspInit+0x188>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000930:	f003 0302 	and.w	r3, r3, #2
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
		 PC8     ------> DCMI_D2
		 PC9     ------> DCMI_D3
		 PD3     ------> DCMI_D5
		 PB7     ------> DCMI_VSYNC
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8000938:	2370      	movs	r3, #112	@ 0x70
 800093a:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093c:	2302      	movs	r3, #2
 800093e:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000948:	230d      	movs	r3, #13
 800094a:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000950:	4619      	mov	r1, r3
 8000952:	4826      	ldr	r0, [pc, #152]	@ (80009ec <HAL_DCMI_MspInit+0x18c>)
 8000954:	f001 ff58 	bl	8002808 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_6;
 8000958:	2350      	movs	r3, #80	@ 0x50
 800095a:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000968:	230d      	movs	r3, #13
 800096a:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000970:	4619      	mov	r1, r3
 8000972:	481f      	ldr	r0, [pc, #124]	@ (80009f0 <HAL_DCMI_MspInit+0x190>)
 8000974:	f001 ff48 	bl	8002808 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 8000978:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800097c:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800098a:	230d      	movs	r3, #13
 800098c:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	4817      	ldr	r0, [pc, #92]	@ (80009f4 <HAL_DCMI_MspInit+0x194>)
 8000996:	f001 ff37 	bl	8002808 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 800099a:	2308      	movs	r3, #8
 800099c:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009aa:	230d      	movs	r3, #13
 80009ac:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b2:	4619      	mov	r1, r3
 80009b4:	4810      	ldr	r0, [pc, #64]	@ (80009f8 <HAL_DCMI_MspInit+0x198>)
 80009b6:	f001 ff27 	bl	8002808 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009ba:	2380      	movs	r3, #128	@ 0x80
 80009bc:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80009ca:	230d      	movs	r3, #13
 80009cc:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4809      	ldr	r0, [pc, #36]	@ (80009fc <HAL_DCMI_MspInit+0x19c>)
 80009d6:	f001 ff17 	bl	8002808 <HAL_GPIO_Init>

		/* USER CODE BEGIN DCMI_MspInit 1 */

		/* USER CODE END DCMI_MspInit 1 */
	}
}
 80009da:	bf00      	nop
 80009dc:	3738      	adds	r7, #56	@ 0x38
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	48020000 	.word	0x48020000
 80009e8:	58024400 	.word	0x58024400
 80009ec:	58021000 	.word	0x58021000
 80009f0:	58020000 	.word	0x58020000
 80009f4:	58020800 	.word	0x58020800
 80009f8:	58020c00 	.word	0x58020c00
 80009fc:	58020400 	.word	0x58020400

08000a00 <MX_ETH_Init>:
/* USER CODE END 0 */

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000a04:	4b1e      	ldr	r3, [pc, #120]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a06:	4a1f      	ldr	r2, [pc, #124]	@ (8000a84 <MX_ETH_Init+0x84>)
 8000a08:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a12:	2280      	movs	r2, #128	@ 0x80
 8000a14:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a18:	22e1      	movs	r2, #225	@ 0xe1
 8000a1a:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000a2e:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a30:	4a15      	ldr	r2, [pc, #84]	@ (8000a88 <MX_ETH_Init+0x88>)
 8000a32:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a34:	4b12      	ldr	r3, [pc, #72]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a3c:	4a13      	ldr	r2, [pc, #76]	@ (8000a8c <MX_ETH_Init+0x8c>)
 8000a3e:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a42:	4a13      	ldr	r2, [pc, #76]	@ (8000a90 <MX_ETH_Init+0x90>)
 8000a44:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a48:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a4c:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK) {
 8000a4e:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <MX_ETH_Init+0x80>)
 8000a50:	f001 faa6 	bl	8001fa0 <HAL_ETH_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_ETH_Init+0x5e>
		Error_Handler();
 8000a5a:	f000 fb83 	bl	8001164 <Error_Handler>
	}

	memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8000a5e:	2238      	movs	r2, #56	@ 0x38
 8000a60:	2100      	movs	r1, #0
 8000a62:	480c      	ldr	r0, [pc, #48]	@ (8000a94 <MX_ETH_Init+0x94>)
 8000a64:	f008 fe16 	bl	8009694 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM
 8000a68:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <MX_ETH_Init+0x94>)
 8000a6a:	2221      	movs	r2, #33	@ 0x21
 8000a6c:	601a      	str	r2, [r3, #0]
			| ETH_TX_PACKETS_FEATURES_CRCPAD;
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_ETH_Init+0x94>)
 8000a70:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a74:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000a76:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <MX_ETH_Init+0x94>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	240001c4 	.word	0x240001c4
 8000a84:	40028000 	.word	0x40028000
 8000a88:	24000274 	.word	0x24000274
 8000a8c:	240000c0 	.word	0x240000c0
 8000a90:	24000060 	.word	0x24000060
 8000a94:	2400018c 	.word	0x2400018c

08000a98 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef *ethHandle) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08e      	sub	sp, #56	@ 0x38
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
	if (ethHandle->Instance == ETH) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a59      	ldr	r2, [pc, #356]	@ (8000c1c <HAL_ETH_MspInit+0x184>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	f040 80ab 	bne.w	8000c12 <HAL_ETH_MspInit+0x17a>
		/* USER CODE BEGIN ETH_MspInit 0 */

		/* USER CODE END ETH_MspInit 0 */
		/* ETH clock enable */
		__HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000abc:	4b58      	ldr	r3, [pc, #352]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000abe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ac2:	4a57      	ldr	r2, [pc, #348]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000ac4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ac8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000acc:	4b54      	ldr	r3, [pc, #336]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000ace:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ad2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ad6:	623b      	str	r3, [r7, #32]
 8000ad8:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ada:	4b51      	ldr	r3, [pc, #324]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ae0:	4a4f      	ldr	r2, [pc, #316]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000ae2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ae6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000aea:	4b4d      	ldr	r3, [pc, #308]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000af0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000af4:	61fb      	str	r3, [r7, #28]
 8000af6:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_ETH1RX_CLK_ENABLE();
 8000af8:	4b49      	ldr	r3, [pc, #292]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000afa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000afe:	4a48      	ldr	r2, [pc, #288]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b04:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b08:	4b45      	ldr	r3, [pc, #276]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b12:	61bb      	str	r3, [r7, #24]
 8000b14:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4b42      	ldr	r3, [pc, #264]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	4a40      	ldr	r2, [pc, #256]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b1e:	f043 0304 	orr.w	r3, r3, #4
 8000b22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b26:	4b3e      	ldr	r3, [pc, #248]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2c:	f003 0304 	and.w	r3, r3, #4
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b3a      	ldr	r3, [pc, #232]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	4a39      	ldr	r2, [pc, #228]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b44:	4b36      	ldr	r3, [pc, #216]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	4b33      	ldr	r3, [pc, #204]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b58:	4a31      	ldr	r2, [pc, #196]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b5a:	f043 0302 	orr.w	r3, r3, #2
 8000b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b62:	4b2f      	ldr	r3, [pc, #188]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b68:	f003 0302 	and.w	r3, r3, #2
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8000b70:	4b2b      	ldr	r3, [pc, #172]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b76:	4a2a      	ldr	r2, [pc, #168]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b80:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <HAL_ETH_MspInit+0x188>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	68bb      	ldr	r3, [r7, #8]
		 PC5     ------> ETH_RXD1
		 PB13     ------> ETH_TXD1
		 PG11     ------> ETH_TX_EN
		 PG13     ------> ETH_TXD0
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000b8e:	2332      	movs	r3, #50	@ 0x32
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9e:	230b      	movs	r3, #11
 8000ba0:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	481e      	ldr	r0, [pc, #120]	@ (8000c24 <HAL_ETH_MspInit+0x18c>)
 8000baa:	f001 fe2d 	bl	8002808 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8000bae:	2386      	movs	r3, #134	@ 0x86
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbe:	230b      	movs	r3, #11
 8000bc0:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4817      	ldr	r0, [pc, #92]	@ (8000c28 <HAL_ETH_MspInit+0x190>)
 8000bca:	f001 fe1d 	bl	8002808 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be0:	230b      	movs	r3, #11
 8000be2:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be8:	4619      	mov	r1, r3
 8000bea:	4810      	ldr	r0, [pc, #64]	@ (8000c2c <HAL_ETH_MspInit+0x194>)
 8000bec:	f001 fe0c 	bl	8002808 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 8000bf0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bf4:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	633b      	str	r3, [r7, #48]	@ 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c02:	230b      	movs	r3, #11
 8000c04:	637b      	str	r3, [r7, #52]	@ 0x34
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4808      	ldr	r0, [pc, #32]	@ (8000c30 <HAL_ETH_MspInit+0x198>)
 8000c0e:	f001 fdfb 	bl	8002808 <HAL_GPIO_Init>

		/* USER CODE BEGIN ETH_MspInit 1 */

		/* USER CODE END ETH_MspInit 1 */
	}
}
 8000c12:	bf00      	nop
 8000c14:	3738      	adds	r7, #56	@ 0x38
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40028000 	.word	0x40028000
 8000c20:	58024400 	.word	0x58024400
 8000c24:	58020800 	.word	0x58020800
 8000c28:	58020000 	.word	0x58020000
 8000c2c:	58020400 	.word	0x58020400
 8000c30:	58021800 	.word	0x58021800

08000c34 <MX_GPIO_Init>:
 PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
 PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
 PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
 PA8   ------> RCC_MCO_1
 */
void MX_GPIO_Init(void) {
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	@ 0x30
 8000c38:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000c4a:	4b7e      	ldr	r3, [pc, #504]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c50:	4a7c      	ldr	r2, [pc, #496]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5a:	4b7a      	ldr	r3, [pc, #488]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000c5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	61bb      	str	r3, [r7, #24]
 8000c66:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c68:	4b76      	ldr	r3, [pc, #472]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6e:	4a75      	ldr	r2, [pc, #468]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c78:	4b72      	ldr	r3, [pc, #456]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000c7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7e:	f003 0304 	and.w	r3, r3, #4
 8000c82:	617b      	str	r3, [r7, #20]
 8000c84:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c86:	4b6f      	ldr	r3, [pc, #444]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	4a6d      	ldr	r2, [pc, #436]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000c8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c96:	4b6b      	ldr	r3, [pc, #428]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca4:	4b67      	ldr	r3, [pc, #412]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000caa:	4a66      	ldr	r2, [pc, #408]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000cac:	f043 0301 	orr.w	r3, r3, #1
 8000cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb4:	4b63      	ldr	r3, [pc, #396]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000cb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc2:	4b60      	ldr	r3, [pc, #384]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	4a5e      	ldr	r2, [pc, #376]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000cca:	f043 0302 	orr.w	r3, r3, #2
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd2:	4b5c      	ldr	r3, [pc, #368]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	f003 0302 	and.w	r3, r3, #2
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000ce0:	4b58      	ldr	r3, [pc, #352]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce6:	4a57      	ldr	r2, [pc, #348]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cf0:	4b54      	ldr	r3, [pc, #336]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000cf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfe:	4b51      	ldr	r3, [pc, #324]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d04:	4a4f      	ldr	r2, [pc, #316]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000d06:	f043 0308 	orr.w	r3, r3, #8
 8000d0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0e:	4b4d      	ldr	r3, [pc, #308]	@ (8000e44 <MX_GPIO_Init+0x210>)
 8000d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_SET);
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	2101      	movs	r1, #1
 8000d20:	4849      	ldr	r0, [pc, #292]	@ (8000e48 <MX_GPIO_Init+0x214>)
 8000d22:	f001 ff21 	bl	8002b68 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | I2C_SUCCESS_Pin | LD3_Pin,
 8000d26:	2200      	movs	r2, #0
 8000d28:	f245 0101 	movw	r1, #20481	@ 0x5001
 8000d2c:	4847      	ldr	r0, [pc, #284]	@ (8000e4c <MX_GPIO_Init+0x218>)
 8000d2e:	f001 ff1b 	bl	8002b68 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG,
 8000d32:	2200      	movs	r2, #0
 8000d34:	f249 4102 	movw	r1, #37890	@ 0x9402
 8000d38:	4845      	ldr	r0, [pc, #276]	@ (8000e50 <MX_GPIO_Init+0x21c>)
 8000d3a:	f001 ff15 	bl	8002b68 <HAL_GPIO_WritePin>
			LCD_DC_Pin | CAMERA_RST_Pin | LCD_RESET_Pin | LCD_CS_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin,
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d44:	4843      	ldr	r0, [pc, #268]	@ (8000e54 <MX_GPIO_Init+0x220>)
 8000d46:	f001 ff0f 	bl	8002b68 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2102      	movs	r1, #2
 8000d4e:	4842      	ldr	r0, [pc, #264]	@ (8000e58 <MX_GPIO_Init+0x224>)
 8000d50:	f001 ff0a 	bl	8002b68 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000d54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	483c      	ldr	r0, [pc, #240]	@ (8000e5c <MX_GPIO_Init+0x228>)
 8000d6a:	f001 fd4d 	bl	8002808 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = CAMERA_PWDN_Pin;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(CAMERA_PWDN_GPIO_Port, &GPIO_InitStruct);
 8000d7e:	f107 031c 	add.w	r3, r7, #28
 8000d82:	4619      	mov	r1, r3
 8000d84:	4830      	ldr	r0, [pc, #192]	@ (8000e48 <MX_GPIO_Init+0x214>)
 8000d86:	f001 fd3f 	bl	8002808 <HAL_GPIO_Init>

	/*Configure GPIO pins : PBPin PBPin PBPin */
	GPIO_InitStruct.Pin = LD1_Pin | I2C_SUCCESS_Pin | LD3_Pin;
 8000d8a:	f245 0301 	movw	r3, #20481	@ 0x5001
 8000d8e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	482a      	ldr	r0, [pc, #168]	@ (8000e4c <MX_GPIO_Init+0x218>)
 8000da4:	f001 fd30 	bl	8002808 <HAL_GPIO_Init>

	/*Configure GPIO pins : PGPin PGPin PGPin PGPin */
	GPIO_InitStruct.Pin = LCD_DC_Pin | CAMERA_RST_Pin | LCD_RESET_Pin
 8000da8:	f249 4302 	movw	r3, #37890	@ 0x9402
 8000dac:	61fb      	str	r3, [r7, #28]
			| LCD_CS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dba:	f107 031c 	add.w	r3, r7, #28
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4823      	ldr	r0, [pc, #140]	@ (8000e50 <MX_GPIO_Init+0x21c>)
 8000dc2:	f001 fd21 	bl	8002808 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000dc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	4619      	mov	r1, r3
 8000dde:	481d      	ldr	r0, [pc, #116]	@ (8000e54 <MX_GPIO_Init+0x220>)
 8000de0:	f001 fd12 	bl	8002808 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000de4:	2380      	movs	r3, #128	@ 0x80
 8000de6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4815      	ldr	r0, [pc, #84]	@ (8000e50 <MX_GPIO_Init+0x21c>)
 8000dfa:	f001 fd05 	bl	8002808 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e02:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480b      	ldr	r0, [pc, #44]	@ (8000e48 <MX_GPIO_Init+0x214>)
 8000e1c:	f001 fcf4 	bl	8002808 <HAL_GPIO_Init>

	/*Configure GPIO pin : PtPin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000e20:	2302      	movs	r3, #2
 8000e22:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	4808      	ldr	r0, [pc, #32]	@ (8000e58 <MX_GPIO_Init+0x224>)
 8000e38:	f001 fce6 	bl	8002808 <HAL_GPIO_Init>

}
 8000e3c:	bf00      	nop
 8000e3e:	3730      	adds	r7, #48	@ 0x30
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	58024400 	.word	0x58024400
 8000e48:	58020000 	.word	0x58020000
 8000e4c:	58020400 	.word	0x58020400
 8000e50:	58021800 	.word	0x58021800
 8000e54:	58020c00 	.word	0x58020c00
 8000e58:	58021000 	.word	0x58021000
 8000e5c:	58020800 	.word	0x58020800

08000e60 <MX_I2C1_Init>:
/* USER CODE END 0 */

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e66:	4a1c      	ldr	r2, [pc, #112]	@ (8000ed8 <MX_I2C1_Init+0x78>)
 8000e68:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x60000008;
 8000e6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000edc <MX_I2C1_Init+0x7c>)
 8000e6e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000e70:	4b18      	ldr	r3, [pc, #96]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e76:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000e82:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e88:	4b12      	ldr	r3, [pc, #72]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000e9a:	480e      	ldr	r0, [pc, #56]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000e9c:	f001 fe7e 	bl	8002b9c <HAL_I2C_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_I2C1_Init+0x4a>
		Error_Handler();
 8000ea6:	f000 f95d 	bl	8001164 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4809      	ldr	r0, [pc, #36]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000eae:	f002 fbc5 	bl	800363c <HAL_I2CEx_ConfigAnalogFilter>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8000eb8:	f000 f954 	bl	8001164 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <MX_I2C1_Init+0x74>)
 8000ec0:	f002 fc07 	bl	80036d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_I2C1_Init+0x6e>
		Error_Handler();
 8000eca:	f000 f94b 	bl	8001164 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2400027c 	.word	0x2400027c
 8000ed8:	40005400 	.word	0x40005400
 8000edc:	60000008 	.word	0x60000008

08000ee0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef *i2cHandle) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000ee8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	22c0      	movs	r2, #192	@ 0xc0
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f008 fbc7 	bl	8009694 <memset>
	if (i2cHandle->Instance == I2C1) {
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a30      	ldr	r2, [pc, #192]	@ (8000fcc <HAL_I2C_MspInit+0xec>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d158      	bne.n	8000fc2 <HAL_I2C_MspInit+0xe2>

		/* USER CODE END I2C1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f10:	f04f 0208 	mov.w	r2, #8
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PeriphClkInitStruct.PLL3.PLL3M = 8;
 8000f1c:	2308      	movs	r3, #8
 8000f1e:	63bb      	str	r3, [r7, #56]	@ 0x38
		PeriphClkInitStruct.PLL3.PLL3N = 150;
 8000f20:	2396      	movs	r3, #150	@ 0x96
 8000f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
		PeriphClkInitStruct.PLL3.PLL3P = 10;
 8000f24:	230a      	movs	r3, #10
 8000f26:	643b      	str	r3, [r7, #64]	@ 0x40
		PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8000f28:	230a      	movs	r3, #10
 8000f2a:	647b      	str	r3, [r7, #68]	@ 0x44
		PeriphClkInitStruct.PLL3.PLL3R = 10;
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
		PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	64fb      	str	r3, [r7, #76]	@ 0x4c
		PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000f34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f38:	653b      	str	r3, [r7, #80]	@ 0x50
		PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	657b      	str	r3, [r7, #84]	@ 0x54
		PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f42:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f003 fdd8 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_I2C_MspInit+0x7a>
			Error_Handler();
 8000f56:	f000 f905 	bl	8001164 <Error_Handler>
		}

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <HAL_I2C_MspInit+0xf0>)
 8000f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f60:	4a1b      	ldr	r2, [pc, #108]	@ (8000fd0 <HAL_I2C_MspInit+0xf0>)
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <HAL_I2C_MspInit+0xf0>)
 8000f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000f78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f7c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f80:	2312      	movs	r3, #18
 8000f82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f86:	2301      	movs	r3, #1
 8000f88:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f92:	2304      	movs	r3, #4
 8000f94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <HAL_I2C_MspInit+0xf4>)
 8000fa0:	f001 fc32 	bl	8002808 <HAL_GPIO_Init>

		/* I2C1 clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8000fa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd0 <HAL_I2C_MspInit+0xf0>)
 8000fa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000faa:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <HAL_I2C_MspInit+0xf0>)
 8000fac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000fb0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fb4:	4b06      	ldr	r3, [pc, #24]	@ (8000fd0 <HAL_I2C_MspInit+0xf0>)
 8000fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fbe:	60bb      	str	r3, [r7, #8]
 8000fc0:	68bb      	ldr	r3, [r7, #8]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}
}
 8000fc2:	bf00      	nop
 8000fc4:	37e8      	adds	r7, #232	@ 0xe8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40005400 	.word	0x40005400
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	58020400 	.word	0x58020400

08000fd8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000fde:	f000 fdab 	bl	8001b38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000fe2:	f000 f83b 	bl	800105c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000fe6:	f7ff fe25 	bl	8000c34 <MX_GPIO_Init>
	MX_ETH_Init();
 8000fea:	f7ff fd09 	bl	8000a00 <MX_ETH_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000fee:	f000 fccb 	bl	8001988 <MX_USB_OTG_FS_PCD_Init>
	MX_DCMI_Init();
 8000ff2:	f7ff fc01 	bl	80007f8 <MX_DCMI_Init>
	MX_I2C1_Init();
 8000ff6:	f7ff ff33 	bl	8000e60 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000ffa:	f000 f8b9 	bl	8001170 <MX_SPI1_Init>
	MX_TIM1_Init();
 8000ffe:	f000 facd 	bl	800159c <MX_TIM1_Init>
	MX_TIM4_Init();
 8001002:	f000 fb21 	bl	8001648 <MX_TIM4_Init>
	MX_USART3_UART_Init();
 8001006:	f000 fc09 	bl	800181c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	OV5640_PowerUpSequence();
 800100a:	f7ff fbc3 	bl	8000794 <OV5640_PowerUpSequence>
	OV5640_ConfigureCamera();
 800100e:	f7ff fbe7 	bl	80007e0 <OV5640_ConfigureCamera>
	uint8_t result;
	//write format for format control register to make format rgb565

	OV5640_WriteReg(0x4300, 0x61);
 8001012:	2161      	movs	r1, #97	@ 0x61
 8001014:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 8001018:	f7ff fb32 	bl	8000680 <OV5640_WriteReg>
	OV5640_ReadReg(0x4300, &result);
 800101c:	f107 0317 	add.w	r3, r7, #23
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 8001026:	f7ff fb4f 	bl	80006c8 <OV5640_ReadReg>
	char buff3[20];
	sprintf(buff3, "result of format: %d\n\r", result);
 800102a:	7dfb      	ldrb	r3, [r7, #23]
 800102c:	461a      	mov	r2, r3
 800102e:	463b      	mov	r3, r7
 8001030:	4908      	ldr	r1, [pc, #32]	@ (8001054 <main+0x7c>)
 8001032:	4618      	mov	r0, r3
 8001034:	f008 fb0e 	bl	8009654 <siprintf>
	HAL_UART_Transmit(&huart3, buff3, strlen(buff3), HAL_MAX_DELAY);
 8001038:	463b      	mov	r3, r7
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff f950 	bl	80002e0 <strlen>
 8001040:	4603      	mov	r3, r0
 8001042:	b29a      	uxth	r2, r3
 8001044:	4639      	mov	r1, r7
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	4803      	ldr	r0, [pc, #12]	@ (8001058 <main+0x80>)
 800104c:	f006 fee0 	bl	8007e10 <HAL_UART_Transmit>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <main+0x78>
 8001054:	08009fe0 	.word	0x08009fe0
 8001058:	240003f4 	.word	0x240003f4

0800105c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b09c      	sub	sp, #112	@ 0x70
 8001060:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001062:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001066:	224c      	movs	r2, #76	@ 0x4c
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f008 fb12 	bl	8009694 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2220      	movs	r2, #32
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f008 fb0c 	bl	8009694 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800107c:	2002      	movs	r0, #2
 800107e:	f002 fca5 	bl	80039cc <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001082:	2300      	movs	r3, #0
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4b35      	ldr	r3, [pc, #212]	@ (800115c <SystemClock_Config+0x100>)
 8001088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800108a:	4a34      	ldr	r2, [pc, #208]	@ (800115c <SystemClock_Config+0x100>)
 800108c:	f023 0301 	bic.w	r3, r3, #1
 8001090:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001092:	4b32      	ldr	r3, [pc, #200]	@ (800115c <SystemClock_Config+0x100>)
 8001094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	4b30      	ldr	r3, [pc, #192]	@ (8001160 <SystemClock_Config+0x104>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001160 <SystemClock_Config+0x104>)
 80010a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001160 <SystemClock_Config+0x104>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 80010b4:	bf00      	nop
 80010b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001160 <SystemClock_Config+0x104>)
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010c2:	d1f8      	bne.n	80010b6 <SystemClock_Config+0x5a>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 80010c4:	2321      	movs	r3, #33	@ 0x21
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010cc:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80010ce:	2301      	movs	r3, #1
 80010d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	2302      	movs	r3, #2
 80010d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80010da:	2308      	movs	r3, #8
 80010dc:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLN = 480;
 80010de:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80010e2:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e8:	2304      	movs	r3, #4
 80010ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	663b      	str	r3, [r7, #96]	@ 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010f4:	2300      	movs	r3, #0
 80010f6:	66bb      	str	r3, [r7, #104]	@ 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80010fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001100:	4618      	mov	r0, r3
 8001102:	f002 fcad 	bl	8003a60 <HAL_RCC_OscConfig>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <SystemClock_Config+0xb4>
		Error_Handler();
 800110c:	f000 f82a 	bl	8001164 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001110:	233f      	movs	r3, #63	@ 0x3f
 8001112:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001114:	2303      	movs	r3, #3
 8001116:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800111c:	2308      	movs	r3, #8
 800111e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001120:	2340      	movs	r3, #64	@ 0x40
 8001122:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001124:	2340      	movs	r3, #64	@ 0x40
 8001126:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800112e:	2340      	movs	r3, #64	@ 0x40
 8001130:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001132:	1d3b      	adds	r3, r7, #4
 8001134:	2101      	movs	r1, #1
 8001136:	4618      	mov	r0, r3
 8001138:	f003 f8ec 	bl	8004314 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xea>
		Error_Handler();
 8001142:	f000 f80f 	bl	8001164 <Error_Handler>
	}
	HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8001146:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800114a:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 800114e:	2000      	movs	r0, #0
 8001150:	f003 fa96 	bl	8004680 <HAL_RCC_MCOConfig>
}
 8001154:	bf00      	nop
 8001156:	3770      	adds	r7, #112	@ 0x70
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	58000400 	.word	0x58000400
 8001160:	58024800 	.word	0x58024800

08001164 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001168:	b672      	cpsid	i
}
 800116a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <Error_Handler+0x8>

08001170 <MX_SPI1_Init>:
/* USER CODE END 0 */

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	/* USER CODE END SPI1_Init 0 */

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	hspi1.Instance = SPI1;
 8001174:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <MX_SPI1_Init+0xa8>)
 8001176:	4a29      	ldr	r2, [pc, #164]	@ (800121c <MX_SPI1_Init+0xac>)
 8001178:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800117a:	4b27      	ldr	r3, [pc, #156]	@ (8001218 <MX_SPI1_Init+0xa8>)
 800117c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001180:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001182:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <MX_SPI1_Init+0xa8>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001188:	4b23      	ldr	r3, [pc, #140]	@ (8001218 <MX_SPI1_Init+0xa8>)
 800118a:	2203      	movs	r2, #3
 800118c:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800118e:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <MX_SPI1_Init+0xa8>)
 8001190:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001194:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001196:	4b20      	ldr	r3, [pc, #128]	@ (8001218 <MX_SPI1_Init+0xa8>)
 8001198:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800119c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800119e:	4b1e      	ldr	r3, [pc, #120]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011a0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011a4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011ac:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011b4:	4b18      	ldr	r3, [pc, #96]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ba:	4b17      	ldr	r3, [pc, #92]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c6:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011cc:	635a      	str	r2, [r3, #52]	@ 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011ce:	4b12      	ldr	r3, [pc, #72]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011d4:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	63da      	str	r2, [r3, #60]	@ 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 80011da:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	641a      	str	r2, [r3, #64]	@ 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 80011e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	645a      	str	r2, [r3, #68]	@ 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	649a      	str	r2, [r3, #72]	@ 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	64da      	str	r2, [r3, #76]	@ 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011f2:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	651a      	str	r2, [r3, #80]	@ 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011f8:	4b07      	ldr	r3, [pc, #28]	@ (8001218 <MX_SPI1_Init+0xa8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011fe:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_SPI1_Init+0xa8>)
 8001200:	2200      	movs	r2, #0
 8001202:	659a      	str	r2, [r3, #88]	@ 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001204:	4804      	ldr	r0, [pc, #16]	@ (8001218 <MX_SPI1_Init+0xa8>)
 8001206:	f005 faa7 	bl	8006758 <HAL_SPI_Init>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_SPI1_Init+0xa4>
		Error_Handler();
 8001210:	f7ff ffa8 	bl	8001164 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	240002d0 	.word	0x240002d0
 800121c:	40013000 	.word	0x40013000

08001220 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef *spiHandle) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b0bc      	sub	sp, #240	@ 0xf0
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001228:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001238:	f107 0318 	add.w	r3, r7, #24
 800123c:	22c0      	movs	r2, #192	@ 0xc0
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f008 fa27 	bl	8009694 <memset>
	if (spiHandle->Instance == SPI1) {
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a4b      	ldr	r2, [pc, #300]	@ (8001378 <HAL_SPI_MspInit+0x158>)
 800124c:	4293      	cmp	r3, r2
 800124e:	f040 808e 	bne.w	800136e <HAL_SPI_MspInit+0x14e>

		/* USER CODE END SPI1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001252:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001256:	f04f 0300 	mov.w	r3, #0
 800125a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800125e:	2300      	movs	r3, #0
 8001260:	67bb      	str	r3, [r7, #120]	@ 0x78
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fc4a 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_SPI_MspInit+0x56>
			Error_Handler();
 8001272:	f7ff ff77 	bl	8001164 <Error_Handler>
		}

		/* SPI1 clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8001276:	4b41      	ldr	r3, [pc, #260]	@ (800137c <HAL_SPI_MspInit+0x15c>)
 8001278:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800127c:	4a3f      	ldr	r2, [pc, #252]	@ (800137c <HAL_SPI_MspInit+0x15c>)
 800127e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001282:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001286:	4b3d      	ldr	r3, [pc, #244]	@ (800137c <HAL_SPI_MspInit+0x15c>)
 8001288:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800128c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b39      	ldr	r3, [pc, #228]	@ (800137c <HAL_SPI_MspInit+0x15c>)
 8001296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129a:	4a38      	ldr	r2, [pc, #224]	@ (800137c <HAL_SPI_MspInit+0x15c>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a4:	4b35      	ldr	r3, [pc, #212]	@ (800137c <HAL_SPI_MspInit+0x15c>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 80012b2:	4b32      	ldr	r3, [pc, #200]	@ (800137c <HAL_SPI_MspInit+0x15c>)
 80012b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b8:	4a30      	ldr	r2, [pc, #192]	@ (800137c <HAL_SPI_MspInit+0x15c>)
 80012ba:	f043 0308 	orr.w	r3, r3, #8
 80012be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c2:	4b2e      	ldr	r3, [pc, #184]	@ (800137c <HAL_SPI_MspInit+0x15c>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOG_CLK_ENABLE();
 80012d0:	4b2a      	ldr	r3, [pc, #168]	@ (800137c <HAL_SPI_MspInit+0x15c>)
 80012d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d6:	4a29      	ldr	r2, [pc, #164]	@ (800137c <HAL_SPI_MspInit+0x15c>)
 80012d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e0:	4b26      	ldr	r3, [pc, #152]	@ (800137c <HAL_SPI_MspInit+0x15c>)
 80012e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PD7     ------> SPI1_MOSI
		 PG9     ------> SPI1_MISO
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ee:	2320      	movs	r3, #32
 80012f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001306:	2305      	movs	r3, #5
 8001308:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001310:	4619      	mov	r1, r3
 8001312:	481b      	ldr	r0, [pc, #108]	@ (8001380 <HAL_SPI_MspInit+0x160>)
 8001314:	f001 fa78 	bl	8002808 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001318:	2380      	movs	r3, #128	@ 0x80
 800131a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001330:	2305      	movs	r3, #5
 8001332:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001336:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800133a:	4619      	mov	r1, r3
 800133c:	4811      	ldr	r0, [pc, #68]	@ (8001384 <HAL_SPI_MspInit+0x164>)
 800133e:	f001 fa63 	bl	8002808 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001342:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001346:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800135c:	2305      	movs	r3, #5
 800135e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001362:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001366:	4619      	mov	r1, r3
 8001368:	4807      	ldr	r0, [pc, #28]	@ (8001388 <HAL_SPI_MspInit+0x168>)
 800136a:	f001 fa4d 	bl	8002808 <HAL_GPIO_Init>

		/* USER CODE BEGIN SPI1_MspInit 1 */

		/* USER CODE END SPI1_MspInit 1 */
	}
}
 800136e:	bf00      	nop
 8001370:	37f0      	adds	r7, #240	@ 0xf0
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40013000 	.word	0x40013000
 800137c:	58024400 	.word	0x58024400
 8001380:	58020000 	.word	0x58020000
 8001384:	58020c00 	.word	0x58020c00
 8001388:	58021800 	.word	0x58021800

0800138c <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	4b0a      	ldr	r3, [pc, #40]	@ (80013bc <HAL_MspInit+0x30>)
 8001394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001398:	4a08      	ldr	r2, [pc, #32]	@ (80013bc <HAL_MspInit+0x30>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013a2:	4b06      	ldr	r3, [pc, #24]	@ (80013bc <HAL_MspInit+0x30>)
 80013a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 80013b0:	bf00      	nop
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	58024400 	.word	0x58024400

080013c0 <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80013c4:	bf00      	nop
 80013c6:	e7fd      	b.n	80013c4 <NMI_Handler+0x4>

080013c8 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80013cc:	bf00      	nop
 80013ce:	e7fd      	b.n	80013cc <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <MemManage_Handler+0x4>

080013d8 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <BusFault_Handler+0x4>

080013e0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <UsageFault_Handler+0x4>

080013e8 <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr

080013f6 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr

08001412 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8001416:	f000 fc01 	bl	8001c1c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001428:	4a14      	ldr	r2, [pc, #80]	@ (800147c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800142a:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001434:	4b13      	ldr	r3, [pc, #76]	@ (8001484 <_sbrk+0x64>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d102      	bne.n	8001442 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <_sbrk+0x64>)
 800143e:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <_sbrk+0x68>)
 8001440:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <_sbrk+0x64>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4413      	add	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	429a      	cmp	r2, r3
 800144e:	d207      	bcs.n	8001460 <_sbrk+0x40>
		errno = ENOMEM;
 8001450:	f008 f928 	bl	80096a4 <__errno>
 8001454:	4603      	mov	r3, r0
 8001456:	220c      	movs	r2, #12
 8001458:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	e009      	b.n	8001474 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001460:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001466:	4b07      	ldr	r3, [pc, #28]	@ (8001484 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	4a05      	ldr	r2, [pc, #20]	@ (8001484 <_sbrk+0x64>)
 8001470:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	24080000 	.word	0x24080000
 8001480:	00000400 	.word	0x00000400
 8001484:	24000358 	.word	0x24000358
 8001488:	24000ab8 	.word	0x24000ab8

0800148c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001490:	4b37      	ldr	r3, [pc, #220]	@ (8001570 <SystemInit+0xe4>)
 8001492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001496:	4a36      	ldr	r2, [pc, #216]	@ (8001570 <SystemInit+0xe4>)
 8001498:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800149c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80014a0:	4b34      	ldr	r3, [pc, #208]	@ (8001574 <SystemInit+0xe8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 030f 	and.w	r3, r3, #15
 80014a8:	2b06      	cmp	r3, #6
 80014aa:	d807      	bhi.n	80014bc <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80014ac:	4b31      	ldr	r3, [pc, #196]	@ (8001574 <SystemInit+0xe8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 030f 	bic.w	r3, r3, #15
 80014b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001574 <SystemInit+0xe8>)
 80014b6:	f043 0307 	orr.w	r3, r3, #7
 80014ba:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80014bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <SystemInit+0xec>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a2d      	ldr	r2, [pc, #180]	@ (8001578 <SystemInit+0xec>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80014c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001578 <SystemInit+0xec>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80014ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <SystemInit+0xec>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	4929      	ldr	r1, [pc, #164]	@ (8001578 <SystemInit+0xec>)
 80014d4:	4b29      	ldr	r3, [pc, #164]	@ (800157c <SystemInit+0xf0>)
 80014d6:	4013      	ands	r3, r2
 80014d8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80014da:	4b26      	ldr	r3, [pc, #152]	@ (8001574 <SystemInit+0xe8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d007      	beq.n	80014f6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80014e6:	4b23      	ldr	r3, [pc, #140]	@ (8001574 <SystemInit+0xe8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 030f 	bic.w	r3, r3, #15
 80014ee:	4a21      	ldr	r2, [pc, #132]	@ (8001574 <SystemInit+0xe8>)
 80014f0:	f043 0307 	orr.w	r3, r3, #7
 80014f4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <SystemInit+0xec>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80014fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <SystemInit+0xec>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001502:	4b1d      	ldr	r3, [pc, #116]	@ (8001578 <SystemInit+0xec>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001508:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <SystemInit+0xec>)
 800150a:	4a1d      	ldr	r2, [pc, #116]	@ (8001580 <SystemInit+0xf4>)
 800150c:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800150e:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <SystemInit+0xec>)
 8001510:	4a1c      	ldr	r2, [pc, #112]	@ (8001584 <SystemInit+0xf8>)
 8001512:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001514:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <SystemInit+0xec>)
 8001516:	4a1c      	ldr	r2, [pc, #112]	@ (8001588 <SystemInit+0xfc>)
 8001518:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800151a:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <SystemInit+0xec>)
 800151c:	2200      	movs	r2, #0
 800151e:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001520:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <SystemInit+0xec>)
 8001522:	4a19      	ldr	r2, [pc, #100]	@ (8001588 <SystemInit+0xfc>)
 8001524:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001526:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <SystemInit+0xec>)
 8001528:	2200      	movs	r2, #0
 800152a:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <SystemInit+0xec>)
 800152e:	4a16      	ldr	r2, [pc, #88]	@ (8001588 <SystemInit+0xfc>)
 8001530:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <SystemInit+0xec>)
 8001534:	2200      	movs	r2, #0
 8001536:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <SystemInit+0xec>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a0e      	ldr	r2, [pc, #56]	@ (8001578 <SystemInit+0xec>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001542:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <SystemInit+0xec>)
 8001546:	2200      	movs	r2, #0
 8001548:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800154a:	4b10      	ldr	r3, [pc, #64]	@ (800158c <SystemInit+0x100>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <SystemInit+0x104>)
 8001550:	4013      	ands	r3, r2
 8001552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001556:	d202      	bcs.n	800155e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8001558:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <SystemInit+0x108>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <SystemInit+0x10c>)
 8001560:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001564:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001566:	bf00      	nop
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00
 8001574:	52002000 	.word	0x52002000
 8001578:	58024400 	.word	0x58024400
 800157c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001580:	02020200 	.word	0x02020200
 8001584:	01ff0000 	.word	0x01ff0000
 8001588:	01010280 	.word	0x01010280
 800158c:	5c001000 	.word	0x5c001000
 8001590:	ffff0000 	.word	0xffff0000
 8001594:	51008108 	.word	0x51008108
 8001598:	52004000 	.word	0x52004000

0800159c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b088      	sub	sp, #32
 80015a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80015b2:	463b      	mov	r3, r7
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80015bc:	4b20      	ldr	r3, [pc, #128]	@ (8001640 <MX_TIM1_Init+0xa4>)
 80015be:	4a21      	ldr	r2, [pc, #132]	@ (8001644 <MX_TIM1_Init+0xa8>)
 80015c0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80015c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <MX_TIM1_Init+0xa4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001640 <MX_TIM1_Init+0xa4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80015ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <MX_TIM1_Init+0xa4>)
 80015d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015d4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <MX_TIM1_Init+0xa4>)
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80015dc:	4b18      	ldr	r3, [pc, #96]	@ (8001640 <MX_TIM1_Init+0xa4>)
 80015de:	2200      	movs	r2, #0
 80015e0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e2:	4b17      	ldr	r3, [pc, #92]	@ (8001640 <MX_TIM1_Init+0xa4>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80015e8:	4815      	ldr	r0, [pc, #84]	@ (8001640 <MX_TIM1_Init+0xa4>)
 80015ea:	f005 f9f4 	bl	80069d6 <HAL_TIM_Base_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x5c>
		Error_Handler();
 80015f4:	f7ff fdb6 	bl	8001164 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK) {
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4619      	mov	r1, r3
 8001606:	480e      	ldr	r0, [pc, #56]	@ (8001640 <MX_TIM1_Init+0xa4>)
 8001608:	f005 fdb8 	bl	800717c <HAL_TIM_SlaveConfigSynchro>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8001612:	f7ff fda7 	bl	8001164 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001622:	463b      	mov	r3, r7
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	@ (8001640 <MX_TIM1_Init+0xa4>)
 8001628:	f006 fb14 	bl	8007c54 <HAL_TIMEx_MasterConfigSynchronization>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM1_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 8001632:	f7ff fd97 	bl	8001164 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	2400035c 	.word	0x2400035c
 8001644:	40010000 	.word	0x40010000

08001648 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b08e      	sub	sp, #56	@ 0x38
 800164c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800164e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800165c:	f107 031c 	add.w	r3, r7, #28
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001668:	463b      	mov	r3, r7
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
 8001676:	615a      	str	r2, [r3, #20]
 8001678:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800167a:	4b2c      	ldr	r3, [pc, #176]	@ (800172c <MX_TIM4_Init+0xe4>)
 800167c:	4a2c      	ldr	r2, [pc, #176]	@ (8001730 <MX_TIM4_Init+0xe8>)
 800167e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8001680:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <MX_TIM4_Init+0xe4>)
 8001682:	2200      	movs	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001686:	4b29      	ldr	r3, [pc, #164]	@ (800172c <MX_TIM4_Init+0xe4>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 9;
 800168c:	4b27      	ldr	r3, [pc, #156]	@ (800172c <MX_TIM4_Init+0xe4>)
 800168e:	2209      	movs	r2, #9
 8001690:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001692:	4b26      	ldr	r3, [pc, #152]	@ (800172c <MX_TIM4_Init+0xe4>)
 8001694:	2200      	movs	r2, #0
 8001696:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001698:	4b24      	ldr	r3, [pc, #144]	@ (800172c <MX_TIM4_Init+0xe4>)
 800169a:	2200      	movs	r2, #0
 800169c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 800169e:	4823      	ldr	r0, [pc, #140]	@ (800172c <MX_TIM4_Init+0xe4>)
 80016a0:	f005 f999 	bl	80069d6 <HAL_TIM_Base_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM4_Init+0x66>
		Error_Handler();
 80016aa:	f7ff fd5b 	bl	8001164 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80016b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016b8:	4619      	mov	r1, r3
 80016ba:	481c      	ldr	r0, [pc, #112]	@ (800172c <MX_TIM4_Init+0xe4>)
 80016bc:	f005 fc66 	bl	8006f8c <HAL_TIM_ConfigClockSource>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM4_Init+0x82>
		Error_Handler();
 80016c6:	f7ff fd4d 	bl	8001164 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80016ca:	4818      	ldr	r0, [pc, #96]	@ (800172c <MX_TIM4_Init+0xe4>)
 80016cc:	f005 f9da 	bl	8006a84 <HAL_TIM_PWM_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM4_Init+0x92>
		Error_Handler();
 80016d6:	f7ff fd45 	bl	8001164 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80016e2:	f107 031c 	add.w	r3, r7, #28
 80016e6:	4619      	mov	r1, r3
 80016e8:	4810      	ldr	r0, [pc, #64]	@ (800172c <MX_TIM4_Init+0xe4>)
 80016ea:	f006 fab3 	bl	8007c54 <HAL_TIMEx_MasterConfigSynchronization>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 80016f4:	f7ff fd36 	bl	8001164 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016f8:	2360      	movs	r3, #96	@ 0x60
 80016fa:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 5;
 80016fc:	2305      	movs	r3, #5
 80016fe:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8001708:	463b      	mov	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	4619      	mov	r1, r3
 800170e:	4807      	ldr	r0, [pc, #28]	@ (800172c <MX_TIM4_Init+0xe4>)
 8001710:	f005 fb28 	bl	8006d64 <HAL_TIM_PWM_ConfigChannel>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM4_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 800171a:	f7ff fd23 	bl	8001164 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800171e:	4803      	ldr	r0, [pc, #12]	@ (800172c <MX_TIM4_Init+0xe4>)
 8001720:	f000 f842 	bl	80017a8 <HAL_TIM_MspPostInit>

}
 8001724:	bf00      	nop
 8001726:	3738      	adds	r7, #56	@ 0x38
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	240003a8 	.word	0x240003a8
 8001730:	40000800 	.word	0x40000800

08001734 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *tim_baseHandle) {
 8001734:	b480      	push	{r7}
 8001736:	b085      	sub	sp, #20
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

	if (tim_baseHandle->Instance == TIM1) {
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a16      	ldr	r2, [pc, #88]	@ (800179c <HAL_TIM_Base_MspInit+0x68>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10f      	bne.n	8001766 <HAL_TIM_Base_MspInit+0x32>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* TIM1 clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001746:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001748:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800174c:	4a14      	ldr	r2, [pc, #80]	@ (80017a0 <HAL_TIM_Base_MspInit+0x6c>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001756:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001758:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_TIM4_CLK_ENABLE();
		/* USER CODE BEGIN TIM4_MspInit 1 */

		/* USER CODE END TIM4_MspInit 1 */
	}
}
 8001764:	e013      	b.n	800178e <HAL_TIM_Base_MspInit+0x5a>
	} else if (tim_baseHandle->Instance == TIM4) {
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a0e      	ldr	r2, [pc, #56]	@ (80017a4 <HAL_TIM_Base_MspInit+0x70>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d10e      	bne.n	800178e <HAL_TIM_Base_MspInit+0x5a>
		__HAL_RCC_TIM4_CLK_ENABLE();
 8001770:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001772:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001776:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001778:	f043 0304 	orr.w	r3, r3, #4
 800177c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001780:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <HAL_TIM_Base_MspInit+0x6c>)
 8001782:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
}
 800178e:	bf00      	nop
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40010000 	.word	0x40010000
 80017a0:	58024400 	.word	0x58024400
 80017a4:	40000800 	.word	0x40000800

080017a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *timHandle) {
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b088      	sub	sp, #32
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
	if (timHandle->Instance == TIM4) {
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a12      	ldr	r2, [pc, #72]	@ (8001810 <HAL_TIM_MspPostInit+0x68>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d11e      	bne.n	8001808 <HAL_TIM_MspPostInit+0x60>
		/* USER CODE BEGIN TIM4_MspPostInit 0 */

		/* USER CODE END TIM4_MspPostInit 0 */

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_TIM_MspPostInit+0x6c>)
 80017cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d0:	4a10      	ldr	r2, [pc, #64]	@ (8001814 <HAL_TIM_MspPostInit+0x6c>)
 80017d2:	f043 0302 	orr.w	r3, r3, #2
 80017d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_TIM_MspPostInit+0x6c>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	60bb      	str	r3, [r7, #8]
 80017e6:	68bb      	ldr	r3, [r7, #8]
		/**TIM4 GPIO Configuration
		 PB6     ------> TIM4_CH1
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017e8:	2340      	movs	r3, #64	@ 0x40
 80017ea:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	4619      	mov	r1, r3
 8001802:	4805      	ldr	r0, [pc, #20]	@ (8001818 <HAL_TIM_MspPostInit+0x70>)
 8001804:	f001 f800 	bl	8002808 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM4_MspPostInit 1 */

		/* USER CODE END TIM4_MspPostInit 1 */
	}

}
 8001808:	bf00      	nop
 800180a:	3720      	adds	r7, #32
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40000800 	.word	0x40000800
 8001814:	58024400 	.word	0x58024400
 8001818:	58020400 	.word	0x58020400

0800181c <MX_USART3_UART_Init>:

UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void) {
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001820:	4b22      	ldr	r3, [pc, #136]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 8001822:	4a23      	ldr	r2, [pc, #140]	@ (80018b0 <MX_USART3_UART_Init+0x94>)
 8001824:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001826:	4b21      	ldr	r3, [pc, #132]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 8001828:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800182c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800182e:	4b1f      	ldr	r3, [pc, #124]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001834:	4b1d      	ldr	r3, [pc, #116]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800183a:	4b1c      	ldr	r3, [pc, #112]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001840:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 8001842:	220c      	movs	r2, #12
 8001844:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001846:	4b19      	ldr	r3, [pc, #100]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 8001848:	2200      	movs	r2, #0
 800184a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800184c:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 800184e:	2200      	movs	r2, #0
 8001850:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001852:	4b16      	ldr	r3, [pc, #88]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 8001854:	2200      	movs	r2, #0
 8001856:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001858:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 800185a:	2200      	movs	r2, #0
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800185e:	4b13      	ldr	r3, [pc, #76]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 8001860:	2200      	movs	r2, #0
 8001862:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001864:	4811      	ldr	r0, [pc, #68]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 8001866:	f006 fa83 	bl	8007d70 <HAL_UART_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_USART3_UART_Init+0x58>
		Error_Handler();
 8001870:	f7ff fc78 	bl	8001164 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8)
 8001874:	2100      	movs	r1, #0
 8001876:	480d      	ldr	r0, [pc, #52]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 8001878:	f007 fb19 	bl	8008eae <HAL_UARTEx_SetTxFifoThreshold>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <MX_USART3_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001882:	f7ff fc6f 	bl	8001164 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8)
 8001886:	2100      	movs	r1, #0
 8001888:	4808      	ldr	r0, [pc, #32]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 800188a:	f007 fb4e 	bl	8008f2a <HAL_UARTEx_SetRxFifoThreshold>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_USART3_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001894:	f7ff fc66 	bl	8001164 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK) {
 8001898:	4804      	ldr	r0, [pc, #16]	@ (80018ac <MX_USART3_UART_Init+0x90>)
 800189a:	f007 facf 	bl	8008e3c <HAL_UARTEx_DisableFifoMode>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_USART3_UART_Init+0x8c>
		Error_Handler();
 80018a4:	f7ff fc5e 	bl	8001164 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	240003f4 	.word	0x240003f4
 80018b0:	40004800 	.word	0x40004800

080018b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0ba      	sub	sp, #232	@ 0xe8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	22c0      	movs	r2, #192	@ 0xc0
 80018d2:	2100      	movs	r1, #0
 80018d4:	4618      	mov	r0, r3
 80018d6:	f007 fedd 	bl	8009694 <memset>
	if (uartHandle->Instance == USART3) {
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a27      	ldr	r2, [pc, #156]	@ (800197c <HAL_UART_MspInit+0xc8>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d146      	bne.n	8001972 <HAL_UART_MspInit+0xbe>

		/* USER CODE END USART3_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018e4:	f04f 0202 	mov.w	r2, #2
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PeriphClkInitStruct.Usart234578ClockSelection =
 80018f0:	2300      	movs	r3, #0
 80018f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
				RCC_USART234578CLKSOURCE_D2PCLK1;
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80018f6:	f107 0310 	add.w	r3, r7, #16
 80018fa:	4618      	mov	r0, r3
 80018fc:	f003 f900 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <HAL_UART_MspInit+0x56>
			Error_Handler();
 8001906:	f7ff fc2d 	bl	8001164 <Error_Handler>
		}

		/* USART3 clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 800190a:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <HAL_UART_MspInit+0xcc>)
 800190c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001910:	4a1b      	ldr	r2, [pc, #108]	@ (8001980 <HAL_UART_MspInit+0xcc>)
 8001912:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001916:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800191a:	4b19      	ldr	r3, [pc, #100]	@ (8001980 <HAL_UART_MspInit+0xcc>)
 800191c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001920:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8001928:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_UART_MspInit+0xcc>)
 800192a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800192e:	4a14      	ldr	r2, [pc, #80]	@ (8001980 <HAL_UART_MspInit+0xcc>)
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <HAL_UART_MspInit+0xcc>)
 800193a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	60bb      	str	r3, [r7, #8]
 8001944:	68bb      	ldr	r3, [r7, #8]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8001946:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800194a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001960:	2307      	movs	r3, #7
 8001962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001966:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	@ (8001984 <HAL_UART_MspInit+0xd0>)
 800196e:	f000 ff4b 	bl	8002808 <HAL_GPIO_Init>

		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 8001972:	bf00      	nop
 8001974:	37e8      	adds	r7, #232	@ 0xe8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40004800 	.word	0x40004800
 8001980:	58024400 	.word	0x58024400
 8001984:	58020c00 	.word	0x58020c00

08001988 <MX_USB_OTG_FS_PCD_Init>:

PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void) {
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800198c:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800198e:	4a16      	ldr	r2, [pc, #88]	@ (80019e8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001990:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001992:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001994:	2209      	movs	r2, #9
 8001996:	711a      	strb	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001998:	4b12      	ldr	r3, [pc, #72]	@ (80019e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800199a:	2202      	movs	r2, #2
 800199c:	71da      	strb	r2, [r3, #7]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800199e:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	719a      	strb	r2, [r3, #6]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019a6:	2202      	movs	r2, #2
 80019a8:	725a      	strb	r2, [r3, #9]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	729a      	strb	r2, [r3, #10]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	72da      	strb	r2, [r3, #11]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	731a      	strb	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80019bc:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019be:	2201      	movs	r2, #1
 80019c0:	735a      	strb	r2, [r3, #13]
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	739a      	strb	r2, [r3, #14]
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	73da      	strb	r2, [r3, #15]
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80019ce:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019d0:	f001 fecb 	bl	800376a <HAL_PCD_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_USB_OTG_FS_PCD_Init+0x56>
		Error_Handler();
 80019da:	f7ff fbc3 	bl	8001164 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	24000488 	.word	0x24000488
 80019e8:	40080000 	.word	0x40080000

080019ec <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef *pcdHandle) {
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0ba      	sub	sp, #232	@ 0xe8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019f4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	22c0      	movs	r2, #192	@ 0xc0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f007 fe41 	bl	8009694 <memset>
	if (pcdHandle->Instance == USB_OTG_FS) {
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a30      	ldr	r2, [pc, #192]	@ (8001ad8 <HAL_PCD_MspInit+0xec>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d159      	bne.n	8001ad0 <HAL_PCD_MspInit+0xe4>

		/* USER CODE END USB_OTG_FS_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a1c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001a28:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001a2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 f863 	bl	8004b00 <HAL_RCCEx_PeriphCLKConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <HAL_PCD_MspInit+0x58>
			Error_Handler();
 8001a40:	f7ff fb90 	bl	8001164 <Error_Handler>
		}

		/** Enable USB Voltage detector
		 */
		HAL_PWREx_EnableUSBVoltageDetector();
 8001a44:	f001 fffc 	bl	8003a40 <HAL_PWREx_EnableUSBVoltageDetector>

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a48:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <HAL_PCD_MspInit+0xf0>)
 8001a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a4e:	4a23      	ldr	r2, [pc, #140]	@ (8001adc <HAL_PCD_MspInit+0xf0>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a58:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <HAL_PCD_MspInit+0xf0>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
		/**USB_OTG_FS GPIO Configuration
		 PA9     ------> USB_OTG_FS_VBUS
		 PA11     ------> USB_OTG_FS_DM
		 PA12     ------> USB_OTG_FS_DP
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a7a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4817      	ldr	r0, [pc, #92]	@ (8001ae0 <HAL_PCD_MspInit+0xf4>)
 8001a82:	f000 fec1 	bl	8002808 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8001a86:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001aa0:	230a      	movs	r3, #10
 8001aa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480c      	ldr	r0, [pc, #48]	@ (8001ae0 <HAL_PCD_MspInit+0xf4>)
 8001aae:	f000 feab 	bl	8002808 <HAL_GPIO_Init>

		/* USB_OTG_FS clock enable */
		__HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <HAL_PCD_MspInit+0xf0>)
 8001ab4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ab8:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <HAL_PCD_MspInit+0xf0>)
 8001aba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001abe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001ac2:	4b06      	ldr	r3, [pc, #24]	@ (8001adc <HAL_PCD_MspInit+0xf0>)
 8001ac4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
		/* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

		/* USER CODE END USB_OTG_FS_MspInit 1 */
	}
}
 8001ad0:	bf00      	nop
 8001ad2:	37e8      	adds	r7, #232	@ 0xe8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40080000 	.word	0x40080000
 8001adc:	58024400 	.word	0x58024400
 8001ae0:	58020000 	.word	0x58020000

08001ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ae4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ae8:	f7ff fcd0 	bl	800148c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001aec:	480c      	ldr	r0, [pc, #48]	@ (8001b20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001aee:	490d      	ldr	r1, [pc, #52]	@ (8001b24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001af0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af4:	e002      	b.n	8001afc <LoopCopyDataInit>

08001af6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001af6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001af8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afa:	3304      	adds	r3, #4

08001afc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001afc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001afe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b00:	d3f9      	bcc.n	8001af6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b02:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b04:	4c0a      	ldr	r4, [pc, #40]	@ (8001b30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b08:	e001      	b.n	8001b0e <LoopFillZerobss>

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b0c:	3204      	adds	r2, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b12:	f007 fdcd 	bl	80096b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b16:	f7ff fa5f 	bl	8000fd8 <main>
  bx  lr
 8001b1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b24:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001b28:	0800a074 	.word	0x0800a074
  ldr r2, =_sbss
 8001b2c:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8001b30:	24000ab8 	.word	0x24000ab8

08001b34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b34:	e7fe      	b.n	8001b34 <ADC3_IRQHandler>
	...

08001b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b3e:	2003      	movs	r0, #3
 8001b40:	f000 f982 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b44:	f002 fe06 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <HAL_Init+0x68>)
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	0a1b      	lsrs	r3, r3, #8
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	4913      	ldr	r1, [pc, #76]	@ (8001ba4 <HAL_Init+0x6c>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b62:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <HAL_Init+0x68>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba4 <HAL_Init+0x6c>)
 8001b6c:	5cd3      	ldrb	r3, [r2, r3]
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba8 <HAL_Init+0x70>)
 8001b7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001bac <HAL_Init+0x74>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b82:	2000      	movs	r0, #0
 8001b84:	f000 f814 	bl	8001bb0 <HAL_InitTick>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e002      	b.n	8001b98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b92:	f7ff fbfb 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	58024400 	.word	0x58024400
 8001ba4:	08009ff8 	.word	0x08009ff8
 8001ba8:	24000004 	.word	0x24000004
 8001bac:	24000000 	.word	0x24000000

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bb8:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <HAL_InitTick+0x60>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e021      	b.n	8001c08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bc4:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <HAL_InitTick+0x64>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <HAL_InitTick+0x60>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f959 	bl	8001e92 <HAL_SYSTICK_Config>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2b0f      	cmp	r3, #15
 8001bee:	d80a      	bhi.n	8001c06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f000 f931 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	@ (8001c18 <HAL_InitTick+0x68>)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
 8001c04:	e000      	b.n	8001c08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	2400000c 	.word	0x2400000c
 8001c14:	24000000 	.word	0x24000000
 8001c18:	24000008 	.word	0x24000008

08001c1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c20:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <HAL_IncTick+0x20>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	461a      	mov	r2, r3
 8001c26:	4b06      	ldr	r3, [pc, #24]	@ (8001c40 <HAL_IncTick+0x24>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	4a04      	ldr	r2, [pc, #16]	@ (8001c40 <HAL_IncTick+0x24>)
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	2400000c 	.word	0x2400000c
 8001c40:	2400096c 	.word	0x2400096c

08001c44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return uwTick;
 8001c48:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <HAL_GetTick+0x14>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	2400096c 	.word	0x2400096c

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c64:	f7ff ffee 	bl	8001c44 <HAL_GetTick>
 8001c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c74:	d005      	beq.n	8001c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_Delay+0x44>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4413      	add	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c82:	bf00      	nop
 8001c84:	f7ff ffde 	bl	8001c44 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d8f7      	bhi.n	8001c84 <HAL_Delay+0x28>
  {
  }
}
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	2400000c 	.word	0x2400000c

08001ca4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ca8:	4b03      	ldr	r3, [pc, #12]	@ (8001cb8 <HAL_GetREVID+0x14>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	0c1b      	lsrs	r3, r3, #16
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	5c001000 	.word	0x5c001000

08001cbc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001ccc:	4904      	ldr	r1, [pc, #16]	@ (8001ce0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	58000400 	.word	0x58000400

08001ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x40>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cfa:	68ba      	ldr	r2, [r7, #8]
 8001cfc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d00:	4013      	ands	r3, r2
 8001d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d12:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <__NVIC_SetPriorityGrouping+0x40>)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	60d3      	str	r3, [r2, #12]
}
 8001d18:	bf00      	nop
 8001d1a:	3714      	adds	r7, #20
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	e000ed00 	.word	0xe000ed00
 8001d28:	05fa0000 	.word	0x05fa0000

08001d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d30:	4b04      	ldr	r3, [pc, #16]	@ (8001d44 <__NVIC_GetPriorityGrouping+0x18>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	f003 0307 	and.w	r3, r3, #7
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	6039      	str	r1, [r7, #0]
 8001d52:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	db0a      	blt.n	8001d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	490c      	ldr	r1, [pc, #48]	@ (8001d94 <__NVIC_SetPriority+0x4c>)
 8001d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d66:	0112      	lsls	r2, r2, #4
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	440b      	add	r3, r1
 8001d6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d70:	e00a      	b.n	8001d88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	4908      	ldr	r1, [pc, #32]	@ (8001d98 <__NVIC_SetPriority+0x50>)
 8001d78:	88fb      	ldrh	r3, [r7, #6]
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	3b04      	subs	r3, #4
 8001d80:	0112      	lsls	r2, r2, #4
 8001d82:	b2d2      	uxtb	r2, r2
 8001d84:	440b      	add	r3, r1
 8001d86:	761a      	strb	r2, [r3, #24]
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000e100 	.word	0xe000e100
 8001d98:	e000ed00 	.word	0xe000ed00

08001d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	@ 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f1c3 0307 	rsb	r3, r3, #7
 8001db6:	2b04      	cmp	r3, #4
 8001db8:	bf28      	it	cs
 8001dba:	2304      	movcs	r3, #4
 8001dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	2b06      	cmp	r3, #6
 8001dc4:	d902      	bls.n	8001dcc <NVIC_EncodePriority+0x30>
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	3b03      	subs	r3, #3
 8001dca:	e000      	b.n	8001dce <NVIC_EncodePriority+0x32>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	401a      	ands	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de4:	f04f 31ff 	mov.w	r1, #4294967295
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	fa01 f303 	lsl.w	r3, r1, r3
 8001dee:	43d9      	mvns	r1, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	4313      	orrs	r3, r2
         );
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	@ 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff8e 	bl	8001d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	@ (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff47 	bl	8001ce4 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e6c:	f7ff ff5e 	bl	8001d2c <__NVIC_GetPriorityGrouping>
 8001e70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	68b9      	ldr	r1, [r7, #8]
 8001e76:	6978      	ldr	r0, [r7, #20]
 8001e78:	f7ff ff90 	bl	8001d9c <NVIC_EncodePriority>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff ff5f 	bl	8001d48 <__NVIC_SetPriority>
}
 8001e8a:	bf00      	nop
 8001e8c:	3718      	adds	r7, #24
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff ffb2 	bl	8001e04 <SysTick_Config>
 8001ea0:	4603      	mov	r3, r0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e069      	b.n	8001f92 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d102      	bne.n	8001ed0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fcc8 	bl	8000860 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6819      	ldr	r1, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f9c <HAL_DCMI_Init+0xf0>)
 8001ef2:	400b      	ands	r3, r1
 8001ef4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6819      	ldr	r1, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001f0a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001f16:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001f22:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001f2e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f34:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001f3a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b10      	cmp	r3, #16
 8001f4a:	d112      	bne.n	8001f72 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7f1b      	ldrb	r3, [r3, #28]
 8001f50:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7f5b      	ldrb	r3, [r3, #29]
 8001f56:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001f58:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7f9b      	ldrb	r3, [r3, #30]
 8001f5e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001f60:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7fdb      	ldrb	r3, [r3, #31]
 8001f68:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001f6e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001f70:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	68da      	ldr	r2, [r3, #12]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f042 021e 	orr.w	r2, r2, #30
 8001f80:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	ffe0f007 	.word	0xffe0f007

08001fa0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0e3      	b.n	800217a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2223      	movs	r2, #35	@ 0x23
 8001fc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f7fe fd67 	bl	8000a98 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	4b6e      	ldr	r3, [pc, #440]	@ (8002184 <HAL_ETH_Init+0x1e4>)
 8001fcc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fd0:	4a6c      	ldr	r2, [pc, #432]	@ (8002184 <HAL_ETH_Init+0x1e4>)
 8001fd2:	f043 0302 	orr.w	r3, r3, #2
 8001fd6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fda:	4b6a      	ldr	r3, [pc, #424]	@ (8002184 <HAL_ETH_Init+0x1e4>)
 8001fdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7a1b      	ldrb	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d103      	bne.n	8001ff8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7ff fe63 	bl	8001cbc <HAL_SYSCFG_ETHInterfaceSelect>
 8001ff6:	e003      	b.n	8002000 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001ff8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001ffc:	f7ff fe5e 	bl	8001cbc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002000:	4b61      	ldr	r3, [pc, #388]	@ (8002188 <HAL_ETH_Init+0x1e8>)
 8002002:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800201a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800201c:	f7ff fe12 	bl	8001c44 <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002022:	e011      	b.n	8002048 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002024:	f7ff fe0e 	bl	8001c44 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002032:	d909      	bls.n	8002048 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2204      	movs	r2, #4
 8002038:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	22e0      	movs	r2, #224	@ 0xe0
 8002040:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e098      	b.n	800217a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1e4      	bne.n	8002024 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f89e 	bl	800219c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002060:	f002 fcf2 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 8002064:	4603      	mov	r3, r0
 8002066:	4a49      	ldr	r2, [pc, #292]	@ (800218c <HAL_ETH_Init+0x1ec>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	0c9a      	lsrs	r2, r3, #18
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	3a01      	subs	r2, #1
 8002074:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 fa81 	bl	8002580 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002086:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800208a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002096:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800209a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	22e0      	movs	r2, #224	@ 0xe0
 80020b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e05d      	b.n	800217a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020c6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80020ca:	4b31      	ldr	r3, [pc, #196]	@ (8002190 <HAL_ETH_Init+0x1f0>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	6952      	ldr	r2, [r2, #20]
 80020d2:	0051      	lsls	r1, r2, #1
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	430b      	orrs	r3, r1
 80020da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020de:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 fae9 	bl	80026ba <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fb2f 	bl	800274c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	3305      	adds	r3, #5
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	021a      	lsls	r2, r3, #8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	3304      	adds	r3, #4
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	3303      	adds	r3, #3
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	061a      	lsls	r2, r3, #24
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	3302      	adds	r3, #2
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	041b      	lsls	r3, r3, #16
 8002120:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	3301      	adds	r3, #1
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800212c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800213a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800213c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b11      	ldr	r3, [pc, #68]	@ (8002194 <HAL_ETH_Init+0x1f4>)
 800214e:	430b      	orrs	r3, r1
 8002150:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b0d      	ldr	r3, [pc, #52]	@ (8002198 <HAL_ETH_Init+0x1f8>)
 8002162:	430b      	orrs	r3, r1
 8002164:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2210      	movs	r2, #16
 8002174:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	58024400 	.word	0x58024400
 8002188:	58000400 	.word	0x58000400
 800218c:	431bde83 	.word	0x431bde83
 8002190:	ffff8001 	.word	0xffff8001
 8002194:	0c020060 	.word	0x0c020060
 8002198:	0c20c000 	.word	0x0c20c000

0800219c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80021b6:	f002 fc47 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 80021ba:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4a1a      	ldr	r2, [pc, #104]	@ (8002228 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d804      	bhi.n	80021ce <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	e022      	b.n	8002214 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	4a16      	ldr	r2, [pc, #88]	@ (800222c <HAL_ETH_SetMDIOClockRange+0x90>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d204      	bcs.n	80021e0 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	e019      	b.n	8002214 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	4a13      	ldr	r2, [pc, #76]	@ (8002230 <HAL_ETH_SetMDIOClockRange+0x94>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d915      	bls.n	8002214 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <HAL_ETH_SetMDIOClockRange+0x98>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d804      	bhi.n	80021fa <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e00c      	b.n	8002214 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002238 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d804      	bhi.n	800220c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	e003      	b.n	8002214 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002212:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	02160ebf 	.word	0x02160ebf
 800222c:	03938700 	.word	0x03938700
 8002230:	05f5e0ff 	.word	0x05f5e0ff
 8002234:	08f0d17f 	.word	0x08f0d17f
 8002238:	0ee6b27f 	.word	0x0ee6b27f

0800223c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800224e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	791b      	ldrb	r3, [r3, #4]
 8002254:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002256:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	7b1b      	ldrb	r3, [r3, #12]
 800225c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800225e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	7b5b      	ldrb	r3, [r3, #13]
 8002264:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002266:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	7b9b      	ldrb	r3, [r3, #14]
 800226c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800226e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	7bdb      	ldrb	r3, [r3, #15]
 8002274:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002276:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	7c12      	ldrb	r2, [r2, #16]
 800227c:	2a00      	cmp	r2, #0
 800227e:	d102      	bne.n	8002286 <ETH_SetMACConfig+0x4a>
 8002280:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002284:	e000      	b.n	8002288 <ETH_SetMACConfig+0x4c>
 8002286:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002288:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	7c52      	ldrb	r2, [r2, #17]
 800228e:	2a00      	cmp	r2, #0
 8002290:	d102      	bne.n	8002298 <ETH_SetMACConfig+0x5c>
 8002292:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002296:	e000      	b.n	800229a <ETH_SetMACConfig+0x5e>
 8002298:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800229a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	7c9b      	ldrb	r3, [r3, #18]
 80022a0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80022a2:	431a      	orrs	r2, r3
               macconf->Speed |
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80022a8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80022ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	7f1b      	ldrb	r3, [r3, #28]
 80022b4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80022b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	7f5b      	ldrb	r3, [r3, #29]
 80022bc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80022be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	7f92      	ldrb	r2, [r2, #30]
 80022c4:	2a00      	cmp	r2, #0
 80022c6:	d102      	bne.n	80022ce <ETH_SetMACConfig+0x92>
 80022c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022cc:	e000      	b.n	80022d0 <ETH_SetMACConfig+0x94>
 80022ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80022d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	7fdb      	ldrb	r3, [r3, #31]
 80022d6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80022d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022e0:	2a00      	cmp	r2, #0
 80022e2:	d102      	bne.n	80022ea <ETH_SetMACConfig+0xae>
 80022e4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022e8:	e000      	b.n	80022ec <ETH_SetMACConfig+0xb0>
 80022ea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80022ec:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80022f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80022fa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80022fc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002302:	4313      	orrs	r3, r2
 8002304:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b56      	ldr	r3, [pc, #344]	@ (8002468 <ETH_SetMACConfig+0x22c>)
 800230e:	4013      	ands	r3, r2
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	6812      	ldr	r2, [r2, #0]
 8002314:	68f9      	ldr	r1, [r7, #12]
 8002316:	430b      	orrs	r3, r1
 8002318:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002326:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002328:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002330:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002332:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800233a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800233c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002344:	2a00      	cmp	r2, #0
 8002346:	d102      	bne.n	800234e <ETH_SetMACConfig+0x112>
 8002348:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800234c:	e000      	b.n	8002350 <ETH_SetMACConfig+0x114>
 800234e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002350:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002356:	4313      	orrs	r3, r2
 8002358:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4b42      	ldr	r3, [pc, #264]	@ (800246c <ETH_SetMACConfig+0x230>)
 8002362:	4013      	ands	r3, r2
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6812      	ldr	r2, [r2, #0]
 8002368:	68f9      	ldr	r1, [r7, #12]
 800236a:	430b      	orrs	r3, r1
 800236c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002374:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	4b3a      	ldr	r3, [pc, #232]	@ (8002470 <ETH_SetMACConfig+0x234>)
 8002386:	4013      	ands	r3, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	68f9      	ldr	r1, [r7, #12]
 800238e:	430b      	orrs	r3, r1
 8002390:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002398:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800239e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80023a6:	2a00      	cmp	r2, #0
 80023a8:	d101      	bne.n	80023ae <ETH_SetMACConfig+0x172>
 80023aa:	2280      	movs	r2, #128	@ 0x80
 80023ac:	e000      	b.n	80023b0 <ETH_SetMACConfig+0x174>
 80023ae:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80023b0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80023c2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80023c6:	4013      	ands	r3, r2
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	68f9      	ldr	r1, [r7, #12]
 80023ce:	430b      	orrs	r3, r1
 80023d0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80023d8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80023e0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ee:	f023 0103 	bic.w	r1, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002406:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002422:	2a00      	cmp	r2, #0
 8002424:	d101      	bne.n	800242a <ETH_SetMACConfig+0x1ee>
 8002426:	2240      	movs	r2, #64	@ 0x40
 8002428:	e000      	b.n	800242c <ETH_SetMACConfig+0x1f0>
 800242a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800242c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002434:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002436:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800243e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002440:	4313      	orrs	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800244c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	430a      	orrs	r2, r1
 8002458:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	00048083 	.word	0x00048083
 800246c:	c0f88000 	.word	0xc0f88000
 8002470:	fffffef0 	.word	0xfffffef0

08002474 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b38      	ldr	r3, [pc, #224]	@ (800256c <ETH_SetDMAConfig+0xf8>)
 800248a:	4013      	ands	r3, r2
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	6811      	ldr	r1, [r2, #0]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	430b      	orrs	r3, r1
 8002496:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800249a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	791b      	ldrb	r3, [r3, #4]
 80024a0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024a6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	7b1b      	ldrb	r3, [r3, #12]
 80024ac:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002570 <ETH_SetDMAConfig+0xfc>)
 80024be:	4013      	ands	r3, r2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	68f9      	ldr	r1, [r7, #12]
 80024c6:	430b      	orrs	r3, r1
 80024c8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024cc:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	7b5b      	ldrb	r3, [r3, #13]
 80024d2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024e4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80024e8:	4b22      	ldr	r3, [pc, #136]	@ (8002574 <ETH_SetDMAConfig+0x100>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	68f9      	ldr	r1, [r7, #12]
 80024f2:	430b      	orrs	r3, r1
 80024f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024f8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	7d1b      	ldrb	r3, [r3, #20]
 8002504:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002506:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	7f5b      	ldrb	r3, [r3, #29]
 800250c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800250e:	4313      	orrs	r3, r2
 8002510:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800251a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800251e:	4b16      	ldr	r3, [pc, #88]	@ (8002578 <ETH_SetDMAConfig+0x104>)
 8002520:	4013      	ands	r3, r2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	68f9      	ldr	r1, [r7, #12]
 8002528:	430b      	orrs	r3, r1
 800252a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800252e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	7f1b      	ldrb	r3, [r3, #28]
 8002536:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002548:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800254c:	4b0b      	ldr	r3, [pc, #44]	@ (800257c <ETH_SetDMAConfig+0x108>)
 800254e:	4013      	ands	r3, r2
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	68f9      	ldr	r1, [r7, #12]
 8002556:	430b      	orrs	r3, r1
 8002558:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800255c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	ffff87fd 	.word	0xffff87fd
 8002570:	ffff2ffe 	.word	0xffff2ffe
 8002574:	fffec000 	.word	0xfffec000
 8002578:	ffc0efef 	.word	0xffc0efef
 800257c:	7fc0ffff 	.word	0x7fc0ffff

08002580 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b0a4      	sub	sp, #144	@ 0x90
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002588:	2301      	movs	r3, #1
 800258a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800258e:	2300      	movs	r3, #0
 8002590:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80025a4:	2301      	movs	r3, #1
 80025a6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80025b6:	2301      	movs	r3, #1
 80025b8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80025bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025c0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80025c2:	2300      	movs	r3, #0
 80025c4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80025d8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80025dc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80025e4:	2300      	movs	r3, #0
 80025e6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80025f4:	2300      	movs	r3, #0
 80025f6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80025fa:	2300      	movs	r3, #0
 80025fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002602:	2300      	movs	r3, #0
 8002604:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800260c:	2300      	movs	r3, #0
 800260e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002612:	2301      	movs	r3, #1
 8002614:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002618:	2320      	movs	r3, #32
 800261a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002624:	2300      	movs	r3, #0
 8002626:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800262a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800262e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002630:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002634:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002636:	2300      	movs	r3, #0
 8002638:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800263c:	2302      	movs	r3, #2
 800263e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002654:	2301      	movs	r3, #1
 8002656:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800265a:	2300      	movs	r3, #0
 800265c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800265e:	2301      	movs	r3, #1
 8002660:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002664:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002668:	4619      	mov	r1, r3
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff fde6 	bl	800223c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002670:	2301      	movs	r3, #1
 8002672:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002674:	2301      	movs	r3, #1
 8002676:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002678:	2300      	movs	r3, #0
 800267a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800267c:	2300      	movs	r3, #0
 800267e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800268a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800268e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002694:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002698:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800269a:	2300      	movs	r3, #0
 800269c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80026a0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80026a4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026a6:	f107 0308 	add.w	r3, r7, #8
 80026aa:	4619      	mov	r1, r3
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f7ff fee1 	bl	8002474 <ETH_SetDMAConfig>
}
 80026b2:	bf00      	nop
 80026b4:	3790      	adds	r7, #144	@ 0x90
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b085      	sub	sp, #20
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
 80026c6:	e01d      	b.n	8002704 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68d9      	ldr	r1, [r3, #12]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4613      	mov	r3, r2
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	440b      	add	r3, r1
 80026d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2200      	movs	r2, #0
 80026e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	3206      	adds	r2, #6
 80026fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	3301      	adds	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d9de      	bls.n	80026c8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002718:	461a      	mov	r2, r3
 800271a:	2303      	movs	r3, #3
 800271c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	68da      	ldr	r2, [r3, #12]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800272c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800273c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002740:	bf00      	nop
 8002742:	3714      	adds	r7, #20
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800274c:	b480      	push	{r7}
 800274e:	b085      	sub	sp, #20
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002754:	2300      	movs	r3, #0
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	e023      	b.n	80027a2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6919      	ldr	r1, [r3, #16]
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4613      	mov	r3, r2
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4413      	add	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	440b      	add	r3, r1
 800276a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2200      	movs	r2, #0
 8002776:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	2200      	movs	r2, #0
 8002782:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2200      	movs	r2, #0
 800278e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	3212      	adds	r2, #18
 8002798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	3301      	adds	r3, #1
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b03      	cmp	r3, #3
 80027a6:	d9d8      	bls.n	800275a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2200      	movs	r2, #0
 80027b8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027ce:	461a      	mov	r2, r3
 80027d0:	2303      	movs	r3, #3
 80027d2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691a      	ldr	r2, [r3, #16]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027e2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027f6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 80027fa:	bf00      	nop
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
	...

08002808 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	@ 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002816:	4b89      	ldr	r3, [pc, #548]	@ (8002a3c <HAL_GPIO_Init+0x234>)
 8002818:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800281a:	e194      	b.n	8002b46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	2101      	movs	r1, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa01 f303 	lsl.w	r3, r1, r3
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f000 8186 	beq.w	8002b40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d005      	beq.n	800284c <HAL_GPIO_Init+0x44>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f003 0303 	and.w	r3, r3, #3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d130      	bne.n	80028ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	2203      	movs	r2, #3
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4313      	orrs	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002882:	2201      	movs	r2, #1
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43db      	mvns	r3, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4013      	ands	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 0201 	and.w	r2, r3, #1
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b03      	cmp	r3, #3
 80028b8:	d017      	beq.n	80028ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	2203      	movs	r2, #3
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d123      	bne.n	800293e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	08da      	lsrs	r2, r3, #3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3208      	adds	r2, #8
 80028fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0307 	and.w	r3, r3, #7
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	220f      	movs	r2, #15
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	691a      	ldr	r2, [r3, #16]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4313      	orrs	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	08da      	lsrs	r2, r3, #3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	3208      	adds	r2, #8
 8002938:	69b9      	ldr	r1, [r7, #24]
 800293a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	2203      	movs	r2, #3
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f003 0203 	and.w	r2, r3, #3
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800297a:	2b00      	cmp	r3, #0
 800297c:	f000 80e0 	beq.w	8002b40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002980:	4b2f      	ldr	r3, [pc, #188]	@ (8002a40 <HAL_GPIO_Init+0x238>)
 8002982:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002986:	4a2e      	ldr	r2, [pc, #184]	@ (8002a40 <HAL_GPIO_Init+0x238>)
 8002988:	f043 0302 	orr.w	r3, r3, #2
 800298c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002990:	4b2b      	ldr	r3, [pc, #172]	@ (8002a40 <HAL_GPIO_Init+0x238>)
 8002992:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800299e:	4a29      	ldr	r2, [pc, #164]	@ (8002a44 <HAL_GPIO_Init+0x23c>)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	220f      	movs	r2, #15
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a20      	ldr	r2, [pc, #128]	@ (8002a48 <HAL_GPIO_Init+0x240>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d052      	beq.n	8002a70 <HAL_GPIO_Init+0x268>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a1f      	ldr	r2, [pc, #124]	@ (8002a4c <HAL_GPIO_Init+0x244>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d031      	beq.n	8002a36 <HAL_GPIO_Init+0x22e>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a50 <HAL_GPIO_Init+0x248>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d02b      	beq.n	8002a32 <HAL_GPIO_Init+0x22a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002a54 <HAL_GPIO_Init+0x24c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d025      	beq.n	8002a2e <HAL_GPIO_Init+0x226>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a58 <HAL_GPIO_Init+0x250>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d01f      	beq.n	8002a2a <HAL_GPIO_Init+0x222>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a1b      	ldr	r2, [pc, #108]	@ (8002a5c <HAL_GPIO_Init+0x254>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d019      	beq.n	8002a26 <HAL_GPIO_Init+0x21e>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a60 <HAL_GPIO_Init+0x258>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d013      	beq.n	8002a22 <HAL_GPIO_Init+0x21a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a19      	ldr	r2, [pc, #100]	@ (8002a64 <HAL_GPIO_Init+0x25c>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d00d      	beq.n	8002a1e <HAL_GPIO_Init+0x216>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a18      	ldr	r2, [pc, #96]	@ (8002a68 <HAL_GPIO_Init+0x260>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d007      	beq.n	8002a1a <HAL_GPIO_Init+0x212>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a17      	ldr	r2, [pc, #92]	@ (8002a6c <HAL_GPIO_Init+0x264>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_GPIO_Init+0x20e>
 8002a12:	2309      	movs	r3, #9
 8002a14:	e02d      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a16:	230a      	movs	r3, #10
 8002a18:	e02b      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a1a:	2308      	movs	r3, #8
 8002a1c:	e029      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a1e:	2307      	movs	r3, #7
 8002a20:	e027      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a22:	2306      	movs	r3, #6
 8002a24:	e025      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a26:	2305      	movs	r3, #5
 8002a28:	e023      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a2a:	2304      	movs	r3, #4
 8002a2c:	e021      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e01f      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e01d      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e01b      	b.n	8002a72 <HAL_GPIO_Init+0x26a>
 8002a3a:	bf00      	nop
 8002a3c:	58000080 	.word	0x58000080
 8002a40:	58024400 	.word	0x58024400
 8002a44:	58000400 	.word	0x58000400
 8002a48:	58020000 	.word	0x58020000
 8002a4c:	58020400 	.word	0x58020400
 8002a50:	58020800 	.word	0x58020800
 8002a54:	58020c00 	.word	0x58020c00
 8002a58:	58021000 	.word	0x58021000
 8002a5c:	58021400 	.word	0x58021400
 8002a60:	58021800 	.word	0x58021800
 8002a64:	58021c00 	.word	0x58021c00
 8002a68:	58022000 	.word	0x58022000
 8002a6c:	58022400 	.word	0x58022400
 8002a70:	2300      	movs	r3, #0
 8002a72:	69fa      	ldr	r2, [r7, #28]
 8002a74:	f002 0203 	and.w	r2, r2, #3
 8002a78:	0092      	lsls	r2, r2, #2
 8002a7a:	4093      	lsls	r3, r2
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a82:	4938      	ldr	r1, [pc, #224]	@ (8002b64 <HAL_GPIO_Init+0x35c>)
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	089b      	lsrs	r3, r3, #2
 8002a88:	3302      	adds	r3, #2
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ab6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ae4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	69ba      	ldr	r2, [r7, #24]
 8002b14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	3301      	adds	r3, #1
 8002b44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f47f ae63 	bne.w	800281c <HAL_GPIO_Init+0x14>
  }
}
 8002b56:	bf00      	nop
 8002b58:	bf00      	nop
 8002b5a:	3724      	adds	r7, #36	@ 0x24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	58000400 	.word	0x58000400

08002b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
 8002b74:	4613      	mov	r3, r2
 8002b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b78:	787b      	ldrb	r3, [r7, #1]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b84:	e003      	b.n	8002b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	041a      	lsls	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	619a      	str	r2, [r3, #24]
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e08b      	b.n	8002cc6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe f98c 	bl	8000ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2224      	movs	r2, #36	@ 0x24
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0201 	bic.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002bec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d107      	bne.n	8002c16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c12:	609a      	str	r2, [r3, #8]
 8002c14:	e006      	b.n	8002c24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d108      	bne.n	8002c3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c3a:	605a      	str	r2, [r3, #4]
 8002c3c:	e007      	b.n	8002c4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b1d      	ldr	r3, [pc, #116]	@ (8002cd0 <HAL_I2C_Init+0x134>)
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691a      	ldr	r2, [r3, #16]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	69d9      	ldr	r1, [r3, #28]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a1a      	ldr	r2, [r3, #32]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f042 0201 	orr.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	02008000 	.word	0x02008000

08002cd4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	607a      	str	r2, [r7, #4]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	817b      	strh	r3, [r7, #10]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b20      	cmp	r3, #32
 8002cf2:	f040 80fd 	bne.w	8002ef0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d101      	bne.n	8002d04 <HAL_I2C_Master_Transmit+0x30>
 8002d00:	2302      	movs	r3, #2
 8002d02:	e0f6      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x21e>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d0c:	f7fe ff9a 	bl	8001c44 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	9300      	str	r3, [sp, #0]
 8002d16:	2319      	movs	r3, #25
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fa0a 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e0e1      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2221      	movs	r2, #33	@ 0x21
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2210      	movs	r2, #16
 8002d3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	893a      	ldrh	r2, [r7, #8]
 8002d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2bff      	cmp	r3, #255	@ 0xff
 8002d5e:	d906      	bls.n	8002d6e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	22ff      	movs	r2, #255	@ 0xff
 8002d64:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002d66:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	e007      	b.n	8002d7e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002d78:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d7c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d024      	beq.n	8002dd0 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	3b01      	subs	r3, #1
 8002da4:	b29a      	uxth	r2, r3
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	8979      	ldrh	r1, [r7, #10]
 8002dc2:	4b4e      	ldr	r3, [pc, #312]	@ (8002efc <HAL_I2C_Master_Transmit+0x228>)
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 fc05 	bl	80035d8 <I2C_TransferConfig>
 8002dce:	e066      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	8979      	ldrh	r1, [r7, #10]
 8002dd8:	4b48      	ldr	r3, [pc, #288]	@ (8002efc <HAL_I2C_Master_Transmit+0x228>)
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fbfa 	bl	80035d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002de4:	e05b      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	6a39      	ldr	r1, [r7, #32]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f9fd 	bl	80031ea <I2C_WaitOnTXISFlagUntilTimeout>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e07b      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	781a      	ldrb	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d034      	beq.n	8002e9e <HAL_I2C_Master_Transmit+0x1ca>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d130      	bne.n	8002e9e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	2200      	movs	r2, #0
 8002e44:	2180      	movs	r1, #128	@ 0x80
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f976 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e04d      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2bff      	cmp	r3, #255	@ 0xff
 8002e5e:	d90e      	bls.n	8002e7e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	22ff      	movs	r2, #255	@ 0xff
 8002e64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6a:	b2da      	uxtb	r2, r3
 8002e6c:	8979      	ldrh	r1, [r7, #10]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9300      	str	r3, [sp, #0]
 8002e72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f000 fbae 	bl	80035d8 <I2C_TransferConfig>
 8002e7c:	e00f      	b.n	8002e9e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	8979      	ldrh	r1, [r7, #10]
 8002e90:	2300      	movs	r3, #0
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e98:	68f8      	ldr	r0, [r7, #12]
 8002e9a:	f000 fb9d 	bl	80035d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d19e      	bne.n	8002de6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	6a39      	ldr	r1, [r7, #32]
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 f9e3 	bl	8003278 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e01a      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6859      	ldr	r1, [r3, #4]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <HAL_I2C_Master_Transmit+0x22c>)
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	e000      	b.n	8002ef2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002ef0:	2302      	movs	r3, #2
  }
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3718      	adds	r7, #24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	80002000 	.word	0x80002000
 8002f00:	fe00e800 	.word	0xfe00e800

08002f04 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af02      	add	r7, sp, #8
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	460b      	mov	r3, r1
 8002f12:	817b      	strh	r3, [r7, #10]
 8002f14:	4613      	mov	r3, r2
 8002f16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	f040 80db 	bne.w	80030dc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d101      	bne.n	8002f34 <HAL_I2C_Master_Receive+0x30>
 8002f30:	2302      	movs	r3, #2
 8002f32:	e0d4      	b.n	80030de <HAL_I2C_Master_Receive+0x1da>
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f3c:	f7fe fe82 	bl	8001c44 <HAL_GetTick>
 8002f40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	2319      	movs	r3, #25
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f8f2 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e0bf      	b.n	80030de <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2222      	movs	r2, #34	@ 0x22
 8002f62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2210      	movs	r2, #16
 8002f6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	893a      	ldrh	r2, [r7, #8]
 8002f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2bff      	cmp	r3, #255	@ 0xff
 8002f8e:	d90e      	bls.n	8002fae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	22ff      	movs	r2, #255	@ 0xff
 8002f94:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	8979      	ldrh	r1, [r7, #10]
 8002f9e:	4b52      	ldr	r3, [pc, #328]	@ (80030e8 <HAL_I2C_Master_Receive+0x1e4>)
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f000 fb16 	bl	80035d8 <I2C_TransferConfig>
 8002fac:	e06d      	b.n	800308a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	8979      	ldrh	r1, [r7, #10]
 8002fc0:	4b49      	ldr	r3, [pc, #292]	@ (80030e8 <HAL_I2C_Master_Receive+0x1e4>)
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fb05 	bl	80035d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002fce:	e05c      	b.n	800308a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	6a39      	ldr	r1, [r7, #32]
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 f993 	bl	8003300 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d001      	beq.n	8002fe4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e07c      	b.n	80030de <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d034      	beq.n	800308a <HAL_I2C_Master_Receive+0x186>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003024:	2b00      	cmp	r3, #0
 8003026:	d130      	bne.n	800308a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	2200      	movs	r2, #0
 8003030:	2180      	movs	r1, #128	@ 0x80
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 f880 	bl	8003138 <I2C_WaitOnFlagUntilTimeout>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e04d      	b.n	80030de <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	2bff      	cmp	r3, #255	@ 0xff
 800304a:	d90e      	bls.n	800306a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	22ff      	movs	r2, #255	@ 0xff
 8003050:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003056:	b2da      	uxtb	r2, r3
 8003058:	8979      	ldrh	r1, [r7, #10]
 800305a:	2300      	movs	r3, #0
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003062:	68f8      	ldr	r0, [r7, #12]
 8003064:	f000 fab8 	bl	80035d8 <I2C_TransferConfig>
 8003068:	e00f      	b.n	800308a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306e:	b29a      	uxth	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003078:	b2da      	uxtb	r2, r3
 800307a:	8979      	ldrh	r1, [r7, #10]
 800307c:	2300      	movs	r3, #0
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 faa7 	bl	80035d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	2b00      	cmp	r3, #0
 8003092:	d19d      	bne.n	8002fd0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	6a39      	ldr	r1, [r7, #32]
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f8ed 	bl	8003278 <I2C_WaitOnSTOPFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e01a      	b.n	80030de <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2220      	movs	r2, #32
 80030ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4b0c      	ldr	r3, [pc, #48]	@ (80030ec <HAL_I2C_Master_Receive+0x1e8>)
 80030bc:	400b      	ands	r3, r1
 80030be:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80030d8:	2300      	movs	r3, #0
 80030da:	e000      	b.n	80030de <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80030dc:	2302      	movs	r3, #2
  }
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	80002400 	.word	0x80002400
 80030ec:	fe00e800 	.word	0xfe00e800

080030f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b02      	cmp	r3, #2
 8003104:	d103      	bne.n	800310e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2200      	movs	r2, #0
 800310c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b01      	cmp	r3, #1
 800311a:	d007      	beq.n	800312c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	619a      	str	r2, [r3, #24]
  }
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	4613      	mov	r3, r2
 8003146:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003148:	e03b      	b.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	6839      	ldr	r1, [r7, #0]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f962 	bl	8003418 <I2C_IsErrorOccurred>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e041      	b.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d02d      	beq.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003166:	f7fe fd6d 	bl	8001c44 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	429a      	cmp	r2, r3
 8003174:	d302      	bcc.n	800317c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d122      	bne.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	699a      	ldr	r2, [r3, #24]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	4013      	ands	r3, r2
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	429a      	cmp	r2, r3
 800318a:	bf0c      	ite	eq
 800318c:	2301      	moveq	r3, #1
 800318e:	2300      	movne	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	429a      	cmp	r2, r3
 8003198:	d113      	bne.n	80031c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319e:	f043 0220 	orr.w	r2, r3, #32
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e00f      	b.n	80031e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4013      	ands	r3, r2
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	bf0c      	ite	eq
 80031d2:	2301      	moveq	r3, #1
 80031d4:	2300      	movne	r3, #0
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	79fb      	ldrb	r3, [r7, #7]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d0b4      	beq.n	800314a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b084      	sub	sp, #16
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031f6:	e033      	b.n	8003260 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f90b 	bl	8003418 <I2C_IsErrorOccurred>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e031      	b.n	8003270 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003212:	d025      	beq.n	8003260 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003214:	f7fe fd16 	bl	8001c44 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	429a      	cmp	r2, r3
 8003222:	d302      	bcc.n	800322a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d11a      	bne.n	8003260 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b02      	cmp	r3, #2
 8003236:	d013      	beq.n	8003260 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800323c:	f043 0220 	orr.w	r2, r3, #32
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2220      	movs	r2, #32
 8003248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e007      	b.n	8003270 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b02      	cmp	r3, #2
 800326c:	d1c4      	bne.n	80031f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3710      	adds	r7, #16
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}

08003278 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b084      	sub	sp, #16
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003284:	e02f      	b.n	80032e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 f8c4 	bl	8003418 <I2C_IsErrorOccurred>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e02d      	b.n	80032f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7fe fcd3 	bl	8001c44 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d11a      	bne.n	80032e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f003 0320 	and.w	r3, r3, #32
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d013      	beq.n	80032e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	f043 0220 	orr.w	r2, r3, #32
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2220      	movs	r2, #32
 80032ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e007      	b.n	80032f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b20      	cmp	r3, #32
 80032f2:	d1c8      	bne.n	8003286 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800330c:	2300      	movs	r3, #0
 800330e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003310:	e071      	b.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f000 f87e 	bl	8003418 <I2C_IsErrorOccurred>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d001      	beq.n	8003326 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b20      	cmp	r3, #32
 8003332:	d13b      	bne.n	80033ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003334:	7dfb      	ldrb	r3, [r7, #23]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d138      	bne.n	80033ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b04      	cmp	r3, #4
 8003346:	d105      	bne.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f003 0310 	and.w	r3, r3, #16
 800335e:	2b10      	cmp	r3, #16
 8003360:	d121      	bne.n	80033a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2210      	movs	r2, #16
 8003368:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2204      	movs	r2, #4
 800336e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2220      	movs	r2, #32
 8003376:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6859      	ldr	r1, [r3, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4b24      	ldr	r3, [pc, #144]	@ (8003414 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003384:	400b      	ands	r3, r1
 8003386:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
 80033a4:	e002      	b.n	80033ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80033ac:	f7fe fc4a 	bl	8001c44 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d302      	bcc.n	80033c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d119      	bne.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d116      	bne.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d00f      	beq.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2220      	movs	r2, #32
 80033e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b04      	cmp	r3, #4
 8003402:	d002      	beq.n	800340a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003404:	7dfb      	ldrb	r3, [r7, #23]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d083      	beq.n	8003312 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800340a:	7dfb      	ldrb	r3, [r7, #23]
}
 800340c:	4618      	mov	r0, r3
 800340e:	3718      	adds	r7, #24
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	fe00e800 	.word	0xfe00e800

08003418 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	@ 0x28
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	f003 0310 	and.w	r3, r3, #16
 8003440:	2b00      	cmp	r3, #0
 8003442:	d068      	beq.n	8003516 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2210      	movs	r2, #16
 800344a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800344c:	e049      	b.n	80034e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003454:	d045      	beq.n	80034e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003456:	f7fe fbf5 	bl	8001c44 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	429a      	cmp	r2, r3
 8003464:	d302      	bcc.n	800346c <I2C_IsErrorOccurred+0x54>
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d13a      	bne.n	80034e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003476:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800347e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800348a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800348e:	d121      	bne.n	80034d4 <I2C_IsErrorOccurred+0xbc>
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003496:	d01d      	beq.n	80034d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	2b20      	cmp	r3, #32
 800349c:	d01a      	beq.n	80034d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	685a      	ldr	r2, [r3, #4]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034ae:	f7fe fbc9 	bl	8001c44 <HAL_GetTick>
 80034b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034b4:	e00e      	b.n	80034d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80034b6:	f7fe fbc5 	bl	8001c44 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b19      	cmp	r3, #25
 80034c2:	d907      	bls.n	80034d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	f043 0320 	orr.w	r3, r3, #32
 80034ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80034d2:	e006      	b.n	80034e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d1e9      	bne.n	80034b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	f003 0320 	and.w	r3, r3, #32
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d003      	beq.n	80034f8 <I2C_IsErrorOccurred+0xe0>
 80034f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0aa      	beq.n	800344e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80034f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d103      	bne.n	8003508 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2220      	movs	r2, #32
 8003506:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	f043 0304 	orr.w	r3, r3, #4
 800350e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00b      	beq.n	8003540 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003538:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00b      	beq.n	8003562 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	f043 0308 	orr.w	r3, r3, #8
 8003550:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800355a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00b      	beq.n	8003584 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	f043 0302 	orr.w	r3, r3, #2
 8003572:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800357c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003584:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003588:	2b00      	cmp	r3, #0
 800358a:	d01c      	beq.n	80035c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7ff fdaf 	bl	80030f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6859      	ldr	r1, [r3, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	4b0d      	ldr	r3, [pc, #52]	@ (80035d4 <I2C_IsErrorOccurred+0x1bc>)
 800359e:	400b      	ands	r3, r1
 80035a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80035c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3728      	adds	r7, #40	@ 0x28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	fe00e800 	.word	0xfe00e800

080035d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	460b      	mov	r3, r1
 80035e4:	817b      	strh	r3, [r7, #10]
 80035e6:	4613      	mov	r3, r2
 80035e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035ea:	897b      	ldrh	r3, [r7, #10]
 80035ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035f0:	7a7b      	ldrb	r3, [r7, #9]
 80035f2:	041b      	lsls	r3, r3, #16
 80035f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	4313      	orrs	r3, r2
 8003602:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003606:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	0d5b      	lsrs	r3, r3, #21
 8003612:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003616:	4b08      	ldr	r3, [pc, #32]	@ (8003638 <I2C_TransferConfig+0x60>)
 8003618:	430b      	orrs	r3, r1
 800361a:	43db      	mvns	r3, r3
 800361c:	ea02 0103 	and.w	r1, r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800362a:	bf00      	nop
 800362c:	371c      	adds	r7, #28
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	03ff63ff 	.word	0x03ff63ff

0800363c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b20      	cmp	r3, #32
 8003650:	d138      	bne.n	80036c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800365c:	2302      	movs	r3, #2
 800365e:	e032      	b.n	80036c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2224      	movs	r2, #36	@ 0x24
 800366c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800368e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6819      	ldr	r1, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e000      	b.n	80036c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036c4:	2302      	movs	r3, #2
  }
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b085      	sub	sp, #20
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b20      	cmp	r3, #32
 80036e6:	d139      	bne.n	800375c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d101      	bne.n	80036f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036f2:	2302      	movs	r3, #2
 80036f4:	e033      	b.n	800375e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2224      	movs	r2, #36	@ 0x24
 8003702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003724:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	e000      	b.n	800375e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b086      	sub	sp, #24
 800376e:	af02      	add	r7, sp, #8
 8003770:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0fe      	b.n	800397a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d106      	bne.n	8003796 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f7fe f92b 	bl	80019ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2203      	movs	r2, #3
 800379a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f005 fcc0 	bl	8009128 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6818      	ldr	r0, [r3, #0]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	7c1a      	ldrb	r2, [r3, #16]
 80037b0:	f88d 2000 	strb.w	r2, [sp]
 80037b4:	3304      	adds	r3, #4
 80037b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b8:	f005 fc44 	bl	8009044 <USB_CoreInit>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e0d5      	b.n	800397a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2100      	movs	r1, #0
 80037d4:	4618      	mov	r0, r3
 80037d6:	f005 fcb8 	bl	800914a <USB_SetCurrentMode>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0c6      	b.n	800397a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ec:	2300      	movs	r3, #0
 80037ee:	73fb      	strb	r3, [r7, #15]
 80037f0:	e04a      	b.n	8003888 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037f2:	7bfa      	ldrb	r2, [r7, #15]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	3315      	adds	r3, #21
 8003802:	2201      	movs	r2, #1
 8003804:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	4413      	add	r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3314      	adds	r3, #20
 8003816:	7bfa      	ldrb	r2, [r7, #15]
 8003818:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	b298      	uxth	r0, r3
 8003820:	6879      	ldr	r1, [r7, #4]
 8003822:	4613      	mov	r3, r2
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	332e      	adds	r3, #46	@ 0x2e
 800382e:	4602      	mov	r2, r0
 8003830:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	3318      	adds	r3, #24
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003846:	7bfa      	ldrb	r2, [r7, #15]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	331c      	adds	r3, #28
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800385a:	7bfa      	ldrb	r2, [r7, #15]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	3320      	adds	r3, #32
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800386e:	7bfa      	ldrb	r2, [r7, #15]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	3324      	adds	r3, #36	@ 0x24
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	3301      	adds	r3, #1
 8003886:	73fb      	strb	r3, [r7, #15]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	791b      	ldrb	r3, [r3, #4]
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	429a      	cmp	r2, r3
 8003890:	d3af      	bcc.n	80037f2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003892:	2300      	movs	r3, #0
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	e044      	b.n	8003922 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	4413      	add	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038ae:	7bfa      	ldrb	r2, [r7, #15]
 80038b0:	6879      	ldr	r1, [r7, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	00db      	lsls	r3, r3, #3
 80038b6:	4413      	add	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	440b      	add	r3, r1
 80038bc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80038c0:	7bfa      	ldrb	r2, [r7, #15]
 80038c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80038d6:	2200      	movs	r2, #0
 80038d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038da:	7bfa      	ldrb	r2, [r7, #15]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	00db      	lsls	r3, r3, #3
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038f0:	7bfa      	ldrb	r2, [r7, #15]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4413      	add	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003902:	2200      	movs	r2, #0
 8003904:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	3301      	adds	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	791b      	ldrb	r3, [r3, #4]
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	429a      	cmp	r2, r3
 800392a:	d3b5      	bcc.n	8003898 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7c1a      	ldrb	r2, [r3, #16]
 8003934:	f88d 2000 	strb.w	r2, [sp]
 8003938:	3304      	adds	r3, #4
 800393a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800393c:	f005 fc52 	bl	80091e4 <USB_DevInit>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d005      	beq.n	8003952 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e013      	b.n	800397a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	7b1b      	ldrb	r3, [r3, #12]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d102      	bne.n	800396e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 f80b 	bl	8003984 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f005 fe0d 	bl	8009592 <USB_DevDisconnect>

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039b2:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <HAL_PCDEx_ActivateLPM+0x44>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr
 80039c8:	10000003 	.word	0x10000003

080039cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80039d4:	4b19      	ldr	r3, [pc, #100]	@ (8003a3c <HAL_PWREx_ConfigSupply+0x70>)
 80039d6:	68db      	ldr	r3, [r3, #12]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d00a      	beq.n	80039f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80039e0:	4b16      	ldr	r3, [pc, #88]	@ (8003a3c <HAL_PWREx_ConfigSupply+0x70>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d001      	beq.n	80039f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e01f      	b.n	8003a32 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80039f2:	2300      	movs	r3, #0
 80039f4:	e01d      	b.n	8003a32 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80039f6:	4b11      	ldr	r3, [pc, #68]	@ (8003a3c <HAL_PWREx_ConfigSupply+0x70>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f023 0207 	bic.w	r2, r3, #7
 80039fe:	490f      	ldr	r1, [pc, #60]	@ (8003a3c <HAL_PWREx_ConfigSupply+0x70>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a06:	f7fe f91d 	bl	8001c44 <HAL_GetTick>
 8003a0a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a0c:	e009      	b.n	8003a22 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a0e:	f7fe f919 	bl	8001c44 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a1c:	d901      	bls.n	8003a22 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e007      	b.n	8003a32 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a22:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <HAL_PWREx_ConfigSupply+0x70>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a2e:	d1ee      	bne.n	8003a0e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	58024800 	.word	0x58024800

08003a40 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003a44:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4a04      	ldr	r2, [pc, #16]	@ (8003a5c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a4e:	60d3      	str	r3, [r2, #12]
}
 8003a50:	bf00      	nop
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	58024800 	.word	0x58024800

08003a60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08c      	sub	sp, #48	@ 0x30
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	f000 bc48 	b.w	8004304 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f000 8088 	beq.w	8003b92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a82:	4b99      	ldr	r3, [pc, #612]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003a8c:	4b96      	ldr	r3, [pc, #600]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a94:	2b10      	cmp	r3, #16
 8003a96:	d007      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x48>
 8003a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9a:	2b18      	cmp	r3, #24
 8003a9c:	d111      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x62>
 8003a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d10c      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	4b8f      	ldr	r3, [pc, #572]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d06d      	beq.n	8003b90 <HAL_RCC_OscConfig+0x130>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d169      	bne.n	8003b90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	f000 bc21 	b.w	8004304 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aca:	d106      	bne.n	8003ada <HAL_RCC_OscConfig+0x7a>
 8003acc:	4b86      	ldr	r3, [pc, #536]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a85      	ldr	r2, [pc, #532]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	e02e      	b.n	8003b38 <HAL_RCC_OscConfig+0xd8>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x9c>
 8003ae2:	4b81      	ldr	r3, [pc, #516]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a80      	ldr	r2, [pc, #512]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b7e      	ldr	r3, [pc, #504]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a7d      	ldr	r2, [pc, #500]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003af4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e01d      	b.n	8003b38 <HAL_RCC_OscConfig+0xd8>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCC_OscConfig+0xc0>
 8003b06:	4b78      	ldr	r3, [pc, #480]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a77      	ldr	r2, [pc, #476]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b10:	6013      	str	r3, [r2, #0]
 8003b12:	4b75      	ldr	r3, [pc, #468]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a74      	ldr	r2, [pc, #464]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b1c:	6013      	str	r3, [r2, #0]
 8003b1e:	e00b      	b.n	8003b38 <HAL_RCC_OscConfig+0xd8>
 8003b20:	4b71      	ldr	r3, [pc, #452]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a70      	ldr	r2, [pc, #448]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b6e      	ldr	r3, [pc, #440]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a6d      	ldr	r2, [pc, #436]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d013      	beq.n	8003b68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fe f880 	bl	8001c44 <HAL_GetTick>
 8003b44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b48:	f7fe f87c 	bl	8001c44 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b64      	cmp	r3, #100	@ 0x64
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e3d4      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b5a:	4b63      	ldr	r3, [pc, #396]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d0f0      	beq.n	8003b48 <HAL_RCC_OscConfig+0xe8>
 8003b66:	e014      	b.n	8003b92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b68:	f7fe f86c 	bl	8001c44 <HAL_GetTick>
 8003b6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b70:	f7fe f868 	bl	8001c44 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b64      	cmp	r3, #100	@ 0x64
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e3c0      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003b82:	4b59      	ldr	r3, [pc, #356]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x110>
 8003b8e:	e000      	b.n	8003b92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 80ca 	beq.w	8003d34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ba0:	4b51      	ldr	r3, [pc, #324]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ba8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003baa:	4b4f      	ldr	r3, [pc, #316]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d007      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x166>
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	2b18      	cmp	r3, #24
 8003bba:	d156      	bne.n	8003c6a <HAL_RCC_OscConfig+0x20a>
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d151      	bne.n	8003c6a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc6:	4b48      	ldr	r3, [pc, #288]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_RCC_OscConfig+0x17e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e392      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003bde:	4b42      	ldr	r3, [pc, #264]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 0219 	bic.w	r2, r3, #25
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	493f      	ldr	r1, [pc, #252]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fe f828 	bl	8001c44 <HAL_GetTick>
 8003bf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bf8:	f7fe f824 	bl	8001c44 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e37c      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c0a:	4b37      	ldr	r3, [pc, #220]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c16:	f7fe f845 	bl	8001ca4 <HAL_GetREVID>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d817      	bhi.n	8003c54 <HAL_RCC_OscConfig+0x1f4>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b40      	cmp	r3, #64	@ 0x40
 8003c2a:	d108      	bne.n	8003c3e <HAL_RCC_OscConfig+0x1de>
 8003c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c34:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003c36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c3a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c3c:	e07a      	b.n	8003d34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	031b      	lsls	r3, r3, #12
 8003c4c:	4926      	ldr	r1, [pc, #152]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c52:	e06f      	b.n	8003d34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c54:	4b24      	ldr	r3, [pc, #144]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	061b      	lsls	r3, r3, #24
 8003c62:	4921      	ldr	r1, [pc, #132]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c68:	e064      	b.n	8003d34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d047      	beq.n	8003d02 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c72:	4b1d      	ldr	r3, [pc, #116]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 0219 	bic.w	r2, r3, #25
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	491a      	ldr	r1, [pc, #104]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c84:	f7fd ffde 	bl	8001c44 <HAL_GetTick>
 8003c88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c8c:	f7fd ffda 	bl	8001c44 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e332      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0304 	and.w	r3, r3, #4
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0f0      	beq.n	8003c8c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003caa:	f7fd fffb 	bl	8001ca4 <HAL_GetREVID>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d819      	bhi.n	8003cec <HAL_RCC_OscConfig+0x28c>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b40      	cmp	r3, #64	@ 0x40
 8003cbe:	d108      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x272>
 8003cc0:	4b09      	ldr	r3, [pc, #36]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003cc8:	4a07      	ldr	r2, [pc, #28]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cce:	6053      	str	r3, [r2, #4]
 8003cd0:	e030      	b.n	8003d34 <HAL_RCC_OscConfig+0x2d4>
 8003cd2:	4b05      	ldr	r3, [pc, #20]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	031b      	lsls	r3, r3, #12
 8003ce0:	4901      	ldr	r1, [pc, #4]	@ (8003ce8 <HAL_RCC_OscConfig+0x288>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	604b      	str	r3, [r1, #4]
 8003ce6:	e025      	b.n	8003d34 <HAL_RCC_OscConfig+0x2d4>
 8003ce8:	58024400 	.word	0x58024400
 8003cec:	4b9a      	ldr	r3, [pc, #616]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	061b      	lsls	r3, r3, #24
 8003cfa:	4997      	ldr	r1, [pc, #604]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	604b      	str	r3, [r1, #4]
 8003d00:	e018      	b.n	8003d34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d02:	4b95      	ldr	r3, [pc, #596]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a94      	ldr	r2, [pc, #592]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d0e:	f7fd ff99 	bl	8001c44 <HAL_GetTick>
 8003d12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d14:	e008      	b.n	8003d28 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d16:	f7fd ff95 	bl	8001c44 <HAL_GetTick>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	1ad3      	subs	r3, r2, r3
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d901      	bls.n	8003d28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e2ed      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d28:	4b8b      	ldr	r3, [pc, #556]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f0      	bne.n	8003d16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 80a9 	beq.w	8003e94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d42:	4b85      	ldr	r3, [pc, #532]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d4c:	4b82      	ldr	r3, [pc, #520]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d50:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	2b08      	cmp	r3, #8
 8003d56:	d007      	beq.n	8003d68 <HAL_RCC_OscConfig+0x308>
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2b18      	cmp	r3, #24
 8003d5c:	d13a      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x374>
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d135      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003d68:	4b7b      	ldr	r3, [pc, #492]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_OscConfig+0x320>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	2b80      	cmp	r3, #128	@ 0x80
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e2c1      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003d80:	f7fd ff90 	bl	8001ca4 <HAL_GetREVID>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d817      	bhi.n	8003dbe <HAL_RCC_OscConfig+0x35e>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	2b20      	cmp	r3, #32
 8003d94:	d108      	bne.n	8003da8 <HAL_RCC_OscConfig+0x348>
 8003d96:	4b70      	ldr	r3, [pc, #448]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003d9e:	4a6e      	ldr	r2, [pc, #440]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003da0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003da4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003da6:	e075      	b.n	8003e94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003da8:	4b6b      	ldr	r3, [pc, #428]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	069b      	lsls	r3, r3, #26
 8003db6:	4968      	ldr	r1, [pc, #416]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dbc:	e06a      	b.n	8003e94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dbe:	4b66      	ldr	r3, [pc, #408]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	061b      	lsls	r3, r3, #24
 8003dcc:	4962      	ldr	r1, [pc, #392]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003dd2:	e05f      	b.n	8003e94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69db      	ldr	r3, [r3, #28]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d042      	beq.n	8003e62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003ddc:	4b5e      	ldr	r3, [pc, #376]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a5d      	ldr	r2, [pc, #372]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de8:	f7fd ff2c 	bl	8001c44 <HAL_GetTick>
 8003dec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003dee:	e008      	b.n	8003e02 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003df0:	f7fd ff28 	bl	8001c44 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e280      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e02:	4b55      	ldr	r3, [pc, #340]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0f0      	beq.n	8003df0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e0e:	f7fd ff49 	bl	8001ca4 <HAL_GetREVID>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d817      	bhi.n	8003e4c <HAL_RCC_OscConfig+0x3ec>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	2b20      	cmp	r3, #32
 8003e22:	d108      	bne.n	8003e36 <HAL_RCC_OscConfig+0x3d6>
 8003e24:	4b4c      	ldr	r3, [pc, #304]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003e2c:	4a4a      	ldr	r2, [pc, #296]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003e2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e32:	6053      	str	r3, [r2, #4]
 8003e34:	e02e      	b.n	8003e94 <HAL_RCC_OscConfig+0x434>
 8003e36:	4b48      	ldr	r3, [pc, #288]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	069b      	lsls	r3, r3, #26
 8003e44:	4944      	ldr	r1, [pc, #272]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	604b      	str	r3, [r1, #4]
 8003e4a:	e023      	b.n	8003e94 <HAL_RCC_OscConfig+0x434>
 8003e4c:	4b42      	ldr	r3, [pc, #264]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	061b      	lsls	r3, r3, #24
 8003e5a:	493f      	ldr	r1, [pc, #252]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	60cb      	str	r3, [r1, #12]
 8003e60:	e018      	b.n	8003e94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003e62:	4b3d      	ldr	r3, [pc, #244]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a3c      	ldr	r2, [pc, #240]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003e68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6e:	f7fd fee9 	bl	8001c44 <HAL_GetTick>
 8003e72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e74:	e008      	b.n	8003e88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e76:	f7fd fee5 	bl	8001c44 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d901      	bls.n	8003e88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e23d      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003e88:	4b33      	ldr	r3, [pc, #204]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f0      	bne.n	8003e76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0308 	and.w	r3, r3, #8
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d036      	beq.n	8003f0e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d019      	beq.n	8003edc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eac:	4a2a      	ldr	r2, [pc, #168]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003eae:	f043 0301 	orr.w	r3, r3, #1
 8003eb2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb4:	f7fd fec6 	bl	8001c44 <HAL_GetTick>
 8003eb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ebc:	f7fd fec2 	bl	8001c44 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e21a      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ece:	4b22      	ldr	r3, [pc, #136]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003ed0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0f0      	beq.n	8003ebc <HAL_RCC_OscConfig+0x45c>
 8003eda:	e018      	b.n	8003f0e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003edc:	4b1e      	ldr	r3, [pc, #120]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003ede:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee0:	4a1d      	ldr	r2, [pc, #116]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee8:	f7fd feac 	bl	8001c44 <HAL_GetTick>
 8003eec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef0:	f7fd fea8 	bl	8001c44 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e200      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f02:	4b15      	ldr	r3, [pc, #84]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1f0      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d039      	beq.n	8003f8e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d01c      	beq.n	8003f5c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f22:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a0c      	ldr	r2, [pc, #48]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003f28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f2e:	f7fd fe89 	bl	8001c44 <HAL_GetTick>
 8003f32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f36:	f7fd fe85 	bl	8001c44 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e1dd      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f48:	4b03      	ldr	r3, [pc, #12]	@ (8003f58 <HAL_RCC_OscConfig+0x4f8>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x4d6>
 8003f54:	e01b      	b.n	8003f8e <HAL_RCC_OscConfig+0x52e>
 8003f56:	bf00      	nop
 8003f58:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f5c:	4b9b      	ldr	r3, [pc, #620]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a9a      	ldr	r2, [pc, #616]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8003f62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f68:	f7fd fe6c 	bl	8001c44 <HAL_GetTick>
 8003f6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f70:	f7fd fe68 	bl	8001c44 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e1c0      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003f82:	4b92      	ldr	r3, [pc, #584]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8081 	beq.w	800409e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f9c:	4b8c      	ldr	r3, [pc, #560]	@ (80041d0 <HAL_RCC_OscConfig+0x770>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a8b      	ldr	r2, [pc, #556]	@ (80041d0 <HAL_RCC_OscConfig+0x770>)
 8003fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fa8:	f7fd fe4c 	bl	8001c44 <HAL_GetTick>
 8003fac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fb0:	f7fd fe48 	bl	8001c44 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b64      	cmp	r3, #100	@ 0x64
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e1a0      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003fc2:	4b83      	ldr	r3, [pc, #524]	@ (80041d0 <HAL_RCC_OscConfig+0x770>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0f0      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d106      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x584>
 8003fd6:	4b7d      	ldr	r3, [pc, #500]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8003fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fda:	4a7c      	ldr	r2, [pc, #496]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fe2:	e02d      	b.n	8004040 <HAL_RCC_OscConfig+0x5e0>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10c      	bne.n	8004006 <HAL_RCC_OscConfig+0x5a6>
 8003fec:	4b77      	ldr	r3, [pc, #476]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff0:	4a76      	ldr	r2, [pc, #472]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ff8:	4b74      	ldr	r3, [pc, #464]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffc:	4a73      	ldr	r2, [pc, #460]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8003ffe:	f023 0304 	bic.w	r3, r3, #4
 8004002:	6713      	str	r3, [r2, #112]	@ 0x70
 8004004:	e01c      	b.n	8004040 <HAL_RCC_OscConfig+0x5e0>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b05      	cmp	r3, #5
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x5c8>
 800400e:	4b6f      	ldr	r3, [pc, #444]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004012:	4a6e      	ldr	r2, [pc, #440]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	6713      	str	r3, [r2, #112]	@ 0x70
 800401a:	4b6c      	ldr	r3, [pc, #432]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401e:	4a6b      	ldr	r2, [pc, #428]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6713      	str	r3, [r2, #112]	@ 0x70
 8004026:	e00b      	b.n	8004040 <HAL_RCC_OscConfig+0x5e0>
 8004028:	4b68      	ldr	r3, [pc, #416]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402c:	4a67      	ldr	r2, [pc, #412]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	6713      	str	r3, [r2, #112]	@ 0x70
 8004034:	4b65      	ldr	r3, [pc, #404]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004038:	4a64      	ldr	r2, [pc, #400]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 800403a:	f023 0304 	bic.w	r3, r3, #4
 800403e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d015      	beq.n	8004074 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fd fdfc 	bl	8001c44 <HAL_GetTick>
 800404c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800404e:	e00a      	b.n	8004066 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fd fdf8 	bl	8001c44 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e14e      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004066:	4b59      	ldr	r3, [pc, #356]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ee      	beq.n	8004050 <HAL_RCC_OscConfig+0x5f0>
 8004072:	e014      	b.n	800409e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004074:	f7fd fde6 	bl	8001c44 <HAL_GetTick>
 8004078:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800407a:	e00a      	b.n	8004092 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407c:	f7fd fde2 	bl	8001c44 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e138      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004092:	4b4e      	ldr	r3, [pc, #312]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1ee      	bne.n	800407c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f000 812d 	beq.w	8004302 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040a8:	4b48      	ldr	r3, [pc, #288]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80040b0:	2b18      	cmp	r3, #24
 80040b2:	f000 80bd 	beq.w	8004230 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	f040 809e 	bne.w	80041fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c0:	4b42      	ldr	r3, [pc, #264]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a41      	ldr	r2, [pc, #260]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 80040c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fd fdba 	bl	8001c44 <HAL_GetTick>
 80040d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fd fdb6 	bl	8001c44 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e10e      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80040e6:	4b39      	ldr	r3, [pc, #228]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040f2:	4b36      	ldr	r3, [pc, #216]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 80040f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040f6:	4b37      	ldr	r3, [pc, #220]	@ (80041d4 <HAL_RCC_OscConfig+0x774>)
 80040f8:	4013      	ands	r3, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004102:	0112      	lsls	r2, r2, #4
 8004104:	430a      	orrs	r2, r1
 8004106:	4931      	ldr	r1, [pc, #196]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004108:	4313      	orrs	r3, r2
 800410a:	628b      	str	r3, [r1, #40]	@ 0x28
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004110:	3b01      	subs	r3, #1
 8004112:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800411a:	3b01      	subs	r3, #1
 800411c:	025b      	lsls	r3, r3, #9
 800411e:	b29b      	uxth	r3, r3
 8004120:	431a      	orrs	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004126:	3b01      	subs	r3, #1
 8004128:	041b      	lsls	r3, r3, #16
 800412a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004134:	3b01      	subs	r3, #1
 8004136:	061b      	lsls	r3, r3, #24
 8004138:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800413c:	4923      	ldr	r1, [pc, #140]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 800413e:	4313      	orrs	r3, r2
 8004140:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004142:	4b22      	ldr	r3, [pc, #136]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004146:	4a21      	ldr	r2, [pc, #132]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004148:	f023 0301 	bic.w	r3, r3, #1
 800414c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800414e:	4b1f      	ldr	r3, [pc, #124]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004152:	4b21      	ldr	r3, [pc, #132]	@ (80041d8 <HAL_RCC_OscConfig+0x778>)
 8004154:	4013      	ands	r3, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800415a:	00d2      	lsls	r2, r2, #3
 800415c:	491b      	ldr	r1, [pc, #108]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 800415e:	4313      	orrs	r3, r2
 8004160:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004162:	4b1a      	ldr	r3, [pc, #104]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004166:	f023 020c 	bic.w	r2, r3, #12
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	4917      	ldr	r1, [pc, #92]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004170:	4313      	orrs	r3, r2
 8004172:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004174:	4b15      	ldr	r3, [pc, #84]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004178:	f023 0202 	bic.w	r2, r3, #2
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004180:	4912      	ldr	r1, [pc, #72]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004182:	4313      	orrs	r3, r2
 8004184:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004186:	4b11      	ldr	r3, [pc, #68]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004188:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800418a:	4a10      	ldr	r2, [pc, #64]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 800418c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004190:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004192:	4b0e      	ldr	r3, [pc, #56]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	4a0d      	ldr	r2, [pc, #52]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 8004198:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800419c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800419e:	4b0b      	ldr	r3, [pc, #44]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 80041a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a2:	4a0a      	ldr	r2, [pc, #40]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 80041a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80041aa:	4b08      	ldr	r3, [pc, #32]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	4a07      	ldr	r2, [pc, #28]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 80041b0:	f043 0301 	orr.w	r3, r3, #1
 80041b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041b6:	4b05      	ldr	r3, [pc, #20]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a04      	ldr	r2, [pc, #16]	@ (80041cc <HAL_RCC_OscConfig+0x76c>)
 80041bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80041c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c2:	f7fd fd3f 	bl	8001c44 <HAL_GetTick>
 80041c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041c8:	e011      	b.n	80041ee <HAL_RCC_OscConfig+0x78e>
 80041ca:	bf00      	nop
 80041cc:	58024400 	.word	0x58024400
 80041d0:	58024800 	.word	0x58024800
 80041d4:	fffffc0c 	.word	0xfffffc0c
 80041d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fd fd32 	bl	8001c44 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e08a      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80041ee:	4b47      	ldr	r3, [pc, #284]	@ (800430c <HAL_RCC_OscConfig+0x8ac>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x77c>
 80041fa:	e082      	b.n	8004302 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fc:	4b43      	ldr	r3, [pc, #268]	@ (800430c <HAL_RCC_OscConfig+0x8ac>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a42      	ldr	r2, [pc, #264]	@ (800430c <HAL_RCC_OscConfig+0x8ac>)
 8004202:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fd fd1c 	bl	8001c44 <HAL_GetTick>
 800420c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fd fd18 	bl	8001c44 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e070      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004222:	4b3a      	ldr	r3, [pc, #232]	@ (800430c <HAL_RCC_OscConfig+0x8ac>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x7b0>
 800422e:	e068      	b.n	8004302 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004230:	4b36      	ldr	r3, [pc, #216]	@ (800430c <HAL_RCC_OscConfig+0x8ac>)
 8004232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004234:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004236:	4b35      	ldr	r3, [pc, #212]	@ (800430c <HAL_RCC_OscConfig+0x8ac>)
 8004238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	2b01      	cmp	r3, #1
 8004242:	d031      	beq.n	80042a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	f003 0203 	and.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800424e:	429a      	cmp	r2, r3
 8004250:	d12a      	bne.n	80042a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d122      	bne.n	80042a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d11a      	bne.n	80042a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	0a5b      	lsrs	r3, r3, #9
 8004276:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d111      	bne.n	80042a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	0c1b      	lsrs	r3, r3, #16
 8004288:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004290:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004292:	429a      	cmp	r2, r3
 8004294:	d108      	bne.n	80042a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	0e1b      	lsrs	r3, r3, #24
 800429a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e02b      	b.n	8004304 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80042ac:	4b17      	ldr	r3, [pc, #92]	@ (800430c <HAL_RCC_OscConfig+0x8ac>)
 80042ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b0:	08db      	lsrs	r3, r3, #3
 80042b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d01f      	beq.n	8004302 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80042c2:	4b12      	ldr	r3, [pc, #72]	@ (800430c <HAL_RCC_OscConfig+0x8ac>)
 80042c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c6:	4a11      	ldr	r2, [pc, #68]	@ (800430c <HAL_RCC_OscConfig+0x8ac>)
 80042c8:	f023 0301 	bic.w	r3, r3, #1
 80042cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80042ce:	f7fd fcb9 	bl	8001c44 <HAL_GetTick>
 80042d2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80042d4:	bf00      	nop
 80042d6:	f7fd fcb5 	bl	8001c44 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042de:	4293      	cmp	r3, r2
 80042e0:	d0f9      	beq.n	80042d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042e2:	4b0a      	ldr	r3, [pc, #40]	@ (800430c <HAL_RCC_OscConfig+0x8ac>)
 80042e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80042e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004310 <HAL_RCC_OscConfig+0x8b0>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80042ee:	00d2      	lsls	r2, r2, #3
 80042f0:	4906      	ldr	r1, [pc, #24]	@ (800430c <HAL_RCC_OscConfig+0x8ac>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80042f6:	4b05      	ldr	r3, [pc, #20]	@ (800430c <HAL_RCC_OscConfig+0x8ac>)
 80042f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fa:	4a04      	ldr	r2, [pc, #16]	@ (800430c <HAL_RCC_OscConfig+0x8ac>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3730      	adds	r7, #48	@ 0x30
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	58024400 	.word	0x58024400
 8004310:	ffff0007 	.word	0xffff0007

08004314 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d101      	bne.n	8004328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e19c      	b.n	8004662 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004328:	4b8a      	ldr	r3, [pc, #552]	@ (8004554 <HAL_RCC_ClockConfig+0x240>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d910      	bls.n	8004358 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b87      	ldr	r3, [pc, #540]	@ (8004554 <HAL_RCC_ClockConfig+0x240>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 020f 	bic.w	r2, r3, #15
 800433e:	4985      	ldr	r1, [pc, #532]	@ (8004554 <HAL_RCC_ClockConfig+0x240>)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004346:	4b83      	ldr	r3, [pc, #524]	@ (8004554 <HAL_RCC_ClockConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d001      	beq.n	8004358 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e184      	b.n	8004662 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	d010      	beq.n	8004386 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	4b7b      	ldr	r3, [pc, #492]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004370:	429a      	cmp	r2, r3
 8004372:	d908      	bls.n	8004386 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004374:	4b78      	ldr	r3, [pc, #480]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	4975      	ldr	r1, [pc, #468]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 8004382:	4313      	orrs	r3, r2
 8004384:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d010      	beq.n	80043b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695a      	ldr	r2, [r3, #20]
 8004396:	4b70      	ldr	r3, [pc, #448]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800439e:	429a      	cmp	r2, r3
 80043a0:	d908      	bls.n	80043b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	496a      	ldr	r1, [pc, #424]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0310 	and.w	r3, r3, #16
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d010      	beq.n	80043e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699a      	ldr	r2, [r3, #24]
 80043c4:	4b64      	ldr	r3, [pc, #400]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d908      	bls.n	80043e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043d0:	4b61      	ldr	r3, [pc, #388]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	495e      	ldr	r1, [pc, #376]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d010      	beq.n	8004410 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69da      	ldr	r2, [r3, #28]
 80043f2:	4b59      	ldr	r3, [pc, #356]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d908      	bls.n	8004410 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043fe:	4b56      	ldr	r3, [pc, #344]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69db      	ldr	r3, [r3, #28]
 800440a:	4953      	ldr	r1, [pc, #332]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 800440c:	4313      	orrs	r3, r2
 800440e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d010      	beq.n	800443e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	68da      	ldr	r2, [r3, #12]
 8004420:	4b4d      	ldr	r3, [pc, #308]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	429a      	cmp	r2, r3
 800442a:	d908      	bls.n	800443e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800442c:	4b4a      	ldr	r3, [pc, #296]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	f023 020f 	bic.w	r2, r3, #15
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4947      	ldr	r1, [pc, #284]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 800443a:	4313      	orrs	r3, r2
 800443c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d055      	beq.n	80044f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800444a:	4b43      	ldr	r3, [pc, #268]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	4940      	ldr	r1, [pc, #256]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 8004458:	4313      	orrs	r3, r2
 800445a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b02      	cmp	r3, #2
 8004462:	d107      	bne.n	8004474 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004464:	4b3c      	ldr	r3, [pc, #240]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d121      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0f6      	b.n	8004662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d107      	bne.n	800448c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800447c:	4b36      	ldr	r3, [pc, #216]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d115      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e0ea      	b.n	8004662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d107      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004494:	4b30      	ldr	r3, [pc, #192]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449c:	2b00      	cmp	r3, #0
 800449e:	d109      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0de      	b.n	8004662 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044a4:	4b2c      	ldr	r3, [pc, #176]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d101      	bne.n	80044b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e0d6      	b.n	8004662 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80044b4:	4b28      	ldr	r3, [pc, #160]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	f023 0207 	bic.w	r2, r3, #7
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	4925      	ldr	r1, [pc, #148]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044c6:	f7fd fbbd 	bl	8001c44 <HAL_GetTick>
 80044ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044cc:	e00a      	b.n	80044e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044ce:	f7fd fbb9 	bl	8001c44 <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044dc:	4293      	cmp	r3, r2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e0be      	b.n	8004662 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	00db      	lsls	r3, r3, #3
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d1eb      	bne.n	80044ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d010      	beq.n	8004524 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	4b14      	ldr	r3, [pc, #80]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	429a      	cmp	r2, r3
 8004510:	d208      	bcs.n	8004524 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004512:	4b11      	ldr	r3, [pc, #68]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	f023 020f 	bic.w	r2, r3, #15
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	490e      	ldr	r1, [pc, #56]	@ (8004558 <HAL_RCC_ClockConfig+0x244>)
 8004520:	4313      	orrs	r3, r2
 8004522:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004524:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <HAL_RCC_ClockConfig+0x240>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 030f 	and.w	r3, r3, #15
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d214      	bcs.n	800455c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004532:	4b08      	ldr	r3, [pc, #32]	@ (8004554 <HAL_RCC_ClockConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 020f 	bic.w	r2, r3, #15
 800453a:	4906      	ldr	r1, [pc, #24]	@ (8004554 <HAL_RCC_ClockConfig+0x240>)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004542:	4b04      	ldr	r3, [pc, #16]	@ (8004554 <HAL_RCC_ClockConfig+0x240>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d005      	beq.n	800455c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e086      	b.n	8004662 <HAL_RCC_ClockConfig+0x34e>
 8004554:	52002000 	.word	0x52002000
 8004558:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	4b3f      	ldr	r3, [pc, #252]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004574:	429a      	cmp	r2, r3
 8004576:	d208      	bcs.n	800458a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004578:	4b3c      	ldr	r3, [pc, #240]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	4939      	ldr	r1, [pc, #228]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 8004586:	4313      	orrs	r3, r2
 8004588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d010      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695a      	ldr	r2, [r3, #20]
 800459a:	4b34      	ldr	r3, [pc, #208]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d208      	bcs.n	80045b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045a6:	4b31      	ldr	r3, [pc, #196]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 80045a8:	69db      	ldr	r3, [r3, #28]
 80045aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	492e      	ldr	r1, [pc, #184]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0310 	and.w	r3, r3, #16
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d010      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699a      	ldr	r2, [r3, #24]
 80045c8:	4b28      	ldr	r3, [pc, #160]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 80045ca:	69db      	ldr	r3, [r3, #28]
 80045cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d208      	bcs.n	80045e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80045d4:	4b25      	ldr	r3, [pc, #148]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	4922      	ldr	r1, [pc, #136]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d010      	beq.n	8004614 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69da      	ldr	r2, [r3, #28]
 80045f6:	4b1d      	ldr	r3, [pc, #116]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 80045f8:	6a1b      	ldr	r3, [r3, #32]
 80045fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045fe:	429a      	cmp	r2, r3
 8004600:	d208      	bcs.n	8004614 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004602:	4b1a      	ldr	r3, [pc, #104]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	4917      	ldr	r1, [pc, #92]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 8004610:	4313      	orrs	r3, r2
 8004612:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004614:	f000 f89e 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8004618:	4602      	mov	r2, r0
 800461a:	4b14      	ldr	r3, [pc, #80]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	0a1b      	lsrs	r3, r3, #8
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	4912      	ldr	r1, [pc, #72]	@ (8004670 <HAL_RCC_ClockConfig+0x35c>)
 8004626:	5ccb      	ldrb	r3, [r1, r3]
 8004628:	f003 031f 	and.w	r3, r3, #31
 800462c:	fa22 f303 	lsr.w	r3, r2, r3
 8004630:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004632:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <HAL_RCC_ClockConfig+0x358>)
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f003 030f 	and.w	r3, r3, #15
 800463a:	4a0d      	ldr	r2, [pc, #52]	@ (8004670 <HAL_RCC_ClockConfig+0x35c>)
 800463c:	5cd3      	ldrb	r3, [r2, r3]
 800463e:	f003 031f 	and.w	r3, r3, #31
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	fa22 f303 	lsr.w	r3, r2, r3
 8004648:	4a0a      	ldr	r2, [pc, #40]	@ (8004674 <HAL_RCC_ClockConfig+0x360>)
 800464a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800464c:	4a0a      	ldr	r2, [pc, #40]	@ (8004678 <HAL_RCC_ClockConfig+0x364>)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004652:	4b0a      	ldr	r3, [pc, #40]	@ (800467c <HAL_RCC_ClockConfig+0x368>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4618      	mov	r0, r3
 8004658:	f7fd faaa 	bl	8001bb0 <HAL_InitTick>
 800465c:	4603      	mov	r3, r0
 800465e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	58024400 	.word	0x58024400
 8004670:	08009ff8 	.word	0x08009ff8
 8004674:	24000004 	.word	0x24000004
 8004678:	24000000 	.word	0x24000000
 800467c:	24000008 	.word	0x24000008

08004680 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08c      	sub	sp, #48	@ 0x30
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d12a      	bne.n	80046e8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8004692:	4b2d      	ldr	r3, [pc, #180]	@ (8004748 <HAL_RCC_MCOConfig+0xc8>)
 8004694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004698:	4a2b      	ldr	r2, [pc, #172]	@ (8004748 <HAL_RCC_MCOConfig+0xc8>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046a2:	4b29      	ldr	r3, [pc, #164]	@ (8004748 <HAL_RCC_MCOConfig+0xc8>)
 80046a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80046b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046b6:	2302      	movs	r3, #2
 80046b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046ba:	2303      	movs	r3, #3
 80046bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80046c2:	2300      	movs	r3, #0
 80046c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80046c6:	f107 031c 	add.w	r3, r7, #28
 80046ca:	4619      	mov	r1, r3
 80046cc:	481f      	ldr	r0, [pc, #124]	@ (800474c <HAL_RCC_MCOConfig+0xcc>)
 80046ce:	f7fe f89b 	bl	8002808 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80046d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004748 <HAL_RCC_MCOConfig+0xc8>)
 80046d4:	691b      	ldr	r3, [r3, #16]
 80046d6:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 80046da:	68b9      	ldr	r1, [r7, #8]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	430b      	orrs	r3, r1
 80046e0:	4919      	ldr	r1, [pc, #100]	@ (8004748 <HAL_RCC_MCOConfig+0xc8>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80046e6:	e02a      	b.n	800473e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80046e8:	4b17      	ldr	r3, [pc, #92]	@ (8004748 <HAL_RCC_MCOConfig+0xc8>)
 80046ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046ee:	4a16      	ldr	r2, [pc, #88]	@ (8004748 <HAL_RCC_MCOConfig+0xc8>)
 80046f0:	f043 0304 	orr.w	r3, r3, #4
 80046f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046f8:	4b13      	ldr	r3, [pc, #76]	@ (8004748 <HAL_RCC_MCOConfig+0xc8>)
 80046fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	617b      	str	r3, [r7, #20]
 8004704:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004706:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800470a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800470c:	2302      	movs	r3, #2
 800470e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004710:	2303      	movs	r3, #3
 8004712:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004718:	2300      	movs	r3, #0
 800471a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800471c:	f107 031c 	add.w	r3, r7, #28
 8004720:	4619      	mov	r1, r3
 8004722:	480b      	ldr	r0, [pc, #44]	@ (8004750 <HAL_RCC_MCOConfig+0xd0>)
 8004724:	f7fe f870 	bl	8002808 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004728:	4b07      	ldr	r3, [pc, #28]	@ (8004748 <HAL_RCC_MCOConfig+0xc8>)
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	01d9      	lsls	r1, r3, #7
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	430b      	orrs	r3, r1
 8004738:	4903      	ldr	r1, [pc, #12]	@ (8004748 <HAL_RCC_MCOConfig+0xc8>)
 800473a:	4313      	orrs	r3, r2
 800473c:	610b      	str	r3, [r1, #16]
}
 800473e:	bf00      	nop
 8004740:	3730      	adds	r7, #48	@ 0x30
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	58024400 	.word	0x58024400
 800474c:	58020000 	.word	0x58020000
 8004750:	58020800 	.word	0x58020800

08004754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004754:	b480      	push	{r7}
 8004756:	b089      	sub	sp, #36	@ 0x24
 8004758:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800475a:	4bb3      	ldr	r3, [pc, #716]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004762:	2b18      	cmp	r3, #24
 8004764:	f200 8155 	bhi.w	8004a12 <HAL_RCC_GetSysClockFreq+0x2be>
 8004768:	a201      	add	r2, pc, #4	@ (adr r2, 8004770 <HAL_RCC_GetSysClockFreq+0x1c>)
 800476a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800476e:	bf00      	nop
 8004770:	080047d5 	.word	0x080047d5
 8004774:	08004a13 	.word	0x08004a13
 8004778:	08004a13 	.word	0x08004a13
 800477c:	08004a13 	.word	0x08004a13
 8004780:	08004a13 	.word	0x08004a13
 8004784:	08004a13 	.word	0x08004a13
 8004788:	08004a13 	.word	0x08004a13
 800478c:	08004a13 	.word	0x08004a13
 8004790:	080047fb 	.word	0x080047fb
 8004794:	08004a13 	.word	0x08004a13
 8004798:	08004a13 	.word	0x08004a13
 800479c:	08004a13 	.word	0x08004a13
 80047a0:	08004a13 	.word	0x08004a13
 80047a4:	08004a13 	.word	0x08004a13
 80047a8:	08004a13 	.word	0x08004a13
 80047ac:	08004a13 	.word	0x08004a13
 80047b0:	08004801 	.word	0x08004801
 80047b4:	08004a13 	.word	0x08004a13
 80047b8:	08004a13 	.word	0x08004a13
 80047bc:	08004a13 	.word	0x08004a13
 80047c0:	08004a13 	.word	0x08004a13
 80047c4:	08004a13 	.word	0x08004a13
 80047c8:	08004a13 	.word	0x08004a13
 80047cc:	08004a13 	.word	0x08004a13
 80047d0:	08004807 	.word	0x08004807
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047d4:	4b94      	ldr	r3, [pc, #592]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0320 	and.w	r3, r3, #32
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d009      	beq.n	80047f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047e0:	4b91      	ldr	r3, [pc, #580]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	08db      	lsrs	r3, r3, #3
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	4a90      	ldr	r2, [pc, #576]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047ec:	fa22 f303 	lsr.w	r3, r2, r3
 80047f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80047f2:	e111      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80047f4:	4b8d      	ldr	r3, [pc, #564]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80047f6:	61bb      	str	r3, [r7, #24]
      break;
 80047f8:	e10e      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80047fa:	4b8d      	ldr	r3, [pc, #564]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80047fc:	61bb      	str	r3, [r7, #24]
      break;
 80047fe:	e10b      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004800:	4b8c      	ldr	r3, [pc, #560]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004802:	61bb      	str	r3, [r7, #24]
      break;
 8004804:	e108      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004806:	4b88      	ldr	r3, [pc, #544]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004810:	4b85      	ldr	r3, [pc, #532]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004814:	091b      	lsrs	r3, r3, #4
 8004816:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800481a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800481c:	4b82      	ldr	r3, [pc, #520]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004826:	4b80      	ldr	r3, [pc, #512]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800482a:	08db      	lsrs	r3, r3, #3
 800482c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	fb02 f303 	mul.w	r3, r2, r3
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80e1 	beq.w	8004a0c <HAL_RCC_GetSysClockFreq+0x2b8>
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	2b02      	cmp	r3, #2
 800484e:	f000 8083 	beq.w	8004958 <HAL_RCC_GetSysClockFreq+0x204>
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b02      	cmp	r3, #2
 8004856:	f200 80a1 	bhi.w	800499c <HAL_RCC_GetSysClockFreq+0x248>
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d003      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0x114>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d056      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004866:	e099      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004868:	4b6f      	ldr	r3, [pc, #444]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d02d      	beq.n	80048d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004874:	4b6c      	ldr	r3, [pc, #432]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	08db      	lsrs	r3, r3, #3
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	4a6b      	ldr	r2, [pc, #428]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
 8004884:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	ee07 3a90 	vmov	s15, r3
 800488c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489e:	4b62      	ldr	r3, [pc, #392]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80048b2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80048ce:	e087      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048da:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004a3c <HAL_RCC_GetSysClockFreq+0x2e8>
 80048de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e2:	4b51      	ldr	r3, [pc, #324]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80048f6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80048fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004912:	e065      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004a40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004926:	4b40      	ldr	r3, [pc, #256]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800492a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004936:	ed97 6a02 	vldr	s12, [r7, #8]
 800493a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 800493e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800494a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800494e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004956:	e043      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004962:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004a44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800496a:	4b2f      	ldr	r3, [pc, #188]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800496c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800496e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800497a:	ed97 6a02 	vldr	s12, [r7, #8]
 800497e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800498a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800498e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004996:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800499a:	e021      	b.n	80049e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a40 <HAL_RCC_GetSysClockFreq+0x2ec>
 80049aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049be:	ed97 6a02 	vldr	s12, [r7, #8]
 80049c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004a38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80049e0:	4b11      	ldr	r3, [pc, #68]	@ (8004a28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049e4:	0a5b      	lsrs	r3, r3, #9
 80049e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ea:	3301      	adds	r3, #1
 80049ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	ee07 3a90 	vmov	s15, r3
 80049f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049f8:	edd7 6a07 	vldr	s13, [r7, #28]
 80049fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a04:	ee17 3a90 	vmov	r3, s15
 8004a08:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004a0a:	e005      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	61bb      	str	r3, [r7, #24]
      break;
 8004a10:	e002      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004a12:	4b07      	ldr	r3, [pc, #28]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a14:	61bb      	str	r3, [r7, #24]
      break;
 8004a16:	bf00      	nop
  }

  return sysclockfreq;
 8004a18:	69bb      	ldr	r3, [r7, #24]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3724      	adds	r7, #36	@ 0x24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	58024400 	.word	0x58024400
 8004a2c:	03d09000 	.word	0x03d09000
 8004a30:	003d0900 	.word	0x003d0900
 8004a34:	007a1200 	.word	0x007a1200
 8004a38:	46000000 	.word	0x46000000
 8004a3c:	4c742400 	.word	0x4c742400
 8004a40:	4a742400 	.word	0x4a742400
 8004a44:	4af42400 	.word	0x4af42400

08004a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a4e:	f7ff fe81 	bl	8004754 <HAL_RCC_GetSysClockFreq>
 8004a52:	4602      	mov	r2, r0
 8004a54:	4b10      	ldr	r3, [pc, #64]	@ (8004a98 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	0a1b      	lsrs	r3, r3, #8
 8004a5a:	f003 030f 	and.w	r3, r3, #15
 8004a5e:	490f      	ldr	r1, [pc, #60]	@ (8004a9c <HAL_RCC_GetHCLKFreq+0x54>)
 8004a60:	5ccb      	ldrb	r3, [r1, r3]
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a98 <HAL_RCC_GetHCLKFreq+0x50>)
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	4a09      	ldr	r2, [pc, #36]	@ (8004a9c <HAL_RCC_GetHCLKFreq+0x54>)
 8004a76:	5cd3      	ldrb	r3, [r2, r3]
 8004a78:	f003 031f 	and.w	r3, r3, #31
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a82:	4a07      	ldr	r2, [pc, #28]	@ (8004aa0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a86:	4a07      	ldr	r2, [pc, #28]	@ (8004aa4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004a8c:	4b04      	ldr	r3, [pc, #16]	@ (8004aa0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	58024400 	.word	0x58024400
 8004a9c:	08009ff8 	.word	0x08009ff8
 8004aa0:	24000004 	.word	0x24000004
 8004aa4:	24000000 	.word	0x24000000

08004aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004aac:	f7ff ffcc 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	4b06      	ldr	r3, [pc, #24]	@ (8004acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab4:	69db      	ldr	r3, [r3, #28]
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	4904      	ldr	r1, [pc, #16]	@ (8004ad0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004abe:	5ccb      	ldrb	r3, [r1, r3]
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	58024400 	.word	0x58024400
 8004ad0:	08009ff8 	.word	0x08009ff8

08004ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004ad8:	f7ff ffb6 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4b06      	ldr	r3, [pc, #24]	@ (8004af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	0a1b      	lsrs	r3, r3, #8
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	4904      	ldr	r1, [pc, #16]	@ (8004afc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004aea:	5ccb      	ldrb	r3, [r1, r3]
 8004aec:	f003 031f 	and.w	r3, r3, #31
 8004af0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	58024400 	.word	0x58024400
 8004afc:	08009ff8 	.word	0x08009ff8

08004b00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b04:	b0ca      	sub	sp, #296	@ 0x128
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b12:	2300      	movs	r3, #0
 8004b14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b20:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004b24:	2500      	movs	r5, #0
 8004b26:	ea54 0305 	orrs.w	r3, r4, r5
 8004b2a:	d049      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b36:	d02f      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004b38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b3c:	d828      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b42:	d01a      	beq.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b48:	d822      	bhi.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b52:	d007      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b54:	e01c      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b56:	4bb8      	ldr	r3, [pc, #736]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	4ab7      	ldr	r2, [pc, #732]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b62:	e01a      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b68:	3308      	adds	r3, #8
 8004b6a:	2102      	movs	r1, #2
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f001 fc8f 	bl	8006490 <RCCEx_PLL2_Config>
 8004b72:	4603      	mov	r3, r0
 8004b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b78:	e00f      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7e:	3328      	adds	r3, #40	@ 0x28
 8004b80:	2102      	movs	r1, #2
 8004b82:	4618      	mov	r0, r3
 8004b84:	f001 fd36 	bl	80065f4 <RCCEx_PLL3_Config>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004b8e:	e004      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b96:	e000      	b.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004b98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10a      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004ba2:	4ba5      	ldr	r3, [pc, #660]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004bb0:	4aa1      	ldr	r2, [pc, #644]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	6513      	str	r3, [r2, #80]	@ 0x50
 8004bb6:	e003      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004bcc:	f04f 0900 	mov.w	r9, #0
 8004bd0:	ea58 0309 	orrs.w	r3, r8, r9
 8004bd4:	d047      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d82a      	bhi.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004be0:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004bfd 	.word	0x08004bfd
 8004bec:	08004c0b 	.word	0x08004c0b
 8004bf0:	08004c21 	.word	0x08004c21
 8004bf4:	08004c3f 	.word	0x08004c3f
 8004bf8:	08004c3f 	.word	0x08004c3f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bfc:	4b8e      	ldr	r3, [pc, #568]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c00:	4a8d      	ldr	r2, [pc, #564]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c08:	e01a      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0e:	3308      	adds	r3, #8
 8004c10:	2100      	movs	r1, #0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f001 fc3c 	bl	8006490 <RCCEx_PLL2_Config>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c1e:	e00f      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c24:	3328      	adds	r3, #40	@ 0x28
 8004c26:	2100      	movs	r1, #0
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 fce3 	bl	80065f4 <RCCEx_PLL3_Config>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c34:	e004      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c3c:	e000      	b.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c48:	4b7b      	ldr	r3, [pc, #492]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c4c:	f023 0107 	bic.w	r1, r3, #7
 8004c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c56:	4a78      	ldr	r2, [pc, #480]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c5c:	e003      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004c72:	f04f 0b00 	mov.w	fp, #0
 8004c76:	ea5a 030b 	orrs.w	r3, sl, fp
 8004c7a:	d04c      	beq.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c86:	d030      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004c88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c8c:	d829      	bhi.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c90:	d02d      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004c92:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c94:	d825      	bhi.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c96:	2b80      	cmp	r3, #128	@ 0x80
 8004c98:	d018      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004c9a:	2b80      	cmp	r3, #128	@ 0x80
 8004c9c:	d821      	bhi.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004ca2:	2b40      	cmp	r3, #64	@ 0x40
 8004ca4:	d007      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004ca6:	e01c      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ca8:	4b63      	ldr	r3, [pc, #396]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	4a62      	ldr	r2, [pc, #392]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004cb4:	e01c      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cba:	3308      	adds	r3, #8
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 fbe6 	bl	8006490 <RCCEx_PLL2_Config>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004cca:	e011      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd0:	3328      	adds	r3, #40	@ 0x28
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f001 fc8d 	bl	80065f4 <RCCEx_PLL3_Config>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004ce0:	e006      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ce8:	e002      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004cea:	bf00      	nop
 8004cec:	e000      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d10a      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004cf8:	4b4f      	ldr	r3, [pc, #316]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cfc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d06:	4a4c      	ldr	r2, [pc, #304]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d0c:	e003      	b.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004d22:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004d26:	2300      	movs	r3, #0
 8004d28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004d2c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004d30:	460b      	mov	r3, r1
 8004d32:	4313      	orrs	r3, r2
 8004d34:	d053      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d3e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d42:	d035      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004d44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d48:	d82e      	bhi.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004d4a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004d4e:	d031      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004d50:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004d54:	d828      	bhi.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004d56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d5a:	d01a      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004d5c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d60:	d822      	bhi.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004d66:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d6a:	d007      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004d6c:	e01c      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d6e:	4b32      	ldr	r3, [pc, #200]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	4a31      	ldr	r2, [pc, #196]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004d7a:	e01c      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d80:	3308      	adds	r3, #8
 8004d82:	2100      	movs	r1, #0
 8004d84:	4618      	mov	r0, r3
 8004d86:	f001 fb83 	bl	8006490 <RCCEx_PLL2_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004d90:	e011      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d96:	3328      	adds	r3, #40	@ 0x28
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f001 fc2a 	bl	80065f4 <RCCEx_PLL3_Config>
 8004da0:	4603      	mov	r3, r0
 8004da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004da6:	e006      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dae:	e002      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004db0:	bf00      	nop
 8004db2:	e000      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004db4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004db6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10b      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004dbe:	4b1e      	ldr	r3, [pc, #120]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dc2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004dce:	4a1a      	ldr	r2, [pc, #104]	@ (8004e38 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dd0:	430b      	orrs	r3, r1
 8004dd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004dd4:	e003      	b.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004dea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004dee:	2300      	movs	r3, #0
 8004df0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004df4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	d056      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e06:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e0a:	d038      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004e0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e10:	d831      	bhi.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e12:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e16:	d034      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004e18:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e1c:	d82b      	bhi.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e1e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e22:	d01d      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004e24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e28:	d825      	bhi.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d006      	beq.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004e2e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e32:	d00a      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004e34:	e01f      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e36:	bf00      	nop
 8004e38:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e3c:	4ba2      	ldr	r3, [pc, #648]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	4aa1      	ldr	r2, [pc, #644]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e48:	e01c      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e4e:	3308      	adds	r3, #8
 8004e50:	2100      	movs	r1, #0
 8004e52:	4618      	mov	r0, r3
 8004e54:	f001 fb1c 	bl	8006490 <RCCEx_PLL2_Config>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004e5e:	e011      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e64:	3328      	adds	r3, #40	@ 0x28
 8004e66:	2100      	movs	r1, #0
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f001 fbc3 	bl	80065f4 <RCCEx_PLL3_Config>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e74:	e006      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e7c:	e002      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004e7e:	bf00      	nop
 8004e80:	e000      	b.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004e8c:	4b8e      	ldr	r3, [pc, #568]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e90:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e9c:	4a8a      	ldr	r2, [pc, #552]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e9e:	430b      	orrs	r3, r1
 8004ea0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ea2:	e003      	b.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004ec2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	d03a      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ed2:	2b30      	cmp	r3, #48	@ 0x30
 8004ed4:	d01f      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004ed6:	2b30      	cmp	r3, #48	@ 0x30
 8004ed8:	d819      	bhi.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004eda:	2b20      	cmp	r3, #32
 8004edc:	d00c      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004ede:	2b20      	cmp	r3, #32
 8004ee0:	d815      	bhi.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d019      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004ee6:	2b10      	cmp	r3, #16
 8004ee8:	d111      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eea:	4b77      	ldr	r3, [pc, #476]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eee:	4a76      	ldr	r2, [pc, #472]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004ef6:	e011      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efc:	3308      	adds	r3, #8
 8004efe:	2102      	movs	r1, #2
 8004f00:	4618      	mov	r0, r3
 8004f02:	f001 fac5 	bl	8006490 <RCCEx_PLL2_Config>
 8004f06:	4603      	mov	r3, r0
 8004f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f0c:	e006      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f14:	e002      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f24:	4b68      	ldr	r3, [pc, #416]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f28:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f32:	4a65      	ldr	r2, [pc, #404]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f34:	430b      	orrs	r3, r1
 8004f36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f38:	e003      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004f4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004f52:	2300      	movs	r3, #0
 8004f54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004f58:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	d051      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f6c:	d035      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004f6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f72:	d82e      	bhi.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004f74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f78:	d031      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004f7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004f7e:	d828      	bhi.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004f80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f84:	d01a      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004f86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f8a:	d822      	bhi.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004f90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f94:	d007      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004f96:	e01c      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f98:	4b4b      	ldr	r3, [pc, #300]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9c:	4a4a      	ldr	r2, [pc, #296]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004fa4:	e01c      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004faa:	3308      	adds	r3, #8
 8004fac:	2100      	movs	r1, #0
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f001 fa6e 	bl	8006490 <RCCEx_PLL2_Config>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004fba:	e011      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc0:	3328      	adds	r3, #40	@ 0x28
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f001 fb15 	bl	80065f4 <RCCEx_PLL3_Config>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004fd0:	e006      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004fd8:	e002      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004fda:	bf00      	nop
 8004fdc:	e000      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10a      	bne.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004fe8:	4b37      	ldr	r3, [pc, #220]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ff4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff6:	4a34      	ldr	r2, [pc, #208]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ff8:	430b      	orrs	r3, r1
 8004ffa:	6513      	str	r3, [r2, #80]	@ 0x50
 8004ffc:	e003      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005002:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800500e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005012:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005016:	2300      	movs	r3, #0
 8005018:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800501c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005020:	460b      	mov	r3, r1
 8005022:	4313      	orrs	r3, r2
 8005024:	d056      	beq.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800502c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005030:	d033      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005032:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005036:	d82c      	bhi.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005038:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800503c:	d02f      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800503e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005042:	d826      	bhi.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005044:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005048:	d02b      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800504a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800504e:	d820      	bhi.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005054:	d012      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005056:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800505a:	d81a      	bhi.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d022      	beq.n	80050a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005064:	d115      	bne.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800506a:	3308      	adds	r3, #8
 800506c:	2101      	movs	r1, #1
 800506e:	4618      	mov	r0, r3
 8005070:	f001 fa0e 	bl	8006490 <RCCEx_PLL2_Config>
 8005074:	4603      	mov	r3, r0
 8005076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800507a:	e015      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800507c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005080:	3328      	adds	r3, #40	@ 0x28
 8005082:	2101      	movs	r1, #1
 8005084:	4618      	mov	r0, r3
 8005086:	f001 fab5 	bl	80065f4 <RCCEx_PLL3_Config>
 800508a:	4603      	mov	r3, r0
 800508c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005090:	e00a      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005098:	e006      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800509a:	bf00      	nop
 800509c:	e004      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800509e:	bf00      	nop
 80050a0:	e002      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050a2:	bf00      	nop
 80050a4:	e000      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10d      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80050b0:	4b05      	ldr	r3, [pc, #20]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050b4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80050b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050be:	4a02      	ldr	r2, [pc, #8]	@ (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80050c0:	430b      	orrs	r3, r1
 80050c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80050c4:	e006      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80050c6:	bf00      	nop
 80050c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80050d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050dc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80050e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050e4:	2300      	movs	r3, #0
 80050e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050ea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4313      	orrs	r3, r2
 80050f2:	d055      	beq.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80050f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80050fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005100:	d033      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005106:	d82c      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510c:	d02f      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800510e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005112:	d826      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005114:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005118:	d02b      	beq.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800511a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800511e:	d820      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005120:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005124:	d012      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800512a:	d81a      	bhi.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800512c:	2b00      	cmp	r3, #0
 800512e:	d022      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005130:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005134:	d115      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513a:	3308      	adds	r3, #8
 800513c:	2101      	movs	r1, #1
 800513e:	4618      	mov	r0, r3
 8005140:	f001 f9a6 	bl	8006490 <RCCEx_PLL2_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800514a:	e015      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800514c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005150:	3328      	adds	r3, #40	@ 0x28
 8005152:	2101      	movs	r1, #1
 8005154:	4618      	mov	r0, r3
 8005156:	f001 fa4d 	bl	80065f4 <RCCEx_PLL3_Config>
 800515a:	4603      	mov	r3, r0
 800515c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005160:	e00a      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005168:	e006      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800516a:	bf00      	nop
 800516c:	e004      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800516e:	bf00      	nop
 8005170:	e002      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005172:	bf00      	nop
 8005174:	e000      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005176:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10b      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005180:	4ba3      	ldr	r3, [pc, #652]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005184:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005190:	4a9f      	ldr	r2, [pc, #636]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005192:	430b      	orrs	r3, r1
 8005194:	6593      	str	r3, [r2, #88]	@ 0x58
 8005196:	e003      	b.n	80051a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005198:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800519c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80051ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80051b0:	2300      	movs	r3, #0
 80051b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80051b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80051ba:	460b      	mov	r3, r1
 80051bc:	4313      	orrs	r3, r2
 80051be:	d037      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80051c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051ca:	d00e      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80051cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051d0:	d816      	bhi.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d018      	beq.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80051d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051da:	d111      	bne.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051dc:	4b8c      	ldr	r3, [pc, #560]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e0:	4a8b      	ldr	r2, [pc, #556]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80051e8:	e00f      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80051ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ee:	3308      	adds	r3, #8
 80051f0:	2101      	movs	r1, #1
 80051f2:	4618      	mov	r0, r3
 80051f4:	f001 f94c 	bl	8006490 <RCCEx_PLL2_Config>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80051fe:	e004      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005206:	e000      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800520a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005212:	4b7f      	ldr	r3, [pc, #508]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005214:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005216:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800521a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800521e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005220:	4a7b      	ldr	r2, [pc, #492]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005222:	430b      	orrs	r3, r1
 8005224:	6513      	str	r3, [r2, #80]	@ 0x50
 8005226:	e003      	b.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800522c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005238:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800523c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005240:	2300      	movs	r3, #0
 8005242:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005246:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800524a:	460b      	mov	r3, r1
 800524c:	4313      	orrs	r3, r2
 800524e:	d039      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005256:	2b03      	cmp	r3, #3
 8005258:	d81c      	bhi.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800525a:	a201      	add	r2, pc, #4	@ (adr r2, 8005260 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	0800529d 	.word	0x0800529d
 8005264:	08005271 	.word	0x08005271
 8005268:	0800527f 	.word	0x0800527f
 800526c:	0800529d 	.word	0x0800529d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005270:	4b67      	ldr	r3, [pc, #412]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005274:	4a66      	ldr	r2, [pc, #408]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005276:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800527a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800527c:	e00f      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800527e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005282:	3308      	adds	r3, #8
 8005284:	2102      	movs	r1, #2
 8005286:	4618      	mov	r0, r3
 8005288:	f001 f902 	bl	8006490 <RCCEx_PLL2_Config>
 800528c:	4603      	mov	r3, r0
 800528e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005292:	e004      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800529a:	e000      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800529c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800529e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d10a      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80052a6:	4b5a      	ldr	r3, [pc, #360]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052aa:	f023 0103 	bic.w	r1, r3, #3
 80052ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052b4:	4a56      	ldr	r2, [pc, #344]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052b6:	430b      	orrs	r3, r1
 80052b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80052ba:	e003      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80052d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052d4:	2300      	movs	r3, #0
 80052d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052da:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80052de:	460b      	mov	r3, r1
 80052e0:	4313      	orrs	r3, r2
 80052e2:	f000 809f 	beq.w	8005424 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052e6:	4b4b      	ldr	r3, [pc, #300]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a4a      	ldr	r2, [pc, #296]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80052ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052f2:	f7fc fca7 	bl	8001c44 <HAL_GetTick>
 80052f6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052fa:	e00b      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052fc:	f7fc fca2 	bl	8001c44 <HAL_GetTick>
 8005300:	4602      	mov	r2, r0
 8005302:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	2b64      	cmp	r3, #100	@ 0x64
 800530a:	d903      	bls.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005312:	e005      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005314:	4b3f      	ldr	r3, [pc, #252]	@ (8005414 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0ed      	beq.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005324:	2b00      	cmp	r3, #0
 8005326:	d179      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005328:	4b39      	ldr	r3, [pc, #228]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800532a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800532c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005334:	4053      	eors	r3, r2
 8005336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800533a:	2b00      	cmp	r3, #0
 800533c:	d015      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800533e:	4b34      	ldr	r3, [pc, #208]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005340:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005342:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005346:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800534a:	4b31      	ldr	r3, [pc, #196]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534e:	4a30      	ldr	r2, [pc, #192]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005354:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005356:	4b2e      	ldr	r3, [pc, #184]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535a:	4a2d      	ldr	r2, [pc, #180]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800535c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005360:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005362:	4a2b      	ldr	r2, [pc, #172]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005364:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005368:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800536a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800536e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005376:	d118      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005378:	f7fc fc64 	bl	8001c44 <HAL_GetTick>
 800537c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005380:	e00d      	b.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005382:	f7fc fc5f 	bl	8001c44 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800538c:	1ad2      	subs	r2, r2, r3
 800538e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005392:	429a      	cmp	r2, r3
 8005394:	d903      	bls.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800539c:	e005      	b.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800539e:	4b1c      	ldr	r3, [pc, #112]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0eb      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80053aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d129      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053c2:	d10e      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80053c4:	4b12      	ldr	r3, [pc, #72]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80053cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053d4:	091a      	lsrs	r2, r3, #4
 80053d6:	4b10      	ldr	r3, [pc, #64]	@ (8005418 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80053d8:	4013      	ands	r3, r2
 80053da:	4a0d      	ldr	r2, [pc, #52]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053dc:	430b      	orrs	r3, r1
 80053de:	6113      	str	r3, [r2, #16]
 80053e0:	e005      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80053e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053e8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80053ec:	6113      	str	r3, [r2, #16]
 80053ee:	4b08      	ldr	r3, [pc, #32]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053f0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80053f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053fe:	4a04      	ldr	r2, [pc, #16]	@ (8005410 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005400:	430b      	orrs	r3, r1
 8005402:	6713      	str	r3, [r2, #112]	@ 0x70
 8005404:	e00e      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800540a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800540e:	e009      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005410:	58024400 	.word	0x58024400
 8005414:	58024800 	.word	0x58024800
 8005418:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f002 0301 	and.w	r3, r2, #1
 8005430:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005434:	2300      	movs	r3, #0
 8005436:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800543a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800543e:	460b      	mov	r3, r1
 8005440:	4313      	orrs	r3, r2
 8005442:	f000 8089 	beq.w	8005558 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800544a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800544c:	2b28      	cmp	r3, #40	@ 0x28
 800544e:	d86b      	bhi.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005450:	a201      	add	r2, pc, #4	@ (adr r2, 8005458 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005456:	bf00      	nop
 8005458:	08005531 	.word	0x08005531
 800545c:	08005529 	.word	0x08005529
 8005460:	08005529 	.word	0x08005529
 8005464:	08005529 	.word	0x08005529
 8005468:	08005529 	.word	0x08005529
 800546c:	08005529 	.word	0x08005529
 8005470:	08005529 	.word	0x08005529
 8005474:	08005529 	.word	0x08005529
 8005478:	080054fd 	.word	0x080054fd
 800547c:	08005529 	.word	0x08005529
 8005480:	08005529 	.word	0x08005529
 8005484:	08005529 	.word	0x08005529
 8005488:	08005529 	.word	0x08005529
 800548c:	08005529 	.word	0x08005529
 8005490:	08005529 	.word	0x08005529
 8005494:	08005529 	.word	0x08005529
 8005498:	08005513 	.word	0x08005513
 800549c:	08005529 	.word	0x08005529
 80054a0:	08005529 	.word	0x08005529
 80054a4:	08005529 	.word	0x08005529
 80054a8:	08005529 	.word	0x08005529
 80054ac:	08005529 	.word	0x08005529
 80054b0:	08005529 	.word	0x08005529
 80054b4:	08005529 	.word	0x08005529
 80054b8:	08005531 	.word	0x08005531
 80054bc:	08005529 	.word	0x08005529
 80054c0:	08005529 	.word	0x08005529
 80054c4:	08005529 	.word	0x08005529
 80054c8:	08005529 	.word	0x08005529
 80054cc:	08005529 	.word	0x08005529
 80054d0:	08005529 	.word	0x08005529
 80054d4:	08005529 	.word	0x08005529
 80054d8:	08005531 	.word	0x08005531
 80054dc:	08005529 	.word	0x08005529
 80054e0:	08005529 	.word	0x08005529
 80054e4:	08005529 	.word	0x08005529
 80054e8:	08005529 	.word	0x08005529
 80054ec:	08005529 	.word	0x08005529
 80054f0:	08005529 	.word	0x08005529
 80054f4:	08005529 	.word	0x08005529
 80054f8:	08005531 	.word	0x08005531
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005500:	3308      	adds	r3, #8
 8005502:	2101      	movs	r1, #1
 8005504:	4618      	mov	r0, r3
 8005506:	f000 ffc3 	bl	8006490 <RCCEx_PLL2_Config>
 800550a:	4603      	mov	r3, r0
 800550c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005510:	e00f      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005516:	3328      	adds	r3, #40	@ 0x28
 8005518:	2101      	movs	r1, #1
 800551a:	4618      	mov	r0, r3
 800551c:	f001 f86a 	bl	80065f4 <RCCEx_PLL3_Config>
 8005520:	4603      	mov	r3, r0
 8005522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005526:	e004      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800552e:	e000      	b.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10a      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800553a:	4bbf      	ldr	r3, [pc, #764]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800553c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800553e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005546:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005548:	4abb      	ldr	r2, [pc, #748]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800554a:	430b      	orrs	r3, r1
 800554c:	6553      	str	r3, [r2, #84]	@ 0x54
 800554e:	e003      	b.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005554:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f002 0302 	and.w	r3, r2, #2
 8005564:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005568:	2300      	movs	r3, #0
 800556a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800556e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005572:	460b      	mov	r3, r1
 8005574:	4313      	orrs	r3, r2
 8005576:	d041      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800557e:	2b05      	cmp	r3, #5
 8005580:	d824      	bhi.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005582:	a201      	add	r2, pc, #4	@ (adr r2, 8005588 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005588:	080055d5 	.word	0x080055d5
 800558c:	080055a1 	.word	0x080055a1
 8005590:	080055b7 	.word	0x080055b7
 8005594:	080055d5 	.word	0x080055d5
 8005598:	080055d5 	.word	0x080055d5
 800559c:	080055d5 	.word	0x080055d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a4:	3308      	adds	r3, #8
 80055a6:	2101      	movs	r1, #1
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 ff71 	bl	8006490 <RCCEx_PLL2_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80055b4:	e00f      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80055b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ba:	3328      	adds	r3, #40	@ 0x28
 80055bc:	2101      	movs	r1, #1
 80055be:	4618      	mov	r0, r3
 80055c0:	f001 f818 	bl	80065f4 <RCCEx_PLL3_Config>
 80055c4:	4603      	mov	r3, r0
 80055c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80055ca:	e004      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055d2:	e000      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80055d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10a      	bne.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80055de:	4b96      	ldr	r3, [pc, #600]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055e2:	f023 0107 	bic.w	r1, r3, #7
 80055e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055ec:	4a92      	ldr	r2, [pc, #584]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80055ee:	430b      	orrs	r3, r1
 80055f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80055f2:	e003      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	f002 0304 	and.w	r3, r2, #4
 8005608:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800560c:	2300      	movs	r3, #0
 800560e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005612:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005616:	460b      	mov	r3, r1
 8005618:	4313      	orrs	r3, r2
 800561a:	d044      	beq.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800561c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005620:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005624:	2b05      	cmp	r3, #5
 8005626:	d825      	bhi.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005628:	a201      	add	r2, pc, #4	@ (adr r2, 8005630 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562e:	bf00      	nop
 8005630:	0800567d 	.word	0x0800567d
 8005634:	08005649 	.word	0x08005649
 8005638:	0800565f 	.word	0x0800565f
 800563c:	0800567d 	.word	0x0800567d
 8005640:	0800567d 	.word	0x0800567d
 8005644:	0800567d 	.word	0x0800567d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564c:	3308      	adds	r3, #8
 800564e:	2101      	movs	r1, #1
 8005650:	4618      	mov	r0, r3
 8005652:	f000 ff1d 	bl	8006490 <RCCEx_PLL2_Config>
 8005656:	4603      	mov	r3, r0
 8005658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800565c:	e00f      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800565e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005662:	3328      	adds	r3, #40	@ 0x28
 8005664:	2101      	movs	r1, #1
 8005666:	4618      	mov	r0, r3
 8005668:	f000 ffc4 	bl	80065f4 <RCCEx_PLL3_Config>
 800566c:	4603      	mov	r3, r0
 800566e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005672:	e004      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800567a:	e000      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800567c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800567e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10b      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005686:	4b6c      	ldr	r3, [pc, #432]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568a:	f023 0107 	bic.w	r1, r3, #7
 800568e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005696:	4a68      	ldr	r2, [pc, #416]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005698:	430b      	orrs	r3, r1
 800569a:	6593      	str	r3, [r2, #88]	@ 0x58
 800569c:	e003      	b.n	80056a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800569e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	f002 0320 	and.w	r3, r2, #32
 80056b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056b6:	2300      	movs	r3, #0
 80056b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80056bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056c0:	460b      	mov	r3, r1
 80056c2:	4313      	orrs	r3, r2
 80056c4:	d055      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056d2:	d033      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80056d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80056d8:	d82c      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80056da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056de:	d02f      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80056e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e4:	d826      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80056e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80056ea:	d02b      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80056ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80056f0:	d820      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80056f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056f6:	d012      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80056f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056fc:	d81a      	bhi.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d022      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005702:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005706:	d115      	bne.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800570c:	3308      	adds	r3, #8
 800570e:	2100      	movs	r1, #0
 8005710:	4618      	mov	r0, r3
 8005712:	f000 febd 	bl	8006490 <RCCEx_PLL2_Config>
 8005716:	4603      	mov	r3, r0
 8005718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800571c:	e015      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800571e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005722:	3328      	adds	r3, #40	@ 0x28
 8005724:	2102      	movs	r1, #2
 8005726:	4618      	mov	r0, r3
 8005728:	f000 ff64 	bl	80065f4 <RCCEx_PLL3_Config>
 800572c:	4603      	mov	r3, r0
 800572e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005732:	e00a      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800573a:	e006      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800573c:	bf00      	nop
 800573e:	e004      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005740:	bf00      	nop
 8005742:	e002      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005744:	bf00      	nop
 8005746:	e000      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800574a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10b      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005752:	4b39      	ldr	r3, [pc, #228]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005756:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800575a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005762:	4a35      	ldr	r2, [pc, #212]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005764:	430b      	orrs	r3, r1
 8005766:	6553      	str	r3, [r2, #84]	@ 0x54
 8005768:	e003      	b.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800576e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800577e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005782:	2300      	movs	r3, #0
 8005784:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005788:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800578c:	460b      	mov	r3, r1
 800578e:	4313      	orrs	r3, r2
 8005790:	d058      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005796:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800579a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800579e:	d033      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80057a0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80057a4:	d82c      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80057a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057aa:	d02f      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80057ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057b0:	d826      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80057b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80057b6:	d02b      	beq.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80057b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80057bc:	d820      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80057be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057c2:	d012      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80057c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057c8:	d81a      	bhi.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d022      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80057ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d2:	d115      	bne.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d8:	3308      	adds	r3, #8
 80057da:	2100      	movs	r1, #0
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 fe57 	bl	8006490 <RCCEx_PLL2_Config>
 80057e2:	4603      	mov	r3, r0
 80057e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80057e8:	e015      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ee:	3328      	adds	r3, #40	@ 0x28
 80057f0:	2102      	movs	r1, #2
 80057f2:	4618      	mov	r0, r3
 80057f4:	f000 fefe 	bl	80065f4 <RCCEx_PLL3_Config>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80057fe:	e00a      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005806:	e006      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005808:	bf00      	nop
 800580a:	e004      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800580c:	bf00      	nop
 800580e:	e002      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005810:	bf00      	nop
 8005812:	e000      	b.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005814:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10e      	bne.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800581e:	4b06      	ldr	r3, [pc, #24]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005822:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800582a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800582e:	4a02      	ldr	r2, [pc, #8]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005830:	430b      	orrs	r3, r1
 8005832:	6593      	str	r3, [r2, #88]	@ 0x58
 8005834:	e006      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005836:	bf00      	nop
 8005838:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800583c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005840:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005850:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005854:	2300      	movs	r3, #0
 8005856:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800585a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800585e:	460b      	mov	r3, r1
 8005860:	4313      	orrs	r3, r2
 8005862:	d055      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005868:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800586c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005870:	d033      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005872:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005876:	d82c      	bhi.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005878:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800587c:	d02f      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800587e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005882:	d826      	bhi.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005884:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005888:	d02b      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800588a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800588e:	d820      	bhi.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005890:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005894:	d012      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005896:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800589a:	d81a      	bhi.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800589c:	2b00      	cmp	r3, #0
 800589e:	d022      	beq.n	80058e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80058a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058a4:	d115      	bne.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058aa:	3308      	adds	r3, #8
 80058ac:	2100      	movs	r1, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f000 fdee 	bl	8006490 <RCCEx_PLL2_Config>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80058ba:	e015      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80058bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c0:	3328      	adds	r3, #40	@ 0x28
 80058c2:	2102      	movs	r1, #2
 80058c4:	4618      	mov	r0, r3
 80058c6:	f000 fe95 	bl	80065f4 <RCCEx_PLL3_Config>
 80058ca:	4603      	mov	r3, r0
 80058cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80058d0:	e00a      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058d8:	e006      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80058da:	bf00      	nop
 80058dc:	e004      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80058de:	bf00      	nop
 80058e0:	e002      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80058e2:	bf00      	nop
 80058e4:	e000      	b.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80058e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10b      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80058f0:	4ba1      	ldr	r3, [pc, #644]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80058f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058f4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80058f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005900:	4a9d      	ldr	r2, [pc, #628]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005902:	430b      	orrs	r3, r1
 8005904:	6593      	str	r3, [r2, #88]	@ 0x58
 8005906:	e003      	b.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800590c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005918:	f002 0308 	and.w	r3, r2, #8
 800591c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005920:	2300      	movs	r3, #0
 8005922:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005926:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800592a:	460b      	mov	r3, r1
 800592c:	4313      	orrs	r3, r2
 800592e:	d01e      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005934:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005938:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800593c:	d10c      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800593e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005942:	3328      	adds	r3, #40	@ 0x28
 8005944:	2102      	movs	r1, #2
 8005946:	4618      	mov	r0, r3
 8005948:	f000 fe54 	bl	80065f4 <RCCEx_PLL3_Config>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005958:	4b87      	ldr	r3, [pc, #540]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800595a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800595c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005964:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005968:	4a83      	ldr	r2, [pc, #524]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800596a:	430b      	orrs	r3, r1
 800596c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800596e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005976:	f002 0310 	and.w	r3, r2, #16
 800597a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800597e:	2300      	movs	r3, #0
 8005980:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005984:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005988:	460b      	mov	r3, r1
 800598a:	4313      	orrs	r3, r2
 800598c:	d01e      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800598e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005992:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800599a:	d10c      	bne.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800599c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059a0:	3328      	adds	r3, #40	@ 0x28
 80059a2:	2102      	movs	r1, #2
 80059a4:	4618      	mov	r0, r3
 80059a6:	f000 fe25 	bl	80065f4 <RCCEx_PLL3_Config>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059b6:	4b70      	ldr	r3, [pc, #448]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059c6:	4a6c      	ldr	r2, [pc, #432]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80059cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80059d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059dc:	2300      	movs	r3, #0
 80059de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80059e6:	460b      	mov	r3, r1
 80059e8:	4313      	orrs	r3, r2
 80059ea:	d03e      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80059f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059f8:	d022      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80059fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059fe:	d81b      	bhi.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a08:	d00b      	beq.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005a0a:	e015      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a10:	3308      	adds	r3, #8
 8005a12:	2100      	movs	r1, #0
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 fd3b 	bl	8006490 <RCCEx_PLL2_Config>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a20:	e00f      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a26:	3328      	adds	r3, #40	@ 0x28
 8005a28:	2102      	movs	r1, #2
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fde2 	bl	80065f4 <RCCEx_PLL3_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a36:	e004      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a3e:	e000      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a4e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a5a:	4a47      	ldr	r2, [pc, #284]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a5c:	430b      	orrs	r3, r1
 8005a5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a60:	e003      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a72:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005a76:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a78:	2300      	movs	r3, #0
 8005a7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005a7c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005a80:	460b      	mov	r3, r1
 8005a82:	4313      	orrs	r3, r2
 8005a84:	d03b      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a92:	d01f      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005a94:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005a98:	d818      	bhi.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a9e:	d003      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005aa0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005aa4:	d007      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005aa6:	e011      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005aa8:	4b33      	ldr	r3, [pc, #204]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aac:	4a32      	ldr	r2, [pc, #200]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ab2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005ab4:	e00f      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aba:	3328      	adds	r3, #40	@ 0x28
 8005abc:	2101      	movs	r1, #1
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 fd98 	bl	80065f4 <RCCEx_PLL3_Config>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005aca:	e004      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ad2:	e000      	b.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005ad4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10b      	bne.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ade:	4b26      	ldr	r3, [pc, #152]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aee:	4a22      	ldr	r2, [pc, #136]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005af0:	430b      	orrs	r3, r1
 8005af2:	6553      	str	r3, [r2, #84]	@ 0x54
 8005af4:	e003      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b06:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005b0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b10:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005b14:	460b      	mov	r3, r1
 8005b16:	4313      	orrs	r3, r2
 8005b18:	d034      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d003      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b28:	d007      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005b2a:	e011      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b2c:	4b12      	ldr	r3, [pc, #72]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b30:	4a11      	ldr	r2, [pc, #68]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005b38:	e00e      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3e:	3308      	adds	r3, #8
 8005b40:	2102      	movs	r1, #2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 fca4 	bl	8006490 <RCCEx_PLL2_Config>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005b4e:	e003      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10d      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005b60:	4b05      	ldr	r3, [pc, #20]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b64:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6e:	4a02      	ldr	r2, [pc, #8]	@ (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b70:	430b      	orrs	r3, r1
 8005b72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b74:	e006      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005b76:	bf00      	nop
 8005b78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005b90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b92:	2300      	movs	r3, #0
 8005b94:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005b96:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	d00c      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba4:	3328      	adds	r3, #40	@ 0x28
 8005ba6:	2102      	movs	r1, #2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f000 fd23 	bl	80065f4 <RCCEx_PLL3_Config>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005bc6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005bc8:	2300      	movs	r3, #0
 8005bca:	667b      	str	r3, [r7, #100]	@ 0x64
 8005bcc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	d038      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005be2:	d018      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005be4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005be8:	d811      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005bea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bee:	d014      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bf4:	d80b      	bhi.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d011      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bfe:	d106      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c00:	4bc3      	ldr	r3, [pc, #780]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c04:	4ac2      	ldr	r2, [pc, #776]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005c0c:	e008      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c14:	e004      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c16:	bf00      	nop
 8005c18:	e002      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c1a:	bf00      	nop
 8005c1c:	e000      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10b      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c28:	4bb9      	ldr	r3, [pc, #740]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c38:	4ab5      	ldr	r2, [pc, #724]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c3e:	e003      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005c54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005c56:	2300      	movs	r3, #0
 8005c58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c5a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4313      	orrs	r3, r2
 8005c62:	d009      	beq.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005c64:	4baa      	ldr	r3, [pc, #680]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c68:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c72:	4aa7      	ldr	r2, [pc, #668]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c74:	430b      	orrs	r3, r1
 8005c76:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c80:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005c84:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c86:	2300      	movs	r3, #0
 8005c88:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c8a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4313      	orrs	r3, r2
 8005c92:	d00a      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005c94:	4b9e      	ldr	r3, [pc, #632]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005ca4:	4a9a      	ldr	r2, [pc, #616]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ca6:	430b      	orrs	r3, r1
 8005ca8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005cb8:	2300      	movs	r3, #0
 8005cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cbc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	d009      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cc6:	4b92      	ldr	r3, [pc, #584]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cca:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cd4:	4a8e      	ldr	r2, [pc, #568]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cd6:	430b      	orrs	r3, r1
 8005cd8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005ce6:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ce8:	2300      	movs	r3, #0
 8005cea:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	d00e      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005cf6:	4b86      	ldr	r3, [pc, #536]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	4a85      	ldr	r2, [pc, #532]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cfc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d00:	6113      	str	r3, [r2, #16]
 8005d02:	4b83      	ldr	r3, [pc, #524]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d04:	6919      	ldr	r1, [r3, #16]
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005d0e:	4a80      	ldr	r2, [pc, #512]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d10:	430b      	orrs	r3, r1
 8005d12:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005d20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d22:	2300      	movs	r3, #0
 8005d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d26:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	d009      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d30:	4b77      	ldr	r3, [pc, #476]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d34:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d3e:	4a74      	ldr	r2, [pc, #464]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d40:	430b      	orrs	r3, r1
 8005d42:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d52:	2300      	movs	r3, #0
 8005d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d56:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	d00a      	beq.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d60:	4b6b      	ldr	r3, [pc, #428]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d64:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005d68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005d70:	4a67      	ldr	r2, [pc, #412]	@ (8005f10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d72:	430b      	orrs	r3, r1
 8005d74:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	2100      	movs	r1, #0
 8005d80:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d88:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	d011      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d96:	3308      	adds	r3, #8
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f000 fb78 	bl	8006490 <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005db2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	6239      	str	r1, [r7, #32]
 8005dc2:	f003 0302 	and.w	r3, r3, #2
 8005dc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005dc8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	d011      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	2101      	movs	r1, #1
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 fb58 	bl	8006490 <RCCEx_PLL2_Config>
 8005de0:	4603      	mov	r3, r0
 8005de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005df2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfe:	2100      	movs	r1, #0
 8005e00:	61b9      	str	r1, [r7, #24]
 8005e02:	f003 0304 	and.w	r3, r3, #4
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	d011      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e16:	3308      	adds	r3, #8
 8005e18:	2102      	movs	r1, #2
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 fb38 	bl	8006490 <RCCEx_PLL2_Config>
 8005e20:	4603      	mov	r3, r0
 8005e22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	2100      	movs	r1, #0
 8005e40:	6139      	str	r1, [r7, #16]
 8005e42:	f003 0308 	and.w	r3, r3, #8
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	d011      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e56:	3328      	adds	r3, #40	@ 0x28
 8005e58:	2100      	movs	r1, #0
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fbca 	bl	80065f4 <RCCEx_PLL3_Config>
 8005e60:	4603      	mov	r3, r0
 8005e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7e:	2100      	movs	r1, #0
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	f003 0310 	and.w	r3, r3, #16
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	d011      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e96:	3328      	adds	r3, #40	@ 0x28
 8005e98:	2101      	movs	r1, #1
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fbaa 	bl	80065f4 <RCCEx_PLL3_Config>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d003      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	6039      	str	r1, [r7, #0]
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	d011      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed6:	3328      	adds	r3, #40	@ 0x28
 8005ed8:	2102      	movs	r1, #2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fb8a 	bl	80065f4 <RCCEx_PLL3_Config>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ef2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005ef6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d101      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e000      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f10:	58024400 	.word	0x58024400

08005f14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f18:	f7fe fd96 	bl	8004a48 <HAL_RCC_GetHCLKFreq>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	4b06      	ldr	r3, [pc, #24]	@ (8005f38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	091b      	lsrs	r3, r3, #4
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	4904      	ldr	r1, [pc, #16]	@ (8005f3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f2a:	5ccb      	ldrb	r3, [r1, r3]
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	58024400 	.word	0x58024400
 8005f3c:	08009ff8 	.word	0x08009ff8

08005f40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b089      	sub	sp, #36	@ 0x24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f48:	4ba1      	ldr	r3, [pc, #644]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f4c:	f003 0303 	and.w	r3, r3, #3
 8005f50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005f52:	4b9f      	ldr	r3, [pc, #636]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f56:	0b1b      	lsrs	r3, r3, #12
 8005f58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005f5e:	4b9c      	ldr	r3, [pc, #624]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f62:	091b      	lsrs	r3, r3, #4
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005f6a:	4b99      	ldr	r3, [pc, #612]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6e:	08db      	lsrs	r3, r3, #3
 8005f70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	fb02 f303 	mul.w	r3, r2, r3
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 8111 	beq.w	80061b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	f000 8083 	beq.w	800609c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005f96:	69bb      	ldr	r3, [r7, #24]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	f200 80a1 	bhi.w	80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d003      	beq.n	8005fac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d056      	beq.n	8006058 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005faa:	e099      	b.n	80060e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005fac:	4b88      	ldr	r3, [pc, #544]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0320 	and.w	r3, r3, #32
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d02d      	beq.n	8006014 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fb8:	4b85      	ldr	r3, [pc, #532]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	08db      	lsrs	r3, r3, #3
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	4a84      	ldr	r2, [pc, #528]	@ (80061d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	ee07 3a90 	vmov	s15, r3
 8005fd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	ee07 3a90 	vmov	s15, r3
 8005fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fe2:	4b7b      	ldr	r3, [pc, #492]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ff6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006002:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800600a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800600e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006012:	e087      	b.n	8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800601e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80061dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006026:	4b6a      	ldr	r3, [pc, #424]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602e:	ee07 3a90 	vmov	s15, r3
 8006032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006036:	ed97 6a03 	vldr	s12, [r7, #12]
 800603a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800603e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006046:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800604a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800604e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006056:	e065      	b.n	8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80061e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606a:	4b59      	ldr	r3, [pc, #356]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800606c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006072:	ee07 3a90 	vmov	s15, r3
 8006076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800607a:	ed97 6a03 	vldr	s12, [r7, #12]
 800607e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800608a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800608e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800609a:	e043      	b.n	8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80061e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80060aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ae:	4b48      	ldr	r3, [pc, #288]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060be:	ed97 6a03 	vldr	s12, [r7, #12]
 80060c2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060de:	e021      	b.n	8006124 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80061e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060f2:	4b37      	ldr	r3, [pc, #220]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006102:	ed97 6a03 	vldr	s12, [r7, #12]
 8006106:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80061d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800610a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006112:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006116:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800611a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006122:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006124:	4b2a      	ldr	r3, [pc, #168]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006128:	0a5b      	lsrs	r3, r3, #9
 800612a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006136:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800613a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800613e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800614a:	ee17 2a90 	vmov	r2, s15
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006152:	4b1f      	ldr	r3, [pc, #124]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	0c1b      	lsrs	r3, r3, #16
 8006158:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800615c:	ee07 3a90 	vmov	s15, r3
 8006160:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006164:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006168:	ee37 7a87 	vadd.f32	s14, s15, s14
 800616c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006178:	ee17 2a90 	vmov	r2, s15
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006180:	4b13      	ldr	r3, [pc, #76]	@ (80061d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006184:	0e1b      	lsrs	r3, r3, #24
 8006186:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800618a:	ee07 3a90 	vmov	s15, r3
 800618e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006192:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006196:	ee37 7a87 	vadd.f32	s14, s15, s14
 800619a:	edd7 6a07 	vldr	s13, [r7, #28]
 800619e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061a6:	ee17 2a90 	vmov	r2, s15
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061ae:	e008      	b.n	80061c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	609a      	str	r2, [r3, #8]
}
 80061c2:	bf00      	nop
 80061c4:	3724      	adds	r7, #36	@ 0x24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	58024400 	.word	0x58024400
 80061d4:	03d09000 	.word	0x03d09000
 80061d8:	46000000 	.word	0x46000000
 80061dc:	4c742400 	.word	0x4c742400
 80061e0:	4a742400 	.word	0x4a742400
 80061e4:	4af42400 	.word	0x4af42400

080061e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b089      	sub	sp, #36	@ 0x24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061f0:	4ba1      	ldr	r3, [pc, #644]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f4:	f003 0303 	and.w	r3, r3, #3
 80061f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80061fa:	4b9f      	ldr	r3, [pc, #636]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fe:	0d1b      	lsrs	r3, r3, #20
 8006200:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006204:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006206:	4b9c      	ldr	r3, [pc, #624]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620a:	0a1b      	lsrs	r3, r3, #8
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006212:	4b99      	ldr	r3, [pc, #612]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006216:	08db      	lsrs	r3, r3, #3
 8006218:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	fb02 f303 	mul.w	r3, r2, r3
 8006222:	ee07 3a90 	vmov	s15, r3
 8006226:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800622a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 8111 	beq.w	8006458 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	2b02      	cmp	r3, #2
 800623a:	f000 8083 	beq.w	8006344 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	2b02      	cmp	r3, #2
 8006242:	f200 80a1 	bhi.w	8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006246:	69bb      	ldr	r3, [r7, #24]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d056      	beq.n	8006300 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006252:	e099      	b.n	8006388 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006254:	4b88      	ldr	r3, [pc, #544]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0320 	and.w	r3, r3, #32
 800625c:	2b00      	cmp	r3, #0
 800625e:	d02d      	beq.n	80062bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006260:	4b85      	ldr	r3, [pc, #532]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	08db      	lsrs	r3, r3, #3
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	4a84      	ldr	r2, [pc, #528]	@ (800647c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800626c:	fa22 f303 	lsr.w	r3, r2, r3
 8006270:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	ee07 3a90 	vmov	s15, r3
 8006278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800628a:	4b7b      	ldr	r3, [pc, #492]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006292:	ee07 3a90 	vmov	s15, r3
 8006296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800629a:	ed97 6a03 	vldr	s12, [r7, #12]
 800629e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062b6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80062ba:	e087      	b.n	80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006484 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80062ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062de:	ed97 6a03 	vldr	s12, [r7, #12]
 80062e2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062fe:	e065      	b.n	80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800630a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800630e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006312:	4b59      	ldr	r3, [pc, #356]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006322:	ed97 6a03 	vldr	s12, [r7, #12]
 8006326:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800632a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800632e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006332:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800633a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006342:	e043      	b.n	80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	ee07 3a90 	vmov	s15, r3
 800634a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800648c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006352:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006356:	4b48      	ldr	r3, [pc, #288]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006366:	ed97 6a03 	vldr	s12, [r7, #12]
 800636a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800636e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006372:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006376:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800637a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800637e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006382:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006386:	e021      	b.n	80063cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006392:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006488 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006396:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800639a:	4b37      	ldr	r3, [pc, #220]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800639c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006480 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80063cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d0:	0a5b      	lsrs	r3, r3, #9
 80063d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80063ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063f2:	ee17 2a90 	vmov	r2, s15
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80063fa:	4b1f      	ldr	r3, [pc, #124]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fe:	0c1b      	lsrs	r3, r3, #16
 8006400:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006404:	ee07 3a90 	vmov	s15, r3
 8006408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006410:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006414:	edd7 6a07 	vldr	s13, [r7, #28]
 8006418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800641c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006420:	ee17 2a90 	vmov	r2, s15
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006428:	4b13      	ldr	r3, [pc, #76]	@ (8006478 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800642a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800642c:	0e1b      	lsrs	r3, r3, #24
 800642e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800643e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006442:	edd7 6a07 	vldr	s13, [r7, #28]
 8006446:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800644a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800644e:	ee17 2a90 	vmov	r2, s15
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006456:	e008      	b.n	800646a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	609a      	str	r2, [r3, #8]
}
 800646a:	bf00      	nop
 800646c:	3724      	adds	r7, #36	@ 0x24
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	58024400 	.word	0x58024400
 800647c:	03d09000 	.word	0x03d09000
 8006480:	46000000 	.word	0x46000000
 8006484:	4c742400 	.word	0x4c742400
 8006488:	4a742400 	.word	0x4a742400
 800648c:	4af42400 	.word	0x4af42400

08006490 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800649e:	4b53      	ldr	r3, [pc, #332]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 80064a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a2:	f003 0303 	and.w	r3, r3, #3
 80064a6:	2b03      	cmp	r3, #3
 80064a8:	d101      	bne.n	80064ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e099      	b.n	80065e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064ae:	4b4f      	ldr	r3, [pc, #316]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a4e      	ldr	r2, [pc, #312]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 80064b4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ba:	f7fb fbc3 	bl	8001c44 <HAL_GetTick>
 80064be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064c0:	e008      	b.n	80064d4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80064c2:	f7fb fbbf 	bl	8001c44 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d901      	bls.n	80064d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e086      	b.n	80065e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064d4:	4b45      	ldr	r3, [pc, #276]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1f0      	bne.n	80064c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80064e0:	4b42      	ldr	r3, [pc, #264]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 80064e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	031b      	lsls	r3, r3, #12
 80064ee:	493f      	ldr	r1, [pc, #252]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	628b      	str	r3, [r1, #40]	@ 0x28
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	3b01      	subs	r3, #1
 8006504:	025b      	lsls	r3, r3, #9
 8006506:	b29b      	uxth	r3, r3
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	3b01      	subs	r3, #1
 8006510:	041b      	lsls	r3, r3, #16
 8006512:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	3b01      	subs	r3, #1
 800651e:	061b      	lsls	r3, r3, #24
 8006520:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006524:	4931      	ldr	r1, [pc, #196]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 8006526:	4313      	orrs	r3, r2
 8006528:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800652a:	4b30      	ldr	r3, [pc, #192]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 800652c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	492d      	ldr	r1, [pc, #180]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 8006538:	4313      	orrs	r3, r2
 800653a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800653c:	4b2b      	ldr	r3, [pc, #172]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 800653e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006540:	f023 0220 	bic.w	r2, r3, #32
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	4928      	ldr	r1, [pc, #160]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 800654a:	4313      	orrs	r3, r2
 800654c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800654e:	4b27      	ldr	r3, [pc, #156]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 8006550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006552:	4a26      	ldr	r2, [pc, #152]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 8006554:	f023 0310 	bic.w	r3, r3, #16
 8006558:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800655a:	4b24      	ldr	r3, [pc, #144]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 800655c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800655e:	4b24      	ldr	r3, [pc, #144]	@ (80065f0 <RCCEx_PLL2_Config+0x160>)
 8006560:	4013      	ands	r3, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	69d2      	ldr	r2, [r2, #28]
 8006566:	00d2      	lsls	r2, r2, #3
 8006568:	4920      	ldr	r1, [pc, #128]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 800656a:	4313      	orrs	r3, r2
 800656c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800656e:	4b1f      	ldr	r3, [pc, #124]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	4a1e      	ldr	r2, [pc, #120]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 8006574:	f043 0310 	orr.w	r3, r3, #16
 8006578:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d106      	bne.n	800658e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006580:	4b1a      	ldr	r3, [pc, #104]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 8006582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006584:	4a19      	ldr	r2, [pc, #100]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 8006586:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800658a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800658c:	e00f      	b.n	80065ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d106      	bne.n	80065a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006594:	4b15      	ldr	r3, [pc, #84]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 8006596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006598:	4a14      	ldr	r2, [pc, #80]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 800659a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800659e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80065a0:	e005      	b.n	80065ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065a2:	4b12      	ldr	r3, [pc, #72]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 80065a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a6:	4a11      	ldr	r2, [pc, #68]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 80065a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80065ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065ae:	4b0f      	ldr	r3, [pc, #60]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a0e      	ldr	r2, [pc, #56]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 80065b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065ba:	f7fb fb43 	bl	8001c44 <HAL_GetTick>
 80065be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065c0:	e008      	b.n	80065d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80065c2:	f7fb fb3f 	bl	8001c44 <HAL_GetTick>
 80065c6:	4602      	mov	r2, r0
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	2b02      	cmp	r3, #2
 80065ce:	d901      	bls.n	80065d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e006      	b.n	80065e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065d4:	4b05      	ldr	r3, [pc, #20]	@ (80065ec <RCCEx_PLL2_Config+0x15c>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d0f0      	beq.n	80065c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	58024400 	.word	0x58024400
 80065f0:	ffff0007 	.word	0xffff0007

080065f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065fe:	2300      	movs	r3, #0
 8006600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006602:	4b53      	ldr	r3, [pc, #332]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 8006604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	2b03      	cmp	r3, #3
 800660c:	d101      	bne.n	8006612 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e099      	b.n	8006746 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006612:	4b4f      	ldr	r3, [pc, #316]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a4e      	ldr	r2, [pc, #312]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 8006618:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800661c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800661e:	f7fb fb11 	bl	8001c44 <HAL_GetTick>
 8006622:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006624:	e008      	b.n	8006638 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006626:	f7fb fb0d 	bl	8001c44 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d901      	bls.n	8006638 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e086      	b.n	8006746 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006638:	4b45      	ldr	r3, [pc, #276]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1f0      	bne.n	8006626 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006644:	4b42      	ldr	r3, [pc, #264]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 8006646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006648:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	051b      	lsls	r3, r3, #20
 8006652:	493f      	ldr	r1, [pc, #252]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 8006654:	4313      	orrs	r3, r2
 8006656:	628b      	str	r3, [r1, #40]	@ 0x28
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	3b01      	subs	r3, #1
 800665e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	3b01      	subs	r3, #1
 8006668:	025b      	lsls	r3, r3, #9
 800666a:	b29b      	uxth	r3, r3
 800666c:	431a      	orrs	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	3b01      	subs	r3, #1
 8006674:	041b      	lsls	r3, r3, #16
 8006676:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800667a:	431a      	orrs	r2, r3
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	3b01      	subs	r3, #1
 8006682:	061b      	lsls	r3, r3, #24
 8006684:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006688:	4931      	ldr	r1, [pc, #196]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 800668a:	4313      	orrs	r3, r2
 800668c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800668e:	4b30      	ldr	r3, [pc, #192]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 8006690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006692:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	492d      	ldr	r1, [pc, #180]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 800669c:	4313      	orrs	r3, r2
 800669e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 80066a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	4928      	ldr	r1, [pc, #160]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80066b2:	4b27      	ldr	r3, [pc, #156]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 80066b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b6:	4a26      	ldr	r2, [pc, #152]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 80066b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066be:	4b24      	ldr	r3, [pc, #144]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 80066c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066c2:	4b24      	ldr	r3, [pc, #144]	@ (8006754 <RCCEx_PLL3_Config+0x160>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	687a      	ldr	r2, [r7, #4]
 80066c8:	69d2      	ldr	r2, [r2, #28]
 80066ca:	00d2      	lsls	r2, r2, #3
 80066cc:	4920      	ldr	r1, [pc, #128]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80066d2:	4b1f      	ldr	r3, [pc, #124]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 80066d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d6:	4a1e      	ldr	r2, [pc, #120]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 80066d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d106      	bne.n	80066f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80066e4:	4b1a      	ldr	r3, [pc, #104]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 80066e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e8:	4a19      	ldr	r2, [pc, #100]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 80066ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80066ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80066f0:	e00f      	b.n	8006712 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d106      	bne.n	8006706 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80066f8:	4b15      	ldr	r3, [pc, #84]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 80066fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fc:	4a14      	ldr	r2, [pc, #80]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 80066fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006702:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006704:	e005      	b.n	8006712 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006706:	4b12      	ldr	r3, [pc, #72]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 8006708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800670a:	4a11      	ldr	r2, [pc, #68]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 800670c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006710:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006712:	4b0f      	ldr	r3, [pc, #60]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a0e      	ldr	r2, [pc, #56]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 8006718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800671c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800671e:	f7fb fa91 	bl	8001c44 <HAL_GetTick>
 8006722:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006724:	e008      	b.n	8006738 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006726:	f7fb fa8d 	bl	8001c44 <HAL_GetTick>
 800672a:	4602      	mov	r2, r0
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	1ad3      	subs	r3, r2, r3
 8006730:	2b02      	cmp	r3, #2
 8006732:	d901      	bls.n	8006738 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e006      	b.n	8006746 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006738:	4b05      	ldr	r3, [pc, #20]	@ (8006750 <RCCEx_PLL3_Config+0x15c>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d0f0      	beq.n	8006726 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006744:	7bfb      	ldrb	r3, [r7, #15]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	58024400 	.word	0x58024400
 8006754:	ffff0007 	.word	0xffff0007

08006758 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d101      	bne.n	800676a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e10f      	b.n	800698a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a87      	ldr	r2, [pc, #540]	@ (8006994 <HAL_SPI_Init+0x23c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d00f      	beq.n	800679a <HAL_SPI_Init+0x42>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a86      	ldr	r2, [pc, #536]	@ (8006998 <HAL_SPI_Init+0x240>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d00a      	beq.n	800679a <HAL_SPI_Init+0x42>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a84      	ldr	r2, [pc, #528]	@ (800699c <HAL_SPI_Init+0x244>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d005      	beq.n	800679a <HAL_SPI_Init+0x42>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	2b0f      	cmp	r3, #15
 8006794:	d901      	bls.n	800679a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e0f7      	b.n	800698a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f900 	bl	80069a0 <SPI_GetPacketSize>
 80067a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a7b      	ldr	r2, [pc, #492]	@ (8006994 <HAL_SPI_Init+0x23c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d00c      	beq.n	80067c6 <HAL_SPI_Init+0x6e>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a79      	ldr	r2, [pc, #484]	@ (8006998 <HAL_SPI_Init+0x240>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d007      	beq.n	80067c6 <HAL_SPI_Init+0x6e>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a78      	ldr	r2, [pc, #480]	@ (800699c <HAL_SPI_Init+0x244>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d002      	beq.n	80067c6 <HAL_SPI_Init+0x6e>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b08      	cmp	r3, #8
 80067c4:	d811      	bhi.n	80067ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80067ca:	4a72      	ldr	r2, [pc, #456]	@ (8006994 <HAL_SPI_Init+0x23c>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d009      	beq.n	80067e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a70      	ldr	r2, [pc, #448]	@ (8006998 <HAL_SPI_Init+0x240>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <HAL_SPI_Init+0x8c>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a6f      	ldr	r2, [pc, #444]	@ (800699c <HAL_SPI_Init+0x244>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d104      	bne.n	80067ee <HAL_SPI_Init+0x96>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2b10      	cmp	r3, #16
 80067e8:	d901      	bls.n	80067ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e0cd      	b.n	800698a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fa fd0c 	bl	8001220 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f022 0201 	bic.w	r2, r2, #1
 800681e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800682a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006834:	d119      	bne.n	800686a <HAL_SPI_Init+0x112>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800683e:	d103      	bne.n	8006848 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10c      	bne.n	800686a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006854:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006858:	d107      	bne.n	800686a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006868:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006872:	2b00      	cmp	r3, #0
 8006874:	d00f      	beq.n	8006896 <HAL_SPI_Init+0x13e>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	2b06      	cmp	r3, #6
 800687c:	d90b      	bls.n	8006896 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	430a      	orrs	r2, r1
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	e007      	b.n	80068a6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	69da      	ldr	r2, [r3, #28]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ae:	431a      	orrs	r2, r3
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	431a      	orrs	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b8:	ea42 0103 	orr.w	r1, r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	430a      	orrs	r2, r1
 80068c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068d0:	431a      	orrs	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	431a      	orrs	r2, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	691b      	ldr	r3, [r3, #16]
 80068e2:	431a      	orrs	r2, r3
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	695b      	ldr	r3, [r3, #20]
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068fa:	431a      	orrs	r2, r3
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	431a      	orrs	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006906:	ea42 0103 	orr.w	r1, r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d113      	bne.n	8006946 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006930:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006944:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0201 	bic.w	r2, r2, #1
 8006954:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00a      	beq.n	8006978 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	40013000 	.word	0x40013000
 8006998:	40003800 	.word	0x40003800
 800699c:	40003c00 	.word	0x40003c00

080069a0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b085      	sub	sp, #20
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ac:	095b      	lsrs	r3, r3, #5
 80069ae:	3301      	adds	r3, #1
 80069b0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	3301      	adds	r3, #1
 80069b8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	3307      	adds	r3, #7
 80069be:	08db      	lsrs	r3, r3, #3
 80069c0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b082      	sub	sp, #8
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	e049      	b.n	8006a7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d106      	bne.n	8006a02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7fa fe99 	bl	8001734 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2202      	movs	r2, #2
 8006a06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681a      	ldr	r2, [r3, #0]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	3304      	adds	r3, #4
 8006a12:	4619      	mov	r1, r3
 8006a14:	4610      	mov	r0, r2
 8006a16:	f000 fbf3 	bl	8007200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2201      	movs	r2, #1
 8006a26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e049      	b.n	8006b2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f841 	bl	8006b32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	f000 fb9c 	bl	8007200 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b083      	sub	sp, #12
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b3a:	bf00      	nop
 8006b3c:	370c      	adds	r7, #12
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
	...

08006b48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d109      	bne.n	8006b6c <HAL_TIM_PWM_Start+0x24>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	bf14      	ite	ne
 8006b64:	2301      	movne	r3, #1
 8006b66:	2300      	moveq	r3, #0
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	e03c      	b.n	8006be6 <HAL_TIM_PWM_Start+0x9e>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2b04      	cmp	r3, #4
 8006b70:	d109      	bne.n	8006b86 <HAL_TIM_PWM_Start+0x3e>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006b78:	b2db      	uxtb	r3, r3
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	bf14      	ite	ne
 8006b7e:	2301      	movne	r3, #1
 8006b80:	2300      	moveq	r3, #0
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	e02f      	b.n	8006be6 <HAL_TIM_PWM_Start+0x9e>
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d109      	bne.n	8006ba0 <HAL_TIM_PWM_Start+0x58>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	bf14      	ite	ne
 8006b98:	2301      	movne	r3, #1
 8006b9a:	2300      	moveq	r3, #0
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	e022      	b.n	8006be6 <HAL_TIM_PWM_Start+0x9e>
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	2b0c      	cmp	r3, #12
 8006ba4:	d109      	bne.n	8006bba <HAL_TIM_PWM_Start+0x72>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	bf14      	ite	ne
 8006bb2:	2301      	movne	r3, #1
 8006bb4:	2300      	moveq	r3, #0
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	e015      	b.n	8006be6 <HAL_TIM_PWM_Start+0x9e>
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	2b10      	cmp	r3, #16
 8006bbe:	d109      	bne.n	8006bd4 <HAL_TIM_PWM_Start+0x8c>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	bf14      	ite	ne
 8006bcc:	2301      	movne	r3, #1
 8006bce:	2300      	moveq	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	e008      	b.n	8006be6 <HAL_TIM_PWM_Start+0x9e>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	bf14      	ite	ne
 8006be0:	2301      	movne	r3, #1
 8006be2:	2300      	moveq	r3, #0
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e0a1      	b.n	8006d32 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d104      	bne.n	8006bfe <HAL_TIM_PWM_Start+0xb6>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bfc:	e023      	b.n	8006c46 <HAL_TIM_PWM_Start+0xfe>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	d104      	bne.n	8006c0e <HAL_TIM_PWM_Start+0xc6>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2202      	movs	r2, #2
 8006c08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c0c:	e01b      	b.n	8006c46 <HAL_TIM_PWM_Start+0xfe>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b08      	cmp	r3, #8
 8006c12:	d104      	bne.n	8006c1e <HAL_TIM_PWM_Start+0xd6>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c1c:	e013      	b.n	8006c46 <HAL_TIM_PWM_Start+0xfe>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	2b0c      	cmp	r3, #12
 8006c22:	d104      	bne.n	8006c2e <HAL_TIM_PWM_Start+0xe6>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2202      	movs	r2, #2
 8006c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c2c:	e00b      	b.n	8006c46 <HAL_TIM_PWM_Start+0xfe>
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b10      	cmp	r3, #16
 8006c32:	d104      	bne.n	8006c3e <HAL_TIM_PWM_Start+0xf6>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2202      	movs	r2, #2
 8006c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c3c:	e003      	b.n	8006c46 <HAL_TIM_PWM_Start+0xfe>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2202      	movs	r2, #2
 8006c42:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	6839      	ldr	r1, [r7, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 ffda 	bl	8007c08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a38      	ldr	r2, [pc, #224]	@ (8006d3c <HAL_TIM_PWM_Start+0x1f4>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d013      	beq.n	8006c86 <HAL_TIM_PWM_Start+0x13e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a37      	ldr	r2, [pc, #220]	@ (8006d40 <HAL_TIM_PWM_Start+0x1f8>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d00e      	beq.n	8006c86 <HAL_TIM_PWM_Start+0x13e>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a35      	ldr	r2, [pc, #212]	@ (8006d44 <HAL_TIM_PWM_Start+0x1fc>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d009      	beq.n	8006c86 <HAL_TIM_PWM_Start+0x13e>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a34      	ldr	r2, [pc, #208]	@ (8006d48 <HAL_TIM_PWM_Start+0x200>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d004      	beq.n	8006c86 <HAL_TIM_PWM_Start+0x13e>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a32      	ldr	r2, [pc, #200]	@ (8006d4c <HAL_TIM_PWM_Start+0x204>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d101      	bne.n	8006c8a <HAL_TIM_PWM_Start+0x142>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <HAL_TIM_PWM_Start+0x144>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d007      	beq.n	8006ca0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c9e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a25      	ldr	r2, [pc, #148]	@ (8006d3c <HAL_TIM_PWM_Start+0x1f4>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d022      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x1a8>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cb2:	d01d      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x1a8>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a25      	ldr	r2, [pc, #148]	@ (8006d50 <HAL_TIM_PWM_Start+0x208>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d018      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x1a8>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a24      	ldr	r2, [pc, #144]	@ (8006d54 <HAL_TIM_PWM_Start+0x20c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d013      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x1a8>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a22      	ldr	r2, [pc, #136]	@ (8006d58 <HAL_TIM_PWM_Start+0x210>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d00e      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x1a8>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a1a      	ldr	r2, [pc, #104]	@ (8006d40 <HAL_TIM_PWM_Start+0x1f8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d009      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x1a8>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8006d5c <HAL_TIM_PWM_Start+0x214>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d004      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x1a8>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a16      	ldr	r2, [pc, #88]	@ (8006d44 <HAL_TIM_PWM_Start+0x1fc>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d115      	bne.n	8006d1c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	4b1a      	ldr	r3, [pc, #104]	@ (8006d60 <HAL_TIM_PWM_Start+0x218>)
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2b06      	cmp	r3, #6
 8006d00:	d015      	beq.n	8006d2e <HAL_TIM_PWM_Start+0x1e6>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d08:	d011      	beq.n	8006d2e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f042 0201 	orr.w	r2, r2, #1
 8006d18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d1a:	e008      	b.n	8006d2e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
 8006d2c:	e000      	b.n	8006d30 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	40010000 	.word	0x40010000
 8006d40:	40010400 	.word	0x40010400
 8006d44:	40014000 	.word	0x40014000
 8006d48:	40014400 	.word	0x40014400
 8006d4c:	40014800 	.word	0x40014800
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40000800 	.word	0x40000800
 8006d58:	40000c00 	.word	0x40000c00
 8006d5c:	40001800 	.word	0x40001800
 8006d60:	00010007 	.word	0x00010007

08006d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	e0ff      	b.n	8006f82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b14      	cmp	r3, #20
 8006d8e:	f200 80f0 	bhi.w	8006f72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d92:	a201      	add	r2, pc, #4	@ (adr r2, 8006d98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d98:	08006ded 	.word	0x08006ded
 8006d9c:	08006f73 	.word	0x08006f73
 8006da0:	08006f73 	.word	0x08006f73
 8006da4:	08006f73 	.word	0x08006f73
 8006da8:	08006e2d 	.word	0x08006e2d
 8006dac:	08006f73 	.word	0x08006f73
 8006db0:	08006f73 	.word	0x08006f73
 8006db4:	08006f73 	.word	0x08006f73
 8006db8:	08006e6f 	.word	0x08006e6f
 8006dbc:	08006f73 	.word	0x08006f73
 8006dc0:	08006f73 	.word	0x08006f73
 8006dc4:	08006f73 	.word	0x08006f73
 8006dc8:	08006eaf 	.word	0x08006eaf
 8006dcc:	08006f73 	.word	0x08006f73
 8006dd0:	08006f73 	.word	0x08006f73
 8006dd4:	08006f73 	.word	0x08006f73
 8006dd8:	08006ef1 	.word	0x08006ef1
 8006ddc:	08006f73 	.word	0x08006f73
 8006de0:	08006f73 	.word	0x08006f73
 8006de4:	08006f73 	.word	0x08006f73
 8006de8:	08006f31 	.word	0x08006f31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68b9      	ldr	r1, [r7, #8]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 faaa 	bl	800734c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699a      	ldr	r2, [r3, #24]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f042 0208 	orr.w	r2, r2, #8
 8006e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0204 	bic.w	r2, r2, #4
 8006e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6999      	ldr	r1, [r3, #24]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	619a      	str	r2, [r3, #24]
      break;
 8006e2a:	e0a5      	b.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68b9      	ldr	r1, [r7, #8]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fb1a 	bl	800746c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	699a      	ldr	r2, [r3, #24]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6999      	ldr	r1, [r3, #24]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	021a      	lsls	r2, r3, #8
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	430a      	orrs	r2, r1
 8006e6a:	619a      	str	r2, [r3, #24]
      break;
 8006e6c:	e084      	b.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	68b9      	ldr	r1, [r7, #8]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f000 fb83 	bl	8007580 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	69da      	ldr	r2, [r3, #28]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0208 	orr.w	r2, r2, #8
 8006e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	69da      	ldr	r2, [r3, #28]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0204 	bic.w	r2, r2, #4
 8006e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	69d9      	ldr	r1, [r3, #28]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	691a      	ldr	r2, [r3, #16]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	61da      	str	r2, [r3, #28]
      break;
 8006eac:	e064      	b.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	68b9      	ldr	r1, [r7, #8]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 fbeb 	bl	8007690 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	69da      	ldr	r2, [r3, #28]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69da      	ldr	r2, [r3, #28]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69d9      	ldr	r1, [r3, #28]
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	021a      	lsls	r2, r3, #8
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	430a      	orrs	r2, r1
 8006eec:	61da      	str	r2, [r3, #28]
      break;
 8006eee:	e043      	b.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68b9      	ldr	r1, [r7, #8]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f000 fc34 	bl	8007764 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f042 0208 	orr.w	r2, r2, #8
 8006f0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f022 0204 	bic.w	r2, r2, #4
 8006f1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	691a      	ldr	r2, [r3, #16]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	430a      	orrs	r2, r1
 8006f2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f2e:	e023      	b.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	68b9      	ldr	r1, [r7, #8]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fc78 	bl	800782c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	021a      	lsls	r2, r3, #8
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	430a      	orrs	r2, r1
 8006f6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f70:	e002      	b.n	8006f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	75fb      	strb	r3, [r7, #23]
      break;
 8006f76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop

08006f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
 8006f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e0dc      	b.n	8007162 <HAL_TIM_ConfigClockSource+0x1d6>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800716c <HAL_TIM_ConfigClockSource+0x1e0>)
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a64      	ldr	r2, [pc, #400]	@ (8007170 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	f000 80a9 	beq.w	8007136 <HAL_TIM_ConfigClockSource+0x1aa>
 8006fe4:	4a62      	ldr	r2, [pc, #392]	@ (8007170 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	f200 80ae 	bhi.w	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
 8006fec:	4a61      	ldr	r2, [pc, #388]	@ (8007174 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	f000 80a1 	beq.w	8007136 <HAL_TIM_ConfigClockSource+0x1aa>
 8006ff4:	4a5f      	ldr	r2, [pc, #380]	@ (8007174 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	f200 80a6 	bhi.w	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ffc:	4a5e      	ldr	r2, [pc, #376]	@ (8007178 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	f000 8099 	beq.w	8007136 <HAL_TIM_ConfigClockSource+0x1aa>
 8007004:	4a5c      	ldr	r2, [pc, #368]	@ (8007178 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007006:	4293      	cmp	r3, r2
 8007008:	f200 809e 	bhi.w	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
 800700c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007010:	f000 8091 	beq.w	8007136 <HAL_TIM_ConfigClockSource+0x1aa>
 8007014:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007018:	f200 8096 	bhi.w	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
 800701c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007020:	f000 8089 	beq.w	8007136 <HAL_TIM_ConfigClockSource+0x1aa>
 8007024:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007028:	f200 808e 	bhi.w	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
 800702c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007030:	d03e      	beq.n	80070b0 <HAL_TIM_ConfigClockSource+0x124>
 8007032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007036:	f200 8087 	bhi.w	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
 800703a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800703e:	f000 8086 	beq.w	800714e <HAL_TIM_ConfigClockSource+0x1c2>
 8007042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007046:	d87f      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
 8007048:	2b70      	cmp	r3, #112	@ 0x70
 800704a:	d01a      	beq.n	8007082 <HAL_TIM_ConfigClockSource+0xf6>
 800704c:	2b70      	cmp	r3, #112	@ 0x70
 800704e:	d87b      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
 8007050:	2b60      	cmp	r3, #96	@ 0x60
 8007052:	d050      	beq.n	80070f6 <HAL_TIM_ConfigClockSource+0x16a>
 8007054:	2b60      	cmp	r3, #96	@ 0x60
 8007056:	d877      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
 8007058:	2b50      	cmp	r3, #80	@ 0x50
 800705a:	d03c      	beq.n	80070d6 <HAL_TIM_ConfigClockSource+0x14a>
 800705c:	2b50      	cmp	r3, #80	@ 0x50
 800705e:	d873      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
 8007060:	2b40      	cmp	r3, #64	@ 0x40
 8007062:	d058      	beq.n	8007116 <HAL_TIM_ConfigClockSource+0x18a>
 8007064:	2b40      	cmp	r3, #64	@ 0x40
 8007066:	d86f      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
 8007068:	2b30      	cmp	r3, #48	@ 0x30
 800706a:	d064      	beq.n	8007136 <HAL_TIM_ConfigClockSource+0x1aa>
 800706c:	2b30      	cmp	r3, #48	@ 0x30
 800706e:	d86b      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
 8007070:	2b20      	cmp	r3, #32
 8007072:	d060      	beq.n	8007136 <HAL_TIM_ConfigClockSource+0x1aa>
 8007074:	2b20      	cmp	r3, #32
 8007076:	d867      	bhi.n	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
 8007078:	2b00      	cmp	r3, #0
 800707a:	d05c      	beq.n	8007136 <HAL_TIM_ConfigClockSource+0x1aa>
 800707c:	2b10      	cmp	r3, #16
 800707e:	d05a      	beq.n	8007136 <HAL_TIM_ConfigClockSource+0x1aa>
 8007080:	e062      	b.n	8007148 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007092:	f000 fd99 	bl	8007bc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80070a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68ba      	ldr	r2, [r7, #8]
 80070ac:	609a      	str	r2, [r3, #8]
      break;
 80070ae:	e04f      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070c0:	f000 fd82 	bl	8007bc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689a      	ldr	r2, [r3, #8]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070d2:	609a      	str	r2, [r3, #8]
      break;
 80070d4:	e03c      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070e2:	461a      	mov	r2, r3
 80070e4:	f000 fcf2 	bl	8007acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2150      	movs	r1, #80	@ 0x50
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fd4c 	bl	8007b8c <TIM_ITRx_SetConfig>
      break;
 80070f4:	e02c      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007102:	461a      	mov	r2, r3
 8007104:	f000 fd11 	bl	8007b2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2160      	movs	r1, #96	@ 0x60
 800710e:	4618      	mov	r0, r3
 8007110:	f000 fd3c 	bl	8007b8c <TIM_ITRx_SetConfig>
      break;
 8007114:	e01c      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007122:	461a      	mov	r2, r3
 8007124:	f000 fcd2 	bl	8007acc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2140      	movs	r1, #64	@ 0x40
 800712e:	4618      	mov	r0, r3
 8007130:	f000 fd2c 	bl	8007b8c <TIM_ITRx_SetConfig>
      break;
 8007134:	e00c      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681a      	ldr	r2, [r3, #0]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4619      	mov	r1, r3
 8007140:	4610      	mov	r0, r2
 8007142:	f000 fd23 	bl	8007b8c <TIM_ITRx_SetConfig>
      break;
 8007146:	e003      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
      break;
 800714c:	e000      	b.n	8007150 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800714e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007160:	7bfb      	ldrb	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	ffceff88 	.word	0xffceff88
 8007170:	00100040 	.word	0x00100040
 8007174:	00100030 	.word	0x00100030
 8007178:	00100020 	.word	0x00100020

0800717c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800718c:	2b01      	cmp	r3, #1
 800718e:	d101      	bne.n	8007194 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007190:	2302      	movs	r3, #2
 8007192:	e031      	b.n	80071f8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2202      	movs	r2, #2
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fba6 	bl	80078f8 <TIM_SlaveTimer_SetConfig>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d009      	beq.n	80071c6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e018      	b.n	80071f8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68da      	ldr	r2, [r3, #12]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80071d4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80071e4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	2201      	movs	r2, #1
 80071ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80071f6:	2300      	movs	r3, #0
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a46      	ldr	r2, [pc, #280]	@ (800732c <TIM_Base_SetConfig+0x12c>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d013      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800721e:	d00f      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a43      	ldr	r2, [pc, #268]	@ (8007330 <TIM_Base_SetConfig+0x130>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00b      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a42      	ldr	r2, [pc, #264]	@ (8007334 <TIM_Base_SetConfig+0x134>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d007      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a41      	ldr	r2, [pc, #260]	@ (8007338 <TIM_Base_SetConfig+0x138>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d003      	beq.n	8007240 <TIM_Base_SetConfig+0x40>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a40      	ldr	r2, [pc, #256]	@ (800733c <TIM_Base_SetConfig+0x13c>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d108      	bne.n	8007252 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007246:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a35      	ldr	r2, [pc, #212]	@ (800732c <TIM_Base_SetConfig+0x12c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d01f      	beq.n	800729a <TIM_Base_SetConfig+0x9a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007260:	d01b      	beq.n	800729a <TIM_Base_SetConfig+0x9a>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a32      	ldr	r2, [pc, #200]	@ (8007330 <TIM_Base_SetConfig+0x130>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d017      	beq.n	800729a <TIM_Base_SetConfig+0x9a>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a31      	ldr	r2, [pc, #196]	@ (8007334 <TIM_Base_SetConfig+0x134>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d013      	beq.n	800729a <TIM_Base_SetConfig+0x9a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a30      	ldr	r2, [pc, #192]	@ (8007338 <TIM_Base_SetConfig+0x138>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d00f      	beq.n	800729a <TIM_Base_SetConfig+0x9a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a2f      	ldr	r2, [pc, #188]	@ (800733c <TIM_Base_SetConfig+0x13c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d00b      	beq.n	800729a <TIM_Base_SetConfig+0x9a>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a2e      	ldr	r2, [pc, #184]	@ (8007340 <TIM_Base_SetConfig+0x140>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d007      	beq.n	800729a <TIM_Base_SetConfig+0x9a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a2d      	ldr	r2, [pc, #180]	@ (8007344 <TIM_Base_SetConfig+0x144>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d003      	beq.n	800729a <TIM_Base_SetConfig+0x9a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a2c      	ldr	r2, [pc, #176]	@ (8007348 <TIM_Base_SetConfig+0x148>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d108      	bne.n	80072ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a16      	ldr	r2, [pc, #88]	@ (800732c <TIM_Base_SetConfig+0x12c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d00f      	beq.n	80072f8 <TIM_Base_SetConfig+0xf8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a18      	ldr	r2, [pc, #96]	@ (800733c <TIM_Base_SetConfig+0x13c>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d00b      	beq.n	80072f8 <TIM_Base_SetConfig+0xf8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a17      	ldr	r2, [pc, #92]	@ (8007340 <TIM_Base_SetConfig+0x140>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d007      	beq.n	80072f8 <TIM_Base_SetConfig+0xf8>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4a16      	ldr	r2, [pc, #88]	@ (8007344 <TIM_Base_SetConfig+0x144>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d003      	beq.n	80072f8 <TIM_Base_SetConfig+0xf8>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a15      	ldr	r2, [pc, #84]	@ (8007348 <TIM_Base_SetConfig+0x148>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d103      	bne.n	8007300 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	691a      	ldr	r2, [r3, #16]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b01      	cmp	r3, #1
 8007310:	d105      	bne.n	800731e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	f023 0201 	bic.w	r2, r3, #1
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	611a      	str	r2, [r3, #16]
  }
}
 800731e:	bf00      	nop
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	40010000 	.word	0x40010000
 8007330:	40000400 	.word	0x40000400
 8007334:	40000800 	.word	0x40000800
 8007338:	40000c00 	.word	0x40000c00
 800733c:	40010400 	.word	0x40010400
 8007340:	40014000 	.word	0x40014000
 8007344:	40014400 	.word	0x40014400
 8007348:	40014800 	.word	0x40014800

0800734c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800734c:	b480      	push	{r7}
 800734e:	b087      	sub	sp, #28
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a1b      	ldr	r3, [r3, #32]
 8007360:	f023 0201 	bic.w	r2, r3, #1
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4b37      	ldr	r3, [pc, #220]	@ (8007454 <TIM_OC1_SetConfig+0x108>)
 8007378:	4013      	ands	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f023 0303 	bic.w	r3, r3, #3
 8007382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	f023 0302 	bic.w	r3, r3, #2
 8007394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	4313      	orrs	r3, r2
 800739e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a2d      	ldr	r2, [pc, #180]	@ (8007458 <TIM_OC1_SetConfig+0x10c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d00f      	beq.n	80073c8 <TIM_OC1_SetConfig+0x7c>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	4a2c      	ldr	r2, [pc, #176]	@ (800745c <TIM_OC1_SetConfig+0x110>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d00b      	beq.n	80073c8 <TIM_OC1_SetConfig+0x7c>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4a2b      	ldr	r2, [pc, #172]	@ (8007460 <TIM_OC1_SetConfig+0x114>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d007      	beq.n	80073c8 <TIM_OC1_SetConfig+0x7c>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	4a2a      	ldr	r2, [pc, #168]	@ (8007464 <TIM_OC1_SetConfig+0x118>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d003      	beq.n	80073c8 <TIM_OC1_SetConfig+0x7c>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a29      	ldr	r2, [pc, #164]	@ (8007468 <TIM_OC1_SetConfig+0x11c>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d10c      	bne.n	80073e2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f023 0308 	bic.w	r3, r3, #8
 80073ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	4313      	orrs	r3, r2
 80073d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f023 0304 	bic.w	r3, r3, #4
 80073e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007458 <TIM_OC1_SetConfig+0x10c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d00f      	beq.n	800740a <TIM_OC1_SetConfig+0xbe>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a1b      	ldr	r2, [pc, #108]	@ (800745c <TIM_OC1_SetConfig+0x110>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d00b      	beq.n	800740a <TIM_OC1_SetConfig+0xbe>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007460 <TIM_OC1_SetConfig+0x114>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d007      	beq.n	800740a <TIM_OC1_SetConfig+0xbe>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a19      	ldr	r2, [pc, #100]	@ (8007464 <TIM_OC1_SetConfig+0x118>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d003      	beq.n	800740a <TIM_OC1_SetConfig+0xbe>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a18      	ldr	r2, [pc, #96]	@ (8007468 <TIM_OC1_SetConfig+0x11c>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d111      	bne.n	800742e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	4313      	orrs	r3, r2
 8007422:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	699b      	ldr	r3, [r3, #24]
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4313      	orrs	r3, r2
 800742c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685a      	ldr	r2, [r3, #4]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	621a      	str	r2, [r3, #32]
}
 8007448:	bf00      	nop
 800744a:	371c      	adds	r7, #28
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	fffeff8f 	.word	0xfffeff8f
 8007458:	40010000 	.word	0x40010000
 800745c:	40010400 	.word	0x40010400
 8007460:	40014000 	.word	0x40014000
 8007464:	40014400 	.word	0x40014400
 8007468:	40014800 	.word	0x40014800

0800746c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800746c:	b480      	push	{r7}
 800746e:	b087      	sub	sp, #28
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	f023 0210 	bic.w	r2, r3, #16
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007494:	68fa      	ldr	r2, [r7, #12]
 8007496:	4b34      	ldr	r3, [pc, #208]	@ (8007568 <TIM_OC2_SetConfig+0xfc>)
 8007498:	4013      	ands	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	021b      	lsls	r3, r3, #8
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f023 0320 	bic.w	r3, r3, #32
 80074b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	011b      	lsls	r3, r3, #4
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	4a29      	ldr	r2, [pc, #164]	@ (800756c <TIM_OC2_SetConfig+0x100>)
 80074c8:	4293      	cmp	r3, r2
 80074ca:	d003      	beq.n	80074d4 <TIM_OC2_SetConfig+0x68>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	4a28      	ldr	r2, [pc, #160]	@ (8007570 <TIM_OC2_SetConfig+0x104>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d10d      	bne.n	80074f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	011b      	lsls	r3, r3, #4
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a1e      	ldr	r2, [pc, #120]	@ (800756c <TIM_OC2_SetConfig+0x100>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d00f      	beq.n	8007518 <TIM_OC2_SetConfig+0xac>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007570 <TIM_OC2_SetConfig+0x104>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d00b      	beq.n	8007518 <TIM_OC2_SetConfig+0xac>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a1c      	ldr	r2, [pc, #112]	@ (8007574 <TIM_OC2_SetConfig+0x108>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d007      	beq.n	8007518 <TIM_OC2_SetConfig+0xac>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a1b      	ldr	r2, [pc, #108]	@ (8007578 <TIM_OC2_SetConfig+0x10c>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d003      	beq.n	8007518 <TIM_OC2_SetConfig+0xac>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	4a1a      	ldr	r2, [pc, #104]	@ (800757c <TIM_OC2_SetConfig+0x110>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d113      	bne.n	8007540 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800751e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007526:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	4313      	orrs	r3, r2
 8007532:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4313      	orrs	r3, r2
 800753e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	693a      	ldr	r2, [r7, #16]
 8007544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	685a      	ldr	r2, [r3, #4]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	697a      	ldr	r2, [r7, #20]
 8007558:	621a      	str	r2, [r3, #32]
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	feff8fff 	.word	0xfeff8fff
 800756c:	40010000 	.word	0x40010000
 8007570:	40010400 	.word	0x40010400
 8007574:	40014000 	.word	0x40014000
 8007578:	40014400 	.word	0x40014400
 800757c:	40014800 	.word	0x40014800

08007580 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007580:	b480      	push	{r7}
 8007582:	b087      	sub	sp, #28
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a1b      	ldr	r3, [r3, #32]
 8007594:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	69db      	ldr	r3, [r3, #28]
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	4b33      	ldr	r3, [pc, #204]	@ (8007678 <TIM_OC3_SetConfig+0xf8>)
 80075ac:	4013      	ands	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0303 	bic.w	r3, r3, #3
 80075b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80075c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a28      	ldr	r2, [pc, #160]	@ (800767c <TIM_OC3_SetConfig+0xfc>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d003      	beq.n	80075e6 <TIM_OC3_SetConfig+0x66>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a27      	ldr	r2, [pc, #156]	@ (8007680 <TIM_OC3_SetConfig+0x100>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d10d      	bne.n	8007602 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	68db      	ldr	r3, [r3, #12]
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	697a      	ldr	r2, [r7, #20]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a1d      	ldr	r2, [pc, #116]	@ (800767c <TIM_OC3_SetConfig+0xfc>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d00f      	beq.n	800762a <TIM_OC3_SetConfig+0xaa>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a1c      	ldr	r2, [pc, #112]	@ (8007680 <TIM_OC3_SetConfig+0x100>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00b      	beq.n	800762a <TIM_OC3_SetConfig+0xaa>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a1b      	ldr	r2, [pc, #108]	@ (8007684 <TIM_OC3_SetConfig+0x104>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d007      	beq.n	800762a <TIM_OC3_SetConfig+0xaa>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a1a      	ldr	r2, [pc, #104]	@ (8007688 <TIM_OC3_SetConfig+0x108>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d003      	beq.n	800762a <TIM_OC3_SetConfig+0xaa>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a19      	ldr	r2, [pc, #100]	@ (800768c <TIM_OC3_SetConfig+0x10c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d113      	bne.n	8007652 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007630:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007638:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	011b      	lsls	r3, r3, #4
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	4313      	orrs	r3, r2
 8007644:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	699b      	ldr	r3, [r3, #24]
 800764a:	011b      	lsls	r3, r3, #4
 800764c:	693a      	ldr	r2, [r7, #16]
 800764e:	4313      	orrs	r3, r2
 8007650:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	68fa      	ldr	r2, [r7, #12]
 800765c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	685a      	ldr	r2, [r3, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	621a      	str	r2, [r3, #32]
}
 800766c:	bf00      	nop
 800766e:	371c      	adds	r7, #28
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	fffeff8f 	.word	0xfffeff8f
 800767c:	40010000 	.word	0x40010000
 8007680:	40010400 	.word	0x40010400
 8007684:	40014000 	.word	0x40014000
 8007688:	40014400 	.word	0x40014400
 800768c:	40014800 	.word	0x40014800

08007690 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007690:	b480      	push	{r7}
 8007692:	b087      	sub	sp, #28
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6a1b      	ldr	r3, [r3, #32]
 80076a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	69db      	ldr	r3, [r3, #28]
 80076b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	4b24      	ldr	r3, [pc, #144]	@ (800774c <TIM_OC4_SetConfig+0xbc>)
 80076bc:	4013      	ands	r3, r2
 80076be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	4313      	orrs	r3, r2
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	031b      	lsls	r3, r3, #12
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a19      	ldr	r2, [pc, #100]	@ (8007750 <TIM_OC4_SetConfig+0xc0>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00f      	beq.n	8007710 <TIM_OC4_SetConfig+0x80>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a18      	ldr	r2, [pc, #96]	@ (8007754 <TIM_OC4_SetConfig+0xc4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d00b      	beq.n	8007710 <TIM_OC4_SetConfig+0x80>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a17      	ldr	r2, [pc, #92]	@ (8007758 <TIM_OC4_SetConfig+0xc8>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d007      	beq.n	8007710 <TIM_OC4_SetConfig+0x80>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a16      	ldr	r2, [pc, #88]	@ (800775c <TIM_OC4_SetConfig+0xcc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d003      	beq.n	8007710 <TIM_OC4_SetConfig+0x80>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a15      	ldr	r2, [pc, #84]	@ (8007760 <TIM_OC4_SetConfig+0xd0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d109      	bne.n	8007724 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	695b      	ldr	r3, [r3, #20]
 800771c:	019b      	lsls	r3, r3, #6
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	4313      	orrs	r3, r2
 8007722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68fa      	ldr	r2, [r7, #12]
 800772e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	621a      	str	r2, [r3, #32]
}
 800773e:	bf00      	nop
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	feff8fff 	.word	0xfeff8fff
 8007750:	40010000 	.word	0x40010000
 8007754:	40010400 	.word	0x40010400
 8007758:	40014000 	.word	0x40014000
 800775c:	40014400 	.word	0x40014400
 8007760:	40014800 	.word	0x40014800

08007764 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007764:	b480      	push	{r7}
 8007766:	b087      	sub	sp, #28
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a1b      	ldr	r3, [r3, #32]
 8007778:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800778a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	4b21      	ldr	r3, [pc, #132]	@ (8007814 <TIM_OC5_SetConfig+0xb0>)
 8007790:	4013      	ands	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	4313      	orrs	r3, r2
 800779c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80077a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	041b      	lsls	r3, r3, #16
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	4a18      	ldr	r2, [pc, #96]	@ (8007818 <TIM_OC5_SetConfig+0xb4>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d00f      	beq.n	80077da <TIM_OC5_SetConfig+0x76>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	4a17      	ldr	r2, [pc, #92]	@ (800781c <TIM_OC5_SetConfig+0xb8>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d00b      	beq.n	80077da <TIM_OC5_SetConfig+0x76>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a16      	ldr	r2, [pc, #88]	@ (8007820 <TIM_OC5_SetConfig+0xbc>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d007      	beq.n	80077da <TIM_OC5_SetConfig+0x76>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	4a15      	ldr	r2, [pc, #84]	@ (8007824 <TIM_OC5_SetConfig+0xc0>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d003      	beq.n	80077da <TIM_OC5_SetConfig+0x76>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	4a14      	ldr	r2, [pc, #80]	@ (8007828 <TIM_OC5_SetConfig+0xc4>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d109      	bne.n	80077ee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80077e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	021b      	lsls	r3, r3, #8
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	685a      	ldr	r2, [r3, #4]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	621a      	str	r2, [r3, #32]
}
 8007808:	bf00      	nop
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	fffeff8f 	.word	0xfffeff8f
 8007818:	40010000 	.word	0x40010000
 800781c:	40010400 	.word	0x40010400
 8007820:	40014000 	.word	0x40014000
 8007824:	40014400 	.word	0x40014400
 8007828:	40014800 	.word	0x40014800

0800782c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a1b      	ldr	r3, [r3, #32]
 800783a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a1b      	ldr	r3, [r3, #32]
 8007840:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	4b22      	ldr	r3, [pc, #136]	@ (80078e0 <TIM_OC6_SetConfig+0xb4>)
 8007858:	4013      	ands	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	021b      	lsls	r3, r3, #8
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	4313      	orrs	r3, r2
 8007866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800786e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	051b      	lsls	r3, r3, #20
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	4313      	orrs	r3, r2
 800787a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	4a19      	ldr	r2, [pc, #100]	@ (80078e4 <TIM_OC6_SetConfig+0xb8>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d00f      	beq.n	80078a4 <TIM_OC6_SetConfig+0x78>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4a18      	ldr	r2, [pc, #96]	@ (80078e8 <TIM_OC6_SetConfig+0xbc>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d00b      	beq.n	80078a4 <TIM_OC6_SetConfig+0x78>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	4a17      	ldr	r2, [pc, #92]	@ (80078ec <TIM_OC6_SetConfig+0xc0>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d007      	beq.n	80078a4 <TIM_OC6_SetConfig+0x78>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	4a16      	ldr	r2, [pc, #88]	@ (80078f0 <TIM_OC6_SetConfig+0xc4>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d003      	beq.n	80078a4 <TIM_OC6_SetConfig+0x78>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4a15      	ldr	r2, [pc, #84]	@ (80078f4 <TIM_OC6_SetConfig+0xc8>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d109      	bne.n	80078b8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	695b      	ldr	r3, [r3, #20]
 80078b0:	029b      	lsls	r3, r3, #10
 80078b2:	697a      	ldr	r2, [r7, #20]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	697a      	ldr	r2, [r7, #20]
 80078bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	68fa      	ldr	r2, [r7, #12]
 80078c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	685a      	ldr	r2, [r3, #4]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	693a      	ldr	r2, [r7, #16]
 80078d0:	621a      	str	r2, [r3, #32]
}
 80078d2:	bf00      	nop
 80078d4:	371c      	adds	r7, #28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	feff8fff 	.word	0xfeff8fff
 80078e4:	40010000 	.word	0x40010000
 80078e8:	40010400 	.word	0x40010400
 80078ec:	40014000 	.word	0x40014000
 80078f0:	40014400 	.word	0x40014400
 80078f4:	40014800 	.word	0x40014800

080078f8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007902:	2300      	movs	r3, #0
 8007904:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	4b65      	ldr	r3, [pc, #404]	@ (8007aa8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8007912:	4013      	ands	r3, r2
 8007914:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007920:	693a      	ldr	r2, [r7, #16]
 8007922:	4b62      	ldr	r3, [pc, #392]	@ (8007aac <TIM_SlaveTimer_SetConfig+0x1b4>)
 8007924:	4013      	ands	r3, r2
 8007926:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	693a      	ldr	r2, [r7, #16]
 800792e:	4313      	orrs	r3, r2
 8007930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	693a      	ldr	r2, [r7, #16]
 8007938:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	4a5c      	ldr	r2, [pc, #368]	@ (8007ab0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8007940:	4293      	cmp	r3, r2
 8007942:	f000 80ab 	beq.w	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 8007946:	4a5a      	ldr	r2, [pc, #360]	@ (8007ab0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8007948:	4293      	cmp	r3, r2
 800794a:	f200 80a4 	bhi.w	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 800794e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007952:	f000 80a3 	beq.w	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 8007956:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800795a:	f200 809c 	bhi.w	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 800795e:	4a55      	ldr	r2, [pc, #340]	@ (8007ab4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8007960:	4293      	cmp	r3, r2
 8007962:	f000 809b 	beq.w	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 8007966:	4a53      	ldr	r2, [pc, #332]	@ (8007ab4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8007968:	4293      	cmp	r3, r2
 800796a:	f200 8094 	bhi.w	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 800796e:	4a52      	ldr	r2, [pc, #328]	@ (8007ab8 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8007970:	4293      	cmp	r3, r2
 8007972:	f000 8093 	beq.w	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 8007976:	4a50      	ldr	r2, [pc, #320]	@ (8007ab8 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8007978:	4293      	cmp	r3, r2
 800797a:	f200 808c 	bhi.w	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 800797e:	4a4f      	ldr	r2, [pc, #316]	@ (8007abc <TIM_SlaveTimer_SetConfig+0x1c4>)
 8007980:	4293      	cmp	r3, r2
 8007982:	f000 808b 	beq.w	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 8007986:	4a4d      	ldr	r2, [pc, #308]	@ (8007abc <TIM_SlaveTimer_SetConfig+0x1c4>)
 8007988:	4293      	cmp	r3, r2
 800798a:	f200 8084 	bhi.w	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 800798e:	4a4c      	ldr	r2, [pc, #304]	@ (8007ac0 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	f000 8083 	beq.w	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 8007996:	4a4a      	ldr	r2, [pc, #296]	@ (8007ac0 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d87c      	bhi.n	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 800799c:	4a49      	ldr	r2, [pc, #292]	@ (8007ac4 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d07c      	beq.n	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 80079a2:	4a48      	ldr	r2, [pc, #288]	@ (8007ac4 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d876      	bhi.n	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 80079a8:	4a47      	ldr	r2, [pc, #284]	@ (8007ac8 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d076      	beq.n	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 80079ae:	4a46      	ldr	r2, [pc, #280]	@ (8007ac8 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d870      	bhi.n	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 80079b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80079b8:	d070      	beq.n	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 80079ba:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80079be:	d86a      	bhi.n	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 80079c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079c4:	d06a      	beq.n	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 80079c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80079ca:	d864      	bhi.n	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 80079cc:	2b70      	cmp	r3, #112	@ 0x70
 80079ce:	d01a      	beq.n	8007a06 <TIM_SlaveTimer_SetConfig+0x10e>
 80079d0:	2b70      	cmp	r3, #112	@ 0x70
 80079d2:	d860      	bhi.n	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 80079d4:	2b60      	cmp	r3, #96	@ 0x60
 80079d6:	d054      	beq.n	8007a82 <TIM_SlaveTimer_SetConfig+0x18a>
 80079d8:	2b60      	cmp	r3, #96	@ 0x60
 80079da:	d85c      	bhi.n	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 80079dc:	2b50      	cmp	r3, #80	@ 0x50
 80079de:	d046      	beq.n	8007a6e <TIM_SlaveTimer_SetConfig+0x176>
 80079e0:	2b50      	cmp	r3, #80	@ 0x50
 80079e2:	d858      	bhi.n	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 80079e4:	2b40      	cmp	r3, #64	@ 0x40
 80079e6:	d019      	beq.n	8007a1c <TIM_SlaveTimer_SetConfig+0x124>
 80079e8:	2b40      	cmp	r3, #64	@ 0x40
 80079ea:	d854      	bhi.n	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 80079ec:	2b30      	cmp	r3, #48	@ 0x30
 80079ee:	d055      	beq.n	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 80079f0:	2b30      	cmp	r3, #48	@ 0x30
 80079f2:	d850      	bhi.n	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 80079f4:	2b20      	cmp	r3, #32
 80079f6:	d051      	beq.n	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 80079f8:	2b20      	cmp	r3, #32
 80079fa:	d84c      	bhi.n	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d04d      	beq.n	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 8007a00:	2b10      	cmp	r3, #16
 8007a02:	d04b      	beq.n	8007a9c <TIM_SlaveTimer_SetConfig+0x1a4>
 8007a04:	e047      	b.n	8007a96 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007a16:	f000 f8d7 	bl	8007bc8 <TIM_ETR_SetConfig>
      break;
 8007a1a:	e040      	b.n	8007a9e <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b05      	cmp	r3, #5
 8007a22:	d101      	bne.n	8007a28 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e03b      	b.n	8007aa0 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6a1a      	ldr	r2, [r3, #32]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0201 	bic.w	r2, r2, #1
 8007a3e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a4e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	011b      	lsls	r3, r3, #4
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68fa      	ldr	r2, [r7, #12]
 8007a6a:	621a      	str	r2, [r3, #32]
      break;
 8007a6c:	e017      	b.n	8007a9e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f000 f826 	bl	8007acc <TIM_TI1_ConfigInputStage>
      break;
 8007a80:	e00d      	b.n	8007a9e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f000 f84b 	bl	8007b2a <TIM_TI2_ConfigInputStage>
      break;
 8007a94:	e003      	b.n	8007a9e <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	75fb      	strb	r3, [r7, #23]
      break;
 8007a9a:	e000      	b.n	8007a9e <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8007a9c:	bf00      	nop
  }

  return status;
 8007a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3718      	adds	r7, #24
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	ffcfff8f 	.word	0xffcfff8f
 8007aac:	fffefff8 	.word	0xfffefff8
 8007ab0:	00200010 	.word	0x00200010
 8007ab4:	00100070 	.word	0x00100070
 8007ab8:	00100060 	.word	0x00100060
 8007abc:	00100050 	.word	0x00100050
 8007ac0:	00100040 	.word	0x00100040
 8007ac4:	00100030 	.word	0x00100030
 8007ac8:	00100020 	.word	0x00100020

08007acc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	60f8      	str	r0, [r7, #12]
 8007ad4:	60b9      	str	r1, [r7, #8]
 8007ad6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6a1b      	ldr	r3, [r3, #32]
 8007adc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	f023 0201 	bic.w	r2, r3, #1
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	699b      	ldr	r3, [r3, #24]
 8007aee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007af6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	011b      	lsls	r3, r3, #4
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	f023 030a 	bic.w	r3, r3, #10
 8007b08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	621a      	str	r2, [r3, #32]
}
 8007b1e:	bf00      	nop
 8007b20:	371c      	adds	r7, #28
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b087      	sub	sp, #28
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	60b9      	str	r1, [r7, #8]
 8007b34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
 8007b3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	f023 0210 	bic.w	r2, r3, #16
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	699b      	ldr	r3, [r3, #24]
 8007b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	031b      	lsls	r3, r3, #12
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	697a      	ldr	r2, [r7, #20]
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	697a      	ldr	r2, [r7, #20]
 8007b7c:	621a      	str	r2, [r3, #32]
}
 8007b7e:	bf00      	nop
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
	...

08007b8c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	4b09      	ldr	r3, [pc, #36]	@ (8007bc4 <TIM_ITRx_SetConfig+0x38>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f043 0307 	orr.w	r3, r3, #7
 8007bae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	609a      	str	r2, [r3, #8]
}
 8007bb6:	bf00      	nop
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	ffcfff8f 	.word	0xffcfff8f

08007bc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b087      	sub	sp, #28
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	60f8      	str	r0, [r7, #12]
 8007bd0:	60b9      	str	r1, [r7, #8]
 8007bd2:	607a      	str	r2, [r7, #4]
 8007bd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007be2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	021a      	lsls	r2, r3, #8
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	431a      	orrs	r2, r3
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	697a      	ldr	r2, [r7, #20]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	697a      	ldr	r2, [r7, #20]
 8007bfa:	609a      	str	r2, [r3, #8]
}
 8007bfc:	bf00      	nop
 8007bfe:	371c      	adds	r7, #28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr

08007c08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f003 031f 	and.w	r3, r3, #31
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6a1a      	ldr	r2, [r3, #32]
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	43db      	mvns	r3, r3
 8007c2a:	401a      	ands	r2, r3
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6a1a      	ldr	r2, [r3, #32]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	f003 031f 	and.w	r3, r3, #31
 8007c3a:	6879      	ldr	r1, [r7, #4]
 8007c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c40:	431a      	orrs	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	621a      	str	r2, [r3, #32]
}
 8007c46:	bf00      	nop
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
	...

08007c54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	d101      	bne.n	8007c6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c68:	2302      	movs	r3, #2
 8007c6a:	e06d      	b.n	8007d48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2202      	movs	r2, #2
 8007c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a30      	ldr	r2, [pc, #192]	@ (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d004      	beq.n	8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8007d58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d108      	bne.n	8007cb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007ca6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a20      	ldr	r2, [pc, #128]	@ (8007d54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d022      	beq.n	8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cde:	d01d      	beq.n	8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8007d5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d018      	beq.n	8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a1c      	ldr	r2, [pc, #112]	@ (8007d60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d013      	beq.n	8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8007d64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d00e      	beq.n	8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a15      	ldr	r2, [pc, #84]	@ (8007d58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d009      	beq.n	8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a16      	ldr	r2, [pc, #88]	@ (8007d68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d004      	beq.n	8007d1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a15      	ldr	r2, [pc, #84]	@ (8007d6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d10c      	bne.n	8007d36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	40010000 	.word	0x40010000
 8007d58:	40010400 	.word	0x40010400
 8007d5c:	40000400 	.word	0x40000400
 8007d60:	40000800 	.word	0x40000800
 8007d64:	40000c00 	.word	0x40000c00
 8007d68:	40001800 	.word	0x40001800
 8007d6c:	40014000 	.word	0x40014000

08007d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d101      	bne.n	8007d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e042      	b.n	8007e08 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d106      	bne.n	8007d9a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f7f9 fd8d 	bl	80018b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2224      	movs	r2, #36	@ 0x24
 8007d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681a      	ldr	r2, [r3, #0]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f022 0201 	bic.w	r2, r2, #1
 8007db0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f000 fe1e 	bl	80089fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 f8b3 	bl	8007f2c <UART_SetConfig>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b01      	cmp	r3, #1
 8007dca:	d101      	bne.n	8007dd0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e01b      	b.n	8007e08 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	685a      	ldr	r2, [r3, #4]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007dde:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	689a      	ldr	r2, [r3, #8]
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007dee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f042 0201 	orr.w	r2, r2, #1
 8007dfe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fe9d 	bl	8008b40 <UART_CheckIdleState>
 8007e06:	4603      	mov	r3, r0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b08a      	sub	sp, #40	@ 0x28
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	603b      	str	r3, [r7, #0]
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e26:	2b20      	cmp	r3, #32
 8007e28:	d17b      	bne.n	8007f22 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d002      	beq.n	8007e36 <HAL_UART_Transmit+0x26>
 8007e30:	88fb      	ldrh	r3, [r7, #6]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d101      	bne.n	8007e3a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e074      	b.n	8007f24 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	2221      	movs	r2, #33	@ 0x21
 8007e46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e4a:	f7f9 fefb 	bl	8001c44 <HAL_GetTick>
 8007e4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	88fa      	ldrh	r2, [r7, #6]
 8007e54:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	88fa      	ldrh	r2, [r7, #6]
 8007e5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e68:	d108      	bne.n	8007e7c <HAL_UART_Transmit+0x6c>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d104      	bne.n	8007e7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007e72:	2300      	movs	r3, #0
 8007e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	61bb      	str	r3, [r7, #24]
 8007e7a:	e003      	b.n	8007e84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e80:	2300      	movs	r3, #0
 8007e82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e84:	e030      	b.n	8007ee8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	2180      	movs	r1, #128	@ 0x80
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 feff 	bl	8008c94 <UART_WaitOnFlagUntilTimeout>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d005      	beq.n	8007ea8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2220      	movs	r2, #32
 8007ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007ea4:	2303      	movs	r3, #3
 8007ea6:	e03d      	b.n	8007f24 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10b      	bne.n	8007ec6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	881b      	ldrh	r3, [r3, #0]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ebc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007ebe:	69bb      	ldr	r3, [r7, #24]
 8007ec0:	3302      	adds	r3, #2
 8007ec2:	61bb      	str	r3, [r7, #24]
 8007ec4:	e007      	b.n	8007ed6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	781a      	ldrb	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	3b01      	subs	r3, #1
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1c8      	bne.n	8007e86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	9300      	str	r3, [sp, #0]
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	2200      	movs	r2, #0
 8007efc:	2140      	movs	r1, #64	@ 0x40
 8007efe:	68f8      	ldr	r0, [r7, #12]
 8007f00:	f000 fec8 	bl	8008c94 <UART_WaitOnFlagUntilTimeout>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d005      	beq.n	8007f16 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2220      	movs	r2, #32
 8007f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e006      	b.n	8007f24 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e000      	b.n	8007f24 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007f22:	2302      	movs	r3, #2
  }
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3720      	adds	r7, #32
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f30:	b092      	sub	sp, #72	@ 0x48
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	689a      	ldr	r2, [r3, #8]
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	431a      	orrs	r2, r3
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	695b      	ldr	r3, [r3, #20]
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	4bbe      	ldr	r3, [pc, #760]	@ (8008254 <UART_SetConfig+0x328>)
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	6812      	ldr	r2, [r2, #0]
 8007f62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007f64:	430b      	orrs	r3, r1
 8007f66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	430a      	orrs	r2, r1
 8007f7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4ab3      	ldr	r2, [pc, #716]	@ (8008258 <UART_SetConfig+0x32c>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d004      	beq.n	8007f98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	6a1b      	ldr	r3, [r3, #32]
 8007f92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f94:	4313      	orrs	r3, r2
 8007f96:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	689a      	ldr	r2, [r3, #8]
 8007f9e:	4baf      	ldr	r3, [pc, #700]	@ (800825c <UART_SetConfig+0x330>)
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	6812      	ldr	r2, [r2, #0]
 8007fa6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007fa8:	430b      	orrs	r3, r1
 8007faa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb2:	f023 010f 	bic.w	r1, r3, #15
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	430a      	orrs	r2, r1
 8007fc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4aa6      	ldr	r2, [pc, #664]	@ (8008260 <UART_SetConfig+0x334>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d177      	bne.n	80080bc <UART_SetConfig+0x190>
 8007fcc:	4ba5      	ldr	r3, [pc, #660]	@ (8008264 <UART_SetConfig+0x338>)
 8007fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007fd4:	2b28      	cmp	r3, #40	@ 0x28
 8007fd6:	d86d      	bhi.n	80080b4 <UART_SetConfig+0x188>
 8007fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8007fe0 <UART_SetConfig+0xb4>)
 8007fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fde:	bf00      	nop
 8007fe0:	08008085 	.word	0x08008085
 8007fe4:	080080b5 	.word	0x080080b5
 8007fe8:	080080b5 	.word	0x080080b5
 8007fec:	080080b5 	.word	0x080080b5
 8007ff0:	080080b5 	.word	0x080080b5
 8007ff4:	080080b5 	.word	0x080080b5
 8007ff8:	080080b5 	.word	0x080080b5
 8007ffc:	080080b5 	.word	0x080080b5
 8008000:	0800808d 	.word	0x0800808d
 8008004:	080080b5 	.word	0x080080b5
 8008008:	080080b5 	.word	0x080080b5
 800800c:	080080b5 	.word	0x080080b5
 8008010:	080080b5 	.word	0x080080b5
 8008014:	080080b5 	.word	0x080080b5
 8008018:	080080b5 	.word	0x080080b5
 800801c:	080080b5 	.word	0x080080b5
 8008020:	08008095 	.word	0x08008095
 8008024:	080080b5 	.word	0x080080b5
 8008028:	080080b5 	.word	0x080080b5
 800802c:	080080b5 	.word	0x080080b5
 8008030:	080080b5 	.word	0x080080b5
 8008034:	080080b5 	.word	0x080080b5
 8008038:	080080b5 	.word	0x080080b5
 800803c:	080080b5 	.word	0x080080b5
 8008040:	0800809d 	.word	0x0800809d
 8008044:	080080b5 	.word	0x080080b5
 8008048:	080080b5 	.word	0x080080b5
 800804c:	080080b5 	.word	0x080080b5
 8008050:	080080b5 	.word	0x080080b5
 8008054:	080080b5 	.word	0x080080b5
 8008058:	080080b5 	.word	0x080080b5
 800805c:	080080b5 	.word	0x080080b5
 8008060:	080080a5 	.word	0x080080a5
 8008064:	080080b5 	.word	0x080080b5
 8008068:	080080b5 	.word	0x080080b5
 800806c:	080080b5 	.word	0x080080b5
 8008070:	080080b5 	.word	0x080080b5
 8008074:	080080b5 	.word	0x080080b5
 8008078:	080080b5 	.word	0x080080b5
 800807c:	080080b5 	.word	0x080080b5
 8008080:	080080ad 	.word	0x080080ad
 8008084:	2301      	movs	r3, #1
 8008086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800808a:	e222      	b.n	80084d2 <UART_SetConfig+0x5a6>
 800808c:	2304      	movs	r3, #4
 800808e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008092:	e21e      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008094:	2308      	movs	r3, #8
 8008096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809a:	e21a      	b.n	80084d2 <UART_SetConfig+0x5a6>
 800809c:	2310      	movs	r3, #16
 800809e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080a2:	e216      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80080a4:	2320      	movs	r3, #32
 80080a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080aa:	e212      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80080ac:	2340      	movs	r3, #64	@ 0x40
 80080ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b2:	e20e      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80080b4:	2380      	movs	r3, #128	@ 0x80
 80080b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ba:	e20a      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a69      	ldr	r2, [pc, #420]	@ (8008268 <UART_SetConfig+0x33c>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d130      	bne.n	8008128 <UART_SetConfig+0x1fc>
 80080c6:	4b67      	ldr	r3, [pc, #412]	@ (8008264 <UART_SetConfig+0x338>)
 80080c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	2b05      	cmp	r3, #5
 80080d0:	d826      	bhi.n	8008120 <UART_SetConfig+0x1f4>
 80080d2:	a201      	add	r2, pc, #4	@ (adr r2, 80080d8 <UART_SetConfig+0x1ac>)
 80080d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080d8:	080080f1 	.word	0x080080f1
 80080dc:	080080f9 	.word	0x080080f9
 80080e0:	08008101 	.word	0x08008101
 80080e4:	08008109 	.word	0x08008109
 80080e8:	08008111 	.word	0x08008111
 80080ec:	08008119 	.word	0x08008119
 80080f0:	2300      	movs	r3, #0
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080f6:	e1ec      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80080f8:	2304      	movs	r3, #4
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080fe:	e1e8      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008100:	2308      	movs	r3, #8
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008106:	e1e4      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008108:	2310      	movs	r3, #16
 800810a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800810e:	e1e0      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008110:	2320      	movs	r3, #32
 8008112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008116:	e1dc      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008118:	2340      	movs	r3, #64	@ 0x40
 800811a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800811e:	e1d8      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008120:	2380      	movs	r3, #128	@ 0x80
 8008122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008126:	e1d4      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a4f      	ldr	r2, [pc, #316]	@ (800826c <UART_SetConfig+0x340>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d130      	bne.n	8008194 <UART_SetConfig+0x268>
 8008132:	4b4c      	ldr	r3, [pc, #304]	@ (8008264 <UART_SetConfig+0x338>)
 8008134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	2b05      	cmp	r3, #5
 800813c:	d826      	bhi.n	800818c <UART_SetConfig+0x260>
 800813e:	a201      	add	r2, pc, #4	@ (adr r2, 8008144 <UART_SetConfig+0x218>)
 8008140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008144:	0800815d 	.word	0x0800815d
 8008148:	08008165 	.word	0x08008165
 800814c:	0800816d 	.word	0x0800816d
 8008150:	08008175 	.word	0x08008175
 8008154:	0800817d 	.word	0x0800817d
 8008158:	08008185 	.word	0x08008185
 800815c:	2300      	movs	r3, #0
 800815e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008162:	e1b6      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008164:	2304      	movs	r3, #4
 8008166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800816a:	e1b2      	b.n	80084d2 <UART_SetConfig+0x5a6>
 800816c:	2308      	movs	r3, #8
 800816e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008172:	e1ae      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008174:	2310      	movs	r3, #16
 8008176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800817a:	e1aa      	b.n	80084d2 <UART_SetConfig+0x5a6>
 800817c:	2320      	movs	r3, #32
 800817e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008182:	e1a6      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008184:	2340      	movs	r3, #64	@ 0x40
 8008186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800818a:	e1a2      	b.n	80084d2 <UART_SetConfig+0x5a6>
 800818c:	2380      	movs	r3, #128	@ 0x80
 800818e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008192:	e19e      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a35      	ldr	r2, [pc, #212]	@ (8008270 <UART_SetConfig+0x344>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d130      	bne.n	8008200 <UART_SetConfig+0x2d4>
 800819e:	4b31      	ldr	r3, [pc, #196]	@ (8008264 <UART_SetConfig+0x338>)
 80081a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	2b05      	cmp	r3, #5
 80081a8:	d826      	bhi.n	80081f8 <UART_SetConfig+0x2cc>
 80081aa:	a201      	add	r2, pc, #4	@ (adr r2, 80081b0 <UART_SetConfig+0x284>)
 80081ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b0:	080081c9 	.word	0x080081c9
 80081b4:	080081d1 	.word	0x080081d1
 80081b8:	080081d9 	.word	0x080081d9
 80081bc:	080081e1 	.word	0x080081e1
 80081c0:	080081e9 	.word	0x080081e9
 80081c4:	080081f1 	.word	0x080081f1
 80081c8:	2300      	movs	r3, #0
 80081ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ce:	e180      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80081d0:	2304      	movs	r3, #4
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081d6:	e17c      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80081d8:	2308      	movs	r3, #8
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081de:	e178      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80081e0:	2310      	movs	r3, #16
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e6:	e174      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80081e8:	2320      	movs	r3, #32
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ee:	e170      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80081f0:	2340      	movs	r3, #64	@ 0x40
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f6:	e16c      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80081f8:	2380      	movs	r3, #128	@ 0x80
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fe:	e168      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a1b      	ldr	r2, [pc, #108]	@ (8008274 <UART_SetConfig+0x348>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d142      	bne.n	8008290 <UART_SetConfig+0x364>
 800820a:	4b16      	ldr	r3, [pc, #88]	@ (8008264 <UART_SetConfig+0x338>)
 800820c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	2b05      	cmp	r3, #5
 8008214:	d838      	bhi.n	8008288 <UART_SetConfig+0x35c>
 8008216:	a201      	add	r2, pc, #4	@ (adr r2, 800821c <UART_SetConfig+0x2f0>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	08008235 	.word	0x08008235
 8008220:	0800823d 	.word	0x0800823d
 8008224:	08008245 	.word	0x08008245
 8008228:	0800824d 	.word	0x0800824d
 800822c:	08008279 	.word	0x08008279
 8008230:	08008281 	.word	0x08008281
 8008234:	2300      	movs	r3, #0
 8008236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823a:	e14a      	b.n	80084d2 <UART_SetConfig+0x5a6>
 800823c:	2304      	movs	r3, #4
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008242:	e146      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008244:	2308      	movs	r3, #8
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824a:	e142      	b.n	80084d2 <UART_SetConfig+0x5a6>
 800824c:	2310      	movs	r3, #16
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008252:	e13e      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008254:	cfff69f3 	.word	0xcfff69f3
 8008258:	58000c00 	.word	0x58000c00
 800825c:	11fff4ff 	.word	0x11fff4ff
 8008260:	40011000 	.word	0x40011000
 8008264:	58024400 	.word	0x58024400
 8008268:	40004400 	.word	0x40004400
 800826c:	40004800 	.word	0x40004800
 8008270:	40004c00 	.word	0x40004c00
 8008274:	40005000 	.word	0x40005000
 8008278:	2320      	movs	r3, #32
 800827a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800827e:	e128      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008280:	2340      	movs	r3, #64	@ 0x40
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008286:	e124      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008288:	2380      	movs	r3, #128	@ 0x80
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828e:	e120      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4acb      	ldr	r2, [pc, #812]	@ (80085c4 <UART_SetConfig+0x698>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d176      	bne.n	8008388 <UART_SetConfig+0x45c>
 800829a:	4bcb      	ldr	r3, [pc, #812]	@ (80085c8 <UART_SetConfig+0x69c>)
 800829c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800829e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082a2:	2b28      	cmp	r3, #40	@ 0x28
 80082a4:	d86c      	bhi.n	8008380 <UART_SetConfig+0x454>
 80082a6:	a201      	add	r2, pc, #4	@ (adr r2, 80082ac <UART_SetConfig+0x380>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	08008351 	.word	0x08008351
 80082b0:	08008381 	.word	0x08008381
 80082b4:	08008381 	.word	0x08008381
 80082b8:	08008381 	.word	0x08008381
 80082bc:	08008381 	.word	0x08008381
 80082c0:	08008381 	.word	0x08008381
 80082c4:	08008381 	.word	0x08008381
 80082c8:	08008381 	.word	0x08008381
 80082cc:	08008359 	.word	0x08008359
 80082d0:	08008381 	.word	0x08008381
 80082d4:	08008381 	.word	0x08008381
 80082d8:	08008381 	.word	0x08008381
 80082dc:	08008381 	.word	0x08008381
 80082e0:	08008381 	.word	0x08008381
 80082e4:	08008381 	.word	0x08008381
 80082e8:	08008381 	.word	0x08008381
 80082ec:	08008361 	.word	0x08008361
 80082f0:	08008381 	.word	0x08008381
 80082f4:	08008381 	.word	0x08008381
 80082f8:	08008381 	.word	0x08008381
 80082fc:	08008381 	.word	0x08008381
 8008300:	08008381 	.word	0x08008381
 8008304:	08008381 	.word	0x08008381
 8008308:	08008381 	.word	0x08008381
 800830c:	08008369 	.word	0x08008369
 8008310:	08008381 	.word	0x08008381
 8008314:	08008381 	.word	0x08008381
 8008318:	08008381 	.word	0x08008381
 800831c:	08008381 	.word	0x08008381
 8008320:	08008381 	.word	0x08008381
 8008324:	08008381 	.word	0x08008381
 8008328:	08008381 	.word	0x08008381
 800832c:	08008371 	.word	0x08008371
 8008330:	08008381 	.word	0x08008381
 8008334:	08008381 	.word	0x08008381
 8008338:	08008381 	.word	0x08008381
 800833c:	08008381 	.word	0x08008381
 8008340:	08008381 	.word	0x08008381
 8008344:	08008381 	.word	0x08008381
 8008348:	08008381 	.word	0x08008381
 800834c:	08008379 	.word	0x08008379
 8008350:	2301      	movs	r3, #1
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008356:	e0bc      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008358:	2304      	movs	r3, #4
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800835e:	e0b8      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008360:	2308      	movs	r3, #8
 8008362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008366:	e0b4      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008368:	2310      	movs	r3, #16
 800836a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836e:	e0b0      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008370:	2320      	movs	r3, #32
 8008372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008376:	e0ac      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008378:	2340      	movs	r3, #64	@ 0x40
 800837a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800837e:	e0a8      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008380:	2380      	movs	r3, #128	@ 0x80
 8008382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008386:	e0a4      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a8f      	ldr	r2, [pc, #572]	@ (80085cc <UART_SetConfig+0x6a0>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d130      	bne.n	80083f4 <UART_SetConfig+0x4c8>
 8008392:	4b8d      	ldr	r3, [pc, #564]	@ (80085c8 <UART_SetConfig+0x69c>)
 8008394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008396:	f003 0307 	and.w	r3, r3, #7
 800839a:	2b05      	cmp	r3, #5
 800839c:	d826      	bhi.n	80083ec <UART_SetConfig+0x4c0>
 800839e:	a201      	add	r2, pc, #4	@ (adr r2, 80083a4 <UART_SetConfig+0x478>)
 80083a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a4:	080083bd 	.word	0x080083bd
 80083a8:	080083c5 	.word	0x080083c5
 80083ac:	080083cd 	.word	0x080083cd
 80083b0:	080083d5 	.word	0x080083d5
 80083b4:	080083dd 	.word	0x080083dd
 80083b8:	080083e5 	.word	0x080083e5
 80083bc:	2300      	movs	r3, #0
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c2:	e086      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80083c4:	2304      	movs	r3, #4
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ca:	e082      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80083cc:	2308      	movs	r3, #8
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083d2:	e07e      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80083d4:	2310      	movs	r3, #16
 80083d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083da:	e07a      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80083dc:	2320      	movs	r3, #32
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083e2:	e076      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80083e4:	2340      	movs	r3, #64	@ 0x40
 80083e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ea:	e072      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80083ec:	2380      	movs	r3, #128	@ 0x80
 80083ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083f2:	e06e      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a75      	ldr	r2, [pc, #468]	@ (80085d0 <UART_SetConfig+0x6a4>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d130      	bne.n	8008460 <UART_SetConfig+0x534>
 80083fe:	4b72      	ldr	r3, [pc, #456]	@ (80085c8 <UART_SetConfig+0x69c>)
 8008400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	2b05      	cmp	r3, #5
 8008408:	d826      	bhi.n	8008458 <UART_SetConfig+0x52c>
 800840a:	a201      	add	r2, pc, #4	@ (adr r2, 8008410 <UART_SetConfig+0x4e4>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	08008429 	.word	0x08008429
 8008414:	08008431 	.word	0x08008431
 8008418:	08008439 	.word	0x08008439
 800841c:	08008441 	.word	0x08008441
 8008420:	08008449 	.word	0x08008449
 8008424:	08008451 	.word	0x08008451
 8008428:	2300      	movs	r3, #0
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842e:	e050      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008430:	2304      	movs	r3, #4
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008436:	e04c      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008438:	2308      	movs	r3, #8
 800843a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843e:	e048      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008440:	2310      	movs	r3, #16
 8008442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008446:	e044      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008448:	2320      	movs	r3, #32
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800844e:	e040      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008450:	2340      	movs	r3, #64	@ 0x40
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008456:	e03c      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008458:	2380      	movs	r3, #128	@ 0x80
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800845e:	e038      	b.n	80084d2 <UART_SetConfig+0x5a6>
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a5b      	ldr	r2, [pc, #364]	@ (80085d4 <UART_SetConfig+0x6a8>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d130      	bne.n	80084cc <UART_SetConfig+0x5a0>
 800846a:	4b57      	ldr	r3, [pc, #348]	@ (80085c8 <UART_SetConfig+0x69c>)
 800846c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800846e:	f003 0307 	and.w	r3, r3, #7
 8008472:	2b05      	cmp	r3, #5
 8008474:	d826      	bhi.n	80084c4 <UART_SetConfig+0x598>
 8008476:	a201      	add	r2, pc, #4	@ (adr r2, 800847c <UART_SetConfig+0x550>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	08008495 	.word	0x08008495
 8008480:	0800849d 	.word	0x0800849d
 8008484:	080084a5 	.word	0x080084a5
 8008488:	080084ad 	.word	0x080084ad
 800848c:	080084b5 	.word	0x080084b5
 8008490:	080084bd 	.word	0x080084bd
 8008494:	2302      	movs	r3, #2
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849a:	e01a      	b.n	80084d2 <UART_SetConfig+0x5a6>
 800849c:	2304      	movs	r3, #4
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a2:	e016      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80084a4:	2308      	movs	r3, #8
 80084a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084aa:	e012      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80084ac:	2310      	movs	r3, #16
 80084ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b2:	e00e      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80084b4:	2320      	movs	r3, #32
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ba:	e00a      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80084bc:	2340      	movs	r3, #64	@ 0x40
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c2:	e006      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80084c4:	2380      	movs	r3, #128	@ 0x80
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ca:	e002      	b.n	80084d2 <UART_SetConfig+0x5a6>
 80084cc:	2380      	movs	r3, #128	@ 0x80
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a3f      	ldr	r2, [pc, #252]	@ (80085d4 <UART_SetConfig+0x6a8>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	f040 80f8 	bne.w	80086ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084de:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	dc46      	bgt.n	8008574 <UART_SetConfig+0x648>
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	f2c0 8082 	blt.w	80085f0 <UART_SetConfig+0x6c4>
 80084ec:	3b02      	subs	r3, #2
 80084ee:	2b1e      	cmp	r3, #30
 80084f0:	d87e      	bhi.n	80085f0 <UART_SetConfig+0x6c4>
 80084f2:	a201      	add	r2, pc, #4	@ (adr r2, 80084f8 <UART_SetConfig+0x5cc>)
 80084f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f8:	0800857b 	.word	0x0800857b
 80084fc:	080085f1 	.word	0x080085f1
 8008500:	08008583 	.word	0x08008583
 8008504:	080085f1 	.word	0x080085f1
 8008508:	080085f1 	.word	0x080085f1
 800850c:	080085f1 	.word	0x080085f1
 8008510:	08008593 	.word	0x08008593
 8008514:	080085f1 	.word	0x080085f1
 8008518:	080085f1 	.word	0x080085f1
 800851c:	080085f1 	.word	0x080085f1
 8008520:	080085f1 	.word	0x080085f1
 8008524:	080085f1 	.word	0x080085f1
 8008528:	080085f1 	.word	0x080085f1
 800852c:	080085f1 	.word	0x080085f1
 8008530:	080085a3 	.word	0x080085a3
 8008534:	080085f1 	.word	0x080085f1
 8008538:	080085f1 	.word	0x080085f1
 800853c:	080085f1 	.word	0x080085f1
 8008540:	080085f1 	.word	0x080085f1
 8008544:	080085f1 	.word	0x080085f1
 8008548:	080085f1 	.word	0x080085f1
 800854c:	080085f1 	.word	0x080085f1
 8008550:	080085f1 	.word	0x080085f1
 8008554:	080085f1 	.word	0x080085f1
 8008558:	080085f1 	.word	0x080085f1
 800855c:	080085f1 	.word	0x080085f1
 8008560:	080085f1 	.word	0x080085f1
 8008564:	080085f1 	.word	0x080085f1
 8008568:	080085f1 	.word	0x080085f1
 800856c:	080085f1 	.word	0x080085f1
 8008570:	080085e3 	.word	0x080085e3
 8008574:	2b40      	cmp	r3, #64	@ 0x40
 8008576:	d037      	beq.n	80085e8 <UART_SetConfig+0x6bc>
 8008578:	e03a      	b.n	80085f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800857a:	f7fd fccb 	bl	8005f14 <HAL_RCCEx_GetD3PCLK1Freq>
 800857e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008580:	e03c      	b.n	80085fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008586:	4618      	mov	r0, r3
 8008588:	f7fd fcda 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800858c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800858e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008590:	e034      	b.n	80085fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008592:	f107 0318 	add.w	r3, r7, #24
 8008596:	4618      	mov	r0, r3
 8008598:	f7fd fe26 	bl	80061e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085a0:	e02c      	b.n	80085fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085a2:	4b09      	ldr	r3, [pc, #36]	@ (80085c8 <UART_SetConfig+0x69c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d016      	beq.n	80085dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085ae:	4b06      	ldr	r3, [pc, #24]	@ (80085c8 <UART_SetConfig+0x69c>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	08db      	lsrs	r3, r3, #3
 80085b4:	f003 0303 	and.w	r3, r3, #3
 80085b8:	4a07      	ldr	r2, [pc, #28]	@ (80085d8 <UART_SetConfig+0x6ac>)
 80085ba:	fa22 f303 	lsr.w	r3, r2, r3
 80085be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80085c0:	e01c      	b.n	80085fc <UART_SetConfig+0x6d0>
 80085c2:	bf00      	nop
 80085c4:	40011400 	.word	0x40011400
 80085c8:	58024400 	.word	0x58024400
 80085cc:	40007800 	.word	0x40007800
 80085d0:	40007c00 	.word	0x40007c00
 80085d4:	58000c00 	.word	0x58000c00
 80085d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80085dc:	4b9d      	ldr	r3, [pc, #628]	@ (8008854 <UART_SetConfig+0x928>)
 80085de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e0:	e00c      	b.n	80085fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80085e2:	4b9d      	ldr	r3, [pc, #628]	@ (8008858 <UART_SetConfig+0x92c>)
 80085e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e6:	e009      	b.n	80085fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80085e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80085ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085ee:	e005      	b.n	80085fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80085fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80085fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 81de 	beq.w	80089c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008608:	4a94      	ldr	r2, [pc, #592]	@ (800885c <UART_SetConfig+0x930>)
 800860a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800860e:	461a      	mov	r2, r3
 8008610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008612:	fbb3 f3f2 	udiv	r3, r3, r2
 8008616:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	4613      	mov	r3, r2
 800861e:	005b      	lsls	r3, r3, #1
 8008620:	4413      	add	r3, r2
 8008622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008624:	429a      	cmp	r2, r3
 8008626:	d305      	bcc.n	8008634 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800862e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008630:	429a      	cmp	r2, r3
 8008632:	d903      	bls.n	800863c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800863a:	e1c1      	b.n	80089c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800863c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800863e:	2200      	movs	r2, #0
 8008640:	60bb      	str	r3, [r7, #8]
 8008642:	60fa      	str	r2, [r7, #12]
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008648:	4a84      	ldr	r2, [pc, #528]	@ (800885c <UART_SetConfig+0x930>)
 800864a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800864e:	b29b      	uxth	r3, r3
 8008650:	2200      	movs	r2, #0
 8008652:	603b      	str	r3, [r7, #0]
 8008654:	607a      	str	r2, [r7, #4]
 8008656:	e9d7 2300 	ldrd	r2, r3, [r7]
 800865a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800865e:	f7f7 fe97 	bl	8000390 <__aeabi_uldivmod>
 8008662:	4602      	mov	r2, r0
 8008664:	460b      	mov	r3, r1
 8008666:	4610      	mov	r0, r2
 8008668:	4619      	mov	r1, r3
 800866a:	f04f 0200 	mov.w	r2, #0
 800866e:	f04f 0300 	mov.w	r3, #0
 8008672:	020b      	lsls	r3, r1, #8
 8008674:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008678:	0202      	lsls	r2, r0, #8
 800867a:	6979      	ldr	r1, [r7, #20]
 800867c:	6849      	ldr	r1, [r1, #4]
 800867e:	0849      	lsrs	r1, r1, #1
 8008680:	2000      	movs	r0, #0
 8008682:	460c      	mov	r4, r1
 8008684:	4605      	mov	r5, r0
 8008686:	eb12 0804 	adds.w	r8, r2, r4
 800868a:	eb43 0905 	adc.w	r9, r3, r5
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	469a      	mov	sl, r3
 8008696:	4693      	mov	fp, r2
 8008698:	4652      	mov	r2, sl
 800869a:	465b      	mov	r3, fp
 800869c:	4640      	mov	r0, r8
 800869e:	4649      	mov	r1, r9
 80086a0:	f7f7 fe76 	bl	8000390 <__aeabi_uldivmod>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4613      	mov	r3, r2
 80086aa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086b2:	d308      	bcc.n	80086c6 <UART_SetConfig+0x79a>
 80086b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086ba:	d204      	bcs.n	80086c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086c2:	60da      	str	r2, [r3, #12]
 80086c4:	e17c      	b.n	80089c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80086cc:	e178      	b.n	80089c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80086d6:	f040 80c5 	bne.w	8008864 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80086da:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80086de:	2b20      	cmp	r3, #32
 80086e0:	dc48      	bgt.n	8008774 <UART_SetConfig+0x848>
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	db7b      	blt.n	80087de <UART_SetConfig+0x8b2>
 80086e6:	2b20      	cmp	r3, #32
 80086e8:	d879      	bhi.n	80087de <UART_SetConfig+0x8b2>
 80086ea:	a201      	add	r2, pc, #4	@ (adr r2, 80086f0 <UART_SetConfig+0x7c4>)
 80086ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f0:	0800877b 	.word	0x0800877b
 80086f4:	08008783 	.word	0x08008783
 80086f8:	080087df 	.word	0x080087df
 80086fc:	080087df 	.word	0x080087df
 8008700:	0800878b 	.word	0x0800878b
 8008704:	080087df 	.word	0x080087df
 8008708:	080087df 	.word	0x080087df
 800870c:	080087df 	.word	0x080087df
 8008710:	0800879b 	.word	0x0800879b
 8008714:	080087df 	.word	0x080087df
 8008718:	080087df 	.word	0x080087df
 800871c:	080087df 	.word	0x080087df
 8008720:	080087df 	.word	0x080087df
 8008724:	080087df 	.word	0x080087df
 8008728:	080087df 	.word	0x080087df
 800872c:	080087df 	.word	0x080087df
 8008730:	080087ab 	.word	0x080087ab
 8008734:	080087df 	.word	0x080087df
 8008738:	080087df 	.word	0x080087df
 800873c:	080087df 	.word	0x080087df
 8008740:	080087df 	.word	0x080087df
 8008744:	080087df 	.word	0x080087df
 8008748:	080087df 	.word	0x080087df
 800874c:	080087df 	.word	0x080087df
 8008750:	080087df 	.word	0x080087df
 8008754:	080087df 	.word	0x080087df
 8008758:	080087df 	.word	0x080087df
 800875c:	080087df 	.word	0x080087df
 8008760:	080087df 	.word	0x080087df
 8008764:	080087df 	.word	0x080087df
 8008768:	080087df 	.word	0x080087df
 800876c:	080087df 	.word	0x080087df
 8008770:	080087d1 	.word	0x080087d1
 8008774:	2b40      	cmp	r3, #64	@ 0x40
 8008776:	d02e      	beq.n	80087d6 <UART_SetConfig+0x8aa>
 8008778:	e031      	b.n	80087de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800877a:	f7fc f995 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 800877e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008780:	e033      	b.n	80087ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008782:	f7fc f9a7 	bl	8004ad4 <HAL_RCC_GetPCLK2Freq>
 8008786:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008788:	e02f      	b.n	80087ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800878a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800878e:	4618      	mov	r0, r3
 8008790:	f7fd fbd6 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008798:	e027      	b.n	80087ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800879a:	f107 0318 	add.w	r3, r7, #24
 800879e:	4618      	mov	r0, r3
 80087a0:	f7fd fd22 	bl	80061e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087a8:	e01f      	b.n	80087ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087aa:	4b2d      	ldr	r3, [pc, #180]	@ (8008860 <UART_SetConfig+0x934>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f003 0320 	and.w	r3, r3, #32
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d009      	beq.n	80087ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80087b6:	4b2a      	ldr	r3, [pc, #168]	@ (8008860 <UART_SetConfig+0x934>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	08db      	lsrs	r3, r3, #3
 80087bc:	f003 0303 	and.w	r3, r3, #3
 80087c0:	4a24      	ldr	r2, [pc, #144]	@ (8008854 <UART_SetConfig+0x928>)
 80087c2:	fa22 f303 	lsr.w	r3, r2, r3
 80087c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80087c8:	e00f      	b.n	80087ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80087ca:	4b22      	ldr	r3, [pc, #136]	@ (8008854 <UART_SetConfig+0x928>)
 80087cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087ce:	e00c      	b.n	80087ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80087d0:	4b21      	ldr	r3, [pc, #132]	@ (8008858 <UART_SetConfig+0x92c>)
 80087d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087d4:	e009      	b.n	80087ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80087da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087dc:	e005      	b.n	80087ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80087de:	2300      	movs	r3, #0
 80087e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80087e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f000 80e7 	beq.w	80089c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f6:	4a19      	ldr	r2, [pc, #100]	@ (800885c <UART_SetConfig+0x930>)
 80087f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087fc:	461a      	mov	r2, r3
 80087fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008800:	fbb3 f3f2 	udiv	r3, r3, r2
 8008804:	005a      	lsls	r2, r3, #1
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	085b      	lsrs	r3, r3, #1
 800880c:	441a      	add	r2, r3
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	fbb2 f3f3 	udiv	r3, r2, r3
 8008816:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800881a:	2b0f      	cmp	r3, #15
 800881c:	d916      	bls.n	800884c <UART_SetConfig+0x920>
 800881e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008824:	d212      	bcs.n	800884c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008828:	b29b      	uxth	r3, r3
 800882a:	f023 030f 	bic.w	r3, r3, #15
 800882e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008832:	085b      	lsrs	r3, r3, #1
 8008834:	b29b      	uxth	r3, r3
 8008836:	f003 0307 	and.w	r3, r3, #7
 800883a:	b29a      	uxth	r2, r3
 800883c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800883e:	4313      	orrs	r3, r2
 8008840:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008848:	60da      	str	r2, [r3, #12]
 800884a:	e0b9      	b.n	80089c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008852:	e0b5      	b.n	80089c0 <UART_SetConfig+0xa94>
 8008854:	03d09000 	.word	0x03d09000
 8008858:	003d0900 	.word	0x003d0900
 800885c:	0800a008 	.word	0x0800a008
 8008860:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008864:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008868:	2b20      	cmp	r3, #32
 800886a:	dc49      	bgt.n	8008900 <UART_SetConfig+0x9d4>
 800886c:	2b00      	cmp	r3, #0
 800886e:	db7c      	blt.n	800896a <UART_SetConfig+0xa3e>
 8008870:	2b20      	cmp	r3, #32
 8008872:	d87a      	bhi.n	800896a <UART_SetConfig+0xa3e>
 8008874:	a201      	add	r2, pc, #4	@ (adr r2, 800887c <UART_SetConfig+0x950>)
 8008876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887a:	bf00      	nop
 800887c:	08008907 	.word	0x08008907
 8008880:	0800890f 	.word	0x0800890f
 8008884:	0800896b 	.word	0x0800896b
 8008888:	0800896b 	.word	0x0800896b
 800888c:	08008917 	.word	0x08008917
 8008890:	0800896b 	.word	0x0800896b
 8008894:	0800896b 	.word	0x0800896b
 8008898:	0800896b 	.word	0x0800896b
 800889c:	08008927 	.word	0x08008927
 80088a0:	0800896b 	.word	0x0800896b
 80088a4:	0800896b 	.word	0x0800896b
 80088a8:	0800896b 	.word	0x0800896b
 80088ac:	0800896b 	.word	0x0800896b
 80088b0:	0800896b 	.word	0x0800896b
 80088b4:	0800896b 	.word	0x0800896b
 80088b8:	0800896b 	.word	0x0800896b
 80088bc:	08008937 	.word	0x08008937
 80088c0:	0800896b 	.word	0x0800896b
 80088c4:	0800896b 	.word	0x0800896b
 80088c8:	0800896b 	.word	0x0800896b
 80088cc:	0800896b 	.word	0x0800896b
 80088d0:	0800896b 	.word	0x0800896b
 80088d4:	0800896b 	.word	0x0800896b
 80088d8:	0800896b 	.word	0x0800896b
 80088dc:	0800896b 	.word	0x0800896b
 80088e0:	0800896b 	.word	0x0800896b
 80088e4:	0800896b 	.word	0x0800896b
 80088e8:	0800896b 	.word	0x0800896b
 80088ec:	0800896b 	.word	0x0800896b
 80088f0:	0800896b 	.word	0x0800896b
 80088f4:	0800896b 	.word	0x0800896b
 80088f8:	0800896b 	.word	0x0800896b
 80088fc:	0800895d 	.word	0x0800895d
 8008900:	2b40      	cmp	r3, #64	@ 0x40
 8008902:	d02e      	beq.n	8008962 <UART_SetConfig+0xa36>
 8008904:	e031      	b.n	800896a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008906:	f7fc f8cf 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
 800890a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800890c:	e033      	b.n	8008976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800890e:	f7fc f8e1 	bl	8004ad4 <HAL_RCC_GetPCLK2Freq>
 8008912:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008914:	e02f      	b.n	8008976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800891a:	4618      	mov	r0, r3
 800891c:	f7fd fb10 	bl	8005f40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008924:	e027      	b.n	8008976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008926:	f107 0318 	add.w	r3, r7, #24
 800892a:	4618      	mov	r0, r3
 800892c:	f7fd fc5c 	bl	80061e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008934:	e01f      	b.n	8008976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008936:	4b2d      	ldr	r3, [pc, #180]	@ (80089ec <UART_SetConfig+0xac0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 0320 	and.w	r3, r3, #32
 800893e:	2b00      	cmp	r3, #0
 8008940:	d009      	beq.n	8008956 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008942:	4b2a      	ldr	r3, [pc, #168]	@ (80089ec <UART_SetConfig+0xac0>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	08db      	lsrs	r3, r3, #3
 8008948:	f003 0303 	and.w	r3, r3, #3
 800894c:	4a28      	ldr	r2, [pc, #160]	@ (80089f0 <UART_SetConfig+0xac4>)
 800894e:	fa22 f303 	lsr.w	r3, r2, r3
 8008952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008954:	e00f      	b.n	8008976 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008956:	4b26      	ldr	r3, [pc, #152]	@ (80089f0 <UART_SetConfig+0xac4>)
 8008958:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800895a:	e00c      	b.n	8008976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800895c:	4b25      	ldr	r3, [pc, #148]	@ (80089f4 <UART_SetConfig+0xac8>)
 800895e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008960:	e009      	b.n	8008976 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008962:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008968:	e005      	b.n	8008976 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800896a:	2300      	movs	r3, #0
 800896c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008974:	bf00      	nop
    }

    if (pclk != 0U)
 8008976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d021      	beq.n	80089c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008980:	4a1d      	ldr	r2, [pc, #116]	@ (80089f8 <UART_SetConfig+0xacc>)
 8008982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008986:	461a      	mov	r2, r3
 8008988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800898a:	fbb3 f2f2 	udiv	r2, r3, r2
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	085b      	lsrs	r3, r3, #1
 8008994:	441a      	add	r2, r3
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	fbb2 f3f3 	udiv	r3, r2, r3
 800899e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a2:	2b0f      	cmp	r3, #15
 80089a4:	d909      	bls.n	80089ba <UART_SetConfig+0xa8e>
 80089a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089ac:	d205      	bcs.n	80089ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b0:	b29a      	uxth	r2, r3
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	60da      	str	r2, [r3, #12]
 80089b8:	e002      	b.n	80089c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	2200      	movs	r2, #0
 80089d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	2200      	movs	r2, #0
 80089da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80089dc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3748      	adds	r7, #72	@ 0x48
 80089e4:	46bd      	mov	sp, r7
 80089e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089ea:	bf00      	nop
 80089ec:	58024400 	.word	0x58024400
 80089f0:	03d09000 	.word	0x03d09000
 80089f4:	003d0900 	.word	0x003d0900
 80089f8:	0800a008 	.word	0x0800a008

080089fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a08:	f003 0308 	and.w	r3, r3, #8
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00a      	beq.n	8008a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00a      	beq.n	8008a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a4c:	f003 0302 	and.w	r3, r3, #2
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d00a      	beq.n	8008a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a6e:	f003 0304 	and.w	r3, r3, #4
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00a      	beq.n	8008a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a90:	f003 0310 	and.w	r3, r3, #16
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00a      	beq.n	8008aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d00a      	beq.n	8008ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	430a      	orrs	r2, r1
 8008ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d01a      	beq.n	8008b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	430a      	orrs	r2, r1
 8008af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008afa:	d10a      	bne.n	8008b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	430a      	orrs	r2, r1
 8008b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00a      	beq.n	8008b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	430a      	orrs	r2, r1
 8008b32:	605a      	str	r2, [r3, #4]
  }
}
 8008b34:	bf00      	nop
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b098      	sub	sp, #96	@ 0x60
 8008b44:	af02      	add	r7, sp, #8
 8008b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b50:	f7f9 f878 	bl	8001c44 <HAL_GetTick>
 8008b54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0308 	and.w	r3, r3, #8
 8008b60:	2b08      	cmp	r3, #8
 8008b62:	d12f      	bne.n	8008bc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f88e 	bl	8008c94 <UART_WaitOnFlagUntilTimeout>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d022      	beq.n	8008bc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b86:	e853 3f00 	ldrex	r3, [r3]
 8008b8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b92:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	461a      	mov	r2, r3
 8008b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008ba2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ba4:	e841 2300 	strex	r3, r2, [r1]
 8008ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1e6      	bne.n	8008b7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e063      	b.n	8008c8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0304 	and.w	r3, r3, #4
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	d149      	bne.n	8008c66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bd2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f857 	bl	8008c94 <UART_WaitOnFlagUntilTimeout>
 8008be6:	4603      	mov	r3, r0
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d03c      	beq.n	8008c66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
 8008bfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e6      	bne.n	8008bec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3308      	adds	r3, #8
 8008c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	e853 3f00 	ldrex	r3, [r3]
 8008c2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f023 0301 	bic.w	r3, r3, #1
 8008c34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	3308      	adds	r3, #8
 8008c3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c3e:	61fa      	str	r2, [r7, #28]
 8008c40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c42:	69b9      	ldr	r1, [r7, #24]
 8008c44:	69fa      	ldr	r2, [r7, #28]
 8008c46:	e841 2300 	strex	r3, r2, [r1]
 8008c4a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1e5      	bne.n	8008c1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2220      	movs	r2, #32
 8008c56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e012      	b.n	8008c8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2220      	movs	r2, #32
 8008c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2200      	movs	r2, #0
 8008c86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c8a:	2300      	movs	r3, #0
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3758      	adds	r7, #88	@ 0x58
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	603b      	str	r3, [r7, #0]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ca4:	e04f      	b.n	8008d46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cac:	d04b      	beq.n	8008d46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cae:	f7f8 ffc9 	bl	8001c44 <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d302      	bcc.n	8008cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d101      	bne.n	8008cc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e04e      	b.n	8008d66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0304 	and.w	r3, r3, #4
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d037      	beq.n	8008d46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008cd6:	68bb      	ldr	r3, [r7, #8]
 8008cd8:	2b80      	cmp	r3, #128	@ 0x80
 8008cda:	d034      	beq.n	8008d46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	2b40      	cmp	r3, #64	@ 0x40
 8008ce0:	d031      	beq.n	8008d46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	69db      	ldr	r3, [r3, #28]
 8008ce8:	f003 0308 	and.w	r3, r3, #8
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d110      	bne.n	8008d12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2208      	movs	r2, #8
 8008cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cf8:	68f8      	ldr	r0, [r7, #12]
 8008cfa:	f000 f839 	bl	8008d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2208      	movs	r2, #8
 8008d02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e029      	b.n	8008d66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d20:	d111      	bne.n	8008d46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d2c:	68f8      	ldr	r0, [r7, #12]
 8008d2e:	f000 f81f 	bl	8008d70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e00f      	b.n	8008d66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	69da      	ldr	r2, [r3, #28]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	429a      	cmp	r2, r3
 8008d54:	bf0c      	ite	eq
 8008d56:	2301      	moveq	r3, #1
 8008d58:	2300      	movne	r3, #0
 8008d5a:	b2db      	uxtb	r3, r3
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	79fb      	ldrb	r3, [r7, #7]
 8008d60:	429a      	cmp	r2, r3
 8008d62:	d0a0      	beq.n	8008ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
	...

08008d70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b095      	sub	sp, #84	@ 0x54
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d80:	e853 3f00 	ldrex	r3, [r3]
 8008d84:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	461a      	mov	r2, r3
 8008d94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d96:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d98:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d9c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d9e:	e841 2300 	strex	r3, r2, [r1]
 8008da2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d1e6      	bne.n	8008d78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	3308      	adds	r3, #8
 8008db0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db2:	6a3b      	ldr	r3, [r7, #32]
 8008db4:	e853 3f00 	ldrex	r3, [r3]
 8008db8:	61fb      	str	r3, [r7, #28]
   return(result);
 8008dba:	69fa      	ldr	r2, [r7, #28]
 8008dbc:	4b1e      	ldr	r3, [pc, #120]	@ (8008e38 <UART_EndRxTransfer+0xc8>)
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dd2:	e841 2300 	strex	r3, r2, [r1]
 8008dd6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1e5      	bne.n	8008daa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d118      	bne.n	8008e18 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	f023 0310 	bic.w	r3, r3, #16
 8008dfa:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	461a      	mov	r2, r3
 8008e02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e04:	61bb      	str	r3, [r7, #24]
 8008e06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6979      	ldr	r1, [r7, #20]
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	613b      	str	r3, [r7, #16]
   return(result);
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e6      	bne.n	8008de6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008e2c:	bf00      	nop
 8008e2e:	3754      	adds	r7, #84	@ 0x54
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	effffffe 	.word	0xeffffffe

08008e3c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d101      	bne.n	8008e52 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e4e:	2302      	movs	r3, #2
 8008e50:	e027      	b.n	8008ea2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2224      	movs	r2, #36	@ 0x24
 8008e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f022 0201 	bic.w	r2, r2, #1
 8008e78:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008e80:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr

08008eae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008ebe:	2b01      	cmp	r3, #1
 8008ec0:	d101      	bne.n	8008ec6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	e02d      	b.n	8008f22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2224      	movs	r2, #36	@ 0x24
 8008ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f022 0201 	bic.w	r2, r2, #1
 8008eec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	430a      	orrs	r2, r1
 8008f00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f000 f850 	bl	8008fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2220      	movs	r2, #32
 8008f14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d101      	bne.n	8008f42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f3e:	2302      	movs	r3, #2
 8008f40:	e02d      	b.n	8008f9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2224      	movs	r2, #36	@ 0x24
 8008f4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f022 0201 	bic.w	r2, r2, #1
 8008f68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	683a      	ldr	r2, [r7, #0]
 8008f7a:	430a      	orrs	r2, r1
 8008f7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f812 	bl	8008fa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2220      	movs	r2, #32
 8008f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
	...

08008fa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b085      	sub	sp, #20
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d108      	bne.n	8008fca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fc8:	e031      	b.n	800902e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fca:	2310      	movs	r3, #16
 8008fcc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fce:	2310      	movs	r3, #16
 8008fd0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	0e5b      	lsrs	r3, r3, #25
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	f003 0307 	and.w	r3, r3, #7
 8008fe0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	689b      	ldr	r3, [r3, #8]
 8008fe8:	0f5b      	lsrs	r3, r3, #29
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 0307 	and.w	r3, r3, #7
 8008ff0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ff2:	7bbb      	ldrb	r3, [r7, #14]
 8008ff4:	7b3a      	ldrb	r2, [r7, #12]
 8008ff6:	4911      	ldr	r1, [pc, #68]	@ (800903c <UARTEx_SetNbDataToProcess+0x94>)
 8008ff8:	5c8a      	ldrb	r2, [r1, r2]
 8008ffa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ffe:	7b3a      	ldrb	r2, [r7, #12]
 8009000:	490f      	ldr	r1, [pc, #60]	@ (8009040 <UARTEx_SetNbDataToProcess+0x98>)
 8009002:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009004:	fb93 f3f2 	sdiv	r3, r3, r2
 8009008:	b29a      	uxth	r2, r3
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009010:	7bfb      	ldrb	r3, [r7, #15]
 8009012:	7b7a      	ldrb	r2, [r7, #13]
 8009014:	4909      	ldr	r1, [pc, #36]	@ (800903c <UARTEx_SetNbDataToProcess+0x94>)
 8009016:	5c8a      	ldrb	r2, [r1, r2]
 8009018:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800901c:	7b7a      	ldrb	r2, [r7, #13]
 800901e:	4908      	ldr	r1, [pc, #32]	@ (8009040 <UARTEx_SetNbDataToProcess+0x98>)
 8009020:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009022:	fb93 f3f2 	sdiv	r3, r3, r2
 8009026:	b29a      	uxth	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800902e:	bf00      	nop
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	0800a020 	.word	0x0800a020
 8009040:	0800a028 	.word	0x0800a028

08009044 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009044:	b084      	sub	sp, #16
 8009046:	b580      	push	{r7, lr}
 8009048:	b084      	sub	sp, #16
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	f107 001c 	add.w	r0, r7, #28
 8009052:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009056:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800905a:	2b01      	cmp	r3, #1
 800905c:	d121      	bne.n	80090a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009062:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	4b2c      	ldr	r3, [pc, #176]	@ (8009120 <USB_CoreInit+0xdc>)
 8009070:	4013      	ands	r3, r2
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	68db      	ldr	r3, [r3, #12]
 800907a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009082:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009086:	2b01      	cmp	r3, #1
 8009088:	d105      	bne.n	8009096 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 faaa 	bl	80095f0 <USB_CoreReset>
 800909c:	4603      	mov	r3, r0
 800909e:	73fb      	strb	r3, [r7, #15]
 80090a0:	e01b      	b.n	80090da <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68db      	ldr	r3, [r3, #12]
 80090a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa9e 	bl	80095f0 <USB_CoreReset>
 80090b4:	4603      	mov	r3, r0
 80090b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80090b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d106      	bne.n	80090ce <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80090cc:	e005      	b.n	80090da <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80090da:	7fbb      	ldrb	r3, [r7, #30]
 80090dc:	2b01      	cmp	r3, #1
 80090de:	d116      	bne.n	800910e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80090ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009124 <USB_CoreInit+0xe0>)
 80090f0:	4313      	orrs	r3, r2
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f043 0206 	orr.w	r2, r3, #6
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f043 0220 	orr.w	r2, r3, #32
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800910e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3710      	adds	r7, #16
 8009114:	46bd      	mov	sp, r7
 8009116:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800911a:	b004      	add	sp, #16
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	ffbdffbf 	.word	0xffbdffbf
 8009124:	03ee0000 	.word	0x03ee0000

08009128 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f023 0201 	bic.w	r2, r3, #1
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800913c:	2300      	movs	r3, #0
}
 800913e:	4618      	mov	r0, r3
 8009140:	370c      	adds	r7, #12
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	460b      	mov	r3, r1
 8009154:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009156:	2300      	movs	r3, #0
 8009158:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009166:	78fb      	ldrb	r3, [r7, #3]
 8009168:	2b01      	cmp	r3, #1
 800916a:	d115      	bne.n	8009198 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009178:	200a      	movs	r0, #10
 800917a:	f7f8 fd6f 	bl	8001c5c <HAL_Delay>
      ms += 10U;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	330a      	adds	r3, #10
 8009182:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fa25 	bl	80095d4 <USB_GetMode>
 800918a:	4603      	mov	r3, r0
 800918c:	2b01      	cmp	r3, #1
 800918e:	d01e      	beq.n	80091ce <USB_SetCurrentMode+0x84>
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	2bc7      	cmp	r3, #199	@ 0xc7
 8009194:	d9f0      	bls.n	8009178 <USB_SetCurrentMode+0x2e>
 8009196:	e01a      	b.n	80091ce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009198:	78fb      	ldrb	r3, [r7, #3]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d115      	bne.n	80091ca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80091aa:	200a      	movs	r0, #10
 80091ac:	f7f8 fd56 	bl	8001c5c <HAL_Delay>
      ms += 10U;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	330a      	adds	r3, #10
 80091b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fa0c 	bl	80095d4 <USB_GetMode>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d005      	beq.n	80091ce <USB_SetCurrentMode+0x84>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2bc7      	cmp	r3, #199	@ 0xc7
 80091c6:	d9f0      	bls.n	80091aa <USB_SetCurrentMode+0x60>
 80091c8:	e001      	b.n	80091ce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80091ca:	2301      	movs	r3, #1
 80091cc:	e005      	b.n	80091da <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2bc8      	cmp	r3, #200	@ 0xc8
 80091d2:	d101      	bne.n	80091d8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80091d4:	2301      	movs	r3, #1
 80091d6:	e000      	b.n	80091da <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
	...

080091e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091e4:	b084      	sub	sp, #16
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b086      	sub	sp, #24
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80091f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80091fe:	2300      	movs	r3, #0
 8009200:	613b      	str	r3, [r7, #16]
 8009202:	e009      	b.n	8009218 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	3340      	adds	r3, #64	@ 0x40
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	2200      	movs	r2, #0
 8009210:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	3301      	adds	r3, #1
 8009216:	613b      	str	r3, [r7, #16]
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	2b0e      	cmp	r3, #14
 800921c:	d9f2      	bls.n	8009204 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800921e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009222:	2b00      	cmp	r3, #0
 8009224:	d11c      	bne.n	8009260 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	68fa      	ldr	r2, [r7, #12]
 8009230:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009234:	f043 0302 	orr.w	r3, r3, #2
 8009238:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	601a      	str	r2, [r3, #0]
 800925e:	e005      	b.n	800926c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009264:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009272:	461a      	mov	r2, r3
 8009274:	2300      	movs	r3, #0
 8009276:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009278:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800927c:	2b01      	cmp	r3, #1
 800927e:	d10d      	bne.n	800929c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009284:	2b00      	cmp	r3, #0
 8009286:	d104      	bne.n	8009292 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009288:	2100      	movs	r1, #0
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 f968 	bl	8009560 <USB_SetDevSpeed>
 8009290:	e008      	b.n	80092a4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009292:	2101      	movs	r1, #1
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 f963 	bl	8009560 <USB_SetDevSpeed>
 800929a:	e003      	b.n	80092a4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800929c:	2103      	movs	r1, #3
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 f95e 	bl	8009560 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80092a4:	2110      	movs	r1, #16
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f000 f8fa 	bl	80094a0 <USB_FlushTxFifo>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d001      	beq.n	80092b6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
 80092b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f924 	bl	8009504 <USB_FlushRxFifo>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d001      	beq.n	80092c6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80092c2:	2301      	movs	r3, #1
 80092c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092cc:	461a      	mov	r2, r3
 80092ce:	2300      	movs	r3, #0
 80092d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092d8:	461a      	mov	r2, r3
 80092da:	2300      	movs	r3, #0
 80092dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092e4:	461a      	mov	r2, r3
 80092e6:	2300      	movs	r3, #0
 80092e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092ea:	2300      	movs	r3, #0
 80092ec:	613b      	str	r3, [r7, #16]
 80092ee:	e043      	b.n	8009378 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009302:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009306:	d118      	bne.n	800933a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d10a      	bne.n	8009324 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	4413      	add	r3, r2
 8009316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800931a:	461a      	mov	r2, r3
 800931c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009320:	6013      	str	r3, [r2, #0]
 8009322:	e013      	b.n	800934c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009330:	461a      	mov	r2, r3
 8009332:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009336:	6013      	str	r3, [r2, #0]
 8009338:	e008      	b.n	800934c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	015a      	lsls	r2, r3, #5
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	4413      	add	r3, r2
 8009342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009346:	461a      	mov	r2, r3
 8009348:	2300      	movs	r3, #0
 800934a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	015a      	lsls	r2, r3, #5
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	4413      	add	r3, r2
 8009354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009358:	461a      	mov	r2, r3
 800935a:	2300      	movs	r3, #0
 800935c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	015a      	lsls	r2, r3, #5
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4413      	add	r3, r2
 8009366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800936a:	461a      	mov	r2, r3
 800936c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009370:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	3301      	adds	r3, #1
 8009376:	613b      	str	r3, [r7, #16]
 8009378:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800937c:	461a      	mov	r2, r3
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	4293      	cmp	r3, r2
 8009382:	d3b5      	bcc.n	80092f0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009384:	2300      	movs	r3, #0
 8009386:	613b      	str	r3, [r7, #16]
 8009388:	e043      	b.n	8009412 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	4413      	add	r3, r2
 8009392:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800939c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093a0:	d118      	bne.n	80093d4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10a      	bne.n	80093be <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093b4:	461a      	mov	r2, r3
 80093b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80093ba:	6013      	str	r3, [r2, #0]
 80093bc:	e013      	b.n	80093e6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	015a      	lsls	r2, r3, #5
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	4413      	add	r3, r2
 80093c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093ca:	461a      	mov	r2, r3
 80093cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	e008      	b.n	80093e6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e0:	461a      	mov	r2, r3
 80093e2:	2300      	movs	r3, #0
 80093e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	015a      	lsls	r2, r3, #5
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	4413      	add	r3, r2
 80093ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093f2:	461a      	mov	r2, r3
 80093f4:	2300      	movs	r3, #0
 80093f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009404:	461a      	mov	r2, r3
 8009406:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800940a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	3301      	adds	r3, #1
 8009410:	613b      	str	r3, [r7, #16]
 8009412:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009416:	461a      	mov	r2, r3
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	4293      	cmp	r3, r2
 800941c:	d3b5      	bcc.n	800938a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800942c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009430:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2200      	movs	r2, #0
 8009436:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800943e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009440:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009444:	2b00      	cmp	r3, #0
 8009446:	d105      	bne.n	8009454 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	f043 0210 	orr.w	r2, r3, #16
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	699a      	ldr	r2, [r3, #24]
 8009458:	4b0f      	ldr	r3, [pc, #60]	@ (8009498 <USB_DevInit+0x2b4>)
 800945a:	4313      	orrs	r3, r2
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009460:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009464:	2b00      	cmp	r3, #0
 8009466:	d005      	beq.n	8009474 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	f043 0208 	orr.w	r2, r3, #8
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009474:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009478:	2b01      	cmp	r3, #1
 800947a:	d105      	bne.n	8009488 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	699a      	ldr	r2, [r3, #24]
 8009480:	4b06      	ldr	r3, [pc, #24]	@ (800949c <USB_DevInit+0x2b8>)
 8009482:	4313      	orrs	r3, r2
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009488:	7dfb      	ldrb	r3, [r7, #23]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3718      	adds	r7, #24
 800948e:	46bd      	mov	sp, r7
 8009490:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009494:	b004      	add	sp, #16
 8009496:	4770      	bx	lr
 8009498:	803c3800 	.word	0x803c3800
 800949c:	40000004 	.word	0x40000004

080094a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b085      	sub	sp, #20
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3301      	adds	r3, #1
 80094b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094ba:	d901      	bls.n	80094c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80094bc:	2303      	movs	r3, #3
 80094be:	e01b      	b.n	80094f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	daf2      	bge.n	80094ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	019b      	lsls	r3, r3, #6
 80094d0:	f043 0220 	orr.w	r2, r3, #32
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3301      	adds	r3, #1
 80094dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094e4:	d901      	bls.n	80094ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80094e6:	2303      	movs	r3, #3
 80094e8:	e006      	b.n	80094f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	691b      	ldr	r3, [r3, #16]
 80094ee:	f003 0320 	and.w	r3, r3, #32
 80094f2:	2b20      	cmp	r3, #32
 80094f4:	d0f0      	beq.n	80094d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094f6:	2300      	movs	r3, #0
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3714      	adds	r7, #20
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800950c:	2300      	movs	r3, #0
 800950e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	3301      	adds	r3, #1
 8009514:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800951c:	d901      	bls.n	8009522 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e018      	b.n	8009554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	2b00      	cmp	r3, #0
 8009528:	daf2      	bge.n	8009510 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800952a:	2300      	movs	r3, #0
 800952c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2210      	movs	r2, #16
 8009532:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	3301      	adds	r3, #1
 8009538:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009540:	d901      	bls.n	8009546 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e006      	b.n	8009554 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	f003 0310 	and.w	r3, r3, #16
 800954e:	2b10      	cmp	r3, #16
 8009550:	d0f0      	beq.n	8009534 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009552:	2300      	movs	r3, #0
}
 8009554:	4618      	mov	r0, r3
 8009556:	3714      	adds	r7, #20
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009560:	b480      	push	{r7}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	460b      	mov	r3, r1
 800956a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	78fb      	ldrb	r3, [r7, #3]
 800957a:	68f9      	ldr	r1, [r7, #12]
 800957c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009580:	4313      	orrs	r3, r2
 8009582:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009592:	b480      	push	{r7}
 8009594:	b085      	sub	sp, #20
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80095ac:	f023 0303 	bic.w	r3, r3, #3
 80095b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095b8:	685b      	ldr	r3, [r3, #4]
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095c0:	f043 0302 	orr.w	r3, r3, #2
 80095c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	f003 0301 	and.w	r3, r3, #1
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	370c      	adds	r7, #12
 80095e8:	46bd      	mov	sp, r7
 80095ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ee:	4770      	bx	lr

080095f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80095f8:	2300      	movs	r3, #0
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	3301      	adds	r3, #1
 8009600:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009608:	d901      	bls.n	800960e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800960a:	2303      	movs	r3, #3
 800960c:	e01b      	b.n	8009646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	daf2      	bge.n	80095fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	f043 0201 	orr.w	r2, r3, #1
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3301      	adds	r3, #1
 800962a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009632:	d901      	bls.n	8009638 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009634:	2303      	movs	r3, #3
 8009636:	e006      	b.n	8009646 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b01      	cmp	r3, #1
 8009642:	d0f0      	beq.n	8009626 <USB_CoreReset+0x36>

  return HAL_OK;
 8009644:	2300      	movs	r3, #0
}
 8009646:	4618      	mov	r0, r3
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009650:	4770      	bx	lr
	...

08009654 <siprintf>:
 8009654:	b40e      	push	{r1, r2, r3}
 8009656:	b500      	push	{lr}
 8009658:	b09c      	sub	sp, #112	@ 0x70
 800965a:	ab1d      	add	r3, sp, #116	@ 0x74
 800965c:	9002      	str	r0, [sp, #8]
 800965e:	9006      	str	r0, [sp, #24]
 8009660:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009664:	4809      	ldr	r0, [pc, #36]	@ (800968c <siprintf+0x38>)
 8009666:	9107      	str	r1, [sp, #28]
 8009668:	9104      	str	r1, [sp, #16]
 800966a:	4909      	ldr	r1, [pc, #36]	@ (8009690 <siprintf+0x3c>)
 800966c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009670:	9105      	str	r1, [sp, #20]
 8009672:	6800      	ldr	r0, [r0, #0]
 8009674:	9301      	str	r3, [sp, #4]
 8009676:	a902      	add	r1, sp, #8
 8009678:	f000 f994 	bl	80099a4 <_svfiprintf_r>
 800967c:	9b02      	ldr	r3, [sp, #8]
 800967e:	2200      	movs	r2, #0
 8009680:	701a      	strb	r2, [r3, #0]
 8009682:	b01c      	add	sp, #112	@ 0x70
 8009684:	f85d eb04 	ldr.w	lr, [sp], #4
 8009688:	b003      	add	sp, #12
 800968a:	4770      	bx	lr
 800968c:	24000010 	.word	0x24000010
 8009690:	ffff0208 	.word	0xffff0208

08009694 <memset>:
 8009694:	4402      	add	r2, r0
 8009696:	4603      	mov	r3, r0
 8009698:	4293      	cmp	r3, r2
 800969a:	d100      	bne.n	800969e <memset+0xa>
 800969c:	4770      	bx	lr
 800969e:	f803 1b01 	strb.w	r1, [r3], #1
 80096a2:	e7f9      	b.n	8009698 <memset+0x4>

080096a4 <__errno>:
 80096a4:	4b01      	ldr	r3, [pc, #4]	@ (80096ac <__errno+0x8>)
 80096a6:	6818      	ldr	r0, [r3, #0]
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	24000010 	.word	0x24000010

080096b0 <__libc_init_array>:
 80096b0:	b570      	push	{r4, r5, r6, lr}
 80096b2:	4d0d      	ldr	r5, [pc, #52]	@ (80096e8 <__libc_init_array+0x38>)
 80096b4:	4c0d      	ldr	r4, [pc, #52]	@ (80096ec <__libc_init_array+0x3c>)
 80096b6:	1b64      	subs	r4, r4, r5
 80096b8:	10a4      	asrs	r4, r4, #2
 80096ba:	2600      	movs	r6, #0
 80096bc:	42a6      	cmp	r6, r4
 80096be:	d109      	bne.n	80096d4 <__libc_init_array+0x24>
 80096c0:	4d0b      	ldr	r5, [pc, #44]	@ (80096f0 <__libc_init_array+0x40>)
 80096c2:	4c0c      	ldr	r4, [pc, #48]	@ (80096f4 <__libc_init_array+0x44>)
 80096c4:	f000 fc66 	bl	8009f94 <_init>
 80096c8:	1b64      	subs	r4, r4, r5
 80096ca:	10a4      	asrs	r4, r4, #2
 80096cc:	2600      	movs	r6, #0
 80096ce:	42a6      	cmp	r6, r4
 80096d0:	d105      	bne.n	80096de <__libc_init_array+0x2e>
 80096d2:	bd70      	pop	{r4, r5, r6, pc}
 80096d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d8:	4798      	blx	r3
 80096da:	3601      	adds	r6, #1
 80096dc:	e7ee      	b.n	80096bc <__libc_init_array+0xc>
 80096de:	f855 3b04 	ldr.w	r3, [r5], #4
 80096e2:	4798      	blx	r3
 80096e4:	3601      	adds	r6, #1
 80096e6:	e7f2      	b.n	80096ce <__libc_init_array+0x1e>
 80096e8:	0800a06c 	.word	0x0800a06c
 80096ec:	0800a06c 	.word	0x0800a06c
 80096f0:	0800a06c 	.word	0x0800a06c
 80096f4:	0800a070 	.word	0x0800a070

080096f8 <__retarget_lock_acquire_recursive>:
 80096f8:	4770      	bx	lr

080096fa <__retarget_lock_release_recursive>:
 80096fa:	4770      	bx	lr

080096fc <_free_r>:
 80096fc:	b538      	push	{r3, r4, r5, lr}
 80096fe:	4605      	mov	r5, r0
 8009700:	2900      	cmp	r1, #0
 8009702:	d041      	beq.n	8009788 <_free_r+0x8c>
 8009704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009708:	1f0c      	subs	r4, r1, #4
 800970a:	2b00      	cmp	r3, #0
 800970c:	bfb8      	it	lt
 800970e:	18e4      	addlt	r4, r4, r3
 8009710:	f000 f8e0 	bl	80098d4 <__malloc_lock>
 8009714:	4a1d      	ldr	r2, [pc, #116]	@ (800978c <_free_r+0x90>)
 8009716:	6813      	ldr	r3, [r2, #0]
 8009718:	b933      	cbnz	r3, 8009728 <_free_r+0x2c>
 800971a:	6063      	str	r3, [r4, #4]
 800971c:	6014      	str	r4, [r2, #0]
 800971e:	4628      	mov	r0, r5
 8009720:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009724:	f000 b8dc 	b.w	80098e0 <__malloc_unlock>
 8009728:	42a3      	cmp	r3, r4
 800972a:	d908      	bls.n	800973e <_free_r+0x42>
 800972c:	6820      	ldr	r0, [r4, #0]
 800972e:	1821      	adds	r1, r4, r0
 8009730:	428b      	cmp	r3, r1
 8009732:	bf01      	itttt	eq
 8009734:	6819      	ldreq	r1, [r3, #0]
 8009736:	685b      	ldreq	r3, [r3, #4]
 8009738:	1809      	addeq	r1, r1, r0
 800973a:	6021      	streq	r1, [r4, #0]
 800973c:	e7ed      	b.n	800971a <_free_r+0x1e>
 800973e:	461a      	mov	r2, r3
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	b10b      	cbz	r3, 8009748 <_free_r+0x4c>
 8009744:	42a3      	cmp	r3, r4
 8009746:	d9fa      	bls.n	800973e <_free_r+0x42>
 8009748:	6811      	ldr	r1, [r2, #0]
 800974a:	1850      	adds	r0, r2, r1
 800974c:	42a0      	cmp	r0, r4
 800974e:	d10b      	bne.n	8009768 <_free_r+0x6c>
 8009750:	6820      	ldr	r0, [r4, #0]
 8009752:	4401      	add	r1, r0
 8009754:	1850      	adds	r0, r2, r1
 8009756:	4283      	cmp	r3, r0
 8009758:	6011      	str	r1, [r2, #0]
 800975a:	d1e0      	bne.n	800971e <_free_r+0x22>
 800975c:	6818      	ldr	r0, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	6053      	str	r3, [r2, #4]
 8009762:	4408      	add	r0, r1
 8009764:	6010      	str	r0, [r2, #0]
 8009766:	e7da      	b.n	800971e <_free_r+0x22>
 8009768:	d902      	bls.n	8009770 <_free_r+0x74>
 800976a:	230c      	movs	r3, #12
 800976c:	602b      	str	r3, [r5, #0]
 800976e:	e7d6      	b.n	800971e <_free_r+0x22>
 8009770:	6820      	ldr	r0, [r4, #0]
 8009772:	1821      	adds	r1, r4, r0
 8009774:	428b      	cmp	r3, r1
 8009776:	bf04      	itt	eq
 8009778:	6819      	ldreq	r1, [r3, #0]
 800977a:	685b      	ldreq	r3, [r3, #4]
 800977c:	6063      	str	r3, [r4, #4]
 800977e:	bf04      	itt	eq
 8009780:	1809      	addeq	r1, r1, r0
 8009782:	6021      	streq	r1, [r4, #0]
 8009784:	6054      	str	r4, [r2, #4]
 8009786:	e7ca      	b.n	800971e <_free_r+0x22>
 8009788:	bd38      	pop	{r3, r4, r5, pc}
 800978a:	bf00      	nop
 800978c:	24000ab4 	.word	0x24000ab4

08009790 <sbrk_aligned>:
 8009790:	b570      	push	{r4, r5, r6, lr}
 8009792:	4e0f      	ldr	r6, [pc, #60]	@ (80097d0 <sbrk_aligned+0x40>)
 8009794:	460c      	mov	r4, r1
 8009796:	6831      	ldr	r1, [r6, #0]
 8009798:	4605      	mov	r5, r0
 800979a:	b911      	cbnz	r1, 80097a2 <sbrk_aligned+0x12>
 800979c:	f000 fba6 	bl	8009eec <_sbrk_r>
 80097a0:	6030      	str	r0, [r6, #0]
 80097a2:	4621      	mov	r1, r4
 80097a4:	4628      	mov	r0, r5
 80097a6:	f000 fba1 	bl	8009eec <_sbrk_r>
 80097aa:	1c43      	adds	r3, r0, #1
 80097ac:	d103      	bne.n	80097b6 <sbrk_aligned+0x26>
 80097ae:	f04f 34ff 	mov.w	r4, #4294967295
 80097b2:	4620      	mov	r0, r4
 80097b4:	bd70      	pop	{r4, r5, r6, pc}
 80097b6:	1cc4      	adds	r4, r0, #3
 80097b8:	f024 0403 	bic.w	r4, r4, #3
 80097bc:	42a0      	cmp	r0, r4
 80097be:	d0f8      	beq.n	80097b2 <sbrk_aligned+0x22>
 80097c0:	1a21      	subs	r1, r4, r0
 80097c2:	4628      	mov	r0, r5
 80097c4:	f000 fb92 	bl	8009eec <_sbrk_r>
 80097c8:	3001      	adds	r0, #1
 80097ca:	d1f2      	bne.n	80097b2 <sbrk_aligned+0x22>
 80097cc:	e7ef      	b.n	80097ae <sbrk_aligned+0x1e>
 80097ce:	bf00      	nop
 80097d0:	24000ab0 	.word	0x24000ab0

080097d4 <_malloc_r>:
 80097d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d8:	1ccd      	adds	r5, r1, #3
 80097da:	f025 0503 	bic.w	r5, r5, #3
 80097de:	3508      	adds	r5, #8
 80097e0:	2d0c      	cmp	r5, #12
 80097e2:	bf38      	it	cc
 80097e4:	250c      	movcc	r5, #12
 80097e6:	2d00      	cmp	r5, #0
 80097e8:	4606      	mov	r6, r0
 80097ea:	db01      	blt.n	80097f0 <_malloc_r+0x1c>
 80097ec:	42a9      	cmp	r1, r5
 80097ee:	d904      	bls.n	80097fa <_malloc_r+0x26>
 80097f0:	230c      	movs	r3, #12
 80097f2:	6033      	str	r3, [r6, #0]
 80097f4:	2000      	movs	r0, #0
 80097f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80098d0 <_malloc_r+0xfc>
 80097fe:	f000 f869 	bl	80098d4 <__malloc_lock>
 8009802:	f8d8 3000 	ldr.w	r3, [r8]
 8009806:	461c      	mov	r4, r3
 8009808:	bb44      	cbnz	r4, 800985c <_malloc_r+0x88>
 800980a:	4629      	mov	r1, r5
 800980c:	4630      	mov	r0, r6
 800980e:	f7ff ffbf 	bl	8009790 <sbrk_aligned>
 8009812:	1c43      	adds	r3, r0, #1
 8009814:	4604      	mov	r4, r0
 8009816:	d158      	bne.n	80098ca <_malloc_r+0xf6>
 8009818:	f8d8 4000 	ldr.w	r4, [r8]
 800981c:	4627      	mov	r7, r4
 800981e:	2f00      	cmp	r7, #0
 8009820:	d143      	bne.n	80098aa <_malloc_r+0xd6>
 8009822:	2c00      	cmp	r4, #0
 8009824:	d04b      	beq.n	80098be <_malloc_r+0xea>
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	4639      	mov	r1, r7
 800982a:	4630      	mov	r0, r6
 800982c:	eb04 0903 	add.w	r9, r4, r3
 8009830:	f000 fb5c 	bl	8009eec <_sbrk_r>
 8009834:	4581      	cmp	r9, r0
 8009836:	d142      	bne.n	80098be <_malloc_r+0xea>
 8009838:	6821      	ldr	r1, [r4, #0]
 800983a:	1a6d      	subs	r5, r5, r1
 800983c:	4629      	mov	r1, r5
 800983e:	4630      	mov	r0, r6
 8009840:	f7ff ffa6 	bl	8009790 <sbrk_aligned>
 8009844:	3001      	adds	r0, #1
 8009846:	d03a      	beq.n	80098be <_malloc_r+0xea>
 8009848:	6823      	ldr	r3, [r4, #0]
 800984a:	442b      	add	r3, r5
 800984c:	6023      	str	r3, [r4, #0]
 800984e:	f8d8 3000 	ldr.w	r3, [r8]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	bb62      	cbnz	r2, 80098b0 <_malloc_r+0xdc>
 8009856:	f8c8 7000 	str.w	r7, [r8]
 800985a:	e00f      	b.n	800987c <_malloc_r+0xa8>
 800985c:	6822      	ldr	r2, [r4, #0]
 800985e:	1b52      	subs	r2, r2, r5
 8009860:	d420      	bmi.n	80098a4 <_malloc_r+0xd0>
 8009862:	2a0b      	cmp	r2, #11
 8009864:	d917      	bls.n	8009896 <_malloc_r+0xc2>
 8009866:	1961      	adds	r1, r4, r5
 8009868:	42a3      	cmp	r3, r4
 800986a:	6025      	str	r5, [r4, #0]
 800986c:	bf18      	it	ne
 800986e:	6059      	strne	r1, [r3, #4]
 8009870:	6863      	ldr	r3, [r4, #4]
 8009872:	bf08      	it	eq
 8009874:	f8c8 1000 	streq.w	r1, [r8]
 8009878:	5162      	str	r2, [r4, r5]
 800987a:	604b      	str	r3, [r1, #4]
 800987c:	4630      	mov	r0, r6
 800987e:	f000 f82f 	bl	80098e0 <__malloc_unlock>
 8009882:	f104 000b 	add.w	r0, r4, #11
 8009886:	1d23      	adds	r3, r4, #4
 8009888:	f020 0007 	bic.w	r0, r0, #7
 800988c:	1ac2      	subs	r2, r0, r3
 800988e:	bf1c      	itt	ne
 8009890:	1a1b      	subne	r3, r3, r0
 8009892:	50a3      	strne	r3, [r4, r2]
 8009894:	e7af      	b.n	80097f6 <_malloc_r+0x22>
 8009896:	6862      	ldr	r2, [r4, #4]
 8009898:	42a3      	cmp	r3, r4
 800989a:	bf0c      	ite	eq
 800989c:	f8c8 2000 	streq.w	r2, [r8]
 80098a0:	605a      	strne	r2, [r3, #4]
 80098a2:	e7eb      	b.n	800987c <_malloc_r+0xa8>
 80098a4:	4623      	mov	r3, r4
 80098a6:	6864      	ldr	r4, [r4, #4]
 80098a8:	e7ae      	b.n	8009808 <_malloc_r+0x34>
 80098aa:	463c      	mov	r4, r7
 80098ac:	687f      	ldr	r7, [r7, #4]
 80098ae:	e7b6      	b.n	800981e <_malloc_r+0x4a>
 80098b0:	461a      	mov	r2, r3
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	42a3      	cmp	r3, r4
 80098b6:	d1fb      	bne.n	80098b0 <_malloc_r+0xdc>
 80098b8:	2300      	movs	r3, #0
 80098ba:	6053      	str	r3, [r2, #4]
 80098bc:	e7de      	b.n	800987c <_malloc_r+0xa8>
 80098be:	230c      	movs	r3, #12
 80098c0:	6033      	str	r3, [r6, #0]
 80098c2:	4630      	mov	r0, r6
 80098c4:	f000 f80c 	bl	80098e0 <__malloc_unlock>
 80098c8:	e794      	b.n	80097f4 <_malloc_r+0x20>
 80098ca:	6005      	str	r5, [r0, #0]
 80098cc:	e7d6      	b.n	800987c <_malloc_r+0xa8>
 80098ce:	bf00      	nop
 80098d0:	24000ab4 	.word	0x24000ab4

080098d4 <__malloc_lock>:
 80098d4:	4801      	ldr	r0, [pc, #4]	@ (80098dc <__malloc_lock+0x8>)
 80098d6:	f7ff bf0f 	b.w	80096f8 <__retarget_lock_acquire_recursive>
 80098da:	bf00      	nop
 80098dc:	24000aac 	.word	0x24000aac

080098e0 <__malloc_unlock>:
 80098e0:	4801      	ldr	r0, [pc, #4]	@ (80098e8 <__malloc_unlock+0x8>)
 80098e2:	f7ff bf0a 	b.w	80096fa <__retarget_lock_release_recursive>
 80098e6:	bf00      	nop
 80098e8:	24000aac 	.word	0x24000aac

080098ec <__ssputs_r>:
 80098ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098f0:	688e      	ldr	r6, [r1, #8]
 80098f2:	461f      	mov	r7, r3
 80098f4:	42be      	cmp	r6, r7
 80098f6:	680b      	ldr	r3, [r1, #0]
 80098f8:	4682      	mov	sl, r0
 80098fa:	460c      	mov	r4, r1
 80098fc:	4690      	mov	r8, r2
 80098fe:	d82d      	bhi.n	800995c <__ssputs_r+0x70>
 8009900:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009904:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009908:	d026      	beq.n	8009958 <__ssputs_r+0x6c>
 800990a:	6965      	ldr	r5, [r4, #20]
 800990c:	6909      	ldr	r1, [r1, #16]
 800990e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009912:	eba3 0901 	sub.w	r9, r3, r1
 8009916:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800991a:	1c7b      	adds	r3, r7, #1
 800991c:	444b      	add	r3, r9
 800991e:	106d      	asrs	r5, r5, #1
 8009920:	429d      	cmp	r5, r3
 8009922:	bf38      	it	cc
 8009924:	461d      	movcc	r5, r3
 8009926:	0553      	lsls	r3, r2, #21
 8009928:	d527      	bpl.n	800997a <__ssputs_r+0x8e>
 800992a:	4629      	mov	r1, r5
 800992c:	f7ff ff52 	bl	80097d4 <_malloc_r>
 8009930:	4606      	mov	r6, r0
 8009932:	b360      	cbz	r0, 800998e <__ssputs_r+0xa2>
 8009934:	6921      	ldr	r1, [r4, #16]
 8009936:	464a      	mov	r2, r9
 8009938:	f000 fae8 	bl	8009f0c <memcpy>
 800993c:	89a3      	ldrh	r3, [r4, #12]
 800993e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009942:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009946:	81a3      	strh	r3, [r4, #12]
 8009948:	6126      	str	r6, [r4, #16]
 800994a:	6165      	str	r5, [r4, #20]
 800994c:	444e      	add	r6, r9
 800994e:	eba5 0509 	sub.w	r5, r5, r9
 8009952:	6026      	str	r6, [r4, #0]
 8009954:	60a5      	str	r5, [r4, #8]
 8009956:	463e      	mov	r6, r7
 8009958:	42be      	cmp	r6, r7
 800995a:	d900      	bls.n	800995e <__ssputs_r+0x72>
 800995c:	463e      	mov	r6, r7
 800995e:	6820      	ldr	r0, [r4, #0]
 8009960:	4632      	mov	r2, r6
 8009962:	4641      	mov	r1, r8
 8009964:	f000 faa8 	bl	8009eb8 <memmove>
 8009968:	68a3      	ldr	r3, [r4, #8]
 800996a:	1b9b      	subs	r3, r3, r6
 800996c:	60a3      	str	r3, [r4, #8]
 800996e:	6823      	ldr	r3, [r4, #0]
 8009970:	4433      	add	r3, r6
 8009972:	6023      	str	r3, [r4, #0]
 8009974:	2000      	movs	r0, #0
 8009976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800997a:	462a      	mov	r2, r5
 800997c:	f000 fad4 	bl	8009f28 <_realloc_r>
 8009980:	4606      	mov	r6, r0
 8009982:	2800      	cmp	r0, #0
 8009984:	d1e0      	bne.n	8009948 <__ssputs_r+0x5c>
 8009986:	6921      	ldr	r1, [r4, #16]
 8009988:	4650      	mov	r0, sl
 800998a:	f7ff feb7 	bl	80096fc <_free_r>
 800998e:	230c      	movs	r3, #12
 8009990:	f8ca 3000 	str.w	r3, [sl]
 8009994:	89a3      	ldrh	r3, [r4, #12]
 8009996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800999a:	81a3      	strh	r3, [r4, #12]
 800999c:	f04f 30ff 	mov.w	r0, #4294967295
 80099a0:	e7e9      	b.n	8009976 <__ssputs_r+0x8a>
	...

080099a4 <_svfiprintf_r>:
 80099a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a8:	4698      	mov	r8, r3
 80099aa:	898b      	ldrh	r3, [r1, #12]
 80099ac:	061b      	lsls	r3, r3, #24
 80099ae:	b09d      	sub	sp, #116	@ 0x74
 80099b0:	4607      	mov	r7, r0
 80099b2:	460d      	mov	r5, r1
 80099b4:	4614      	mov	r4, r2
 80099b6:	d510      	bpl.n	80099da <_svfiprintf_r+0x36>
 80099b8:	690b      	ldr	r3, [r1, #16]
 80099ba:	b973      	cbnz	r3, 80099da <_svfiprintf_r+0x36>
 80099bc:	2140      	movs	r1, #64	@ 0x40
 80099be:	f7ff ff09 	bl	80097d4 <_malloc_r>
 80099c2:	6028      	str	r0, [r5, #0]
 80099c4:	6128      	str	r0, [r5, #16]
 80099c6:	b930      	cbnz	r0, 80099d6 <_svfiprintf_r+0x32>
 80099c8:	230c      	movs	r3, #12
 80099ca:	603b      	str	r3, [r7, #0]
 80099cc:	f04f 30ff 	mov.w	r0, #4294967295
 80099d0:	b01d      	add	sp, #116	@ 0x74
 80099d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d6:	2340      	movs	r3, #64	@ 0x40
 80099d8:	616b      	str	r3, [r5, #20]
 80099da:	2300      	movs	r3, #0
 80099dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80099de:	2320      	movs	r3, #32
 80099e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80099e8:	2330      	movs	r3, #48	@ 0x30
 80099ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b88 <_svfiprintf_r+0x1e4>
 80099ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099f2:	f04f 0901 	mov.w	r9, #1
 80099f6:	4623      	mov	r3, r4
 80099f8:	469a      	mov	sl, r3
 80099fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099fe:	b10a      	cbz	r2, 8009a04 <_svfiprintf_r+0x60>
 8009a00:	2a25      	cmp	r2, #37	@ 0x25
 8009a02:	d1f9      	bne.n	80099f8 <_svfiprintf_r+0x54>
 8009a04:	ebba 0b04 	subs.w	fp, sl, r4
 8009a08:	d00b      	beq.n	8009a22 <_svfiprintf_r+0x7e>
 8009a0a:	465b      	mov	r3, fp
 8009a0c:	4622      	mov	r2, r4
 8009a0e:	4629      	mov	r1, r5
 8009a10:	4638      	mov	r0, r7
 8009a12:	f7ff ff6b 	bl	80098ec <__ssputs_r>
 8009a16:	3001      	adds	r0, #1
 8009a18:	f000 80a7 	beq.w	8009b6a <_svfiprintf_r+0x1c6>
 8009a1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a1e:	445a      	add	r2, fp
 8009a20:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a22:	f89a 3000 	ldrb.w	r3, [sl]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f000 809f 	beq.w	8009b6a <_svfiprintf_r+0x1c6>
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a36:	f10a 0a01 	add.w	sl, sl, #1
 8009a3a:	9304      	str	r3, [sp, #16]
 8009a3c:	9307      	str	r3, [sp, #28]
 8009a3e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a42:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a44:	4654      	mov	r4, sl
 8009a46:	2205      	movs	r2, #5
 8009a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a4c:	484e      	ldr	r0, [pc, #312]	@ (8009b88 <_svfiprintf_r+0x1e4>)
 8009a4e:	f7f6 fc4f 	bl	80002f0 <memchr>
 8009a52:	9a04      	ldr	r2, [sp, #16]
 8009a54:	b9d8      	cbnz	r0, 8009a8e <_svfiprintf_r+0xea>
 8009a56:	06d0      	lsls	r0, r2, #27
 8009a58:	bf44      	itt	mi
 8009a5a:	2320      	movmi	r3, #32
 8009a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a60:	0711      	lsls	r1, r2, #28
 8009a62:	bf44      	itt	mi
 8009a64:	232b      	movmi	r3, #43	@ 0x2b
 8009a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a6a:	f89a 3000 	ldrb.w	r3, [sl]
 8009a6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a70:	d015      	beq.n	8009a9e <_svfiprintf_r+0xfa>
 8009a72:	9a07      	ldr	r2, [sp, #28]
 8009a74:	4654      	mov	r4, sl
 8009a76:	2000      	movs	r0, #0
 8009a78:	f04f 0c0a 	mov.w	ip, #10
 8009a7c:	4621      	mov	r1, r4
 8009a7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a82:	3b30      	subs	r3, #48	@ 0x30
 8009a84:	2b09      	cmp	r3, #9
 8009a86:	d94b      	bls.n	8009b20 <_svfiprintf_r+0x17c>
 8009a88:	b1b0      	cbz	r0, 8009ab8 <_svfiprintf_r+0x114>
 8009a8a:	9207      	str	r2, [sp, #28]
 8009a8c:	e014      	b.n	8009ab8 <_svfiprintf_r+0x114>
 8009a8e:	eba0 0308 	sub.w	r3, r0, r8
 8009a92:	fa09 f303 	lsl.w	r3, r9, r3
 8009a96:	4313      	orrs	r3, r2
 8009a98:	9304      	str	r3, [sp, #16]
 8009a9a:	46a2      	mov	sl, r4
 8009a9c:	e7d2      	b.n	8009a44 <_svfiprintf_r+0xa0>
 8009a9e:	9b03      	ldr	r3, [sp, #12]
 8009aa0:	1d19      	adds	r1, r3, #4
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	9103      	str	r1, [sp, #12]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	bfbb      	ittet	lt
 8009aaa:	425b      	neglt	r3, r3
 8009aac:	f042 0202 	orrlt.w	r2, r2, #2
 8009ab0:	9307      	strge	r3, [sp, #28]
 8009ab2:	9307      	strlt	r3, [sp, #28]
 8009ab4:	bfb8      	it	lt
 8009ab6:	9204      	strlt	r2, [sp, #16]
 8009ab8:	7823      	ldrb	r3, [r4, #0]
 8009aba:	2b2e      	cmp	r3, #46	@ 0x2e
 8009abc:	d10a      	bne.n	8009ad4 <_svfiprintf_r+0x130>
 8009abe:	7863      	ldrb	r3, [r4, #1]
 8009ac0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ac2:	d132      	bne.n	8009b2a <_svfiprintf_r+0x186>
 8009ac4:	9b03      	ldr	r3, [sp, #12]
 8009ac6:	1d1a      	adds	r2, r3, #4
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	9203      	str	r2, [sp, #12]
 8009acc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ad0:	3402      	adds	r4, #2
 8009ad2:	9305      	str	r3, [sp, #20]
 8009ad4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009b98 <_svfiprintf_r+0x1f4>
 8009ad8:	7821      	ldrb	r1, [r4, #0]
 8009ada:	2203      	movs	r2, #3
 8009adc:	4650      	mov	r0, sl
 8009ade:	f7f6 fc07 	bl	80002f0 <memchr>
 8009ae2:	b138      	cbz	r0, 8009af4 <_svfiprintf_r+0x150>
 8009ae4:	9b04      	ldr	r3, [sp, #16]
 8009ae6:	eba0 000a 	sub.w	r0, r0, sl
 8009aea:	2240      	movs	r2, #64	@ 0x40
 8009aec:	4082      	lsls	r2, r0
 8009aee:	4313      	orrs	r3, r2
 8009af0:	3401      	adds	r4, #1
 8009af2:	9304      	str	r3, [sp, #16]
 8009af4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009af8:	4824      	ldr	r0, [pc, #144]	@ (8009b8c <_svfiprintf_r+0x1e8>)
 8009afa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009afe:	2206      	movs	r2, #6
 8009b00:	f7f6 fbf6 	bl	80002f0 <memchr>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d036      	beq.n	8009b76 <_svfiprintf_r+0x1d2>
 8009b08:	4b21      	ldr	r3, [pc, #132]	@ (8009b90 <_svfiprintf_r+0x1ec>)
 8009b0a:	bb1b      	cbnz	r3, 8009b54 <_svfiprintf_r+0x1b0>
 8009b0c:	9b03      	ldr	r3, [sp, #12]
 8009b0e:	3307      	adds	r3, #7
 8009b10:	f023 0307 	bic.w	r3, r3, #7
 8009b14:	3308      	adds	r3, #8
 8009b16:	9303      	str	r3, [sp, #12]
 8009b18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b1a:	4433      	add	r3, r6
 8009b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b1e:	e76a      	b.n	80099f6 <_svfiprintf_r+0x52>
 8009b20:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b24:	460c      	mov	r4, r1
 8009b26:	2001      	movs	r0, #1
 8009b28:	e7a8      	b.n	8009a7c <_svfiprintf_r+0xd8>
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	3401      	adds	r4, #1
 8009b2e:	9305      	str	r3, [sp, #20]
 8009b30:	4619      	mov	r1, r3
 8009b32:	f04f 0c0a 	mov.w	ip, #10
 8009b36:	4620      	mov	r0, r4
 8009b38:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b3c:	3a30      	subs	r2, #48	@ 0x30
 8009b3e:	2a09      	cmp	r2, #9
 8009b40:	d903      	bls.n	8009b4a <_svfiprintf_r+0x1a6>
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d0c6      	beq.n	8009ad4 <_svfiprintf_r+0x130>
 8009b46:	9105      	str	r1, [sp, #20]
 8009b48:	e7c4      	b.n	8009ad4 <_svfiprintf_r+0x130>
 8009b4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b4e:	4604      	mov	r4, r0
 8009b50:	2301      	movs	r3, #1
 8009b52:	e7f0      	b.n	8009b36 <_svfiprintf_r+0x192>
 8009b54:	ab03      	add	r3, sp, #12
 8009b56:	9300      	str	r3, [sp, #0]
 8009b58:	462a      	mov	r2, r5
 8009b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8009b94 <_svfiprintf_r+0x1f0>)
 8009b5c:	a904      	add	r1, sp, #16
 8009b5e:	4638      	mov	r0, r7
 8009b60:	f3af 8000 	nop.w
 8009b64:	1c42      	adds	r2, r0, #1
 8009b66:	4606      	mov	r6, r0
 8009b68:	d1d6      	bne.n	8009b18 <_svfiprintf_r+0x174>
 8009b6a:	89ab      	ldrh	r3, [r5, #12]
 8009b6c:	065b      	lsls	r3, r3, #25
 8009b6e:	f53f af2d 	bmi.w	80099cc <_svfiprintf_r+0x28>
 8009b72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b74:	e72c      	b.n	80099d0 <_svfiprintf_r+0x2c>
 8009b76:	ab03      	add	r3, sp, #12
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	4b05      	ldr	r3, [pc, #20]	@ (8009b94 <_svfiprintf_r+0x1f0>)
 8009b7e:	a904      	add	r1, sp, #16
 8009b80:	4638      	mov	r0, r7
 8009b82:	f000 f879 	bl	8009c78 <_printf_i>
 8009b86:	e7ed      	b.n	8009b64 <_svfiprintf_r+0x1c0>
 8009b88:	0800a030 	.word	0x0800a030
 8009b8c:	0800a03a 	.word	0x0800a03a
 8009b90:	00000000 	.word	0x00000000
 8009b94:	080098ed 	.word	0x080098ed
 8009b98:	0800a036 	.word	0x0800a036

08009b9c <_printf_common>:
 8009b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba0:	4616      	mov	r6, r2
 8009ba2:	4698      	mov	r8, r3
 8009ba4:	688a      	ldr	r2, [r1, #8]
 8009ba6:	690b      	ldr	r3, [r1, #16]
 8009ba8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bac:	4293      	cmp	r3, r2
 8009bae:	bfb8      	it	lt
 8009bb0:	4613      	movlt	r3, r2
 8009bb2:	6033      	str	r3, [r6, #0]
 8009bb4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009bb8:	4607      	mov	r7, r0
 8009bba:	460c      	mov	r4, r1
 8009bbc:	b10a      	cbz	r2, 8009bc2 <_printf_common+0x26>
 8009bbe:	3301      	adds	r3, #1
 8009bc0:	6033      	str	r3, [r6, #0]
 8009bc2:	6823      	ldr	r3, [r4, #0]
 8009bc4:	0699      	lsls	r1, r3, #26
 8009bc6:	bf42      	ittt	mi
 8009bc8:	6833      	ldrmi	r3, [r6, #0]
 8009bca:	3302      	addmi	r3, #2
 8009bcc:	6033      	strmi	r3, [r6, #0]
 8009bce:	6825      	ldr	r5, [r4, #0]
 8009bd0:	f015 0506 	ands.w	r5, r5, #6
 8009bd4:	d106      	bne.n	8009be4 <_printf_common+0x48>
 8009bd6:	f104 0a19 	add.w	sl, r4, #25
 8009bda:	68e3      	ldr	r3, [r4, #12]
 8009bdc:	6832      	ldr	r2, [r6, #0]
 8009bde:	1a9b      	subs	r3, r3, r2
 8009be0:	42ab      	cmp	r3, r5
 8009be2:	dc26      	bgt.n	8009c32 <_printf_common+0x96>
 8009be4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009be8:	6822      	ldr	r2, [r4, #0]
 8009bea:	3b00      	subs	r3, #0
 8009bec:	bf18      	it	ne
 8009bee:	2301      	movne	r3, #1
 8009bf0:	0692      	lsls	r2, r2, #26
 8009bf2:	d42b      	bmi.n	8009c4c <_printf_common+0xb0>
 8009bf4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009bf8:	4641      	mov	r1, r8
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	47c8      	blx	r9
 8009bfe:	3001      	adds	r0, #1
 8009c00:	d01e      	beq.n	8009c40 <_printf_common+0xa4>
 8009c02:	6823      	ldr	r3, [r4, #0]
 8009c04:	6922      	ldr	r2, [r4, #16]
 8009c06:	f003 0306 	and.w	r3, r3, #6
 8009c0a:	2b04      	cmp	r3, #4
 8009c0c:	bf02      	ittt	eq
 8009c0e:	68e5      	ldreq	r5, [r4, #12]
 8009c10:	6833      	ldreq	r3, [r6, #0]
 8009c12:	1aed      	subeq	r5, r5, r3
 8009c14:	68a3      	ldr	r3, [r4, #8]
 8009c16:	bf0c      	ite	eq
 8009c18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c1c:	2500      	movne	r5, #0
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	bfc4      	itt	gt
 8009c22:	1a9b      	subgt	r3, r3, r2
 8009c24:	18ed      	addgt	r5, r5, r3
 8009c26:	2600      	movs	r6, #0
 8009c28:	341a      	adds	r4, #26
 8009c2a:	42b5      	cmp	r5, r6
 8009c2c:	d11a      	bne.n	8009c64 <_printf_common+0xc8>
 8009c2e:	2000      	movs	r0, #0
 8009c30:	e008      	b.n	8009c44 <_printf_common+0xa8>
 8009c32:	2301      	movs	r3, #1
 8009c34:	4652      	mov	r2, sl
 8009c36:	4641      	mov	r1, r8
 8009c38:	4638      	mov	r0, r7
 8009c3a:	47c8      	blx	r9
 8009c3c:	3001      	adds	r0, #1
 8009c3e:	d103      	bne.n	8009c48 <_printf_common+0xac>
 8009c40:	f04f 30ff 	mov.w	r0, #4294967295
 8009c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c48:	3501      	adds	r5, #1
 8009c4a:	e7c6      	b.n	8009bda <_printf_common+0x3e>
 8009c4c:	18e1      	adds	r1, r4, r3
 8009c4e:	1c5a      	adds	r2, r3, #1
 8009c50:	2030      	movs	r0, #48	@ 0x30
 8009c52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c56:	4422      	add	r2, r4
 8009c58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c60:	3302      	adds	r3, #2
 8009c62:	e7c7      	b.n	8009bf4 <_printf_common+0x58>
 8009c64:	2301      	movs	r3, #1
 8009c66:	4622      	mov	r2, r4
 8009c68:	4641      	mov	r1, r8
 8009c6a:	4638      	mov	r0, r7
 8009c6c:	47c8      	blx	r9
 8009c6e:	3001      	adds	r0, #1
 8009c70:	d0e6      	beq.n	8009c40 <_printf_common+0xa4>
 8009c72:	3601      	adds	r6, #1
 8009c74:	e7d9      	b.n	8009c2a <_printf_common+0x8e>
	...

08009c78 <_printf_i>:
 8009c78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c7c:	7e0f      	ldrb	r7, [r1, #24]
 8009c7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c80:	2f78      	cmp	r7, #120	@ 0x78
 8009c82:	4691      	mov	r9, r2
 8009c84:	4680      	mov	r8, r0
 8009c86:	460c      	mov	r4, r1
 8009c88:	469a      	mov	sl, r3
 8009c8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c8e:	d807      	bhi.n	8009ca0 <_printf_i+0x28>
 8009c90:	2f62      	cmp	r7, #98	@ 0x62
 8009c92:	d80a      	bhi.n	8009caa <_printf_i+0x32>
 8009c94:	2f00      	cmp	r7, #0
 8009c96:	f000 80d2 	beq.w	8009e3e <_printf_i+0x1c6>
 8009c9a:	2f58      	cmp	r7, #88	@ 0x58
 8009c9c:	f000 80b9 	beq.w	8009e12 <_printf_i+0x19a>
 8009ca0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ca4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ca8:	e03a      	b.n	8009d20 <_printf_i+0xa8>
 8009caa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009cae:	2b15      	cmp	r3, #21
 8009cb0:	d8f6      	bhi.n	8009ca0 <_printf_i+0x28>
 8009cb2:	a101      	add	r1, pc, #4	@ (adr r1, 8009cb8 <_printf_i+0x40>)
 8009cb4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cb8:	08009d11 	.word	0x08009d11
 8009cbc:	08009d25 	.word	0x08009d25
 8009cc0:	08009ca1 	.word	0x08009ca1
 8009cc4:	08009ca1 	.word	0x08009ca1
 8009cc8:	08009ca1 	.word	0x08009ca1
 8009ccc:	08009ca1 	.word	0x08009ca1
 8009cd0:	08009d25 	.word	0x08009d25
 8009cd4:	08009ca1 	.word	0x08009ca1
 8009cd8:	08009ca1 	.word	0x08009ca1
 8009cdc:	08009ca1 	.word	0x08009ca1
 8009ce0:	08009ca1 	.word	0x08009ca1
 8009ce4:	08009e25 	.word	0x08009e25
 8009ce8:	08009d4f 	.word	0x08009d4f
 8009cec:	08009ddf 	.word	0x08009ddf
 8009cf0:	08009ca1 	.word	0x08009ca1
 8009cf4:	08009ca1 	.word	0x08009ca1
 8009cf8:	08009e47 	.word	0x08009e47
 8009cfc:	08009ca1 	.word	0x08009ca1
 8009d00:	08009d4f 	.word	0x08009d4f
 8009d04:	08009ca1 	.word	0x08009ca1
 8009d08:	08009ca1 	.word	0x08009ca1
 8009d0c:	08009de7 	.word	0x08009de7
 8009d10:	6833      	ldr	r3, [r6, #0]
 8009d12:	1d1a      	adds	r2, r3, #4
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6032      	str	r2, [r6, #0]
 8009d18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d20:	2301      	movs	r3, #1
 8009d22:	e09d      	b.n	8009e60 <_printf_i+0x1e8>
 8009d24:	6833      	ldr	r3, [r6, #0]
 8009d26:	6820      	ldr	r0, [r4, #0]
 8009d28:	1d19      	adds	r1, r3, #4
 8009d2a:	6031      	str	r1, [r6, #0]
 8009d2c:	0606      	lsls	r6, r0, #24
 8009d2e:	d501      	bpl.n	8009d34 <_printf_i+0xbc>
 8009d30:	681d      	ldr	r5, [r3, #0]
 8009d32:	e003      	b.n	8009d3c <_printf_i+0xc4>
 8009d34:	0645      	lsls	r5, r0, #25
 8009d36:	d5fb      	bpl.n	8009d30 <_printf_i+0xb8>
 8009d38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d3c:	2d00      	cmp	r5, #0
 8009d3e:	da03      	bge.n	8009d48 <_printf_i+0xd0>
 8009d40:	232d      	movs	r3, #45	@ 0x2d
 8009d42:	426d      	negs	r5, r5
 8009d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d48:	4859      	ldr	r0, [pc, #356]	@ (8009eb0 <_printf_i+0x238>)
 8009d4a:	230a      	movs	r3, #10
 8009d4c:	e011      	b.n	8009d72 <_printf_i+0xfa>
 8009d4e:	6821      	ldr	r1, [r4, #0]
 8009d50:	6833      	ldr	r3, [r6, #0]
 8009d52:	0608      	lsls	r0, r1, #24
 8009d54:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d58:	d402      	bmi.n	8009d60 <_printf_i+0xe8>
 8009d5a:	0649      	lsls	r1, r1, #25
 8009d5c:	bf48      	it	mi
 8009d5e:	b2ad      	uxthmi	r5, r5
 8009d60:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d62:	4853      	ldr	r0, [pc, #332]	@ (8009eb0 <_printf_i+0x238>)
 8009d64:	6033      	str	r3, [r6, #0]
 8009d66:	bf14      	ite	ne
 8009d68:	230a      	movne	r3, #10
 8009d6a:	2308      	moveq	r3, #8
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d72:	6866      	ldr	r6, [r4, #4]
 8009d74:	60a6      	str	r6, [r4, #8]
 8009d76:	2e00      	cmp	r6, #0
 8009d78:	bfa2      	ittt	ge
 8009d7a:	6821      	ldrge	r1, [r4, #0]
 8009d7c:	f021 0104 	bicge.w	r1, r1, #4
 8009d80:	6021      	strge	r1, [r4, #0]
 8009d82:	b90d      	cbnz	r5, 8009d88 <_printf_i+0x110>
 8009d84:	2e00      	cmp	r6, #0
 8009d86:	d04b      	beq.n	8009e20 <_printf_i+0x1a8>
 8009d88:	4616      	mov	r6, r2
 8009d8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d8e:	fb03 5711 	mls	r7, r3, r1, r5
 8009d92:	5dc7      	ldrb	r7, [r0, r7]
 8009d94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d98:	462f      	mov	r7, r5
 8009d9a:	42bb      	cmp	r3, r7
 8009d9c:	460d      	mov	r5, r1
 8009d9e:	d9f4      	bls.n	8009d8a <_printf_i+0x112>
 8009da0:	2b08      	cmp	r3, #8
 8009da2:	d10b      	bne.n	8009dbc <_printf_i+0x144>
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	07df      	lsls	r7, r3, #31
 8009da8:	d508      	bpl.n	8009dbc <_printf_i+0x144>
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	6861      	ldr	r1, [r4, #4]
 8009dae:	4299      	cmp	r1, r3
 8009db0:	bfde      	ittt	le
 8009db2:	2330      	movle	r3, #48	@ 0x30
 8009db4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009db8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009dbc:	1b92      	subs	r2, r2, r6
 8009dbe:	6122      	str	r2, [r4, #16]
 8009dc0:	f8cd a000 	str.w	sl, [sp]
 8009dc4:	464b      	mov	r3, r9
 8009dc6:	aa03      	add	r2, sp, #12
 8009dc8:	4621      	mov	r1, r4
 8009dca:	4640      	mov	r0, r8
 8009dcc:	f7ff fee6 	bl	8009b9c <_printf_common>
 8009dd0:	3001      	adds	r0, #1
 8009dd2:	d14a      	bne.n	8009e6a <_printf_i+0x1f2>
 8009dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8009dd8:	b004      	add	sp, #16
 8009dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dde:	6823      	ldr	r3, [r4, #0]
 8009de0:	f043 0320 	orr.w	r3, r3, #32
 8009de4:	6023      	str	r3, [r4, #0]
 8009de6:	4833      	ldr	r0, [pc, #204]	@ (8009eb4 <_printf_i+0x23c>)
 8009de8:	2778      	movs	r7, #120	@ 0x78
 8009dea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009dee:	6823      	ldr	r3, [r4, #0]
 8009df0:	6831      	ldr	r1, [r6, #0]
 8009df2:	061f      	lsls	r7, r3, #24
 8009df4:	f851 5b04 	ldr.w	r5, [r1], #4
 8009df8:	d402      	bmi.n	8009e00 <_printf_i+0x188>
 8009dfa:	065f      	lsls	r7, r3, #25
 8009dfc:	bf48      	it	mi
 8009dfe:	b2ad      	uxthmi	r5, r5
 8009e00:	6031      	str	r1, [r6, #0]
 8009e02:	07d9      	lsls	r1, r3, #31
 8009e04:	bf44      	itt	mi
 8009e06:	f043 0320 	orrmi.w	r3, r3, #32
 8009e0a:	6023      	strmi	r3, [r4, #0]
 8009e0c:	b11d      	cbz	r5, 8009e16 <_printf_i+0x19e>
 8009e0e:	2310      	movs	r3, #16
 8009e10:	e7ac      	b.n	8009d6c <_printf_i+0xf4>
 8009e12:	4827      	ldr	r0, [pc, #156]	@ (8009eb0 <_printf_i+0x238>)
 8009e14:	e7e9      	b.n	8009dea <_printf_i+0x172>
 8009e16:	6823      	ldr	r3, [r4, #0]
 8009e18:	f023 0320 	bic.w	r3, r3, #32
 8009e1c:	6023      	str	r3, [r4, #0]
 8009e1e:	e7f6      	b.n	8009e0e <_printf_i+0x196>
 8009e20:	4616      	mov	r6, r2
 8009e22:	e7bd      	b.n	8009da0 <_printf_i+0x128>
 8009e24:	6833      	ldr	r3, [r6, #0]
 8009e26:	6825      	ldr	r5, [r4, #0]
 8009e28:	6961      	ldr	r1, [r4, #20]
 8009e2a:	1d18      	adds	r0, r3, #4
 8009e2c:	6030      	str	r0, [r6, #0]
 8009e2e:	062e      	lsls	r6, r5, #24
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	d501      	bpl.n	8009e38 <_printf_i+0x1c0>
 8009e34:	6019      	str	r1, [r3, #0]
 8009e36:	e002      	b.n	8009e3e <_printf_i+0x1c6>
 8009e38:	0668      	lsls	r0, r5, #25
 8009e3a:	d5fb      	bpl.n	8009e34 <_printf_i+0x1bc>
 8009e3c:	8019      	strh	r1, [r3, #0]
 8009e3e:	2300      	movs	r3, #0
 8009e40:	6123      	str	r3, [r4, #16]
 8009e42:	4616      	mov	r6, r2
 8009e44:	e7bc      	b.n	8009dc0 <_printf_i+0x148>
 8009e46:	6833      	ldr	r3, [r6, #0]
 8009e48:	1d1a      	adds	r2, r3, #4
 8009e4a:	6032      	str	r2, [r6, #0]
 8009e4c:	681e      	ldr	r6, [r3, #0]
 8009e4e:	6862      	ldr	r2, [r4, #4]
 8009e50:	2100      	movs	r1, #0
 8009e52:	4630      	mov	r0, r6
 8009e54:	f7f6 fa4c 	bl	80002f0 <memchr>
 8009e58:	b108      	cbz	r0, 8009e5e <_printf_i+0x1e6>
 8009e5a:	1b80      	subs	r0, r0, r6
 8009e5c:	6060      	str	r0, [r4, #4]
 8009e5e:	6863      	ldr	r3, [r4, #4]
 8009e60:	6123      	str	r3, [r4, #16]
 8009e62:	2300      	movs	r3, #0
 8009e64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e68:	e7aa      	b.n	8009dc0 <_printf_i+0x148>
 8009e6a:	6923      	ldr	r3, [r4, #16]
 8009e6c:	4632      	mov	r2, r6
 8009e6e:	4649      	mov	r1, r9
 8009e70:	4640      	mov	r0, r8
 8009e72:	47d0      	blx	sl
 8009e74:	3001      	adds	r0, #1
 8009e76:	d0ad      	beq.n	8009dd4 <_printf_i+0x15c>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	079b      	lsls	r3, r3, #30
 8009e7c:	d413      	bmi.n	8009ea6 <_printf_i+0x22e>
 8009e7e:	68e0      	ldr	r0, [r4, #12]
 8009e80:	9b03      	ldr	r3, [sp, #12]
 8009e82:	4298      	cmp	r0, r3
 8009e84:	bfb8      	it	lt
 8009e86:	4618      	movlt	r0, r3
 8009e88:	e7a6      	b.n	8009dd8 <_printf_i+0x160>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	4632      	mov	r2, r6
 8009e8e:	4649      	mov	r1, r9
 8009e90:	4640      	mov	r0, r8
 8009e92:	47d0      	blx	sl
 8009e94:	3001      	adds	r0, #1
 8009e96:	d09d      	beq.n	8009dd4 <_printf_i+0x15c>
 8009e98:	3501      	adds	r5, #1
 8009e9a:	68e3      	ldr	r3, [r4, #12]
 8009e9c:	9903      	ldr	r1, [sp, #12]
 8009e9e:	1a5b      	subs	r3, r3, r1
 8009ea0:	42ab      	cmp	r3, r5
 8009ea2:	dcf2      	bgt.n	8009e8a <_printf_i+0x212>
 8009ea4:	e7eb      	b.n	8009e7e <_printf_i+0x206>
 8009ea6:	2500      	movs	r5, #0
 8009ea8:	f104 0619 	add.w	r6, r4, #25
 8009eac:	e7f5      	b.n	8009e9a <_printf_i+0x222>
 8009eae:	bf00      	nop
 8009eb0:	0800a041 	.word	0x0800a041
 8009eb4:	0800a052 	.word	0x0800a052

08009eb8 <memmove>:
 8009eb8:	4288      	cmp	r0, r1
 8009eba:	b510      	push	{r4, lr}
 8009ebc:	eb01 0402 	add.w	r4, r1, r2
 8009ec0:	d902      	bls.n	8009ec8 <memmove+0x10>
 8009ec2:	4284      	cmp	r4, r0
 8009ec4:	4623      	mov	r3, r4
 8009ec6:	d807      	bhi.n	8009ed8 <memmove+0x20>
 8009ec8:	1e43      	subs	r3, r0, #1
 8009eca:	42a1      	cmp	r1, r4
 8009ecc:	d008      	beq.n	8009ee0 <memmove+0x28>
 8009ece:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ed2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ed6:	e7f8      	b.n	8009eca <memmove+0x12>
 8009ed8:	4402      	add	r2, r0
 8009eda:	4601      	mov	r1, r0
 8009edc:	428a      	cmp	r2, r1
 8009ede:	d100      	bne.n	8009ee2 <memmove+0x2a>
 8009ee0:	bd10      	pop	{r4, pc}
 8009ee2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ee6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eea:	e7f7      	b.n	8009edc <memmove+0x24>

08009eec <_sbrk_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	4d06      	ldr	r5, [pc, #24]	@ (8009f08 <_sbrk_r+0x1c>)
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	4608      	mov	r0, r1
 8009ef6:	602b      	str	r3, [r5, #0]
 8009ef8:	f7f7 fa92 	bl	8001420 <_sbrk>
 8009efc:	1c43      	adds	r3, r0, #1
 8009efe:	d102      	bne.n	8009f06 <_sbrk_r+0x1a>
 8009f00:	682b      	ldr	r3, [r5, #0]
 8009f02:	b103      	cbz	r3, 8009f06 <_sbrk_r+0x1a>
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	bd38      	pop	{r3, r4, r5, pc}
 8009f08:	24000aa8 	.word	0x24000aa8

08009f0c <memcpy>:
 8009f0c:	440a      	add	r2, r1
 8009f0e:	4291      	cmp	r1, r2
 8009f10:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f14:	d100      	bne.n	8009f18 <memcpy+0xc>
 8009f16:	4770      	bx	lr
 8009f18:	b510      	push	{r4, lr}
 8009f1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f22:	4291      	cmp	r1, r2
 8009f24:	d1f9      	bne.n	8009f1a <memcpy+0xe>
 8009f26:	bd10      	pop	{r4, pc}

08009f28 <_realloc_r>:
 8009f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f2c:	4680      	mov	r8, r0
 8009f2e:	4615      	mov	r5, r2
 8009f30:	460c      	mov	r4, r1
 8009f32:	b921      	cbnz	r1, 8009f3e <_realloc_r+0x16>
 8009f34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f38:	4611      	mov	r1, r2
 8009f3a:	f7ff bc4b 	b.w	80097d4 <_malloc_r>
 8009f3e:	b92a      	cbnz	r2, 8009f4c <_realloc_r+0x24>
 8009f40:	f7ff fbdc 	bl	80096fc <_free_r>
 8009f44:	2400      	movs	r4, #0
 8009f46:	4620      	mov	r0, r4
 8009f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f4c:	f000 f81a 	bl	8009f84 <_malloc_usable_size_r>
 8009f50:	4285      	cmp	r5, r0
 8009f52:	4606      	mov	r6, r0
 8009f54:	d802      	bhi.n	8009f5c <_realloc_r+0x34>
 8009f56:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009f5a:	d8f4      	bhi.n	8009f46 <_realloc_r+0x1e>
 8009f5c:	4629      	mov	r1, r5
 8009f5e:	4640      	mov	r0, r8
 8009f60:	f7ff fc38 	bl	80097d4 <_malloc_r>
 8009f64:	4607      	mov	r7, r0
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d0ec      	beq.n	8009f44 <_realloc_r+0x1c>
 8009f6a:	42b5      	cmp	r5, r6
 8009f6c:	462a      	mov	r2, r5
 8009f6e:	4621      	mov	r1, r4
 8009f70:	bf28      	it	cs
 8009f72:	4632      	movcs	r2, r6
 8009f74:	f7ff ffca 	bl	8009f0c <memcpy>
 8009f78:	4621      	mov	r1, r4
 8009f7a:	4640      	mov	r0, r8
 8009f7c:	f7ff fbbe 	bl	80096fc <_free_r>
 8009f80:	463c      	mov	r4, r7
 8009f82:	e7e0      	b.n	8009f46 <_realloc_r+0x1e>

08009f84 <_malloc_usable_size_r>:
 8009f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f88:	1f18      	subs	r0, r3, #4
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	bfbc      	itt	lt
 8009f8e:	580b      	ldrlt	r3, [r1, r0]
 8009f90:	18c0      	addlt	r0, r0, r3
 8009f92:	4770      	bx	lr

08009f94 <_init>:
 8009f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f96:	bf00      	nop
 8009f98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f9a:	bc08      	pop	{r3}
 8009f9c:	469e      	mov	lr, r3
 8009f9e:	4770      	bx	lr

08009fa0 <_fini>:
 8009fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa2:	bf00      	nop
 8009fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fa6:	bc08      	pop	{r3}
 8009fa8:	469e      	mov	lr, r3
 8009faa:	4770      	bx	lr
