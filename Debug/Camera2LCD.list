
Camera2LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a828  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  0800aac8  0800aac8  0000bac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800abfc  0800abfc  0000bbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ac04  0800ac04  0000bc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ac08  0800ac08  0000bc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800ac0c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800ac70  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800acd0  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  24000124  0800ad30  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ac0  0800ad30  0000cac0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   000281dc  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c49  00000000  00000000  0003432e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  00038f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001615  00000000  00000000  0003abd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cbe7  00000000  00000000  0003c1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002acf3  00000000  00000000  00078dcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001746d6  00000000  00000000  000a3abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00218195  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e2c  00000000  00000000  002181d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00220004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800aab0 	.word	0x0800aab0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800aab0 	.word	0x0800aab0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <OV5640_WriteReg>:
		OV5640_FORMAT_RGB565
};

OV5640_CameraConfig* activeCameraConfigPtr = &activeCameraConfig;

HAL_StatusTypeDef OV5640_WriteReg(uint16_t regAddr, uint8_t data) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af04      	add	r7, sp, #16
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	80fb      	strh	r3, [r7, #6]
 80006c8:	4613      	mov	r3, r2
 80006ca:	717b      	strb	r3, [r7, #5]


	return HAL_I2C_Mem_Write(&hi2c1, OV5640_I2C_ADDR_W, regAddr,
 80006cc:	88fa      	ldrh	r2, [r7, #6]
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	9302      	str	r3, [sp, #8]
 80006d4:	2301      	movs	r3, #1
 80006d6:	9301      	str	r3, [sp, #4]
 80006d8:	1d7b      	adds	r3, r7, #5
 80006da:	9300      	str	r3, [sp, #0]
 80006dc:	2302      	movs	r3, #2
 80006de:	2178      	movs	r1, #120	@ 0x78
 80006e0:	4803      	ldr	r0, [pc, #12]	@ (80006f0 <OV5640_WriteReg+0x34>)
 80006e2:	f003 f849 	bl	8003778 <HAL_I2C_Mem_Write>
 80006e6:	4603      	mov	r3, r0
			I2C_MEMADD_SIZE_16BIT,&data,1,HAL_MAX_DELAY);

}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	24000284 	.word	0x24000284

080006f4 <OV5640_ReadReg>:

HAL_StatusTypeDef OV5640_ReadReg(uint16_t regAddr, uint8_t *dataPtr) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	@ 0x38
 80006f8:	af04      	add	r7, sp, #16
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	80fb      	strh	r3, [r7, #6]
	char buff[25] = "readStart\r\n";
 8000700:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <OV5640_ReadReg+0x5c>)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	ca07      	ldmia	r2, {r0, r1, r2}
 8000708:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800070c:	f107 0318 	add.w	r3, r7, #24
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	731a      	strb	r2, [r3, #12]
	HAL_UART_Transmit(&huart3, &buff, sizeof(buff), HAL_MAX_DELAY);
 800071a:	f107 010c 	add.w	r1, r7, #12
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	2219      	movs	r2, #25
 8000724:	480b      	ldr	r0, [pc, #44]	@ (8000754 <OV5640_ReadReg+0x60>)
 8000726:	f008 f901 	bl	800892c <HAL_UART_Transmit>
	return HAL_I2C_Mem_Read(&hi2c1, OV5640_I2C_ADDR_R, regAddr,
 800072a:	88fa      	ldrh	r2, [r7, #6]
 800072c:	f04f 33ff 	mov.w	r3, #4294967295
 8000730:	9302      	str	r3, [sp, #8]
 8000732:	2301      	movs	r3, #1
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2302      	movs	r3, #2
 800073c:	2179      	movs	r1, #121	@ 0x79
 800073e:	4806      	ldr	r0, [pc, #24]	@ (8000758 <OV5640_ReadReg+0x64>)
 8000740:	f003 f92e 	bl	80039a0 <HAL_I2C_Mem_Read>
 8000744:	4603      	mov	r3, r0
			I2C_MEMADD_SIZE_16BIT, dataPtr, 1, HAL_MAX_DELAY);
}
 8000746:	4618      	mov	r0, r3
 8000748:	3728      	adds	r7, #40	@ 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	0800aac8 	.word	0x0800aac8
 8000754:	240003fc 	.word	0x240003fc
 8000758:	24000284 	.word	0x24000284

0800075c <OV5640_PowerUpSequence>:
		return HAL_ERROR;
	}

	return HAL_OK;
}
HAL_StatusTypeDef OV5640_PowerUpSequence(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 8000762:	200a      	movs	r0, #10
 8000764:	f001 fc92 	bl	800208c <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	2101      	movs	r1, #1
 800076c:	480f      	ldr	r0, [pc, #60]	@ (80007ac <OV5640_PowerUpSequence+0x50>)
 800076e:	f002 ff4d 	bl	800360c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000772:	2005      	movs	r0, #5
 8000774:	f001 fc8a 	bl	800208c <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port, CAMERA_RST_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800077e:	480c      	ldr	r0, [pc, #48]	@ (80007b0 <OV5640_PowerUpSequence+0x54>)
 8000780:	f002 ff44 	bl	800360c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8000784:	2014      	movs	r0, #20
 8000786:	f001 fc81 	bl	800208c <HAL_Delay>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800078a:	2100      	movs	r1, #0
 800078c:	4809      	ldr	r0, [pc, #36]	@ (80007b4 <OV5640_PowerUpSequence+0x58>)
 800078e:	f006 ff69 	bl	8007664 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 8000792:	2005      	movs	r0, #5
 8000794:	f001 fc7a 	bl	800208c <HAL_Delay>
	HAL_StatusTypeDef status = OV5640_ConfigureCamera();
 8000798:	f000 f87c 	bl	8000894 <OV5640_ConfigureCamera>
 800079c:	4603      	mov	r3, r0
 800079e:	71fb      	strb	r3, [r7, #7]
	return status;
 80007a0:	79fb      	ldrb	r3, [r7, #7]

}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	58020000 	.word	0x58020000
 80007b0:	58021800 	.word	0x58021800
 80007b4:	240003b0 	.word	0x240003b0

080007b8 <OV5640_SetResolution>:
HAL_StatusTypeDef OV5640_SetResolution(void){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80007be:	2300      	movs	r3, #0
 80007c0:	71fb      	strb	r3, [r7, #7]
	const uint16_t selectedWidth =OV5640_Resolutions[activeCameraConfigPtr->resolution].width;
 80007c2:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <OV5640_SetResolution+0x9c>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	461a      	mov	r2, r3
 80007ca:	4b23      	ldr	r3, [pc, #140]	@ (8000858 <OV5640_SetResolution+0xa0>)
 80007cc:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80007d0:	80bb      	strh	r3, [r7, #4]
	const uint16_t selectedHeight = OV5640_Resolutions[activeCameraConfigPtr->resolution].height;
 80007d2:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <OV5640_SetResolution+0x9c>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4a1f      	ldr	r2, [pc, #124]	@ (8000858 <OV5640_SetResolution+0xa0>)
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	4413      	add	r3, r2
 80007de:	885b      	ldrh	r3, [r3, #2]
 80007e0:	807b      	strh	r3, [r7, #2]
	status |= OV5640_WriteReg(OV5640_REG_OUT_WIDTH_H, (uint8_t)selectedWidth>>8);
 80007e2:	88bb      	ldrh	r3, [r7, #4]
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	121b      	asrs	r3, r3, #8
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	4619      	mov	r1, r3
 80007ec:	f643 0008 	movw	r0, #14344	@ 0x3808
 80007f0:	f7ff ff64 	bl	80006bc <OV5640_WriteReg>
 80007f4:	4603      	mov	r3, r0
 80007f6:	461a      	mov	r2, r3
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_WIDTH_L, (uint8_t)selectedWidth&0xFF);
 80007fe:	88bb      	ldrh	r3, [r7, #4]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	f643 0009 	movw	r0, #14345	@ 0x3809
 8000808:	f7ff ff58 	bl	80006bc <OV5640_WriteReg>
 800080c:	4603      	mov	r3, r0
 800080e:	461a      	mov	r2, r3
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4313      	orrs	r3, r2
 8000814:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_HEIGHT_H, (uint8_t)selectedHeight>>8);
 8000816:	887b      	ldrh	r3, [r7, #2]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	121b      	asrs	r3, r3, #8
 800081c:	b2db      	uxtb	r3, r3
 800081e:	4619      	mov	r1, r3
 8000820:	f643 000a 	movw	r0, #14346	@ 0x380a
 8000824:	f7ff ff4a 	bl	80006bc <OV5640_WriteReg>
 8000828:	4603      	mov	r3, r0
 800082a:	461a      	mov	r2, r3
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	4313      	orrs	r3, r2
 8000830:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_HEIGHT_L, (uint8_t)selectedHeight&0xFF);
 8000832:	887b      	ldrh	r3, [r7, #2]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	f643 000b 	movw	r0, #14347	@ 0x380b
 800083c:	f7ff ff3e 	bl	80006bc <OV5640_WriteReg>
 8000840:	4603      	mov	r3, r0
 8000842:	461a      	mov	r2, r3
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	4313      	orrs	r3, r2
 8000848:	71fb      	strb	r3, [r7, #7]
	return status;
 800084a:	79fb      	ldrb	r3, [r7, #7]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	24000000 	.word	0x24000000
 8000858:	0800ab74 	.word	0x0800ab74

0800085c <OV5640_SetFormat>:
HAL_StatusTypeDef OV5640_SetFormat(void){
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8000862:	2300      	movs	r3, #0
 8000864:	71fb      	strb	r3, [r7, #7]
	uint8_t formatData= OV5640_Formats[activeCameraConfigPtr->pixelFormat].formatValue;
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <OV5640_SetFormat+0x30>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	785b      	ldrb	r3, [r3, #1]
 800086c:	461a      	mov	r2, r3
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <OV5640_SetFormat+0x34>)
 8000870:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000874:	71bb      	strb	r3, [r7, #6]
	status | OV5640_WriteReg(OV5640_REG_FORMAT_CTRL, formatData);
 8000876:	79bb      	ldrb	r3, [r7, #6]
 8000878:	4619      	mov	r1, r3
 800087a:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 800087e:	f7ff ff1d 	bl	80006bc <OV5640_WriteReg>
	return status;
 8000882:	79fb      	ldrb	r3, [r7, #7]


}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	24000000 	.word	0x24000000
 8000890:	0800ab80 	.word	0x0800ab80

08000894 <OV5640_ConfigureCamera>:
HAL_StatusTypeDef OV5640_ConfigureCamera(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	b092      	sub	sp, #72	@ 0x48
 8000898:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 800089a:	2300      	movs	r3, #0
 800089c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t resetValue = 0x0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

	OV5640_ReadReg(OV5640_SOFTWARE_RESET, &resetValue);
 80008a6:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 80008aa:	4619      	mov	r1, r3
 80008ac:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008b0:	f7ff ff20 	bl	80006f4 <OV5640_ReadReg>
	resetValue |=0x80;
 80008b4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80008b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	OV5640_WriteReg(OV5640_SOFTWARE_RESET, resetValue);
 80008c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80008c6:	4619      	mov	r1, r3
 80008c8:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008cc:	f7ff fef6 	bl	80006bc <OV5640_WriteReg>
	HAL_Delay(10);
 80008d0:	200a      	movs	r0, #10
 80008d2:	f001 fbdb 	bl	800208c <HAL_Delay>
	resetValue &= ~0x80;
 80008d6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80008da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	OV5640_WriteReg(OV5640_SOFTWARE_RESET, resetValue);
 80008e4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80008e8:	4619      	mov	r1, r3
 80008ea:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008ee:	f7ff fee5 	bl	80006bc <OV5640_WriteReg>
	HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	@ 0x64
 80008f4:	f001 fbca 	bl	800208c <HAL_Delay>

	status |= OV5640_SetResolution();
 80008f8:	f7ff ff5e 	bl	80007b8 <OV5640_SetResolution>
 80008fc:	4603      	mov	r3, r0
 80008fe:	461a      	mov	r2, r3
 8000900:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000904:	4313      	orrs	r3, r2
 8000906:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	status |= OV5640_SetFormat();
 800090a:	f7ff ffa7 	bl	800085c <OV5640_SetFormat>
 800090e:	4603      	mov	r3, r0
 8000910:	461a      	mov	r2, r3
 8000912:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000916:	4313      	orrs	r3, r2
 8000918:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

	status |= OV5640_WriteReg(OV5640_POLARITY_CTRL, OV5640_POLARITY);
 800091c:	2123      	movs	r1, #35	@ 0x23
 800091e:	f244 7040 	movw	r0, #18240	@ 0x4740
 8000922:	f7ff fecb 	bl	80006bc <OV5640_WriteReg>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800092e:	4313      	orrs	r3, r2
 8000930:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t pol1;
	OV5640_ReadReg(OV5640_POLARITY_CTRL, &pol1);
 8000934:	f107 0345 	add.w	r3, r7, #69	@ 0x45
 8000938:	4619      	mov	r1, r3
 800093a:	f244 7040 	movw	r0, #18240	@ 0x4740
 800093e:	f7ff fed9 	bl	80006f4 <OV5640_ReadReg>
	char buff2[20];
	sprintf(buff2, "result of value: %d\n\r", pol1);
 8000942:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000946:	461a      	mov	r2, r3
 8000948:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800094c:	492e      	ldr	r1, [pc, #184]	@ (8000a08 <OV5640_ConfigureCamera+0x174>)
 800094e:	4618      	mov	r0, r3
 8000950:	f009 fc0e 	bl	800a170 <siprintf>
	HAL_UART_Transmit(&huart3, buff2, strlen(buff2), HAL_MAX_DELAY);
 8000954:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff fcc1 	bl	80002e0 <strlen>
 800095e:	4603      	mov	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	4828      	ldr	r0, [pc, #160]	@ (8000a0c <OV5640_ConfigureCamera+0x178>)
 800096c:	f007 ffde 	bl	800892c <HAL_UART_Transmit>
	OV5640_WriteReg(0x503D, 0x80);
 8000970:	2180      	movs	r1, #128	@ 0x80
 8000972:	f245 003d 	movw	r0, #20541	@ 0x503d
 8000976:	f7ff fea1 	bl	80006bc <OV5640_WriteReg>
	HAL_Delay(10);
 800097a:	200a      	movs	r0, #10
 800097c:	f001 fb86 	bl	800208c <HAL_Delay>
	volatile uint8_t result = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	//write format for format control register to make format rgb565
	char buff3[20];
	OV5640_ReadReg(OV5640_REG_FORMAT_CTRL, &result);
 8000986:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 800098a:	4619      	mov	r1, r3
 800098c:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 8000990:	f7ff feb0 	bl	80006f4 <OV5640_ReadReg>
	sprintf(buff3, "result of format: %d\n\r", result);
 8000994:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000998:	b2db      	uxtb	r3, r3
 800099a:	461a      	mov	r2, r3
 800099c:	f107 0318 	add.w	r3, r7, #24
 80009a0:	491b      	ldr	r1, [pc, #108]	@ (8000a10 <OV5640_ConfigureCamera+0x17c>)
 80009a2:	4618      	mov	r0, r3
 80009a4:	f009 fbe4 	bl	800a170 <siprintf>
	HAL_UART_Transmit(&huart3, buff3, strlen(buff3), HAL_MAX_DELAY);
 80009a8:	f107 0318 	add.w	r3, r7, #24
 80009ac:	4618      	mov	r0, r3
 80009ae:	f7ff fc97 	bl	80002e0 <strlen>
 80009b2:	4603      	mov	r3, r0
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	f107 0118 	add.w	r1, r7, #24
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	4813      	ldr	r0, [pc, #76]	@ (8000a0c <OV5640_ConfigureCamera+0x178>)
 80009c0:	f007 ffb4 	bl	800892c <HAL_UART_Transmit>
	uint8_t result1 = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	75fb      	strb	r3, [r7, #23]
	OV5640_ReadReg(OV5640_REG_CHIP_ID_L, &result1);
 80009c8:	f107 0317 	add.w	r3, r7, #23
 80009cc:	4619      	mov	r1, r3
 80009ce:	f243 000b 	movw	r0, #12299	@ 0x300b
 80009d2:	f7ff fe8f 	bl	80006f4 <OV5640_ReadReg>
	char buff4[20];
	sprintf(buff4, "test format: %d\n\r", result1);
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	461a      	mov	r2, r3
 80009da:	463b      	mov	r3, r7
 80009dc:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <OV5640_ConfigureCamera+0x180>)
 80009de:	4618      	mov	r0, r3
 80009e0:	f009 fbc6 	bl	800a170 <siprintf>

	HAL_UART_Transmit(&huart3, buff4, strlen(buff4), HAL_MAX_DELAY);
 80009e4:	463b      	mov	r3, r7
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff fc7a 	bl	80002e0 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	4639      	mov	r1, r7
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <OV5640_ConfigureCamera+0x178>)
 80009f8:	f007 ff98 	bl	800892c <HAL_UART_Transmit>
	return status;
 80009fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47



}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3748      	adds	r7, #72	@ 0x48
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	0800aae4 	.word	0x0800aae4
 8000a0c:	240003fc 	.word	0x240003fc
 8000a10:	0800aafc 	.word	0x0800aafc
 8000a14:	0800ab14 	.word	0x0800ab14

08000a18 <frameCapture>:
void frameCapture(void){
 8000a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a1c:	b090      	sub	sp, #64	@ 0x40
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	466b      	mov	r3, sp
 8000a22:	4698      	mov	r8, r3
	__HAL_RCC_DCMI_CLK_ENABLE();
 8000a24:	4b54      	ldr	r3, [pc, #336]	@ (8000b78 <frameCapture+0x160>)
 8000a26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000a2a:	4a53      	ldr	r2, [pc, #332]	@ (8000b78 <frameCapture+0x160>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000a34:	4b50      	ldr	r3, [pc, #320]	@ (8000b78 <frameCapture+0x160>)
 8000a36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	61bb      	str	r3, [r7, #24]
 8000a40:	69bb      	ldr	r3, [r7, #24]

	uint16_t width = OV5640_Resolutions[activeCameraConfigPtr->resolution].width;
 8000a42:	4b4e      	ldr	r3, [pc, #312]	@ (8000b7c <frameCapture+0x164>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b4d      	ldr	r3, [pc, #308]	@ (8000b80 <frameCapture+0x168>)
 8000a4c:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000a50:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint16_t height = OV5640_Resolutions[activeCameraConfigPtr->resolution].height;
 8000a52:	4b4a      	ldr	r3, [pc, #296]	@ (8000b7c <frameCapture+0x164>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4a49      	ldr	r2, [pc, #292]	@ (8000b80 <frameCapture+0x168>)
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	885b      	ldrh	r3, [r3, #2]
 8000a60:	873b      	strh	r3, [r7, #56]	@ 0x38
	uint8_t pixelSize = OV5640_Formats[activeCameraConfigPtr->pixelFormat].bytesPerPixel;
 8000a62:	4b46      	ldr	r3, [pc, #280]	@ (8000b7c <frameCapture+0x164>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	785b      	ldrb	r3, [r3, #1]
 8000a68:	4a46      	ldr	r2, [pc, #280]	@ (8000b84 <frameCapture+0x16c>)
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	4413      	add	r3, r2
 8000a6e:	885b      	ldrh	r3, [r3, #2]
 8000a70:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

	uint8_t frame[width*height*pixelSize];
 8000a74:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8000a76:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8000a78:	fb02 f303 	mul.w	r3, r2, r3
 8000a7c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8000a80:	fb02 f603 	mul.w	r6, r2, r3
 8000a84:	1e73      	subs	r3, r6, #1
 8000a86:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a88:	4632      	mov	r2, r6
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	4614      	mov	r4, r2
 8000a8e:	461d      	mov	r5, r3
 8000a90:	f04f 0200 	mov.w	r2, #0
 8000a94:	f04f 0300 	mov.w	r3, #0
 8000a98:	00eb      	lsls	r3, r5, #3
 8000a9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000a9e:	00e2      	lsls	r2, r4, #3
 8000aa0:	4632      	mov	r2, r6
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	4610      	mov	r0, r2
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 0200 	mov.w	r2, #0
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	00cb      	lsls	r3, r1, #3
 8000ab2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000ab6:	00c2      	lsls	r2, r0, #3
 8000ab8:	4633      	mov	r3, r6
 8000aba:	3307      	adds	r3, #7
 8000abc:	08db      	lsrs	r3, r3, #3
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	ebad 0d03 	sub.w	sp, sp, r3
 8000ac4:	466b      	mov	r3, sp
 8000ac6:	3300      	adds	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t timeout = HAL_MAX_DELAY;
 8000aca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ace:	62bb      	str	r3, [r7, #40]	@ 0x28
    char testBuff[10] = "In Frame\n\r";
 8000ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8000b88 <frameCapture+0x170>)
 8000ad2:	f107 031c 	add.w	r3, r7, #28
 8000ad6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ad8:	c303      	stmia	r3!, {r0, r1}
 8000ada:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart3, testBuff, strlen(testBuff), HAL_MAX_DELAY);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fbfd 	bl	80002e0 <strlen>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	f107 011c 	add.w	r1, r7, #28
 8000aee:	f04f 33ff 	mov.w	r3, #4294967295
 8000af2:	4826      	ldr	r0, [pc, #152]	@ (8000b8c <frameCapture+0x174>)
 8000af4:	f007 ff1a 	bl	800892c <HAL_UART_Transmit>
	DCMI->CR |=DCMI_CR_ENABLE;
 8000af8:	4b25      	ldr	r3, [pc, #148]	@ (8000b90 <frameCapture+0x178>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a24      	ldr	r2, [pc, #144]	@ (8000b90 <frameCapture+0x178>)
 8000afe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b02:	6013      	str	r3, [r2, #0]
	DCMI->CR |=DCMI_CR_CM;
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <frameCapture+0x178>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a21      	ldr	r2, [pc, #132]	@ (8000b90 <frameCapture+0x178>)
 8000b0a:	f043 0302 	orr.w	r3, r3, #2
 8000b0e:	6013      	str	r3, [r2, #0]
	DCMI->CR |= DCMI_CR_CAPTURE;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <frameCapture+0x178>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a1e      	ldr	r2, [pc, #120]	@ (8000b90 <frameCapture+0x178>)
 8000b16:	f043 0301 	orr.w	r3, r3, #1
 8000b1a:	6013      	str	r3, [r2, #0]
	for (int i = 0; i<sizeof(frame);i++){
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b20:	e020      	b.n	8000b64 <frameCapture+0x14c>
	    frame[i] = DCMI->DR;
 8000b22:	4b1b      	ldr	r3, [pc, #108]	@ (8000b90 <frameCapture+0x178>)
 8000b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b26:	b2d9      	uxtb	r1, r3
 8000b28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b2c:	4413      	add	r3, r2
 8000b2e:	460a      	mov	r2, r1
 8000b30:	701a      	strb	r2, [r3, #0]
		char buffFrame[20];
		if (i==0){
 8000b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d112      	bne.n	8000b5e <frameCapture+0x146>
			sprintf(buffFrame, "Start of image: %d,\n\r", DCMI->DR);
 8000b38:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <frameCapture+0x178>)
 8000b3a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	4915      	ldr	r1, [pc, #84]	@ (8000b94 <frameCapture+0x17c>)
 8000b40:	4618      	mov	r0, r3
 8000b42:	f009 fb15 	bl	800a170 <siprintf>
			HAL_UART_Transmit(&huart3, buffFrame, strlen(buffFrame),HAL_MAX_DELAY);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fbc9 	bl	80002e0 <strlen>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	1d39      	adds	r1, r7, #4
 8000b54:	f04f 33ff 	mov.w	r3, #4294967295
 8000b58:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <frameCapture+0x174>)
 8000b5a:	f007 fee7 	bl	800892c <HAL_UART_Transmit>
	for (int i = 0; i<sizeof(frame);i++){
 8000b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b60:	3301      	adds	r3, #1
 8000b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b64:	4632      	mov	r2, r6
 8000b66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d8da      	bhi.n	8000b22 <frameCapture+0x10a>
 8000b6c:	46c5      	mov	sp, r8
		}

	}

}
 8000b6e:	bf00      	nop
 8000b70:	3740      	adds	r7, #64	@ 0x40
 8000b72:	46bd      	mov	sp, r7
 8000b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b78:	58024400 	.word	0x58024400
 8000b7c:	24000000 	.word	0x24000000
 8000b80:	0800ab74 	.word	0x0800ab74
 8000b84:	0800ab80 	.word	0x0800ab80
 8000b88:	0800ab40 	.word	0x0800ab40
 8000b8c:	240003fc 	.word	0x240003fc
 8000b90:	48020000 	.word	0x48020000
 8000b94:	0800ab28 	.word	0x0800ab28

08000b98 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000b9c:	4b16      	ldr	r3, [pc, #88]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000b9e:	4a17      	ldr	r2, [pc, #92]	@ (8000bfc <MX_DCMI_Init+0x64>)
 8000ba0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ba2:	4b15      	ldr	r3, [pc, #84]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000ba8:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000baa:	2220      	movs	r2, #32
 8000bac:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000bae:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bb0:	2280      	movs	r2, #128	@ 0x80
 8000bb2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000bb4:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bb6:	2240      	movs	r2, #64	@ 0x40
 8000bb8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000bba:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000bd2:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000bd8:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	@ (8000bf8 <MX_DCMI_Init+0x60>)
 8000be6:	f001 fba5 	bl	8002334 <HAL_DCMI_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000bf0:	f000 fcc6 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	24000144 	.word	0x24000144
 8000bfc:	48020000 	.word	0x48020000

08000c00 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b08e      	sub	sp, #56	@ 0x38
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8000d94 <HAL_DCMI_MspInit+0x194>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	f040 80b3 	bne.w	8000d8a <HAL_DCMI_MspInit+0x18a>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000c24:	4b5c      	ldr	r3, [pc, #368]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c26:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000c2a:	4a5b      	ldr	r2, [pc, #364]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000c34:	4b58      	ldr	r3, [pc, #352]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c36:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	623b      	str	r3, [r7, #32]
 8000c40:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c42:	4b55      	ldr	r3, [pc, #340]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c48:	4a53      	ldr	r2, [pc, #332]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c4a:	f043 0310 	orr.w	r3, r3, #16
 8000c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c52:	4b51      	ldr	r3, [pc, #324]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c58:	f003 0310 	and.w	r3, r3, #16
 8000c5c:	61fb      	str	r3, [r7, #28]
 8000c5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b4d      	ldr	r3, [pc, #308]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c66:	4a4c      	ldr	r2, [pc, #304]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c70:	4b49      	ldr	r3, [pc, #292]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	61bb      	str	r3, [r7, #24]
 8000c7c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	4b46      	ldr	r3, [pc, #280]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c84:	4a44      	ldr	r2, [pc, #272]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c8e:	4b42      	ldr	r3, [pc, #264]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca2:	4a3d      	ldr	r2, [pc, #244]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000ca4:	f043 0308 	orr.w	r3, r3, #8
 8000ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cac:	4b3a      	ldr	r3, [pc, #232]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb2:	f003 0308 	and.w	r3, r3, #8
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	4b37      	ldr	r3, [pc, #220]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc0:	4a35      	ldr	r2, [pc, #212]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000cc2:	f043 0302 	orr.w	r3, r3, #2
 8000cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cca:	4b33      	ldr	r3, [pc, #204]	@ (8000d98 <HAL_DCMI_MspInit+0x198>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd0:	f003 0302 	and.w	r3, r3, #2
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000cd8:	2370      	movs	r3, #112	@ 0x70
 8000cda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000ce8:	230d      	movs	r3, #13
 8000cea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	482a      	ldr	r0, [pc, #168]	@ (8000d9c <HAL_DCMI_MspInit+0x19c>)
 8000cf4:	f002 fada 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000cf8:	2350      	movs	r3, #80	@ 0x50
 8000cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d08:	230d      	movs	r3, #13
 8000d0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	4823      	ldr	r0, [pc, #140]	@ (8000da0 <HAL_DCMI_MspInit+0x1a0>)
 8000d14:	f002 faca 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d18:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d2a:	230d      	movs	r3, #13
 8000d2c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d32:	4619      	mov	r1, r3
 8000d34:	481b      	ldr	r0, [pc, #108]	@ (8000da4 <HAL_DCMI_MspInit+0x1a4>)
 8000d36:	f002 fab9 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d4a:	230d      	movs	r3, #13
 8000d4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d52:	4619      	mov	r1, r3
 8000d54:	4814      	ldr	r0, [pc, #80]	@ (8000da8 <HAL_DCMI_MspInit+0x1a8>)
 8000d56:	f002 faa9 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000d5a:	2380      	movs	r3, #128	@ 0x80
 8000d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d6a:	230d      	movs	r3, #13
 8000d6c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	480d      	ldr	r0, [pc, #52]	@ (8000dac <HAL_DCMI_MspInit+0x1ac>)
 8000d76:	f002 fa99 	bl	80032ac <HAL_GPIO_Init>

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	204e      	movs	r0, #78	@ 0x4e
 8000d80:	f001 faa3 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000d84:	204e      	movs	r0, #78	@ 0x4e
 8000d86:	f001 faba 	bl	80022fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000d8a:	bf00      	nop
 8000d8c:	3738      	adds	r7, #56	@ 0x38
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	48020000 	.word	0x48020000
 8000d98:	58024400 	.word	0x58024400
 8000d9c:	58021000 	.word	0x58021000
 8000da0:	58020000 	.word	0x58020000
 8000da4:	58020800 	.word	0x58020800
 8000da8:	58020c00 	.word	0x58020c00
 8000dac:	58020400 	.word	0x58020400

08000db0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000db4:	4b1e      	ldr	r3, [pc, #120]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000db6:	4a1f      	ldr	r2, [pc, #124]	@ (8000e34 <MX_ETH_Init+0x84>)
 8000db8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000dba:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000dc2:	2280      	movs	r2, #128	@ 0x80
 8000dc4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000dc8:	22e1      	movs	r2, #225	@ 0xe1
 8000dca:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000dde:	4b14      	ldr	r3, [pc, #80]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000de0:	4a15      	ldr	r2, [pc, #84]	@ (8000e38 <MX_ETH_Init+0x88>)
 8000de2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000de4:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000dea:	4b11      	ldr	r3, [pc, #68]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000dec:	4a13      	ldr	r2, [pc, #76]	@ (8000e3c <MX_ETH_Init+0x8c>)
 8000dee:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000df2:	4a13      	ldr	r2, [pc, #76]	@ (8000e40 <MX_ETH_Init+0x90>)
 8000df4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000df8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000dfc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000dfe:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <MX_ETH_Init+0x80>)
 8000e00:	f001 fe20 	bl	8002a44 <HAL_ETH_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000e0a:	f000 fbb9 	bl	8001580 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e0e:	2238      	movs	r2, #56	@ 0x38
 8000e10:	2100      	movs	r1, #0
 8000e12:	480c      	ldr	r0, [pc, #48]	@ (8000e44 <MX_ETH_Init+0x94>)
 8000e14:	f009 f9ce 	bl	800a1b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e18:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <MX_ETH_Init+0x94>)
 8000e1a:	2221      	movs	r2, #33	@ 0x21
 8000e1c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e1e:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <MX_ETH_Init+0x94>)
 8000e20:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e24:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e26:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <MX_ETH_Init+0x94>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	240001cc 	.word	0x240001cc
 8000e34:	40028000 	.word	0x40028000
 8000e38:	2400027c 	.word	0x2400027c
 8000e3c:	240000c4 	.word	0x240000c4
 8000e40:	24000064 	.word	0x24000064
 8000e44:	24000194 	.word	0x24000194

08000e48 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08e      	sub	sp, #56	@ 0x38
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a59      	ldr	r2, [pc, #356]	@ (8000fcc <HAL_ETH_MspInit+0x184>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	f040 80ab 	bne.w	8000fc2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e6c:	4b58      	ldr	r3, [pc, #352]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000e6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e72:	4a57      	ldr	r2, [pc, #348]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000e74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e78:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e7c:	4b54      	ldr	r3, [pc, #336]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000e7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e86:	623b      	str	r3, [r7, #32]
 8000e88:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e8a:	4b51      	ldr	r3, [pc, #324]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000e8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e90:	4a4f      	ldr	r2, [pc, #316]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000e92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e96:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e9a:	4b4d      	ldr	r3, [pc, #308]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000e9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ea4:	61fb      	str	r3, [r7, #28]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ea8:	4b49      	ldr	r3, [pc, #292]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000eaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000eae:	4a48      	ldr	r2, [pc, #288]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000eb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000eb8:	4b45      	ldr	r3, [pc, #276]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000eba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	4b42      	ldr	r3, [pc, #264]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ecc:	4a40      	ldr	r2, [pc, #256]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000edc:	f003 0304 	and.w	r3, r3, #4
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee4:	4b3a      	ldr	r3, [pc, #232]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eea:	4a39      	ldr	r2, [pc, #228]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef4:	4b36      	ldr	r3, [pc, #216]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b33      	ldr	r3, [pc, #204]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f08:	4a31      	ldr	r2, [pc, #196]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000f0a:	f043 0302 	orr.w	r3, r3, #2
 8000f0e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f12:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f20:	4b2b      	ldr	r3, [pc, #172]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f26:	4a2a      	ldr	r2, [pc, #168]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000f28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f30:	4b27      	ldr	r3, [pc, #156]	@ (8000fd0 <HAL_ETH_MspInit+0x188>)
 8000f32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f3e:	2332      	movs	r3, #50	@ 0x32
 8000f40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f4e:	230b      	movs	r3, #11
 8000f50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	481e      	ldr	r0, [pc, #120]	@ (8000fd4 <HAL_ETH_MspInit+0x18c>)
 8000f5a:	f002 f9a7 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f5e:	2386      	movs	r3, #134	@ 0x86
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f6e:	230b      	movs	r3, #11
 8000f70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f76:	4619      	mov	r1, r3
 8000f78:	4817      	ldr	r0, [pc, #92]	@ (8000fd8 <HAL_ETH_MspInit+0x190>)
 8000f7a:	f002 f997 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f7e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f84:	2302      	movs	r3, #2
 8000f86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f90:	230b      	movs	r3, #11
 8000f92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4810      	ldr	r0, [pc, #64]	@ (8000fdc <HAL_ETH_MspInit+0x194>)
 8000f9c:	f002 f986 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000fa0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fb2:	230b      	movs	r3, #11
 8000fb4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4808      	ldr	r0, [pc, #32]	@ (8000fe0 <HAL_ETH_MspInit+0x198>)
 8000fbe:	f002 f975 	bl	80032ac <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3738      	adds	r7, #56	@ 0x38
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40028000 	.word	0x40028000
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	58020800 	.word	0x58020800
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	58020400 	.word	0x58020400
 8000fe0:	58021800 	.word	0x58021800

08000fe4 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08c      	sub	sp, #48	@ 0x30
 8000fe8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ffa:	4b7e      	ldr	r3, [pc, #504]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	4a7c      	ldr	r2, [pc, #496]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100a:	4b7a      	ldr	r3, [pc, #488]	@ (80011f4 <MX_GPIO_Init+0x210>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001010:	f003 0310 	and.w	r3, r3, #16
 8001014:	61bb      	str	r3, [r7, #24]
 8001016:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001018:	4b76      	ldr	r3, [pc, #472]	@ (80011f4 <MX_GPIO_Init+0x210>)
 800101a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101e:	4a75      	ldr	r2, [pc, #468]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001028:	4b72      	ldr	r3, [pc, #456]	@ (80011f4 <MX_GPIO_Init+0x210>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	617b      	str	r3, [r7, #20]
 8001034:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001036:	4b6f      	ldr	r3, [pc, #444]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800103c:	4a6d      	ldr	r2, [pc, #436]	@ (80011f4 <MX_GPIO_Init+0x210>)
 800103e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001046:	4b6b      	ldr	r3, [pc, #428]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b67      	ldr	r3, [pc, #412]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105a:	4a66      	ldr	r2, [pc, #408]	@ (80011f4 <MX_GPIO_Init+0x210>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001064:	4b63      	ldr	r3, [pc, #396]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001072:	4b60      	ldr	r3, [pc, #384]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001078:	4a5e      	ldr	r2, [pc, #376]	@ (80011f4 <MX_GPIO_Init+0x210>)
 800107a:	f043 0302 	orr.w	r3, r3, #2
 800107e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001082:	4b5c      	ldr	r3, [pc, #368]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001090:	4b58      	ldr	r3, [pc, #352]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001096:	4a57      	ldr	r2, [pc, #348]	@ (80011f4 <MX_GPIO_Init+0x210>)
 8001098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a0:	4b54      	ldr	r3, [pc, #336]	@ (80011f4 <MX_GPIO_Init+0x210>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	4b51      	ldr	r3, [pc, #324]	@ (80011f4 <MX_GPIO_Init+0x210>)
 80010b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b4:	4a4f      	ldr	r2, [pc, #316]	@ (80011f4 <MX_GPIO_Init+0x210>)
 80010b6:	f043 0308 	orr.w	r3, r3, #8
 80010ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010be:	4b4d      	ldr	r3, [pc, #308]	@ (80011f4 <MX_GPIO_Init+0x210>)
 80010c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	603b      	str	r3, [r7, #0]
 80010ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_SET);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2101      	movs	r1, #1
 80010d0:	4849      	ldr	r0, [pc, #292]	@ (80011f8 <MX_GPIO_Init+0x214>)
 80010d2:	f002 fa9b 	bl	800360c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f245 0101 	movw	r1, #20481	@ 0x5001
 80010dc:	4847      	ldr	r0, [pc, #284]	@ (80011fc <MX_GPIO_Init+0x218>)
 80010de:	f002 fa95 	bl	800360c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_DC_Pin|CAMERA_RST_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	f249 4102 	movw	r1, #37890	@ 0x9402
 80010e8:	4845      	ldr	r0, [pc, #276]	@ (8001200 <MX_GPIO_Init+0x21c>)
 80010ea:	f002 fa8f 	bl	800360c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80010ee:	2200      	movs	r2, #0
 80010f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010f4:	4843      	ldr	r0, [pc, #268]	@ (8001204 <MX_GPIO_Init+0x220>)
 80010f6:	f002 fa89 	bl	800360c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2102      	movs	r1, #2
 80010fe:	4842      	ldr	r0, [pc, #264]	@ (8001208 <MX_GPIO_Init+0x224>)
 8001100:	f002 fa84 	bl	800360c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001104:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	483c      	ldr	r0, [pc, #240]	@ (800120c <MX_GPIO_Init+0x228>)
 800111a:	f002 f8c7 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin;
 800111e:	2301      	movs	r3, #1
 8001120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001122:	2301      	movs	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CAMERA_PWDN_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	4619      	mov	r1, r3
 8001134:	4830      	ldr	r0, [pc, #192]	@ (80011f8 <MX_GPIO_Init+0x214>)
 8001136:	f002 f8b9 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin;
 800113a:	f245 0301 	movw	r3, #20481	@ 0x5001
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	482a      	ldr	r0, [pc, #168]	@ (80011fc <MX_GPIO_Init+0x218>)
 8001154:	f002 f8aa 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|CAMERA_RST_Pin|LCD_RESET_Pin|LCD_CS_Pin;
 8001158:	f249 4302 	movw	r3, #37890	@ 0x9402
 800115c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	4619      	mov	r1, r3
 8001170:	4823      	ldr	r0, [pc, #140]	@ (8001200 <MX_GPIO_Init+0x21c>)
 8001172:	f002 f89b 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001176:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800117a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	481d      	ldr	r0, [pc, #116]	@ (8001204 <MX_GPIO_Init+0x220>)
 8001190:	f002 f88c 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001194:	2380      	movs	r3, #128	@ 0x80
 8001196:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001198:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800119c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	4815      	ldr	r0, [pc, #84]	@ (8001200 <MX_GPIO_Init+0x21c>)
 80011aa:	f002 f87f 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80011ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80011c0:	2300      	movs	r3, #0
 80011c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	480b      	ldr	r0, [pc, #44]	@ (80011f8 <MX_GPIO_Init+0x214>)
 80011cc:	f002 f86e 	bl	80032ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 031c 	add.w	r3, r7, #28
 80011e4:	4619      	mov	r1, r3
 80011e6:	4808      	ldr	r0, [pc, #32]	@ (8001208 <MX_GPIO_Init+0x224>)
 80011e8:	f002 f860 	bl	80032ac <HAL_GPIO_Init>

}
 80011ec:	bf00      	nop
 80011ee:	3730      	adds	r7, #48	@ 0x30
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	58024400 	.word	0x58024400
 80011f8:	58020000 	.word	0x58020000
 80011fc:	58020400 	.word	0x58020400
 8001200:	58021800 	.word	0x58021800
 8001204:	58020c00 	.word	0x58020c00
 8001208:	58021000 	.word	0x58021000
 800120c:	58020800 	.word	0x58020800

08001210 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b1b      	ldr	r3, [pc, #108]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001216:	4a1c      	ldr	r2, [pc, #112]	@ (8001288 <MX_I2C1_Init+0x78>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60000008;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_I2C1_Init+0x74>)
 800121c:	4a1b      	ldr	r2, [pc, #108]	@ (800128c <MX_I2C1_Init+0x7c>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001228:	2201      	movs	r2, #1
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <MX_I2C1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_I2C1_Init+0x74>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124a:	480e      	ldr	r0, [pc, #56]	@ (8001284 <MX_I2C1_Init+0x74>)
 800124c:	f002 f9f8 	bl	8003640 <HAL_I2C_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001256:	f000 f993 	bl	8001580 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4809      	ldr	r0, [pc, #36]	@ (8001284 <MX_I2C1_Init+0x74>)
 800125e:	f002 ff7b 	bl	8004158 <HAL_I2CEx_ConfigAnalogFilter>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001268:	f000 f98a 	bl	8001580 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_I2C1_Init+0x74>)
 8001270:	f002 ffbd 	bl	80041ee <HAL_I2CEx_ConfigDigitalFilter>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800127a:	f000 f981 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	24000284 	.word	0x24000284
 8001288:	40005400 	.word	0x40005400
 800128c:	60000008 	.word	0x60000008

08001290 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b0ba      	sub	sp, #232	@ 0xe8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001298:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	22c0      	movs	r2, #192	@ 0xc0
 80012ae:	2100      	movs	r1, #0
 80012b0:	4618      	mov	r0, r3
 80012b2:	f008 ff7f 	bl	800a1b4 <memset>
  if(i2cHandle->Instance==I2C1)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a30      	ldr	r2, [pc, #192]	@ (800137c <HAL_I2C_MspInit+0xec>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d158      	bne.n	8001372 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012c0:	f04f 0208 	mov.w	r2, #8
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 8;
 80012cc:	2308      	movs	r3, #8
 80012ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 150;
 80012d0:	2396      	movs	r3, #150	@ 0x96
 80012d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 10;
 80012d4:	230a      	movs	r3, #10
 80012d6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 80012d8:	230a      	movs	r3, #10
 80012da:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 10;
 80012dc:	230a      	movs	r3, #10
 80012de:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80012e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012e8:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 80012ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	4618      	mov	r0, r3
 80012fc:	f004 f98e 	bl	800561c <HAL_RCCEx_PeriphCLKConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 8001306:	f000 f93b 	bl	8001580 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	4b1d      	ldr	r3, [pc, #116]	@ (8001380 <HAL_I2C_MspInit+0xf0>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001310:	4a1b      	ldr	r2, [pc, #108]	@ (8001380 <HAL_I2C_MspInit+0xf0>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800131a:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <HAL_I2C_MspInit+0xf0>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001328:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800132c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001330:	2312      	movs	r3, #18
 8001332:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001336:	2301      	movs	r3, #1
 8001338:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001342:	2304      	movs	r3, #4
 8001344:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001348:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800134c:	4619      	mov	r1, r3
 800134e:	480d      	ldr	r0, [pc, #52]	@ (8001384 <HAL_I2C_MspInit+0xf4>)
 8001350:	f001 ffac 	bl	80032ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_I2C_MspInit+0xf0>)
 8001356:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800135a:	4a09      	ldr	r2, [pc, #36]	@ (8001380 <HAL_I2C_MspInit+0xf0>)
 800135c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001360:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001364:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_I2C_MspInit+0xf0>)
 8001366:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800136a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800136e:	60bb      	str	r3, [r7, #8]
 8001370:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001372:	bf00      	nop
 8001374:	37e8      	adds	r7, #232	@ 0xe8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40005400 	.word	0x40005400
 8001380:	58024400 	.word	0x58024400
 8001384:	58020400 	.word	0x58020400

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	@ 0x30
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800138e:	f000 fdeb 	bl	8001f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001392:	f000 f871 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001396:	f7ff fe25 	bl	8000fe4 <MX_GPIO_Init>
  MX_ETH_Init();
 800139a:	f7ff fd09 	bl	8000db0 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 800139e:	f000 fd0b 	bl	8001db8 <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 80013a2:	f7ff fbf9 	bl	8000b98 <MX_DCMI_Init>
  MX_TIM1_Init();
 80013a6:	f000 fb11 	bl	80019cc <MX_TIM1_Init>
  MX_TIM4_Init();
 80013aa:	f000 fb65 	bl	8001a78 <MX_TIM4_Init>
  MX_I2C1_Init();
 80013ae:	f7ff ff2f 	bl	8001210 <MX_I2C1_Init>
  MX_SPI1_Init();
 80013b2:	f000 f8eb 	bl	800158c <MX_SPI1_Init>

  MX_USART3_UART_Init();
 80013b6:	f000 fc49 	bl	8001c4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_StatusTypeDef cameraConfigStatus = OV5640_PowerUpSequence();
 80013ba:	f7ff f9cf 	bl	800075c <OV5640_PowerUpSequence>
 80013be:	4603      	mov	r3, r0
 80013c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t reg1 = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  OV5640_ReadReg(OV5640_POLARITY_CTRL,&reg1);
 80013ca:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 80013ce:	4619      	mov	r1, r3
 80013d0:	f244 7040 	movw	r0, #18240	@ 0x4740
 80013d4:	f7ff f98e 	bl	80006f4 <OV5640_ReadReg>
  char buffReg1[20];
  sprintf(buffReg1, "chipID1: %d\r\n", reg1);
 80013d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80013dc:	461a      	mov	r2, r3
 80013de:	f107 0318 	add.w	r3, r7, #24
 80013e2:	4920      	ldr	r1, [pc, #128]	@ (8001464 <main+0xdc>)
 80013e4:	4618      	mov	r0, r3
 80013e6:	f008 fec3 	bl	800a170 <siprintf>
  HAL_UART_Transmit(&huart3, buffReg1, strlen(buffReg1), HAL_MAX_DELAY);
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7fe ff76 	bl	80002e0 <strlen>
 80013f4:	4603      	mov	r3, r0
 80013f6:	b29a      	uxth	r2, r3
 80013f8:	f107 0118 	add.w	r1, r7, #24
 80013fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001400:	4819      	ldr	r0, [pc, #100]	@ (8001468 <main+0xe0>)
 8001402:	f007 fa93 	bl	800892c <HAL_UART_Transmit>
	if (cameraConfigStatus == HAL_OK){
 8001406:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800140a:	2b00      	cmp	r3, #0
 800140c:	d113      	bne.n	8001436 <main+0xae>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin, GPIO_PIN_SET);
 800140e:	2201      	movs	r2, #1
 8001410:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001414:	4815      	ldr	r0, [pc, #84]	@ (800146c <main+0xe4>)
 8001416:	f002 f8f9 	bl	800360c <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 800141a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800141e:	f000 fe35 	bl	800208c <HAL_Delay>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin,GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001428:	4810      	ldr	r0, [pc, #64]	@ (800146c <main+0xe4>)
 800142a:	f002 f8ef 	bl	800360c <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800142e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001432:	f000 fe2b 	bl	800208c <HAL_Delay>
	}

	frameCapture();
 8001436:	f7ff faef 	bl	8000a18 <frameCapture>
	char buffFrame[20];
	sprintf(buffFrame, "Start of image: %d,\n\r", DCMI->DR);
 800143a:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <main+0xe8>)
 800143c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	490c      	ldr	r1, [pc, #48]	@ (8001474 <main+0xec>)
 8001442:	4618      	mov	r0, r3
 8001444:	f008 fe94 	bl	800a170 <siprintf>
	HAL_UART_Transmit(&huart3, buffFrame, strlen(buffFrame),HAL_MAX_DELAY);
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4618      	mov	r0, r3
 800144c:	f7fe ff48 	bl	80002e0 <strlen>
 8001450:	4603      	mov	r3, r0
 8001452:	b29a      	uxth	r2, r3
 8001454:	1d39      	adds	r1, r7, #4
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	4803      	ldr	r0, [pc, #12]	@ (8001468 <main+0xe0>)
 800145c:	f007 fa66 	bl	800892c <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <main+0xd8>
 8001464:	0800ab4c 	.word	0x0800ab4c
 8001468:	240003fc 	.word	0x240003fc
 800146c:	58020400 	.word	0x58020400
 8001470:	48020000 	.word	0x48020000
 8001474:	0800ab5c 	.word	0x0800ab5c

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b09c      	sub	sp, #112	@ 0x70
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001482:	224c      	movs	r2, #76	@ 0x4c
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f008 fe94 	bl	800a1b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2220      	movs	r2, #32
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f008 fe8e 	bl	800a1b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001498:	2002      	movs	r0, #2
 800149a:	f003 f825 	bl	80044e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4b35      	ldr	r3, [pc, #212]	@ (8001578 <SystemClock_Config+0x100>)
 80014a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a6:	4a34      	ldr	r2, [pc, #208]	@ (8001578 <SystemClock_Config+0x100>)
 80014a8:	f023 0301 	bic.w	r3, r3, #1
 80014ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80014ae:	4b32      	ldr	r3, [pc, #200]	@ (8001578 <SystemClock_Config+0x100>)
 80014b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	4b30      	ldr	r3, [pc, #192]	@ (800157c <SystemClock_Config+0x104>)
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	4a2f      	ldr	r2, [pc, #188]	@ (800157c <SystemClock_Config+0x104>)
 80014be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014c2:	6193      	str	r3, [r2, #24]
 80014c4:	4b2d      	ldr	r3, [pc, #180]	@ (800157c <SystemClock_Config+0x104>)
 80014c6:	699b      	ldr	r3, [r3, #24]
 80014c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80014d0:	bf00      	nop
 80014d2:	4b2a      	ldr	r3, [pc, #168]	@ (800157c <SystemClock_Config+0x104>)
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014de:	d1f8      	bne.n	80014d2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80014e0:	2321      	movs	r3, #33	@ 0x21
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014ea:	2301      	movs	r3, #1
 80014ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ee:	2302      	movs	r3, #2
 80014f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f2:	2302      	movs	r3, #2
 80014f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014f6:	2308      	movs	r3, #8
 80014f8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 480;
 80014fa:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80014fe:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001500:	2302      	movs	r3, #2
 8001502:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001504:	2304      	movs	r3, #4
 8001506:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001508:	2302      	movs	r3, #2
 800150a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800150c:	2300      	movs	r3, #0
 800150e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001510:	2300      	movs	r3, #0
 8001512:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800151c:	4618      	mov	r0, r3
 800151e:	f003 f82d 	bl	800457c <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001528:	f000 f82a 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	233f      	movs	r3, #63	@ 0x3f
 800152e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001530:	2303      	movs	r3, #3
 8001532:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001538:	2308      	movs	r3, #8
 800153a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800153c:	2340      	movs	r3, #64	@ 0x40
 800153e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001540:	2340      	movs	r3, #64	@ 0x40
 8001542:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001544:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001548:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800154a:	2340      	movs	r3, #64	@ 0x40
 800154c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2101      	movs	r1, #1
 8001552:	4618      	mov	r0, r3
 8001554:	f003 fc6c 	bl	8004e30 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xea>
  {
    Error_Handler();
 800155e:	f000 f80f 	bl	8001580 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8001562:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001566:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 800156a:	2000      	movs	r0, #0
 800156c:	f003 fe16 	bl	800519c <HAL_RCC_MCOConfig>
}
 8001570:	bf00      	nop
 8001572:	3770      	adds	r7, #112	@ 0x70
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	58000400 	.word	0x58000400
 800157c:	58024800 	.word	0x58024800

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <Error_Handler+0x8>

0800158c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001590:	4b28      	ldr	r3, [pc, #160]	@ (8001634 <MX_SPI1_Init+0xa8>)
 8001592:	4a29      	ldr	r2, [pc, #164]	@ (8001638 <MX_SPI1_Init+0xac>)
 8001594:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001596:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <MX_SPI1_Init+0xa8>)
 8001598:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800159c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800159e:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80015a4:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015a6:	2203      	movs	r2, #3
 80015a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015ac:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80015b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015bc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80015c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80015c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015d0:	4b18      	ldr	r3, [pc, #96]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015d6:	4b17      	ldr	r3, [pc, #92]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80015dc:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015de:	2200      	movs	r2, #0
 80015e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015e2:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015e4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015e8:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80015f0:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <MX_SPI1_Init+0xa8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001602:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <MX_SPI1_Init+0xa8>)
 8001604:	2200      	movs	r2, #0
 8001606:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001608:	4b0a      	ldr	r3, [pc, #40]	@ (8001634 <MX_SPI1_Init+0xa8>)
 800160a:	2200      	movs	r2, #0
 800160c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800160e:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <MX_SPI1_Init+0xa8>)
 8001610:	2200      	movs	r2, #0
 8001612:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <MX_SPI1_Init+0xa8>)
 8001616:	2200      	movs	r2, #0
 8001618:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800161a:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <MX_SPI1_Init+0xa8>)
 800161c:	2200      	movs	r2, #0
 800161e:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	@ (8001634 <MX_SPI1_Init+0xa8>)
 8001622:	f005 fe27 	bl	8007274 <HAL_SPI_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 800162c:	f7ff ffa8 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	240002d8 	.word	0x240002d8
 8001638:	40013000 	.word	0x40013000

0800163c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b0bc      	sub	sp, #240	@ 0xf0
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	22c0      	movs	r2, #192	@ 0xc0
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f008 fda9 	bl	800a1b4 <memset>
  if(spiHandle->Instance==SPI1)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a4b      	ldr	r2, [pc, #300]	@ (8001794 <HAL_SPI_MspInit+0x158>)
 8001668:	4293      	cmp	r3, r2
 800166a:	f040 808e 	bne.w	800178a <HAL_SPI_MspInit+0x14e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800166e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001672:	f04f 0300 	mov.w	r3, #0
 8001676:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800167a:	2300      	movs	r3, #0
 800167c:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800167e:	f107 0318 	add.w	r3, r7, #24
 8001682:	4618      	mov	r0, r3
 8001684:	f003 ffca 	bl	800561c <HAL_RCCEx_PeriphCLKConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 800168e:	f7ff ff77 	bl	8001580 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001692:	4b41      	ldr	r3, [pc, #260]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 8001694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001698:	4a3f      	ldr	r2, [pc, #252]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 800169a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800169e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80016a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80016a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b0:	4b39      	ldr	r3, [pc, #228]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016b6:	4a38      	ldr	r2, [pc, #224]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016c0:	4b35      	ldr	r3, [pc, #212]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ce:	4b32      	ldr	r3, [pc, #200]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d4:	4a30      	ldr	r2, [pc, #192]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016d6:	f043 0308 	orr.w	r3, r3, #8
 80016da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016de:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e4:	f003 0308 	and.w	r3, r3, #8
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f2:	4a29      	ldr	r2, [pc, #164]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fc:	4b26      	ldr	r3, [pc, #152]	@ (8001798 <HAL_SPI_MspInit+0x15c>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001706:	60bb      	str	r3, [r7, #8]
 8001708:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800170a:	2320      	movs	r3, #32
 800170c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001722:	2305      	movs	r3, #5
 8001724:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001728:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800172c:	4619      	mov	r1, r3
 800172e:	481b      	ldr	r0, [pc, #108]	@ (800179c <HAL_SPI_MspInit+0x160>)
 8001730:	f001 fdbc 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001734:	2380      	movs	r3, #128	@ 0x80
 8001736:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800174c:	2305      	movs	r3, #5
 800174e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001752:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001756:	4619      	mov	r1, r3
 8001758:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <HAL_SPI_MspInit+0x164>)
 800175a:	f001 fda7 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800175e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001778:	2305      	movs	r3, #5
 800177a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800177e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001782:	4619      	mov	r1, r3
 8001784:	4807      	ldr	r0, [pc, #28]	@ (80017a4 <HAL_SPI_MspInit+0x168>)
 8001786:	f001 fd91 	bl	80032ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800178a:	bf00      	nop
 800178c:	37f0      	adds	r7, #240	@ 0xf0
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40013000 	.word	0x40013000
 8001798:	58024400 	.word	0x58024400
 800179c:	58020000 	.word	0x58020000
 80017a0:	58020c00 	.word	0x58020c00
 80017a4:	58021800 	.word	0x58021800

080017a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ae:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <HAL_MspInit+0x30>)
 80017b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017b4:	4a08      	ldr	r2, [pc, #32]	@ (80017d8 <HAL_MspInit+0x30>)
 80017b6:	f043 0302 	orr.w	r3, r3, #2
 80017ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <HAL_MspInit+0x30>)
 80017c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	58024400 	.word	0x58024400

080017dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <NMI_Handler+0x4>

080017e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <HardFault_Handler+0x4>

080017ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <MemManage_Handler+0x4>

080017f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <BusFault_Handler+0x4>

080017fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001800:	bf00      	nop
 8001802:	e7fd      	b.n	8001800 <UsageFault_Handler+0x4>

08001804 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001832:	f000 fc0b 	bl	800204c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
	...

0800183c <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <DCMI_IRQHandler+0x10>)
 8001842:	f000 fdf1 	bl	8002428 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	24000144 	.word	0x24000144

08001850 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8001858:	4a14      	ldr	r2, [pc, #80]	@ (80018ac <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001872:	4b10      	ldr	r3, [pc, #64]	@ (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
		errno = ENOMEM;
 8001880:	f008 fca0 	bl	800a1c4 <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	@ (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	@ (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	24080000 	.word	0x24080000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	24000360 	.word	0x24000360
 80018b8:	24000ac0 	.word	0x24000ac0

080018bc <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 80018c0:	4b37      	ldr	r3, [pc, #220]	@ (80019a0 <SystemInit+0xe4>)
 80018c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018c6:	4a36      	ldr	r2, [pc, #216]	@ (80019a0 <SystemInit+0xe4>)
 80018c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80018d0:	4b34      	ldr	r3, [pc, #208]	@ (80019a4 <SystemInit+0xe8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 030f 	and.w	r3, r3, #15
 80018d8:	2b06      	cmp	r3, #6
 80018da:	d807      	bhi.n	80018ec <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80018dc:	4b31      	ldr	r3, [pc, #196]	@ (80019a4 <SystemInit+0xe8>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f023 030f 	bic.w	r3, r3, #15
 80018e4:	4a2f      	ldr	r2, [pc, #188]	@ (80019a4 <SystemInit+0xe8>)
 80018e6:	f043 0307 	orr.w	r3, r3, #7
 80018ea:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80018ec:	4b2e      	ldr	r3, [pc, #184]	@ (80019a8 <SystemInit+0xec>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2d      	ldr	r2, [pc, #180]	@ (80019a8 <SystemInit+0xec>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80018f8:	4b2b      	ldr	r3, [pc, #172]	@ (80019a8 <SystemInit+0xec>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80018fe:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <SystemInit+0xec>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4929      	ldr	r1, [pc, #164]	@ (80019a8 <SystemInit+0xec>)
 8001904:	4b29      	ldr	r3, [pc, #164]	@ (80019ac <SystemInit+0xf0>)
 8001906:	4013      	ands	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800190a:	4b26      	ldr	r3, [pc, #152]	@ (80019a4 <SystemInit+0xe8>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b00      	cmp	r3, #0
 8001914:	d007      	beq.n	8001926 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001916:	4b23      	ldr	r3, [pc, #140]	@ (80019a4 <SystemInit+0xe8>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f023 030f 	bic.w	r3, r3, #15
 800191e:	4a21      	ldr	r2, [pc, #132]	@ (80019a4 <SystemInit+0xe8>)
 8001920:	f043 0307 	orr.w	r3, r3, #7
 8001924:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8001926:	4b20      	ldr	r3, [pc, #128]	@ (80019a8 <SystemInit+0xec>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 800192c:	4b1e      	ldr	r3, [pc, #120]	@ (80019a8 <SystemInit+0xec>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8001932:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <SystemInit+0xec>)
 8001934:	2200      	movs	r2, #0
 8001936:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8001938:	4b1b      	ldr	r3, [pc, #108]	@ (80019a8 <SystemInit+0xec>)
 800193a:	4a1d      	ldr	r2, [pc, #116]	@ (80019b0 <SystemInit+0xf4>)
 800193c:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800193e:	4b1a      	ldr	r3, [pc, #104]	@ (80019a8 <SystemInit+0xec>)
 8001940:	4a1c      	ldr	r2, [pc, #112]	@ (80019b4 <SystemInit+0xf8>)
 8001942:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8001944:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <SystemInit+0xec>)
 8001946:	4a1c      	ldr	r2, [pc, #112]	@ (80019b8 <SystemInit+0xfc>)
 8001948:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <SystemInit+0xec>)
 800194c:	2200      	movs	r2, #0
 800194e:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001950:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <SystemInit+0xec>)
 8001952:	4a19      	ldr	r2, [pc, #100]	@ (80019b8 <SystemInit+0xfc>)
 8001954:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8001956:	4b14      	ldr	r3, [pc, #80]	@ (80019a8 <SystemInit+0xec>)
 8001958:	2200      	movs	r2, #0
 800195a:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <SystemInit+0xec>)
 800195e:	4a16      	ldr	r2, [pc, #88]	@ (80019b8 <SystemInit+0xfc>)
 8001960:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001962:	4b11      	ldr	r3, [pc, #68]	@ (80019a8 <SystemInit+0xec>)
 8001964:	2200      	movs	r2, #0
 8001966:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8001968:	4b0f      	ldr	r3, [pc, #60]	@ (80019a8 <SystemInit+0xec>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0e      	ldr	r2, [pc, #56]	@ (80019a8 <SystemInit+0xec>)
 800196e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001972:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001974:	4b0c      	ldr	r3, [pc, #48]	@ (80019a8 <SystemInit+0xec>)
 8001976:	2200      	movs	r2, #0
 8001978:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800197a:	4b10      	ldr	r3, [pc, #64]	@ (80019bc <SystemInit+0x100>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <SystemInit+0x104>)
 8001980:	4013      	ands	r3, r2
 8001982:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001986:	d202      	bcs.n	800198e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8001988:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <SystemInit+0x108>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <SystemInit+0x10c>)
 8001990:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001994:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00
 80019a4:	52002000 	.word	0x52002000
 80019a8:	58024400 	.word	0x58024400
 80019ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80019b0:	02020200 	.word	0x02020200
 80019b4:	01ff0000 	.word	0x01ff0000
 80019b8:	01010280 	.word	0x01010280
 80019bc:	5c001000 	.word	0x5c001000
 80019c0:	ffff0000 	.word	0xffff0000
 80019c4:	51008108 	.word	0x51008108
 80019c8:	52004000 	.word	0x52004000

080019cc <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019d2:	f107 030c 	add.w	r3, r7, #12
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e2:	463b      	mov	r3, r7
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ec:	4b20      	ldr	r3, [pc, #128]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 80019ee:	4a21      	ldr	r2, [pc, #132]	@ (8001a74 <MX_TIM1_Init+0xa8>)
 80019f0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a04:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a0c:	4b18      	ldr	r3, [pc, #96]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a12:	4b17      	ldr	r3, [pc, #92]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a18:	4815      	ldr	r0, [pc, #84]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a1a:	f005 fd6a 	bl	80074f2 <HAL_TIM_Base_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001a24:	f7ff fdac 	bl	8001580 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	4619      	mov	r1, r3
 8001a36:	480e      	ldr	r0, [pc, #56]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a38:	f006 f92e 	bl	8007c98 <HAL_TIM_SlaveConfigSynchro>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001a42:	f7ff fd9d 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a46:	2300      	movs	r3, #0
 8001a48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a52:	463b      	mov	r3, r7
 8001a54:	4619      	mov	r1, r3
 8001a56:	4806      	ldr	r0, [pc, #24]	@ (8001a70 <MX_TIM1_Init+0xa4>)
 8001a58:	f006 fe8a 	bl	8008770 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001a62:	f7ff fd8d 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a66:	bf00      	nop
 8001a68:	3720      	adds	r7, #32
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	24000364 	.word	0x24000364
 8001a74:	40010000 	.word	0x40010000

08001a78 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	@ 0x38
 8001a7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a98:	463b      	mov	r3, r7
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
 8001aa4:	611a      	str	r2, [r3, #16]
 8001aa6:	615a      	str	r2, [r3, #20]
 8001aa8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001aaa:	4b2c      	ldr	r3, [pc, #176]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001aac:	4a2c      	ldr	r2, [pc, #176]	@ (8001b60 <MX_TIM4_Init+0xe8>)
 8001aae:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab6:	4b29      	ldr	r3, [pc, #164]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8001abc:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001abe:	2209      	movs	r2, #9
 8001ac0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac2:	4b26      	ldr	r3, [pc, #152]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac8:	4b24      	ldr	r3, [pc, #144]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ace:	4823      	ldr	r0, [pc, #140]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001ad0:	f005 fd0f 	bl	80074f2 <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ada:	f7ff fd51 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ade:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ae4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	481c      	ldr	r0, [pc, #112]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001aec:	f005 ffdc 	bl	8007aa8 <HAL_TIM_ConfigClockSource>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001af6:	f7ff fd43 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001afa:	4818      	ldr	r0, [pc, #96]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001afc:	f005 fd50 	bl	80075a0 <HAL_TIM_PWM_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b06:	f7ff fd3b 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	4810      	ldr	r0, [pc, #64]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001b1a:	f006 fe29 	bl	8008770 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b24:	f7ff fd2c 	bl	8001580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b28:	2360      	movs	r3, #96	@ 0x60
 8001b2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 8001b2c:	2305      	movs	r3, #5
 8001b2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4807      	ldr	r0, [pc, #28]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001b40:	f005 fe9e 	bl	8007880 <HAL_TIM_PWM_ConfigChannel>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b4a:	f7ff fd19 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b4e:	4803      	ldr	r0, [pc, #12]	@ (8001b5c <MX_TIM4_Init+0xe4>)
 8001b50:	f000 f842 	bl	8001bd8 <HAL_TIM_MspPostInit>

}
 8001b54:	bf00      	nop
 8001b56:	3738      	adds	r7, #56	@ 0x38
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	240003b0 	.word	0x240003b0
 8001b60:	40000800 	.word	0x40000800

08001b64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a16      	ldr	r2, [pc, #88]	@ (8001bcc <HAL_TIM_Base_MspInit+0x68>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d10f      	bne.n	8001b96 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b76:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001b78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b7c:	4a14      	ldr	r2, [pc, #80]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b86:	4b12      	ldr	r3, [pc, #72]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001b88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b94:	e013      	b.n	8001bbe <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM4)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x70>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d10e      	bne.n	8001bbe <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001ba2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001ba8:	f043 0304 	orr.w	r3, r3, #4
 8001bac:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bb0:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x6c>)
 8001bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
}
 8001bbe:	bf00      	nop
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40010000 	.word	0x40010000
 8001bd0:	58024400 	.word	0x58024400
 8001bd4:	40000800 	.word	0x40000800

08001bd8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be0:	f107 030c 	add.w	r3, r7, #12
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a12      	ldr	r2, [pc, #72]	@ (8001c40 <HAL_TIM_MspPostInit+0x68>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d11e      	bne.n	8001c38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	4b12      	ldr	r3, [pc, #72]	@ (8001c44 <HAL_TIM_MspPostInit+0x6c>)
 8001bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c00:	4a10      	ldr	r2, [pc, #64]	@ (8001c44 <HAL_TIM_MspPostInit+0x6c>)
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c44 <HAL_TIM_MspPostInit+0x6c>)
 8001c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c18:	2340      	movs	r3, #64	@ 0x40
 8001c1a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	4619      	mov	r1, r3
 8001c32:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <HAL_TIM_MspPostInit+0x70>)
 8001c34:	f001 fb3a 	bl	80032ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c38:	bf00      	nop
 8001c3a:	3720      	adds	r7, #32
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40000800 	.word	0x40000800
 8001c44:	58024400 	.word	0x58024400
 8001c48:	58020400 	.word	0x58020400

08001c4c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c50:	4b22      	ldr	r3, [pc, #136]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c52:	4a23      	ldr	r2, [pc, #140]	@ (8001ce0 <MX_USART3_UART_Init+0x94>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c56:	4b21      	ldr	r3, [pc, #132]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b1d      	ldr	r3, [pc, #116]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b1a      	ldr	r3, [pc, #104]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b17      	ldr	r3, [pc, #92]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c82:	4b16      	ldr	r3, [pc, #88]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c88:	4b14      	ldr	r3, [pc, #80]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8e:	4b13      	ldr	r3, [pc, #76]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c94:	4811      	ldr	r0, [pc, #68]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001c96:	f006 fdf9 	bl	800888c <HAL_UART_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001ca0:	f7ff fc6e 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001ca8:	f007 fe8f 	bl	80099ca <HAL_UARTEx_SetTxFifoThreshold>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001cb2:	f7ff fc65 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4808      	ldr	r0, [pc, #32]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001cba:	f007 fec4 	bl	8009a46 <HAL_UARTEx_SetRxFifoThreshold>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001cc4:	f7ff fc5c 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001cc8:	4804      	ldr	r0, [pc, #16]	@ (8001cdc <MX_USART3_UART_Init+0x90>)
 8001cca:	f007 fe45 	bl	8009958 <HAL_UARTEx_DisableFifoMode>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001cd4:	f7ff fc54 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	240003fc 	.word	0x240003fc
 8001ce0:	40004800 	.word	0x40004800

08001ce4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b0ba      	sub	sp, #232	@ 0xe8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	22c0      	movs	r2, #192	@ 0xc0
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f008 fa55 	bl	800a1b4 <memset>
  if(uartHandle->Instance==USART3)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a27      	ldr	r2, [pc, #156]	@ (8001dac <HAL_UART_MspInit+0xc8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d146      	bne.n	8001da2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001d14:	f04f 0202 	mov.w	r2, #2
 8001d18:	f04f 0300 	mov.w	r3, #0
 8001d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f003 fc76 	bl	800561c <HAL_RCCEx_PeriphCLKConfig>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001d36:	f7ff fc23 	bl	8001580 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	@ (8001db0 <HAL_UART_MspInit+0xcc>)
 8001d3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d40:	4a1b      	ldr	r2, [pc, #108]	@ (8001db0 <HAL_UART_MspInit+0xcc>)
 8001d42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001d4a:	4b19      	ldr	r3, [pc, #100]	@ (8001db0 <HAL_UART_MspInit+0xcc>)
 8001d4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001d50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d58:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <HAL_UART_MspInit+0xcc>)
 8001d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d5e:	4a14      	ldr	r2, [pc, #80]	@ (8001db0 <HAL_UART_MspInit+0xcc>)
 8001d60:	f043 0308 	orr.w	r3, r3, #8
 8001d64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HAL_UART_MspInit+0xcc>)
 8001d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d76:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d7a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d90:	2307      	movs	r3, #7
 8001d92:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d96:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	@ (8001db4 <HAL_UART_MspInit+0xd0>)
 8001d9e:	f001 fa85 	bl	80032ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001da2:	bf00      	nop
 8001da4:	37e8      	adds	r7, #232	@ 0xe8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40004800 	.word	0x40004800
 8001db0:	58024400 	.word	0x58024400
 8001db4:	58020c00 	.word	0x58020c00

08001db8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001dbc:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dbe:	4a16      	ldr	r2, [pc, #88]	@ (8001e18 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001dc2:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dc4:	2209      	movs	r2, #9
 8001dc6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dca:	2202      	movs	r2, #2
 8001dcc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001dce:	4b11      	ldr	r3, [pc, #68]	@ (8001e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ddc:	2201      	movs	r2, #1
 8001dde:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001df2:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e00:	f002 fa41 	bl	8004286 <HAL_PCD_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001e0a:	f7ff fbb9 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	24000490 	.word	0x24000490
 8001e18:	40080000 	.word	0x40080000

08001e1c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b0ba      	sub	sp, #232	@ 0xe8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e34:	f107 0310 	add.w	r3, r7, #16
 8001e38:	22c0      	movs	r2, #192	@ 0xc0
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f008 f9b9 	bl	800a1b4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a30      	ldr	r2, [pc, #192]	@ (8001f08 <HAL_PCD_MspInit+0xec>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d159      	bne.n	8001f00 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001e4c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001e58:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001e5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 fbd9 	bl	800561c <HAL_RCCEx_PeriphCLKConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001e70:	f7ff fb86 	bl	8001580 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001e74:	f002 fb72 	bl	800455c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e78:	4b24      	ldr	r3, [pc, #144]	@ (8001f0c <HAL_PCD_MspInit+0xf0>)
 8001e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e7e:	4a23      	ldr	r2, [pc, #140]	@ (8001f0c <HAL_PCD_MspInit+0xf0>)
 8001e80:	f043 0301 	orr.w	r3, r3, #1
 8001e84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e88:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <HAL_PCD_MspInit+0xf0>)
 8001e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4817      	ldr	r0, [pc, #92]	@ (8001f10 <HAL_PCD_MspInit+0xf4>)
 8001eb2:	f001 f9fb 	bl	80032ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001eb6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001ed0:	230a      	movs	r3, #10
 8001ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001eda:	4619      	mov	r1, r3
 8001edc:	480c      	ldr	r0, [pc, #48]	@ (8001f10 <HAL_PCD_MspInit+0xf4>)
 8001ede:	f001 f9e5 	bl	80032ac <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <HAL_PCD_MspInit+0xf0>)
 8001ee4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ee8:	4a08      	ldr	r2, [pc, #32]	@ (8001f0c <HAL_PCD_MspInit+0xf0>)
 8001eea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001eee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001ef2:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_PCD_MspInit+0xf0>)
 8001ef4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001ef8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001f00:	bf00      	nop
 8001f02:	37e8      	adds	r7, #232	@ 0xe8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40080000 	.word	0x40080000
 8001f0c:	58024400 	.word	0x58024400
 8001f10:	58020000 	.word	0x58020000

08001f14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f18:	f7ff fcd0 	bl	80018bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f1c:	480c      	ldr	r0, [pc, #48]	@ (8001f50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f1e:	490d      	ldr	r1, [pc, #52]	@ (8001f54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f20:	4a0d      	ldr	r2, [pc, #52]	@ (8001f58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f24:	e002      	b.n	8001f2c <LoopCopyDataInit>

08001f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2a:	3304      	adds	r3, #4

08001f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f30:	d3f9      	bcc.n	8001f26 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f32:	4a0a      	ldr	r2, [pc, #40]	@ (8001f5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f34:	4c0a      	ldr	r4, [pc, #40]	@ (8001f60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f38:	e001      	b.n	8001f3e <LoopFillZerobss>

08001f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f3c:	3204      	adds	r2, #4

08001f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f40:	d3fb      	bcc.n	8001f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f42:	f008 f945 	bl	800a1d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f46:	f7ff fa1f 	bl	8001388 <main>
  bx  lr
 8001f4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f4c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f50:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f54:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001f58:	0800ac0c 	.word	0x0800ac0c
  ldr r2, =_sbss
 8001f5c:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001f60:	24000ac0 	.word	0x24000ac0

08001f64 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC3_IRQHandler>
	...

08001f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f6e:	2003      	movs	r0, #3
 8001f70:	f000 f9a0 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f74:	f003 f97c 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <HAL_Init+0x68>)
 8001f7c:	699b      	ldr	r3, [r3, #24]
 8001f7e:	0a1b      	lsrs	r3, r3, #8
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	4913      	ldr	r1, [pc, #76]	@ (8001fd4 <HAL_Init+0x6c>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f92:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <HAL_Init+0x68>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	f003 030f 	and.w	r3, r3, #15
 8001f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fd4 <HAL_Init+0x6c>)
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd8 <HAL_Init+0x70>)
 8001faa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001fac:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <HAL_Init+0x74>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f000 f814 	bl	8001fe0 <HAL_InitTick>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e002      	b.n	8001fc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc2:	f7ff fbf1 	bl	80017a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	58024400 	.word	0x58024400
 8001fd4:	0800ab90 	.word	0x0800ab90
 8001fd8:	24000008 	.word	0x24000008
 8001fdc:	24000004 	.word	0x24000004

08001fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fe8:	4b15      	ldr	r3, [pc, #84]	@ (8002040 <HAL_InitTick+0x60>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e021      	b.n	8002038 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <HAL_InitTick+0x64>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <HAL_InitTick+0x60>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002002:	fbb3 f3f1 	udiv	r3, r3, r1
 8002006:	fbb2 f3f3 	udiv	r3, r2, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f000 f985 	bl	800231a <HAL_SYSTICK_Config>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e00e      	b.n	8002038 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b0f      	cmp	r3, #15
 800201e:	d80a      	bhi.n	8002036 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f000 f94f 	bl	80022ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800202c:	4a06      	ldr	r2, [pc, #24]	@ (8002048 <HAL_InitTick+0x68>)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e000      	b.n	8002038 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
}
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	24000010 	.word	0x24000010
 8002044:	24000004 	.word	0x24000004
 8002048:	2400000c 	.word	0x2400000c

0800204c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002050:	4b06      	ldr	r3, [pc, #24]	@ (800206c <HAL_IncTick+0x20>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <HAL_IncTick+0x24>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	4a04      	ldr	r2, [pc, #16]	@ (8002070 <HAL_IncTick+0x24>)
 800205e:	6013      	str	r3, [r2, #0]
}
 8002060:	bf00      	nop
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	24000010 	.word	0x24000010
 8002070:	24000974 	.word	0x24000974

08002074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  return uwTick;
 8002078:	4b03      	ldr	r3, [pc, #12]	@ (8002088 <HAL_GetTick+0x14>)
 800207a:	681b      	ldr	r3, [r3, #0]
}
 800207c:	4618      	mov	r0, r3
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	24000974 	.word	0x24000974

0800208c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff ffee 	bl	8002074 <HAL_GetTick>
 8002098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020a4:	d005      	beq.n	80020b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020a6:	4b0a      	ldr	r3, [pc, #40]	@ (80020d0 <HAL_Delay+0x44>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	461a      	mov	r2, r3
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4413      	add	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020b2:	bf00      	nop
 80020b4:	f7ff ffde 	bl	8002074 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	68fa      	ldr	r2, [r7, #12]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d8f7      	bhi.n	80020b4 <HAL_Delay+0x28>
  {
  }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	24000010 	.word	0x24000010

080020d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <HAL_GetREVID+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0c1b      	lsrs	r3, r3, #16
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	5c001000 	.word	0x5c001000

080020ec <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80020f4:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80020fc:	4904      	ldr	r1, [pc, #16]	@ (8002110 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
}
 8002104:	bf00      	nop
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	58000400 	.word	0x58000400

08002114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002124:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <__NVIC_SetPriorityGrouping+0x40>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 800213e:	4313      	orrs	r3, r2
 8002140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002142:	4a04      	ldr	r2, [pc, #16]	@ (8002154 <__NVIC_SetPriorityGrouping+0x40>)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	60d3      	str	r3, [r2, #12]
}
 8002148:	bf00      	nop
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	e000ed00 	.word	0xe000ed00
 8002158:	05fa0000 	.word	0x05fa0000

0800215c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <__NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002186:	2b00      	cmp	r3, #0
 8002188:	db0b      	blt.n	80021a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	f003 021f 	and.w	r2, r3, #31
 8002190:	4907      	ldr	r1, [pc, #28]	@ (80021b0 <__NVIC_EnableIRQ+0x38>)
 8002192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	2001      	movs	r0, #1
 800219a:	fa00 f202 	lsl.w	r2, r0, r2
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	@ (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	@ (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	@ 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	@ 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002280:	d301      	bcc.n	8002286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002282:	2301      	movs	r3, #1
 8002284:	e00f      	b.n	80022a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002286:	4a0a      	ldr	r2, [pc, #40]	@ (80022b0 <SysTick_Config+0x40>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228e:	210f      	movs	r1, #15
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f7ff ff8e 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <SysTick_Config+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229e:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <SysTick_Config+0x40>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff29 	bl	8002114 <__NVIC_SetPriorityGrouping>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022d8:	f7ff ff40 	bl	800215c <__NVIC_GetPriorityGrouping>
 80022dc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	6978      	ldr	r0, [r7, #20]
 80022e4:	f7ff ff90 	bl	8002208 <NVIC_EncodePriority>
 80022e8:	4602      	mov	r2, r0
 80022ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff ff5f 	bl	80021b4 <__NVIC_SetPriority>
}
 80022f6:	bf00      	nop
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b082      	sub	sp, #8
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff33 	bl	8002178 <__NVIC_EnableIRQ>
}
 8002312:	bf00      	nop
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffa4 	bl	8002270 <SysTick_Config>
 8002328:	4603      	mov	r3, r0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
	...

08002334 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e069      	b.n	800241a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7fe fc54 	bl	8000c00 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2202      	movs	r2, #2
 800235c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d002      	beq.n	800236e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6819      	ldr	r1, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4b2a      	ldr	r3, [pc, #168]	@ (8002424 <HAL_DCMI_Init+0xf0>)
 800237a:	400b      	ands	r3, r1
 800237c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6819      	ldr	r1, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002392:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800239e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80023aa:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80023b6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80023c2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	2b10      	cmp	r3, #16
 80023d2:	d112      	bne.n	80023fa <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	7f1b      	ldrb	r3, [r3, #28]
 80023d8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	7f5b      	ldrb	r3, [r3, #29]
 80023de:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80023e0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	7f9b      	ldrb	r3, [r3, #30]
 80023e6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80023e8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	7fdb      	ldrb	r3, [r3, #31]
 80023f0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80023f6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80023f8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 021e 	orr.w	r2, r2, #30
 8002408:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	ffe0f007 	.word	0xffe0f007

08002428 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d016      	beq.n	8002470 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2204      	movs	r2, #4
 8002448:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244e:	f043 0202 	orr.w	r2, r3, #2
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2204      	movs	r2, #4
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002462:	4a31      	ldr	r2, [pc, #196]	@ (8002528 <HAL_DCMI_IRQHandler+0x100>)
 8002464:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800246a:	4618      	mov	r0, r3
 800246c:	f000 f8a4 	bl	80025b8 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d016      	beq.n	80024a8 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2202      	movs	r2, #2
 8002480:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2204      	movs	r2, #4
 8002492:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800249a:	4a23      	ldr	r2, [pc, #140]	@ (8002528 <HAL_DCMI_IRQHandler+0x100>)
 800249c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 f888 	bl	80025b8 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d006      	beq.n	80024c0 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2210      	movs	r2, #16
 80024b8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 f840 	bl	8002540 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d006      	beq.n	80024d8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	2208      	movs	r2, #8
 80024d0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f83e 	bl	8002554 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01d      	beq.n	800251e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d107      	bne.n	8002500 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 021e 	bic.w	r2, r2, #30
 80024fe:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0201 	bic.w	r2, r2, #1
 800250e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2201      	movs	r2, #1
 8002516:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f825 	bl	8002568 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	0800257d 	.word	0x0800257d

0800252c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002588:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800258e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002590:	2b02      	cmp	r3, #2
 8002592:	d009      	beq.n	80025a8 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7ff ffbf 	bl	800252c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e237      	b.n	8002a3a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d004      	beq.n	80025e0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2280      	movs	r2, #128	@ 0x80
 80025da:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e22c      	b.n	8002a3a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a5c      	ldr	r2, [pc, #368]	@ (8002758 <HAL_DMA_Abort_IT+0x1a0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d04a      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a5b      	ldr	r2, [pc, #364]	@ (800275c <HAL_DMA_Abort_IT+0x1a4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d045      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a59      	ldr	r2, [pc, #356]	@ (8002760 <HAL_DMA_Abort_IT+0x1a8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d040      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a58      	ldr	r2, [pc, #352]	@ (8002764 <HAL_DMA_Abort_IT+0x1ac>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d03b      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a56      	ldr	r2, [pc, #344]	@ (8002768 <HAL_DMA_Abort_IT+0x1b0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d036      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a55      	ldr	r2, [pc, #340]	@ (800276c <HAL_DMA_Abort_IT+0x1b4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d031      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a53      	ldr	r2, [pc, #332]	@ (8002770 <HAL_DMA_Abort_IT+0x1b8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d02c      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a52      	ldr	r2, [pc, #328]	@ (8002774 <HAL_DMA_Abort_IT+0x1bc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d027      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a50      	ldr	r2, [pc, #320]	@ (8002778 <HAL_DMA_Abort_IT+0x1c0>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d022      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a4f      	ldr	r2, [pc, #316]	@ (800277c <HAL_DMA_Abort_IT+0x1c4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d01d      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a4d      	ldr	r2, [pc, #308]	@ (8002780 <HAL_DMA_Abort_IT+0x1c8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d018      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a4c      	ldr	r2, [pc, #304]	@ (8002784 <HAL_DMA_Abort_IT+0x1cc>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d013      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a4a      	ldr	r2, [pc, #296]	@ (8002788 <HAL_DMA_Abort_IT+0x1d0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00e      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a49      	ldr	r2, [pc, #292]	@ (800278c <HAL_DMA_Abort_IT+0x1d4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d009      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a47      	ldr	r2, [pc, #284]	@ (8002790 <HAL_DMA_Abort_IT+0x1d8>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <HAL_DMA_Abort_IT+0xc8>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a46      	ldr	r2, [pc, #280]	@ (8002794 <HAL_DMA_Abort_IT+0x1dc>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d101      	bne.n	8002684 <HAL_DMA_Abort_IT+0xcc>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_DMA_Abort_IT+0xce>
 8002684:	2300      	movs	r3, #0
 8002686:	2b00      	cmp	r3, #0
 8002688:	f000 8086 	beq.w	8002798 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2204      	movs	r2, #4
 8002690:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a2f      	ldr	r2, [pc, #188]	@ (8002758 <HAL_DMA_Abort_IT+0x1a0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d04a      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a2e      	ldr	r2, [pc, #184]	@ (800275c <HAL_DMA_Abort_IT+0x1a4>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d045      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002760 <HAL_DMA_Abort_IT+0x1a8>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d040      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a2b      	ldr	r2, [pc, #172]	@ (8002764 <HAL_DMA_Abort_IT+0x1ac>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d03b      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a29      	ldr	r2, [pc, #164]	@ (8002768 <HAL_DMA_Abort_IT+0x1b0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d036      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a28      	ldr	r2, [pc, #160]	@ (800276c <HAL_DMA_Abort_IT+0x1b4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d031      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a26      	ldr	r2, [pc, #152]	@ (8002770 <HAL_DMA_Abort_IT+0x1b8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d02c      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a25      	ldr	r2, [pc, #148]	@ (8002774 <HAL_DMA_Abort_IT+0x1bc>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d027      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a23      	ldr	r2, [pc, #140]	@ (8002778 <HAL_DMA_Abort_IT+0x1c0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d022      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a22      	ldr	r2, [pc, #136]	@ (800277c <HAL_DMA_Abort_IT+0x1c4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d01d      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a20      	ldr	r2, [pc, #128]	@ (8002780 <HAL_DMA_Abort_IT+0x1c8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d018      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1f      	ldr	r2, [pc, #124]	@ (8002784 <HAL_DMA_Abort_IT+0x1cc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d013      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1d      	ldr	r2, [pc, #116]	@ (8002788 <HAL_DMA_Abort_IT+0x1d0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d00e      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a1c      	ldr	r2, [pc, #112]	@ (800278c <HAL_DMA_Abort_IT+0x1d4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d009      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a1a      	ldr	r2, [pc, #104]	@ (8002790 <HAL_DMA_Abort_IT+0x1d8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d004      	beq.n	8002734 <HAL_DMA_Abort_IT+0x17c>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a19      	ldr	r2, [pc, #100]	@ (8002794 <HAL_DMA_Abort_IT+0x1dc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d108      	bne.n	8002746 <HAL_DMA_Abort_IT+0x18e>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 0201 	bic.w	r2, r2, #1
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	e178      	b.n	8002a38 <HAL_DMA_Abort_IT+0x480>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0201 	bic.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	e16f      	b.n	8002a38 <HAL_DMA_Abort_IT+0x480>
 8002758:	40020010 	.word	0x40020010
 800275c:	40020028 	.word	0x40020028
 8002760:	40020040 	.word	0x40020040
 8002764:	40020058 	.word	0x40020058
 8002768:	40020070 	.word	0x40020070
 800276c:	40020088 	.word	0x40020088
 8002770:	400200a0 	.word	0x400200a0
 8002774:	400200b8 	.word	0x400200b8
 8002778:	40020410 	.word	0x40020410
 800277c:	40020428 	.word	0x40020428
 8002780:	40020440 	.word	0x40020440
 8002784:	40020458 	.word	0x40020458
 8002788:	40020470 	.word	0x40020470
 800278c:	40020488 	.word	0x40020488
 8002790:	400204a0 	.word	0x400204a0
 8002794:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 020e 	bic.w	r2, r2, #14
 80027a6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a6c      	ldr	r2, [pc, #432]	@ (8002960 <HAL_DMA_Abort_IT+0x3a8>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d04a      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a6b      	ldr	r2, [pc, #428]	@ (8002964 <HAL_DMA_Abort_IT+0x3ac>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d045      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a69      	ldr	r2, [pc, #420]	@ (8002968 <HAL_DMA_Abort_IT+0x3b0>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d040      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a68      	ldr	r2, [pc, #416]	@ (800296c <HAL_DMA_Abort_IT+0x3b4>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d03b      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a66      	ldr	r2, [pc, #408]	@ (8002970 <HAL_DMA_Abort_IT+0x3b8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d036      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a65      	ldr	r2, [pc, #404]	@ (8002974 <HAL_DMA_Abort_IT+0x3bc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d031      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a63      	ldr	r2, [pc, #396]	@ (8002978 <HAL_DMA_Abort_IT+0x3c0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d02c      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a62      	ldr	r2, [pc, #392]	@ (800297c <HAL_DMA_Abort_IT+0x3c4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d027      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a60      	ldr	r2, [pc, #384]	@ (8002980 <HAL_DMA_Abort_IT+0x3c8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d022      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a5f      	ldr	r2, [pc, #380]	@ (8002984 <HAL_DMA_Abort_IT+0x3cc>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d01d      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a5d      	ldr	r2, [pc, #372]	@ (8002988 <HAL_DMA_Abort_IT+0x3d0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d018      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a5c      	ldr	r2, [pc, #368]	@ (800298c <HAL_DMA_Abort_IT+0x3d4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d013      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a5a      	ldr	r2, [pc, #360]	@ (8002990 <HAL_DMA_Abort_IT+0x3d8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00e      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a59      	ldr	r2, [pc, #356]	@ (8002994 <HAL_DMA_Abort_IT+0x3dc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a57      	ldr	r2, [pc, #348]	@ (8002998 <HAL_DMA_Abort_IT+0x3e0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d004      	beq.n	8002848 <HAL_DMA_Abort_IT+0x290>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a56      	ldr	r2, [pc, #344]	@ (800299c <HAL_DMA_Abort_IT+0x3e4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d108      	bne.n	800285a <HAL_DMA_Abort_IT+0x2a2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e007      	b.n	800286a <HAL_DMA_Abort_IT+0x2b2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a3c      	ldr	r2, [pc, #240]	@ (8002960 <HAL_DMA_Abort_IT+0x3a8>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d072      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a3a      	ldr	r2, [pc, #232]	@ (8002964 <HAL_DMA_Abort_IT+0x3ac>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d06d      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a39      	ldr	r2, [pc, #228]	@ (8002968 <HAL_DMA_Abort_IT+0x3b0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d068      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a37      	ldr	r2, [pc, #220]	@ (800296c <HAL_DMA_Abort_IT+0x3b4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d063      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a36      	ldr	r2, [pc, #216]	@ (8002970 <HAL_DMA_Abort_IT+0x3b8>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d05e      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a34      	ldr	r2, [pc, #208]	@ (8002974 <HAL_DMA_Abort_IT+0x3bc>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d059      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a33      	ldr	r2, [pc, #204]	@ (8002978 <HAL_DMA_Abort_IT+0x3c0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d054      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a31      	ldr	r2, [pc, #196]	@ (800297c <HAL_DMA_Abort_IT+0x3c4>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d04f      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a30      	ldr	r2, [pc, #192]	@ (8002980 <HAL_DMA_Abort_IT+0x3c8>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d04a      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002984 <HAL_DMA_Abort_IT+0x3cc>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d045      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002988 <HAL_DMA_Abort_IT+0x3d0>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d040      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2b      	ldr	r2, [pc, #172]	@ (800298c <HAL_DMA_Abort_IT+0x3d4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d03b      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002990 <HAL_DMA_Abort_IT+0x3d8>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d036      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a28      	ldr	r2, [pc, #160]	@ (8002994 <HAL_DMA_Abort_IT+0x3dc>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d031      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a27      	ldr	r2, [pc, #156]	@ (8002998 <HAL_DMA_Abort_IT+0x3e0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d02c      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a25      	ldr	r2, [pc, #148]	@ (800299c <HAL_DMA_Abort_IT+0x3e4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d027      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a24      	ldr	r2, [pc, #144]	@ (80029a0 <HAL_DMA_Abort_IT+0x3e8>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d022      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a22      	ldr	r2, [pc, #136]	@ (80029a4 <HAL_DMA_Abort_IT+0x3ec>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d01d      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a21      	ldr	r2, [pc, #132]	@ (80029a8 <HAL_DMA_Abort_IT+0x3f0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d018      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a1f      	ldr	r2, [pc, #124]	@ (80029ac <HAL_DMA_Abort_IT+0x3f4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a1e      	ldr	r2, [pc, #120]	@ (80029b0 <HAL_DMA_Abort_IT+0x3f8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d00e      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a1c      	ldr	r2, [pc, #112]	@ (80029b4 <HAL_DMA_Abort_IT+0x3fc>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d009      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a1b      	ldr	r2, [pc, #108]	@ (80029b8 <HAL_DMA_Abort_IT+0x400>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d004      	beq.n	800295a <HAL_DMA_Abort_IT+0x3a2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a19      	ldr	r2, [pc, #100]	@ (80029bc <HAL_DMA_Abort_IT+0x404>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d132      	bne.n	80029c0 <HAL_DMA_Abort_IT+0x408>
 800295a:	2301      	movs	r3, #1
 800295c:	e031      	b.n	80029c2 <HAL_DMA_Abort_IT+0x40a>
 800295e:	bf00      	nop
 8002960:	40020010 	.word	0x40020010
 8002964:	40020028 	.word	0x40020028
 8002968:	40020040 	.word	0x40020040
 800296c:	40020058 	.word	0x40020058
 8002970:	40020070 	.word	0x40020070
 8002974:	40020088 	.word	0x40020088
 8002978:	400200a0 	.word	0x400200a0
 800297c:	400200b8 	.word	0x400200b8
 8002980:	40020410 	.word	0x40020410
 8002984:	40020428 	.word	0x40020428
 8002988:	40020440 	.word	0x40020440
 800298c:	40020458 	.word	0x40020458
 8002990:	40020470 	.word	0x40020470
 8002994:	40020488 	.word	0x40020488
 8002998:	400204a0 	.word	0x400204a0
 800299c:	400204b8 	.word	0x400204b8
 80029a0:	58025408 	.word	0x58025408
 80029a4:	5802541c 	.word	0x5802541c
 80029a8:	58025430 	.word	0x58025430
 80029ac:	58025444 	.word	0x58025444
 80029b0:	58025458 	.word	0x58025458
 80029b4:	5802546c 	.word	0x5802546c
 80029b8:	58025480 	.word	0x58025480
 80029bc:	58025494 	.word	0x58025494
 80029c0:	2300      	movs	r3, #0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d028      	beq.n	8002a18 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029d4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029da:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029e0:	f003 031f 	and.w	r3, r3, #31
 80029e4:	2201      	movs	r2, #1
 80029e6:	409a      	lsls	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80029f4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00c      	beq.n	8002a18 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a0c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a16:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d003      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop

08002a44 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e0e3      	b.n	8002c1e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d106      	bne.n	8002a6e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2223      	movs	r2, #35	@ 0x23
 8002a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7fe f9ed 	bl	8000e48 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6e:	4b6e      	ldr	r3, [pc, #440]	@ (8002c28 <HAL_ETH_Init+0x1e4>)
 8002a70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a74:	4a6c      	ldr	r2, [pc, #432]	@ (8002c28 <HAL_ETH_Init+0x1e4>)
 8002a76:	f043 0302 	orr.w	r3, r3, #2
 8002a7a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8002c28 <HAL_ETH_Init+0x1e4>)
 8002a80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7a1b      	ldrb	r3, [r3, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d103      	bne.n	8002a9c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002a94:	2000      	movs	r0, #0
 8002a96:	f7ff fb29 	bl	80020ec <HAL_SYSCFG_ETHInterfaceSelect>
 8002a9a:	e003      	b.n	8002aa4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002a9c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002aa0:	f7ff fb24 	bl	80020ec <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002aa4:	4b61      	ldr	r3, [pc, #388]	@ (8002c2c <HAL_ETH_Init+0x1e8>)
 8002aa6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	6812      	ldr	r2, [r2, #0]
 8002ab6:	f043 0301 	orr.w	r3, r3, #1
 8002aba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002abe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ac0:	f7ff fad8 	bl	8002074 <HAL_GetTick>
 8002ac4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002ac6:	e011      	b.n	8002aec <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ac8:	f7ff fad4 	bl	8002074 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002ad6:	d909      	bls.n	8002aec <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2204      	movs	r2, #4
 8002adc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	22e0      	movs	r2, #224	@ 0xe0
 8002ae4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e098      	b.n	8002c1e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1e4      	bne.n	8002ac8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f89e 	bl	8002c40 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002b04:	f002 fd2e 	bl	8005564 <HAL_RCC_GetHCLKFreq>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	4a49      	ldr	r2, [pc, #292]	@ (8002c30 <HAL_ETH_Init+0x1ec>)
 8002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b10:	0c9a      	lsrs	r2, r3, #18
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	3a01      	subs	r2, #1
 8002b18:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 fa81 	bl	8003024 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b2a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002b2e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002b3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b3e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d009      	beq.n	8002b62 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	22e0      	movs	r2, #224	@ 0xe0
 8002b5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e05d      	b.n	8002c1e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b6a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002b6e:	4b31      	ldr	r3, [pc, #196]	@ (8002c34 <HAL_ETH_Init+0x1f0>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6952      	ldr	r2, [r2, #20]
 8002b76:	0051      	lsls	r1, r2, #1
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6812      	ldr	r2, [r2, #0]
 8002b7c:	430b      	orrs	r3, r1
 8002b7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b82:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fae9 	bl	800315e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 fb2f 	bl	80031f0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	3305      	adds	r3, #5
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	021a      	lsls	r2, r3, #8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	3303      	adds	r3, #3
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	061a      	lsls	r2, r3, #24
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	041b      	lsls	r3, r3, #16
 8002bc4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002bd0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002bde:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002be0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <HAL_ETH_Init+0x1f4>)
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	4b0d      	ldr	r3, [pc, #52]	@ (8002c3c <HAL_ETH_Init+0x1f8>)
 8002c06:	430b      	orrs	r3, r1
 8002c08:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2210      	movs	r2, #16
 8002c18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	58024400 	.word	0x58024400
 8002c2c:	58000400 	.word	0x58000400
 8002c30:	431bde83 	.word	0x431bde83
 8002c34:	ffff8001 	.word	0xffff8001
 8002c38:	0c020060 	.word	0x0c020060
 8002c3c:	0c20c000 	.word	0x0c20c000

08002c40 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c50:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c58:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002c5a:	f002 fc83 	bl	8005564 <HAL_RCC_GetHCLKFreq>
 8002c5e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4a1a      	ldr	r2, [pc, #104]	@ (8002ccc <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d804      	bhi.n	8002c72 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	e022      	b.n	8002cb8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4a16      	ldr	r2, [pc, #88]	@ (8002cd0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d204      	bcs.n	8002c84 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	e019      	b.n	8002cb8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4a13      	ldr	r2, [pc, #76]	@ (8002cd4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d915      	bls.n	8002cb8 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4a12      	ldr	r2, [pc, #72]	@ (8002cd8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d804      	bhi.n	8002c9e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e00c      	b.n	8002cb8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8002cdc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d804      	bhi.n	8002cb0 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	e003      	b.n	8002cb8 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002cc2:	bf00      	nop
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	02160ebf 	.word	0x02160ebf
 8002cd0:	03938700 	.word	0x03938700
 8002cd4:	05f5e0ff 	.word	0x05f5e0ff
 8002cd8:	08f0d17f 	.word	0x08f0d17f
 8002cdc:	0ee6b27f 	.word	0x0ee6b27f

08002ce0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002cf2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	791b      	ldrb	r3, [r3, #4]
 8002cf8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002cfa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	7b1b      	ldrb	r3, [r3, #12]
 8002d00:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002d02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	7b5b      	ldrb	r3, [r3, #13]
 8002d08:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002d0a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	7b9b      	ldrb	r3, [r3, #14]
 8002d10:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002d12:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	7bdb      	ldrb	r3, [r3, #15]
 8002d18:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002d1a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	7c12      	ldrb	r2, [r2, #16]
 8002d20:	2a00      	cmp	r2, #0
 8002d22:	d102      	bne.n	8002d2a <ETH_SetMACConfig+0x4a>
 8002d24:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002d28:	e000      	b.n	8002d2c <ETH_SetMACConfig+0x4c>
 8002d2a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002d2c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	7c52      	ldrb	r2, [r2, #17]
 8002d32:	2a00      	cmp	r2, #0
 8002d34:	d102      	bne.n	8002d3c <ETH_SetMACConfig+0x5c>
 8002d36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d3a:	e000      	b.n	8002d3e <ETH_SetMACConfig+0x5e>
 8002d3c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002d3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	7c9b      	ldrb	r3, [r3, #18]
 8002d44:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002d46:	431a      	orrs	r2, r3
               macconf->Speed |
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002d4c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002d52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	7f1b      	ldrb	r3, [r3, #28]
 8002d58:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002d5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	7f5b      	ldrb	r3, [r3, #29]
 8002d60:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002d62:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	7f92      	ldrb	r2, [r2, #30]
 8002d68:	2a00      	cmp	r2, #0
 8002d6a:	d102      	bne.n	8002d72 <ETH_SetMACConfig+0x92>
 8002d6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d70:	e000      	b.n	8002d74 <ETH_SetMACConfig+0x94>
 8002d72:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002d74:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	7fdb      	ldrb	r3, [r3, #31]
 8002d7a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002d7c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d7e:	683a      	ldr	r2, [r7, #0]
 8002d80:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d84:	2a00      	cmp	r2, #0
 8002d86:	d102      	bne.n	8002d8e <ETH_SetMACConfig+0xae>
 8002d88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d8c:	e000      	b.n	8002d90 <ETH_SetMACConfig+0xb0>
 8002d8e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002d90:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002d96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002d9e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002da0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	4b56      	ldr	r3, [pc, #344]	@ (8002f0c <ETH_SetMACConfig+0x22c>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	68f9      	ldr	r1, [r7, #12]
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dc2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002dca:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002dcc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002dd4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002dd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002dde:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002de0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	d102      	bne.n	8002df2 <ETH_SetMACConfig+0x112>
 8002dec:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002df0:	e000      	b.n	8002df4 <ETH_SetMACConfig+0x114>
 8002df2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002df4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4b42      	ldr	r3, [pc, #264]	@ (8002f10 <ETH_SetMACConfig+0x230>)
 8002e06:	4013      	ands	r3, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	68f9      	ldr	r1, [r7, #12]
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e18:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	4b3a      	ldr	r3, [pc, #232]	@ (8002f14 <ETH_SetMACConfig+0x234>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	68f9      	ldr	r1, [r7, #12]
 8002e32:	430b      	orrs	r3, r1
 8002e34:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002e3c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e42:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002e4a:	2a00      	cmp	r2, #0
 8002e4c:	d101      	bne.n	8002e52 <ETH_SetMACConfig+0x172>
 8002e4e:	2280      	movs	r2, #128	@ 0x80
 8002e50:	e000      	b.n	8002e54 <ETH_SetMACConfig+0x174>
 8002e52:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002e54:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e5a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e66:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	68f9      	ldr	r1, [r7, #12]
 8002e72:	430b      	orrs	r3, r1
 8002e74:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002e7c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002e84:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e92:	f023 0103 	bic.w	r1, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002eaa:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002ec6:	2a00      	cmp	r2, #0
 8002ec8:	d101      	bne.n	8002ece <ETH_SetMACConfig+0x1ee>
 8002eca:	2240      	movs	r2, #64	@ 0x40
 8002ecc:	e000      	b.n	8002ed0 <ETH_SetMACConfig+0x1f0>
 8002ece:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002ed0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002ed8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002eda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002ee2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002ef0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002f00:	bf00      	nop
 8002f02:	3714      	adds	r7, #20
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	00048083 	.word	0x00048083
 8002f10:	c0f88000 	.word	0xc0f88000
 8002f14:	fffffef0 	.word	0xfffffef0

08002f18 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b085      	sub	sp, #20
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	4b38      	ldr	r3, [pc, #224]	@ (8003010 <ETH_SetDMAConfig+0xf8>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	6811      	ldr	r1, [r2, #0]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	430b      	orrs	r3, r1
 8002f3a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f3e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	791b      	ldrb	r3, [r3, #4]
 8002f44:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f4a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	7b1b      	ldrb	r3, [r3, #12]
 8002f50:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	4b2c      	ldr	r3, [pc, #176]	@ (8003014 <ETH_SetDMAConfig+0xfc>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	68f9      	ldr	r1, [r7, #12]
 8002f6a:	430b      	orrs	r3, r1
 8002f6c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f70:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	7b5b      	ldrb	r3, [r3, #13]
 8002f76:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f88:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002f8c:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <ETH_SetDMAConfig+0x100>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	68f9      	ldr	r1, [r7, #12]
 8002f96:	430b      	orrs	r3, r1
 8002f98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002f9c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	7d1b      	ldrb	r3, [r3, #20]
 8002fa8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002faa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	7f5b      	ldrb	r3, [r3, #29]
 8002fb0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fbe:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002fc2:	4b16      	ldr	r3, [pc, #88]	@ (800301c <ETH_SetDMAConfig+0x104>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6812      	ldr	r2, [r2, #0]
 8002fca:	68f9      	ldr	r1, [r7, #12]
 8002fcc:	430b      	orrs	r3, r1
 8002fce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fd2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	7f1b      	ldrb	r3, [r3, #28]
 8002fda:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fec:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	@ (8003020 <ETH_SetDMAConfig+0x108>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	68f9      	ldr	r1, [r7, #12]
 8002ffa:	430b      	orrs	r3, r1
 8002ffc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003000:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	ffff87fd 	.word	0xffff87fd
 8003014:	ffff2ffe 	.word	0xffff2ffe
 8003018:	fffec000 	.word	0xfffec000
 800301c:	ffc0efef 	.word	0xffc0efef
 8003020:	7fc0ffff 	.word	0x7fc0ffff

08003024 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b0a4      	sub	sp, #144	@ 0x90
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800302c:	2301      	movs	r3, #1
 800302e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003032:	2300      	movs	r3, #0
 8003034:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003036:	2300      	movs	r3, #0
 8003038:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800303c:	2300      	movs	r3, #0
 800303e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003042:	2301      	movs	r3, #1
 8003044:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003048:	2301      	movs	r3, #1
 800304a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800304e:	2301      	movs	r3, #1
 8003050:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003054:	2300      	movs	r3, #0
 8003056:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800305a:	2301      	movs	r3, #1
 800305c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003060:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003064:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003066:	2300      	movs	r3, #0
 8003068:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800306c:	2300      	movs	r3, #0
 800306e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003070:	2300      	movs	r3, #0
 8003072:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003076:	2300      	movs	r3, #0
 8003078:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800307c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8003080:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003082:	2300      	movs	r3, #0
 8003084:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003088:	2300      	movs	r3, #0
 800308a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800309e:	2300      	movs	r3, #0
 80030a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80030a6:	2300      	movs	r3, #0
 80030a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80030b6:	2301      	movs	r3, #1
 80030b8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80030bc:	2320      	movs	r3, #32
 80030be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80030c8:	2300      	movs	r3, #0
 80030ca:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80030ce:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80030d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80030d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80030d8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80030da:	2300      	movs	r3, #0
 80030dc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80030e0:	2302      	movs	r3, #2
 80030e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80030ec:	2300      	movs	r3, #0
 80030ee:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80030fe:	2300      	movs	r3, #0
 8003100:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003108:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800310c:	4619      	mov	r1, r3
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7ff fde6 	bl	8002ce0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003114:	2301      	movs	r3, #1
 8003116:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003118:	2301      	movs	r3, #1
 800311a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800311c:	2300      	movs	r3, #0
 800311e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003120:	2300      	movs	r3, #0
 8003122:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003126:	2300      	movs	r3, #0
 8003128:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800312a:	2300      	movs	r3, #0
 800312c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800312e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003132:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003134:	2300      	movs	r3, #0
 8003136:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003138:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800313c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800313e:	2300      	movs	r3, #0
 8003140:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003144:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003148:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800314a:	f107 0308 	add.w	r3, r7, #8
 800314e:	4619      	mov	r1, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fee1 	bl	8002f18 <ETH_SetDMAConfig>
}
 8003156:	bf00      	nop
 8003158:	3790      	adds	r7, #144	@ 0x90
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800315e:	b480      	push	{r7}
 8003160:	b085      	sub	sp, #20
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003166:	2300      	movs	r3, #0
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	e01d      	b.n	80031a8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68d9      	ldr	r1, [r3, #12]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	440b      	add	r3, r1
 800317c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2200      	movs	r2, #0
 8003188:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2200      	movs	r2, #0
 800318e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	2200      	movs	r2, #0
 8003194:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003196:	68b9      	ldr	r1, [r7, #8]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	3206      	adds	r2, #6
 800319e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	3301      	adds	r3, #1
 80031a6:	60fb      	str	r3, [r7, #12]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d9de      	bls.n	800316c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031bc:	461a      	mov	r2, r3
 80031be:	2303      	movs	r3, #3
 80031c0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68da      	ldr	r2, [r3, #12]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031d0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80031e0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80031e4:	bf00      	nop
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e023      	b.n	8003246 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6919      	ldr	r1, [r3, #16]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4613      	mov	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	440b      	add	r3, r1
 800320e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2200      	movs	r2, #0
 800321a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2200      	movs	r2, #0
 8003226:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2200      	movs	r2, #0
 800322c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2200      	movs	r2, #0
 8003232:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	3212      	adds	r2, #18
 800323c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3301      	adds	r3, #1
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2b03      	cmp	r3, #3
 800324a:	d9d8      	bls.n	80031fe <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003272:	461a      	mov	r2, r3
 8003274:	2303      	movs	r3, #3
 8003276:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691a      	ldr	r2, [r3, #16]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003286:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800329a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800329e:	bf00      	nop
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	@ 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80032ba:	4b89      	ldr	r3, [pc, #548]	@ (80034e0 <HAL_GPIO_Init+0x234>)
 80032bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80032be:	e194      	b.n	80035ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	2101      	movs	r1, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 8186 	beq.w	80035e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d005      	beq.n	80032f0 <HAL_GPIO_Init+0x44>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 0303 	and.w	r3, r3, #3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d130      	bne.n	8003352 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	2203      	movs	r2, #3
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	43db      	mvns	r3, r3
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	4013      	ands	r3, r2
 8003306:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003326:	2201      	movs	r2, #1
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f003 0201 	and.w	r2, r3, #1
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4313      	orrs	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	2b03      	cmp	r3, #3
 800335c:	d017      	beq.n	800338e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	2203      	movs	r2, #3
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	2b02      	cmp	r3, #2
 8003398:	d123      	bne.n	80033e2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	08da      	lsrs	r2, r3, #3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	3208      	adds	r2, #8
 80033a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	220f      	movs	r2, #15
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	43db      	mvns	r3, r3
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	4013      	ands	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	69b9      	ldr	r1, [r7, #24]
 80033de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 0203 	and.w	r2, r3, #3
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4313      	orrs	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80e0 	beq.w	80035e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003424:	4b2f      	ldr	r3, [pc, #188]	@ (80034e4 <HAL_GPIO_Init+0x238>)
 8003426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800342a:	4a2e      	ldr	r2, [pc, #184]	@ (80034e4 <HAL_GPIO_Init+0x238>)
 800342c:	f043 0302 	orr.w	r3, r3, #2
 8003430:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003434:	4b2b      	ldr	r3, [pc, #172]	@ (80034e4 <HAL_GPIO_Init+0x238>)
 8003436:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003442:	4a29      	ldr	r2, [pc, #164]	@ (80034e8 <HAL_GPIO_Init+0x23c>)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	3302      	adds	r3, #2
 800344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	220f      	movs	r2, #15
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a20      	ldr	r2, [pc, #128]	@ (80034ec <HAL_GPIO_Init+0x240>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d052      	beq.n	8003514 <HAL_GPIO_Init+0x268>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a1f      	ldr	r2, [pc, #124]	@ (80034f0 <HAL_GPIO_Init+0x244>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d031      	beq.n	80034da <HAL_GPIO_Init+0x22e>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a1e      	ldr	r2, [pc, #120]	@ (80034f4 <HAL_GPIO_Init+0x248>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d02b      	beq.n	80034d6 <HAL_GPIO_Init+0x22a>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a1d      	ldr	r2, [pc, #116]	@ (80034f8 <HAL_GPIO_Init+0x24c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d025      	beq.n	80034d2 <HAL_GPIO_Init+0x226>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a1c      	ldr	r2, [pc, #112]	@ (80034fc <HAL_GPIO_Init+0x250>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01f      	beq.n	80034ce <HAL_GPIO_Init+0x222>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a1b      	ldr	r2, [pc, #108]	@ (8003500 <HAL_GPIO_Init+0x254>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d019      	beq.n	80034ca <HAL_GPIO_Init+0x21e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a1a      	ldr	r2, [pc, #104]	@ (8003504 <HAL_GPIO_Init+0x258>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d013      	beq.n	80034c6 <HAL_GPIO_Init+0x21a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a19      	ldr	r2, [pc, #100]	@ (8003508 <HAL_GPIO_Init+0x25c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00d      	beq.n	80034c2 <HAL_GPIO_Init+0x216>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a18      	ldr	r2, [pc, #96]	@ (800350c <HAL_GPIO_Init+0x260>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <HAL_GPIO_Init+0x212>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a17      	ldr	r2, [pc, #92]	@ (8003510 <HAL_GPIO_Init+0x264>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d101      	bne.n	80034ba <HAL_GPIO_Init+0x20e>
 80034b6:	2309      	movs	r3, #9
 80034b8:	e02d      	b.n	8003516 <HAL_GPIO_Init+0x26a>
 80034ba:	230a      	movs	r3, #10
 80034bc:	e02b      	b.n	8003516 <HAL_GPIO_Init+0x26a>
 80034be:	2308      	movs	r3, #8
 80034c0:	e029      	b.n	8003516 <HAL_GPIO_Init+0x26a>
 80034c2:	2307      	movs	r3, #7
 80034c4:	e027      	b.n	8003516 <HAL_GPIO_Init+0x26a>
 80034c6:	2306      	movs	r3, #6
 80034c8:	e025      	b.n	8003516 <HAL_GPIO_Init+0x26a>
 80034ca:	2305      	movs	r3, #5
 80034cc:	e023      	b.n	8003516 <HAL_GPIO_Init+0x26a>
 80034ce:	2304      	movs	r3, #4
 80034d0:	e021      	b.n	8003516 <HAL_GPIO_Init+0x26a>
 80034d2:	2303      	movs	r3, #3
 80034d4:	e01f      	b.n	8003516 <HAL_GPIO_Init+0x26a>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e01d      	b.n	8003516 <HAL_GPIO_Init+0x26a>
 80034da:	2301      	movs	r3, #1
 80034dc:	e01b      	b.n	8003516 <HAL_GPIO_Init+0x26a>
 80034de:	bf00      	nop
 80034e0:	58000080 	.word	0x58000080
 80034e4:	58024400 	.word	0x58024400
 80034e8:	58000400 	.word	0x58000400
 80034ec:	58020000 	.word	0x58020000
 80034f0:	58020400 	.word	0x58020400
 80034f4:	58020800 	.word	0x58020800
 80034f8:	58020c00 	.word	0x58020c00
 80034fc:	58021000 	.word	0x58021000
 8003500:	58021400 	.word	0x58021400
 8003504:	58021800 	.word	0x58021800
 8003508:	58021c00 	.word	0x58021c00
 800350c:	58022000 	.word	0x58022000
 8003510:	58022400 	.word	0x58022400
 8003514:	2300      	movs	r3, #0
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	f002 0203 	and.w	r2, r2, #3
 800351c:	0092      	lsls	r2, r2, #2
 800351e:	4093      	lsls	r3, r2
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003526:	4938      	ldr	r1, [pc, #224]	@ (8003608 <HAL_GPIO_Init+0x35c>)
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	3302      	adds	r3, #2
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800355a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	43db      	mvns	r3, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4013      	ands	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003588:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	3301      	adds	r3, #1
 80035e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f47f ae63 	bne.w	80032c0 <HAL_GPIO_Init+0x14>
  }
}
 80035fa:	bf00      	nop
 80035fc:	bf00      	nop
 80035fe:	3724      	adds	r7, #36	@ 0x24
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	58000400 	.word	0x58000400

0800360c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	460b      	mov	r3, r1
 8003616:	807b      	strh	r3, [r7, #2]
 8003618:	4613      	mov	r3, r2
 800361a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800361c:	787b      	ldrb	r3, [r7, #1]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003622:	887a      	ldrh	r2, [r7, #2]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003628:	e003      	b.n	8003632 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800362a:	887b      	ldrh	r3, [r7, #2]
 800362c:	041a      	lsls	r2, r3, #16
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	619a      	str	r2, [r3, #24]
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e08b      	b.n	800376a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fd fe12 	bl	8001290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	@ 0x24
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0201 	bic.w	r2, r2, #1
 8003682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003690:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	689a      	ldr	r2, [r3, #8]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d107      	bne.n	80036ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	689a      	ldr	r2, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036b6:	609a      	str	r2, [r3, #8]
 80036b8:	e006      	b.n	80036c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d108      	bne.n	80036e2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	e007      	b.n	80036f2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003774 <HAL_I2C_Init+0x134>)
 80036fe:	430b      	orrs	r3, r1
 8003700:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	68da      	ldr	r2, [r3, #12]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003710:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691a      	ldr	r2, [r3, #16]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69d9      	ldr	r1, [r3, #28]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a1a      	ldr	r2, [r3, #32]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f042 0201 	orr.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	02008000 	.word	0x02008000

08003778 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af02      	add	r7, sp, #8
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	4608      	mov	r0, r1
 8003782:	4611      	mov	r1, r2
 8003784:	461a      	mov	r2, r3
 8003786:	4603      	mov	r3, r0
 8003788:	817b      	strh	r3, [r7, #10]
 800378a:	460b      	mov	r3, r1
 800378c:	813b      	strh	r3, [r7, #8]
 800378e:	4613      	mov	r3, r2
 8003790:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003798:	b2db      	uxtb	r3, r3
 800379a:	2b20      	cmp	r3, #32
 800379c:	f040 80f9 	bne.w	8003992 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_I2C_Mem_Write+0x34>
 80037a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037b2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0ed      	b.n	8003994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d101      	bne.n	80037c6 <HAL_I2C_Mem_Write+0x4e>
 80037c2:	2302      	movs	r3, #2
 80037c4:	e0e6      	b.n	8003994 <HAL_I2C_Mem_Write+0x21c>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037ce:	f7fe fc51 	bl	8002074 <HAL_GetTick>
 80037d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	2319      	movs	r3, #25
 80037da:	2201      	movs	r2, #1
 80037dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 fac3 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e0d1      	b.n	8003994 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2221      	movs	r2, #33	@ 0x21
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2240      	movs	r2, #64	@ 0x40
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2200      	movs	r2, #0
 8003804:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a3a      	ldr	r2, [r7, #32]
 800380a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003810:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003818:	88f8      	ldrh	r0, [r7, #6]
 800381a:	893a      	ldrh	r2, [r7, #8]
 800381c:	8979      	ldrh	r1, [r7, #10]
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	4603      	mov	r3, r0
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f000 f9d3 	bl	8003bd4 <I2C_RequestMemoryWrite>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0a9      	b.n	8003994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	2bff      	cmp	r3, #255	@ 0xff
 8003848:	d90e      	bls.n	8003868 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	22ff      	movs	r2, #255	@ 0xff
 800384e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003854:	b2da      	uxtb	r2, r3
 8003856:	8979      	ldrh	r1, [r7, #10]
 8003858:	2300      	movs	r3, #0
 800385a:	9300      	str	r3, [sp, #0]
 800385c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fc47 	bl	80040f4 <I2C_TransferConfig>
 8003866:	e00f      	b.n	8003888 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003876:	b2da      	uxtb	r2, r3
 8003878:	8979      	ldrh	r1, [r7, #10]
 800387a:	2300      	movs	r3, #0
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 fc36 	bl	80040f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f000 fac6 	bl	8003e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e07b      	b.n	8003994 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d034      	beq.n	8003940 <HAL_I2C_Mem_Write+0x1c8>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d130      	bne.n	8003940 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	9300      	str	r3, [sp, #0]
 80038e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e4:	2200      	movs	r2, #0
 80038e6:	2180      	movs	r1, #128	@ 0x80
 80038e8:	68f8      	ldr	r0, [r7, #12]
 80038ea:	f000 fa3f 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e04d      	b.n	8003994 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	2bff      	cmp	r3, #255	@ 0xff
 8003900:	d90e      	bls.n	8003920 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	22ff      	movs	r2, #255	@ 0xff
 8003906:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800390c:	b2da      	uxtb	r2, r3
 800390e:	8979      	ldrh	r1, [r7, #10]
 8003910:	2300      	movs	r3, #0
 8003912:	9300      	str	r3, [sp, #0]
 8003914:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fbeb 	bl	80040f4 <I2C_TransferConfig>
 800391e:	e00f      	b.n	8003940 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003924:	b29a      	uxth	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800392e:	b2da      	uxtb	r2, r3
 8003930:	8979      	ldrh	r1, [r7, #10]
 8003932:	2300      	movs	r3, #0
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 fbda 	bl	80040f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003944:	b29b      	uxth	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d19e      	bne.n	8003888 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 faac 	bl	8003eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e01a      	b.n	8003994 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2220      	movs	r2, #32
 8003964:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4b0a      	ldr	r3, [pc, #40]	@ (800399c <HAL_I2C_Mem_Write+0x224>)
 8003972:	400b      	ands	r3, r1
 8003974:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2220      	movs	r2, #32
 800397a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e000      	b.n	8003994 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003992:	2302      	movs	r3, #2
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	fe00e800 	.word	0xfe00e800

080039a0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4603      	mov	r3, r0
 80039b0:	817b      	strh	r3, [r7, #10]
 80039b2:	460b      	mov	r3, r1
 80039b4:	813b      	strh	r3, [r7, #8]
 80039b6:	4613      	mov	r3, r2
 80039b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b20      	cmp	r3, #32
 80039c4:	f040 80fd 	bne.w	8003bc2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <HAL_I2C_Mem_Read+0x34>
 80039ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039da:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0f1      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_I2C_Mem_Read+0x4e>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e0ea      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x224>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039f6:	f7fe fb3d 	bl	8002074 <HAL_GetTick>
 80039fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	2319      	movs	r3, #25
 8003a02:	2201      	movs	r2, #1
 8003a04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f9af 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0d5      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2222      	movs	r2, #34	@ 0x22
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2240      	movs	r2, #64	@ 0x40
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a3a      	ldr	r2, [r7, #32]
 8003a32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a40:	88f8      	ldrh	r0, [r7, #6]
 8003a42:	893a      	ldrh	r2, [r7, #8]
 8003a44:	8979      	ldrh	r1, [r7, #10]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	4603      	mov	r3, r0
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f913 	bl	8003c7c <I2C_RequestMemoryRead>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d005      	beq.n	8003a68 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0ad      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	2bff      	cmp	r3, #255	@ 0xff
 8003a70:	d90e      	bls.n	8003a90 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	22ff      	movs	r2, #255	@ 0xff
 8003a76:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7c:	b2da      	uxtb	r2, r3
 8003a7e:	8979      	ldrh	r1, [r7, #10]
 8003a80:	4b52      	ldr	r3, [pc, #328]	@ (8003bcc <HAL_I2C_Mem_Read+0x22c>)
 8003a82:	9300      	str	r3, [sp, #0]
 8003a84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fb33 	bl	80040f4 <I2C_TransferConfig>
 8003a8e:	e00f      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9e:	b2da      	uxtb	r2, r3
 8003aa0:	8979      	ldrh	r1, [r7, #10]
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bcc <HAL_I2C_Mem_Read+0x22c>)
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fb22 	bl	80040f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	2104      	movs	r1, #4
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f956 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e07c      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d034      	beq.n	8003b70 <HAL_I2C_Mem_Read+0x1d0>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d130      	bne.n	8003b70 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b14:	2200      	movs	r2, #0
 8003b16:	2180      	movs	r1, #128	@ 0x80
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 f927 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e04d      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2bff      	cmp	r3, #255	@ 0xff
 8003b30:	d90e      	bls.n	8003b50 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	22ff      	movs	r2, #255	@ 0xff
 8003b36:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	8979      	ldrh	r1, [r7, #10]
 8003b40:	2300      	movs	r3, #0
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fad3 	bl	80040f4 <I2C_TransferConfig>
 8003b4e:	e00f      	b.n	8003b70 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	8979      	ldrh	r1, [r7, #10]
 8003b62:	2300      	movs	r3, #0
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fac2 	bl	80040f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d19a      	bne.n	8003ab0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 f994 	bl	8003eac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e01a      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2220      	movs	r2, #32
 8003b94:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <HAL_I2C_Mem_Read+0x230>)
 8003ba2:	400b      	ands	r3, r1
 8003ba4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
  }
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3718      	adds	r7, #24
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	80002400 	.word	0x80002400
 8003bd0:	fe00e800 	.word	0xfe00e800

08003bd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	4608      	mov	r0, r1
 8003bde:	4611      	mov	r1, r2
 8003be0:	461a      	mov	r2, r3
 8003be2:	4603      	mov	r3, r0
 8003be4:	817b      	strh	r3, [r7, #10]
 8003be6:	460b      	mov	r3, r1
 8003be8:	813b      	strh	r3, [r7, #8]
 8003bea:	4613      	mov	r3, r2
 8003bec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bee:	88fb      	ldrh	r3, [r7, #6]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	8979      	ldrh	r1, [r7, #10]
 8003bf4:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <I2C_RequestMemoryWrite+0xa4>)
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 fa79 	bl	80040f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c02:	69fa      	ldr	r2, [r7, #28]
 8003c04:	69b9      	ldr	r1, [r7, #24]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f909 	bl	8003e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e02c      	b.n	8003c70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1c:	893b      	ldrh	r3, [r7, #8]
 8003c1e:	b2da      	uxtb	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c26:	e015      	b.n	8003c54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c28:	893b      	ldrh	r3, [r7, #8]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	69b9      	ldr	r1, [r7, #24]
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f000 f8ef 	bl	8003e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e012      	b.n	8003c70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c4a:	893b      	ldrh	r3, [r7, #8]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	2180      	movs	r1, #128	@ 0x80
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f884 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e000      	b.n	8003c70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	80002000 	.word	0x80002000

08003c7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af02      	add	r7, sp, #8
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	4608      	mov	r0, r1
 8003c86:	4611      	mov	r1, r2
 8003c88:	461a      	mov	r2, r3
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	817b      	strh	r3, [r7, #10]
 8003c8e:	460b      	mov	r3, r1
 8003c90:	813b      	strh	r3, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	b2da      	uxtb	r2, r3
 8003c9a:	8979      	ldrh	r1, [r7, #10]
 8003c9c:	4b20      	ldr	r3, [pc, #128]	@ (8003d20 <I2C_RequestMemoryRead+0xa4>)
 8003c9e:	9300      	str	r3, [sp, #0]
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fa26 	bl	80040f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	69b9      	ldr	r1, [r7, #24]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f8b6 	bl	8003e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e02c      	b.n	8003d16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cbc:	88fb      	ldrh	r3, [r7, #6]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d105      	bne.n	8003cce <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cc2:	893b      	ldrh	r3, [r7, #8]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	629a      	str	r2, [r3, #40]	@ 0x28
 8003ccc:	e015      	b.n	8003cfa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cce:	893b      	ldrh	r3, [r7, #8]
 8003cd0:	0a1b      	lsrs	r3, r3, #8
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cdc:	69fa      	ldr	r2, [r7, #28]
 8003cde:	69b9      	ldr	r1, [r7, #24]
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f89c 	bl	8003e1e <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e012      	b.n	8003d16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf0:	893b      	ldrh	r3, [r7, #8]
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2200      	movs	r2, #0
 8003d02:	2140      	movs	r1, #64	@ 0x40
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 f831 	bl	8003d6c <I2C_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	80002000 	.word	0x80002000

08003d24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d103      	bne.n	8003d42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d007      	beq.n	8003d60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	619a      	str	r2, [r3, #24]
  }
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	603b      	str	r3, [r7, #0]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d7c:	e03b      	b.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	6839      	ldr	r1, [r7, #0]
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f000 f8d6 	bl	8003f34 <I2C_IsErrorOccurred>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e041      	b.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d98:	d02d      	beq.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9a:	f7fe f96b 	bl	8002074 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d302      	bcc.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d122      	bne.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	79fb      	ldrb	r3, [r7, #7]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d113      	bne.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd2:	f043 0220 	orr.w	r2, r3, #32
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e00f      	b.n	8003e16 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699a      	ldr	r2, [r3, #24]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	bf0c      	ite	eq
 8003e06:	2301      	moveq	r3, #1
 8003e08:	2300      	movne	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d0b4      	beq.n	8003d7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	60f8      	str	r0, [r7, #12]
 8003e26:	60b9      	str	r1, [r7, #8]
 8003e28:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e2a:	e033      	b.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68b9      	ldr	r1, [r7, #8]
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f000 f87f 	bl	8003f34 <I2C_IsErrorOccurred>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e031      	b.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e46:	d025      	beq.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e48:	f7fe f914 	bl	8002074 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d302      	bcc.n	8003e5e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11a      	bne.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d013      	beq.n	8003e94 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e70:	f043 0220 	orr.w	r2, r3, #32
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e007      	b.n	8003ea4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d1c4      	bne.n	8003e2c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb8:	e02f      	b.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	68b9      	ldr	r1, [r7, #8]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f838 	bl	8003f34 <I2C_IsErrorOccurred>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e02d      	b.n	8003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ece:	f7fe f8d1 	bl	8002074 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d302      	bcc.n	8003ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d11a      	bne.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d013      	beq.n	8003f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ef6:	f043 0220 	orr.w	r2, r3, #32
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e007      	b.n	8003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	699b      	ldr	r3, [r3, #24]
 8003f20:	f003 0320 	and.w	r3, r3, #32
 8003f24:	2b20      	cmp	r3, #32
 8003f26:	d1c8      	bne.n	8003eba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b08a      	sub	sp, #40	@ 0x28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	f003 0310 	and.w	r3, r3, #16
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d068      	beq.n	8004032 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2210      	movs	r2, #16
 8003f66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f68:	e049      	b.n	8003ffe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d045      	beq.n	8003ffe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f72:	f7fe f87f 	bl	8002074 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <I2C_IsErrorOccurred+0x54>
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d13a      	bne.n	8003ffe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fa6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003faa:	d121      	bne.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fb2:	d01d      	beq.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d01a      	beq.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003fc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fca:	f7fe f853 	bl	8002074 <HAL_GetTick>
 8003fce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fd0:	e00e      	b.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fd2:	f7fe f84f 	bl	8002074 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b19      	cmp	r3, #25
 8003fde:	d907      	bls.n	8003ff0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	f043 0320 	orr.w	r3, r3, #32
 8003fe6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003fee:	e006      	b.n	8003ffe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d1e9      	bne.n	8003fd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	f003 0320 	and.w	r3, r3, #32
 8004008:	2b20      	cmp	r3, #32
 800400a:	d003      	beq.n	8004014 <I2C_IsErrorOccurred+0xe0>
 800400c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0aa      	beq.n	8003f6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004018:	2b00      	cmp	r3, #0
 800401a:	d103      	bne.n	8004024 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2220      	movs	r2, #32
 8004022:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f043 0304 	orr.w	r3, r3, #4
 800402a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00b      	beq.n	800405c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004044:	6a3b      	ldr	r3, [r7, #32]
 8004046:	f043 0301 	orr.w	r3, r3, #1
 800404a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004054:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00b      	beq.n	800407e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004066:	6a3b      	ldr	r3, [r7, #32]
 8004068:	f043 0308 	orr.w	r3, r3, #8
 800406c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004076:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00b      	beq.n	80040a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004088:	6a3b      	ldr	r3, [r7, #32]
 800408a:	f043 0302 	orr.w	r3, r3, #2
 800408e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80040a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01c      	beq.n	80040e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7ff fe3b 	bl	8003d24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6859      	ldr	r1, [r3, #4]
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4b0d      	ldr	r3, [pc, #52]	@ (80040f0 <I2C_IsErrorOccurred+0x1bc>)
 80040ba:	400b      	ands	r3, r1
 80040bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	431a      	orrs	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80040e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3728      	adds	r7, #40	@ 0x28
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	fe00e800 	.word	0xfe00e800

080040f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	607b      	str	r3, [r7, #4]
 80040fe:	460b      	mov	r3, r1
 8004100:	817b      	strh	r3, [r7, #10]
 8004102:	4613      	mov	r3, r2
 8004104:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004106:	897b      	ldrh	r3, [r7, #10]
 8004108:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800410c:	7a7b      	ldrb	r3, [r7, #9]
 800410e:	041b      	lsls	r3, r3, #16
 8004110:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004114:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	4313      	orrs	r3, r2
 800411e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004122:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	0d5b      	lsrs	r3, r3, #21
 800412e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004132:	4b08      	ldr	r3, [pc, #32]	@ (8004154 <I2C_TransferConfig+0x60>)
 8004134:	430b      	orrs	r3, r1
 8004136:	43db      	mvns	r3, r3
 8004138:	ea02 0103 	and.w	r1, r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	03ff63ff 	.word	0x03ff63ff

08004158 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004168:	b2db      	uxtb	r3, r3
 800416a:	2b20      	cmp	r3, #32
 800416c:	d138      	bne.n	80041e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004174:	2b01      	cmp	r3, #1
 8004176:	d101      	bne.n	800417c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004178:	2302      	movs	r3, #2
 800417a:	e032      	b.n	80041e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2224      	movs	r2, #36	@ 0x24
 8004188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f022 0201 	bic.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6819      	ldr	r1, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	683a      	ldr	r2, [r7, #0]
 80041b8:	430a      	orrs	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	e000      	b.n	80041e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041e0:	2302      	movs	r3, #2
  }
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041ee:	b480      	push	{r7}
 80041f0:	b085      	sub	sp, #20
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b20      	cmp	r3, #32
 8004202:	d139      	bne.n	8004278 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800420e:	2302      	movs	r3, #2
 8004210:	e033      	b.n	800427a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2224      	movs	r2, #36	@ 0x24
 800421e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 0201 	bic.w	r2, r2, #1
 8004230:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004240:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004274:	2300      	movs	r3, #0
 8004276:	e000      	b.n	800427a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004278:	2302      	movs	r3, #2
  }
}
 800427a:	4618      	mov	r0, r3
 800427c:	3714      	adds	r7, #20
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af02      	add	r7, sp, #8
 800428c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0fe      	b.n	8004496 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d106      	bne.n	80042b2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7fd fdb5 	bl	8001e1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2203      	movs	r2, #3
 80042b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f005 fcc0 	bl	8009c44 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	7c1a      	ldrb	r2, [r3, #16]
 80042cc:	f88d 2000 	strb.w	r2, [sp]
 80042d0:	3304      	adds	r3, #4
 80042d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042d4:	f005 fc44 	bl	8009b60 <USB_CoreInit>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d005      	beq.n	80042ea <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2202      	movs	r2, #2
 80042e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0d5      	b.n	8004496 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f005 fcb8 	bl	8009c66 <USB_SetCurrentMode>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e0c6      	b.n	8004496 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004308:	2300      	movs	r3, #0
 800430a:	73fb      	strb	r3, [r7, #15]
 800430c:	e04a      	b.n	80043a4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800430e:	7bfa      	ldrb	r2, [r7, #15]
 8004310:	6879      	ldr	r1, [r7, #4]
 8004312:	4613      	mov	r3, r2
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	440b      	add	r3, r1
 800431c:	3315      	adds	r3, #21
 800431e:	2201      	movs	r2, #1
 8004320:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004322:	7bfa      	ldrb	r2, [r7, #15]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	3314      	adds	r3, #20
 8004332:	7bfa      	ldrb	r2, [r7, #15]
 8004334:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004336:	7bfa      	ldrb	r2, [r7, #15]
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	b298      	uxth	r0, r3
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	332e      	adds	r3, #46	@ 0x2e
 800434a:	4602      	mov	r2, r0
 800434c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800434e:	7bfa      	ldrb	r2, [r7, #15]
 8004350:	6879      	ldr	r1, [r7, #4]
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	3318      	adds	r3, #24
 800435e:	2200      	movs	r2, #0
 8004360:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004362:	7bfa      	ldrb	r2, [r7, #15]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	331c      	adds	r3, #28
 8004372:	2200      	movs	r2, #0
 8004374:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004376:	7bfa      	ldrb	r2, [r7, #15]
 8004378:	6879      	ldr	r1, [r7, #4]
 800437a:	4613      	mov	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	440b      	add	r3, r1
 8004384:	3320      	adds	r3, #32
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800438a:	7bfa      	ldrb	r2, [r7, #15]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	4613      	mov	r3, r2
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	4413      	add	r3, r2
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	3324      	adds	r3, #36	@ 0x24
 800439a:	2200      	movs	r2, #0
 800439c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800439e:	7bfb      	ldrb	r3, [r7, #15]
 80043a0:	3301      	adds	r3, #1
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	791b      	ldrb	r3, [r3, #4]
 80043a8:	7bfa      	ldrb	r2, [r7, #15]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d3af      	bcc.n	800430e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ae:	2300      	movs	r3, #0
 80043b0:	73fb      	strb	r3, [r7, #15]
 80043b2:	e044      	b.n	800443e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043b4:	7bfa      	ldrb	r2, [r7, #15]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043ca:	7bfa      	ldrb	r2, [r7, #15]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	00db      	lsls	r3, r3, #3
 80043d2:	4413      	add	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80043dc:	7bfa      	ldrb	r2, [r7, #15]
 80043de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043e0:	7bfa      	ldrb	r2, [r7, #15]
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	440b      	add	r3, r1
 80043ee:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80043f2:	2200      	movs	r2, #0
 80043f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043f6:	7bfa      	ldrb	r2, [r7, #15]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	00db      	lsls	r3, r3, #3
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	440b      	add	r3, r1
 8004404:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800440c:	7bfa      	ldrb	r2, [r7, #15]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800441e:	2200      	movs	r2, #0
 8004420:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004422:	7bfa      	ldrb	r2, [r7, #15]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	00db      	lsls	r3, r3, #3
 800442a:	4413      	add	r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004438:	7bfb      	ldrb	r3, [r7, #15]
 800443a:	3301      	adds	r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	791b      	ldrb	r3, [r3, #4]
 8004442:	7bfa      	ldrb	r2, [r7, #15]
 8004444:	429a      	cmp	r2, r3
 8004446:	d3b5      	bcc.n	80043b4 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6818      	ldr	r0, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	7c1a      	ldrb	r2, [r3, #16]
 8004450:	f88d 2000 	strb.w	r2, [sp]
 8004454:	3304      	adds	r3, #4
 8004456:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004458:	f005 fc52 	bl	8009d00 <USB_DevInit>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d005      	beq.n	800446e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e013      	b.n	8004496 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	7b1b      	ldrb	r3, [r3, #12]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d102      	bne.n	800448a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 f80b 	bl	80044a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f005 fe0d 	bl	800a0ae <USB_DevDisconnect>

  return HAL_OK;
 8004494:	2300      	movs	r3, #0
}
 8004496:	4618      	mov	r0, r3
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044ce:	4b05      	ldr	r3, [pc, #20]	@ (80044e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	10000003 	.word	0x10000003

080044e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80044f0:	4b19      	ldr	r3, [pc, #100]	@ (8004558 <HAL_PWREx_ConfigSupply+0x70>)
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d00a      	beq.n	8004512 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80044fc:	4b16      	ldr	r3, [pc, #88]	@ (8004558 <HAL_PWREx_ConfigSupply+0x70>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	429a      	cmp	r2, r3
 8004508:	d001      	beq.n	800450e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e01f      	b.n	800454e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800450e:	2300      	movs	r3, #0
 8004510:	e01d      	b.n	800454e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004512:	4b11      	ldr	r3, [pc, #68]	@ (8004558 <HAL_PWREx_ConfigSupply+0x70>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f023 0207 	bic.w	r2, r3, #7
 800451a:	490f      	ldr	r1, [pc, #60]	@ (8004558 <HAL_PWREx_ConfigSupply+0x70>)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	4313      	orrs	r3, r2
 8004520:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004522:	f7fd fda7 	bl	8002074 <HAL_GetTick>
 8004526:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004528:	e009      	b.n	800453e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800452a:	f7fd fda3 	bl	8002074 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004538:	d901      	bls.n	800453e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e007      	b.n	800454e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800453e:	4b06      	ldr	r3, [pc, #24]	@ (8004558 <HAL_PWREx_ConfigSupply+0x70>)
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800454a:	d1ee      	bne.n	800452a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	58024800 	.word	0x58024800

0800455c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	4a04      	ldr	r2, [pc, #16]	@ (8004578 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004566:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800456a:	60d3      	str	r3, [r2, #12]
}
 800456c:	bf00      	nop
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	58024800 	.word	0x58024800

0800457c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b08c      	sub	sp, #48	@ 0x30
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f000 bc48 	b.w	8004e20 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 8088 	beq.w	80046ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800459e:	4b99      	ldr	r3, [pc, #612]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045a8:	4b96      	ldr	r3, [pc, #600]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80045aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80045ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b0:	2b10      	cmp	r3, #16
 80045b2:	d007      	beq.n	80045c4 <HAL_RCC_OscConfig+0x48>
 80045b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045b6:	2b18      	cmp	r3, #24
 80045b8:	d111      	bne.n	80045de <HAL_RCC_OscConfig+0x62>
 80045ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045bc:	f003 0303 	and.w	r3, r3, #3
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d10c      	bne.n	80045de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d06d      	beq.n	80046ac <HAL_RCC_OscConfig+0x130>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d169      	bne.n	80046ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f000 bc21 	b.w	8004e20 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e6:	d106      	bne.n	80045f6 <HAL_RCC_OscConfig+0x7a>
 80045e8:	4b86      	ldr	r3, [pc, #536]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a85      	ldr	r2, [pc, #532]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80045ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	e02e      	b.n	8004654 <HAL_RCC_OscConfig+0xd8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10c      	bne.n	8004618 <HAL_RCC_OscConfig+0x9c>
 80045fe:	4b81      	ldr	r3, [pc, #516]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a80      	ldr	r2, [pc, #512]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004604:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	4b7e      	ldr	r3, [pc, #504]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a7d      	ldr	r2, [pc, #500]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004610:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	e01d      	b.n	8004654 <HAL_RCC_OscConfig+0xd8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004620:	d10c      	bne.n	800463c <HAL_RCC_OscConfig+0xc0>
 8004622:	4b78      	ldr	r3, [pc, #480]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a77      	ldr	r2, [pc, #476]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800462c:	6013      	str	r3, [r2, #0]
 800462e:	4b75      	ldr	r3, [pc, #468]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a74      	ldr	r2, [pc, #464]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004634:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004638:	6013      	str	r3, [r2, #0]
 800463a:	e00b      	b.n	8004654 <HAL_RCC_OscConfig+0xd8>
 800463c:	4b71      	ldr	r3, [pc, #452]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a70      	ldr	r2, [pc, #448]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b6e      	ldr	r3, [pc, #440]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a6d      	ldr	r2, [pc, #436]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 800464e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d013      	beq.n	8004684 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fd fd0a 	bl	8002074 <HAL_GetTick>
 8004660:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004664:	f7fd fd06 	bl	8002074 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b64      	cmp	r3, #100	@ 0x64
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e3d4      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004676:	4b63      	ldr	r3, [pc, #396]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0xe8>
 8004682:	e014      	b.n	80046ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fd fcf6 	bl	8002074 <HAL_GetTick>
 8004688:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468c:	f7fd fcf2 	bl	8002074 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	@ 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e3c0      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800469e:	4b59      	ldr	r3, [pc, #356]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x110>
 80046aa:	e000      	b.n	80046ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f000 80ca 	beq.w	8004850 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046bc:	4b51      	ldr	r3, [pc, #324]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d007      	beq.n	80046e2 <HAL_RCC_OscConfig+0x166>
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	2b18      	cmp	r3, #24
 80046d6:	d156      	bne.n	8004786 <HAL_RCC_OscConfig+0x20a>
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d151      	bne.n	8004786 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046e2:	4b48      	ldr	r3, [pc, #288]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d005      	beq.n	80046fa <HAL_RCC_OscConfig+0x17e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e392      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046fa:	4b42      	ldr	r3, [pc, #264]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f023 0219 	bic.w	r2, r3, #25
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	493f      	ldr	r1, [pc, #252]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004708:	4313      	orrs	r3, r2
 800470a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fd fcb2 	bl	8002074 <HAL_GetTick>
 8004710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004714:	f7fd fcae 	bl	8002074 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e37c      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004726:	4b37      	ldr	r3, [pc, #220]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0f0      	beq.n	8004714 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004732:	f7fd fccf 	bl	80020d4 <HAL_GetREVID>
 8004736:	4603      	mov	r3, r0
 8004738:	f241 0203 	movw	r2, #4099	@ 0x1003
 800473c:	4293      	cmp	r3, r2
 800473e:	d817      	bhi.n	8004770 <HAL_RCC_OscConfig+0x1f4>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	691b      	ldr	r3, [r3, #16]
 8004744:	2b40      	cmp	r3, #64	@ 0x40
 8004746:	d108      	bne.n	800475a <HAL_RCC_OscConfig+0x1de>
 8004748:	4b2e      	ldr	r3, [pc, #184]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004750:	4a2c      	ldr	r2, [pc, #176]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004756:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004758:	e07a      	b.n	8004850 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800475a:	4b2a      	ldr	r3, [pc, #168]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	031b      	lsls	r3, r3, #12
 8004768:	4926      	ldr	r1, [pc, #152]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 800476a:	4313      	orrs	r3, r2
 800476c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800476e:	e06f      	b.n	8004850 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004770:	4b24      	ldr	r3, [pc, #144]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	061b      	lsls	r3, r3, #24
 800477e:	4921      	ldr	r1, [pc, #132]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004784:	e064      	b.n	8004850 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d047      	beq.n	800481e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800478e:	4b1d      	ldr	r3, [pc, #116]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f023 0219 	bic.w	r2, r3, #25
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	491a      	ldr	r1, [pc, #104]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fd fc68 	bl	8002074 <HAL_GetTick>
 80047a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047a8:	f7fd fc64 	bl	8002074 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e332      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80047ba:	4b12      	ldr	r3, [pc, #72]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0304 	and.w	r3, r3, #4
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0f0      	beq.n	80047a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047c6:	f7fd fc85 	bl	80020d4 <HAL_GetREVID>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d819      	bhi.n	8004808 <HAL_RCC_OscConfig+0x28c>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b40      	cmp	r3, #64	@ 0x40
 80047da:	d108      	bne.n	80047ee <HAL_RCC_OscConfig+0x272>
 80047dc:	4b09      	ldr	r3, [pc, #36]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80047e4:	4a07      	ldr	r2, [pc, #28]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80047e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ea:	6053      	str	r3, [r2, #4]
 80047ec:	e030      	b.n	8004850 <HAL_RCC_OscConfig+0x2d4>
 80047ee:	4b05      	ldr	r3, [pc, #20]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	031b      	lsls	r3, r3, #12
 80047fc:	4901      	ldr	r1, [pc, #4]	@ (8004804 <HAL_RCC_OscConfig+0x288>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	604b      	str	r3, [r1, #4]
 8004802:	e025      	b.n	8004850 <HAL_RCC_OscConfig+0x2d4>
 8004804:	58024400 	.word	0x58024400
 8004808:	4b9a      	ldr	r3, [pc, #616]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	4997      	ldr	r1, [pc, #604]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004818:	4313      	orrs	r3, r2
 800481a:	604b      	str	r3, [r1, #4]
 800481c:	e018      	b.n	8004850 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800481e:	4b95      	ldr	r3, [pc, #596]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a94      	ldr	r2, [pc, #592]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004824:	f023 0301 	bic.w	r3, r3, #1
 8004828:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800482a:	f7fd fc23 	bl	8002074 <HAL_GetTick>
 800482e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004832:	f7fd fc1f 	bl	8002074 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e2ed      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004844:	4b8b      	ldr	r3, [pc, #556]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0304 	and.w	r3, r3, #4
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f0      	bne.n	8004832 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0310 	and.w	r3, r3, #16
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 80a9 	beq.w	80049b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800485e:	4b85      	ldr	r3, [pc, #532]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004866:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004868:	4b82      	ldr	r3, [pc, #520]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 800486a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b08      	cmp	r3, #8
 8004872:	d007      	beq.n	8004884 <HAL_RCC_OscConfig+0x308>
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	2b18      	cmp	r3, #24
 8004878:	d13a      	bne.n	80048f0 <HAL_RCC_OscConfig+0x374>
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f003 0303 	and.w	r3, r3, #3
 8004880:	2b01      	cmp	r3, #1
 8004882:	d135      	bne.n	80048f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004884:	4b7b      	ldr	r3, [pc, #492]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_RCC_OscConfig+0x320>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	2b80      	cmp	r3, #128	@ 0x80
 8004896:	d001      	beq.n	800489c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e2c1      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800489c:	f7fd fc1a 	bl	80020d4 <HAL_GetREVID>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d817      	bhi.n	80048da <HAL_RCC_OscConfig+0x35e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d108      	bne.n	80048c4 <HAL_RCC_OscConfig+0x348>
 80048b2:	4b70      	ldr	r3, [pc, #448]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80048ba:	4a6e      	ldr	r2, [pc, #440]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80048bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80048c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048c2:	e075      	b.n	80049b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048c4:	4b6b      	ldr	r3, [pc, #428]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	069b      	lsls	r3, r3, #26
 80048d2:	4968      	ldr	r1, [pc, #416]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048d8:	e06a      	b.n	80049b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048da:	4b66      	ldr	r3, [pc, #408]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	061b      	lsls	r3, r3, #24
 80048e8:	4962      	ldr	r1, [pc, #392]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048ee:	e05f      	b.n	80049b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d042      	beq.n	800497e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a5d      	ldr	r2, [pc, #372]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80048fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004902:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fd fbb6 	bl	8002074 <HAL_GetTick>
 8004908:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800490c:	f7fd fbb2 	bl	8002074 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e280      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800491e:	4b55      	ldr	r3, [pc, #340]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800492a:	f7fd fbd3 	bl	80020d4 <HAL_GetREVID>
 800492e:	4603      	mov	r3, r0
 8004930:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004934:	4293      	cmp	r3, r2
 8004936:	d817      	bhi.n	8004968 <HAL_RCC_OscConfig+0x3ec>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	2b20      	cmp	r3, #32
 800493e:	d108      	bne.n	8004952 <HAL_RCC_OscConfig+0x3d6>
 8004940:	4b4c      	ldr	r3, [pc, #304]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004948:	4a4a      	ldr	r2, [pc, #296]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 800494a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800494e:	6053      	str	r3, [r2, #4]
 8004950:	e02e      	b.n	80049b0 <HAL_RCC_OscConfig+0x434>
 8004952:	4b48      	ldr	r3, [pc, #288]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	069b      	lsls	r3, r3, #26
 8004960:	4944      	ldr	r1, [pc, #272]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004962:	4313      	orrs	r3, r2
 8004964:	604b      	str	r3, [r1, #4]
 8004966:	e023      	b.n	80049b0 <HAL_RCC_OscConfig+0x434>
 8004968:	4b42      	ldr	r3, [pc, #264]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	061b      	lsls	r3, r3, #24
 8004976:	493f      	ldr	r1, [pc, #252]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004978:	4313      	orrs	r3, r2
 800497a:	60cb      	str	r3, [r1, #12]
 800497c:	e018      	b.n	80049b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800497e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a3c      	ldr	r2, [pc, #240]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800498a:	f7fd fb73 	bl	8002074 <HAL_GetTick>
 800498e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004992:	f7fd fb6f 	bl	8002074 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e23d      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80049a4:	4b33      	ldr	r3, [pc, #204]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f0      	bne.n	8004992 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d036      	beq.n	8004a2a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d019      	beq.n	80049f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80049c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80049ca:	f043 0301 	orr.w	r3, r3, #1
 80049ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fd fb50 	bl	8002074 <HAL_GetTick>
 80049d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049d8:	f7fd fb4c 	bl	8002074 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e21a      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049ea:	4b22      	ldr	r3, [pc, #136]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80049ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x45c>
 80049f6:	e018      	b.n	8004a2a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049f8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80049fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a04:	f7fd fb36 	bl	8002074 <HAL_GetTick>
 8004a08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a0c:	f7fd fb32 	bl	8002074 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e200      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a1e:	4b15      	ldr	r3, [pc, #84]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004a20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1f0      	bne.n	8004a0c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d039      	beq.n	8004aaa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d01c      	beq.n	8004a78 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a0c      	ldr	r2, [pc, #48]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004a44:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a48:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a4a:	f7fd fb13 	bl	8002074 <HAL_GetTick>
 8004a4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a52:	f7fd fb0f 	bl	8002074 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e1dd      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a64:	4b03      	ldr	r3, [pc, #12]	@ (8004a74 <HAL_RCC_OscConfig+0x4f8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0x4d6>
 8004a70:	e01b      	b.n	8004aaa <HAL_RCC_OscConfig+0x52e>
 8004a72:	bf00      	nop
 8004a74:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a78:	4b9b      	ldr	r3, [pc, #620]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a9a      	ldr	r2, [pc, #616]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004a7e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a84:	f7fd faf6 	bl	8002074 <HAL_GetTick>
 8004a88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a8c:	f7fd faf2 	bl	8002074 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e1c0      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a9e:	4b92      	ldr	r3, [pc, #584]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1f0      	bne.n	8004a8c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 8081 	beq.w	8004bba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004ab8:	4b8c      	ldr	r3, [pc, #560]	@ (8004cec <HAL_RCC_OscConfig+0x770>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a8b      	ldr	r2, [pc, #556]	@ (8004cec <HAL_RCC_OscConfig+0x770>)
 8004abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ac2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ac4:	f7fd fad6 	bl	8002074 <HAL_GetTick>
 8004ac8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004acc:	f7fd fad2 	bl	8002074 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b64      	cmp	r3, #100	@ 0x64
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e1a0      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ade:	4b83      	ldr	r3, [pc, #524]	@ (8004cec <HAL_RCC_OscConfig+0x770>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0f0      	beq.n	8004acc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d106      	bne.n	8004b00 <HAL_RCC_OscConfig+0x584>
 8004af2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004af8:	f043 0301 	orr.w	r3, r3, #1
 8004afc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004afe:	e02d      	b.n	8004b5c <HAL_RCC_OscConfig+0x5e0>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10c      	bne.n	8004b22 <HAL_RCC_OscConfig+0x5a6>
 8004b08:	4b77      	ldr	r3, [pc, #476]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0c:	4a76      	ldr	r2, [pc, #472]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004b0e:	f023 0301 	bic.w	r3, r3, #1
 8004b12:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b14:	4b74      	ldr	r3, [pc, #464]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b18:	4a73      	ldr	r2, [pc, #460]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004b1a:	f023 0304 	bic.w	r3, r3, #4
 8004b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b20:	e01c      	b.n	8004b5c <HAL_RCC_OscConfig+0x5e0>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2b05      	cmp	r3, #5
 8004b28:	d10c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x5c8>
 8004b2a:	4b6f      	ldr	r3, [pc, #444]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b2e:	4a6e      	ldr	r2, [pc, #440]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004b30:	f043 0304 	orr.w	r3, r3, #4
 8004b34:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b36:	4b6c      	ldr	r3, [pc, #432]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3a:	4a6b      	ldr	r2, [pc, #428]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b42:	e00b      	b.n	8004b5c <HAL_RCC_OscConfig+0x5e0>
 8004b44:	4b68      	ldr	r3, [pc, #416]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b48:	4a67      	ldr	r2, [pc, #412]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004b4a:	f023 0301 	bic.w	r3, r3, #1
 8004b4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b50:	4b65      	ldr	r3, [pc, #404]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b54:	4a64      	ldr	r2, [pc, #400]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004b56:	f023 0304 	bic.w	r3, r3, #4
 8004b5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d015      	beq.n	8004b90 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b64:	f7fd fa86 	bl	8002074 <HAL_GetTick>
 8004b68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b6c:	f7fd fa82 	bl	8002074 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e14e      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b82:	4b59      	ldr	r3, [pc, #356]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0ee      	beq.n	8004b6c <HAL_RCC_OscConfig+0x5f0>
 8004b8e:	e014      	b.n	8004bba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b90:	f7fd fa70 	bl	8002074 <HAL_GetTick>
 8004b94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b98:	f7fd fa6c 	bl	8002074 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e138      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004bae:	4b4e      	ldr	r3, [pc, #312]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1ee      	bne.n	8004b98 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 812d 	beq.w	8004e1e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004bc4:	4b48      	ldr	r3, [pc, #288]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004bc6:	691b      	ldr	r3, [r3, #16]
 8004bc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bcc:	2b18      	cmp	r3, #24
 8004bce:	f000 80bd 	beq.w	8004d4c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	f040 809e 	bne.w	8004d18 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bdc:	4b42      	ldr	r3, [pc, #264]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a41      	ldr	r2, [pc, #260]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004be2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be8:	f7fd fa44 	bl	8002074 <HAL_GetTick>
 8004bec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf0:	f7fd fa40 	bl	8002074 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e10e      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c02:	4b39      	ldr	r3, [pc, #228]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1f0      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c0e:	4b36      	ldr	r3, [pc, #216]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004c10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c12:	4b37      	ldr	r3, [pc, #220]	@ (8004cf0 <HAL_RCC_OscConfig+0x774>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004c1e:	0112      	lsls	r2, r2, #4
 8004c20:	430a      	orrs	r2, r1
 8004c22:	4931      	ldr	r1, [pc, #196]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c2c:	3b01      	subs	r3, #1
 8004c2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c36:	3b01      	subs	r3, #1
 8004c38:	025b      	lsls	r3, r3, #9
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c42:	3b01      	subs	r3, #1
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c50:	3b01      	subs	r3, #1
 8004c52:	061b      	lsls	r3, r3, #24
 8004c54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c58:	4923      	ldr	r1, [pc, #140]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c5e:	4b22      	ldr	r3, [pc, #136]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c62:	4a21      	ldr	r2, [pc, #132]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c6e:	4b21      	ldr	r3, [pc, #132]	@ (8004cf4 <HAL_RCC_OscConfig+0x778>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c76:	00d2      	lsls	r2, r2, #3
 8004c78:	491b      	ldr	r1, [pc, #108]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	f023 020c 	bic.w	r2, r3, #12
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8a:	4917      	ldr	r1, [pc, #92]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c90:	4b15      	ldr	r3, [pc, #84]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c94:	f023 0202 	bic.w	r2, r3, #2
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c9c:	4912      	ldr	r1, [pc, #72]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ca2:	4b11      	ldr	r3, [pc, #68]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca6:	4a10      	ldr	r2, [pc, #64]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	4a0d      	ldr	r2, [pc, #52]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004cb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004cba:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004cc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004cc6:	4b08      	ldr	r3, [pc, #32]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cca:	4a07      	ldr	r2, [pc, #28]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd2:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a04      	ldr	r2, [pc, #16]	@ (8004ce8 <HAL_RCC_OscConfig+0x76c>)
 8004cd8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cde:	f7fd f9c9 	bl	8002074 <HAL_GetTick>
 8004ce2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ce4:	e011      	b.n	8004d0a <HAL_RCC_OscConfig+0x78e>
 8004ce6:	bf00      	nop
 8004ce8:	58024400 	.word	0x58024400
 8004cec:	58024800 	.word	0x58024800
 8004cf0:	fffffc0c 	.word	0xfffffc0c
 8004cf4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cf8:	f7fd f9bc 	bl	8002074 <HAL_GetTick>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d00:	1ad3      	subs	r3, r2, r3
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d901      	bls.n	8004d0a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e08a      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d0a:	4b47      	ldr	r3, [pc, #284]	@ (8004e28 <HAL_RCC_OscConfig+0x8ac>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d0f0      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x77c>
 8004d16:	e082      	b.n	8004e1e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d18:	4b43      	ldr	r3, [pc, #268]	@ (8004e28 <HAL_RCC_OscConfig+0x8ac>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a42      	ldr	r2, [pc, #264]	@ (8004e28 <HAL_RCC_OscConfig+0x8ac>)
 8004d1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d24:	f7fd f9a6 	bl	8002074 <HAL_GetTick>
 8004d28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fd f9a2 	bl	8002074 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e070      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e28 <HAL_RCC_OscConfig+0x8ac>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1f0      	bne.n	8004d2c <HAL_RCC_OscConfig+0x7b0>
 8004d4a:	e068      	b.n	8004e1e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d4c:	4b36      	ldr	r3, [pc, #216]	@ (8004e28 <HAL_RCC_OscConfig+0x8ac>)
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d52:	4b35      	ldr	r3, [pc, #212]	@ (8004e28 <HAL_RCC_OscConfig+0x8ac>)
 8004d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d56:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d031      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f003 0203 	and.w	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d12a      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	091b      	lsrs	r3, r3, #4
 8004d72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d122      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d88:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d11a      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	0a5b      	lsrs	r3, r3, #9
 8004d92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d111      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	0c1b      	lsrs	r3, r3, #16
 8004da4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d108      	bne.n	8004dc4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	0e1b      	lsrs	r3, r3, #24
 8004db6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dbe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e02b      	b.n	8004e20 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004dc8:	4b17      	ldr	r3, [pc, #92]	@ (8004e28 <HAL_RCC_OscConfig+0x8ac>)
 8004dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dcc:	08db      	lsrs	r3, r3, #3
 8004dce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dd2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d01f      	beq.n	8004e1e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004dde:	4b12      	ldr	r3, [pc, #72]	@ (8004e28 <HAL_RCC_OscConfig+0x8ac>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	4a11      	ldr	r2, [pc, #68]	@ (8004e28 <HAL_RCC_OscConfig+0x8ac>)
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dea:	f7fd f943 	bl	8002074 <HAL_GetTick>
 8004dee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004df0:	bf00      	nop
 8004df2:	f7fd f93f 	bl	8002074 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d0f9      	beq.n	8004df2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8004e28 <HAL_RCC_OscConfig+0x8ac>)
 8004e00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e02:	4b0a      	ldr	r3, [pc, #40]	@ (8004e2c <HAL_RCC_OscConfig+0x8b0>)
 8004e04:	4013      	ands	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e0a:	00d2      	lsls	r2, r2, #3
 8004e0c:	4906      	ldr	r1, [pc, #24]	@ (8004e28 <HAL_RCC_OscConfig+0x8ac>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e12:	4b05      	ldr	r3, [pc, #20]	@ (8004e28 <HAL_RCC_OscConfig+0x8ac>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	4a04      	ldr	r2, [pc, #16]	@ (8004e28 <HAL_RCC_OscConfig+0x8ac>)
 8004e18:	f043 0301 	orr.w	r3, r3, #1
 8004e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3730      	adds	r7, #48	@ 0x30
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	58024400 	.word	0x58024400
 8004e2c:	ffff0007 	.word	0xffff0007

08004e30 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d101      	bne.n	8004e44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e19c      	b.n	800517e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e44:	4b8a      	ldr	r3, [pc, #552]	@ (8005070 <HAL_RCC_ClockConfig+0x240>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 030f 	and.w	r3, r3, #15
 8004e4c:	683a      	ldr	r2, [r7, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d910      	bls.n	8004e74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e52:	4b87      	ldr	r3, [pc, #540]	@ (8005070 <HAL_RCC_ClockConfig+0x240>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f023 020f 	bic.w	r2, r3, #15
 8004e5a:	4985      	ldr	r1, [pc, #532]	@ (8005070 <HAL_RCC_ClockConfig+0x240>)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e62:	4b83      	ldr	r3, [pc, #524]	@ (8005070 <HAL_RCC_ClockConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e184      	b.n	800517e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d010      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	4b7b      	ldr	r3, [pc, #492]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d908      	bls.n	8004ea2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e90:	4b78      	ldr	r3, [pc, #480]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	4975      	ldr	r1, [pc, #468]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d010      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	4b70      	ldr	r3, [pc, #448]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d908      	bls.n	8004ed0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	496a      	ldr	r1, [pc, #424]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d010      	beq.n	8004efe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	4b64      	ldr	r3, [pc, #400]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d908      	bls.n	8004efe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004eec:	4b61      	ldr	r3, [pc, #388]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	495e      	ldr	r1, [pc, #376]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d010      	beq.n	8004f2c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69da      	ldr	r2, [r3, #28]
 8004f0e:	4b59      	ldr	r3, [pc, #356]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d908      	bls.n	8004f2c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f1a:	4b56      	ldr	r3, [pc, #344]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	4953      	ldr	r1, [pc, #332]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d010      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68da      	ldr	r2, [r3, #12]
 8004f3c:	4b4d      	ldr	r3, [pc, #308]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 030f 	and.w	r3, r3, #15
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d908      	bls.n	8004f5a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f48:	4b4a      	ldr	r3, [pc, #296]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	f023 020f 	bic.w	r2, r3, #15
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	4947      	ldr	r1, [pc, #284]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0301 	and.w	r3, r3, #1
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d055      	beq.n	8005012 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f66:	4b43      	ldr	r3, [pc, #268]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	4940      	ldr	r1, [pc, #256]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d107      	bne.n	8004f90 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f80:	4b3c      	ldr	r3, [pc, #240]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d121      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0f6      	b.n	800517e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	2b03      	cmp	r3, #3
 8004f96:	d107      	bne.n	8004fa8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f98:	4b36      	ldr	r3, [pc, #216]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d115      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e0ea      	b.n	800517e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d107      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004fb0:	4b30      	ldr	r3, [pc, #192]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d109      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0de      	b.n	800517e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fc0:	4b2c      	ldr	r3, [pc, #176]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0304 	and.w	r3, r3, #4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e0d6      	b.n	800517e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fd0:	4b28      	ldr	r3, [pc, #160]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f023 0207 	bic.w	r2, r3, #7
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4925      	ldr	r1, [pc, #148]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fe2:	f7fd f847 	bl	8002074 <HAL_GetTick>
 8004fe6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe8:	e00a      	b.n	8005000 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fea:	f7fd f843 	bl	8002074 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e0be      	b.n	800517e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005000:	4b1c      	ldr	r3, [pc, #112]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	429a      	cmp	r2, r3
 8005010:	d1eb      	bne.n	8004fea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d010      	beq.n	8005040 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	4b14      	ldr	r3, [pc, #80]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	429a      	cmp	r2, r3
 800502c:	d208      	bcs.n	8005040 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800502e:	4b11      	ldr	r3, [pc, #68]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f023 020f 	bic.w	r2, r3, #15
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	490e      	ldr	r1, [pc, #56]	@ (8005074 <HAL_RCC_ClockConfig+0x244>)
 800503c:	4313      	orrs	r3, r2
 800503e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005040:	4b0b      	ldr	r3, [pc, #44]	@ (8005070 <HAL_RCC_ClockConfig+0x240>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d214      	bcs.n	8005078 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b08      	ldr	r3, [pc, #32]	@ (8005070 <HAL_RCC_ClockConfig+0x240>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 020f 	bic.w	r2, r3, #15
 8005056:	4906      	ldr	r1, [pc, #24]	@ (8005070 <HAL_RCC_ClockConfig+0x240>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b04      	ldr	r3, [pc, #16]	@ (8005070 <HAL_RCC_ClockConfig+0x240>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d005      	beq.n	8005078 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e086      	b.n	800517e <HAL_RCC_ClockConfig+0x34e>
 8005070:	52002000 	.word	0x52002000
 8005074:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0304 	and.w	r3, r3, #4
 8005080:	2b00      	cmp	r3, #0
 8005082:	d010      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	4b3f      	ldr	r3, [pc, #252]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005090:	429a      	cmp	r2, r3
 8005092:	d208      	bcs.n	80050a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005094:	4b3c      	ldr	r3, [pc, #240]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	4939      	ldr	r1, [pc, #228]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d010      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	4b34      	ldr	r3, [pc, #208]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050be:	429a      	cmp	r2, r3
 80050c0:	d208      	bcs.n	80050d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80050c2:	4b31      	ldr	r3, [pc, #196]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 80050c4:	69db      	ldr	r3, [r3, #28]
 80050c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	492e      	ldr	r1, [pc, #184]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d010      	beq.n	8005102 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699a      	ldr	r2, [r3, #24]
 80050e4:	4b28      	ldr	r3, [pc, #160]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d208      	bcs.n	8005102 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050f0:	4b25      	ldr	r3, [pc, #148]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 80050f2:	69db      	ldr	r3, [r3, #28]
 80050f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	4922      	ldr	r1, [pc, #136]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0320 	and.w	r3, r3, #32
 800510a:	2b00      	cmp	r3, #0
 800510c:	d010      	beq.n	8005130 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69da      	ldr	r2, [r3, #28]
 8005112:	4b1d      	ldr	r3, [pc, #116]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800511a:	429a      	cmp	r2, r3
 800511c:	d208      	bcs.n	8005130 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800511e:	4b1a      	ldr	r3, [pc, #104]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	4917      	ldr	r1, [pc, #92]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 800512c:	4313      	orrs	r3, r2
 800512e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005130:	f000 f89e 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8005134:	4602      	mov	r2, r0
 8005136:	4b14      	ldr	r3, [pc, #80]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	0a1b      	lsrs	r3, r3, #8
 800513c:	f003 030f 	and.w	r3, r3, #15
 8005140:	4912      	ldr	r1, [pc, #72]	@ (800518c <HAL_RCC_ClockConfig+0x35c>)
 8005142:	5ccb      	ldrb	r3, [r1, r3]
 8005144:	f003 031f 	and.w	r3, r3, #31
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
 800514c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800514e:	4b0e      	ldr	r3, [pc, #56]	@ (8005188 <HAL_RCC_ClockConfig+0x358>)
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	4a0d      	ldr	r2, [pc, #52]	@ (800518c <HAL_RCC_ClockConfig+0x35c>)
 8005158:	5cd3      	ldrb	r3, [r2, r3]
 800515a:	f003 031f 	and.w	r3, r3, #31
 800515e:	693a      	ldr	r2, [r7, #16]
 8005160:	fa22 f303 	lsr.w	r3, r2, r3
 8005164:	4a0a      	ldr	r2, [pc, #40]	@ (8005190 <HAL_RCC_ClockConfig+0x360>)
 8005166:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005168:	4a0a      	ldr	r2, [pc, #40]	@ (8005194 <HAL_RCC_ClockConfig+0x364>)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800516e:	4b0a      	ldr	r3, [pc, #40]	@ (8005198 <HAL_RCC_ClockConfig+0x368>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f7fc ff34 	bl	8001fe0 <HAL_InitTick>
 8005178:	4603      	mov	r3, r0
 800517a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800517c:	7bfb      	ldrb	r3, [r7, #15]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	58024400 	.word	0x58024400
 800518c:	0800ab90 	.word	0x0800ab90
 8005190:	24000008 	.word	0x24000008
 8005194:	24000004 	.word	0x24000004
 8005198:	2400000c 	.word	0x2400000c

0800519c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b08c      	sub	sp, #48	@ 0x30
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d12a      	bne.n	8005204 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80051ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005264 <HAL_RCC_MCOConfig+0xc8>)
 80051b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051b4:	4a2b      	ldr	r2, [pc, #172]	@ (8005264 <HAL_RCC_MCOConfig+0xc8>)
 80051b6:	f043 0301 	orr.w	r3, r3, #1
 80051ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80051be:	4b29      	ldr	r3, [pc, #164]	@ (8005264 <HAL_RCC_MCOConfig+0xc8>)
 80051c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80051cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d2:	2302      	movs	r3, #2
 80051d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051d6:	2303      	movs	r3, #3
 80051d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80051de:	2300      	movs	r3, #0
 80051e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80051e2:	f107 031c 	add.w	r3, r7, #28
 80051e6:	4619      	mov	r1, r3
 80051e8:	481f      	ldr	r0, [pc, #124]	@ (8005268 <HAL_RCC_MCOConfig+0xcc>)
 80051ea:	f7fe f85f 	bl	80032ac <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80051ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005264 <HAL_RCC_MCOConfig+0xc8>)
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	430b      	orrs	r3, r1
 80051fc:	4919      	ldr	r1, [pc, #100]	@ (8005264 <HAL_RCC_MCOConfig+0xc8>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005202:	e02a      	b.n	800525a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005204:	4b17      	ldr	r3, [pc, #92]	@ (8005264 <HAL_RCC_MCOConfig+0xc8>)
 8005206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800520a:	4a16      	ldr	r2, [pc, #88]	@ (8005264 <HAL_RCC_MCOConfig+0xc8>)
 800520c:	f043 0304 	orr.w	r3, r3, #4
 8005210:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005214:	4b13      	ldr	r3, [pc, #76]	@ (8005264 <HAL_RCC_MCOConfig+0xc8>)
 8005216:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005222:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005228:	2302      	movs	r3, #2
 800522a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800522c:	2303      	movs	r3, #3
 800522e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005230:	2300      	movs	r3, #0
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005234:	2300      	movs	r3, #0
 8005236:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005238:	f107 031c 	add.w	r3, r7, #28
 800523c:	4619      	mov	r1, r3
 800523e:	480b      	ldr	r0, [pc, #44]	@ (800526c <HAL_RCC_MCOConfig+0xd0>)
 8005240:	f7fe f834 	bl	80032ac <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005244:	4b07      	ldr	r3, [pc, #28]	@ (8005264 <HAL_RCC_MCOConfig+0xc8>)
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	01d9      	lsls	r1, r3, #7
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	430b      	orrs	r3, r1
 8005254:	4903      	ldr	r1, [pc, #12]	@ (8005264 <HAL_RCC_MCOConfig+0xc8>)
 8005256:	4313      	orrs	r3, r2
 8005258:	610b      	str	r3, [r1, #16]
}
 800525a:	bf00      	nop
 800525c:	3730      	adds	r7, #48	@ 0x30
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	58024400 	.word	0x58024400
 8005268:	58020000 	.word	0x58020000
 800526c:	58020800 	.word	0x58020800

08005270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005270:	b480      	push	{r7}
 8005272:	b089      	sub	sp, #36	@ 0x24
 8005274:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005276:	4bb3      	ldr	r3, [pc, #716]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800527e:	2b18      	cmp	r3, #24
 8005280:	f200 8155 	bhi.w	800552e <HAL_RCC_GetSysClockFreq+0x2be>
 8005284:	a201      	add	r2, pc, #4	@ (adr r2, 800528c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528a:	bf00      	nop
 800528c:	080052f1 	.word	0x080052f1
 8005290:	0800552f 	.word	0x0800552f
 8005294:	0800552f 	.word	0x0800552f
 8005298:	0800552f 	.word	0x0800552f
 800529c:	0800552f 	.word	0x0800552f
 80052a0:	0800552f 	.word	0x0800552f
 80052a4:	0800552f 	.word	0x0800552f
 80052a8:	0800552f 	.word	0x0800552f
 80052ac:	08005317 	.word	0x08005317
 80052b0:	0800552f 	.word	0x0800552f
 80052b4:	0800552f 	.word	0x0800552f
 80052b8:	0800552f 	.word	0x0800552f
 80052bc:	0800552f 	.word	0x0800552f
 80052c0:	0800552f 	.word	0x0800552f
 80052c4:	0800552f 	.word	0x0800552f
 80052c8:	0800552f 	.word	0x0800552f
 80052cc:	0800531d 	.word	0x0800531d
 80052d0:	0800552f 	.word	0x0800552f
 80052d4:	0800552f 	.word	0x0800552f
 80052d8:	0800552f 	.word	0x0800552f
 80052dc:	0800552f 	.word	0x0800552f
 80052e0:	0800552f 	.word	0x0800552f
 80052e4:	0800552f 	.word	0x0800552f
 80052e8:	0800552f 	.word	0x0800552f
 80052ec:	08005323 	.word	0x08005323
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052f0:	4b94      	ldr	r3, [pc, #592]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0320 	and.w	r3, r3, #32
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d009      	beq.n	8005310 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052fc:	4b91      	ldr	r3, [pc, #580]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	08db      	lsrs	r3, r3, #3
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	4a90      	ldr	r2, [pc, #576]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
 800530c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800530e:	e111      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005310:	4b8d      	ldr	r3, [pc, #564]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005312:	61bb      	str	r3, [r7, #24]
      break;
 8005314:	e10e      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005316:	4b8d      	ldr	r3, [pc, #564]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005318:	61bb      	str	r3, [r7, #24]
      break;
 800531a:	e10b      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800531c:	4b8c      	ldr	r3, [pc, #560]	@ (8005550 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800531e:	61bb      	str	r3, [r7, #24]
      break;
 8005320:	e108      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005322:	4b88      	ldr	r3, [pc, #544]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005326:	f003 0303 	and.w	r3, r3, #3
 800532a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800532c:	4b85      	ldr	r3, [pc, #532]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800532e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005330:	091b      	lsrs	r3, r3, #4
 8005332:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005336:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005338:	4b82      	ldr	r3, [pc, #520]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800533a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005342:	4b80      	ldr	r3, [pc, #512]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005346:	08db      	lsrs	r3, r3, #3
 8005348:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	fb02 f303 	mul.w	r3, r2, r3
 8005352:	ee07 3a90 	vmov	s15, r3
 8005356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800535a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80e1 	beq.w	8005528 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	2b02      	cmp	r3, #2
 800536a:	f000 8083 	beq.w	8005474 <HAL_RCC_GetSysClockFreq+0x204>
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	2b02      	cmp	r3, #2
 8005372:	f200 80a1 	bhi.w	80054b8 <HAL_RCC_GetSysClockFreq+0x248>
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <HAL_RCC_GetSysClockFreq+0x114>
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d056      	beq.n	8005430 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005382:	e099      	b.n	80054b8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005384:	4b6f      	ldr	r3, [pc, #444]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b00      	cmp	r3, #0
 800538e:	d02d      	beq.n	80053ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005390:	4b6c      	ldr	r3, [pc, #432]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	08db      	lsrs	r3, r3, #3
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	4a6b      	ldr	r2, [pc, #428]	@ (8005548 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800539c:	fa22 f303 	lsr.w	r3, r2, r3
 80053a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	ee07 3a90 	vmov	s15, r3
 80053a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ba:	4b62      	ldr	r3, [pc, #392]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80053ce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005554 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80053ea:	e087      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005558 <HAL_RCC_GetSysClockFreq+0x2e8>
 80053fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fe:	4b51      	ldr	r3, [pc, #324]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005412:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005554 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800542e:	e065      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	ee07 3a90 	vmov	s15, r3
 8005436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800543a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800555c <HAL_RCC_GetSysClockFreq+0x2ec>
 800543e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005442:	4b40      	ldr	r3, [pc, #256]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005452:	ed97 6a02 	vldr	s12, [r7, #8]
 8005456:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005554 <HAL_RCC_GetSysClockFreq+0x2e4>
 800545a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800546a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005472:	e043      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005560 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005486:	4b2f      	ldr	r3, [pc, #188]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800548a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005496:	ed97 6a02 	vldr	s12, [r7, #8]
 800549a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005554 <HAL_RCC_GetSysClockFreq+0x2e4>
 800549e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054b6:	e021      	b.n	80054fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	ee07 3a90 	vmov	s15, r3
 80054be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800555c <HAL_RCC_GetSysClockFreq+0x2ec>
 80054c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ca:	4b1e      	ldr	r3, [pc, #120]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054da:	ed97 6a02 	vldr	s12, [r7, #8]
 80054de:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005554 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80054fc:	4b11      	ldr	r3, [pc, #68]	@ (8005544 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005500:	0a5b      	lsrs	r3, r3, #9
 8005502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005506:	3301      	adds	r3, #1
 8005508:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	ee07 3a90 	vmov	s15, r3
 8005510:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005514:	edd7 6a07 	vldr	s13, [r7, #28]
 8005518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800551c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005520:	ee17 3a90 	vmov	r3, s15
 8005524:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005526:	e005      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	61bb      	str	r3, [r7, #24]
      break;
 800552c:	e002      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800552e:	4b07      	ldr	r3, [pc, #28]	@ (800554c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005530:	61bb      	str	r3, [r7, #24]
      break;
 8005532:	bf00      	nop
  }

  return sysclockfreq;
 8005534:	69bb      	ldr	r3, [r7, #24]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3724      	adds	r7, #36	@ 0x24
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	58024400 	.word	0x58024400
 8005548:	03d09000 	.word	0x03d09000
 800554c:	003d0900 	.word	0x003d0900
 8005550:	007a1200 	.word	0x007a1200
 8005554:	46000000 	.word	0x46000000
 8005558:	4c742400 	.word	0x4c742400
 800555c:	4a742400 	.word	0x4a742400
 8005560:	4af42400 	.word	0x4af42400

08005564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800556a:	f7ff fe81 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 800556e:	4602      	mov	r2, r0
 8005570:	4b10      	ldr	r3, [pc, #64]	@ (80055b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	0a1b      	lsrs	r3, r3, #8
 8005576:	f003 030f 	and.w	r3, r3, #15
 800557a:	490f      	ldr	r1, [pc, #60]	@ (80055b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800557c:	5ccb      	ldrb	r3, [r1, r3]
 800557e:	f003 031f 	and.w	r3, r3, #31
 8005582:	fa22 f303 	lsr.w	r3, r2, r3
 8005586:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005588:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	f003 030f 	and.w	r3, r3, #15
 8005590:	4a09      	ldr	r2, [pc, #36]	@ (80055b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8005592:	5cd3      	ldrb	r3, [r2, r3]
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	fa22 f303 	lsr.w	r3, r2, r3
 800559e:	4a07      	ldr	r2, [pc, #28]	@ (80055bc <HAL_RCC_GetHCLKFreq+0x58>)
 80055a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055a2:	4a07      	ldr	r2, [pc, #28]	@ (80055c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80055a8:	4b04      	ldr	r3, [pc, #16]	@ (80055bc <HAL_RCC_GetHCLKFreq+0x58>)
 80055aa:	681b      	ldr	r3, [r3, #0]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	58024400 	.word	0x58024400
 80055b8:	0800ab90 	.word	0x0800ab90
 80055bc:	24000008 	.word	0x24000008
 80055c0:	24000004 	.word	0x24000004

080055c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80055c8:	f7ff ffcc 	bl	8005564 <HAL_RCC_GetHCLKFreq>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b06      	ldr	r3, [pc, #24]	@ (80055e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	091b      	lsrs	r3, r3, #4
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	4904      	ldr	r1, [pc, #16]	@ (80055ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80055da:	5ccb      	ldrb	r3, [r1, r3]
 80055dc:	f003 031f 	and.w	r3, r3, #31
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	58024400 	.word	0x58024400
 80055ec:	0800ab90 	.word	0x0800ab90

080055f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055f4:	f7ff ffb6 	bl	8005564 <HAL_RCC_GetHCLKFreq>
 80055f8:	4602      	mov	r2, r0
 80055fa:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	0a1b      	lsrs	r3, r3, #8
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	4904      	ldr	r1, [pc, #16]	@ (8005618 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005606:	5ccb      	ldrb	r3, [r1, r3]
 8005608:	f003 031f 	and.w	r3, r3, #31
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005610:	4618      	mov	r0, r3
 8005612:	bd80      	pop	{r7, pc}
 8005614:	58024400 	.word	0x58024400
 8005618:	0800ab90 	.word	0x0800ab90

0800561c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800561c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005620:	b0ca      	sub	sp, #296	@ 0x128
 8005622:	af00      	add	r7, sp, #0
 8005624:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005628:	2300      	movs	r3, #0
 800562a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800562e:	2300      	movs	r3, #0
 8005630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005640:	2500      	movs	r5, #0
 8005642:	ea54 0305 	orrs.w	r3, r4, r5
 8005646:	d049      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800564e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005652:	d02f      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005654:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005658:	d828      	bhi.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 800565a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800565e:	d01a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005660:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005664:	d822      	bhi.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800566a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800566e:	d007      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005670:	e01c      	b.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005672:	4bb8      	ldr	r3, [pc, #736]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005676:	4ab7      	ldr	r2, [pc, #732]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800567c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800567e:	e01a      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005684:	3308      	adds	r3, #8
 8005686:	2102      	movs	r1, #2
 8005688:	4618      	mov	r0, r3
 800568a:	f001 fc8f 	bl	8006fac <RCCEx_PLL2_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005694:	e00f      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569a:	3328      	adds	r3, #40	@ 0x28
 800569c:	2102      	movs	r1, #2
 800569e:	4618      	mov	r0, r3
 80056a0:	f001 fd36 	bl	8007110 <RCCEx_PLL3_Config>
 80056a4:	4603      	mov	r3, r0
 80056a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056aa:	e004      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056b2:	e000      	b.n	80056b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80056b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d10a      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056be:	4ba5      	ldr	r3, [pc, #660]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80056c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056cc:	4aa1      	ldr	r2, [pc, #644]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056ce:	430b      	orrs	r3, r1
 80056d0:	6513      	str	r3, [r2, #80]	@ 0x50
 80056d2:	e003      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80056e8:	f04f 0900 	mov.w	r9, #0
 80056ec:	ea58 0309 	orrs.w	r3, r8, r9
 80056f0:	d047      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80056f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d82a      	bhi.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80056fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005704 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80056fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005702:	bf00      	nop
 8005704:	08005719 	.word	0x08005719
 8005708:	08005727 	.word	0x08005727
 800570c:	0800573d 	.word	0x0800573d
 8005710:	0800575b 	.word	0x0800575b
 8005714:	0800575b 	.word	0x0800575b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005718:	4b8e      	ldr	r3, [pc, #568]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800571a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800571c:	4a8d      	ldr	r2, [pc, #564]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800571e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005722:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005724:	e01a      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572a:	3308      	adds	r3, #8
 800572c:	2100      	movs	r1, #0
 800572e:	4618      	mov	r0, r3
 8005730:	f001 fc3c 	bl	8006fac <RCCEx_PLL2_Config>
 8005734:	4603      	mov	r3, r0
 8005736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800573a:	e00f      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800573c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005740:	3328      	adds	r3, #40	@ 0x28
 8005742:	2100      	movs	r1, #0
 8005744:	4618      	mov	r0, r3
 8005746:	f001 fce3 	bl	8007110 <RCCEx_PLL3_Config>
 800574a:	4603      	mov	r3, r0
 800574c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005750:	e004      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005758:	e000      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800575a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800575c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10a      	bne.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005764:	4b7b      	ldr	r3, [pc, #492]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005768:	f023 0107 	bic.w	r1, r3, #7
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005772:	4a78      	ldr	r2, [pc, #480]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005774:	430b      	orrs	r3, r1
 8005776:	6513      	str	r3, [r2, #80]	@ 0x50
 8005778:	e003      	b.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800577a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800577e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800578e:	f04f 0b00 	mov.w	fp, #0
 8005792:	ea5a 030b 	orrs.w	r3, sl, fp
 8005796:	d04c      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005798:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800579c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057a2:	d030      	beq.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80057a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057a8:	d829      	bhi.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80057ac:	d02d      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80057ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80057b0:	d825      	bhi.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057b2:	2b80      	cmp	r3, #128	@ 0x80
 80057b4:	d018      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80057b6:	2b80      	cmp	r3, #128	@ 0x80
 80057b8:	d821      	bhi.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80057be:	2b40      	cmp	r3, #64	@ 0x40
 80057c0:	d007      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80057c2:	e01c      	b.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057c4:	4b63      	ldr	r3, [pc, #396]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c8:	4a62      	ldr	r2, [pc, #392]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057d0:	e01c      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d6:	3308      	adds	r3, #8
 80057d8:	2100      	movs	r1, #0
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 fbe6 	bl	8006fac <RCCEx_PLL2_Config>
 80057e0:	4603      	mov	r3, r0
 80057e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057e6:	e011      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ec:	3328      	adds	r3, #40	@ 0x28
 80057ee:	2100      	movs	r1, #0
 80057f0:	4618      	mov	r0, r3
 80057f2:	f001 fc8d 	bl	8007110 <RCCEx_PLL3_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80057fc:	e006      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005804:	e002      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005806:	bf00      	nop
 8005808:	e000      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800580a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800580c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10a      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005814:	4b4f      	ldr	r3, [pc, #316]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005818:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800581c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005820:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005822:	4a4c      	ldr	r2, [pc, #304]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005824:	430b      	orrs	r3, r1
 8005826:	6513      	str	r3, [r2, #80]	@ 0x50
 8005828:	e003      	b.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800582a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800582e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800583e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005842:	2300      	movs	r3, #0
 8005844:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005848:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800584c:	460b      	mov	r3, r1
 800584e:	4313      	orrs	r3, r2
 8005850:	d053      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005856:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800585a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800585e:	d035      	beq.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005860:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005864:	d82e      	bhi.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005866:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800586a:	d031      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800586c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005870:	d828      	bhi.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005876:	d01a      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005878:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800587c:	d822      	bhi.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005882:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005886:	d007      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005888:	e01c      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800588a:	4b32      	ldr	r3, [pc, #200]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800588c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588e:	4a31      	ldr	r2, [pc, #196]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005894:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005896:	e01c      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005898:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589c:	3308      	adds	r3, #8
 800589e:	2100      	movs	r1, #0
 80058a0:	4618      	mov	r0, r3
 80058a2:	f001 fb83 	bl	8006fac <RCCEx_PLL2_Config>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80058ac:	e011      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b2:	3328      	adds	r3, #40	@ 0x28
 80058b4:	2100      	movs	r1, #0
 80058b6:	4618      	mov	r0, r3
 80058b8:	f001 fc2a 	bl	8007110 <RCCEx_PLL3_Config>
 80058bc:	4603      	mov	r3, r0
 80058be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058c2:	e006      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058ca:	e002      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058cc:	bf00      	nop
 80058ce:	e000      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80058d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d10b      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80058da:	4b1e      	ldr	r3, [pc, #120]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058de:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80058e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80058ea:	4a1a      	ldr	r2, [pc, #104]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ec:	430b      	orrs	r3, r1
 80058ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80058f0:	e003      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005902:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005906:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800590a:	2300      	movs	r3, #0
 800590c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005910:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005914:	460b      	mov	r3, r1
 8005916:	4313      	orrs	r3, r2
 8005918:	d056      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800591a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800591e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005922:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005926:	d038      	beq.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005928:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800592c:	d831      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800592e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005932:	d034      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005934:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005938:	d82b      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800593a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800593e:	d01d      	beq.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005940:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005944:	d825      	bhi.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d006      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800594a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800594e:	d00a      	beq.n	8005966 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005950:	e01f      	b.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005952:	bf00      	nop
 8005954:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005958:	4ba2      	ldr	r3, [pc, #648]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800595a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800595c:	4aa1      	ldr	r2, [pc, #644]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800595e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005964:	e01c      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800596a:	3308      	adds	r3, #8
 800596c:	2100      	movs	r1, #0
 800596e:	4618      	mov	r0, r3
 8005970:	f001 fb1c 	bl	8006fac <RCCEx_PLL2_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800597a:	e011      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800597c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005980:	3328      	adds	r3, #40	@ 0x28
 8005982:	2100      	movs	r1, #0
 8005984:	4618      	mov	r0, r3
 8005986:	f001 fbc3 	bl	8007110 <RCCEx_PLL3_Config>
 800598a:	4603      	mov	r3, r0
 800598c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005990:	e006      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005998:	e002      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800599a:	bf00      	nop
 800599c:	e000      	b.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800599e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10b      	bne.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80059a8:	4b8e      	ldr	r3, [pc, #568]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80059b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80059b8:	4a8a      	ldr	r2, [pc, #552]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059ba:	430b      	orrs	r3, r1
 80059bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80059be:	e003      	b.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80059c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80059d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80059d8:	2300      	movs	r3, #0
 80059da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80059de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80059e2:	460b      	mov	r3, r1
 80059e4:	4313      	orrs	r3, r2
 80059e6:	d03a      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80059e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ee:	2b30      	cmp	r3, #48	@ 0x30
 80059f0:	d01f      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80059f2:	2b30      	cmp	r3, #48	@ 0x30
 80059f4:	d819      	bhi.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d00c      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80059fa:	2b20      	cmp	r3, #32
 80059fc:	d815      	bhi.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d019      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005a02:	2b10      	cmp	r3, #16
 8005a04:	d111      	bne.n	8005a2a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a06:	4b77      	ldr	r3, [pc, #476]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a0a:	4a76      	ldr	r2, [pc, #472]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a12:	e011      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a18:	3308      	adds	r3, #8
 8005a1a:	2102      	movs	r1, #2
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f001 fac5 	bl	8006fac <RCCEx_PLL2_Config>
 8005a22:	4603      	mov	r3, r0
 8005a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005a28:	e006      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a30:	e002      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005a40:	4b68      	ldr	r3, [pc, #416]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a44:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a4e:	4a65      	ldr	r2, [pc, #404]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a50:	430b      	orrs	r3, r1
 8005a52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005a54:	e003      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a6a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a74:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	d051      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a88:	d035      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005a8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a8e:	d82e      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a90:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a94:	d031      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005a96:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a9a:	d828      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005a9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa0:	d01a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005aa2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005aa6:	d822      	bhi.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d003      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005aac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab0:	d007      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005ab2:	e01c      	b.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ab4:	4b4b      	ldr	r3, [pc, #300]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab8:	4a4a      	ldr	r2, [pc, #296]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ac0:	e01c      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ac6:	3308      	adds	r3, #8
 8005ac8:	2100      	movs	r1, #0
 8005aca:	4618      	mov	r0, r3
 8005acc:	f001 fa6e 	bl	8006fac <RCCEx_PLL2_Config>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005ad6:	e011      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005adc:	3328      	adds	r3, #40	@ 0x28
 8005ade:	2100      	movs	r1, #0
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f001 fb15 	bl	8007110 <RCCEx_PLL3_Config>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005aec:	e006      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005af4:	e002      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005af6:	bf00      	nop
 8005af8:	e000      	b.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b04:	4b37      	ldr	r3, [pc, #220]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b08:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b12:	4a34      	ldr	r2, [pc, #208]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b14:	430b      	orrs	r3, r1
 8005b16:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b18:	e003      	b.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b2a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005b2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b32:	2300      	movs	r3, #0
 8005b34:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005b38:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	d056      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b4c:	d033      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005b4e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b52:	d82c      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b58:	d02f      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005b5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b5e:	d826      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b64:	d02b      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005b66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b6a:	d820      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b70:	d012      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005b72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b76:	d81a      	bhi.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d022      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b80:	d115      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b86:	3308      	adds	r3, #8
 8005b88:	2101      	movs	r1, #1
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f001 fa0e 	bl	8006fac <RCCEx_PLL2_Config>
 8005b90:	4603      	mov	r3, r0
 8005b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b96:	e015      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b9c:	3328      	adds	r3, #40	@ 0x28
 8005b9e:	2101      	movs	r1, #1
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f001 fab5 	bl	8007110 <RCCEx_PLL3_Config>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005bac:	e00a      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bb4:	e006      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bb6:	bf00      	nop
 8005bb8:	e004      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bba:	bf00      	nop
 8005bbc:	e002      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bbe:	bf00      	nop
 8005bc0:	e000      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d10d      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005bcc:	4b05      	ldr	r3, [pc, #20]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bd0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005bda:	4a02      	ldr	r2, [pc, #8]	@ (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bdc:	430b      	orrs	r3, r1
 8005bde:	6513      	str	r3, [r2, #80]	@ 0x50
 8005be0:	e006      	b.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005be2:	bf00      	nop
 8005be4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005be8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c00:	2300      	movs	r3, #0
 8005c02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c06:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	d055      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005c18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c1c:	d033      	beq.n	8005c86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c22:	d82c      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c28:	d02f      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c2e:	d826      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c34:	d02b      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005c36:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c3a:	d820      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c40:	d012      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005c42:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c46:	d81a      	bhi.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d022      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005c4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c50:	d115      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c56:	3308      	adds	r3, #8
 8005c58:	2101      	movs	r1, #1
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f001 f9a6 	bl	8006fac <RCCEx_PLL2_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c66:	e015      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6c:	3328      	adds	r3, #40	@ 0x28
 8005c6e:	2101      	movs	r1, #1
 8005c70:	4618      	mov	r0, r3
 8005c72:	f001 fa4d 	bl	8007110 <RCCEx_PLL3_Config>
 8005c76:	4603      	mov	r3, r0
 8005c78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c7c:	e00a      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c84:	e006      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c86:	bf00      	nop
 8005c88:	e004      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c8a:	bf00      	nop
 8005c8c:	e002      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c8e:	bf00      	nop
 8005c90:	e000      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10b      	bne.n	8005cb4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c9c:	4ba3      	ldr	r3, [pc, #652]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005cac:	4a9f      	ldr	r2, [pc, #636]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cb2:	e003      	b.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005cd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	d037      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ce2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ce6:	d00e      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005ce8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005cec:	d816      	bhi.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d018      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005cf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005cf6:	d111      	bne.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cf8:	4b8c      	ldr	r3, [pc, #560]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfc:	4a8b      	ldr	r2, [pc, #556]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d04:	e00f      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	2101      	movs	r1, #1
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f001 f94c 	bl	8006fac <RCCEx_PLL2_Config>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d1a:	e004      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d22:	e000      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10a      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d32:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d3c:	4a7b      	ldr	r2, [pc, #492]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d3e:	430b      	orrs	r3, r1
 8005d40:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d42:	e003      	b.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d54:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005d58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d62:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005d66:	460b      	mov	r3, r1
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	d039      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d81c      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005d76:	a201      	add	r2, pc, #4	@ (adr r2, 8005d7c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7c:	08005db9 	.word	0x08005db9
 8005d80:	08005d8d 	.word	0x08005d8d
 8005d84:	08005d9b 	.word	0x08005d9b
 8005d88:	08005db9 	.word	0x08005db9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d8c:	4b67      	ldr	r3, [pc, #412]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d90:	4a66      	ldr	r2, [pc, #408]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d98:	e00f      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9e:	3308      	adds	r3, #8
 8005da0:	2102      	movs	r1, #2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f001 f902 	bl	8006fac <RCCEx_PLL2_Config>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005dae:	e004      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005db6:	e000      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005db8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005dc2:	4b5a      	ldr	r3, [pc, #360]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc6:	f023 0103 	bic.w	r1, r3, #3
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd0:	4a56      	ldr	r2, [pc, #344]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005dd6:	e003      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ddc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005dec:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005df0:	2300      	movs	r3, #0
 8005df2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005df6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	f000 809f 	beq.w	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e02:	4b4b      	ldr	r3, [pc, #300]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a4a      	ldr	r2, [pc, #296]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e0e:	f7fc f931 	bl	8002074 <HAL_GetTick>
 8005e12:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e16:	e00b      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e18:	f7fc f92c 	bl	8002074 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	2b64      	cmp	r3, #100	@ 0x64
 8005e26:	d903      	bls.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e2e:	e005      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e30:	4b3f      	ldr	r3, [pc, #252]	@ (8005f30 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0ed      	beq.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005e3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d179      	bne.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e44:	4b39      	ldr	r3, [pc, #228]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e46:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e50:	4053      	eors	r3, r2
 8005e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d015      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e5a:	4b34      	ldr	r3, [pc, #208]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e62:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e66:	4b31      	ldr	r3, [pc, #196]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e6a:	4a30      	ldr	r2, [pc, #192]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e70:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e72:	4b2e      	ldr	r3, [pc, #184]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e76:	4a2d      	ldr	r2, [pc, #180]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e7c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e7e:	4a2b      	ldr	r2, [pc, #172]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005e84:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e92:	d118      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e94:	f7fc f8ee 	bl	8002074 <HAL_GetTick>
 8005e98:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e9c:	e00d      	b.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e9e:	f7fc f8e9 	bl	8002074 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ea8:	1ad2      	subs	r2, r2, r3
 8005eaa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d903      	bls.n	8005eba <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005eb8:	e005      	b.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eba:	4b1c      	ldr	r3, [pc, #112]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ebe:	f003 0302 	and.w	r3, r3, #2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0eb      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d129      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ed6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ede:	d10e      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005ee0:	4b12      	ldr	r3, [pc, #72]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ef0:	091a      	lsrs	r2, r3, #4
 8005ef2:	4b10      	ldr	r3, [pc, #64]	@ (8005f34 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	6113      	str	r3, [r2, #16]
 8005efc:	e005      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005efe:	4b0b      	ldr	r3, [pc, #44]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	4a0a      	ldr	r2, [pc, #40]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f04:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f08:	6113      	str	r3, [r2, #16]
 8005f0a:	4b08      	ldr	r3, [pc, #32]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f0c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f1a:	4a04      	ldr	r2, [pc, #16]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f20:	e00e      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005f2a:	e009      	b.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005f2c:	58024400 	.word	0x58024400
 8005f30:	58024800 	.word	0x58024800
 8005f34:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f002 0301 	and.w	r3, r2, #1
 8005f4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f50:	2300      	movs	r3, #0
 8005f52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005f56:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	f000 8089 	beq.w	8006074 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f68:	2b28      	cmp	r3, #40	@ 0x28
 8005f6a:	d86b      	bhi.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005f6c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f74 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005f6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f72:	bf00      	nop
 8005f74:	0800604d 	.word	0x0800604d
 8005f78:	08006045 	.word	0x08006045
 8005f7c:	08006045 	.word	0x08006045
 8005f80:	08006045 	.word	0x08006045
 8005f84:	08006045 	.word	0x08006045
 8005f88:	08006045 	.word	0x08006045
 8005f8c:	08006045 	.word	0x08006045
 8005f90:	08006045 	.word	0x08006045
 8005f94:	08006019 	.word	0x08006019
 8005f98:	08006045 	.word	0x08006045
 8005f9c:	08006045 	.word	0x08006045
 8005fa0:	08006045 	.word	0x08006045
 8005fa4:	08006045 	.word	0x08006045
 8005fa8:	08006045 	.word	0x08006045
 8005fac:	08006045 	.word	0x08006045
 8005fb0:	08006045 	.word	0x08006045
 8005fb4:	0800602f 	.word	0x0800602f
 8005fb8:	08006045 	.word	0x08006045
 8005fbc:	08006045 	.word	0x08006045
 8005fc0:	08006045 	.word	0x08006045
 8005fc4:	08006045 	.word	0x08006045
 8005fc8:	08006045 	.word	0x08006045
 8005fcc:	08006045 	.word	0x08006045
 8005fd0:	08006045 	.word	0x08006045
 8005fd4:	0800604d 	.word	0x0800604d
 8005fd8:	08006045 	.word	0x08006045
 8005fdc:	08006045 	.word	0x08006045
 8005fe0:	08006045 	.word	0x08006045
 8005fe4:	08006045 	.word	0x08006045
 8005fe8:	08006045 	.word	0x08006045
 8005fec:	08006045 	.word	0x08006045
 8005ff0:	08006045 	.word	0x08006045
 8005ff4:	0800604d 	.word	0x0800604d
 8005ff8:	08006045 	.word	0x08006045
 8005ffc:	08006045 	.word	0x08006045
 8006000:	08006045 	.word	0x08006045
 8006004:	08006045 	.word	0x08006045
 8006008:	08006045 	.word	0x08006045
 800600c:	08006045 	.word	0x08006045
 8006010:	08006045 	.word	0x08006045
 8006014:	0800604d 	.word	0x0800604d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601c:	3308      	adds	r3, #8
 800601e:	2101      	movs	r1, #1
 8006020:	4618      	mov	r0, r3
 8006022:	f000 ffc3 	bl	8006fac <RCCEx_PLL2_Config>
 8006026:	4603      	mov	r3, r0
 8006028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800602c:	e00f      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800602e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006032:	3328      	adds	r3, #40	@ 0x28
 8006034:	2101      	movs	r1, #1
 8006036:	4618      	mov	r0, r3
 8006038:	f001 f86a 	bl	8007110 <RCCEx_PLL3_Config>
 800603c:	4603      	mov	r3, r0
 800603e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006042:	e004      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800604a:	e000      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800604c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800604e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006056:	4bbf      	ldr	r3, [pc, #764]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800605a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800605e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006062:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006064:	4abb      	ldr	r2, [pc, #748]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006066:	430b      	orrs	r3, r1
 8006068:	6553      	str	r3, [r2, #84]	@ 0x54
 800606a:	e003      	b.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800606c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006070:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607c:	f002 0302 	and.w	r3, r2, #2
 8006080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006084:	2300      	movs	r3, #0
 8006086:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800608a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800608e:	460b      	mov	r3, r1
 8006090:	4313      	orrs	r3, r2
 8006092:	d041      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006098:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800609a:	2b05      	cmp	r3, #5
 800609c:	d824      	bhi.n	80060e8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800609e:	a201      	add	r2, pc, #4	@ (adr r2, 80060a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80060a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a4:	080060f1 	.word	0x080060f1
 80060a8:	080060bd 	.word	0x080060bd
 80060ac:	080060d3 	.word	0x080060d3
 80060b0:	080060f1 	.word	0x080060f1
 80060b4:	080060f1 	.word	0x080060f1
 80060b8:	080060f1 	.word	0x080060f1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80060bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c0:	3308      	adds	r3, #8
 80060c2:	2101      	movs	r1, #1
 80060c4:	4618      	mov	r0, r3
 80060c6:	f000 ff71 	bl	8006fac <RCCEx_PLL2_Config>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060d0:	e00f      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80060d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d6:	3328      	adds	r3, #40	@ 0x28
 80060d8:	2101      	movs	r1, #1
 80060da:	4618      	mov	r0, r3
 80060dc:	f001 f818 	bl	8007110 <RCCEx_PLL3_Config>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80060e6:	e004      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80060ee:	e000      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80060f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10a      	bne.n	8006110 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80060fa:	4b96      	ldr	r3, [pc, #600]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060fe:	f023 0107 	bic.w	r1, r3, #7
 8006102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006106:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006108:	4a92      	ldr	r2, [pc, #584]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800610a:	430b      	orrs	r3, r1
 800610c:	6553      	str	r3, [r2, #84]	@ 0x54
 800610e:	e003      	b.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006114:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f002 0304 	and.w	r3, r2, #4
 8006124:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006128:	2300      	movs	r3, #0
 800612a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800612e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006132:	460b      	mov	r3, r1
 8006134:	4313      	orrs	r3, r2
 8006136:	d044      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006138:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006140:	2b05      	cmp	r3, #5
 8006142:	d825      	bhi.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006144:	a201      	add	r2, pc, #4	@ (adr r2, 800614c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800614a:	bf00      	nop
 800614c:	08006199 	.word	0x08006199
 8006150:	08006165 	.word	0x08006165
 8006154:	0800617b 	.word	0x0800617b
 8006158:	08006199 	.word	0x08006199
 800615c:	08006199 	.word	0x08006199
 8006160:	08006199 	.word	0x08006199
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006168:	3308      	adds	r3, #8
 800616a:	2101      	movs	r1, #1
 800616c:	4618      	mov	r0, r3
 800616e:	f000 ff1d 	bl	8006fac <RCCEx_PLL2_Config>
 8006172:	4603      	mov	r3, r0
 8006174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006178:	e00f      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617e:	3328      	adds	r3, #40	@ 0x28
 8006180:	2101      	movs	r1, #1
 8006182:	4618      	mov	r0, r3
 8006184:	f000 ffc4 	bl	8007110 <RCCEx_PLL3_Config>
 8006188:	4603      	mov	r3, r0
 800618a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800618e:	e004      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006196:	e000      	b.n	800619a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006198:	bf00      	nop
    }

    if (ret == HAL_OK)
 800619a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10b      	bne.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061a2:	4b6c      	ldr	r3, [pc, #432]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061a6:	f023 0107 	bic.w	r1, r3, #7
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80061b2:	4a68      	ldr	r2, [pc, #416]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80061b4:	430b      	orrs	r3, r1
 80061b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80061b8:	e003      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ca:	f002 0320 	and.w	r3, r2, #32
 80061ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80061d2:	2300      	movs	r3, #0
 80061d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80061d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80061dc:	460b      	mov	r3, r1
 80061de:	4313      	orrs	r3, r2
 80061e0:	d055      	beq.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80061e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061ee:	d033      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80061f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061f4:	d82c      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061fa:	d02f      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80061fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006200:	d826      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006202:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006206:	d02b      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006208:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800620c:	d820      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800620e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006212:	d012      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006214:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006218:	d81a      	bhi.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800621a:	2b00      	cmp	r3, #0
 800621c:	d022      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800621e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006222:	d115      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006228:	3308      	adds	r3, #8
 800622a:	2100      	movs	r1, #0
 800622c:	4618      	mov	r0, r3
 800622e:	f000 febd 	bl	8006fac <RCCEx_PLL2_Config>
 8006232:	4603      	mov	r3, r0
 8006234:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006238:	e015      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800623a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800623e:	3328      	adds	r3, #40	@ 0x28
 8006240:	2102      	movs	r1, #2
 8006242:	4618      	mov	r0, r3
 8006244:	f000 ff64 	bl	8007110 <RCCEx_PLL3_Config>
 8006248:	4603      	mov	r3, r0
 800624a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800624e:	e00a      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006256:	e006      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006258:	bf00      	nop
 800625a:	e004      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800625c:	bf00      	nop
 800625e:	e002      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006260:	bf00      	nop
 8006262:	e000      	b.n	8006266 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006264:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006266:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800626a:	2b00      	cmp	r3, #0
 800626c:	d10b      	bne.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800626e:	4b39      	ldr	r3, [pc, #228]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006272:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800627e:	4a35      	ldr	r2, [pc, #212]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006280:	430b      	orrs	r3, r1
 8006282:	6553      	str	r3, [r2, #84]	@ 0x54
 8006284:	e003      	b.n	800628e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006286:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800628a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800628e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006296:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800629a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800629e:	2300      	movs	r3, #0
 80062a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80062a4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80062a8:	460b      	mov	r3, r1
 80062aa:	4313      	orrs	r3, r2
 80062ac:	d058      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80062ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062b6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062ba:	d033      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80062bc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80062c0:	d82c      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062c6:	d02f      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80062c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80062cc:	d826      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062d2:	d02b      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80062d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062d8:	d820      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062de:	d012      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80062e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062e4:	d81a      	bhi.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d022      	beq.n	8006330 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80062ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ee:	d115      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f4:	3308      	adds	r3, #8
 80062f6:	2100      	movs	r1, #0
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fe57 	bl	8006fac <RCCEx_PLL2_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006304:	e015      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630a:	3328      	adds	r3, #40	@ 0x28
 800630c:	2102      	movs	r1, #2
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fefe 	bl	8007110 <RCCEx_PLL3_Config>
 8006314:	4603      	mov	r3, r0
 8006316:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800631a:	e00a      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006322:	e006      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006324:	bf00      	nop
 8006326:	e004      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006328:	bf00      	nop
 800632a:	e002      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800632c:	bf00      	nop
 800632e:	e000      	b.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006330:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006332:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10e      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800633a:	4b06      	ldr	r3, [pc, #24]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800633c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800633e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006346:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800634a:	4a02      	ldr	r2, [pc, #8]	@ (8006354 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800634c:	430b      	orrs	r3, r1
 800634e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006350:	e006      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006352:	bf00      	nop
 8006354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006358:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800635c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006368:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800636c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006370:	2300      	movs	r3, #0
 8006372:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006376:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800637a:	460b      	mov	r3, r1
 800637c:	4313      	orrs	r3, r2
 800637e:	d055      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006384:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006388:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800638c:	d033      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800638e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006392:	d82c      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006394:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006398:	d02f      	beq.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800639a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800639e:	d826      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063a0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063a4:	d02b      	beq.n	80063fe <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80063a6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063aa:	d820      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063b0:	d012      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80063b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063b6:	d81a      	bhi.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d022      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80063bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063c0:	d115      	bne.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c6:	3308      	adds	r3, #8
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fdee 	bl	8006fac <RCCEx_PLL2_Config>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063d6:	e015      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063dc:	3328      	adds	r3, #40	@ 0x28
 80063de:	2102      	movs	r1, #2
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fe95 	bl	8007110 <RCCEx_PLL3_Config>
 80063e6:	4603      	mov	r3, r0
 80063e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80063ec:	e00a      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80063f4:	e006      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063f6:	bf00      	nop
 80063f8:	e004      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063fa:	bf00      	nop
 80063fc:	e002      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80063fe:	bf00      	nop
 8006400:	e000      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006404:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006408:	2b00      	cmp	r3, #0
 800640a:	d10b      	bne.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800640c:	4ba1      	ldr	r3, [pc, #644]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800640e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006410:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006418:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800641c:	4a9d      	ldr	r2, [pc, #628]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800641e:	430b      	orrs	r3, r1
 8006420:	6593      	str	r3, [r2, #88]	@ 0x58
 8006422:	e003      	b.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006424:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006428:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800642c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006434:	f002 0308 	and.w	r3, r2, #8
 8006438:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800643c:	2300      	movs	r3, #0
 800643e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006442:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006446:	460b      	mov	r3, r1
 8006448:	4313      	orrs	r3, r2
 800644a:	d01e      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800644c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006450:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006454:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006458:	d10c      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800645a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645e:	3328      	adds	r3, #40	@ 0x28
 8006460:	2102      	movs	r1, #2
 8006462:	4618      	mov	r0, r3
 8006464:	f000 fe54 	bl	8007110 <RCCEx_PLL3_Config>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d002      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006474:	4b87      	ldr	r3, [pc, #540]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006476:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006478:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800647c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006480:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006484:	4a83      	ldr	r2, [pc, #524]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006486:	430b      	orrs	r3, r1
 8006488:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800648a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f002 0310 	and.w	r3, r2, #16
 8006496:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800649a:	2300      	movs	r3, #0
 800649c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80064a0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80064a4:	460b      	mov	r3, r1
 80064a6:	4313      	orrs	r3, r2
 80064a8:	d01e      	beq.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80064aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064b6:	d10c      	bne.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064bc:	3328      	adds	r3, #40	@ 0x28
 80064be:	2102      	movs	r1, #2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fe25 	bl	8007110 <RCCEx_PLL3_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80064d2:	4b70      	ldr	r3, [pc, #448]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80064da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80064e2:	4a6c      	ldr	r2, [pc, #432]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064e4:	430b      	orrs	r3, r1
 80064e6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80064f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064f8:	2300      	movs	r3, #0
 80064fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064fe:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006502:	460b      	mov	r3, r1
 8006504:	4313      	orrs	r3, r2
 8006506:	d03e      	beq.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800650c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006514:	d022      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006516:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800651a:	d81b      	bhi.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006524:	d00b      	beq.n	800653e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006526:	e015      	b.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652c:	3308      	adds	r3, #8
 800652e:	2100      	movs	r1, #0
 8006530:	4618      	mov	r0, r3
 8006532:	f000 fd3b 	bl	8006fac <RCCEx_PLL2_Config>
 8006536:	4603      	mov	r3, r0
 8006538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800653c:	e00f      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800653e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006542:	3328      	adds	r3, #40	@ 0x28
 8006544:	2102      	movs	r1, #2
 8006546:	4618      	mov	r0, r3
 8006548:	f000 fde2 	bl	8007110 <RCCEx_PLL3_Config>
 800654c:	4603      	mov	r3, r0
 800654e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006552:	e004      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800655a:	e000      	b.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800655c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800655e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10b      	bne.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006566:	4b4b      	ldr	r3, [pc, #300]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800656e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006572:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006576:	4a47      	ldr	r2, [pc, #284]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006578:	430b      	orrs	r3, r1
 800657a:	6593      	str	r3, [r2, #88]	@ 0x58
 800657c:	e003      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800657e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006592:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006594:	2300      	movs	r3, #0
 8006596:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006598:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800659c:	460b      	mov	r3, r1
 800659e:	4313      	orrs	r3, r2
 80065a0:	d03b      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80065a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065aa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065ae:	d01f      	beq.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80065b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065b4:	d818      	bhi.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80065b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065ba:	d003      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80065bc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80065c0:	d007      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80065c2:	e011      	b.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065c4:	4b33      	ldr	r3, [pc, #204]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c8:	4a32      	ldr	r2, [pc, #200]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80065d0:	e00f      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	3328      	adds	r3, #40	@ 0x28
 80065d8:	2101      	movs	r1, #1
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fd98 	bl	8007110 <RCCEx_PLL3_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80065e6:	e004      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80065ee:	e000      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80065f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10b      	bne.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80065fa:	4b26      	ldr	r3, [pc, #152]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660a:	4a22      	ldr	r2, [pc, #136]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800660c:	430b      	orrs	r3, r1
 800660e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006610:	e003      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006616:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800661a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006626:	673b      	str	r3, [r7, #112]	@ 0x70
 8006628:	2300      	movs	r3, #0
 800662a:	677b      	str	r3, [r7, #116]	@ 0x74
 800662c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006630:	460b      	mov	r3, r1
 8006632:	4313      	orrs	r3, r2
 8006634:	d034      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800663a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800663c:	2b00      	cmp	r3, #0
 800663e:	d003      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006644:	d007      	beq.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006646:	e011      	b.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006648:	4b12      	ldr	r3, [pc, #72]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800664a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664c:	4a11      	ldr	r2, [pc, #68]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800664e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006654:	e00e      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665a:	3308      	adds	r3, #8
 800665c:	2102      	movs	r1, #2
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fca4 	bl	8006fac <RCCEx_PLL2_Config>
 8006664:	4603      	mov	r3, r0
 8006666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800666a:	e003      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006672:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006674:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006678:	2b00      	cmp	r3, #0
 800667a:	d10d      	bne.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800667c:	4b05      	ldr	r3, [pc, #20]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800667e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006680:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006688:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800668a:	4a02      	ldr	r2, [pc, #8]	@ (8006694 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800668c:	430b      	orrs	r3, r1
 800668e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006690:	e006      	b.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006692:	bf00      	nop
 8006694:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800669c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80066ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066ae:	2300      	movs	r3, #0
 80066b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066b2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80066b6:	460b      	mov	r3, r1
 80066b8:	4313      	orrs	r3, r2
 80066ba:	d00c      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80066bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c0:	3328      	adds	r3, #40	@ 0x28
 80066c2:	2102      	movs	r1, #2
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fd23 	bl	8007110 <RCCEx_PLL3_Config>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d002      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80066d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066de:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80066e2:	663b      	str	r3, [r7, #96]	@ 0x60
 80066e4:	2300      	movs	r3, #0
 80066e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80066e8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80066ec:	460b      	mov	r3, r1
 80066ee:	4313      	orrs	r3, r2
 80066f0:	d038      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066fe:	d018      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006700:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006704:	d811      	bhi.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006706:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800670a:	d014      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800670c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006710:	d80b      	bhi.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d011      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006716:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800671a:	d106      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800671c:	4bc3      	ldr	r3, [pc, #780]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800671e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006720:	4ac2      	ldr	r2, [pc, #776]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006728:	e008      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006730:	e004      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006732:	bf00      	nop
 8006734:	e002      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006736:	bf00      	nop
 8006738:	e000      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800673a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800673c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10b      	bne.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006744:	4bb9      	ldr	r3, [pc, #740]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006748:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800674c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006750:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006754:	4ab5      	ldr	r2, [pc, #724]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006756:	430b      	orrs	r3, r1
 8006758:	6553      	str	r3, [r2, #84]	@ 0x54
 800675a:	e003      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800675c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006760:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006770:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006772:	2300      	movs	r3, #0
 8006774:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006776:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800677a:	460b      	mov	r3, r1
 800677c:	4313      	orrs	r3, r2
 800677e:	d009      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006780:	4baa      	ldr	r3, [pc, #680]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006784:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800678e:	4aa7      	ldr	r2, [pc, #668]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006790:	430b      	orrs	r3, r1
 8006792:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80067a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80067a2:	2300      	movs	r3, #0
 80067a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80067a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80067aa:	460b      	mov	r3, r1
 80067ac:	4313      	orrs	r3, r2
 80067ae:	d00a      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80067b0:	4b9e      	ldr	r3, [pc, #632]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80067b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80067c0:	4a9a      	ldr	r2, [pc, #616]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067c2:	430b      	orrs	r3, r1
 80067c4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067ce:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80067d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067d4:	2300      	movs	r3, #0
 80067d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067d8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80067dc:	460b      	mov	r3, r1
 80067de:	4313      	orrs	r3, r2
 80067e0:	d009      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067e2:	4b92      	ldr	r3, [pc, #584]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067e6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80067ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067f0:	4a8e      	ldr	r2, [pc, #568]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80067f2:	430b      	orrs	r3, r1
 80067f4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80067f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fe:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006802:	643b      	str	r3, [r7, #64]	@ 0x40
 8006804:	2300      	movs	r3, #0
 8006806:	647b      	str	r3, [r7, #68]	@ 0x44
 8006808:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800680c:	460b      	mov	r3, r1
 800680e:	4313      	orrs	r3, r2
 8006810:	d00e      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006812:	4b86      	ldr	r3, [pc, #536]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006814:	691b      	ldr	r3, [r3, #16]
 8006816:	4a85      	ldr	r2, [pc, #532]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006818:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800681c:	6113      	str	r3, [r2, #16]
 800681e:	4b83      	ldr	r3, [pc, #524]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006820:	6919      	ldr	r1, [r3, #16]
 8006822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006826:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800682a:	4a80      	ldr	r2, [pc, #512]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800682c:	430b      	orrs	r3, r1
 800682e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800683c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800683e:	2300      	movs	r3, #0
 8006840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006842:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006846:	460b      	mov	r3, r1
 8006848:	4313      	orrs	r3, r2
 800684a:	d009      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800684c:	4b77      	ldr	r3, [pc, #476]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800684e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006850:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800685a:	4a74      	ldr	r2, [pc, #464]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800685c:	430b      	orrs	r3, r1
 800685e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006868:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800686c:	633b      	str	r3, [r7, #48]	@ 0x30
 800686e:	2300      	movs	r3, #0
 8006870:	637b      	str	r3, [r7, #52]	@ 0x34
 8006872:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006876:	460b      	mov	r3, r1
 8006878:	4313      	orrs	r3, r2
 800687a:	d00a      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800687c:	4b6b      	ldr	r3, [pc, #428]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800687e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006880:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006888:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800688c:	4a67      	ldr	r2, [pc, #412]	@ (8006a2c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800688e:	430b      	orrs	r3, r1
 8006890:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	2100      	movs	r1, #0
 800689c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068a4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80068a8:	460b      	mov	r3, r1
 80068aa:	4313      	orrs	r3, r2
 80068ac:	d011      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b2:	3308      	adds	r3, #8
 80068b4:	2100      	movs	r1, #0
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 fb78 	bl	8006fac <RCCEx_PLL2_Config>
 80068bc:	4603      	mov	r3, r0
 80068be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80068d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068da:	2100      	movs	r1, #0
 80068dc:	6239      	str	r1, [r7, #32]
 80068de:	f003 0302 	and.w	r3, r3, #2
 80068e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068e4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068e8:	460b      	mov	r3, r1
 80068ea:	4313      	orrs	r3, r2
 80068ec:	d011      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80068ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f2:	3308      	adds	r3, #8
 80068f4:	2101      	movs	r1, #1
 80068f6:	4618      	mov	r0, r3
 80068f8:	f000 fb58 	bl	8006fac <RCCEx_PLL2_Config>
 80068fc:	4603      	mov	r3, r0
 80068fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800690e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	2100      	movs	r1, #0
 800691c:	61b9      	str	r1, [r7, #24]
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006928:	460b      	mov	r3, r1
 800692a:	4313      	orrs	r3, r2
 800692c:	d011      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800692e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006932:	3308      	adds	r3, #8
 8006934:	2102      	movs	r1, #2
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fb38 	bl	8006fac <RCCEx_PLL2_Config>
 800693c:	4603      	mov	r3, r0
 800693e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006946:	2b00      	cmp	r3, #0
 8006948:	d003      	beq.n	8006952 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800694a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800694e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	2100      	movs	r1, #0
 800695c:	6139      	str	r1, [r7, #16]
 800695e:	f003 0308 	and.w	r3, r3, #8
 8006962:	617b      	str	r3, [r7, #20]
 8006964:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006968:	460b      	mov	r3, r1
 800696a:	4313      	orrs	r3, r2
 800696c:	d011      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800696e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006972:	3328      	adds	r3, #40	@ 0x28
 8006974:	2100      	movs	r1, #0
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fbca 	bl	8007110 <RCCEx_PLL3_Config>
 800697c:	4603      	mov	r3, r0
 800697e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800698e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	2100      	movs	r1, #0
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	f003 0310 	and.w	r3, r3, #16
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069a8:	460b      	mov	r3, r1
 80069aa:	4313      	orrs	r3, r2
 80069ac:	d011      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b2:	3328      	adds	r3, #40	@ 0x28
 80069b4:	2101      	movs	r1, #1
 80069b6:	4618      	mov	r0, r3
 80069b8:	f000 fbaa 	bl	8007110 <RCCEx_PLL3_Config>
 80069bc:	4603      	mov	r3, r0
 80069be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069da:	2100      	movs	r1, #0
 80069dc:	6039      	str	r1, [r7, #0]
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	607b      	str	r3, [r7, #4]
 80069e4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069e8:	460b      	mov	r3, r1
 80069ea:	4313      	orrs	r3, r2
 80069ec:	d011      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f2:	3328      	adds	r3, #40	@ 0x28
 80069f4:	2102      	movs	r1, #2
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fb8a 	bl	8007110 <RCCEx_PLL3_Config>
 80069fc:	4603      	mov	r3, r0
 80069fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d003      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006a12:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e000      	b.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006a26:	46bd      	mov	sp, r7
 8006a28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a2c:	58024400 	.word	0x58024400

08006a30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a34:	f7fe fd96 	bl	8005564 <HAL_RCC_GetHCLKFreq>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	4b06      	ldr	r3, [pc, #24]	@ (8006a54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	091b      	lsrs	r3, r3, #4
 8006a40:	f003 0307 	and.w	r3, r3, #7
 8006a44:	4904      	ldr	r1, [pc, #16]	@ (8006a58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a46:	5ccb      	ldrb	r3, [r1, r3]
 8006a48:	f003 031f 	and.w	r3, r3, #31
 8006a4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	58024400 	.word	0x58024400
 8006a58:	0800ab90 	.word	0x0800ab90

08006a5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b089      	sub	sp, #36	@ 0x24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a64:	4ba1      	ldr	r3, [pc, #644]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a68:	f003 0303 	and.w	r3, r3, #3
 8006a6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a6e:	4b9f      	ldr	r3, [pc, #636]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a72:	0b1b      	lsrs	r3, r3, #12
 8006a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a7a:	4b9c      	ldr	r3, [pc, #624]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	091b      	lsrs	r3, r3, #4
 8006a80:	f003 0301 	and.w	r3, r3, #1
 8006a84:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006a86:	4b99      	ldr	r3, [pc, #612]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a8a:	08db      	lsrs	r3, r3, #3
 8006a8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	fb02 f303 	mul.w	r3, r2, r3
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8111 	beq.w	8006ccc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006aaa:	69bb      	ldr	r3, [r7, #24]
 8006aac:	2b02      	cmp	r3, #2
 8006aae:	f000 8083 	beq.w	8006bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	f200 80a1 	bhi.w	8006bfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d056      	beq.n	8006b74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ac6:	e099      	b.n	8006bfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ac8:	4b88      	ldr	r3, [pc, #544]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 0320 	and.w	r3, r3, #32
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d02d      	beq.n	8006b30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ad4:	4b85      	ldr	r3, [pc, #532]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	08db      	lsrs	r3, r3, #3
 8006ada:	f003 0303 	and.w	r3, r3, #3
 8006ade:	4a84      	ldr	r2, [pc, #528]	@ (8006cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	ee07 3a90 	vmov	s15, r3
 8006aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006afe:	4b7b      	ldr	r3, [pc, #492]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b06:	ee07 3a90 	vmov	s15, r3
 8006b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b2e:	e087      	b.n	8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b42:	4b6a      	ldr	r3, [pc, #424]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b72:	e065      	b.n	8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b86:	4b59      	ldr	r3, [pc, #356]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bb6:	e043      	b.n	8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bca:	4b48      	ldr	r3, [pc, #288]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bfa:	e021      	b.n	8006c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c0e:	4b37      	ldr	r3, [pc, #220]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006c40:	4b2a      	ldr	r3, [pc, #168]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c44:	0a5b      	lsrs	r3, r3, #9
 8006c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c66:	ee17 2a90 	vmov	r2, s15
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c72:	0c1b      	lsrs	r3, r3, #16
 8006c74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c78:	ee07 3a90 	vmov	s15, r3
 8006c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c88:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c94:	ee17 2a90 	vmov	r2, s15
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c9c:	4b13      	ldr	r3, [pc, #76]	@ (8006cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca0:	0e1b      	lsrs	r3, r3, #24
 8006ca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ca6:	ee07 3a90 	vmov	s15, r3
 8006caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cc2:	ee17 2a90 	vmov	r2, s15
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006cca:	e008      	b.n	8006cde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	609a      	str	r2, [r3, #8]
}
 8006cde:	bf00      	nop
 8006ce0:	3724      	adds	r7, #36	@ 0x24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce8:	4770      	bx	lr
 8006cea:	bf00      	nop
 8006cec:	58024400 	.word	0x58024400
 8006cf0:	03d09000 	.word	0x03d09000
 8006cf4:	46000000 	.word	0x46000000
 8006cf8:	4c742400 	.word	0x4c742400
 8006cfc:	4a742400 	.word	0x4a742400
 8006d00:	4af42400 	.word	0x4af42400

08006d04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b089      	sub	sp, #36	@ 0x24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d0c:	4ba1      	ldr	r3, [pc, #644]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d10:	f003 0303 	and.w	r3, r3, #3
 8006d14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006d16:	4b9f      	ldr	r3, [pc, #636]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d1a:	0d1b      	lsrs	r3, r3, #20
 8006d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d22:	4b9c      	ldr	r3, [pc, #624]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d26:	0a1b      	lsrs	r3, r3, #8
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d2e:	4b99      	ldr	r3, [pc, #612]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d32:	08db      	lsrs	r3, r3, #3
 8006d34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d38:	693a      	ldr	r2, [r7, #16]
 8006d3a:	fb02 f303 	mul.w	r3, r2, r3
 8006d3e:	ee07 3a90 	vmov	s15, r3
 8006d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 8111 	beq.w	8006f74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	f000 8083 	beq.w	8006e60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	f200 80a1 	bhi.w	8006ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	2b01      	cmp	r3, #1
 8006d6c:	d056      	beq.n	8006e1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d6e:	e099      	b.n	8006ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d70:	4b88      	ldr	r3, [pc, #544]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0320 	and.w	r3, r3, #32
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d02d      	beq.n	8006dd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d7c:	4b85      	ldr	r3, [pc, #532]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	08db      	lsrs	r3, r3, #3
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	4a84      	ldr	r2, [pc, #528]	@ (8006f98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006d88:	fa22 f303 	lsr.w	r3, r2, r3
 8006d8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	ee07 3a90 	vmov	s15, r3
 8006d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	ee07 3a90 	vmov	s15, r3
 8006d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006da6:	4b7b      	ldr	r3, [pc, #492]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dae:	ee07 3a90 	vmov	s15, r3
 8006db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006dd6:	e087      	b.n	8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	ee07 3a90 	vmov	s15, r3
 8006dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006de2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dea:	4b6a      	ldr	r3, [pc, #424]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dfe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e1a:	e065      	b.n	8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	ee07 3a90 	vmov	s15, r3
 8006e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e2e:	4b59      	ldr	r3, [pc, #356]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e5e:	e043      	b.n	8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e72:	4b48      	ldr	r3, [pc, #288]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ea2:	e021      	b.n	8006ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eb6:	4b37      	ldr	r3, [pc, #220]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006eca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ee6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eec:	0a5b      	lsrs	r3, r3, #9
 8006eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f0e:	ee17 2a90 	vmov	r2, s15
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006f16:	4b1f      	ldr	r3, [pc, #124]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1a:	0c1b      	lsrs	r3, r3, #16
 8006f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f20:	ee07 3a90 	vmov	s15, r3
 8006f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f3c:	ee17 2a90 	vmov	r2, s15
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006f44:	4b13      	ldr	r3, [pc, #76]	@ (8006f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f48:	0e1b      	lsrs	r3, r3, #24
 8006f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f4e:	ee07 3a90 	vmov	s15, r3
 8006f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f6a:	ee17 2a90 	vmov	r2, s15
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f72:	e008      	b.n	8006f86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2200      	movs	r2, #0
 8006f78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	609a      	str	r2, [r3, #8]
}
 8006f86:	bf00      	nop
 8006f88:	3724      	adds	r7, #36	@ 0x24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	58024400 	.word	0x58024400
 8006f98:	03d09000 	.word	0x03d09000
 8006f9c:	46000000 	.word	0x46000000
 8006fa0:	4c742400 	.word	0x4c742400
 8006fa4:	4a742400 	.word	0x4a742400
 8006fa8:	4af42400 	.word	0x4af42400

08006fac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
 8006fb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fba:	4b53      	ldr	r3, [pc, #332]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 8006fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fbe:	f003 0303 	and.w	r3, r3, #3
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d101      	bne.n	8006fca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e099      	b.n	80070fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006fca:	4b4f      	ldr	r3, [pc, #316]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a4e      	ldr	r2, [pc, #312]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 8006fd0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd6:	f7fb f84d 	bl	8002074 <HAL_GetTick>
 8006fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006fdc:	e008      	b.n	8006ff0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fde:	f7fb f849 	bl	8002074 <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e086      	b.n	80070fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ff0:	4b45      	ldr	r3, [pc, #276]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1f0      	bne.n	8006fde <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ffc:	4b42      	ldr	r3, [pc, #264]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007000:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	031b      	lsls	r3, r3, #12
 800700a:	493f      	ldr	r1, [pc, #252]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 800700c:	4313      	orrs	r3, r2
 800700e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	3b01      	subs	r3, #1
 8007016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	3b01      	subs	r3, #1
 8007020:	025b      	lsls	r3, r3, #9
 8007022:	b29b      	uxth	r3, r3
 8007024:	431a      	orrs	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	3b01      	subs	r3, #1
 800702c:	041b      	lsls	r3, r3, #16
 800702e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	3b01      	subs	r3, #1
 800703a:	061b      	lsls	r3, r3, #24
 800703c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007040:	4931      	ldr	r1, [pc, #196]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007042:	4313      	orrs	r3, r2
 8007044:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007046:	4b30      	ldr	r3, [pc, #192]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800704a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	492d      	ldr	r1, [pc, #180]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007054:	4313      	orrs	r3, r2
 8007056:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007058:	4b2b      	ldr	r3, [pc, #172]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 800705a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705c:	f023 0220 	bic.w	r2, r3, #32
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	699b      	ldr	r3, [r3, #24]
 8007064:	4928      	ldr	r1, [pc, #160]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007066:	4313      	orrs	r3, r2
 8007068:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800706a:	4b27      	ldr	r3, [pc, #156]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 800706c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706e:	4a26      	ldr	r2, [pc, #152]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007070:	f023 0310 	bic.w	r3, r3, #16
 8007074:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007076:	4b24      	ldr	r3, [pc, #144]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007078:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800707a:	4b24      	ldr	r3, [pc, #144]	@ (800710c <RCCEx_PLL2_Config+0x160>)
 800707c:	4013      	ands	r3, r2
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	69d2      	ldr	r2, [r2, #28]
 8007082:	00d2      	lsls	r2, r2, #3
 8007084:	4920      	ldr	r1, [pc, #128]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007086:	4313      	orrs	r3, r2
 8007088:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800708a:	4b1f      	ldr	r3, [pc, #124]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 800708c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708e:	4a1e      	ldr	r2, [pc, #120]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 8007090:	f043 0310 	orr.w	r3, r3, #16
 8007094:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d106      	bne.n	80070aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800709c:	4b1a      	ldr	r3, [pc, #104]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 800709e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a0:	4a19      	ldr	r2, [pc, #100]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070a8:	e00f      	b.n	80070ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d106      	bne.n	80070be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80070b0:	4b15      	ldr	r3, [pc, #84]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b4:	4a14      	ldr	r2, [pc, #80]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070bc:	e005      	b.n	80070ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80070be:	4b12      	ldr	r3, [pc, #72]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c2:	4a11      	ldr	r2, [pc, #68]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a0e      	ldr	r2, [pc, #56]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070d6:	f7fa ffcd 	bl	8002074 <HAL_GetTick>
 80070da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070dc:	e008      	b.n	80070f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070de:	f7fa ffc9 	bl	8002074 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d901      	bls.n	80070f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80070ec:	2303      	movs	r3, #3
 80070ee:	e006      	b.n	80070fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070f0:	4b05      	ldr	r3, [pc, #20]	@ (8007108 <RCCEx_PLL2_Config+0x15c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d0f0      	beq.n	80070de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80070fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3710      	adds	r7, #16
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	58024400 	.word	0x58024400
 800710c:	ffff0007 	.word	0xffff0007

08007110 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800711e:	4b53      	ldr	r3, [pc, #332]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	2b03      	cmp	r3, #3
 8007128:	d101      	bne.n	800712e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e099      	b.n	8007262 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800712e:	4b4f      	ldr	r3, [pc, #316]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a4e      	ldr	r2, [pc, #312]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007134:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800713a:	f7fa ff9b 	bl	8002074 <HAL_GetTick>
 800713e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007140:	e008      	b.n	8007154 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007142:	f7fa ff97 	bl	8002074 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e086      	b.n	8007262 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007154:	4b45      	ldr	r3, [pc, #276]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f0      	bne.n	8007142 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007160:	4b42      	ldr	r3, [pc, #264]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007164:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	051b      	lsls	r3, r3, #20
 800716e:	493f      	ldr	r1, [pc, #252]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007170:	4313      	orrs	r3, r2
 8007172:	628b      	str	r3, [r1, #40]	@ 0x28
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	3b01      	subs	r3, #1
 800717a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	3b01      	subs	r3, #1
 8007184:	025b      	lsls	r3, r3, #9
 8007186:	b29b      	uxth	r3, r3
 8007188:	431a      	orrs	r2, r3
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	3b01      	subs	r3, #1
 8007190:	041b      	lsls	r3, r3, #16
 8007192:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	3b01      	subs	r3, #1
 800719e:	061b      	lsls	r3, r3, #24
 80071a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071a4:	4931      	ldr	r1, [pc, #196]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80071aa:	4b30      	ldr	r3, [pc, #192]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 80071ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	492d      	ldr	r1, [pc, #180]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 80071b8:	4313      	orrs	r3, r2
 80071ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80071bc:	4b2b      	ldr	r3, [pc, #172]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 80071be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	4928      	ldr	r1, [pc, #160]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 80071ca:	4313      	orrs	r3, r2
 80071cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071ce:	4b27      	ldr	r3, [pc, #156]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 80071d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d2:	4a26      	ldr	r2, [pc, #152]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 80071d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071da:	4b24      	ldr	r3, [pc, #144]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 80071dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071de:	4b24      	ldr	r3, [pc, #144]	@ (8007270 <RCCEx_PLL3_Config+0x160>)
 80071e0:	4013      	ands	r3, r2
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	69d2      	ldr	r2, [r2, #28]
 80071e6:	00d2      	lsls	r2, r2, #3
 80071e8:	4920      	ldr	r1, [pc, #128]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80071ee:	4b1f      	ldr	r3, [pc, #124]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 80071f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071f2:	4a1e      	ldr	r2, [pc, #120]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 80071f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d106      	bne.n	800720e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007200:	4b1a      	ldr	r3, [pc, #104]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007204:	4a19      	ldr	r2, [pc, #100]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007206:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800720a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800720c:	e00f      	b.n	800722e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d106      	bne.n	8007222 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007214:	4b15      	ldr	r3, [pc, #84]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007218:	4a14      	ldr	r2, [pc, #80]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 800721a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800721e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007220:	e005      	b.n	800722e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007222:	4b12      	ldr	r3, [pc, #72]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007226:	4a11      	ldr	r2, [pc, #68]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007228:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800722c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800722e:	4b0f      	ldr	r3, [pc, #60]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a0e      	ldr	r2, [pc, #56]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800723a:	f7fa ff1b 	bl	8002074 <HAL_GetTick>
 800723e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007240:	e008      	b.n	8007254 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007242:	f7fa ff17 	bl	8002074 <HAL_GetTick>
 8007246:	4602      	mov	r2, r0
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	1ad3      	subs	r3, r2, r3
 800724c:	2b02      	cmp	r3, #2
 800724e:	d901      	bls.n	8007254 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e006      	b.n	8007262 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007254:	4b05      	ldr	r3, [pc, #20]	@ (800726c <RCCEx_PLL3_Config+0x15c>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0f0      	beq.n	8007242 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	58024400 	.word	0x58024400
 8007270:	ffff0007 	.word	0xffff0007

08007274 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e10f      	b.n	80074a6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a87      	ldr	r2, [pc, #540]	@ (80074b0 <HAL_SPI_Init+0x23c>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00f      	beq.n	80072b6 <HAL_SPI_Init+0x42>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a86      	ldr	r2, [pc, #536]	@ (80074b4 <HAL_SPI_Init+0x240>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00a      	beq.n	80072b6 <HAL_SPI_Init+0x42>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a84      	ldr	r2, [pc, #528]	@ (80074b8 <HAL_SPI_Init+0x244>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d005      	beq.n	80072b6 <HAL_SPI_Init+0x42>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	2b0f      	cmp	r3, #15
 80072b0:	d901      	bls.n	80072b6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e0f7      	b.n	80074a6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f900 	bl	80074bc <SPI_GetPacketSize>
 80072bc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a7b      	ldr	r2, [pc, #492]	@ (80074b0 <HAL_SPI_Init+0x23c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00c      	beq.n	80072e2 <HAL_SPI_Init+0x6e>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a79      	ldr	r2, [pc, #484]	@ (80074b4 <HAL_SPI_Init+0x240>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d007      	beq.n	80072e2 <HAL_SPI_Init+0x6e>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a78      	ldr	r2, [pc, #480]	@ (80074b8 <HAL_SPI_Init+0x244>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d002      	beq.n	80072e2 <HAL_SPI_Init+0x6e>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2b08      	cmp	r3, #8
 80072e0:	d811      	bhi.n	8007306 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80072e6:	4a72      	ldr	r2, [pc, #456]	@ (80074b0 <HAL_SPI_Init+0x23c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d009      	beq.n	8007300 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a70      	ldr	r2, [pc, #448]	@ (80074b4 <HAL_SPI_Init+0x240>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d004      	beq.n	8007300 <HAL_SPI_Init+0x8c>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a6f      	ldr	r2, [pc, #444]	@ (80074b8 <HAL_SPI_Init+0x244>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d104      	bne.n	800730a <HAL_SPI_Init+0x96>
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2b10      	cmp	r3, #16
 8007304:	d901      	bls.n	800730a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e0cd      	b.n	80074a6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007310:	b2db      	uxtb	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d106      	bne.n	8007324 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7fa f98c 	bl	800163c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2202      	movs	r2, #2
 8007328:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0201 	bic.w	r2, r2, #1
 800733a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007346:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007350:	d119      	bne.n	8007386 <HAL_SPI_Init+0x112>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800735a:	d103      	bne.n	8007364 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007360:	2b00      	cmp	r3, #0
 8007362:	d008      	beq.n	8007376 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007368:	2b00      	cmp	r3, #0
 800736a:	d10c      	bne.n	8007386 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007370:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007374:	d107      	bne.n	8007386 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007384:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00f      	beq.n	80073b2 <HAL_SPI_Init+0x13e>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	2b06      	cmp	r3, #6
 8007398:	d90b      	bls.n	80073b2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	601a      	str	r2, [r3, #0]
 80073b0:	e007      	b.n	80073c2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69da      	ldr	r2, [r3, #28]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ca:	431a      	orrs	r2, r3
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d4:	ea42 0103 	orr.w	r1, r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ec:	431a      	orrs	r2, r3
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	699b      	ldr	r3, [r3, #24]
 80073f8:	431a      	orrs	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	431a      	orrs	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	695b      	ldr	r3, [r3, #20]
 8007404:	431a      	orrs	r2, r3
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007416:	431a      	orrs	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	431a      	orrs	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007422:	ea42 0103 	orr.w	r1, r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d113      	bne.n	8007462 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	689b      	ldr	r3, [r3, #8]
 8007440:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800744c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007460:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f022 0201 	bic.w	r2, r2, #1
 8007470:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40013000 	.word	0x40013000
 80074b4:	40003800 	.word	0x40003800
 80074b8:	40003c00 	.word	0x40003c00

080074bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074c8:	095b      	lsrs	r3, r3, #5
 80074ca:	3301      	adds	r3, #1
 80074cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	3301      	adds	r3, #1
 80074d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	3307      	adds	r3, #7
 80074da:	08db      	lsrs	r3, r3, #3
 80074dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b082      	sub	sp, #8
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e049      	b.n	8007598 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800750a:	b2db      	uxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d106      	bne.n	800751e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f7fa fb23 	bl	8001b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2202      	movs	r2, #2
 8007522:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3304      	adds	r3, #4
 800752e:	4619      	mov	r1, r3
 8007530:	4610      	mov	r0, r2
 8007532:	f000 fbf3 	bl	8007d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2201      	movs	r2, #1
 800755a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2201      	movs	r2, #1
 8007572:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e049      	b.n	8007646 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d106      	bne.n	80075cc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f841 	bl	800764e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	3304      	adds	r3, #4
 80075dc:	4619      	mov	r1, r3
 80075de:	4610      	mov	r0, r2
 80075e0:	f000 fb9c 	bl	8007d1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2201      	movs	r2, #1
 8007620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2201      	movs	r2, #1
 8007628:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}

0800764e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800764e:	b480      	push	{r7}
 8007650:	b083      	sub	sp, #12
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007656:	bf00      	nop
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
	...

08007664 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d109      	bne.n	8007688 <HAL_TIM_PWM_Start+0x24>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800767a:	b2db      	uxtb	r3, r3
 800767c:	2b01      	cmp	r3, #1
 800767e:	bf14      	ite	ne
 8007680:	2301      	movne	r3, #1
 8007682:	2300      	moveq	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	e03c      	b.n	8007702 <HAL_TIM_PWM_Start+0x9e>
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b04      	cmp	r3, #4
 800768c:	d109      	bne.n	80076a2 <HAL_TIM_PWM_Start+0x3e>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007694:	b2db      	uxtb	r3, r3
 8007696:	2b01      	cmp	r3, #1
 8007698:	bf14      	ite	ne
 800769a:	2301      	movne	r3, #1
 800769c:	2300      	moveq	r3, #0
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	e02f      	b.n	8007702 <HAL_TIM_PWM_Start+0x9e>
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b08      	cmp	r3, #8
 80076a6:	d109      	bne.n	80076bc <HAL_TIM_PWM_Start+0x58>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	bf14      	ite	ne
 80076b4:	2301      	movne	r3, #1
 80076b6:	2300      	moveq	r3, #0
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	e022      	b.n	8007702 <HAL_TIM_PWM_Start+0x9e>
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2b0c      	cmp	r3, #12
 80076c0:	d109      	bne.n	80076d6 <HAL_TIM_PWM_Start+0x72>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	bf14      	ite	ne
 80076ce:	2301      	movne	r3, #1
 80076d0:	2300      	moveq	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	e015      	b.n	8007702 <HAL_TIM_PWM_Start+0x9e>
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	2b10      	cmp	r3, #16
 80076da:	d109      	bne.n	80076f0 <HAL_TIM_PWM_Start+0x8c>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076e2:	b2db      	uxtb	r3, r3
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	bf14      	ite	ne
 80076e8:	2301      	movne	r3, #1
 80076ea:	2300      	moveq	r3, #0
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	e008      	b.n	8007702 <HAL_TIM_PWM_Start+0x9e>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	bf14      	ite	ne
 80076fc:	2301      	movne	r3, #1
 80076fe:	2300      	moveq	r3, #0
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e0a1      	b.n	800784e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d104      	bne.n	800771a <HAL_TIM_PWM_Start+0xb6>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007718:	e023      	b.n	8007762 <HAL_TIM_PWM_Start+0xfe>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	2b04      	cmp	r3, #4
 800771e:	d104      	bne.n	800772a <HAL_TIM_PWM_Start+0xc6>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007728:	e01b      	b.n	8007762 <HAL_TIM_PWM_Start+0xfe>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b08      	cmp	r3, #8
 800772e:	d104      	bne.n	800773a <HAL_TIM_PWM_Start+0xd6>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2202      	movs	r2, #2
 8007734:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007738:	e013      	b.n	8007762 <HAL_TIM_PWM_Start+0xfe>
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b0c      	cmp	r3, #12
 800773e:	d104      	bne.n	800774a <HAL_TIM_PWM_Start+0xe6>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007748:	e00b      	b.n	8007762 <HAL_TIM_PWM_Start+0xfe>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b10      	cmp	r3, #16
 800774e:	d104      	bne.n	800775a <HAL_TIM_PWM_Start+0xf6>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007758:	e003      	b.n	8007762 <HAL_TIM_PWM_Start+0xfe>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2202      	movs	r2, #2
 800775e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2201      	movs	r2, #1
 8007768:	6839      	ldr	r1, [r7, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f000 ffda 	bl	8008724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a38      	ldr	r2, [pc, #224]	@ (8007858 <HAL_TIM_PWM_Start+0x1f4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d013      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x13e>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a37      	ldr	r2, [pc, #220]	@ (800785c <HAL_TIM_PWM_Start+0x1f8>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d00e      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x13e>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a35      	ldr	r2, [pc, #212]	@ (8007860 <HAL_TIM_PWM_Start+0x1fc>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d009      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x13e>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a34      	ldr	r2, [pc, #208]	@ (8007864 <HAL_TIM_PWM_Start+0x200>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d004      	beq.n	80077a2 <HAL_TIM_PWM_Start+0x13e>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a32      	ldr	r2, [pc, #200]	@ (8007868 <HAL_TIM_PWM_Start+0x204>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d101      	bne.n	80077a6 <HAL_TIM_PWM_Start+0x142>
 80077a2:	2301      	movs	r3, #1
 80077a4:	e000      	b.n	80077a8 <HAL_TIM_PWM_Start+0x144>
 80077a6:	2300      	movs	r3, #0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d007      	beq.n	80077bc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80077ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a25      	ldr	r2, [pc, #148]	@ (8007858 <HAL_TIM_PWM_Start+0x1f4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d022      	beq.n	800780c <HAL_TIM_PWM_Start+0x1a8>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077ce:	d01d      	beq.n	800780c <HAL_TIM_PWM_Start+0x1a8>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a25      	ldr	r2, [pc, #148]	@ (800786c <HAL_TIM_PWM_Start+0x208>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d018      	beq.n	800780c <HAL_TIM_PWM_Start+0x1a8>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a24      	ldr	r2, [pc, #144]	@ (8007870 <HAL_TIM_PWM_Start+0x20c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d013      	beq.n	800780c <HAL_TIM_PWM_Start+0x1a8>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a22      	ldr	r2, [pc, #136]	@ (8007874 <HAL_TIM_PWM_Start+0x210>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d00e      	beq.n	800780c <HAL_TIM_PWM_Start+0x1a8>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a1a      	ldr	r2, [pc, #104]	@ (800785c <HAL_TIM_PWM_Start+0x1f8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d009      	beq.n	800780c <HAL_TIM_PWM_Start+0x1a8>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007878 <HAL_TIM_PWM_Start+0x214>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d004      	beq.n	800780c <HAL_TIM_PWM_Start+0x1a8>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a16      	ldr	r2, [pc, #88]	@ (8007860 <HAL_TIM_PWM_Start+0x1fc>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d115      	bne.n	8007838 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	4b1a      	ldr	r3, [pc, #104]	@ (800787c <HAL_TIM_PWM_Start+0x218>)
 8007814:	4013      	ands	r3, r2
 8007816:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2b06      	cmp	r3, #6
 800781c:	d015      	beq.n	800784a <HAL_TIM_PWM_Start+0x1e6>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007824:	d011      	beq.n	800784a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f042 0201 	orr.w	r2, r2, #1
 8007834:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007836:	e008      	b.n	800784a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f042 0201 	orr.w	r2, r2, #1
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	e000      	b.n	800784c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800784a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	40010000 	.word	0x40010000
 800785c:	40010400 	.word	0x40010400
 8007860:	40014000 	.word	0x40014000
 8007864:	40014400 	.word	0x40014400
 8007868:	40014800 	.word	0x40014800
 800786c:	40000400 	.word	0x40000400
 8007870:	40000800 	.word	0x40000800
 8007874:	40000c00 	.word	0x40000c00
 8007878:	40001800 	.word	0x40001800
 800787c:	00010007 	.word	0x00010007

08007880 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	60f8      	str	r0, [r7, #12]
 8007888:	60b9      	str	r1, [r7, #8]
 800788a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800788c:	2300      	movs	r3, #0
 800788e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007896:	2b01      	cmp	r3, #1
 8007898:	d101      	bne.n	800789e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800789a:	2302      	movs	r3, #2
 800789c:	e0ff      	b.n	8007a9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b14      	cmp	r3, #20
 80078aa:	f200 80f0 	bhi.w	8007a8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80078ae:	a201      	add	r2, pc, #4	@ (adr r2, 80078b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b4:	08007909 	.word	0x08007909
 80078b8:	08007a8f 	.word	0x08007a8f
 80078bc:	08007a8f 	.word	0x08007a8f
 80078c0:	08007a8f 	.word	0x08007a8f
 80078c4:	08007949 	.word	0x08007949
 80078c8:	08007a8f 	.word	0x08007a8f
 80078cc:	08007a8f 	.word	0x08007a8f
 80078d0:	08007a8f 	.word	0x08007a8f
 80078d4:	0800798b 	.word	0x0800798b
 80078d8:	08007a8f 	.word	0x08007a8f
 80078dc:	08007a8f 	.word	0x08007a8f
 80078e0:	08007a8f 	.word	0x08007a8f
 80078e4:	080079cb 	.word	0x080079cb
 80078e8:	08007a8f 	.word	0x08007a8f
 80078ec:	08007a8f 	.word	0x08007a8f
 80078f0:	08007a8f 	.word	0x08007a8f
 80078f4:	08007a0d 	.word	0x08007a0d
 80078f8:	08007a8f 	.word	0x08007a8f
 80078fc:	08007a8f 	.word	0x08007a8f
 8007900:	08007a8f 	.word	0x08007a8f
 8007904:	08007a4d 	.word	0x08007a4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68b9      	ldr	r1, [r7, #8]
 800790e:	4618      	mov	r0, r3
 8007910:	f000 faaa 	bl	8007e68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	699a      	ldr	r2, [r3, #24]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f042 0208 	orr.w	r2, r2, #8
 8007922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	699a      	ldr	r2, [r3, #24]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f022 0204 	bic.w	r2, r2, #4
 8007932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6999      	ldr	r1, [r3, #24]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	691a      	ldr	r2, [r3, #16]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	619a      	str	r2, [r3, #24]
      break;
 8007946:	e0a5      	b.n	8007a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	68b9      	ldr	r1, [r7, #8]
 800794e:	4618      	mov	r0, r3
 8007950:	f000 fb1a 	bl	8007f88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699a      	ldr	r2, [r3, #24]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6999      	ldr	r1, [r3, #24]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	021a      	lsls	r2, r3, #8
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	430a      	orrs	r2, r1
 8007986:	619a      	str	r2, [r3, #24]
      break;
 8007988:	e084      	b.n	8007a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68b9      	ldr	r1, [r7, #8]
 8007990:	4618      	mov	r0, r3
 8007992:	f000 fb83 	bl	800809c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69da      	ldr	r2, [r3, #28]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f042 0208 	orr.w	r2, r2, #8
 80079a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	69da      	ldr	r2, [r3, #28]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f022 0204 	bic.w	r2, r2, #4
 80079b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69d9      	ldr	r1, [r3, #28]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	61da      	str	r2, [r3, #28]
      break;
 80079c8:	e064      	b.n	8007a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68b9      	ldr	r1, [r7, #8]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fbeb 	bl	80081ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	69da      	ldr	r2, [r3, #28]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80079e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69da      	ldr	r2, [r3, #28]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	69d9      	ldr	r1, [r3, #28]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	691b      	ldr	r3, [r3, #16]
 8007a00:	021a      	lsls	r2, r3, #8
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	61da      	str	r2, [r3, #28]
      break;
 8007a0a:	e043      	b.n	8007a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68b9      	ldr	r1, [r7, #8]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 fc34 	bl	8008280 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0208 	orr.w	r2, r2, #8
 8007a26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f022 0204 	bic.w	r2, r2, #4
 8007a36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	691a      	ldr	r2, [r3, #16]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007a4a:	e023      	b.n	8007a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68b9      	ldr	r1, [r7, #8]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f000 fc78 	bl	8008348 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	021a      	lsls	r2, r3, #8
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	430a      	orrs	r2, r1
 8007a8a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007a8c:	e002      	b.n	8007a94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	75fb      	strb	r3, [r7, #23]
      break;
 8007a92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3718      	adds	r7, #24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop

08007aa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b084      	sub	sp, #16
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <HAL_TIM_ConfigClockSource+0x1c>
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	e0dc      	b.n	8007c7e <HAL_TIM_ConfigClockSource+0x1d6>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	4b6a      	ldr	r3, [pc, #424]	@ (8007c88 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007aea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68ba      	ldr	r2, [r7, #8]
 8007af2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a64      	ldr	r2, [pc, #400]	@ (8007c8c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	f000 80a9 	beq.w	8007c52 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b00:	4a62      	ldr	r2, [pc, #392]	@ (8007c8c <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	f200 80ae 	bhi.w	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b08:	4a61      	ldr	r2, [pc, #388]	@ (8007c90 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	f000 80a1 	beq.w	8007c52 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b10:	4a5f      	ldr	r2, [pc, #380]	@ (8007c90 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	f200 80a6 	bhi.w	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b18:	4a5e      	ldr	r2, [pc, #376]	@ (8007c94 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	f000 8099 	beq.w	8007c52 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b20:	4a5c      	ldr	r2, [pc, #368]	@ (8007c94 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	f200 809e 	bhi.w	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b28:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b2c:	f000 8091 	beq.w	8007c52 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b30:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007b34:	f200 8096 	bhi.w	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b3c:	f000 8089 	beq.w	8007c52 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b44:	f200 808e 	bhi.w	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b48:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b4c:	d03e      	beq.n	8007bcc <HAL_TIM_ConfigClockSource+0x124>
 8007b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b52:	f200 8087 	bhi.w	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b5a:	f000 8086 	beq.w	8007c6a <HAL_TIM_ConfigClockSource+0x1c2>
 8007b5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b62:	d87f      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b64:	2b70      	cmp	r3, #112	@ 0x70
 8007b66:	d01a      	beq.n	8007b9e <HAL_TIM_ConfigClockSource+0xf6>
 8007b68:	2b70      	cmp	r3, #112	@ 0x70
 8007b6a:	d87b      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b6c:	2b60      	cmp	r3, #96	@ 0x60
 8007b6e:	d050      	beq.n	8007c12 <HAL_TIM_ConfigClockSource+0x16a>
 8007b70:	2b60      	cmp	r3, #96	@ 0x60
 8007b72:	d877      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b74:	2b50      	cmp	r3, #80	@ 0x50
 8007b76:	d03c      	beq.n	8007bf2 <HAL_TIM_ConfigClockSource+0x14a>
 8007b78:	2b50      	cmp	r3, #80	@ 0x50
 8007b7a:	d873      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b7c:	2b40      	cmp	r3, #64	@ 0x40
 8007b7e:	d058      	beq.n	8007c32 <HAL_TIM_ConfigClockSource+0x18a>
 8007b80:	2b40      	cmp	r3, #64	@ 0x40
 8007b82:	d86f      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b84:	2b30      	cmp	r3, #48	@ 0x30
 8007b86:	d064      	beq.n	8007c52 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b88:	2b30      	cmp	r3, #48	@ 0x30
 8007b8a:	d86b      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b8c:	2b20      	cmp	r3, #32
 8007b8e:	d060      	beq.n	8007c52 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b90:	2b20      	cmp	r3, #32
 8007b92:	d867      	bhi.n	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d05c      	beq.n	8007c52 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b98:	2b10      	cmp	r3, #16
 8007b9a:	d05a      	beq.n	8007c52 <HAL_TIM_ConfigClockSource+0x1aa>
 8007b9c:	e062      	b.n	8007c64 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bae:	f000 fd99 	bl	80086e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007bc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68ba      	ldr	r2, [r7, #8]
 8007bc8:	609a      	str	r2, [r3, #8]
      break;
 8007bca:	e04f      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007bdc:	f000 fd82 	bl	80086e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	689a      	ldr	r2, [r3, #8]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007bee:	609a      	str	r2, [r3, #8]
      break;
 8007bf0:	e03c      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f000 fcf2 	bl	80085e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2150      	movs	r1, #80	@ 0x50
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fd4c 	bl	80086a8 <TIM_ITRx_SetConfig>
      break;
 8007c10:	e02c      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c1e:	461a      	mov	r2, r3
 8007c20:	f000 fd11 	bl	8008646 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2160      	movs	r1, #96	@ 0x60
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 fd3c 	bl	80086a8 <TIM_ITRx_SetConfig>
      break;
 8007c30:	e01c      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c3e:	461a      	mov	r2, r3
 8007c40:	f000 fcd2 	bl	80085e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	2140      	movs	r1, #64	@ 0x40
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f000 fd2c 	bl	80086a8 <TIM_ITRx_SetConfig>
      break;
 8007c50:	e00c      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	4610      	mov	r0, r2
 8007c5e:	f000 fd23 	bl	80086a8 <TIM_ITRx_SetConfig>
      break;
 8007c62:	e003      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	73fb      	strb	r3, [r7, #15]
      break;
 8007c68:	e000      	b.n	8007c6c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007c6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	ffceff88 	.word	0xffceff88
 8007c8c:	00100040 	.word	0x00100040
 8007c90:	00100030 	.word	0x00100030
 8007c94:	00100020 	.word	0x00100020

08007c98 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e031      	b.n	8007d14 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007cc0:	6839      	ldr	r1, [r7, #0]
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fba6 	bl	8008414 <TIM_SlaveTimer_SetConfig>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d009      	beq.n	8007ce2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e018      	b.n	8007d14 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68da      	ldr	r2, [r3, #12]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cf0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	68da      	ldr	r2, [r3, #12]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d00:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2201      	movs	r2, #1
 8007d06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a46      	ldr	r2, [pc, #280]	@ (8007e48 <TIM_Base_SetConfig+0x12c>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d013      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d3a:	d00f      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a43      	ldr	r2, [pc, #268]	@ (8007e4c <TIM_Base_SetConfig+0x130>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d00b      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a42      	ldr	r2, [pc, #264]	@ (8007e50 <TIM_Base_SetConfig+0x134>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d007      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a41      	ldr	r2, [pc, #260]	@ (8007e54 <TIM_Base_SetConfig+0x138>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d003      	beq.n	8007d5c <TIM_Base_SetConfig+0x40>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a40      	ldr	r2, [pc, #256]	@ (8007e58 <TIM_Base_SetConfig+0x13c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d108      	bne.n	8007d6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	68fa      	ldr	r2, [r7, #12]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	4a35      	ldr	r2, [pc, #212]	@ (8007e48 <TIM_Base_SetConfig+0x12c>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d01f      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d7c:	d01b      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a32      	ldr	r2, [pc, #200]	@ (8007e4c <TIM_Base_SetConfig+0x130>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d017      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a31      	ldr	r2, [pc, #196]	@ (8007e50 <TIM_Base_SetConfig+0x134>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d013      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a30      	ldr	r2, [pc, #192]	@ (8007e54 <TIM_Base_SetConfig+0x138>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00f      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a2f      	ldr	r2, [pc, #188]	@ (8007e58 <TIM_Base_SetConfig+0x13c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00b      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a2e      	ldr	r2, [pc, #184]	@ (8007e5c <TIM_Base_SetConfig+0x140>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d007      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a2d      	ldr	r2, [pc, #180]	@ (8007e60 <TIM_Base_SetConfig+0x144>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d003      	beq.n	8007db6 <TIM_Base_SetConfig+0x9a>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a2c      	ldr	r2, [pc, #176]	@ (8007e64 <TIM_Base_SetConfig+0x148>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d108      	bne.n	8007dc8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	68fa      	ldr	r2, [r7, #12]
 8007dc4:	4313      	orrs	r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	695b      	ldr	r3, [r3, #20]
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a16      	ldr	r2, [pc, #88]	@ (8007e48 <TIM_Base_SetConfig+0x12c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d00f      	beq.n	8007e14 <TIM_Base_SetConfig+0xf8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a18      	ldr	r2, [pc, #96]	@ (8007e58 <TIM_Base_SetConfig+0x13c>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d00b      	beq.n	8007e14 <TIM_Base_SetConfig+0xf8>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a17      	ldr	r2, [pc, #92]	@ (8007e5c <TIM_Base_SetConfig+0x140>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d007      	beq.n	8007e14 <TIM_Base_SetConfig+0xf8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a16      	ldr	r2, [pc, #88]	@ (8007e60 <TIM_Base_SetConfig+0x144>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d003      	beq.n	8007e14 <TIM_Base_SetConfig+0xf8>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a15      	ldr	r2, [pc, #84]	@ (8007e64 <TIM_Base_SetConfig+0x148>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d103      	bne.n	8007e1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	691a      	ldr	r2, [r3, #16]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	691b      	ldr	r3, [r3, #16]
 8007e26:	f003 0301 	and.w	r3, r3, #1
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d105      	bne.n	8007e3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	f023 0201 	bic.w	r2, r3, #1
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	611a      	str	r2, [r3, #16]
  }
}
 8007e3a:	bf00      	nop
 8007e3c:	3714      	adds	r7, #20
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	40010000 	.word	0x40010000
 8007e4c:	40000400 	.word	0x40000400
 8007e50:	40000800 	.word	0x40000800
 8007e54:	40000c00 	.word	0x40000c00
 8007e58:	40010400 	.word	0x40010400
 8007e5c:	40014000 	.word	0x40014000
 8007e60:	40014400 	.word	0x40014400
 8007e64:	40014800 	.word	0x40014800

08007e68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b087      	sub	sp, #28
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
 8007e76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	f023 0201 	bic.w	r2, r3, #1
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e90:	68fa      	ldr	r2, [r7, #12]
 8007e92:	4b37      	ldr	r3, [pc, #220]	@ (8007f70 <TIM_OC1_SetConfig+0x108>)
 8007e94:	4013      	ands	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f023 0303 	bic.w	r3, r3, #3
 8007e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	f023 0302 	bic.w	r3, r3, #2
 8007eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	697a      	ldr	r2, [r7, #20]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a2d      	ldr	r2, [pc, #180]	@ (8007f74 <TIM_OC1_SetConfig+0x10c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d00f      	beq.n	8007ee4 <TIM_OC1_SetConfig+0x7c>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8007f78 <TIM_OC1_SetConfig+0x110>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d00b      	beq.n	8007ee4 <TIM_OC1_SetConfig+0x7c>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a2b      	ldr	r2, [pc, #172]	@ (8007f7c <TIM_OC1_SetConfig+0x114>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d007      	beq.n	8007ee4 <TIM_OC1_SetConfig+0x7c>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8007f80 <TIM_OC1_SetConfig+0x118>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d003      	beq.n	8007ee4 <TIM_OC1_SetConfig+0x7c>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a29      	ldr	r2, [pc, #164]	@ (8007f84 <TIM_OC1_SetConfig+0x11c>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d10c      	bne.n	8007efe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	f023 0308 	bic.w	r3, r3, #8
 8007eea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	697a      	ldr	r2, [r7, #20]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f023 0304 	bic.w	r3, r3, #4
 8007efc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a1c      	ldr	r2, [pc, #112]	@ (8007f74 <TIM_OC1_SetConfig+0x10c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d00f      	beq.n	8007f26 <TIM_OC1_SetConfig+0xbe>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	4a1b      	ldr	r2, [pc, #108]	@ (8007f78 <TIM_OC1_SetConfig+0x110>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d00b      	beq.n	8007f26 <TIM_OC1_SetConfig+0xbe>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	4a1a      	ldr	r2, [pc, #104]	@ (8007f7c <TIM_OC1_SetConfig+0x114>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d007      	beq.n	8007f26 <TIM_OC1_SetConfig+0xbe>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a19      	ldr	r2, [pc, #100]	@ (8007f80 <TIM_OC1_SetConfig+0x118>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d003      	beq.n	8007f26 <TIM_OC1_SetConfig+0xbe>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	4a18      	ldr	r2, [pc, #96]	@ (8007f84 <TIM_OC1_SetConfig+0x11c>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d111      	bne.n	8007f4a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	685a      	ldr	r2, [r3, #4]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	621a      	str	r2, [r3, #32]
}
 8007f64:	bf00      	nop
 8007f66:	371c      	adds	r7, #28
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	fffeff8f 	.word	0xfffeff8f
 8007f74:	40010000 	.word	0x40010000
 8007f78:	40010400 	.word	0x40010400
 8007f7c:	40014000 	.word	0x40014000
 8007f80:	40014400 	.word	0x40014400
 8007f84:	40014800 	.word	0x40014800

08007f88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b087      	sub	sp, #28
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	f023 0210 	bic.w	r2, r3, #16
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4b34      	ldr	r3, [pc, #208]	@ (8008084 <TIM_OC2_SetConfig+0xfc>)
 8007fb4:	4013      	ands	r3, r2
 8007fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	021b      	lsls	r3, r3, #8
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f023 0320 	bic.w	r3, r3, #32
 8007fd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	011b      	lsls	r3, r3, #4
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a29      	ldr	r2, [pc, #164]	@ (8008088 <TIM_OC2_SetConfig+0x100>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d003      	beq.n	8007ff0 <TIM_OC2_SetConfig+0x68>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a28      	ldr	r2, [pc, #160]	@ (800808c <TIM_OC2_SetConfig+0x104>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d10d      	bne.n	800800c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	011b      	lsls	r3, r3, #4
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	4313      	orrs	r3, r2
 8008002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800800a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a1e      	ldr	r2, [pc, #120]	@ (8008088 <TIM_OC2_SetConfig+0x100>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00f      	beq.n	8008034 <TIM_OC2_SetConfig+0xac>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a1d      	ldr	r2, [pc, #116]	@ (800808c <TIM_OC2_SetConfig+0x104>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d00b      	beq.n	8008034 <TIM_OC2_SetConfig+0xac>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a1c      	ldr	r2, [pc, #112]	@ (8008090 <TIM_OC2_SetConfig+0x108>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d007      	beq.n	8008034 <TIM_OC2_SetConfig+0xac>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	4a1b      	ldr	r2, [pc, #108]	@ (8008094 <TIM_OC2_SetConfig+0x10c>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d003      	beq.n	8008034 <TIM_OC2_SetConfig+0xac>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4a1a      	ldr	r2, [pc, #104]	@ (8008098 <TIM_OC2_SetConfig+0x110>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d113      	bne.n	800805c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800803a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	009b      	lsls	r3, r3, #2
 800804a:	693a      	ldr	r2, [r7, #16]
 800804c:	4313      	orrs	r3, r2
 800804e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	4313      	orrs	r3, r2
 800805a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68fa      	ldr	r2, [r7, #12]
 8008066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	621a      	str	r2, [r3, #32]
}
 8008076:	bf00      	nop
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	feff8fff 	.word	0xfeff8fff
 8008088:	40010000 	.word	0x40010000
 800808c:	40010400 	.word	0x40010400
 8008090:	40014000 	.word	0x40014000
 8008094:	40014400 	.word	0x40014400
 8008098:	40014800 	.word	0x40014800

0800809c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800809c:	b480      	push	{r7}
 800809e:	b087      	sub	sp, #28
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6a1b      	ldr	r3, [r3, #32]
 80080aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a1b      	ldr	r3, [r3, #32]
 80080b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	69db      	ldr	r3, [r3, #28]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	4b33      	ldr	r3, [pc, #204]	@ (8008194 <TIM_OC3_SetConfig+0xf8>)
 80080c8:	4013      	ands	r3, r2
 80080ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f023 0303 	bic.w	r3, r3, #3
 80080d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	4313      	orrs	r3, r2
 80080dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080de:	697b      	ldr	r3, [r7, #20]
 80080e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80080e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	689b      	ldr	r3, [r3, #8]
 80080ea:	021b      	lsls	r3, r3, #8
 80080ec:	697a      	ldr	r2, [r7, #20]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a28      	ldr	r2, [pc, #160]	@ (8008198 <TIM_OC3_SetConfig+0xfc>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d003      	beq.n	8008102 <TIM_OC3_SetConfig+0x66>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a27      	ldr	r2, [pc, #156]	@ (800819c <TIM_OC3_SetConfig+0x100>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d10d      	bne.n	800811e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008108:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	021b      	lsls	r3, r3, #8
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	4313      	orrs	r3, r2
 8008114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800811c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a1d      	ldr	r2, [pc, #116]	@ (8008198 <TIM_OC3_SetConfig+0xfc>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d00f      	beq.n	8008146 <TIM_OC3_SetConfig+0xaa>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a1c      	ldr	r2, [pc, #112]	@ (800819c <TIM_OC3_SetConfig+0x100>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00b      	beq.n	8008146 <TIM_OC3_SetConfig+0xaa>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a1b      	ldr	r2, [pc, #108]	@ (80081a0 <TIM_OC3_SetConfig+0x104>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d007      	beq.n	8008146 <TIM_OC3_SetConfig+0xaa>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a1a      	ldr	r2, [pc, #104]	@ (80081a4 <TIM_OC3_SetConfig+0x108>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d003      	beq.n	8008146 <TIM_OC3_SetConfig+0xaa>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a19      	ldr	r2, [pc, #100]	@ (80081a8 <TIM_OC3_SetConfig+0x10c>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d113      	bne.n	800816e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800814c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	695b      	ldr	r3, [r3, #20]
 800815a:	011b      	lsls	r3, r3, #4
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	4313      	orrs	r3, r2
 8008160:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	011b      	lsls	r3, r3, #4
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	4313      	orrs	r3, r2
 800816c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	697a      	ldr	r2, [r7, #20]
 8008186:	621a      	str	r2, [r3, #32]
}
 8008188:	bf00      	nop
 800818a:	371c      	adds	r7, #28
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	fffeff8f 	.word	0xfffeff8f
 8008198:	40010000 	.word	0x40010000
 800819c:	40010400 	.word	0x40010400
 80081a0:	40014000 	.word	0x40014000
 80081a4:	40014400 	.word	0x40014400
 80081a8:	40014800 	.word	0x40014800

080081ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a1b      	ldr	r3, [r3, #32]
 80081c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	69db      	ldr	r3, [r3, #28]
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081d4:	68fa      	ldr	r2, [r7, #12]
 80081d6:	4b24      	ldr	r3, [pc, #144]	@ (8008268 <TIM_OC4_SetConfig+0xbc>)
 80081d8:	4013      	ands	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80081f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	031b      	lsls	r3, r3, #12
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a19      	ldr	r2, [pc, #100]	@ (800826c <TIM_OC4_SetConfig+0xc0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d00f      	beq.n	800822c <TIM_OC4_SetConfig+0x80>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a18      	ldr	r2, [pc, #96]	@ (8008270 <TIM_OC4_SetConfig+0xc4>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d00b      	beq.n	800822c <TIM_OC4_SetConfig+0x80>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a17      	ldr	r2, [pc, #92]	@ (8008274 <TIM_OC4_SetConfig+0xc8>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d007      	beq.n	800822c <TIM_OC4_SetConfig+0x80>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a16      	ldr	r2, [pc, #88]	@ (8008278 <TIM_OC4_SetConfig+0xcc>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d003      	beq.n	800822c <TIM_OC4_SetConfig+0x80>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a15      	ldr	r2, [pc, #84]	@ (800827c <TIM_OC4_SetConfig+0xd0>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d109      	bne.n	8008240 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	695b      	ldr	r3, [r3, #20]
 8008238:	019b      	lsls	r3, r3, #6
 800823a:	697a      	ldr	r2, [r7, #20]
 800823c:	4313      	orrs	r3, r2
 800823e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	693a      	ldr	r2, [r7, #16]
 8008258:	621a      	str	r2, [r3, #32]
}
 800825a:	bf00      	nop
 800825c:	371c      	adds	r7, #28
 800825e:	46bd      	mov	sp, r7
 8008260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop
 8008268:	feff8fff 	.word	0xfeff8fff
 800826c:	40010000 	.word	0x40010000
 8008270:	40010400 	.word	0x40010400
 8008274:	40014000 	.word	0x40014000
 8008278:	40014400 	.word	0x40014400
 800827c:	40014800 	.word	0x40014800

08008280 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6a1b      	ldr	r3, [r3, #32]
 8008294:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	685b      	ldr	r3, [r3, #4]
 80082a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	4b21      	ldr	r3, [pc, #132]	@ (8008330 <TIM_OC5_SetConfig+0xb0>)
 80082ac:	4013      	ands	r3, r2
 80082ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80082c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	041b      	lsls	r3, r3, #16
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a18      	ldr	r2, [pc, #96]	@ (8008334 <TIM_OC5_SetConfig+0xb4>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d00f      	beq.n	80082f6 <TIM_OC5_SetConfig+0x76>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4a17      	ldr	r2, [pc, #92]	@ (8008338 <TIM_OC5_SetConfig+0xb8>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d00b      	beq.n	80082f6 <TIM_OC5_SetConfig+0x76>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a16      	ldr	r2, [pc, #88]	@ (800833c <TIM_OC5_SetConfig+0xbc>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d007      	beq.n	80082f6 <TIM_OC5_SetConfig+0x76>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a15      	ldr	r2, [pc, #84]	@ (8008340 <TIM_OC5_SetConfig+0xc0>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d003      	beq.n	80082f6 <TIM_OC5_SetConfig+0x76>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a14      	ldr	r2, [pc, #80]	@ (8008344 <TIM_OC5_SetConfig+0xc4>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d109      	bne.n	800830a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80082fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	021b      	lsls	r3, r3, #8
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	4313      	orrs	r3, r2
 8008308:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	685a      	ldr	r2, [r3, #4]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	621a      	str	r2, [r3, #32]
}
 8008324:	bf00      	nop
 8008326:	371c      	adds	r7, #28
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	fffeff8f 	.word	0xfffeff8f
 8008334:	40010000 	.word	0x40010000
 8008338:	40010400 	.word	0x40010400
 800833c:	40014000 	.word	0x40014000
 8008340:	40014400 	.word	0x40014400
 8008344:	40014800 	.word	0x40014800

08008348 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6a1b      	ldr	r3, [r3, #32]
 800835c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800836e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	4b22      	ldr	r3, [pc, #136]	@ (80083fc <TIM_OC6_SetConfig+0xb4>)
 8008374:	4013      	ands	r3, r2
 8008376:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	021b      	lsls	r3, r3, #8
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	4313      	orrs	r3, r2
 8008382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800838a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	051b      	lsls	r3, r3, #20
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a19      	ldr	r2, [pc, #100]	@ (8008400 <TIM_OC6_SetConfig+0xb8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00f      	beq.n	80083c0 <TIM_OC6_SetConfig+0x78>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a18      	ldr	r2, [pc, #96]	@ (8008404 <TIM_OC6_SetConfig+0xbc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00b      	beq.n	80083c0 <TIM_OC6_SetConfig+0x78>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a17      	ldr	r2, [pc, #92]	@ (8008408 <TIM_OC6_SetConfig+0xc0>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d007      	beq.n	80083c0 <TIM_OC6_SetConfig+0x78>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a16      	ldr	r2, [pc, #88]	@ (800840c <TIM_OC6_SetConfig+0xc4>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_OC6_SetConfig+0x78>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a15      	ldr	r2, [pc, #84]	@ (8008410 <TIM_OC6_SetConfig+0xc8>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d109      	bne.n	80083d4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80083c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	695b      	ldr	r3, [r3, #20]
 80083cc:	029b      	lsls	r3, r3, #10
 80083ce:	697a      	ldr	r2, [r7, #20]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	685a      	ldr	r2, [r3, #4]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	621a      	str	r2, [r3, #32]
}
 80083ee:	bf00      	nop
 80083f0:	371c      	adds	r7, #28
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	feff8fff 	.word	0xfeff8fff
 8008400:	40010000 	.word	0x40010000
 8008404:	40010400 	.word	0x40010400
 8008408:	40014000 	.word	0x40014000
 800840c:	40014400 	.word	0x40014400
 8008410:	40014800 	.word	0x40014800

08008414 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b086      	sub	sp, #24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800841e:	2300      	movs	r3, #0
 8008420:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800842a:	693a      	ldr	r2, [r7, #16]
 800842c:	4b65      	ldr	r3, [pc, #404]	@ (80085c4 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800842e:	4013      	ands	r3, r2
 8008430:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	693a      	ldr	r2, [r7, #16]
 8008438:	4313      	orrs	r3, r2
 800843a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	4b62      	ldr	r3, [pc, #392]	@ (80085c8 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8008440:	4013      	ands	r3, r2
 8008442:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	693a      	ldr	r2, [r7, #16]
 800844a:	4313      	orrs	r3, r2
 800844c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	685b      	ldr	r3, [r3, #4]
 800845a:	4a5c      	ldr	r2, [pc, #368]	@ (80085cc <TIM_SlaveTimer_SetConfig+0x1b8>)
 800845c:	4293      	cmp	r3, r2
 800845e:	f000 80ab 	beq.w	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008462:	4a5a      	ldr	r2, [pc, #360]	@ (80085cc <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008464:	4293      	cmp	r3, r2
 8008466:	f200 80a4 	bhi.w	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 800846a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800846e:	f000 80a3 	beq.w	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008472:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008476:	f200 809c 	bhi.w	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 800847a:	4a55      	ldr	r2, [pc, #340]	@ (80085d0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800847c:	4293      	cmp	r3, r2
 800847e:	f000 809b 	beq.w	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008482:	4a53      	ldr	r2, [pc, #332]	@ (80085d0 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008484:	4293      	cmp	r3, r2
 8008486:	f200 8094 	bhi.w	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 800848a:	4a52      	ldr	r2, [pc, #328]	@ (80085d4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800848c:	4293      	cmp	r3, r2
 800848e:	f000 8093 	beq.w	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008492:	4a50      	ldr	r2, [pc, #320]	@ (80085d4 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8008494:	4293      	cmp	r3, r2
 8008496:	f200 808c 	bhi.w	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 800849a:	4a4f      	ldr	r2, [pc, #316]	@ (80085d8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800849c:	4293      	cmp	r3, r2
 800849e:	f000 808b 	beq.w	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80084a2:	4a4d      	ldr	r2, [pc, #308]	@ (80085d8 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	f200 8084 	bhi.w	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084aa:	4a4c      	ldr	r2, [pc, #304]	@ (80085dc <TIM_SlaveTimer_SetConfig+0x1c8>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	f000 8083 	beq.w	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80084b2:	4a4a      	ldr	r2, [pc, #296]	@ (80085dc <TIM_SlaveTimer_SetConfig+0x1c8>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d87c      	bhi.n	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084b8:	4a49      	ldr	r2, [pc, #292]	@ (80085e0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d07c      	beq.n	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80084be:	4a48      	ldr	r2, [pc, #288]	@ (80085e0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d876      	bhi.n	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084c4:	4a47      	ldr	r2, [pc, #284]	@ (80085e4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d076      	beq.n	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80084ca:	4a46      	ldr	r2, [pc, #280]	@ (80085e4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d870      	bhi.n	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80084d4:	d070      	beq.n	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80084d6:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80084da:	d86a      	bhi.n	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084e0:	d06a      	beq.n	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 80084e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084e6:	d864      	bhi.n	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084e8:	2b70      	cmp	r3, #112	@ 0x70
 80084ea:	d01a      	beq.n	8008522 <TIM_SlaveTimer_SetConfig+0x10e>
 80084ec:	2b70      	cmp	r3, #112	@ 0x70
 80084ee:	d860      	bhi.n	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084f0:	2b60      	cmp	r3, #96	@ 0x60
 80084f2:	d054      	beq.n	800859e <TIM_SlaveTimer_SetConfig+0x18a>
 80084f4:	2b60      	cmp	r3, #96	@ 0x60
 80084f6:	d85c      	bhi.n	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 80084f8:	2b50      	cmp	r3, #80	@ 0x50
 80084fa:	d046      	beq.n	800858a <TIM_SlaveTimer_SetConfig+0x176>
 80084fc:	2b50      	cmp	r3, #80	@ 0x50
 80084fe:	d858      	bhi.n	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008500:	2b40      	cmp	r3, #64	@ 0x40
 8008502:	d019      	beq.n	8008538 <TIM_SlaveTimer_SetConfig+0x124>
 8008504:	2b40      	cmp	r3, #64	@ 0x40
 8008506:	d854      	bhi.n	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008508:	2b30      	cmp	r3, #48	@ 0x30
 800850a:	d055      	beq.n	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800850c:	2b30      	cmp	r3, #48	@ 0x30
 800850e:	d850      	bhi.n	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008510:	2b20      	cmp	r3, #32
 8008512:	d051      	beq.n	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008514:	2b20      	cmp	r3, #32
 8008516:	d84c      	bhi.n	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
 8008518:	2b00      	cmp	r3, #0
 800851a:	d04d      	beq.n	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 800851c:	2b10      	cmp	r3, #16
 800851e:	d04b      	beq.n	80085b8 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008520:	e047      	b.n	80085b2 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8008532:	f000 f8d7 	bl	80086e4 <TIM_ETR_SetConfig>
      break;
 8008536:	e040      	b.n	80085ba <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	2b05      	cmp	r3, #5
 800853e:	d101      	bne.n	8008544 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e03b      	b.n	80085bc <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6a1a      	ldr	r2, [r3, #32]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f022 0201 	bic.w	r2, r2, #1
 800855a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	699b      	ldr	r3, [r3, #24]
 8008562:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800856a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	691b      	ldr	r3, [r3, #16]
 8008570:	011b      	lsls	r3, r3, #4
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	4313      	orrs	r3, r2
 8008576:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	621a      	str	r2, [r3, #32]
      break;
 8008588:	e017      	b.n	80085ba <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008596:	461a      	mov	r2, r3
 8008598:	f000 f826 	bl	80085e8 <TIM_TI1_ConfigInputStage>
      break;
 800859c:	e00d      	b.n	80085ba <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085aa:	461a      	mov	r2, r3
 80085ac:	f000 f84b 	bl	8008646 <TIM_TI2_ConfigInputStage>
      break;
 80085b0:	e003      	b.n	80085ba <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80085b2:	2301      	movs	r3, #1
 80085b4:	75fb      	strb	r3, [r7, #23]
      break;
 80085b6:	e000      	b.n	80085ba <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80085b8:	bf00      	nop
  }

  return status;
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3718      	adds	r7, #24
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	ffcfff8f 	.word	0xffcfff8f
 80085c8:	fffefff8 	.word	0xfffefff8
 80085cc:	00200010 	.word	0x00200010
 80085d0:	00100070 	.word	0x00100070
 80085d4:	00100060 	.word	0x00100060
 80085d8:	00100050 	.word	0x00100050
 80085dc:	00100040 	.word	0x00100040
 80085e0:	00100030 	.word	0x00100030
 80085e4:	00100020 	.word	0x00100020

080085e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b087      	sub	sp, #28
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	60f8      	str	r0, [r7, #12]
 80085f0:	60b9      	str	r1, [r7, #8]
 80085f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6a1b      	ldr	r3, [r3, #32]
 80085f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	f023 0201 	bic.w	r2, r3, #1
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	011b      	lsls	r3, r3, #4
 8008618:	693a      	ldr	r2, [r7, #16]
 800861a:	4313      	orrs	r3, r2
 800861c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	f023 030a 	bic.w	r3, r3, #10
 8008624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008626:	697a      	ldr	r2, [r7, #20]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	4313      	orrs	r3, r2
 800862c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	621a      	str	r2, [r3, #32]
}
 800863a:	bf00      	nop
 800863c:	371c      	adds	r7, #28
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008646:	b480      	push	{r7}
 8008648:	b087      	sub	sp, #28
 800864a:	af00      	add	r7, sp, #0
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	60b9      	str	r1, [r7, #8]
 8008650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6a1b      	ldr	r3, [r3, #32]
 800865c:	f023 0210 	bic.w	r2, r3, #16
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008670:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	031b      	lsls	r3, r3, #12
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	4313      	orrs	r3, r2
 800867a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008682:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	011b      	lsls	r3, r3, #4
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	621a      	str	r2, [r3, #32]
}
 800869a:	bf00      	nop
 800869c:	371c      	adds	r7, #28
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
	...

080086a8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	4b09      	ldr	r3, [pc, #36]	@ (80086e0 <TIM_ITRx_SetConfig+0x38>)
 80086bc:	4013      	ands	r3, r2
 80086be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	f043 0307 	orr.w	r3, r3, #7
 80086ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	609a      	str	r2, [r3, #8]
}
 80086d2:	bf00      	nop
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	ffcfff8f 	.word	0xffcfff8f

080086e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	021a      	lsls	r2, r3, #8
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	431a      	orrs	r2, r3
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	4313      	orrs	r3, r2
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	4313      	orrs	r3, r2
 8008710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	609a      	str	r2, [r3, #8]
}
 8008718:	bf00      	nop
 800871a:	371c      	adds	r7, #28
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f003 031f 	and.w	r3, r3, #31
 8008736:	2201      	movs	r2, #1
 8008738:	fa02 f303 	lsl.w	r3, r2, r3
 800873c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6a1a      	ldr	r2, [r3, #32]
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	43db      	mvns	r3, r3
 8008746:	401a      	ands	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6a1a      	ldr	r2, [r3, #32]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f003 031f 	and.w	r3, r3, #31
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	fa01 f303 	lsl.w	r3, r1, r3
 800875c:	431a      	orrs	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	621a      	str	r2, [r3, #32]
}
 8008762:	bf00      	nop
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
	...

08008770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008784:	2302      	movs	r3, #2
 8008786:	e06d      	b.n	8008864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a30      	ldr	r2, [pc, #192]	@ (8008870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d004      	beq.n	80087bc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a2f      	ldr	r2, [pc, #188]	@ (8008874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d108      	bne.n	80087ce <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80087c2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087d4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	4313      	orrs	r3, r2
 80087de:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a20      	ldr	r2, [pc, #128]	@ (8008870 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d022      	beq.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087fa:	d01d      	beq.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a1d      	ldr	r2, [pc, #116]	@ (8008878 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d018      	beq.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a1c      	ldr	r2, [pc, #112]	@ (800887c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d013      	beq.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a1a      	ldr	r2, [pc, #104]	@ (8008880 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d00e      	beq.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a15      	ldr	r2, [pc, #84]	@ (8008874 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d009      	beq.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a16      	ldr	r2, [pc, #88]	@ (8008884 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d004      	beq.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a15      	ldr	r2, [pc, #84]	@ (8008888 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d10c      	bne.n	8008852 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800883e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	4313      	orrs	r3, r2
 8008848:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	68ba      	ldr	r2, [r7, #8]
 8008850:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr
 8008870:	40010000 	.word	0x40010000
 8008874:	40010400 	.word	0x40010400
 8008878:	40000400 	.word	0x40000400
 800887c:	40000800 	.word	0x40000800
 8008880:	40000c00 	.word	0x40000c00
 8008884:	40001800 	.word	0x40001800
 8008888:	40014000 	.word	0x40014000

0800888c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d101      	bne.n	800889e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e042      	b.n	8008924 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d106      	bne.n	80088b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7f9 fa17 	bl	8001ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2224      	movs	r2, #36	@ 0x24
 80088ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0201 	bic.w	r2, r2, #1
 80088cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 fe1e 	bl	8009518 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f8b3 	bl	8008a48 <UART_SetConfig>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d101      	bne.n	80088ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80088e8:	2301      	movs	r3, #1
 80088ea:	e01b      	b.n	8008924 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800890a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0201 	orr.w	r2, r2, #1
 800891a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fe9d 	bl	800965c <UART_CheckIdleState>
 8008922:	4603      	mov	r3, r0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b08a      	sub	sp, #40	@ 0x28
 8008930:	af02      	add	r7, sp, #8
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	4613      	mov	r3, r2
 800893a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008942:	2b20      	cmp	r3, #32
 8008944:	d17b      	bne.n	8008a3e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <HAL_UART_Transmit+0x26>
 800894c:	88fb      	ldrh	r3, [r7, #6]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e074      	b.n	8008a40 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2221      	movs	r2, #33	@ 0x21
 8008962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008966:	f7f9 fb85 	bl	8002074 <HAL_GetTick>
 800896a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	88fa      	ldrh	r2, [r7, #6]
 8008970:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	88fa      	ldrh	r2, [r7, #6]
 8008978:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008984:	d108      	bne.n	8008998 <HAL_UART_Transmit+0x6c>
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d104      	bne.n	8008998 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800898e:	2300      	movs	r3, #0
 8008990:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	61bb      	str	r3, [r7, #24]
 8008996:	e003      	b.n	80089a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800899c:	2300      	movs	r3, #0
 800899e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80089a0:	e030      	b.n	8008a04 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2200      	movs	r2, #0
 80089aa:	2180      	movs	r1, #128	@ 0x80
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 feff 	bl	80097b0 <UART_WaitOnFlagUntilTimeout>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d005      	beq.n	80089c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2220      	movs	r2, #32
 80089bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e03d      	b.n	8008a40 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10b      	bne.n	80089e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	881b      	ldrh	r3, [r3, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	3302      	adds	r3, #2
 80089de:	61bb      	str	r3, [r7, #24]
 80089e0:	e007      	b.n	80089f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	781a      	ldrb	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80089ec:	69fb      	ldr	r3, [r7, #28]
 80089ee:	3301      	adds	r3, #1
 80089f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	3b01      	subs	r3, #1
 80089fc:	b29a      	uxth	r2, r3
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008a0a:	b29b      	uxth	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d1c8      	bne.n	80089a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2200      	movs	r2, #0
 8008a18:	2140      	movs	r1, #64	@ 0x40
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f000 fec8 	bl	80097b0 <UART_WaitOnFlagUntilTimeout>
 8008a20:	4603      	mov	r3, r0
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d005      	beq.n	8008a32 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2220      	movs	r2, #32
 8008a2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008a2e:	2303      	movs	r3, #3
 8008a30:	e006      	b.n	8008a40 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	e000      	b.n	8008a40 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008a3e:	2302      	movs	r3, #2
  }
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3720      	adds	r7, #32
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a4c:	b092      	sub	sp, #72	@ 0x48
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	431a      	orrs	r2, r3
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	431a      	orrs	r2, r3
 8008a68:	697b      	ldr	r3, [r7, #20]
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	4bbe      	ldr	r3, [pc, #760]	@ (8008d70 <UART_SetConfig+0x328>)
 8008a78:	4013      	ands	r3, r2
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	6812      	ldr	r2, [r2, #0]
 8008a7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a80:	430b      	orrs	r3, r1
 8008a82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	68da      	ldr	r2, [r3, #12]
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	430a      	orrs	r2, r1
 8008a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4ab3      	ldr	r2, [pc, #716]	@ (8008d74 <UART_SetConfig+0x32c>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d004      	beq.n	8008ab4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	689a      	ldr	r2, [r3, #8]
 8008aba:	4baf      	ldr	r3, [pc, #700]	@ (8008d78 <UART_SetConfig+0x330>)
 8008abc:	4013      	ands	r3, r2
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	6812      	ldr	r2, [r2, #0]
 8008ac2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008ac4:	430b      	orrs	r3, r1
 8008ac6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ace:	f023 010f 	bic.w	r1, r3, #15
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4aa6      	ldr	r2, [pc, #664]	@ (8008d7c <UART_SetConfig+0x334>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d177      	bne.n	8008bd8 <UART_SetConfig+0x190>
 8008ae8:	4ba5      	ldr	r3, [pc, #660]	@ (8008d80 <UART_SetConfig+0x338>)
 8008aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008aec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008af0:	2b28      	cmp	r3, #40	@ 0x28
 8008af2:	d86d      	bhi.n	8008bd0 <UART_SetConfig+0x188>
 8008af4:	a201      	add	r2, pc, #4	@ (adr r2, 8008afc <UART_SetConfig+0xb4>)
 8008af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afa:	bf00      	nop
 8008afc:	08008ba1 	.word	0x08008ba1
 8008b00:	08008bd1 	.word	0x08008bd1
 8008b04:	08008bd1 	.word	0x08008bd1
 8008b08:	08008bd1 	.word	0x08008bd1
 8008b0c:	08008bd1 	.word	0x08008bd1
 8008b10:	08008bd1 	.word	0x08008bd1
 8008b14:	08008bd1 	.word	0x08008bd1
 8008b18:	08008bd1 	.word	0x08008bd1
 8008b1c:	08008ba9 	.word	0x08008ba9
 8008b20:	08008bd1 	.word	0x08008bd1
 8008b24:	08008bd1 	.word	0x08008bd1
 8008b28:	08008bd1 	.word	0x08008bd1
 8008b2c:	08008bd1 	.word	0x08008bd1
 8008b30:	08008bd1 	.word	0x08008bd1
 8008b34:	08008bd1 	.word	0x08008bd1
 8008b38:	08008bd1 	.word	0x08008bd1
 8008b3c:	08008bb1 	.word	0x08008bb1
 8008b40:	08008bd1 	.word	0x08008bd1
 8008b44:	08008bd1 	.word	0x08008bd1
 8008b48:	08008bd1 	.word	0x08008bd1
 8008b4c:	08008bd1 	.word	0x08008bd1
 8008b50:	08008bd1 	.word	0x08008bd1
 8008b54:	08008bd1 	.word	0x08008bd1
 8008b58:	08008bd1 	.word	0x08008bd1
 8008b5c:	08008bb9 	.word	0x08008bb9
 8008b60:	08008bd1 	.word	0x08008bd1
 8008b64:	08008bd1 	.word	0x08008bd1
 8008b68:	08008bd1 	.word	0x08008bd1
 8008b6c:	08008bd1 	.word	0x08008bd1
 8008b70:	08008bd1 	.word	0x08008bd1
 8008b74:	08008bd1 	.word	0x08008bd1
 8008b78:	08008bd1 	.word	0x08008bd1
 8008b7c:	08008bc1 	.word	0x08008bc1
 8008b80:	08008bd1 	.word	0x08008bd1
 8008b84:	08008bd1 	.word	0x08008bd1
 8008b88:	08008bd1 	.word	0x08008bd1
 8008b8c:	08008bd1 	.word	0x08008bd1
 8008b90:	08008bd1 	.word	0x08008bd1
 8008b94:	08008bd1 	.word	0x08008bd1
 8008b98:	08008bd1 	.word	0x08008bd1
 8008b9c:	08008bc9 	.word	0x08008bc9
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba6:	e222      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008ba8:	2304      	movs	r3, #4
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bae:	e21e      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008bb0:	2308      	movs	r3, #8
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bb6:	e21a      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008bb8:	2310      	movs	r3, #16
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bbe:	e216      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008bc0:	2320      	movs	r3, #32
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bc6:	e212      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008bc8:	2340      	movs	r3, #64	@ 0x40
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bce:	e20e      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008bd0:	2380      	movs	r3, #128	@ 0x80
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e20a      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a69      	ldr	r2, [pc, #420]	@ (8008d84 <UART_SetConfig+0x33c>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d130      	bne.n	8008c44 <UART_SetConfig+0x1fc>
 8008be2:	4b67      	ldr	r3, [pc, #412]	@ (8008d80 <UART_SetConfig+0x338>)
 8008be4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008be6:	f003 0307 	and.w	r3, r3, #7
 8008bea:	2b05      	cmp	r3, #5
 8008bec:	d826      	bhi.n	8008c3c <UART_SetConfig+0x1f4>
 8008bee:	a201      	add	r2, pc, #4	@ (adr r2, 8008bf4 <UART_SetConfig+0x1ac>)
 8008bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bf4:	08008c0d 	.word	0x08008c0d
 8008bf8:	08008c15 	.word	0x08008c15
 8008bfc:	08008c1d 	.word	0x08008c1d
 8008c00:	08008c25 	.word	0x08008c25
 8008c04:	08008c2d 	.word	0x08008c2d
 8008c08:	08008c35 	.word	0x08008c35
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c12:	e1ec      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008c14:	2304      	movs	r3, #4
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c1a:	e1e8      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008c1c:	2308      	movs	r3, #8
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c22:	e1e4      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008c24:	2310      	movs	r3, #16
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c2a:	e1e0      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008c2c:	2320      	movs	r3, #32
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c32:	e1dc      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008c34:	2340      	movs	r3, #64	@ 0x40
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c3a:	e1d8      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008c3c:	2380      	movs	r3, #128	@ 0x80
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c42:	e1d4      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a4f      	ldr	r2, [pc, #316]	@ (8008d88 <UART_SetConfig+0x340>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d130      	bne.n	8008cb0 <UART_SetConfig+0x268>
 8008c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8008d80 <UART_SetConfig+0x338>)
 8008c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c52:	f003 0307 	and.w	r3, r3, #7
 8008c56:	2b05      	cmp	r3, #5
 8008c58:	d826      	bhi.n	8008ca8 <UART_SetConfig+0x260>
 8008c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c60 <UART_SetConfig+0x218>)
 8008c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c60:	08008c79 	.word	0x08008c79
 8008c64:	08008c81 	.word	0x08008c81
 8008c68:	08008c89 	.word	0x08008c89
 8008c6c:	08008c91 	.word	0x08008c91
 8008c70:	08008c99 	.word	0x08008c99
 8008c74:	08008ca1 	.word	0x08008ca1
 8008c78:	2300      	movs	r3, #0
 8008c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c7e:	e1b6      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008c80:	2304      	movs	r3, #4
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c86:	e1b2      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008c88:	2308      	movs	r3, #8
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c8e:	e1ae      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008c90:	2310      	movs	r3, #16
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c96:	e1aa      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008c98:	2320      	movs	r3, #32
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008c9e:	e1a6      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008ca0:	2340      	movs	r3, #64	@ 0x40
 8008ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ca6:	e1a2      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008ca8:	2380      	movs	r3, #128	@ 0x80
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cae:	e19e      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4a35      	ldr	r2, [pc, #212]	@ (8008d8c <UART_SetConfig+0x344>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d130      	bne.n	8008d1c <UART_SetConfig+0x2d4>
 8008cba:	4b31      	ldr	r3, [pc, #196]	@ (8008d80 <UART_SetConfig+0x338>)
 8008cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cbe:	f003 0307 	and.w	r3, r3, #7
 8008cc2:	2b05      	cmp	r3, #5
 8008cc4:	d826      	bhi.n	8008d14 <UART_SetConfig+0x2cc>
 8008cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ccc <UART_SetConfig+0x284>)
 8008cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ccc:	08008ce5 	.word	0x08008ce5
 8008cd0:	08008ced 	.word	0x08008ced
 8008cd4:	08008cf5 	.word	0x08008cf5
 8008cd8:	08008cfd 	.word	0x08008cfd
 8008cdc:	08008d05 	.word	0x08008d05
 8008ce0:	08008d0d 	.word	0x08008d0d
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cea:	e180      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008cec:	2304      	movs	r3, #4
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cf2:	e17c      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008cf4:	2308      	movs	r3, #8
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cfa:	e178      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008cfc:	2310      	movs	r3, #16
 8008cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d02:	e174      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008d04:	2320      	movs	r3, #32
 8008d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d0a:	e170      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008d0c:	2340      	movs	r3, #64	@ 0x40
 8008d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d12:	e16c      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008d14:	2380      	movs	r3, #128	@ 0x80
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1a:	e168      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a1b      	ldr	r2, [pc, #108]	@ (8008d90 <UART_SetConfig+0x348>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d142      	bne.n	8008dac <UART_SetConfig+0x364>
 8008d26:	4b16      	ldr	r3, [pc, #88]	@ (8008d80 <UART_SetConfig+0x338>)
 8008d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d2a:	f003 0307 	and.w	r3, r3, #7
 8008d2e:	2b05      	cmp	r3, #5
 8008d30:	d838      	bhi.n	8008da4 <UART_SetConfig+0x35c>
 8008d32:	a201      	add	r2, pc, #4	@ (adr r2, 8008d38 <UART_SetConfig+0x2f0>)
 8008d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d38:	08008d51 	.word	0x08008d51
 8008d3c:	08008d59 	.word	0x08008d59
 8008d40:	08008d61 	.word	0x08008d61
 8008d44:	08008d69 	.word	0x08008d69
 8008d48:	08008d95 	.word	0x08008d95
 8008d4c:	08008d9d 	.word	0x08008d9d
 8008d50:	2300      	movs	r3, #0
 8008d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d56:	e14a      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008d58:	2304      	movs	r3, #4
 8008d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d5e:	e146      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008d60:	2308      	movs	r3, #8
 8008d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d66:	e142      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008d68:	2310      	movs	r3, #16
 8008d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d6e:	e13e      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008d70:	cfff69f3 	.word	0xcfff69f3
 8008d74:	58000c00 	.word	0x58000c00
 8008d78:	11fff4ff 	.word	0x11fff4ff
 8008d7c:	40011000 	.word	0x40011000
 8008d80:	58024400 	.word	0x58024400
 8008d84:	40004400 	.word	0x40004400
 8008d88:	40004800 	.word	0x40004800
 8008d8c:	40004c00 	.word	0x40004c00
 8008d90:	40005000 	.word	0x40005000
 8008d94:	2320      	movs	r3, #32
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9a:	e128      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008d9c:	2340      	movs	r3, #64	@ 0x40
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da2:	e124      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008da4:	2380      	movs	r3, #128	@ 0x80
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008daa:	e120      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4acb      	ldr	r2, [pc, #812]	@ (80090e0 <UART_SetConfig+0x698>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d176      	bne.n	8008ea4 <UART_SetConfig+0x45c>
 8008db6:	4bcb      	ldr	r3, [pc, #812]	@ (80090e4 <UART_SetConfig+0x69c>)
 8008db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008dbe:	2b28      	cmp	r3, #40	@ 0x28
 8008dc0:	d86c      	bhi.n	8008e9c <UART_SetConfig+0x454>
 8008dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008dc8 <UART_SetConfig+0x380>)
 8008dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc8:	08008e6d 	.word	0x08008e6d
 8008dcc:	08008e9d 	.word	0x08008e9d
 8008dd0:	08008e9d 	.word	0x08008e9d
 8008dd4:	08008e9d 	.word	0x08008e9d
 8008dd8:	08008e9d 	.word	0x08008e9d
 8008ddc:	08008e9d 	.word	0x08008e9d
 8008de0:	08008e9d 	.word	0x08008e9d
 8008de4:	08008e9d 	.word	0x08008e9d
 8008de8:	08008e75 	.word	0x08008e75
 8008dec:	08008e9d 	.word	0x08008e9d
 8008df0:	08008e9d 	.word	0x08008e9d
 8008df4:	08008e9d 	.word	0x08008e9d
 8008df8:	08008e9d 	.word	0x08008e9d
 8008dfc:	08008e9d 	.word	0x08008e9d
 8008e00:	08008e9d 	.word	0x08008e9d
 8008e04:	08008e9d 	.word	0x08008e9d
 8008e08:	08008e7d 	.word	0x08008e7d
 8008e0c:	08008e9d 	.word	0x08008e9d
 8008e10:	08008e9d 	.word	0x08008e9d
 8008e14:	08008e9d 	.word	0x08008e9d
 8008e18:	08008e9d 	.word	0x08008e9d
 8008e1c:	08008e9d 	.word	0x08008e9d
 8008e20:	08008e9d 	.word	0x08008e9d
 8008e24:	08008e9d 	.word	0x08008e9d
 8008e28:	08008e85 	.word	0x08008e85
 8008e2c:	08008e9d 	.word	0x08008e9d
 8008e30:	08008e9d 	.word	0x08008e9d
 8008e34:	08008e9d 	.word	0x08008e9d
 8008e38:	08008e9d 	.word	0x08008e9d
 8008e3c:	08008e9d 	.word	0x08008e9d
 8008e40:	08008e9d 	.word	0x08008e9d
 8008e44:	08008e9d 	.word	0x08008e9d
 8008e48:	08008e8d 	.word	0x08008e8d
 8008e4c:	08008e9d 	.word	0x08008e9d
 8008e50:	08008e9d 	.word	0x08008e9d
 8008e54:	08008e9d 	.word	0x08008e9d
 8008e58:	08008e9d 	.word	0x08008e9d
 8008e5c:	08008e9d 	.word	0x08008e9d
 8008e60:	08008e9d 	.word	0x08008e9d
 8008e64:	08008e9d 	.word	0x08008e9d
 8008e68:	08008e95 	.word	0x08008e95
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e72:	e0bc      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008e74:	2304      	movs	r3, #4
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e7a:	e0b8      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008e7c:	2308      	movs	r3, #8
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e82:	e0b4      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008e84:	2310      	movs	r3, #16
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e8a:	e0b0      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008e8c:	2320      	movs	r3, #32
 8008e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e92:	e0ac      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008e94:	2340      	movs	r3, #64	@ 0x40
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e9a:	e0a8      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008e9c:	2380      	movs	r3, #128	@ 0x80
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ea2:	e0a4      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a8f      	ldr	r2, [pc, #572]	@ (80090e8 <UART_SetConfig+0x6a0>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d130      	bne.n	8008f10 <UART_SetConfig+0x4c8>
 8008eae:	4b8d      	ldr	r3, [pc, #564]	@ (80090e4 <UART_SetConfig+0x69c>)
 8008eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eb2:	f003 0307 	and.w	r3, r3, #7
 8008eb6:	2b05      	cmp	r3, #5
 8008eb8:	d826      	bhi.n	8008f08 <UART_SetConfig+0x4c0>
 8008eba:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec0 <UART_SetConfig+0x478>)
 8008ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec0:	08008ed9 	.word	0x08008ed9
 8008ec4:	08008ee1 	.word	0x08008ee1
 8008ec8:	08008ee9 	.word	0x08008ee9
 8008ecc:	08008ef1 	.word	0x08008ef1
 8008ed0:	08008ef9 	.word	0x08008ef9
 8008ed4:	08008f01 	.word	0x08008f01
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ede:	e086      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008ee0:	2304      	movs	r3, #4
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ee6:	e082      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008ee8:	2308      	movs	r3, #8
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008eee:	e07e      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008ef0:	2310      	movs	r3, #16
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ef6:	e07a      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008ef8:	2320      	movs	r3, #32
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008efe:	e076      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008f00:	2340      	movs	r3, #64	@ 0x40
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f06:	e072      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008f08:	2380      	movs	r3, #128	@ 0x80
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f0e:	e06e      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a75      	ldr	r2, [pc, #468]	@ (80090ec <UART_SetConfig+0x6a4>)
 8008f16:	4293      	cmp	r3, r2
 8008f18:	d130      	bne.n	8008f7c <UART_SetConfig+0x534>
 8008f1a:	4b72      	ldr	r3, [pc, #456]	@ (80090e4 <UART_SetConfig+0x69c>)
 8008f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f1e:	f003 0307 	and.w	r3, r3, #7
 8008f22:	2b05      	cmp	r3, #5
 8008f24:	d826      	bhi.n	8008f74 <UART_SetConfig+0x52c>
 8008f26:	a201      	add	r2, pc, #4	@ (adr r2, 8008f2c <UART_SetConfig+0x4e4>)
 8008f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2c:	08008f45 	.word	0x08008f45
 8008f30:	08008f4d 	.word	0x08008f4d
 8008f34:	08008f55 	.word	0x08008f55
 8008f38:	08008f5d 	.word	0x08008f5d
 8008f3c:	08008f65 	.word	0x08008f65
 8008f40:	08008f6d 	.word	0x08008f6d
 8008f44:	2300      	movs	r3, #0
 8008f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f4a:	e050      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008f4c:	2304      	movs	r3, #4
 8008f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f52:	e04c      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008f54:	2308      	movs	r3, #8
 8008f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f5a:	e048      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008f5c:	2310      	movs	r3, #16
 8008f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f62:	e044      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008f64:	2320      	movs	r3, #32
 8008f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6a:	e040      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008f6c:	2340      	movs	r3, #64	@ 0x40
 8008f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f72:	e03c      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008f74:	2380      	movs	r3, #128	@ 0x80
 8008f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7a:	e038      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a5b      	ldr	r2, [pc, #364]	@ (80090f0 <UART_SetConfig+0x6a8>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d130      	bne.n	8008fe8 <UART_SetConfig+0x5a0>
 8008f86:	4b57      	ldr	r3, [pc, #348]	@ (80090e4 <UART_SetConfig+0x69c>)
 8008f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f8a:	f003 0307 	and.w	r3, r3, #7
 8008f8e:	2b05      	cmp	r3, #5
 8008f90:	d826      	bhi.n	8008fe0 <UART_SetConfig+0x598>
 8008f92:	a201      	add	r2, pc, #4	@ (adr r2, 8008f98 <UART_SetConfig+0x550>)
 8008f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f98:	08008fb1 	.word	0x08008fb1
 8008f9c:	08008fb9 	.word	0x08008fb9
 8008fa0:	08008fc1 	.word	0x08008fc1
 8008fa4:	08008fc9 	.word	0x08008fc9
 8008fa8:	08008fd1 	.word	0x08008fd1
 8008fac:	08008fd9 	.word	0x08008fd9
 8008fb0:	2302      	movs	r3, #2
 8008fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fb6:	e01a      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008fb8:	2304      	movs	r3, #4
 8008fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fbe:	e016      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008fc0:	2308      	movs	r3, #8
 8008fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fc6:	e012      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008fc8:	2310      	movs	r3, #16
 8008fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fce:	e00e      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008fd0:	2320      	movs	r3, #32
 8008fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fd6:	e00a      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008fd8:	2340      	movs	r3, #64	@ 0x40
 8008fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fde:	e006      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008fe0:	2380      	movs	r3, #128	@ 0x80
 8008fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe6:	e002      	b.n	8008fee <UART_SetConfig+0x5a6>
 8008fe8:	2380      	movs	r3, #128	@ 0x80
 8008fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80090f0 <UART_SetConfig+0x6a8>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	f040 80f8 	bne.w	80091ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008ffa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008ffe:	2b20      	cmp	r3, #32
 8009000:	dc46      	bgt.n	8009090 <UART_SetConfig+0x648>
 8009002:	2b02      	cmp	r3, #2
 8009004:	f2c0 8082 	blt.w	800910c <UART_SetConfig+0x6c4>
 8009008:	3b02      	subs	r3, #2
 800900a:	2b1e      	cmp	r3, #30
 800900c:	d87e      	bhi.n	800910c <UART_SetConfig+0x6c4>
 800900e:	a201      	add	r2, pc, #4	@ (adr r2, 8009014 <UART_SetConfig+0x5cc>)
 8009010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009014:	08009097 	.word	0x08009097
 8009018:	0800910d 	.word	0x0800910d
 800901c:	0800909f 	.word	0x0800909f
 8009020:	0800910d 	.word	0x0800910d
 8009024:	0800910d 	.word	0x0800910d
 8009028:	0800910d 	.word	0x0800910d
 800902c:	080090af 	.word	0x080090af
 8009030:	0800910d 	.word	0x0800910d
 8009034:	0800910d 	.word	0x0800910d
 8009038:	0800910d 	.word	0x0800910d
 800903c:	0800910d 	.word	0x0800910d
 8009040:	0800910d 	.word	0x0800910d
 8009044:	0800910d 	.word	0x0800910d
 8009048:	0800910d 	.word	0x0800910d
 800904c:	080090bf 	.word	0x080090bf
 8009050:	0800910d 	.word	0x0800910d
 8009054:	0800910d 	.word	0x0800910d
 8009058:	0800910d 	.word	0x0800910d
 800905c:	0800910d 	.word	0x0800910d
 8009060:	0800910d 	.word	0x0800910d
 8009064:	0800910d 	.word	0x0800910d
 8009068:	0800910d 	.word	0x0800910d
 800906c:	0800910d 	.word	0x0800910d
 8009070:	0800910d 	.word	0x0800910d
 8009074:	0800910d 	.word	0x0800910d
 8009078:	0800910d 	.word	0x0800910d
 800907c:	0800910d 	.word	0x0800910d
 8009080:	0800910d 	.word	0x0800910d
 8009084:	0800910d 	.word	0x0800910d
 8009088:	0800910d 	.word	0x0800910d
 800908c:	080090ff 	.word	0x080090ff
 8009090:	2b40      	cmp	r3, #64	@ 0x40
 8009092:	d037      	beq.n	8009104 <UART_SetConfig+0x6bc>
 8009094:	e03a      	b.n	800910c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009096:	f7fd fccb 	bl	8006a30 <HAL_RCCEx_GetD3PCLK1Freq>
 800909a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800909c:	e03c      	b.n	8009118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800909e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7fd fcda 	bl	8006a5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090ac:	e034      	b.n	8009118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090ae:	f107 0318 	add.w	r3, r7, #24
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7fd fe26 	bl	8006d04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090b8:	69fb      	ldr	r3, [r7, #28]
 80090ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090bc:	e02c      	b.n	8009118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80090be:	4b09      	ldr	r3, [pc, #36]	@ (80090e4 <UART_SetConfig+0x69c>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d016      	beq.n	80090f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80090ca:	4b06      	ldr	r3, [pc, #24]	@ (80090e4 <UART_SetConfig+0x69c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	08db      	lsrs	r3, r3, #3
 80090d0:	f003 0303 	and.w	r3, r3, #3
 80090d4:	4a07      	ldr	r2, [pc, #28]	@ (80090f4 <UART_SetConfig+0x6ac>)
 80090d6:	fa22 f303 	lsr.w	r3, r2, r3
 80090da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80090dc:	e01c      	b.n	8009118 <UART_SetConfig+0x6d0>
 80090de:	bf00      	nop
 80090e0:	40011400 	.word	0x40011400
 80090e4:	58024400 	.word	0x58024400
 80090e8:	40007800 	.word	0x40007800
 80090ec:	40007c00 	.word	0x40007c00
 80090f0:	58000c00 	.word	0x58000c00
 80090f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80090f8:	4b9d      	ldr	r3, [pc, #628]	@ (8009370 <UART_SetConfig+0x928>)
 80090fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090fc:	e00c      	b.n	8009118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80090fe:	4b9d      	ldr	r3, [pc, #628]	@ (8009374 <UART_SetConfig+0x92c>)
 8009100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009102:	e009      	b.n	8009118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009104:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800910a:	e005      	b.n	8009118 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800910c:	2300      	movs	r3, #0
 800910e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009110:	2301      	movs	r3, #1
 8009112:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009116:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 81de 	beq.w	80094dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009124:	4a94      	ldr	r2, [pc, #592]	@ (8009378 <UART_SetConfig+0x930>)
 8009126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800912a:	461a      	mov	r2, r3
 800912c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800912e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009132:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	685a      	ldr	r2, [r3, #4]
 8009138:	4613      	mov	r3, r2
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	4413      	add	r3, r2
 800913e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009140:	429a      	cmp	r2, r3
 8009142:	d305      	bcc.n	8009150 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	685b      	ldr	r3, [r3, #4]
 8009148:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800914a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800914c:	429a      	cmp	r2, r3
 800914e:	d903      	bls.n	8009158 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009156:	e1c1      	b.n	80094dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009158:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800915a:	2200      	movs	r2, #0
 800915c:	60bb      	str	r3, [r7, #8]
 800915e:	60fa      	str	r2, [r7, #12]
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009164:	4a84      	ldr	r2, [pc, #528]	@ (8009378 <UART_SetConfig+0x930>)
 8009166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800916a:	b29b      	uxth	r3, r3
 800916c:	2200      	movs	r2, #0
 800916e:	603b      	str	r3, [r7, #0]
 8009170:	607a      	str	r2, [r7, #4]
 8009172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009176:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800917a:	f7f7 f909 	bl	8000390 <__aeabi_uldivmod>
 800917e:	4602      	mov	r2, r0
 8009180:	460b      	mov	r3, r1
 8009182:	4610      	mov	r0, r2
 8009184:	4619      	mov	r1, r3
 8009186:	f04f 0200 	mov.w	r2, #0
 800918a:	f04f 0300 	mov.w	r3, #0
 800918e:	020b      	lsls	r3, r1, #8
 8009190:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009194:	0202      	lsls	r2, r0, #8
 8009196:	6979      	ldr	r1, [r7, #20]
 8009198:	6849      	ldr	r1, [r1, #4]
 800919a:	0849      	lsrs	r1, r1, #1
 800919c:	2000      	movs	r0, #0
 800919e:	460c      	mov	r4, r1
 80091a0:	4605      	mov	r5, r0
 80091a2:	eb12 0804 	adds.w	r8, r2, r4
 80091a6:	eb43 0905 	adc.w	r9, r3, r5
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	685b      	ldr	r3, [r3, #4]
 80091ae:	2200      	movs	r2, #0
 80091b0:	469a      	mov	sl, r3
 80091b2:	4693      	mov	fp, r2
 80091b4:	4652      	mov	r2, sl
 80091b6:	465b      	mov	r3, fp
 80091b8:	4640      	mov	r0, r8
 80091ba:	4649      	mov	r1, r9
 80091bc:	f7f7 f8e8 	bl	8000390 <__aeabi_uldivmod>
 80091c0:	4602      	mov	r2, r0
 80091c2:	460b      	mov	r3, r1
 80091c4:	4613      	mov	r3, r2
 80091c6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80091c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091ce:	d308      	bcc.n	80091e2 <UART_SetConfig+0x79a>
 80091d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80091d6:	d204      	bcs.n	80091e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091de:	60da      	str	r2, [r3, #12]
 80091e0:	e17c      	b.n	80094dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80091e8:	e178      	b.n	80094dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	69db      	ldr	r3, [r3, #28]
 80091ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80091f2:	f040 80c5 	bne.w	8009380 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80091f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80091fa:	2b20      	cmp	r3, #32
 80091fc:	dc48      	bgt.n	8009290 <UART_SetConfig+0x848>
 80091fe:	2b00      	cmp	r3, #0
 8009200:	db7b      	blt.n	80092fa <UART_SetConfig+0x8b2>
 8009202:	2b20      	cmp	r3, #32
 8009204:	d879      	bhi.n	80092fa <UART_SetConfig+0x8b2>
 8009206:	a201      	add	r2, pc, #4	@ (adr r2, 800920c <UART_SetConfig+0x7c4>)
 8009208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800920c:	08009297 	.word	0x08009297
 8009210:	0800929f 	.word	0x0800929f
 8009214:	080092fb 	.word	0x080092fb
 8009218:	080092fb 	.word	0x080092fb
 800921c:	080092a7 	.word	0x080092a7
 8009220:	080092fb 	.word	0x080092fb
 8009224:	080092fb 	.word	0x080092fb
 8009228:	080092fb 	.word	0x080092fb
 800922c:	080092b7 	.word	0x080092b7
 8009230:	080092fb 	.word	0x080092fb
 8009234:	080092fb 	.word	0x080092fb
 8009238:	080092fb 	.word	0x080092fb
 800923c:	080092fb 	.word	0x080092fb
 8009240:	080092fb 	.word	0x080092fb
 8009244:	080092fb 	.word	0x080092fb
 8009248:	080092fb 	.word	0x080092fb
 800924c:	080092c7 	.word	0x080092c7
 8009250:	080092fb 	.word	0x080092fb
 8009254:	080092fb 	.word	0x080092fb
 8009258:	080092fb 	.word	0x080092fb
 800925c:	080092fb 	.word	0x080092fb
 8009260:	080092fb 	.word	0x080092fb
 8009264:	080092fb 	.word	0x080092fb
 8009268:	080092fb 	.word	0x080092fb
 800926c:	080092fb 	.word	0x080092fb
 8009270:	080092fb 	.word	0x080092fb
 8009274:	080092fb 	.word	0x080092fb
 8009278:	080092fb 	.word	0x080092fb
 800927c:	080092fb 	.word	0x080092fb
 8009280:	080092fb 	.word	0x080092fb
 8009284:	080092fb 	.word	0x080092fb
 8009288:	080092fb 	.word	0x080092fb
 800928c:	080092ed 	.word	0x080092ed
 8009290:	2b40      	cmp	r3, #64	@ 0x40
 8009292:	d02e      	beq.n	80092f2 <UART_SetConfig+0x8aa>
 8009294:	e031      	b.n	80092fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009296:	f7fc f995 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 800929a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800929c:	e033      	b.n	8009306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800929e:	f7fc f9a7 	bl	80055f0 <HAL_RCC_GetPCLK2Freq>
 80092a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80092a4:	e02f      	b.n	8009306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80092aa:	4618      	mov	r0, r3
 80092ac:	f7fd fbd6 	bl	8006a5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80092b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b4:	e027      	b.n	8009306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80092b6:	f107 0318 	add.w	r3, r7, #24
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7fd fd22 	bl	8006d04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c4:	e01f      	b.n	8009306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092c6:	4b2d      	ldr	r3, [pc, #180]	@ (800937c <UART_SetConfig+0x934>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f003 0320 	and.w	r3, r3, #32
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d009      	beq.n	80092e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092d2:	4b2a      	ldr	r3, [pc, #168]	@ (800937c <UART_SetConfig+0x934>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	08db      	lsrs	r3, r3, #3
 80092d8:	f003 0303 	and.w	r3, r3, #3
 80092dc:	4a24      	ldr	r2, [pc, #144]	@ (8009370 <UART_SetConfig+0x928>)
 80092de:	fa22 f303 	lsr.w	r3, r2, r3
 80092e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092e4:	e00f      	b.n	8009306 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80092e6:	4b22      	ldr	r3, [pc, #136]	@ (8009370 <UART_SetConfig+0x928>)
 80092e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092ea:	e00c      	b.n	8009306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092ec:	4b21      	ldr	r3, [pc, #132]	@ (8009374 <UART_SetConfig+0x92c>)
 80092ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092f0:	e009      	b.n	8009306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092f8:	e005      	b.n	8009306 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80092fa:	2300      	movs	r3, #0
 80092fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009304:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009308:	2b00      	cmp	r3, #0
 800930a:	f000 80e7 	beq.w	80094dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800930e:	697b      	ldr	r3, [r7, #20]
 8009310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009312:	4a19      	ldr	r2, [pc, #100]	@ (8009378 <UART_SetConfig+0x930>)
 8009314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009318:	461a      	mov	r2, r3
 800931a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800931c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009320:	005a      	lsls	r2, r3, #1
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	085b      	lsrs	r3, r3, #1
 8009328:	441a      	add	r2, r3
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009332:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009336:	2b0f      	cmp	r3, #15
 8009338:	d916      	bls.n	8009368 <UART_SetConfig+0x920>
 800933a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800933c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009340:	d212      	bcs.n	8009368 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009344:	b29b      	uxth	r3, r3
 8009346:	f023 030f 	bic.w	r3, r3, #15
 800934a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800934c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800934e:	085b      	lsrs	r3, r3, #1
 8009350:	b29b      	uxth	r3, r3
 8009352:	f003 0307 	and.w	r3, r3, #7
 8009356:	b29a      	uxth	r2, r3
 8009358:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800935a:	4313      	orrs	r3, r2
 800935c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800935e:	697b      	ldr	r3, [r7, #20]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009364:	60da      	str	r2, [r3, #12]
 8009366:	e0b9      	b.n	80094dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800936e:	e0b5      	b.n	80094dc <UART_SetConfig+0xa94>
 8009370:	03d09000 	.word	0x03d09000
 8009374:	003d0900 	.word	0x003d0900
 8009378:	0800aba0 	.word	0x0800aba0
 800937c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009380:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009384:	2b20      	cmp	r3, #32
 8009386:	dc49      	bgt.n	800941c <UART_SetConfig+0x9d4>
 8009388:	2b00      	cmp	r3, #0
 800938a:	db7c      	blt.n	8009486 <UART_SetConfig+0xa3e>
 800938c:	2b20      	cmp	r3, #32
 800938e:	d87a      	bhi.n	8009486 <UART_SetConfig+0xa3e>
 8009390:	a201      	add	r2, pc, #4	@ (adr r2, 8009398 <UART_SetConfig+0x950>)
 8009392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009396:	bf00      	nop
 8009398:	08009423 	.word	0x08009423
 800939c:	0800942b 	.word	0x0800942b
 80093a0:	08009487 	.word	0x08009487
 80093a4:	08009487 	.word	0x08009487
 80093a8:	08009433 	.word	0x08009433
 80093ac:	08009487 	.word	0x08009487
 80093b0:	08009487 	.word	0x08009487
 80093b4:	08009487 	.word	0x08009487
 80093b8:	08009443 	.word	0x08009443
 80093bc:	08009487 	.word	0x08009487
 80093c0:	08009487 	.word	0x08009487
 80093c4:	08009487 	.word	0x08009487
 80093c8:	08009487 	.word	0x08009487
 80093cc:	08009487 	.word	0x08009487
 80093d0:	08009487 	.word	0x08009487
 80093d4:	08009487 	.word	0x08009487
 80093d8:	08009453 	.word	0x08009453
 80093dc:	08009487 	.word	0x08009487
 80093e0:	08009487 	.word	0x08009487
 80093e4:	08009487 	.word	0x08009487
 80093e8:	08009487 	.word	0x08009487
 80093ec:	08009487 	.word	0x08009487
 80093f0:	08009487 	.word	0x08009487
 80093f4:	08009487 	.word	0x08009487
 80093f8:	08009487 	.word	0x08009487
 80093fc:	08009487 	.word	0x08009487
 8009400:	08009487 	.word	0x08009487
 8009404:	08009487 	.word	0x08009487
 8009408:	08009487 	.word	0x08009487
 800940c:	08009487 	.word	0x08009487
 8009410:	08009487 	.word	0x08009487
 8009414:	08009487 	.word	0x08009487
 8009418:	08009479 	.word	0x08009479
 800941c:	2b40      	cmp	r3, #64	@ 0x40
 800941e:	d02e      	beq.n	800947e <UART_SetConfig+0xa36>
 8009420:	e031      	b.n	8009486 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009422:	f7fc f8cf 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 8009426:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009428:	e033      	b.n	8009492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800942a:	f7fc f8e1 	bl	80055f0 <HAL_RCC_GetPCLK2Freq>
 800942e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009430:	e02f      	b.n	8009492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009436:	4618      	mov	r0, r3
 8009438:	f7fd fb10 	bl	8006a5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800943c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009440:	e027      	b.n	8009492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009442:	f107 0318 	add.w	r3, r7, #24
 8009446:	4618      	mov	r0, r3
 8009448:	f7fd fc5c 	bl	8006d04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800944c:	69fb      	ldr	r3, [r7, #28]
 800944e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009450:	e01f      	b.n	8009492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009452:	4b2d      	ldr	r3, [pc, #180]	@ (8009508 <UART_SetConfig+0xac0>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f003 0320 	and.w	r3, r3, #32
 800945a:	2b00      	cmp	r3, #0
 800945c:	d009      	beq.n	8009472 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800945e:	4b2a      	ldr	r3, [pc, #168]	@ (8009508 <UART_SetConfig+0xac0>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	08db      	lsrs	r3, r3, #3
 8009464:	f003 0303 	and.w	r3, r3, #3
 8009468:	4a28      	ldr	r2, [pc, #160]	@ (800950c <UART_SetConfig+0xac4>)
 800946a:	fa22 f303 	lsr.w	r3, r2, r3
 800946e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009470:	e00f      	b.n	8009492 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009472:	4b26      	ldr	r3, [pc, #152]	@ (800950c <UART_SetConfig+0xac4>)
 8009474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009476:	e00c      	b.n	8009492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009478:	4b25      	ldr	r3, [pc, #148]	@ (8009510 <UART_SetConfig+0xac8>)
 800947a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800947c:	e009      	b.n	8009492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800947e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009484:	e005      	b.n	8009492 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009486:	2300      	movs	r3, #0
 8009488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800948a:	2301      	movs	r3, #1
 800948c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009490:	bf00      	nop
    }

    if (pclk != 0U)
 8009492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009494:	2b00      	cmp	r3, #0
 8009496:	d021      	beq.n	80094dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800949c:	4a1d      	ldr	r2, [pc, #116]	@ (8009514 <UART_SetConfig+0xacc>)
 800949e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094a2:	461a      	mov	r2, r3
 80094a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	085b      	lsrs	r3, r3, #1
 80094b0:	441a      	add	r2, r3
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ba:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094be:	2b0f      	cmp	r3, #15
 80094c0:	d909      	bls.n	80094d6 <UART_SetConfig+0xa8e>
 80094c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80094c8:	d205      	bcs.n	80094d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094cc:	b29a      	uxth	r2, r3
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	60da      	str	r2, [r3, #12]
 80094d4:	e002      	b.n	80094dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	2201      	movs	r2, #1
 80094e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	2200      	movs	r2, #0
 80094f0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	2200      	movs	r2, #0
 80094f6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80094f8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3748      	adds	r7, #72	@ 0x48
 8009500:	46bd      	mov	sp, r7
 8009502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009506:	bf00      	nop
 8009508:	58024400 	.word	0x58024400
 800950c:	03d09000 	.word	0x03d09000
 8009510:	003d0900 	.word	0x003d0900
 8009514:	0800aba0 	.word	0x0800aba0

08009518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009524:	f003 0308 	and.w	r3, r3, #8
 8009528:	2b00      	cmp	r3, #0
 800952a:	d00a      	beq.n	8009542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d00a      	beq.n	8009564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	430a      	orrs	r2, r1
 8009562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009568:	f003 0302 	and.w	r3, r3, #2
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00a      	beq.n	8009586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	430a      	orrs	r2, r1
 8009584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800958a:	f003 0304 	and.w	r3, r3, #4
 800958e:	2b00      	cmp	r3, #0
 8009590:	d00a      	beq.n	80095a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	685b      	ldr	r3, [r3, #4]
 8009598:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	430a      	orrs	r2, r1
 80095a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ac:	f003 0310 	and.w	r3, r3, #16
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d00a      	beq.n	80095ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	430a      	orrs	r2, r1
 80095c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ce:	f003 0320 	and.w	r3, r3, #32
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00a      	beq.n	80095ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	430a      	orrs	r2, r1
 80095ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d01a      	beq.n	800962e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	430a      	orrs	r2, r1
 800960c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009612:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009616:	d10a      	bne.n	800962e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	430a      	orrs	r2, r1
 800962c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009636:	2b00      	cmp	r3, #0
 8009638:	d00a      	beq.n	8009650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	430a      	orrs	r2, r1
 800964e:	605a      	str	r2, [r3, #4]
  }
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b098      	sub	sp, #96	@ 0x60
 8009660:	af02      	add	r7, sp, #8
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800966c:	f7f8 fd02 	bl	8002074 <HAL_GetTick>
 8009670:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f003 0308 	and.w	r3, r3, #8
 800967c:	2b08      	cmp	r3, #8
 800967e:	d12f      	bne.n	80096e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009680:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009688:	2200      	movs	r2, #0
 800968a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 f88e 	bl	80097b0 <UART_WaitOnFlagUntilTimeout>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d022      	beq.n	80096e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a2:	e853 3f00 	ldrex	r3, [r3]
 80096a6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	461a      	mov	r2, r3
 80096b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80096b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80096ba:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096bc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80096be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80096c0:	e841 2300 	strex	r3, r2, [r1]
 80096c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80096c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e6      	bne.n	800969a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2220      	movs	r2, #32
 80096d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2200      	movs	r2, #0
 80096d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096dc:	2303      	movs	r3, #3
 80096de:	e063      	b.n	80097a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 0304 	and.w	r3, r3, #4
 80096ea:	2b04      	cmp	r3, #4
 80096ec:	d149      	bne.n	8009782 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096ee:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096f2:	9300      	str	r3, [sp, #0]
 80096f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096f6:	2200      	movs	r2, #0
 80096f8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f857 	bl	80097b0 <UART_WaitOnFlagUntilTimeout>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d03c      	beq.n	8009782 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009710:	e853 3f00 	ldrex	r3, [r3]
 8009714:	623b      	str	r3, [r7, #32]
   return(result);
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800971c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	461a      	mov	r2, r3
 8009724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009726:	633b      	str	r3, [r7, #48]	@ 0x30
 8009728:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800972c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800972e:	e841 2300 	strex	r3, r2, [r1]
 8009732:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009736:	2b00      	cmp	r3, #0
 8009738:	d1e6      	bne.n	8009708 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3308      	adds	r3, #8
 8009740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	e853 3f00 	ldrex	r3, [r3]
 8009748:	60fb      	str	r3, [r7, #12]
   return(result);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	f023 0301 	bic.w	r3, r3, #1
 8009750:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	3308      	adds	r3, #8
 8009758:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800975a:	61fa      	str	r2, [r7, #28]
 800975c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800975e:	69b9      	ldr	r1, [r7, #24]
 8009760:	69fa      	ldr	r2, [r7, #28]
 8009762:	e841 2300 	strex	r3, r2, [r1]
 8009766:	617b      	str	r3, [r7, #20]
   return(result);
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1e5      	bne.n	800973a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2220      	movs	r2, #32
 8009772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e012      	b.n	80097a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2220      	movs	r2, #32
 8009786:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2220      	movs	r2, #32
 800978e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2200      	movs	r2, #0
 800979c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097a6:	2300      	movs	r3, #0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3758      	adds	r7, #88	@ 0x58
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	603b      	str	r3, [r7, #0]
 80097bc:	4613      	mov	r3, r2
 80097be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097c0:	e04f      	b.n	8009862 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097c8:	d04b      	beq.n	8009862 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80097ca:	f7f8 fc53 	bl	8002074 <HAL_GetTick>
 80097ce:	4602      	mov	r2, r0
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	69ba      	ldr	r2, [r7, #24]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d302      	bcc.n	80097e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d101      	bne.n	80097e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80097e0:	2303      	movs	r3, #3
 80097e2:	e04e      	b.n	8009882 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0304 	and.w	r3, r3, #4
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d037      	beq.n	8009862 <UART_WaitOnFlagUntilTimeout+0xb2>
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	2b80      	cmp	r3, #128	@ 0x80
 80097f6:	d034      	beq.n	8009862 <UART_WaitOnFlagUntilTimeout+0xb2>
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2b40      	cmp	r3, #64	@ 0x40
 80097fc:	d031      	beq.n	8009862 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	f003 0308 	and.w	r3, r3, #8
 8009808:	2b08      	cmp	r3, #8
 800980a:	d110      	bne.n	800982e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	2208      	movs	r2, #8
 8009812:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 f839 	bl	800988c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2208      	movs	r2, #8
 800981e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e029      	b.n	8009882 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	69db      	ldr	r3, [r3, #28]
 8009834:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800983c:	d111      	bne.n	8009862 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009846:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f000 f81f 	bl	800988c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2220      	movs	r2, #32
 8009852:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800985e:	2303      	movs	r3, #3
 8009860:	e00f      	b.n	8009882 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	69da      	ldr	r2, [r3, #28]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	4013      	ands	r3, r2
 800986c:	68ba      	ldr	r2, [r7, #8]
 800986e:	429a      	cmp	r2, r3
 8009870:	bf0c      	ite	eq
 8009872:	2301      	moveq	r3, #1
 8009874:	2300      	movne	r3, #0
 8009876:	b2db      	uxtb	r3, r3
 8009878:	461a      	mov	r2, r3
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	429a      	cmp	r2, r3
 800987e:	d0a0      	beq.n	80097c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
	...

0800988c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800988c:	b480      	push	{r7}
 800988e:	b095      	sub	sp, #84	@ 0x54
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800989c:	e853 3f00 	ldrex	r3, [r3]
 80098a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80098a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	461a      	mov	r2, r3
 80098b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80098b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80098b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098ba:	e841 2300 	strex	r3, r2, [r1]
 80098be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80098c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1e6      	bne.n	8009894 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3308      	adds	r3, #8
 80098cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ce:	6a3b      	ldr	r3, [r7, #32]
 80098d0:	e853 3f00 	ldrex	r3, [r3]
 80098d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80098d6:	69fa      	ldr	r2, [r7, #28]
 80098d8:	4b1e      	ldr	r3, [pc, #120]	@ (8009954 <UART_EndRxTransfer+0xc8>)
 80098da:	4013      	ands	r3, r2
 80098dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3308      	adds	r3, #8
 80098e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80098e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80098ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80098ee:	e841 2300 	strex	r3, r2, [r1]
 80098f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80098f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1e5      	bne.n	80098c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80098fe:	2b01      	cmp	r3, #1
 8009900:	d118      	bne.n	8009934 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	e853 3f00 	ldrex	r3, [r3]
 800990e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	f023 0310 	bic.w	r3, r3, #16
 8009916:	647b      	str	r3, [r7, #68]	@ 0x44
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009920:	61bb      	str	r3, [r7, #24]
 8009922:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009924:	6979      	ldr	r1, [r7, #20]
 8009926:	69ba      	ldr	r2, [r7, #24]
 8009928:	e841 2300 	strex	r3, r2, [r1]
 800992c:	613b      	str	r3, [r7, #16]
   return(result);
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d1e6      	bne.n	8009902 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2220      	movs	r2, #32
 8009938:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009948:	bf00      	nop
 800994a:	3754      	adds	r7, #84	@ 0x54
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr
 8009954:	effffffe 	.word	0xeffffffe

08009958 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009966:	2b01      	cmp	r3, #1
 8009968:	d101      	bne.n	800996e <HAL_UARTEx_DisableFifoMode+0x16>
 800996a:	2302      	movs	r3, #2
 800996c:	e027      	b.n	80099be <HAL_UARTEx_DisableFifoMode+0x66>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2201      	movs	r2, #1
 8009972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2224      	movs	r2, #36	@ 0x24
 800997a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f022 0201 	bic.w	r2, r2, #1
 8009994:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800999c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	68fa      	ldr	r2, [r7, #12]
 80099aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2220      	movs	r2, #32
 80099b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099bc:	2300      	movs	r3, #0
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80099da:	2b01      	cmp	r3, #1
 80099dc:	d101      	bne.n	80099e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80099de:	2302      	movs	r3, #2
 80099e0:	e02d      	b.n	8009a3e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2224      	movs	r2, #36	@ 0x24
 80099ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f022 0201 	bic.w	r2, r2, #1
 8009a08:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f850 	bl	8009ac4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2220      	movs	r2, #32
 8009a30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009a3c:	2300      	movs	r3, #0
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3710      	adds	r7, #16
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}

08009a46 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a46:	b580      	push	{r7, lr}
 8009a48:	b084      	sub	sp, #16
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d101      	bne.n	8009a5e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a5a:	2302      	movs	r3, #2
 8009a5c:	e02d      	b.n	8009aba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2201      	movs	r2, #1
 8009a62:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2224      	movs	r2, #36	@ 0x24
 8009a6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0201 	bic.w	r2, r2, #1
 8009a84:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	683a      	ldr	r2, [r7, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f812 	bl	8009ac4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68fa      	ldr	r2, [r7, #12]
 8009aa6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
	...

08009ac4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d108      	bne.n	8009ae6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ae4:	e031      	b.n	8009b4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ae6:	2310      	movs	r3, #16
 8009ae8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009aea:	2310      	movs	r3, #16
 8009aec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	0e5b      	lsrs	r3, r3, #25
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	f003 0307 	and.w	r3, r3, #7
 8009afc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	0f5b      	lsrs	r3, r3, #29
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	f003 0307 	and.w	r3, r3, #7
 8009b0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	7b3a      	ldrb	r2, [r7, #12]
 8009b12:	4911      	ldr	r1, [pc, #68]	@ (8009b58 <UARTEx_SetNbDataToProcess+0x94>)
 8009b14:	5c8a      	ldrb	r2, [r1, r2]
 8009b16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b1a:	7b3a      	ldrb	r2, [r7, #12]
 8009b1c:	490f      	ldr	r1, [pc, #60]	@ (8009b5c <UARTEx_SetNbDataToProcess+0x98>)
 8009b1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b20:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	7b7a      	ldrb	r2, [r7, #13]
 8009b30:	4909      	ldr	r1, [pc, #36]	@ (8009b58 <UARTEx_SetNbDataToProcess+0x94>)
 8009b32:	5c8a      	ldrb	r2, [r1, r2]
 8009b34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b38:	7b7a      	ldrb	r2, [r7, #13]
 8009b3a:	4908      	ldr	r1, [pc, #32]	@ (8009b5c <UARTEx_SetNbDataToProcess+0x98>)
 8009b3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b42:	b29a      	uxth	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009b4a:	bf00      	nop
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
 8009b56:	bf00      	nop
 8009b58:	0800abb8 	.word	0x0800abb8
 8009b5c:	0800abc0 	.word	0x0800abc0

08009b60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b60:	b084      	sub	sp, #16
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b084      	sub	sp, #16
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
 8009b6a:	f107 001c 	add.w	r0, r7, #28
 8009b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d121      	bne.n	8009bbe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68da      	ldr	r2, [r3, #12]
 8009b8a:	4b2c      	ldr	r3, [pc, #176]	@ (8009c3c <USB_CoreInit+0xdc>)
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009b9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d105      	bne.n	8009bb2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 faaa 	bl	800a10c <USB_CoreReset>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73fb      	strb	r3, [r7, #15]
 8009bbc:	e01b      	b.n	8009bf6 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	68db      	ldr	r3, [r3, #12]
 8009bc2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 fa9e 	bl	800a10c <USB_CoreReset>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009bd4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d106      	bne.n	8009bea <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009be0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	639a      	str	r2, [r3, #56]	@ 0x38
 8009be8:	e005      	b.n	8009bf6 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009bf6:	7fbb      	ldrb	r3, [r7, #30]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d116      	bne.n	8009c2a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c40 <USB_CoreInit+0xe0>)
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	f043 0206 	orr.w	r2, r3, #6
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f043 0220 	orr.w	r2, r3, #32
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c36:	b004      	add	sp, #16
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	ffbdffbf 	.word	0xffbdffbf
 8009c40:	03ee0000 	.word	0x03ee0000

08009c44 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	f023 0201 	bic.w	r2, r3, #1
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	370c      	adds	r7, #12
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c64:	4770      	bx	lr

08009c66 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b084      	sub	sp, #16
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	460b      	mov	r3, r1
 8009c70:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68db      	ldr	r3, [r3, #12]
 8009c7a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009c82:	78fb      	ldrb	r3, [r7, #3]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d115      	bne.n	8009cb4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009c94:	200a      	movs	r0, #10
 8009c96:	f7f8 f9f9 	bl	800208c <HAL_Delay>
      ms += 10U;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	330a      	adds	r3, #10
 8009c9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 fa25 	bl	800a0f0 <USB_GetMode>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b01      	cmp	r3, #1
 8009caa:	d01e      	beq.n	8009cea <USB_SetCurrentMode+0x84>
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2bc7      	cmp	r3, #199	@ 0xc7
 8009cb0:	d9f0      	bls.n	8009c94 <USB_SetCurrentMode+0x2e>
 8009cb2:	e01a      	b.n	8009cea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d115      	bne.n	8009ce6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009cc6:	200a      	movs	r0, #10
 8009cc8:	f7f8 f9e0 	bl	800208c <HAL_Delay>
      ms += 10U;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	330a      	adds	r3, #10
 8009cd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fa0c 	bl	800a0f0 <USB_GetMode>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d005      	beq.n	8009cea <USB_SetCurrentMode+0x84>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2bc7      	cmp	r3, #199	@ 0xc7
 8009ce2:	d9f0      	bls.n	8009cc6 <USB_SetCurrentMode+0x60>
 8009ce4:	e001      	b.n	8009cea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e005      	b.n	8009cf6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2bc8      	cmp	r3, #200	@ 0xc8
 8009cee:	d101      	bne.n	8009cf4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e000      	b.n	8009cf6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3710      	adds	r7, #16
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
	...

08009d00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d00:	b084      	sub	sp, #16
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b086      	sub	sp, #24
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
 8009d0a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009d12:	2300      	movs	r3, #0
 8009d14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	613b      	str	r3, [r7, #16]
 8009d1e:	e009      	b.n	8009d34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	3340      	adds	r3, #64	@ 0x40
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	3301      	adds	r3, #1
 8009d32:	613b      	str	r3, [r7, #16]
 8009d34:	693b      	ldr	r3, [r7, #16]
 8009d36:	2b0e      	cmp	r3, #14
 8009d38:	d9f2      	bls.n	8009d20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d3a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d11c      	bne.n	8009d7c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	68fa      	ldr	r2, [r7, #12]
 8009d4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d50:	f043 0302 	orr.w	r3, r3, #2
 8009d54:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d5a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	e005      	b.n	8009d88 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d80:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009d8e:	461a      	mov	r2, r3
 8009d90:	2300      	movs	r3, #0
 8009d92:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d94:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d10d      	bne.n	8009db8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009d9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d104      	bne.n	8009dae <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009da4:	2100      	movs	r1, #0
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f000 f968 	bl	800a07c <USB_SetDevSpeed>
 8009dac:	e008      	b.n	8009dc0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009dae:	2101      	movs	r1, #1
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f963 	bl	800a07c <USB_SetDevSpeed>
 8009db6:	e003      	b.n	8009dc0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009db8:	2103      	movs	r1, #3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f95e 	bl	800a07c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009dc0:	2110      	movs	r1, #16
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f8fa 	bl	8009fbc <USB_FlushTxFifo>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d001      	beq.n	8009dd2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f924 	bl	800a020 <USB_FlushRxFifo>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009dde:	2301      	movs	r3, #1
 8009de0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009de8:	461a      	mov	r2, r3
 8009dea:	2300      	movs	r3, #0
 8009dec:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009df4:	461a      	mov	r2, r3
 8009df6:	2300      	movs	r3, #0
 8009df8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e00:	461a      	mov	r2, r3
 8009e02:	2300      	movs	r3, #0
 8009e04:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e06:	2300      	movs	r3, #0
 8009e08:	613b      	str	r3, [r7, #16]
 8009e0a:	e043      	b.n	8009e94 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	015a      	lsls	r2, r3, #5
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	4413      	add	r3, r2
 8009e14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e22:	d118      	bne.n	8009e56 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d10a      	bne.n	8009e40 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	015a      	lsls	r2, r3, #5
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	4413      	add	r3, r2
 8009e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e36:	461a      	mov	r2, r3
 8009e38:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	e013      	b.n	8009e68 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009e52:	6013      	str	r3, [r2, #0]
 8009e54:	e008      	b.n	8009e68 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009e56:	693b      	ldr	r3, [r7, #16]
 8009e58:	015a      	lsls	r2, r3, #5
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e62:	461a      	mov	r2, r3
 8009e64:	2300      	movs	r3, #0
 8009e66:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e74:	461a      	mov	r2, r3
 8009e76:	2300      	movs	r3, #0
 8009e78:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	015a      	lsls	r2, r3, #5
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	4413      	add	r3, r2
 8009e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e86:	461a      	mov	r2, r3
 8009e88:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009e8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	3301      	adds	r3, #1
 8009e92:	613b      	str	r3, [r7, #16]
 8009e94:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009e98:	461a      	mov	r2, r3
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d3b5      	bcc.n	8009e0c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	613b      	str	r3, [r7, #16]
 8009ea4:	e043      	b.n	8009f2e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	015a      	lsls	r2, r3, #5
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	4413      	add	r3, r2
 8009eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ebc:	d118      	bne.n	8009ef0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10a      	bne.n	8009eda <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	015a      	lsls	r2, r3, #5
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4413      	add	r3, r2
 8009ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009ed6:	6013      	str	r3, [r2, #0]
 8009ed8:	e013      	b.n	8009f02 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	015a      	lsls	r2, r3, #5
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009eec:	6013      	str	r3, [r2, #0]
 8009eee:	e008      	b.n	8009f02 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009efc:	461a      	mov	r2, r3
 8009efe:	2300      	movs	r3, #0
 8009f00:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	015a      	lsls	r2, r3, #5
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	4413      	add	r3, r2
 8009f0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f0e:	461a      	mov	r2, r3
 8009f10:	2300      	movs	r3, #0
 8009f12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f20:	461a      	mov	r2, r3
 8009f22:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009f26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	613b      	str	r3, [r7, #16]
 8009f2e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009f32:	461a      	mov	r2, r3
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d3b5      	bcc.n	8009ea6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009f4c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009f5a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009f5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d105      	bne.n	8009f70 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	f043 0210 	orr.w	r2, r3, #16
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	699a      	ldr	r2, [r3, #24]
 8009f74:	4b0f      	ldr	r3, [pc, #60]	@ (8009fb4 <USB_DevInit+0x2b4>)
 8009f76:	4313      	orrs	r3, r2
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009f7c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d005      	beq.n	8009f90 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	699b      	ldr	r3, [r3, #24]
 8009f88:	f043 0208 	orr.w	r2, r3, #8
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009f90:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d105      	bne.n	8009fa4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	699a      	ldr	r2, [r3, #24]
 8009f9c:	4b06      	ldr	r3, [pc, #24]	@ (8009fb8 <USB_DevInit+0x2b8>)
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3718      	adds	r7, #24
 8009faa:	46bd      	mov	sp, r7
 8009fac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009fb0:	b004      	add	sp, #16
 8009fb2:	4770      	bx	lr
 8009fb4:	803c3800 	.word	0x803c3800
 8009fb8:	40000004 	.word	0x40000004

08009fbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3301      	adds	r3, #1
 8009fce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009fd6:	d901      	bls.n	8009fdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009fd8:	2303      	movs	r3, #3
 8009fda:	e01b      	b.n	800a014 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	691b      	ldr	r3, [r3, #16]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	daf2      	bge.n	8009fca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	019b      	lsls	r3, r3, #6
 8009fec:	f043 0220 	orr.w	r2, r3, #32
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a000:	d901      	bls.n	800a006 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e006      	b.n	800a014 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	f003 0320 	and.w	r3, r3, #32
 800a00e:	2b20      	cmp	r3, #32
 800a010:	d0f0      	beq.n	8009ff4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3714      	adds	r7, #20
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr

0800a020 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a028:	2300      	movs	r3, #0
 800a02a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	3301      	adds	r3, #1
 800a030:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a038:	d901      	bls.n	800a03e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a03a:	2303      	movs	r3, #3
 800a03c:	e018      	b.n	800a070 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	2b00      	cmp	r3, #0
 800a044:	daf2      	bge.n	800a02c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a046:	2300      	movs	r3, #0
 800a048:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2210      	movs	r2, #16
 800a04e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	3301      	adds	r3, #1
 800a054:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a05c:	d901      	bls.n	800a062 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a05e:	2303      	movs	r3, #3
 800a060:	e006      	b.n	800a070 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	f003 0310 	and.w	r3, r3, #16
 800a06a:	2b10      	cmp	r3, #16
 800a06c:	d0f0      	beq.n	800a050 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	78fb      	ldrb	r3, [r7, #3]
 800a096:	68f9      	ldr	r1, [r7, #12]
 800a098:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a09c:	4313      	orrs	r3, r2
 800a09e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3714      	adds	r7, #20
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr

0800a0ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0ae:	b480      	push	{r7}
 800a0b0:	b085      	sub	sp, #20
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a0c8:	f023 0303 	bic.w	r3, r3, #3
 800a0cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a0dc:	f043 0302 	orr.w	r3, r3, #2
 800a0e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3714      	adds	r7, #20
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	695b      	ldr	r3, [r3, #20]
 800a0fc:	f003 0301 	and.w	r3, r3, #1
}
 800a100:	4618      	mov	r0, r3
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a114:	2300      	movs	r3, #0
 800a116:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	3301      	adds	r3, #1
 800a11c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a124:	d901      	bls.n	800a12a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a126:	2303      	movs	r3, #3
 800a128:	e01b      	b.n	800a162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	daf2      	bge.n	800a118 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a132:	2300      	movs	r3, #0
 800a134:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f043 0201 	orr.w	r2, r3, #1
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	3301      	adds	r3, #1
 800a146:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a14e:	d901      	bls.n	800a154 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a150:	2303      	movs	r3, #3
 800a152:	e006      	b.n	800a162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	f003 0301 	and.w	r3, r3, #1
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d0f0      	beq.n	800a142 <USB_CoreReset+0x36>

  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3714      	adds	r7, #20
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
	...

0800a170 <siprintf>:
 800a170:	b40e      	push	{r1, r2, r3}
 800a172:	b510      	push	{r4, lr}
 800a174:	b09d      	sub	sp, #116	@ 0x74
 800a176:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a178:	9002      	str	r0, [sp, #8]
 800a17a:	9006      	str	r0, [sp, #24]
 800a17c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a180:	480a      	ldr	r0, [pc, #40]	@ (800a1ac <siprintf+0x3c>)
 800a182:	9107      	str	r1, [sp, #28]
 800a184:	9104      	str	r1, [sp, #16]
 800a186:	490a      	ldr	r1, [pc, #40]	@ (800a1b0 <siprintf+0x40>)
 800a188:	f853 2b04 	ldr.w	r2, [r3], #4
 800a18c:	9105      	str	r1, [sp, #20]
 800a18e:	2400      	movs	r4, #0
 800a190:	a902      	add	r1, sp, #8
 800a192:	6800      	ldr	r0, [r0, #0]
 800a194:	9301      	str	r3, [sp, #4]
 800a196:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a198:	f000 f994 	bl	800a4c4 <_svfiprintf_r>
 800a19c:	9b02      	ldr	r3, [sp, #8]
 800a19e:	701c      	strb	r4, [r3, #0]
 800a1a0:	b01d      	add	sp, #116	@ 0x74
 800a1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1a6:	b003      	add	sp, #12
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	24000014 	.word	0x24000014
 800a1b0:	ffff0208 	.word	0xffff0208

0800a1b4 <memset>:
 800a1b4:	4402      	add	r2, r0
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d100      	bne.n	800a1be <memset+0xa>
 800a1bc:	4770      	bx	lr
 800a1be:	f803 1b01 	strb.w	r1, [r3], #1
 800a1c2:	e7f9      	b.n	800a1b8 <memset+0x4>

0800a1c4 <__errno>:
 800a1c4:	4b01      	ldr	r3, [pc, #4]	@ (800a1cc <__errno+0x8>)
 800a1c6:	6818      	ldr	r0, [r3, #0]
 800a1c8:	4770      	bx	lr
 800a1ca:	bf00      	nop
 800a1cc:	24000014 	.word	0x24000014

0800a1d0 <__libc_init_array>:
 800a1d0:	b570      	push	{r4, r5, r6, lr}
 800a1d2:	4d0d      	ldr	r5, [pc, #52]	@ (800a208 <__libc_init_array+0x38>)
 800a1d4:	4c0d      	ldr	r4, [pc, #52]	@ (800a20c <__libc_init_array+0x3c>)
 800a1d6:	1b64      	subs	r4, r4, r5
 800a1d8:	10a4      	asrs	r4, r4, #2
 800a1da:	2600      	movs	r6, #0
 800a1dc:	42a6      	cmp	r6, r4
 800a1de:	d109      	bne.n	800a1f4 <__libc_init_array+0x24>
 800a1e0:	4d0b      	ldr	r5, [pc, #44]	@ (800a210 <__libc_init_array+0x40>)
 800a1e2:	4c0c      	ldr	r4, [pc, #48]	@ (800a214 <__libc_init_array+0x44>)
 800a1e4:	f000 fc64 	bl	800aab0 <_init>
 800a1e8:	1b64      	subs	r4, r4, r5
 800a1ea:	10a4      	asrs	r4, r4, #2
 800a1ec:	2600      	movs	r6, #0
 800a1ee:	42a6      	cmp	r6, r4
 800a1f0:	d105      	bne.n	800a1fe <__libc_init_array+0x2e>
 800a1f2:	bd70      	pop	{r4, r5, r6, pc}
 800a1f4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1f8:	4798      	blx	r3
 800a1fa:	3601      	adds	r6, #1
 800a1fc:	e7ee      	b.n	800a1dc <__libc_init_array+0xc>
 800a1fe:	f855 3b04 	ldr.w	r3, [r5], #4
 800a202:	4798      	blx	r3
 800a204:	3601      	adds	r6, #1
 800a206:	e7f2      	b.n	800a1ee <__libc_init_array+0x1e>
 800a208:	0800ac04 	.word	0x0800ac04
 800a20c:	0800ac04 	.word	0x0800ac04
 800a210:	0800ac04 	.word	0x0800ac04
 800a214:	0800ac08 	.word	0x0800ac08

0800a218 <__retarget_lock_acquire_recursive>:
 800a218:	4770      	bx	lr

0800a21a <__retarget_lock_release_recursive>:
 800a21a:	4770      	bx	lr

0800a21c <_free_r>:
 800a21c:	b538      	push	{r3, r4, r5, lr}
 800a21e:	4605      	mov	r5, r0
 800a220:	2900      	cmp	r1, #0
 800a222:	d041      	beq.n	800a2a8 <_free_r+0x8c>
 800a224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a228:	1f0c      	subs	r4, r1, #4
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	bfb8      	it	lt
 800a22e:	18e4      	addlt	r4, r4, r3
 800a230:	f000 f8e0 	bl	800a3f4 <__malloc_lock>
 800a234:	4a1d      	ldr	r2, [pc, #116]	@ (800a2ac <_free_r+0x90>)
 800a236:	6813      	ldr	r3, [r2, #0]
 800a238:	b933      	cbnz	r3, 800a248 <_free_r+0x2c>
 800a23a:	6063      	str	r3, [r4, #4]
 800a23c:	6014      	str	r4, [r2, #0]
 800a23e:	4628      	mov	r0, r5
 800a240:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a244:	f000 b8dc 	b.w	800a400 <__malloc_unlock>
 800a248:	42a3      	cmp	r3, r4
 800a24a:	d908      	bls.n	800a25e <_free_r+0x42>
 800a24c:	6820      	ldr	r0, [r4, #0]
 800a24e:	1821      	adds	r1, r4, r0
 800a250:	428b      	cmp	r3, r1
 800a252:	bf01      	itttt	eq
 800a254:	6819      	ldreq	r1, [r3, #0]
 800a256:	685b      	ldreq	r3, [r3, #4]
 800a258:	1809      	addeq	r1, r1, r0
 800a25a:	6021      	streq	r1, [r4, #0]
 800a25c:	e7ed      	b.n	800a23a <_free_r+0x1e>
 800a25e:	461a      	mov	r2, r3
 800a260:	685b      	ldr	r3, [r3, #4]
 800a262:	b10b      	cbz	r3, 800a268 <_free_r+0x4c>
 800a264:	42a3      	cmp	r3, r4
 800a266:	d9fa      	bls.n	800a25e <_free_r+0x42>
 800a268:	6811      	ldr	r1, [r2, #0]
 800a26a:	1850      	adds	r0, r2, r1
 800a26c:	42a0      	cmp	r0, r4
 800a26e:	d10b      	bne.n	800a288 <_free_r+0x6c>
 800a270:	6820      	ldr	r0, [r4, #0]
 800a272:	4401      	add	r1, r0
 800a274:	1850      	adds	r0, r2, r1
 800a276:	4283      	cmp	r3, r0
 800a278:	6011      	str	r1, [r2, #0]
 800a27a:	d1e0      	bne.n	800a23e <_free_r+0x22>
 800a27c:	6818      	ldr	r0, [r3, #0]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	6053      	str	r3, [r2, #4]
 800a282:	4408      	add	r0, r1
 800a284:	6010      	str	r0, [r2, #0]
 800a286:	e7da      	b.n	800a23e <_free_r+0x22>
 800a288:	d902      	bls.n	800a290 <_free_r+0x74>
 800a28a:	230c      	movs	r3, #12
 800a28c:	602b      	str	r3, [r5, #0]
 800a28e:	e7d6      	b.n	800a23e <_free_r+0x22>
 800a290:	6820      	ldr	r0, [r4, #0]
 800a292:	1821      	adds	r1, r4, r0
 800a294:	428b      	cmp	r3, r1
 800a296:	bf04      	itt	eq
 800a298:	6819      	ldreq	r1, [r3, #0]
 800a29a:	685b      	ldreq	r3, [r3, #4]
 800a29c:	6063      	str	r3, [r4, #4]
 800a29e:	bf04      	itt	eq
 800a2a0:	1809      	addeq	r1, r1, r0
 800a2a2:	6021      	streq	r1, [r4, #0]
 800a2a4:	6054      	str	r4, [r2, #4]
 800a2a6:	e7ca      	b.n	800a23e <_free_r+0x22>
 800a2a8:	bd38      	pop	{r3, r4, r5, pc}
 800a2aa:	bf00      	nop
 800a2ac:	24000abc 	.word	0x24000abc

0800a2b0 <sbrk_aligned>:
 800a2b0:	b570      	push	{r4, r5, r6, lr}
 800a2b2:	4e0f      	ldr	r6, [pc, #60]	@ (800a2f0 <sbrk_aligned+0x40>)
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	6831      	ldr	r1, [r6, #0]
 800a2b8:	4605      	mov	r5, r0
 800a2ba:	b911      	cbnz	r1, 800a2c2 <sbrk_aligned+0x12>
 800a2bc:	f000 fba4 	bl	800aa08 <_sbrk_r>
 800a2c0:	6030      	str	r0, [r6, #0]
 800a2c2:	4621      	mov	r1, r4
 800a2c4:	4628      	mov	r0, r5
 800a2c6:	f000 fb9f 	bl	800aa08 <_sbrk_r>
 800a2ca:	1c43      	adds	r3, r0, #1
 800a2cc:	d103      	bne.n	800a2d6 <sbrk_aligned+0x26>
 800a2ce:	f04f 34ff 	mov.w	r4, #4294967295
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	bd70      	pop	{r4, r5, r6, pc}
 800a2d6:	1cc4      	adds	r4, r0, #3
 800a2d8:	f024 0403 	bic.w	r4, r4, #3
 800a2dc:	42a0      	cmp	r0, r4
 800a2de:	d0f8      	beq.n	800a2d2 <sbrk_aligned+0x22>
 800a2e0:	1a21      	subs	r1, r4, r0
 800a2e2:	4628      	mov	r0, r5
 800a2e4:	f000 fb90 	bl	800aa08 <_sbrk_r>
 800a2e8:	3001      	adds	r0, #1
 800a2ea:	d1f2      	bne.n	800a2d2 <sbrk_aligned+0x22>
 800a2ec:	e7ef      	b.n	800a2ce <sbrk_aligned+0x1e>
 800a2ee:	bf00      	nop
 800a2f0:	24000ab8 	.word	0x24000ab8

0800a2f4 <_malloc_r>:
 800a2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f8:	1ccd      	adds	r5, r1, #3
 800a2fa:	f025 0503 	bic.w	r5, r5, #3
 800a2fe:	3508      	adds	r5, #8
 800a300:	2d0c      	cmp	r5, #12
 800a302:	bf38      	it	cc
 800a304:	250c      	movcc	r5, #12
 800a306:	2d00      	cmp	r5, #0
 800a308:	4606      	mov	r6, r0
 800a30a:	db01      	blt.n	800a310 <_malloc_r+0x1c>
 800a30c:	42a9      	cmp	r1, r5
 800a30e:	d904      	bls.n	800a31a <_malloc_r+0x26>
 800a310:	230c      	movs	r3, #12
 800a312:	6033      	str	r3, [r6, #0]
 800a314:	2000      	movs	r0, #0
 800a316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a31a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3f0 <_malloc_r+0xfc>
 800a31e:	f000 f869 	bl	800a3f4 <__malloc_lock>
 800a322:	f8d8 3000 	ldr.w	r3, [r8]
 800a326:	461c      	mov	r4, r3
 800a328:	bb44      	cbnz	r4, 800a37c <_malloc_r+0x88>
 800a32a:	4629      	mov	r1, r5
 800a32c:	4630      	mov	r0, r6
 800a32e:	f7ff ffbf 	bl	800a2b0 <sbrk_aligned>
 800a332:	1c43      	adds	r3, r0, #1
 800a334:	4604      	mov	r4, r0
 800a336:	d158      	bne.n	800a3ea <_malloc_r+0xf6>
 800a338:	f8d8 4000 	ldr.w	r4, [r8]
 800a33c:	4627      	mov	r7, r4
 800a33e:	2f00      	cmp	r7, #0
 800a340:	d143      	bne.n	800a3ca <_malloc_r+0xd6>
 800a342:	2c00      	cmp	r4, #0
 800a344:	d04b      	beq.n	800a3de <_malloc_r+0xea>
 800a346:	6823      	ldr	r3, [r4, #0]
 800a348:	4639      	mov	r1, r7
 800a34a:	4630      	mov	r0, r6
 800a34c:	eb04 0903 	add.w	r9, r4, r3
 800a350:	f000 fb5a 	bl	800aa08 <_sbrk_r>
 800a354:	4581      	cmp	r9, r0
 800a356:	d142      	bne.n	800a3de <_malloc_r+0xea>
 800a358:	6821      	ldr	r1, [r4, #0]
 800a35a:	1a6d      	subs	r5, r5, r1
 800a35c:	4629      	mov	r1, r5
 800a35e:	4630      	mov	r0, r6
 800a360:	f7ff ffa6 	bl	800a2b0 <sbrk_aligned>
 800a364:	3001      	adds	r0, #1
 800a366:	d03a      	beq.n	800a3de <_malloc_r+0xea>
 800a368:	6823      	ldr	r3, [r4, #0]
 800a36a:	442b      	add	r3, r5
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	f8d8 3000 	ldr.w	r3, [r8]
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	bb62      	cbnz	r2, 800a3d0 <_malloc_r+0xdc>
 800a376:	f8c8 7000 	str.w	r7, [r8]
 800a37a:	e00f      	b.n	800a39c <_malloc_r+0xa8>
 800a37c:	6822      	ldr	r2, [r4, #0]
 800a37e:	1b52      	subs	r2, r2, r5
 800a380:	d420      	bmi.n	800a3c4 <_malloc_r+0xd0>
 800a382:	2a0b      	cmp	r2, #11
 800a384:	d917      	bls.n	800a3b6 <_malloc_r+0xc2>
 800a386:	1961      	adds	r1, r4, r5
 800a388:	42a3      	cmp	r3, r4
 800a38a:	6025      	str	r5, [r4, #0]
 800a38c:	bf18      	it	ne
 800a38e:	6059      	strne	r1, [r3, #4]
 800a390:	6863      	ldr	r3, [r4, #4]
 800a392:	bf08      	it	eq
 800a394:	f8c8 1000 	streq.w	r1, [r8]
 800a398:	5162      	str	r2, [r4, r5]
 800a39a:	604b      	str	r3, [r1, #4]
 800a39c:	4630      	mov	r0, r6
 800a39e:	f000 f82f 	bl	800a400 <__malloc_unlock>
 800a3a2:	f104 000b 	add.w	r0, r4, #11
 800a3a6:	1d23      	adds	r3, r4, #4
 800a3a8:	f020 0007 	bic.w	r0, r0, #7
 800a3ac:	1ac2      	subs	r2, r0, r3
 800a3ae:	bf1c      	itt	ne
 800a3b0:	1a1b      	subne	r3, r3, r0
 800a3b2:	50a3      	strne	r3, [r4, r2]
 800a3b4:	e7af      	b.n	800a316 <_malloc_r+0x22>
 800a3b6:	6862      	ldr	r2, [r4, #4]
 800a3b8:	42a3      	cmp	r3, r4
 800a3ba:	bf0c      	ite	eq
 800a3bc:	f8c8 2000 	streq.w	r2, [r8]
 800a3c0:	605a      	strne	r2, [r3, #4]
 800a3c2:	e7eb      	b.n	800a39c <_malloc_r+0xa8>
 800a3c4:	4623      	mov	r3, r4
 800a3c6:	6864      	ldr	r4, [r4, #4]
 800a3c8:	e7ae      	b.n	800a328 <_malloc_r+0x34>
 800a3ca:	463c      	mov	r4, r7
 800a3cc:	687f      	ldr	r7, [r7, #4]
 800a3ce:	e7b6      	b.n	800a33e <_malloc_r+0x4a>
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	42a3      	cmp	r3, r4
 800a3d6:	d1fb      	bne.n	800a3d0 <_malloc_r+0xdc>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	6053      	str	r3, [r2, #4]
 800a3dc:	e7de      	b.n	800a39c <_malloc_r+0xa8>
 800a3de:	230c      	movs	r3, #12
 800a3e0:	6033      	str	r3, [r6, #0]
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f000 f80c 	bl	800a400 <__malloc_unlock>
 800a3e8:	e794      	b.n	800a314 <_malloc_r+0x20>
 800a3ea:	6005      	str	r5, [r0, #0]
 800a3ec:	e7d6      	b.n	800a39c <_malloc_r+0xa8>
 800a3ee:	bf00      	nop
 800a3f0:	24000abc 	.word	0x24000abc

0800a3f4 <__malloc_lock>:
 800a3f4:	4801      	ldr	r0, [pc, #4]	@ (800a3fc <__malloc_lock+0x8>)
 800a3f6:	f7ff bf0f 	b.w	800a218 <__retarget_lock_acquire_recursive>
 800a3fa:	bf00      	nop
 800a3fc:	24000ab4 	.word	0x24000ab4

0800a400 <__malloc_unlock>:
 800a400:	4801      	ldr	r0, [pc, #4]	@ (800a408 <__malloc_unlock+0x8>)
 800a402:	f7ff bf0a 	b.w	800a21a <__retarget_lock_release_recursive>
 800a406:	bf00      	nop
 800a408:	24000ab4 	.word	0x24000ab4

0800a40c <__ssputs_r>:
 800a40c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a410:	688e      	ldr	r6, [r1, #8]
 800a412:	461f      	mov	r7, r3
 800a414:	42be      	cmp	r6, r7
 800a416:	680b      	ldr	r3, [r1, #0]
 800a418:	4682      	mov	sl, r0
 800a41a:	460c      	mov	r4, r1
 800a41c:	4690      	mov	r8, r2
 800a41e:	d82d      	bhi.n	800a47c <__ssputs_r+0x70>
 800a420:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a424:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a428:	d026      	beq.n	800a478 <__ssputs_r+0x6c>
 800a42a:	6965      	ldr	r5, [r4, #20]
 800a42c:	6909      	ldr	r1, [r1, #16]
 800a42e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a432:	eba3 0901 	sub.w	r9, r3, r1
 800a436:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a43a:	1c7b      	adds	r3, r7, #1
 800a43c:	444b      	add	r3, r9
 800a43e:	106d      	asrs	r5, r5, #1
 800a440:	429d      	cmp	r5, r3
 800a442:	bf38      	it	cc
 800a444:	461d      	movcc	r5, r3
 800a446:	0553      	lsls	r3, r2, #21
 800a448:	d527      	bpl.n	800a49a <__ssputs_r+0x8e>
 800a44a:	4629      	mov	r1, r5
 800a44c:	f7ff ff52 	bl	800a2f4 <_malloc_r>
 800a450:	4606      	mov	r6, r0
 800a452:	b360      	cbz	r0, 800a4ae <__ssputs_r+0xa2>
 800a454:	6921      	ldr	r1, [r4, #16]
 800a456:	464a      	mov	r2, r9
 800a458:	f000 fae6 	bl	800aa28 <memcpy>
 800a45c:	89a3      	ldrh	r3, [r4, #12]
 800a45e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a466:	81a3      	strh	r3, [r4, #12]
 800a468:	6126      	str	r6, [r4, #16]
 800a46a:	6165      	str	r5, [r4, #20]
 800a46c:	444e      	add	r6, r9
 800a46e:	eba5 0509 	sub.w	r5, r5, r9
 800a472:	6026      	str	r6, [r4, #0]
 800a474:	60a5      	str	r5, [r4, #8]
 800a476:	463e      	mov	r6, r7
 800a478:	42be      	cmp	r6, r7
 800a47a:	d900      	bls.n	800a47e <__ssputs_r+0x72>
 800a47c:	463e      	mov	r6, r7
 800a47e:	6820      	ldr	r0, [r4, #0]
 800a480:	4632      	mov	r2, r6
 800a482:	4641      	mov	r1, r8
 800a484:	f000 faa6 	bl	800a9d4 <memmove>
 800a488:	68a3      	ldr	r3, [r4, #8]
 800a48a:	1b9b      	subs	r3, r3, r6
 800a48c:	60a3      	str	r3, [r4, #8]
 800a48e:	6823      	ldr	r3, [r4, #0]
 800a490:	4433      	add	r3, r6
 800a492:	6023      	str	r3, [r4, #0]
 800a494:	2000      	movs	r0, #0
 800a496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a49a:	462a      	mov	r2, r5
 800a49c:	f000 fad2 	bl	800aa44 <_realloc_r>
 800a4a0:	4606      	mov	r6, r0
 800a4a2:	2800      	cmp	r0, #0
 800a4a4:	d1e0      	bne.n	800a468 <__ssputs_r+0x5c>
 800a4a6:	6921      	ldr	r1, [r4, #16]
 800a4a8:	4650      	mov	r0, sl
 800a4aa:	f7ff feb7 	bl	800a21c <_free_r>
 800a4ae:	230c      	movs	r3, #12
 800a4b0:	f8ca 3000 	str.w	r3, [sl]
 800a4b4:	89a3      	ldrh	r3, [r4, #12]
 800a4b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4ba:	81a3      	strh	r3, [r4, #12]
 800a4bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a4c0:	e7e9      	b.n	800a496 <__ssputs_r+0x8a>
	...

0800a4c4 <_svfiprintf_r>:
 800a4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c8:	4698      	mov	r8, r3
 800a4ca:	898b      	ldrh	r3, [r1, #12]
 800a4cc:	061b      	lsls	r3, r3, #24
 800a4ce:	b09d      	sub	sp, #116	@ 0x74
 800a4d0:	4607      	mov	r7, r0
 800a4d2:	460d      	mov	r5, r1
 800a4d4:	4614      	mov	r4, r2
 800a4d6:	d510      	bpl.n	800a4fa <_svfiprintf_r+0x36>
 800a4d8:	690b      	ldr	r3, [r1, #16]
 800a4da:	b973      	cbnz	r3, 800a4fa <_svfiprintf_r+0x36>
 800a4dc:	2140      	movs	r1, #64	@ 0x40
 800a4de:	f7ff ff09 	bl	800a2f4 <_malloc_r>
 800a4e2:	6028      	str	r0, [r5, #0]
 800a4e4:	6128      	str	r0, [r5, #16]
 800a4e6:	b930      	cbnz	r0, 800a4f6 <_svfiprintf_r+0x32>
 800a4e8:	230c      	movs	r3, #12
 800a4ea:	603b      	str	r3, [r7, #0]
 800a4ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f0:	b01d      	add	sp, #116	@ 0x74
 800a4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4f6:	2340      	movs	r3, #64	@ 0x40
 800a4f8:	616b      	str	r3, [r5, #20]
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4fe:	2320      	movs	r3, #32
 800a500:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a504:	f8cd 800c 	str.w	r8, [sp, #12]
 800a508:	2330      	movs	r3, #48	@ 0x30
 800a50a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a6a8 <_svfiprintf_r+0x1e4>
 800a50e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a512:	f04f 0901 	mov.w	r9, #1
 800a516:	4623      	mov	r3, r4
 800a518:	469a      	mov	sl, r3
 800a51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a51e:	b10a      	cbz	r2, 800a524 <_svfiprintf_r+0x60>
 800a520:	2a25      	cmp	r2, #37	@ 0x25
 800a522:	d1f9      	bne.n	800a518 <_svfiprintf_r+0x54>
 800a524:	ebba 0b04 	subs.w	fp, sl, r4
 800a528:	d00b      	beq.n	800a542 <_svfiprintf_r+0x7e>
 800a52a:	465b      	mov	r3, fp
 800a52c:	4622      	mov	r2, r4
 800a52e:	4629      	mov	r1, r5
 800a530:	4638      	mov	r0, r7
 800a532:	f7ff ff6b 	bl	800a40c <__ssputs_r>
 800a536:	3001      	adds	r0, #1
 800a538:	f000 80a7 	beq.w	800a68a <_svfiprintf_r+0x1c6>
 800a53c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a53e:	445a      	add	r2, fp
 800a540:	9209      	str	r2, [sp, #36]	@ 0x24
 800a542:	f89a 3000 	ldrb.w	r3, [sl]
 800a546:	2b00      	cmp	r3, #0
 800a548:	f000 809f 	beq.w	800a68a <_svfiprintf_r+0x1c6>
 800a54c:	2300      	movs	r3, #0
 800a54e:	f04f 32ff 	mov.w	r2, #4294967295
 800a552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a556:	f10a 0a01 	add.w	sl, sl, #1
 800a55a:	9304      	str	r3, [sp, #16]
 800a55c:	9307      	str	r3, [sp, #28]
 800a55e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a562:	931a      	str	r3, [sp, #104]	@ 0x68
 800a564:	4654      	mov	r4, sl
 800a566:	2205      	movs	r2, #5
 800a568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a56c:	484e      	ldr	r0, [pc, #312]	@ (800a6a8 <_svfiprintf_r+0x1e4>)
 800a56e:	f7f5 febf 	bl	80002f0 <memchr>
 800a572:	9a04      	ldr	r2, [sp, #16]
 800a574:	b9d8      	cbnz	r0, 800a5ae <_svfiprintf_r+0xea>
 800a576:	06d0      	lsls	r0, r2, #27
 800a578:	bf44      	itt	mi
 800a57a:	2320      	movmi	r3, #32
 800a57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a580:	0711      	lsls	r1, r2, #28
 800a582:	bf44      	itt	mi
 800a584:	232b      	movmi	r3, #43	@ 0x2b
 800a586:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a58a:	f89a 3000 	ldrb.w	r3, [sl]
 800a58e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a590:	d015      	beq.n	800a5be <_svfiprintf_r+0xfa>
 800a592:	9a07      	ldr	r2, [sp, #28]
 800a594:	4654      	mov	r4, sl
 800a596:	2000      	movs	r0, #0
 800a598:	f04f 0c0a 	mov.w	ip, #10
 800a59c:	4621      	mov	r1, r4
 800a59e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5a2:	3b30      	subs	r3, #48	@ 0x30
 800a5a4:	2b09      	cmp	r3, #9
 800a5a6:	d94b      	bls.n	800a640 <_svfiprintf_r+0x17c>
 800a5a8:	b1b0      	cbz	r0, 800a5d8 <_svfiprintf_r+0x114>
 800a5aa:	9207      	str	r2, [sp, #28]
 800a5ac:	e014      	b.n	800a5d8 <_svfiprintf_r+0x114>
 800a5ae:	eba0 0308 	sub.w	r3, r0, r8
 800a5b2:	fa09 f303 	lsl.w	r3, r9, r3
 800a5b6:	4313      	orrs	r3, r2
 800a5b8:	9304      	str	r3, [sp, #16]
 800a5ba:	46a2      	mov	sl, r4
 800a5bc:	e7d2      	b.n	800a564 <_svfiprintf_r+0xa0>
 800a5be:	9b03      	ldr	r3, [sp, #12]
 800a5c0:	1d19      	adds	r1, r3, #4
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	9103      	str	r1, [sp, #12]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	bfbb      	ittet	lt
 800a5ca:	425b      	neglt	r3, r3
 800a5cc:	f042 0202 	orrlt.w	r2, r2, #2
 800a5d0:	9307      	strge	r3, [sp, #28]
 800a5d2:	9307      	strlt	r3, [sp, #28]
 800a5d4:	bfb8      	it	lt
 800a5d6:	9204      	strlt	r2, [sp, #16]
 800a5d8:	7823      	ldrb	r3, [r4, #0]
 800a5da:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5dc:	d10a      	bne.n	800a5f4 <_svfiprintf_r+0x130>
 800a5de:	7863      	ldrb	r3, [r4, #1]
 800a5e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5e2:	d132      	bne.n	800a64a <_svfiprintf_r+0x186>
 800a5e4:	9b03      	ldr	r3, [sp, #12]
 800a5e6:	1d1a      	adds	r2, r3, #4
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	9203      	str	r2, [sp, #12]
 800a5ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a5f0:	3402      	adds	r4, #2
 800a5f2:	9305      	str	r3, [sp, #20]
 800a5f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a6b8 <_svfiprintf_r+0x1f4>
 800a5f8:	7821      	ldrb	r1, [r4, #0]
 800a5fa:	2203      	movs	r2, #3
 800a5fc:	4650      	mov	r0, sl
 800a5fe:	f7f5 fe77 	bl	80002f0 <memchr>
 800a602:	b138      	cbz	r0, 800a614 <_svfiprintf_r+0x150>
 800a604:	9b04      	ldr	r3, [sp, #16]
 800a606:	eba0 000a 	sub.w	r0, r0, sl
 800a60a:	2240      	movs	r2, #64	@ 0x40
 800a60c:	4082      	lsls	r2, r0
 800a60e:	4313      	orrs	r3, r2
 800a610:	3401      	adds	r4, #1
 800a612:	9304      	str	r3, [sp, #16]
 800a614:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a618:	4824      	ldr	r0, [pc, #144]	@ (800a6ac <_svfiprintf_r+0x1e8>)
 800a61a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a61e:	2206      	movs	r2, #6
 800a620:	f7f5 fe66 	bl	80002f0 <memchr>
 800a624:	2800      	cmp	r0, #0
 800a626:	d036      	beq.n	800a696 <_svfiprintf_r+0x1d2>
 800a628:	4b21      	ldr	r3, [pc, #132]	@ (800a6b0 <_svfiprintf_r+0x1ec>)
 800a62a:	bb1b      	cbnz	r3, 800a674 <_svfiprintf_r+0x1b0>
 800a62c:	9b03      	ldr	r3, [sp, #12]
 800a62e:	3307      	adds	r3, #7
 800a630:	f023 0307 	bic.w	r3, r3, #7
 800a634:	3308      	adds	r3, #8
 800a636:	9303      	str	r3, [sp, #12]
 800a638:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a63a:	4433      	add	r3, r6
 800a63c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a63e:	e76a      	b.n	800a516 <_svfiprintf_r+0x52>
 800a640:	fb0c 3202 	mla	r2, ip, r2, r3
 800a644:	460c      	mov	r4, r1
 800a646:	2001      	movs	r0, #1
 800a648:	e7a8      	b.n	800a59c <_svfiprintf_r+0xd8>
 800a64a:	2300      	movs	r3, #0
 800a64c:	3401      	adds	r4, #1
 800a64e:	9305      	str	r3, [sp, #20]
 800a650:	4619      	mov	r1, r3
 800a652:	f04f 0c0a 	mov.w	ip, #10
 800a656:	4620      	mov	r0, r4
 800a658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a65c:	3a30      	subs	r2, #48	@ 0x30
 800a65e:	2a09      	cmp	r2, #9
 800a660:	d903      	bls.n	800a66a <_svfiprintf_r+0x1a6>
 800a662:	2b00      	cmp	r3, #0
 800a664:	d0c6      	beq.n	800a5f4 <_svfiprintf_r+0x130>
 800a666:	9105      	str	r1, [sp, #20]
 800a668:	e7c4      	b.n	800a5f4 <_svfiprintf_r+0x130>
 800a66a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a66e:	4604      	mov	r4, r0
 800a670:	2301      	movs	r3, #1
 800a672:	e7f0      	b.n	800a656 <_svfiprintf_r+0x192>
 800a674:	ab03      	add	r3, sp, #12
 800a676:	9300      	str	r3, [sp, #0]
 800a678:	462a      	mov	r2, r5
 800a67a:	4b0e      	ldr	r3, [pc, #56]	@ (800a6b4 <_svfiprintf_r+0x1f0>)
 800a67c:	a904      	add	r1, sp, #16
 800a67e:	4638      	mov	r0, r7
 800a680:	f3af 8000 	nop.w
 800a684:	1c42      	adds	r2, r0, #1
 800a686:	4606      	mov	r6, r0
 800a688:	d1d6      	bne.n	800a638 <_svfiprintf_r+0x174>
 800a68a:	89ab      	ldrh	r3, [r5, #12]
 800a68c:	065b      	lsls	r3, r3, #25
 800a68e:	f53f af2d 	bmi.w	800a4ec <_svfiprintf_r+0x28>
 800a692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a694:	e72c      	b.n	800a4f0 <_svfiprintf_r+0x2c>
 800a696:	ab03      	add	r3, sp, #12
 800a698:	9300      	str	r3, [sp, #0]
 800a69a:	462a      	mov	r2, r5
 800a69c:	4b05      	ldr	r3, [pc, #20]	@ (800a6b4 <_svfiprintf_r+0x1f0>)
 800a69e:	a904      	add	r1, sp, #16
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	f000 f879 	bl	800a798 <_printf_i>
 800a6a6:	e7ed      	b.n	800a684 <_svfiprintf_r+0x1c0>
 800a6a8:	0800abc8 	.word	0x0800abc8
 800a6ac:	0800abd2 	.word	0x0800abd2
 800a6b0:	00000000 	.word	0x00000000
 800a6b4:	0800a40d 	.word	0x0800a40d
 800a6b8:	0800abce 	.word	0x0800abce

0800a6bc <_printf_common>:
 800a6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6c0:	4616      	mov	r6, r2
 800a6c2:	4698      	mov	r8, r3
 800a6c4:	688a      	ldr	r2, [r1, #8]
 800a6c6:	690b      	ldr	r3, [r1, #16]
 800a6c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	bfb8      	it	lt
 800a6d0:	4613      	movlt	r3, r2
 800a6d2:	6033      	str	r3, [r6, #0]
 800a6d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a6d8:	4607      	mov	r7, r0
 800a6da:	460c      	mov	r4, r1
 800a6dc:	b10a      	cbz	r2, 800a6e2 <_printf_common+0x26>
 800a6de:	3301      	adds	r3, #1
 800a6e0:	6033      	str	r3, [r6, #0]
 800a6e2:	6823      	ldr	r3, [r4, #0]
 800a6e4:	0699      	lsls	r1, r3, #26
 800a6e6:	bf42      	ittt	mi
 800a6e8:	6833      	ldrmi	r3, [r6, #0]
 800a6ea:	3302      	addmi	r3, #2
 800a6ec:	6033      	strmi	r3, [r6, #0]
 800a6ee:	6825      	ldr	r5, [r4, #0]
 800a6f0:	f015 0506 	ands.w	r5, r5, #6
 800a6f4:	d106      	bne.n	800a704 <_printf_common+0x48>
 800a6f6:	f104 0a19 	add.w	sl, r4, #25
 800a6fa:	68e3      	ldr	r3, [r4, #12]
 800a6fc:	6832      	ldr	r2, [r6, #0]
 800a6fe:	1a9b      	subs	r3, r3, r2
 800a700:	42ab      	cmp	r3, r5
 800a702:	dc26      	bgt.n	800a752 <_printf_common+0x96>
 800a704:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a708:	6822      	ldr	r2, [r4, #0]
 800a70a:	3b00      	subs	r3, #0
 800a70c:	bf18      	it	ne
 800a70e:	2301      	movne	r3, #1
 800a710:	0692      	lsls	r2, r2, #26
 800a712:	d42b      	bmi.n	800a76c <_printf_common+0xb0>
 800a714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a718:	4641      	mov	r1, r8
 800a71a:	4638      	mov	r0, r7
 800a71c:	47c8      	blx	r9
 800a71e:	3001      	adds	r0, #1
 800a720:	d01e      	beq.n	800a760 <_printf_common+0xa4>
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	6922      	ldr	r2, [r4, #16]
 800a726:	f003 0306 	and.w	r3, r3, #6
 800a72a:	2b04      	cmp	r3, #4
 800a72c:	bf02      	ittt	eq
 800a72e:	68e5      	ldreq	r5, [r4, #12]
 800a730:	6833      	ldreq	r3, [r6, #0]
 800a732:	1aed      	subeq	r5, r5, r3
 800a734:	68a3      	ldr	r3, [r4, #8]
 800a736:	bf0c      	ite	eq
 800a738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a73c:	2500      	movne	r5, #0
 800a73e:	4293      	cmp	r3, r2
 800a740:	bfc4      	itt	gt
 800a742:	1a9b      	subgt	r3, r3, r2
 800a744:	18ed      	addgt	r5, r5, r3
 800a746:	2600      	movs	r6, #0
 800a748:	341a      	adds	r4, #26
 800a74a:	42b5      	cmp	r5, r6
 800a74c:	d11a      	bne.n	800a784 <_printf_common+0xc8>
 800a74e:	2000      	movs	r0, #0
 800a750:	e008      	b.n	800a764 <_printf_common+0xa8>
 800a752:	2301      	movs	r3, #1
 800a754:	4652      	mov	r2, sl
 800a756:	4641      	mov	r1, r8
 800a758:	4638      	mov	r0, r7
 800a75a:	47c8      	blx	r9
 800a75c:	3001      	adds	r0, #1
 800a75e:	d103      	bne.n	800a768 <_printf_common+0xac>
 800a760:	f04f 30ff 	mov.w	r0, #4294967295
 800a764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a768:	3501      	adds	r5, #1
 800a76a:	e7c6      	b.n	800a6fa <_printf_common+0x3e>
 800a76c:	18e1      	adds	r1, r4, r3
 800a76e:	1c5a      	adds	r2, r3, #1
 800a770:	2030      	movs	r0, #48	@ 0x30
 800a772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a776:	4422      	add	r2, r4
 800a778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a77c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a780:	3302      	adds	r3, #2
 800a782:	e7c7      	b.n	800a714 <_printf_common+0x58>
 800a784:	2301      	movs	r3, #1
 800a786:	4622      	mov	r2, r4
 800a788:	4641      	mov	r1, r8
 800a78a:	4638      	mov	r0, r7
 800a78c:	47c8      	blx	r9
 800a78e:	3001      	adds	r0, #1
 800a790:	d0e6      	beq.n	800a760 <_printf_common+0xa4>
 800a792:	3601      	adds	r6, #1
 800a794:	e7d9      	b.n	800a74a <_printf_common+0x8e>
	...

0800a798 <_printf_i>:
 800a798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a79c:	7e0f      	ldrb	r7, [r1, #24]
 800a79e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a7a0:	2f78      	cmp	r7, #120	@ 0x78
 800a7a2:	4691      	mov	r9, r2
 800a7a4:	4680      	mov	r8, r0
 800a7a6:	460c      	mov	r4, r1
 800a7a8:	469a      	mov	sl, r3
 800a7aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a7ae:	d807      	bhi.n	800a7c0 <_printf_i+0x28>
 800a7b0:	2f62      	cmp	r7, #98	@ 0x62
 800a7b2:	d80a      	bhi.n	800a7ca <_printf_i+0x32>
 800a7b4:	2f00      	cmp	r7, #0
 800a7b6:	f000 80d1 	beq.w	800a95c <_printf_i+0x1c4>
 800a7ba:	2f58      	cmp	r7, #88	@ 0x58
 800a7bc:	f000 80b8 	beq.w	800a930 <_printf_i+0x198>
 800a7c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a7c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a7c8:	e03a      	b.n	800a840 <_printf_i+0xa8>
 800a7ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a7ce:	2b15      	cmp	r3, #21
 800a7d0:	d8f6      	bhi.n	800a7c0 <_printf_i+0x28>
 800a7d2:	a101      	add	r1, pc, #4	@ (adr r1, 800a7d8 <_printf_i+0x40>)
 800a7d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a7d8:	0800a831 	.word	0x0800a831
 800a7dc:	0800a845 	.word	0x0800a845
 800a7e0:	0800a7c1 	.word	0x0800a7c1
 800a7e4:	0800a7c1 	.word	0x0800a7c1
 800a7e8:	0800a7c1 	.word	0x0800a7c1
 800a7ec:	0800a7c1 	.word	0x0800a7c1
 800a7f0:	0800a845 	.word	0x0800a845
 800a7f4:	0800a7c1 	.word	0x0800a7c1
 800a7f8:	0800a7c1 	.word	0x0800a7c1
 800a7fc:	0800a7c1 	.word	0x0800a7c1
 800a800:	0800a7c1 	.word	0x0800a7c1
 800a804:	0800a943 	.word	0x0800a943
 800a808:	0800a86f 	.word	0x0800a86f
 800a80c:	0800a8fd 	.word	0x0800a8fd
 800a810:	0800a7c1 	.word	0x0800a7c1
 800a814:	0800a7c1 	.word	0x0800a7c1
 800a818:	0800a965 	.word	0x0800a965
 800a81c:	0800a7c1 	.word	0x0800a7c1
 800a820:	0800a86f 	.word	0x0800a86f
 800a824:	0800a7c1 	.word	0x0800a7c1
 800a828:	0800a7c1 	.word	0x0800a7c1
 800a82c:	0800a905 	.word	0x0800a905
 800a830:	6833      	ldr	r3, [r6, #0]
 800a832:	1d1a      	adds	r2, r3, #4
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6032      	str	r2, [r6, #0]
 800a838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a83c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a840:	2301      	movs	r3, #1
 800a842:	e09c      	b.n	800a97e <_printf_i+0x1e6>
 800a844:	6833      	ldr	r3, [r6, #0]
 800a846:	6820      	ldr	r0, [r4, #0]
 800a848:	1d19      	adds	r1, r3, #4
 800a84a:	6031      	str	r1, [r6, #0]
 800a84c:	0606      	lsls	r6, r0, #24
 800a84e:	d501      	bpl.n	800a854 <_printf_i+0xbc>
 800a850:	681d      	ldr	r5, [r3, #0]
 800a852:	e003      	b.n	800a85c <_printf_i+0xc4>
 800a854:	0645      	lsls	r5, r0, #25
 800a856:	d5fb      	bpl.n	800a850 <_printf_i+0xb8>
 800a858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a85c:	2d00      	cmp	r5, #0
 800a85e:	da03      	bge.n	800a868 <_printf_i+0xd0>
 800a860:	232d      	movs	r3, #45	@ 0x2d
 800a862:	426d      	negs	r5, r5
 800a864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a868:	4858      	ldr	r0, [pc, #352]	@ (800a9cc <_printf_i+0x234>)
 800a86a:	230a      	movs	r3, #10
 800a86c:	e011      	b.n	800a892 <_printf_i+0xfa>
 800a86e:	6821      	ldr	r1, [r4, #0]
 800a870:	6833      	ldr	r3, [r6, #0]
 800a872:	0608      	lsls	r0, r1, #24
 800a874:	f853 5b04 	ldr.w	r5, [r3], #4
 800a878:	d402      	bmi.n	800a880 <_printf_i+0xe8>
 800a87a:	0649      	lsls	r1, r1, #25
 800a87c:	bf48      	it	mi
 800a87e:	b2ad      	uxthmi	r5, r5
 800a880:	2f6f      	cmp	r7, #111	@ 0x6f
 800a882:	4852      	ldr	r0, [pc, #328]	@ (800a9cc <_printf_i+0x234>)
 800a884:	6033      	str	r3, [r6, #0]
 800a886:	bf14      	ite	ne
 800a888:	230a      	movne	r3, #10
 800a88a:	2308      	moveq	r3, #8
 800a88c:	2100      	movs	r1, #0
 800a88e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a892:	6866      	ldr	r6, [r4, #4]
 800a894:	60a6      	str	r6, [r4, #8]
 800a896:	2e00      	cmp	r6, #0
 800a898:	db05      	blt.n	800a8a6 <_printf_i+0x10e>
 800a89a:	6821      	ldr	r1, [r4, #0]
 800a89c:	432e      	orrs	r6, r5
 800a89e:	f021 0104 	bic.w	r1, r1, #4
 800a8a2:	6021      	str	r1, [r4, #0]
 800a8a4:	d04b      	beq.n	800a93e <_printf_i+0x1a6>
 800a8a6:	4616      	mov	r6, r2
 800a8a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800a8ac:	fb03 5711 	mls	r7, r3, r1, r5
 800a8b0:	5dc7      	ldrb	r7, [r0, r7]
 800a8b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a8b6:	462f      	mov	r7, r5
 800a8b8:	42bb      	cmp	r3, r7
 800a8ba:	460d      	mov	r5, r1
 800a8bc:	d9f4      	bls.n	800a8a8 <_printf_i+0x110>
 800a8be:	2b08      	cmp	r3, #8
 800a8c0:	d10b      	bne.n	800a8da <_printf_i+0x142>
 800a8c2:	6823      	ldr	r3, [r4, #0]
 800a8c4:	07df      	lsls	r7, r3, #31
 800a8c6:	d508      	bpl.n	800a8da <_printf_i+0x142>
 800a8c8:	6923      	ldr	r3, [r4, #16]
 800a8ca:	6861      	ldr	r1, [r4, #4]
 800a8cc:	4299      	cmp	r1, r3
 800a8ce:	bfde      	ittt	le
 800a8d0:	2330      	movle	r3, #48	@ 0x30
 800a8d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a8d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a8da:	1b92      	subs	r2, r2, r6
 800a8dc:	6122      	str	r2, [r4, #16]
 800a8de:	f8cd a000 	str.w	sl, [sp]
 800a8e2:	464b      	mov	r3, r9
 800a8e4:	aa03      	add	r2, sp, #12
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	4640      	mov	r0, r8
 800a8ea:	f7ff fee7 	bl	800a6bc <_printf_common>
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	d14a      	bne.n	800a988 <_printf_i+0x1f0>
 800a8f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f6:	b004      	add	sp, #16
 800a8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	f043 0320 	orr.w	r3, r3, #32
 800a902:	6023      	str	r3, [r4, #0]
 800a904:	4832      	ldr	r0, [pc, #200]	@ (800a9d0 <_printf_i+0x238>)
 800a906:	2778      	movs	r7, #120	@ 0x78
 800a908:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a90c:	6823      	ldr	r3, [r4, #0]
 800a90e:	6831      	ldr	r1, [r6, #0]
 800a910:	061f      	lsls	r7, r3, #24
 800a912:	f851 5b04 	ldr.w	r5, [r1], #4
 800a916:	d402      	bmi.n	800a91e <_printf_i+0x186>
 800a918:	065f      	lsls	r7, r3, #25
 800a91a:	bf48      	it	mi
 800a91c:	b2ad      	uxthmi	r5, r5
 800a91e:	6031      	str	r1, [r6, #0]
 800a920:	07d9      	lsls	r1, r3, #31
 800a922:	bf44      	itt	mi
 800a924:	f043 0320 	orrmi.w	r3, r3, #32
 800a928:	6023      	strmi	r3, [r4, #0]
 800a92a:	b11d      	cbz	r5, 800a934 <_printf_i+0x19c>
 800a92c:	2310      	movs	r3, #16
 800a92e:	e7ad      	b.n	800a88c <_printf_i+0xf4>
 800a930:	4826      	ldr	r0, [pc, #152]	@ (800a9cc <_printf_i+0x234>)
 800a932:	e7e9      	b.n	800a908 <_printf_i+0x170>
 800a934:	6823      	ldr	r3, [r4, #0]
 800a936:	f023 0320 	bic.w	r3, r3, #32
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	e7f6      	b.n	800a92c <_printf_i+0x194>
 800a93e:	4616      	mov	r6, r2
 800a940:	e7bd      	b.n	800a8be <_printf_i+0x126>
 800a942:	6833      	ldr	r3, [r6, #0]
 800a944:	6825      	ldr	r5, [r4, #0]
 800a946:	6961      	ldr	r1, [r4, #20]
 800a948:	1d18      	adds	r0, r3, #4
 800a94a:	6030      	str	r0, [r6, #0]
 800a94c:	062e      	lsls	r6, r5, #24
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	d501      	bpl.n	800a956 <_printf_i+0x1be>
 800a952:	6019      	str	r1, [r3, #0]
 800a954:	e002      	b.n	800a95c <_printf_i+0x1c4>
 800a956:	0668      	lsls	r0, r5, #25
 800a958:	d5fb      	bpl.n	800a952 <_printf_i+0x1ba>
 800a95a:	8019      	strh	r1, [r3, #0]
 800a95c:	2300      	movs	r3, #0
 800a95e:	6123      	str	r3, [r4, #16]
 800a960:	4616      	mov	r6, r2
 800a962:	e7bc      	b.n	800a8de <_printf_i+0x146>
 800a964:	6833      	ldr	r3, [r6, #0]
 800a966:	1d1a      	adds	r2, r3, #4
 800a968:	6032      	str	r2, [r6, #0]
 800a96a:	681e      	ldr	r6, [r3, #0]
 800a96c:	6862      	ldr	r2, [r4, #4]
 800a96e:	2100      	movs	r1, #0
 800a970:	4630      	mov	r0, r6
 800a972:	f7f5 fcbd 	bl	80002f0 <memchr>
 800a976:	b108      	cbz	r0, 800a97c <_printf_i+0x1e4>
 800a978:	1b80      	subs	r0, r0, r6
 800a97a:	6060      	str	r0, [r4, #4]
 800a97c:	6863      	ldr	r3, [r4, #4]
 800a97e:	6123      	str	r3, [r4, #16]
 800a980:	2300      	movs	r3, #0
 800a982:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a986:	e7aa      	b.n	800a8de <_printf_i+0x146>
 800a988:	6923      	ldr	r3, [r4, #16]
 800a98a:	4632      	mov	r2, r6
 800a98c:	4649      	mov	r1, r9
 800a98e:	4640      	mov	r0, r8
 800a990:	47d0      	blx	sl
 800a992:	3001      	adds	r0, #1
 800a994:	d0ad      	beq.n	800a8f2 <_printf_i+0x15a>
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	079b      	lsls	r3, r3, #30
 800a99a:	d413      	bmi.n	800a9c4 <_printf_i+0x22c>
 800a99c:	68e0      	ldr	r0, [r4, #12]
 800a99e:	9b03      	ldr	r3, [sp, #12]
 800a9a0:	4298      	cmp	r0, r3
 800a9a2:	bfb8      	it	lt
 800a9a4:	4618      	movlt	r0, r3
 800a9a6:	e7a6      	b.n	800a8f6 <_printf_i+0x15e>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	4632      	mov	r2, r6
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	4640      	mov	r0, r8
 800a9b0:	47d0      	blx	sl
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	d09d      	beq.n	800a8f2 <_printf_i+0x15a>
 800a9b6:	3501      	adds	r5, #1
 800a9b8:	68e3      	ldr	r3, [r4, #12]
 800a9ba:	9903      	ldr	r1, [sp, #12]
 800a9bc:	1a5b      	subs	r3, r3, r1
 800a9be:	42ab      	cmp	r3, r5
 800a9c0:	dcf2      	bgt.n	800a9a8 <_printf_i+0x210>
 800a9c2:	e7eb      	b.n	800a99c <_printf_i+0x204>
 800a9c4:	2500      	movs	r5, #0
 800a9c6:	f104 0619 	add.w	r6, r4, #25
 800a9ca:	e7f5      	b.n	800a9b8 <_printf_i+0x220>
 800a9cc:	0800abd9 	.word	0x0800abd9
 800a9d0:	0800abea 	.word	0x0800abea

0800a9d4 <memmove>:
 800a9d4:	4288      	cmp	r0, r1
 800a9d6:	b510      	push	{r4, lr}
 800a9d8:	eb01 0402 	add.w	r4, r1, r2
 800a9dc:	d902      	bls.n	800a9e4 <memmove+0x10>
 800a9de:	4284      	cmp	r4, r0
 800a9e0:	4623      	mov	r3, r4
 800a9e2:	d807      	bhi.n	800a9f4 <memmove+0x20>
 800a9e4:	1e43      	subs	r3, r0, #1
 800a9e6:	42a1      	cmp	r1, r4
 800a9e8:	d008      	beq.n	800a9fc <memmove+0x28>
 800a9ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a9f2:	e7f8      	b.n	800a9e6 <memmove+0x12>
 800a9f4:	4402      	add	r2, r0
 800a9f6:	4601      	mov	r1, r0
 800a9f8:	428a      	cmp	r2, r1
 800a9fa:	d100      	bne.n	800a9fe <memmove+0x2a>
 800a9fc:	bd10      	pop	{r4, pc}
 800a9fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa06:	e7f7      	b.n	800a9f8 <memmove+0x24>

0800aa08 <_sbrk_r>:
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	4d06      	ldr	r5, [pc, #24]	@ (800aa24 <_sbrk_r+0x1c>)
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	4604      	mov	r4, r0
 800aa10:	4608      	mov	r0, r1
 800aa12:	602b      	str	r3, [r5, #0]
 800aa14:	f7f6 ff1c 	bl	8001850 <_sbrk>
 800aa18:	1c43      	adds	r3, r0, #1
 800aa1a:	d102      	bne.n	800aa22 <_sbrk_r+0x1a>
 800aa1c:	682b      	ldr	r3, [r5, #0]
 800aa1e:	b103      	cbz	r3, 800aa22 <_sbrk_r+0x1a>
 800aa20:	6023      	str	r3, [r4, #0]
 800aa22:	bd38      	pop	{r3, r4, r5, pc}
 800aa24:	24000ab0 	.word	0x24000ab0

0800aa28 <memcpy>:
 800aa28:	440a      	add	r2, r1
 800aa2a:	4291      	cmp	r1, r2
 800aa2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa30:	d100      	bne.n	800aa34 <memcpy+0xc>
 800aa32:	4770      	bx	lr
 800aa34:	b510      	push	{r4, lr}
 800aa36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa3e:	4291      	cmp	r1, r2
 800aa40:	d1f9      	bne.n	800aa36 <memcpy+0xe>
 800aa42:	bd10      	pop	{r4, pc}

0800aa44 <_realloc_r>:
 800aa44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa48:	4607      	mov	r7, r0
 800aa4a:	4614      	mov	r4, r2
 800aa4c:	460d      	mov	r5, r1
 800aa4e:	b921      	cbnz	r1, 800aa5a <_realloc_r+0x16>
 800aa50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa54:	4611      	mov	r1, r2
 800aa56:	f7ff bc4d 	b.w	800a2f4 <_malloc_r>
 800aa5a:	b92a      	cbnz	r2, 800aa68 <_realloc_r+0x24>
 800aa5c:	f7ff fbde 	bl	800a21c <_free_r>
 800aa60:	4625      	mov	r5, r4
 800aa62:	4628      	mov	r0, r5
 800aa64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa68:	f000 f81a 	bl	800aaa0 <_malloc_usable_size_r>
 800aa6c:	4284      	cmp	r4, r0
 800aa6e:	4606      	mov	r6, r0
 800aa70:	d802      	bhi.n	800aa78 <_realloc_r+0x34>
 800aa72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800aa76:	d8f4      	bhi.n	800aa62 <_realloc_r+0x1e>
 800aa78:	4621      	mov	r1, r4
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	f7ff fc3a 	bl	800a2f4 <_malloc_r>
 800aa80:	4680      	mov	r8, r0
 800aa82:	b908      	cbnz	r0, 800aa88 <_realloc_r+0x44>
 800aa84:	4645      	mov	r5, r8
 800aa86:	e7ec      	b.n	800aa62 <_realloc_r+0x1e>
 800aa88:	42b4      	cmp	r4, r6
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	bf28      	it	cs
 800aa90:	4632      	movcs	r2, r6
 800aa92:	f7ff ffc9 	bl	800aa28 <memcpy>
 800aa96:	4629      	mov	r1, r5
 800aa98:	4638      	mov	r0, r7
 800aa9a:	f7ff fbbf 	bl	800a21c <_free_r>
 800aa9e:	e7f1      	b.n	800aa84 <_realloc_r+0x40>

0800aaa0 <_malloc_usable_size_r>:
 800aaa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaa4:	1f18      	subs	r0, r3, #4
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	bfbc      	itt	lt
 800aaaa:	580b      	ldrlt	r3, [r1, r0]
 800aaac:	18c0      	addlt	r0, r0, r3
 800aaae:	4770      	bx	lr

0800aab0 <_init>:
 800aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab2:	bf00      	nop
 800aab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aab6:	bc08      	pop	{r3}
 800aab8:	469e      	mov	lr, r3
 800aaba:	4770      	bx	lr

0800aabc <_fini>:
 800aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aabe:	bf00      	nop
 800aac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aac2:	bc08      	pop	{r3}
 800aac4:	469e      	mov	lr, r3
 800aac6:	4770      	bx	lr
