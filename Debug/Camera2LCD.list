
Camera2LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d5c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08009ffc  08009ffc  0000affc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a0b4  0800a0b4  0000b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a0bc  0800a0bc  0000b0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a0c0  0800a0c0  0000b0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  0800a0c4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000060  0800a124  0000c060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c0  0800a184  0000c0c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  24000120  0800a1e4  0000c120  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ab8  0800a1e4  0000cab8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025a50  00000000  00000000  0000c14e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046be  00000000  00000000  00031b9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b78  00000000  00000000  00036260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001566  00000000  00000000  00037dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003c40b  00000000  00000000  0003933e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028702  00000000  00000000  00075749  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00173a39  00000000  00000000  0009de4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00211884  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007aa8  00000000  00000000  002118c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00219370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009fe4 	.word	0x08009fe4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08009fe4 	.word	0x08009fe4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000684:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <MX_DCMI_Init+0x60>)
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <MX_DCMI_Init+0x64>)
 8000688:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800068a:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <MX_DCMI_Init+0x60>)
 800068c:	2200      	movs	r2, #0
 800068e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000690:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <MX_DCMI_Init+0x60>)
 8000692:	2200      	movs	r2, #0
 8000694:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000696:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <MX_DCMI_Init+0x60>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 800069c:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <MX_DCMI_Init+0x60>)
 800069e:	2200      	movs	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 80006a2:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <MX_DCMI_Init+0x60>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 80006a8:	4b0d      	ldr	r3, [pc, #52]	@ (80006e0 <MX_DCMI_Init+0x60>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 80006ae:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_DCMI_Init+0x60>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 80006b4:	4b0a      	ldr	r3, [pc, #40]	@ (80006e0 <MX_DCMI_Init+0x60>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 80006ba:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <MX_DCMI_Init+0x60>)
 80006bc:	2200      	movs	r2, #0
 80006be:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 80006c0:	4b07      	ldr	r3, [pc, #28]	@ (80006e0 <MX_DCMI_Init+0x60>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 80006c6:	4b06      	ldr	r3, [pc, #24]	@ (80006e0 <MX_DCMI_Init+0x60>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 80006cc:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <MX_DCMI_Init+0x60>)
 80006ce:	f001 fc15 	bl	8001efc <HAL_DCMI_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 80006d8:	f000 fd6c 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	2400013c 	.word	0x2400013c
 80006e4:	48020000 	.word	0x48020000

080006e8 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08e      	sub	sp, #56	@ 0x38
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a59      	ldr	r2, [pc, #356]	@ (800086c <HAL_DCMI_MspInit+0x184>)
 8000706:	4293      	cmp	r3, r2
 8000708:	f040 80ab 	bne.w	8000862 <HAL_DCMI_MspInit+0x17a>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800070c:	4b58      	ldr	r3, [pc, #352]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 800070e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000712:	4a57      	ldr	r2, [pc, #348]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800071c:	4b54      	ldr	r3, [pc, #336]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 800071e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	623b      	str	r3, [r7, #32]
 8000728:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800072a:	4b51      	ldr	r3, [pc, #324]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a4f      	ldr	r2, [pc, #316]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 8000732:	f043 0310 	orr.w	r3, r3, #16
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b4d      	ldr	r3, [pc, #308]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 0310 	and.w	r3, r3, #16
 8000744:	61fb      	str	r3, [r7, #28]
 8000746:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b49      	ldr	r3, [pc, #292]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074e:	4a48      	ldr	r2, [pc, #288]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000758:	4b45      	ldr	r3, [pc, #276]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000766:	4b42      	ldr	r3, [pc, #264]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800076c:	4a40      	ldr	r2, [pc, #256]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 800076e:	f043 0304 	orr.w	r3, r3, #4
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000776:	4b3e      	ldr	r3, [pc, #248]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800077c:	f003 0304 	and.w	r3, r3, #4
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000784:	4b3a      	ldr	r3, [pc, #232]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800078a:	4a39      	ldr	r2, [pc, #228]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 800078c:	f043 0308 	orr.w	r3, r3, #8
 8000790:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000794:	4b36      	ldr	r3, [pc, #216]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079a:	f003 0308 	and.w	r3, r3, #8
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a2:	4b33      	ldr	r3, [pc, #204]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 80007a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a8:	4a31      	ldr	r2, [pc, #196]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 80007aa:	f043 0302 	orr.w	r3, r3, #2
 80007ae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000870 <HAL_DCMI_MspInit+0x188>)
 80007b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b8:	f003 0302 	and.w	r3, r3, #2
 80007bc:	60fb      	str	r3, [r7, #12]
 80007be:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80007c0:	2370      	movs	r3, #112	@ 0x70
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c4:	2302      	movs	r3, #2
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007d0:	230d      	movs	r3, #13
 80007d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d8:	4619      	mov	r1, r3
 80007da:	4826      	ldr	r0, [pc, #152]	@ (8000874 <HAL_DCMI_MspInit+0x18c>)
 80007dc:	f002 f83c 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80007e0:	2350      	movs	r3, #80	@ 0x50
 80007e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e4:	2302      	movs	r3, #2
 80007e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ec:	2300      	movs	r3, #0
 80007ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80007f0:	230d      	movs	r3, #13
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007f8:	4619      	mov	r1, r3
 80007fa:	481f      	ldr	r0, [pc, #124]	@ (8000878 <HAL_DCMI_MspInit+0x190>)
 80007fc:	f002 f82c 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000800:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000804:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000806:	2302      	movs	r3, #2
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2300      	movs	r3, #0
 8000810:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000812:	230d      	movs	r3, #13
 8000814:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800081a:	4619      	mov	r1, r3
 800081c:	4817      	ldr	r0, [pc, #92]	@ (800087c <HAL_DCMI_MspInit+0x194>)
 800081e:	f002 f81b 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000822:	2308      	movs	r3, #8
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000832:	230d      	movs	r3, #13
 8000834:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083a:	4619      	mov	r1, r3
 800083c:	4810      	ldr	r0, [pc, #64]	@ (8000880 <HAL_DCMI_MspInit+0x198>)
 800083e:	f002 f80b 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000842:	2380      	movs	r3, #128	@ 0x80
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000852:	230d      	movs	r3, #13
 8000854:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085a:	4619      	mov	r1, r3
 800085c:	4809      	ldr	r0, [pc, #36]	@ (8000884 <HAL_DCMI_MspInit+0x19c>)
 800085e:	f001 fffb 	bl	8002858 <HAL_GPIO_Init>

  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000862:	bf00      	nop
 8000864:	3738      	adds	r7, #56	@ 0x38
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	48020000 	.word	0x48020000
 8000870:	58024400 	.word	0x58024400
 8000874:	58021000 	.word	0x58021000
 8000878:	58020000 	.word	0x58020000
 800087c:	58020800 	.word	0x58020800
 8000880:	58020c00 	.word	0x58020c00
 8000884:	58020400 	.word	0x58020400

08000888 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800088c:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <MX_ETH_Init+0x80>)
 800088e:	4a1f      	ldr	r2, [pc, #124]	@ (800090c <MX_ETH_Init+0x84>)
 8000890:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000892:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <MX_ETH_Init+0x88>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000898:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <MX_ETH_Init+0x88>)
 800089a:	2280      	movs	r2, #128	@ 0x80
 800089c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800089e:	4b1c      	ldr	r3, [pc, #112]	@ (8000910 <MX_ETH_Init+0x88>)
 80008a0:	22e1      	movs	r2, #225	@ 0xe1
 80008a2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000910 <MX_ETH_Init+0x88>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <MX_ETH_Init+0x88>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008b0:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <MX_ETH_Init+0x88>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <MX_ETH_Init+0x80>)
 80008b8:	4a15      	ldr	r2, [pc, #84]	@ (8000910 <MX_ETH_Init+0x88>)
 80008ba:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008bc:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <MX_ETH_Init+0x80>)
 80008be:	2201      	movs	r2, #1
 80008c0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008c2:	4b11      	ldr	r3, [pc, #68]	@ (8000908 <MX_ETH_Init+0x80>)
 80008c4:	4a13      	ldr	r2, [pc, #76]	@ (8000914 <MX_ETH_Init+0x8c>)
 80008c6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <MX_ETH_Init+0x80>)
 80008ca:	4a13      	ldr	r2, [pc, #76]	@ (8000918 <MX_ETH_Init+0x90>)
 80008cc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <MX_ETH_Init+0x80>)
 80008d0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80008d4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008d6:	480c      	ldr	r0, [pc, #48]	@ (8000908 <MX_ETH_Init+0x80>)
 80008d8:	f001 fb8a 	bl	8001ff0 <HAL_ETH_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008e2:	f000 fc67 	bl	80011b4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008e6:	2238      	movs	r2, #56	@ 0x38
 80008e8:	2100      	movs	r1, #0
 80008ea:	480c      	ldr	r0, [pc, #48]	@ (800091c <MX_ETH_Init+0x94>)
 80008ec:	f008 fefa 	bl	80096e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	@ (800091c <MX_ETH_Init+0x94>)
 80008f2:	2221      	movs	r2, #33	@ 0x21
 80008f4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80008f6:	4b09      	ldr	r3, [pc, #36]	@ (800091c <MX_ETH_Init+0x94>)
 80008f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80008fc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80008fe:	4b07      	ldr	r3, [pc, #28]	@ (800091c <MX_ETH_Init+0x94>)
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	240001c4 	.word	0x240001c4
 800090c:	40028000 	.word	0x40028000
 8000910:	24000274 	.word	0x24000274
 8000914:	240000c0 	.word	0x240000c0
 8000918:	24000060 	.word	0x24000060
 800091c:	2400018c 	.word	0x2400018c

08000920 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08e      	sub	sp, #56	@ 0x38
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a59      	ldr	r2, [pc, #356]	@ (8000aa4 <HAL_ETH_MspInit+0x184>)
 800093e:	4293      	cmp	r3, r2
 8000940:	f040 80ab 	bne.w	8000a9a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000944:	4b58      	ldr	r3, [pc, #352]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 8000946:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800094a:	4a57      	ldr	r2, [pc, #348]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 800094c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000950:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000954:	4b54      	ldr	r3, [pc, #336]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 8000956:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800095a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800095e:	623b      	str	r3, [r7, #32]
 8000960:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000962:	4b51      	ldr	r3, [pc, #324]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 8000964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000968:	4a4f      	ldr	r2, [pc, #316]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 800096a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800096e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000972:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 8000974:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800097c:	61fb      	str	r3, [r7, #28]
 800097e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000980:	4b49      	ldr	r3, [pc, #292]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000986:	4a48      	ldr	r2, [pc, #288]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 8000988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800098c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000990:	4b45      	ldr	r3, [pc, #276]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 8000992:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800099a:	61bb      	str	r3, [r7, #24]
 800099c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800099e:	4b42      	ldr	r3, [pc, #264]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a4:	4a40      	ldr	r2, [pc, #256]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 80009a6:	f043 0304 	orr.w	r3, r3, #4
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ae:	4b3e      	ldr	r3, [pc, #248]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b4:	f003 0304 	and.w	r3, r3, #4
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009bc:	4b3a      	ldr	r3, [pc, #232]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c2:	4a39      	ldr	r2, [pc, #228]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009cc:	4b36      	ldr	r3, [pc, #216]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 80009ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	4b33      	ldr	r3, [pc, #204]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e0:	4a31      	ldr	r2, [pc, #196]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ea:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80009f8:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 80009fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fe:	4a2a      	ldr	r2, [pc, #168]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 8000a00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a08:	4b27      	ldr	r3, [pc, #156]	@ (8000aa8 <HAL_ETH_MspInit+0x188>)
 8000a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000a16:	2332      	movs	r3, #50	@ 0x32
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a26:	230b      	movs	r3, #11
 8000a28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a2e:	4619      	mov	r1, r3
 8000a30:	481e      	ldr	r0, [pc, #120]	@ (8000aac <HAL_ETH_MspInit+0x18c>)
 8000a32:	f001 ff11 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000a36:	2386      	movs	r3, #134	@ 0x86
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a42:	2300      	movs	r3, #0
 8000a44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a46:	230b      	movs	r3, #11
 8000a48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4817      	ldr	r0, [pc, #92]	@ (8000ab0 <HAL_ETH_MspInit+0x190>)
 8000a52:	f001 ff01 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a68:	230b      	movs	r3, #11
 8000a6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a70:	4619      	mov	r1, r3
 8000a72:	4810      	ldr	r0, [pc, #64]	@ (8000ab4 <HAL_ETH_MspInit+0x194>)
 8000a74:	f001 fef0 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000a78:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8a:	230b      	movs	r3, #11
 8000a8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4808      	ldr	r0, [pc, #32]	@ (8000ab8 <HAL_ETH_MspInit+0x198>)
 8000a96:	f001 fedf 	bl	8002858 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000a9a:	bf00      	nop
 8000a9c:	3738      	adds	r7, #56	@ 0x38
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40028000 	.word	0x40028000
 8000aa8:	58024400 	.word	0x58024400
 8000aac:	58020800 	.word	0x58020800
 8000ab0:	58020000 	.word	0x58020000
 8000ab4:	58020400 	.word	0x58020400
 8000ab8:	58021800 	.word	0x58021800

08000abc <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08c      	sub	sp, #48	@ 0x30
 8000ac0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 031c 	add.w	r3, r7, #28
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ad2:	4b7e      	ldr	r3, [pc, #504]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad8:	4a7c      	ldr	r2, [pc, #496]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ae2:	4b7a      	ldr	r3, [pc, #488]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae8:	f003 0310 	and.w	r3, r3, #16
 8000aec:	61bb      	str	r3, [r7, #24]
 8000aee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af0:	4b76      	ldr	r3, [pc, #472]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af6:	4a75      	ldr	r2, [pc, #468]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b00:	4b72      	ldr	r3, [pc, #456]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0e:	4b6f      	ldr	r3, [pc, #444]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b14:	4a6d      	ldr	r2, [pc, #436]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b1e:	4b6b      	ldr	r3, [pc, #428]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2c:	4b67      	ldr	r3, [pc, #412]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b32:	4a66      	ldr	r2, [pc, #408]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b3c:	4b63      	ldr	r3, [pc, #396]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4a:	4b60      	ldr	r3, [pc, #384]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b50:	4a5e      	ldr	r2, [pc, #376]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b52:	f043 0302 	orr.w	r3, r3, #2
 8000b56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5a:	4b5c      	ldr	r3, [pc, #368]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b60:	f003 0302 	and.w	r3, r3, #2
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b68:	4b58      	ldr	r3, [pc, #352]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6e:	4a57      	ldr	r2, [pc, #348]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b78:	4b54      	ldr	r3, [pc, #336]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b86:	4b51      	ldr	r3, [pc, #324]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	4a4f      	ldr	r2, [pc, #316]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b8e:	f043 0308 	orr.w	r3, r3, #8
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b96:	4b4d      	ldr	r3, [pc, #308]	@ (8000ccc <MX_GPIO_Init+0x210>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9c:	f003 0308 	and.w	r3, r3, #8
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_SET);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	4849      	ldr	r0, [pc, #292]	@ (8000cd0 <MX_GPIO_Init+0x214>)
 8000baa:	f002 f805 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f245 0101 	movw	r1, #20481	@ 0x5001
 8000bb4:	4847      	ldr	r0, [pc, #284]	@ (8000cd4 <MX_GPIO_Init+0x218>)
 8000bb6:	f001 ffff 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_DC_Pin|CAMERA_RST_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f249 4102 	movw	r1, #37890	@ 0x9402
 8000bc0:	4845      	ldr	r0, [pc, #276]	@ (8000cd8 <MX_GPIO_Init+0x21c>)
 8000bc2:	f001 fff9 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bcc:	4843      	ldr	r0, [pc, #268]	@ (8000cdc <MX_GPIO_Init+0x220>)
 8000bce:	f001 fff3 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4842      	ldr	r0, [pc, #264]	@ (8000ce0 <MX_GPIO_Init+0x224>)
 8000bd8:	f001 ffee 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bdc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	483c      	ldr	r0, [pc, #240]	@ (8000ce4 <MX_GPIO_Init+0x228>)
 8000bf2:	f001 fe31 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CAMERA_PWDN_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4830      	ldr	r0, [pc, #192]	@ (8000cd0 <MX_GPIO_Init+0x214>)
 8000c0e:	f001 fe23 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin;
 8000c12:	f245 0301 	movw	r3, #20481	@ 0x5001
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	482a      	ldr	r0, [pc, #168]	@ (8000cd4 <MX_GPIO_Init+0x218>)
 8000c2c:	f001 fe14 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|CAMERA_RST_Pin|LCD_RESET_Pin|LCD_CS_Pin;
 8000c30:	f249 4302 	movw	r3, #37890	@ 0x9402
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	4619      	mov	r1, r3
 8000c48:	4823      	ldr	r0, [pc, #140]	@ (8000cd8 <MX_GPIO_Init+0x21c>)
 8000c4a:	f001 fe05 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000c4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c54:	2301      	movs	r3, #1
 8000c56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	481d      	ldr	r0, [pc, #116]	@ (8000cdc <MX_GPIO_Init+0x220>)
 8000c68:	f001 fdf6 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000c6c:	2380      	movs	r3, #128	@ 0x80
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c70:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000c7a:	f107 031c 	add.w	r3, r7, #28
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4815      	ldr	r0, [pc, #84]	@ (8000cd8 <MX_GPIO_Init+0x21c>)
 8000c82:	f001 fde9 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9c:	f107 031c 	add.w	r3, r7, #28
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <MX_GPIO_Init+0x214>)
 8000ca4:	f001 fdd8 	bl	8002858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4808      	ldr	r0, [pc, #32]	@ (8000ce0 <MX_GPIO_Init+0x224>)
 8000cc0:	f001 fdca 	bl	8002858 <HAL_GPIO_Init>

}
 8000cc4:	bf00      	nop
 8000cc6:	3730      	adds	r7, #48	@ 0x30
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	58024400 	.word	0x58024400
 8000cd0:	58020000 	.word	0x58020000
 8000cd4:	58020400 	.word	0x58020400
 8000cd8:	58021800 	.word	0x58021800
 8000cdc:	58020c00 	.word	0x58020c00
 8000ce0:	58021000 	.word	0x58021000
 8000ce4:	58020800 	.word	0x58020800

08000ce8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000cee:	4a1c      	ldr	r2, [pc, #112]	@ (8000d60 <MX_I2C1_Init+0x78>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60000008;
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8000d64 <MX_I2C1_Init+0x7c>)
 8000cf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d00:	2201      	movs	r2, #1
 8000d02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d04:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d10:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d22:	480e      	ldr	r0, [pc, #56]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d24:	f001 ff62 	bl	8002bec <HAL_I2C_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d2e:	f000 fa41 	bl	80011b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d32:	2100      	movs	r1, #0
 8000d34:	4809      	ldr	r0, [pc, #36]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d36:	f002 fca9 	bl	800368c <HAL_I2CEx_ConfigAnalogFilter>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d40:	f000 fa38 	bl	80011b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	4805      	ldr	r0, [pc, #20]	@ (8000d5c <MX_I2C1_Init+0x74>)
 8000d48:	f002 fceb 	bl	8003722 <HAL_I2CEx_ConfigDigitalFilter>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d52:	f000 fa2f 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	2400027c 	.word	0x2400027c
 8000d60:	40005400 	.word	0x40005400
 8000d64:	60000008 	.word	0x60000008

08000d68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	22c0      	movs	r2, #192	@ 0xc0
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f008 fcab 	bl	80096e4 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a30      	ldr	r2, [pc, #192]	@ (8000e54 <HAL_I2C_MspInit+0xec>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d158      	bne.n	8000e4a <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d98:	f04f 0208 	mov.w	r2, #8
 8000d9c:	f04f 0300 	mov.w	r3, #0
 8000da0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 8;
 8000da4:	2308      	movs	r3, #8
 8000da6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 150;
 8000da8:	2396      	movs	r3, #150	@ 0x96
 8000daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 10;
 8000dac:	230a      	movs	r3, #10
 8000dae:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8000db0:	230a      	movs	r3, #10
 8000db2:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 10;
 8000db4:	230a      	movs	r3, #10
 8000db6:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8000dbc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dc0:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8000dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dce:	f107 0310 	add.w	r3, r7, #16
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 febc 	bl	8004b50 <HAL_RCCEx_PeriphCLKConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 8000dde:	f000 f9e9 	bl	80011b4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e58 <HAL_I2C_MspInit+0xf0>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de8:	4a1b      	ldr	r2, [pc, #108]	@ (8000e58 <HAL_I2C_MspInit+0xf0>)
 8000dea:	f043 0302 	orr.w	r3, r3, #2
 8000dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <HAL_I2C_MspInit+0xf0>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	f003 0302 	and.w	r3, r3, #2
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e00:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e04:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e08:	2312      	movs	r3, #18
 8000e0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	2300      	movs	r3, #0
 8000e16:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e24:	4619      	mov	r1, r3
 8000e26:	480d      	ldr	r0, [pc, #52]	@ (8000e5c <HAL_I2C_MspInit+0xf4>)
 8000e28:	f001 fd16 	bl	8002858 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <HAL_I2C_MspInit+0xf0>)
 8000e2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e32:	4a09      	ldr	r2, [pc, #36]	@ (8000e58 <HAL_I2C_MspInit+0xf0>)
 8000e34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000e38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_I2C_MspInit+0xf0>)
 8000e3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e4a:	bf00      	nop
 8000e4c:	37e8      	adds	r7, #232	@ 0xe8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40005400 	.word	0x40005400
 8000e58:	58024400 	.word	0x58024400
 8000e5c:	58020400 	.word	0x58020400

08000e60 <OV5640_WriteReg>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

HAL_StatusTypeDef OV5640_WriteReg(uint16_t regAddr, uint8_t data){
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	4603      	mov	r3, r0
 8000e68:	460a      	mov	r2, r1
 8000e6a:	80fb      	strh	r3, [r7, #6]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	717b      	strb	r3, [r7, #5]
	uint8_t transmitData[3];
	transmitData[0] = (regAddr >>8);
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	0a1b      	lsrs	r3, r3, #8
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	733b      	strb	r3, [r7, #12]
	transmitData[1] = regAddr & 0xFF;
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	737b      	strb	r3, [r7, #13]
	transmitData[2] = data;
 8000e80:	797b      	ldrb	r3, [r7, #5]
 8000e82:	73bb      	strb	r3, [r7, #14]

	return HAL_I2C_Master_Transmit(&hi2c1, OV5640_I2C_ADDR, transmitData, 3, HAL_MAX_DELAY);
 8000e84:	f107 020c 	add.w	r2, r7, #12
 8000e88:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	2303      	movs	r3, #3
 8000e90:	2178      	movs	r1, #120	@ 0x78
 8000e92:	4804      	ldr	r0, [pc, #16]	@ (8000ea4 <OV5640_WriteReg+0x44>)
 8000e94:	f001 ff46 	bl	8002d24 <HAL_I2C_Master_Transmit>
 8000e98:	4603      	mov	r3, r0

}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2400027c 	.word	0x2400027c

08000ea8 <OV5640_ReadReg>:

HAL_StatusTypeDef OV5640_ReadReg(uint16_t regAddr, uint8_t *dataPtr){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09a      	sub	sp, #104	@ 0x68
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	4603      	mov	r3, r0
 8000eb0:	6039      	str	r1, [r7, #0]
 8000eb2:	80fb      	strh	r3, [r7, #6]
	char buff[25] = "readStart\r\n";
 8000eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8000f64 <OV5640_ReadReg+0xbc>)
 8000eb6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000eba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ebc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000ec0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	731a      	strb	r2, [r3, #12]
	HAL_UART_Transmit(&huart3, &buff, sizeof(buff), HAL_MAX_DELAY);
 8000ece:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed6:	2219      	movs	r2, #25
 8000ed8:	4823      	ldr	r0, [pc, #140]	@ (8000f68 <OV5640_ReadReg+0xc0>)
 8000eda:	f006 ffc1 	bl	8007e60 <HAL_UART_Transmit>
	uint8_t transmitData[2];
	transmitData[0] = (regAddr>>8);
 8000ede:	88fb      	ldrh	r3, [r7, #6]
 8000ee0:	0a1b      	lsrs	r3, r3, #8
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	transmitData[1] = regAddr&0xFF;
 8000eea:	88fb      	ldrh	r3, [r7, #6]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, OV5640_I2C_ADDR, transmitData, 2,HAL_MAX_DELAY);
 8000ef2:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2302      	movs	r3, #2
 8000efe:	2178      	movs	r1, #120	@ 0x78
 8000f00:	481a      	ldr	r0, [pc, #104]	@ (8000f6c <OV5640_ReadReg+0xc4>)
 8000f02:	f001 ff0f 	bl	8002d24 <HAL_I2C_Master_Transmit>
 8000f06:	4603      	mov	r3, r0
 8000f08:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	char buffStatus[50];
	sprintf(buffStatus, "transmit Status: %d \r\n", status);
 8000f0c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8000f10:	f107 030c 	add.w	r3, r7, #12
 8000f14:	4916      	ldr	r1, [pc, #88]	@ (8000f70 <OV5640_ReadReg+0xc8>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f008 fbc4 	bl	80096a4 <siprintf>
	HAL_UART_Transmit(&huart3, buffStatus, strlen(buffStatus), HAL_MAX_DELAY);
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff f9dd 	bl	80002e0 <strlen>
 8000f26:	4603      	mov	r3, r0
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	f107 010c 	add.w	r1, r7, #12
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <OV5640_ReadReg+0xc0>)
 8000f34:	f006 ff94 	bl	8007e60 <HAL_UART_Transmit>
	if(status!= HAL_OK){
 8000f38:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <OV5640_ReadReg+0x9e>
		return status;
 8000f40:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000f44:	e009      	b.n	8000f5a <OV5640_ReadReg+0xb2>
	}
	return HAL_I2C_Master_Receive(&hi2c1, OV5640_I2C_ADDR ,dataPtr, 1, HAL_MAX_DELAY);
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	683a      	ldr	r2, [r7, #0]
 8000f50:	2178      	movs	r1, #120	@ 0x78
 8000f52:	4806      	ldr	r0, [pc, #24]	@ (8000f6c <OV5640_ReadReg+0xc4>)
 8000f54:	f001 fffe 	bl	8002f54 <HAL_I2C_Master_Receive>
 8000f58:	4603      	mov	r3, r0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3760      	adds	r7, #96	@ 0x60
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	0800a014 	.word	0x0800a014
 8000f68:	240003f4 	.word	0x240003f4
 8000f6c:	2400027c 	.word	0x2400027c
 8000f70:	08009ffc 	.word	0x08009ffc

08000f74 <OV5640_TestConnection>:

HAL_StatusTypeDef OV5640_TestConnection(void){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0


	uint8_t pid;
	HAL_StatusTypeDef status = OV5640_ReadReg(0x300A, &pid);
 8000f7a:	1dbb      	adds	r3, r7, #6
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f243 000a 	movw	r0, #12298	@ 0x300a
 8000f82:	f7ff ff91 	bl	8000ea8 <OV5640_ReadReg>
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]

	if (status!= HAL_OK){
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <OV5640_TestConnection+0x20>
		return status;
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	e005      	b.n	8000fa0 <OV5640_TestConnection+0x2c>
	}

	if (pid != 0x56){
 8000f94:	79bb      	ldrb	r3, [r7, #6]
 8000f96:	2b56      	cmp	r3, #86	@ 0x56
 8000f98:	d001      	beq.n	8000f9e <OV5640_TestConnection+0x2a>
		return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <OV5640_TestConnection+0x2c>
	}


	return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <OV5640_TurnOnSequence>:

void OV5640_TurnOnSequence(void){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	  HAL_Delay(10);
 8000fac:	200a      	movs	r0, #10
 8000fae:	f000 fe7d 	bl	8001cac <HAL_Delay>
	  HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port,CAMERA_PWDN_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	480c      	ldr	r0, [pc, #48]	@ (8000fe8 <OV5640_TurnOnSequence+0x40>)
 8000fb8:	f001 fdfe 	bl	8002bb8 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8000fbc:	2005      	movs	r0, #5
 8000fbe:	f000 fe75 	bl	8001cac <HAL_Delay>
	  HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port,CAMERA_RST_Pin, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000fc8:	4808      	ldr	r0, [pc, #32]	@ (8000fec <OV5640_TurnOnSequence+0x44>)
 8000fca:	f001 fdf5 	bl	8002bb8 <HAL_GPIO_WritePin>
	  HAL_Delay(20);
 8000fce:	2014      	movs	r0, #20
 8000fd0:	f000 fe6c 	bl	8001cac <HAL_Delay>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4806      	ldr	r0, [pc, #24]	@ (8000ff0 <OV5640_TurnOnSequence+0x48>)
 8000fd8:	f005 fdde 	bl	8006b98 <HAL_TIM_PWM_Start>
	  HAL_Delay(5);
 8000fdc:	2005      	movs	r0, #5
 8000fde:	f000 fe65 	bl	8001cac <HAL_Delay>

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	58020000 	.word	0x58020000
 8000fec:	58021800 	.word	0x58021800
 8000ff0:	240003a8 	.word	0x240003a8

08000ff4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffa:	f000 fdc5 	bl	8001b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffe:	f000 f855 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001002:	f7ff fd5b 	bl	8000abc <MX_GPIO_Init>
  MX_ETH_Init();
 8001006:	f7ff fc3f 	bl	8000888 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 800100a:	f000 fce5 	bl	80019d8 <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 800100e:	f7ff fb37 	bl	8000680 <MX_DCMI_Init>
  MX_I2C1_Init();
 8001012:	f7ff fe69 	bl	8000ce8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001016:	f000 f8d3 	bl	80011c0 <MX_SPI1_Init>
  MX_TIM1_Init();
 800101a:	f000 fae7 	bl	80015ec <MX_TIM1_Init>
  MX_TIM4_Init();
 800101e:	f000 fb3b 	bl	8001698 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001022:	f000 fc23 	bl	800186c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */



  OV5640_TurnOnSequence();
 8001026:	f7ff ffbf 	bl	8000fa8 <OV5640_TurnOnSequence>
	if ( OV5640_TestConnection()==HAL_OK){
 800102a:	f7ff ffa3 	bl	8000f74 <OV5640_TestConnection>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d113      	bne.n	800105c <main+0x68>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800103a:	4819      	ldr	r0, [pc, #100]	@ (80010a0 <main+0xac>)
 800103c:	f001 fdbc 	bl	8002bb8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001040:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001044:	f000 fe32 	bl	8001cac <HAL_Delay>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin, GPIO_PIN_RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800104e:	4814      	ldr	r0, [pc, #80]	@ (80010a0 <main+0xac>)
 8001050:	f001 fdb2 	bl	8002bb8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001054:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001058:	f000 fe28 	bl	8001cac <HAL_Delay>


	}
	uint8_t result;
	OV5640_WriteReg(0x4300, 0x61);
 800105c:	2161      	movs	r1, #97	@ 0x61
 800105e:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 8001062:	f7ff fefd 	bl	8000e60 <OV5640_WriteReg>
	OV5640_ReadReg(0x4300, &result);
 8001066:	f107 0317 	add.w	r3, r7, #23
 800106a:	4619      	mov	r1, r3
 800106c:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 8001070:	f7ff ff1a 	bl	8000ea8 <OV5640_ReadReg>
	char buff3[20];
	sprintf(buff3, "result of format: %d\n\r", result);
 8001074:	7dfb      	ldrb	r3, [r7, #23]
 8001076:	461a      	mov	r2, r3
 8001078:	463b      	mov	r3, r7
 800107a:	490a      	ldr	r1, [pc, #40]	@ (80010a4 <main+0xb0>)
 800107c:	4618      	mov	r0, r3
 800107e:	f008 fb11 	bl	80096a4 <siprintf>
	HAL_UART_Transmit(&huart3, buff3, strlen(buff3), HAL_MAX_DELAY);
 8001082:	463b      	mov	r3, r7
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff f92b 	bl	80002e0 <strlen>
 800108a:	4603      	mov	r3, r0
 800108c:	b29a      	uxth	r2, r3
 800108e:	4639      	mov	r1, r7
 8001090:	f04f 33ff 	mov.w	r3, #4294967295
 8001094:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <main+0xb4>)
 8001096:	f006 fee3 	bl	8007e60 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800109a:	bf00      	nop
 800109c:	e7fd      	b.n	800109a <main+0xa6>
 800109e:	bf00      	nop
 80010a0:	58020400 	.word	0x58020400
 80010a4:	0800a030 	.word	0x0800a030
 80010a8:	240003f4 	.word	0x240003f4

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b09c      	sub	sp, #112	@ 0x70
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b6:	224c      	movs	r2, #76	@ 0x4c
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f008 fb12 	bl	80096e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2220      	movs	r2, #32
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f008 fb0c 	bl	80096e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010cc:	2002      	movs	r0, #2
 80010ce:	f002 fca5 	bl	8003a1c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b35      	ldr	r3, [pc, #212]	@ (80011ac <SystemClock_Config+0x100>)
 80010d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010da:	4a34      	ldr	r2, [pc, #208]	@ (80011ac <SystemClock_Config+0x100>)
 80010dc:	f023 0301 	bic.w	r3, r3, #1
 80010e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80010e2:	4b32      	ldr	r3, [pc, #200]	@ (80011ac <SystemClock_Config+0x100>)
 80010e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e6:	f003 0301 	and.w	r3, r3, #1
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	4b30      	ldr	r3, [pc, #192]	@ (80011b0 <SystemClock_Config+0x104>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a2f      	ldr	r2, [pc, #188]	@ (80011b0 <SystemClock_Config+0x104>)
 80010f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b2d      	ldr	r3, [pc, #180]	@ (80011b0 <SystemClock_Config+0x104>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001104:	bf00      	nop
 8001106:	4b2a      	ldr	r3, [pc, #168]	@ (80011b0 <SystemClock_Config+0x104>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800110e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001112:	d1f8      	bne.n	8001106 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001114:	2321      	movs	r3, #33	@ 0x21
 8001116:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001118:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800111c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800111e:	2301      	movs	r3, #1
 8001120:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	2302      	movs	r3, #2
 8001124:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001126:	2302      	movs	r3, #2
 8001128:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800112a:	2308      	movs	r3, #8
 800112c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 480;
 800112e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001132:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001134:	2302      	movs	r3, #2
 8001136:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001138:	2304      	movs	r3, #4
 800113a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800113c:	2302      	movs	r3, #2
 800113e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 8001140:	2300      	movs	r3, #0
 8001142:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001144:	2300      	movs	r3, #0
 8001146:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800114c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001150:	4618      	mov	r0, r3
 8001152:	f002 fcad 	bl	8003ab0 <HAL_RCC_OscConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800115c:	f000 f82a 	bl	80011b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001160:	233f      	movs	r3, #63	@ 0x3f
 8001162:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001164:	2303      	movs	r3, #3
 8001166:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800116c:	2308      	movs	r3, #8
 800116e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001170:	2340      	movs	r3, #64	@ 0x40
 8001172:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001174:	2340      	movs	r3, #64	@ 0x40
 8001176:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001178:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800117c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800117e:	2340      	movs	r3, #64	@ 0x40
 8001180:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	2101      	movs	r1, #1
 8001186:	4618      	mov	r0, r3
 8001188:	f003 f8ec 	bl	8004364 <HAL_RCC_ClockConfig>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001192:	f000 f80f 	bl	80011b4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8001196:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800119a:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 800119e:	2000      	movs	r0, #0
 80011a0:	f003 fa96 	bl	80046d0 <HAL_RCC_MCOConfig>
}
 80011a4:	bf00      	nop
 80011a6:	3770      	adds	r7, #112	@ 0x70
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	58000400 	.word	0x58000400
 80011b0:	58024800 	.word	0x58024800

080011b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b8:	b672      	cpsid	i
}
 80011ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011bc:	bf00      	nop
 80011be:	e7fd      	b.n	80011bc <Error_Handler+0x8>

080011c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80011c4:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <MX_SPI1_Init+0xa8>)
 80011c6:	4a29      	ldr	r2, [pc, #164]	@ (800126c <MX_SPI1_Init+0xac>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b27      	ldr	r3, [pc, #156]	@ (8001268 <MX_SPI1_Init+0xa8>)
 80011cc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011d2:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <MX_SPI1_Init+0xa8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80011d8:	4b23      	ldr	r3, [pc, #140]	@ (8001268 <MX_SPI1_Init+0xa8>)
 80011da:	2203      	movs	r2, #3
 80011dc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80011de:	4b22      	ldr	r3, [pc, #136]	@ (8001268 <MX_SPI1_Init+0xa8>)
 80011e0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80011e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80011e6:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <MX_SPI1_Init+0xa8>)
 80011e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80011ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001268 <MX_SPI1_Init+0xa8>)
 80011f0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80011f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <MX_SPI1_Init+0xa8>)
 80011f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <MX_SPI1_Init+0xa8>)
 8001200:	2200      	movs	r2, #0
 8001202:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001204:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <MX_SPI1_Init+0xa8>)
 8001206:	2200      	movs	r2, #0
 8001208:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <MX_SPI1_Init+0xa8>)
 800120c:	2200      	movs	r2, #0
 800120e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001210:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <MX_SPI1_Init+0xa8>)
 8001212:	2200      	movs	r2, #0
 8001214:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <MX_SPI1_Init+0xa8>)
 8001218:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800121c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800121e:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <MX_SPI1_Init+0xa8>)
 8001220:	2200      	movs	r2, #0
 8001222:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001224:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <MX_SPI1_Init+0xa8>)
 8001226:	2200      	movs	r2, #0
 8001228:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <MX_SPI1_Init+0xa8>)
 800122c:	2200      	movs	r2, #0
 800122e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001230:	4b0d      	ldr	r3, [pc, #52]	@ (8001268 <MX_SPI1_Init+0xa8>)
 8001232:	2200      	movs	r2, #0
 8001234:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001236:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <MX_SPI1_Init+0xa8>)
 8001238:	2200      	movs	r2, #0
 800123a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800123c:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <MX_SPI1_Init+0xa8>)
 800123e:	2200      	movs	r2, #0
 8001240:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <MX_SPI1_Init+0xa8>)
 8001244:	2200      	movs	r2, #0
 8001246:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <MX_SPI1_Init+0xa8>)
 800124a:	2200      	movs	r2, #0
 800124c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_SPI1_Init+0xa8>)
 8001250:	2200      	movs	r2, #0
 8001252:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	@ (8001268 <MX_SPI1_Init+0xa8>)
 8001256:	f005 faa7 	bl	80067a8 <HAL_SPI_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001260:	f7ff ffa8 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	240002d0 	.word	0x240002d0
 800126c:	40013000 	.word	0x40013000

08001270 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b0bc      	sub	sp, #240	@ 0xf0
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001288:	f107 0318 	add.w	r3, r7, #24
 800128c:	22c0      	movs	r2, #192	@ 0xc0
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f008 fa27 	bl	80096e4 <memset>
  if(spiHandle->Instance==SPI1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a4b      	ldr	r2, [pc, #300]	@ (80013c8 <HAL_SPI_MspInit+0x158>)
 800129c:	4293      	cmp	r3, r2
 800129e:	f040 808e 	bne.w	80013be <HAL_SPI_MspInit+0x14e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80012a2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012a6:	f04f 0300 	mov.w	r3, #0
 80012aa:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012b2:	f107 0318 	add.w	r3, r7, #24
 80012b6:	4618      	mov	r0, r3
 80012b8:	f003 fc4a 	bl	8004b50 <HAL_RCCEx_PeriphCLKConfig>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80012c2:	f7ff ff77 	bl	80011b4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c6:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 80012c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012cc:	4a3f      	ldr	r2, [pc, #252]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 80012ce:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012d2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012d6:	4b3d      	ldr	r3, [pc, #244]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 80012d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012e0:	617b      	str	r3, [r7, #20]
 80012e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b39      	ldr	r3, [pc, #228]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 80012e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ea:	4a38      	ldr	r2, [pc, #224]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012f4:	4b35      	ldr	r3, [pc, #212]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001302:	4b32      	ldr	r3, [pc, #200]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 8001304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001308:	4a30      	ldr	r2, [pc, #192]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001312:	4b2e      	ldr	r3, [pc, #184]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001318:	f003 0308 	and.w	r3, r3, #8
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001320:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 8001322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001326:	4a29      	ldr	r2, [pc, #164]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 8001328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800132c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001330:	4b26      	ldr	r3, [pc, #152]	@ (80013cc <HAL_SPI_MspInit+0x15c>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800133e:	2320      	movs	r3, #32
 8001340:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001356:	2305      	movs	r3, #5
 8001358:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001360:	4619      	mov	r1, r3
 8001362:	481b      	ldr	r0, [pc, #108]	@ (80013d0 <HAL_SPI_MspInit+0x160>)
 8001364:	f001 fa78 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001368:	2380      	movs	r3, #128	@ 0x80
 800136a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001380:	2305      	movs	r3, #5
 8001382:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001386:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800138a:	4619      	mov	r1, r3
 800138c:	4811      	ldr	r0, [pc, #68]	@ (80013d4 <HAL_SPI_MspInit+0x164>)
 800138e:	f001 fa63 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001392:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001396:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139a:	2302      	movs	r3, #2
 800139c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ac:	2305      	movs	r3, #5
 80013ae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013b2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013b6:	4619      	mov	r1, r3
 80013b8:	4807      	ldr	r0, [pc, #28]	@ (80013d8 <HAL_SPI_MspInit+0x168>)
 80013ba:	f001 fa4d 	bl	8002858 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013be:	bf00      	nop
 80013c0:	37f0      	adds	r7, #240	@ 0xf0
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40013000 	.word	0x40013000
 80013cc:	58024400 	.word	0x58024400
 80013d0:	58020000 	.word	0x58020000
 80013d4:	58020c00 	.word	0x58020c00
 80013d8:	58021800 	.word	0x58021800

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	@ (800140c <HAL_MspInit+0x30>)
 80013e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013e8:	4a08      	ldr	r2, [pc, #32]	@ (800140c <HAL_MspInit+0x30>)
 80013ea:	f043 0302 	orr.w	r3, r3, #2
 80013ee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013f2:	4b06      	ldr	r3, [pc, #24]	@ (800140c <HAL_MspInit+0x30>)
 80013f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	58024400 	.word	0x58024400

08001410 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <NMI_Handler+0x4>

08001418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <HardFault_Handler+0x4>

08001420 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <MemManage_Handler+0x4>

08001428 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <UsageFault_Handler+0x4>

08001438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001446:	b480      	push	{r7}
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001466:	f000 fc01 	bl	8001c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	@ (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	@ (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f008 f928 	bl	80096f4 <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	@ (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	@ (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	@ (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	24080000 	.word	0x24080000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	24000358 	.word	0x24000358
 80014d8:	24000ab8 	.word	0x24000ab8

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014e0:	4b37      	ldr	r3, [pc, #220]	@ (80015c0 <SystemInit+0xe4>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014e6:	4a36      	ldr	r2, [pc, #216]	@ (80015c0 <SystemInit+0xe4>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014f0:	4b34      	ldr	r3, [pc, #208]	@ (80015c4 <SystemInit+0xe8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 030f 	and.w	r3, r3, #15
 80014f8:	2b06      	cmp	r3, #6
 80014fa:	d807      	bhi.n	800150c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014fc:	4b31      	ldr	r3, [pc, #196]	@ (80015c4 <SystemInit+0xe8>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f023 030f 	bic.w	r3, r3, #15
 8001504:	4a2f      	ldr	r2, [pc, #188]	@ (80015c4 <SystemInit+0xe8>)
 8001506:	f043 0307 	orr.w	r3, r3, #7
 800150a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800150c:	4b2e      	ldr	r3, [pc, #184]	@ (80015c8 <SystemInit+0xec>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a2d      	ldr	r2, [pc, #180]	@ (80015c8 <SystemInit+0xec>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001518:	4b2b      	ldr	r3, [pc, #172]	@ (80015c8 <SystemInit+0xec>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800151e:	4b2a      	ldr	r3, [pc, #168]	@ (80015c8 <SystemInit+0xec>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4929      	ldr	r1, [pc, #164]	@ (80015c8 <SystemInit+0xec>)
 8001524:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <SystemInit+0xf0>)
 8001526:	4013      	ands	r3, r2
 8001528:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800152a:	4b26      	ldr	r3, [pc, #152]	@ (80015c4 <SystemInit+0xe8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0308 	and.w	r3, r3, #8
 8001532:	2b00      	cmp	r3, #0
 8001534:	d007      	beq.n	8001546 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001536:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <SystemInit+0xe8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 030f 	bic.w	r3, r3, #15
 800153e:	4a21      	ldr	r2, [pc, #132]	@ (80015c4 <SystemInit+0xe8>)
 8001540:	f043 0307 	orr.w	r3, r3, #7
 8001544:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001546:	4b20      	ldr	r3, [pc, #128]	@ (80015c8 <SystemInit+0xec>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800154c:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <SystemInit+0xec>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001552:	4b1d      	ldr	r3, [pc, #116]	@ (80015c8 <SystemInit+0xec>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <SystemInit+0xec>)
 800155a:	4a1d      	ldr	r2, [pc, #116]	@ (80015d0 <SystemInit+0xf4>)
 800155c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800155e:	4b1a      	ldr	r3, [pc, #104]	@ (80015c8 <SystemInit+0xec>)
 8001560:	4a1c      	ldr	r2, [pc, #112]	@ (80015d4 <SystemInit+0xf8>)
 8001562:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001564:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <SystemInit+0xec>)
 8001566:	4a1c      	ldr	r2, [pc, #112]	@ (80015d8 <SystemInit+0xfc>)
 8001568:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800156a:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <SystemInit+0xec>)
 800156c:	2200      	movs	r2, #0
 800156e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <SystemInit+0xec>)
 8001572:	4a19      	ldr	r2, [pc, #100]	@ (80015d8 <SystemInit+0xfc>)
 8001574:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001576:	4b14      	ldr	r3, [pc, #80]	@ (80015c8 <SystemInit+0xec>)
 8001578:	2200      	movs	r2, #0
 800157a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <SystemInit+0xec>)
 800157e:	4a16      	ldr	r2, [pc, #88]	@ (80015d8 <SystemInit+0xfc>)
 8001580:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <SystemInit+0xec>)
 8001584:	2200      	movs	r2, #0
 8001586:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001588:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <SystemInit+0xec>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0e      	ldr	r2, [pc, #56]	@ (80015c8 <SystemInit+0xec>)
 800158e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001592:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <SystemInit+0xec>)
 8001596:	2200      	movs	r2, #0
 8001598:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <SystemInit+0x100>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <SystemInit+0x104>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015a6:	d202      	bcs.n	80015ae <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	@ (80015e4 <SystemInit+0x108>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	@ (80015e8 <SystemInit+0x10c>)
 80015b0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015b4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015b6:	bf00      	nop
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00
 80015c4:	52002000 	.word	0x52002000
 80015c8:	58024400 	.word	0x58024400
 80015cc:	eaf6ed7f 	.word	0xeaf6ed7f
 80015d0:	02020200 	.word	0x02020200
 80015d4:	01ff0000 	.word	0x01ff0000
 80015d8:	01010280 	.word	0x01010280
 80015dc:	5c001000 	.word	0x5c001000
 80015e0:	ffff0000 	.word	0xffff0000
 80015e4:	51008108 	.word	0x51008108
 80015e8:	52004000 	.word	0x52004000

080015ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001602:	463b      	mov	r3, r7
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800160c:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <MX_TIM1_Init+0xa4>)
 800160e:	4a21      	ldr	r2, [pc, #132]	@ (8001694 <MX_TIM1_Init+0xa8>)
 8001610:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001612:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <MX_TIM1_Init+0xa4>)
 8001614:	2200      	movs	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <MX_TIM1_Init+0xa4>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <MX_TIM1_Init+0xa4>)
 8001620:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001624:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <MX_TIM1_Init+0xa4>)
 8001628:	2200      	movs	r2, #0
 800162a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800162c:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <MX_TIM1_Init+0xa4>)
 800162e:	2200      	movs	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001632:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <MX_TIM1_Init+0xa4>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001638:	4815      	ldr	r0, [pc, #84]	@ (8001690 <MX_TIM1_Init+0xa4>)
 800163a:	f005 f9f4 	bl	8006a26 <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001644:	f7ff fdb6 	bl	80011b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4619      	mov	r1, r3
 8001656:	480e      	ldr	r0, [pc, #56]	@ (8001690 <MX_TIM1_Init+0xa4>)
 8001658:	f005 fdb8 	bl	80071cc <HAL_TIM_SlaveConfigSynchro>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001662:	f7ff fda7 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001672:	463b      	mov	r3, r7
 8001674:	4619      	mov	r1, r3
 8001676:	4806      	ldr	r0, [pc, #24]	@ (8001690 <MX_TIM1_Init+0xa4>)
 8001678:	f006 fb14 	bl	8007ca4 <HAL_TIMEx_MasterConfigSynchronization>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001682:	f7ff fd97 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001686:	bf00      	nop
 8001688:	3720      	adds	r7, #32
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2400035c 	.word	0x2400035c
 8001694:	40010000 	.word	0x40010000

08001698 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08e      	sub	sp, #56	@ 0x38
 800169c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016a2:	2200      	movs	r2, #0
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	609a      	str	r2, [r3, #8]
 80016aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	f107 031c 	add.w	r3, r7, #28
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b8:	463b      	mov	r3, r7
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
 80016c4:	611a      	str	r2, [r3, #16]
 80016c6:	615a      	str	r2, [r3, #20]
 80016c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016ca:	4b2c      	ldr	r3, [pc, #176]	@ (800177c <MX_TIM4_Init+0xe4>)
 80016cc:	4a2c      	ldr	r2, [pc, #176]	@ (8001780 <MX_TIM4_Init+0xe8>)
 80016ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016d0:	4b2a      	ldr	r3, [pc, #168]	@ (800177c <MX_TIM4_Init+0xe4>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d6:	4b29      	ldr	r3, [pc, #164]	@ (800177c <MX_TIM4_Init+0xe4>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 80016dc:	4b27      	ldr	r3, [pc, #156]	@ (800177c <MX_TIM4_Init+0xe4>)
 80016de:	2209      	movs	r2, #9
 80016e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b26      	ldr	r3, [pc, #152]	@ (800177c <MX_TIM4_Init+0xe4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e8:	4b24      	ldr	r3, [pc, #144]	@ (800177c <MX_TIM4_Init+0xe4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016ee:	4823      	ldr	r0, [pc, #140]	@ (800177c <MX_TIM4_Init+0xe4>)
 80016f0:	f005 f999 	bl	8006a26 <HAL_TIM_Base_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80016fa:	f7ff fd5b 	bl	80011b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001702:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001704:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001708:	4619      	mov	r1, r3
 800170a:	481c      	ldr	r0, [pc, #112]	@ (800177c <MX_TIM4_Init+0xe4>)
 800170c:	f005 fc66 	bl	8006fdc <HAL_TIM_ConfigClockSource>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001716:	f7ff fd4d 	bl	80011b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800171a:	4818      	ldr	r0, [pc, #96]	@ (800177c <MX_TIM4_Init+0xe4>)
 800171c:	f005 f9da 	bl	8006ad4 <HAL_TIM_PWM_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001726:	f7ff fd45 	bl	80011b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001732:	f107 031c 	add.w	r3, r7, #28
 8001736:	4619      	mov	r1, r3
 8001738:	4810      	ldr	r0, [pc, #64]	@ (800177c <MX_TIM4_Init+0xe4>)
 800173a:	f006 fab3 	bl	8007ca4 <HAL_TIMEx_MasterConfigSynchronization>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001744:	f7ff fd36 	bl	80011b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001748:	2360      	movs	r3, #96	@ 0x60
 800174a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 800174c:	2305      	movs	r3, #5
 800174e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001758:	463b      	mov	r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	4619      	mov	r1, r3
 800175e:	4807      	ldr	r0, [pc, #28]	@ (800177c <MX_TIM4_Init+0xe4>)
 8001760:	f005 fb28 	bl	8006db4 <HAL_TIM_PWM_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800176a:	f7ff fd23 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800176e:	4803      	ldr	r0, [pc, #12]	@ (800177c <MX_TIM4_Init+0xe4>)
 8001770:	f000 f842 	bl	80017f8 <HAL_TIM_MspPostInit>

}
 8001774:	bf00      	nop
 8001776:	3738      	adds	r7, #56	@ 0x38
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	240003a8 	.word	0x240003a8
 8001780:	40000800 	.word	0x40000800

08001784 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001784:	b480      	push	{r7}
 8001786:	b085      	sub	sp, #20
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a16      	ldr	r2, [pc, #88]	@ (80017ec <HAL_TIM_Base_MspInit+0x68>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d10f      	bne.n	80017b6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001796:	4b16      	ldr	r3, [pc, #88]	@ (80017f0 <HAL_TIM_Base_MspInit+0x6c>)
 8001798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800179c:	4a14      	ldr	r2, [pc, #80]	@ (80017f0 <HAL_TIM_Base_MspInit+0x6c>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017a6:	4b12      	ldr	r3, [pc, #72]	@ (80017f0 <HAL_TIM_Base_MspInit+0x6c>)
 80017a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80017b4:	e013      	b.n	80017de <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM4)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a0e      	ldr	r2, [pc, #56]	@ (80017f4 <HAL_TIM_Base_MspInit+0x70>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d10e      	bne.n	80017de <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017c0:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_TIM_Base_MspInit+0x6c>)
 80017c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017c6:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_TIM_Base_MspInit+0x6c>)
 80017c8:	f043 0304 	orr.w	r3, r3, #4
 80017cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017d0:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <HAL_TIM_Base_MspInit+0x6c>)
 80017d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80017d6:	f003 0304 	and.w	r3, r3, #4
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
}
 80017de:	bf00      	nop
 80017e0:	3714      	adds	r7, #20
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40010000 	.word	0x40010000
 80017f0:	58024400 	.word	0x58024400
 80017f4:	40000800 	.word	0x40000800

080017f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <HAL_TIM_MspPostInit+0x68>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d11e      	bne.n	8001858 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_TIM_MspPostInit+0x6c>)
 800181c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001820:	4a10      	ldr	r2, [pc, #64]	@ (8001864 <HAL_TIM_MspPostInit+0x6c>)
 8001822:	f043 0302 	orr.w	r3, r3, #2
 8001826:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800182a:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <HAL_TIM_MspPostInit+0x6c>)
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001838:	2340      	movs	r3, #64	@ 0x40
 800183a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001848:	2302      	movs	r3, #2
 800184a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	4805      	ldr	r0, [pc, #20]	@ (8001868 <HAL_TIM_MspPostInit+0x70>)
 8001854:	f001 f800 	bl	8002858 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001858:	bf00      	nop
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40000800 	.word	0x40000800
 8001864:	58024400 	.word	0x58024400
 8001868:	58020400 	.word	0x58020400

0800186c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001870:	4b22      	ldr	r3, [pc, #136]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 8001872:	4a23      	ldr	r2, [pc, #140]	@ (8001900 <MX_USART3_UART_Init+0x94>)
 8001874:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001876:	4b21      	ldr	r3, [pc, #132]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 8001878:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800187c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800188a:	4b1c      	ldr	r3, [pc, #112]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b1a      	ldr	r3, [pc, #104]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b19      	ldr	r3, [pc, #100]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018a2:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018a8:	4b14      	ldr	r3, [pc, #80]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018ae:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018b4:	4811      	ldr	r0, [pc, #68]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 80018b6:	f006 fa83 	bl	8007dc0 <HAL_UART_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018c0:	f7ff fc78 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c4:	2100      	movs	r1, #0
 80018c6:	480d      	ldr	r0, [pc, #52]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 80018c8:	f007 fb19 	bl	8008efe <HAL_UARTEx_SetTxFifoThreshold>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018d2:	f7ff fc6f 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d6:	2100      	movs	r1, #0
 80018d8:	4808      	ldr	r0, [pc, #32]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 80018da:	f007 fb4e 	bl	8008f7a <HAL_UARTEx_SetRxFifoThreshold>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80018e4:	f7ff fc66 	bl	80011b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	@ (80018fc <MX_USART3_UART_Init+0x90>)
 80018ea:	f007 facf 	bl	8008e8c <HAL_UARTEx_DisableFifoMode>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80018f4:	f7ff fc5e 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	240003f4 	.word	0x240003f4
 8001900:	40004800 	.word	0x40004800

08001904 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b0ba      	sub	sp, #232	@ 0xe8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800191c:	f107 0310 	add.w	r3, r7, #16
 8001920:	22c0      	movs	r2, #192	@ 0xc0
 8001922:	2100      	movs	r1, #0
 8001924:	4618      	mov	r0, r3
 8001926:	f007 fedd 	bl	80096e4 <memset>
  if(uartHandle->Instance==USART3)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a27      	ldr	r2, [pc, #156]	@ (80019cc <HAL_UART_MspInit+0xc8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d146      	bne.n	80019c2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001934:	f04f 0202 	mov.w	r2, #2
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001940:	2300      	movs	r3, #0
 8001942:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001946:	f107 0310 	add.w	r3, r7, #16
 800194a:	4618      	mov	r0, r3
 800194c:	f003 f900 	bl	8004b50 <HAL_RCCEx_PeriphCLKConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001956:	f7ff fc2d 	bl	80011b4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800195a:	4b1d      	ldr	r3, [pc, #116]	@ (80019d0 <HAL_UART_MspInit+0xcc>)
 800195c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001960:	4a1b      	ldr	r2, [pc, #108]	@ (80019d0 <HAL_UART_MspInit+0xcc>)
 8001962:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001966:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800196a:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <HAL_UART_MspInit+0xcc>)
 800196c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001970:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001978:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <HAL_UART_MspInit+0xcc>)
 800197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197e:	4a14      	ldr	r2, [pc, #80]	@ (80019d0 <HAL_UART_MspInit+0xcc>)
 8001980:	f043 0308 	orr.w	r3, r3, #8
 8001984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <HAL_UART_MspInit+0xcc>)
 800198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001996:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800199a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019b0:	2307      	movs	r3, #7
 80019b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80019ba:	4619      	mov	r1, r3
 80019bc:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <HAL_UART_MspInit+0xd0>)
 80019be:	f000 ff4b 	bl	8002858 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019c2:	bf00      	nop
 80019c4:	37e8      	adds	r7, #232	@ 0xe8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40004800 	.word	0x40004800
 80019d0:	58024400 	.word	0x58024400
 80019d4:	58020c00 	.word	0x58020c00

080019d8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80019dc:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019de:	4a16      	ldr	r2, [pc, #88]	@ (8001a38 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80019e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80019e2:	4b14      	ldr	r3, [pc, #80]	@ (8001a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019e4:	2209      	movs	r2, #9
 80019e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80019e8:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019ea:	2202      	movs	r2, #2
 80019ec:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80019ee:	4b11      	ldr	r3, [pc, #68]	@ (8001a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019f6:	2202      	movs	r2, #2
 80019f8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80019fc:	2201      	movs	r2, #1
 80019fe:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001a00:	4b0c      	ldr	r3, [pc, #48]	@ (8001a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001a06:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a0e:	2201      	movs	r2, #1
 8001a10:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001a12:	4b08      	ldr	r3, [pc, #32]	@ (8001a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001a1e:	4805      	ldr	r0, [pc, #20]	@ (8001a34 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001a20:	f001 fecb 	bl	80037ba <HAL_PCD_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001a2a:	f7ff fbc3 	bl	80011b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	24000488 	.word	0x24000488
 8001a38:	40080000 	.word	0x40080000

08001a3c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b0ba      	sub	sp, #232	@ 0xe8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	22c0      	movs	r2, #192	@ 0xc0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f007 fe41 	bl	80096e4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a30      	ldr	r2, [pc, #192]	@ (8001b28 <HAL_PCD_MspInit+0xec>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d159      	bne.n	8001b20 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001a6c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001a78:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4618      	mov	r0, r3
 8001a86:	f003 f863 	bl	8004b50 <HAL_RCCEx_PeriphCLKConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001a90:	f7ff fb90 	bl	80011b4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001a94:	f001 fffc 	bl	8003a90 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b24      	ldr	r3, [pc, #144]	@ (8001b2c <HAL_PCD_MspInit+0xf0>)
 8001a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9e:	4a23      	ldr	r2, [pc, #140]	@ (8001b2c <HAL_PCD_MspInit+0xf0>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa8:	4b20      	ldr	r3, [pc, #128]	@ (8001b2c <HAL_PCD_MspInit+0xf0>)
 8001aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ab6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4817      	ldr	r0, [pc, #92]	@ (8001b30 <HAL_PCD_MspInit+0xf4>)
 8001ad2:	f000 fec1 	bl	8002858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001ad6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001ada:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001af0:	230a      	movs	r3, #10
 8001af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001afa:	4619      	mov	r1, r3
 8001afc:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <HAL_PCD_MspInit+0xf4>)
 8001afe:	f000 feab 	bl	8002858 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <HAL_PCD_MspInit+0xf0>)
 8001b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b08:	4a08      	ldr	r2, [pc, #32]	@ (8001b2c <HAL_PCD_MspInit+0xf0>)
 8001b0a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001b0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_PCD_MspInit+0xf0>)
 8001b14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001b18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001b1c:	60bb      	str	r3, [r7, #8]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001b20:	bf00      	nop
 8001b22:	37e8      	adds	r7, #232	@ 0xe8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40080000 	.word	0x40080000
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	58020000 	.word	0x58020000

08001b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b38:	f7ff fcd0 	bl	80014dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b3c:	480c      	ldr	r0, [pc, #48]	@ (8001b70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b3e:	490d      	ldr	r1, [pc, #52]	@ (8001b74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b40:	4a0d      	ldr	r2, [pc, #52]	@ (8001b78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b44:	e002      	b.n	8001b4c <LoopCopyDataInit>

08001b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4a:	3304      	adds	r3, #4

08001b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b50:	d3f9      	bcc.n	8001b46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b52:	4a0a      	ldr	r2, [pc, #40]	@ (8001b7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b54:	4c0a      	ldr	r4, [pc, #40]	@ (8001b80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b58:	e001      	b.n	8001b5e <LoopFillZerobss>

08001b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b5c:	3204      	adds	r2, #4

08001b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b60:	d3fb      	bcc.n	8001b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b62:	f007 fdcd 	bl	8009700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b66:	f7ff fa45 	bl	8000ff4 <main>
  bx  lr
 8001b6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b6c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b74:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8001b78:	0800a0c4 	.word	0x0800a0c4
  ldr r2, =_sbss
 8001b7c:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8001b80:	24000ab8 	.word	0x24000ab8

08001b84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b84:	e7fe      	b.n	8001b84 <ADC3_IRQHandler>
	...

08001b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8e:	2003      	movs	r0, #3
 8001b90:	f000 f982 	bl	8001e98 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b94:	f002 fe06 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <HAL_Init+0x68>)
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	4913      	ldr	r1, [pc, #76]	@ (8001bf4 <HAL_Init+0x6c>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001bb2:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <HAL_Init+0x68>)
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	4a0e      	ldr	r2, [pc, #56]	@ (8001bf4 <HAL_Init+0x6c>)
 8001bbc:	5cd3      	ldrb	r3, [r2, r3]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc8:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <HAL_Init+0x70>)
 8001bca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8001bfc <HAL_Init+0x74>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f000 f814 	bl	8001c00 <HAL_InitTick>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e002      	b.n	8001be8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001be2:	f7ff fbfb 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	58024400 	.word	0x58024400
 8001bf4:	0800a048 	.word	0x0800a048
 8001bf8:	24000004 	.word	0x24000004
 8001bfc:	24000000 	.word	0x24000000

08001c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001c08:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <HAL_InitTick+0x60>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d101      	bne.n	8001c14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e021      	b.n	8001c58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001c14:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <HAL_InitTick+0x64>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b11      	ldr	r3, [pc, #68]	@ (8001c60 <HAL_InitTick+0x60>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f959 	bl	8001ee2 <HAL_SYSTICK_Config>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00e      	b.n	8001c58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d80a      	bhi.n	8001c56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f000 f931 	bl	8001eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	@ (8001c68 <HAL_InitTick+0x68>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	2400000c 	.word	0x2400000c
 8001c64:	24000000 	.word	0x24000000
 8001c68:	24000008 	.word	0x24000008

08001c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c70:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <HAL_IncTick+0x20>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b06      	ldr	r3, [pc, #24]	@ (8001c90 <HAL_IncTick+0x24>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4413      	add	r3, r2
 8001c7c:	4a04      	ldr	r2, [pc, #16]	@ (8001c90 <HAL_IncTick+0x24>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	2400000c 	.word	0x2400000c
 8001c90:	2400096c 	.word	0x2400096c

08001c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  return uwTick;
 8001c98:	4b03      	ldr	r3, [pc, #12]	@ (8001ca8 <HAL_GetTick+0x14>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	2400096c 	.word	0x2400096c

08001cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb4:	f7ff ffee 	bl	8001c94 <HAL_GetTick>
 8001cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc4:	d005      	beq.n	8001cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf0 <HAL_Delay+0x44>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4413      	add	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cd2:	bf00      	nop
 8001cd4:	f7ff ffde 	bl	8001c94 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d8f7      	bhi.n	8001cd4 <HAL_Delay+0x28>
  {
  }
}
 8001ce4:	bf00      	nop
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2400000c 	.word	0x2400000c

08001cf4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cf8:	4b03      	ldr	r3, [pc, #12]	@ (8001d08 <HAL_GetREVID+0x14>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0c1b      	lsrs	r3, r3, #16
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	5c001000 	.word	0x5c001000

08001d0c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001d14:	4b06      	ldr	r3, [pc, #24]	@ (8001d30 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001d1c:	4904      	ldr	r1, [pc, #16]	@ (8001d30 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	58000400 	.word	0x58000400

08001d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d44:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <__NVIC_SetPriorityGrouping+0x40>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d5c:	4b06      	ldr	r3, [pc, #24]	@ (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d62:	4a04      	ldr	r2, [pc, #16]	@ (8001d74 <__NVIC_SetPriorityGrouping+0x40>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	60d3      	str	r3, [r2, #12]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00
 8001d78:	05fa0000 	.word	0x05fa0000

08001d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d80:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <__NVIC_GetPriorityGrouping+0x18>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 0307 	and.w	r3, r3, #7
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	@ (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	@ (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	88fb      	ldrh	r3, [r7, #6]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	@ 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	@ 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e64:	d301      	bcc.n	8001e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00f      	b.n	8001e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e94 <SysTick_Config+0x40>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e72:	210f      	movs	r1, #15
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f7ff ff8e 	bl	8001d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e7c:	4b05      	ldr	r3, [pc, #20]	@ (8001e94 <SysTick_Config+0x40>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e82:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <SysTick_Config+0x40>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff47 	bl	8001d34 <__NVIC_SetPriorityGrouping>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ebc:	f7ff ff5e 	bl	8001d7c <__NVIC_GetPriorityGrouping>
 8001ec0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	68b9      	ldr	r1, [r7, #8]
 8001ec6:	6978      	ldr	r0, [r7, #20]
 8001ec8:	f7ff ff90 	bl	8001dec <NVIC_EncodePriority>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff5f 	bl	8001d98 <__NVIC_SetPriority>
}
 8001eda:	bf00      	nop
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ffb2 	bl	8001e54 <SysTick_Config>
 8001ef0:	4603      	mov	r3, r0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e069      	b.n	8001fe2 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fbe4 	bl	80006e8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2200      	movs	r2, #0
 8001f34:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6819      	ldr	r1, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b2a      	ldr	r3, [pc, #168]	@ (8001fec <HAL_DCMI_Init+0xf0>)
 8001f42:	400b      	ands	r3, r1
 8001f44:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001f5a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001f66:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	699b      	ldr	r3, [r3, #24]
 8001f6c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001f72:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f78:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001f7e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f84:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8001f8a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b10      	cmp	r3, #16
 8001f9a:	d112      	bne.n	8001fc2 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7f1b      	ldrb	r3, [r3, #28]
 8001fa0:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7f5b      	ldrb	r3, [r3, #29]
 8001fa6:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001fa8:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7f9b      	ldrb	r3, [r3, #30]
 8001fae:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8001fb0:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7fdb      	ldrb	r3, [r3, #31]
 8001fb8:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8001fbe:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8001fc0:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 021e 	orr.w	r2, r2, #30
 8001fd0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	ffe0f007 	.word	0xffe0f007

08001ff0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0e3      	b.n	80021ca <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002008:	2b00      	cmp	r3, #0
 800200a:	d106      	bne.n	800201a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2223      	movs	r2, #35	@ 0x23
 8002010:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7fe fc83 	bl	8000920 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800201a:	4b6e      	ldr	r3, [pc, #440]	@ (80021d4 <HAL_ETH_Init+0x1e4>)
 800201c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002020:	4a6c      	ldr	r2, [pc, #432]	@ (80021d4 <HAL_ETH_Init+0x1e4>)
 8002022:	f043 0302 	orr.w	r3, r3, #2
 8002026:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800202a:	4b6a      	ldr	r3, [pc, #424]	@ (80021d4 <HAL_ETH_Init+0x1e4>)
 800202c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	7a1b      	ldrb	r3, [r3, #8]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d103      	bne.n	8002048 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fe63 	bl	8001d0c <HAL_SYSCFG_ETHInterfaceSelect>
 8002046:	e003      	b.n	8002050 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002048:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800204c:	f7ff fe5e 	bl	8001d0c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002050:	4b61      	ldr	r3, [pc, #388]	@ (80021d8 <HAL_ETH_Init+0x1e8>)
 8002052:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6812      	ldr	r2, [r2, #0]
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800206a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800206c:	f7ff fe12 	bl	8001c94 <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002072:	e011      	b.n	8002098 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002074:	f7ff fe0e 	bl	8001c94 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002082:	d909      	bls.n	8002098 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2204      	movs	r2, #4
 8002088:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	22e0      	movs	r2, #224	@ 0xe0
 8002090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e098      	b.n	80021ca <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1e4      	bne.n	8002074 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f89e 	bl	80021ec <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80020b0:	f002 fcf2 	bl	8004a98 <HAL_RCC_GetHCLKFreq>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4a49      	ldr	r2, [pc, #292]	@ (80021dc <HAL_ETH_Init+0x1ec>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	0c9a      	lsrs	r2, r3, #18
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3a01      	subs	r2, #1
 80020c4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f000 fa81 	bl	80025d0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020d6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80020da:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020ea:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	22e0      	movs	r2, #224	@ 0xe0
 8002106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e05d      	b.n	80021ca <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002116:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800211a:	4b31      	ldr	r3, [pc, #196]	@ (80021e0 <HAL_ETH_Init+0x1f0>)
 800211c:	4013      	ands	r3, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6952      	ldr	r2, [r2, #20]
 8002122:	0051      	lsls	r1, r2, #1
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	430b      	orrs	r3, r1
 800212a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800212e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fae9 	bl	800270a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 fb2f 	bl	800279c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	3305      	adds	r3, #5
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	021a      	lsls	r2, r3, #8
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	3304      	adds	r3, #4
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	430a      	orrs	r2, r1
 8002158:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	3303      	adds	r3, #3
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	061a      	lsls	r2, r3, #24
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	3302      	adds	r3, #2
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	041b      	lsls	r3, r3, #16
 8002170:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	3301      	adds	r3, #1
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800217c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800218a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800218c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <HAL_ETH_Init+0x1f4>)
 800219e:	430b      	orrs	r3, r1
 80021a0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4b0d      	ldr	r3, [pc, #52]	@ (80021e8 <HAL_ETH_Init+0x1f8>)
 80021b2:	430b      	orrs	r3, r1
 80021b4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2210      	movs	r2, #16
 80021c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	58024400 	.word	0x58024400
 80021d8:	58000400 	.word	0x58000400
 80021dc:	431bde83 	.word	0x431bde83
 80021e0:	ffff8001 	.word	0xffff8001
 80021e4:	0c020060 	.word	0x0c020060
 80021e8:	0c20c000 	.word	0x0c20c000

080021ec <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002204:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002206:	f002 fc47 	bl	8004a98 <HAL_RCC_GetHCLKFreq>
 800220a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	4a1a      	ldr	r2, [pc, #104]	@ (8002278 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d804      	bhi.n	800221e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e022      	b.n	8002264 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	4a16      	ldr	r2, [pc, #88]	@ (800227c <HAL_ETH_SetMDIOClockRange+0x90>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d204      	bcs.n	8002230 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e019      	b.n	8002264 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4a13      	ldr	r2, [pc, #76]	@ (8002280 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d915      	bls.n	8002264 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4a12      	ldr	r2, [pc, #72]	@ (8002284 <HAL_ETH_SetMDIOClockRange+0x98>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d804      	bhi.n	800224a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	e00c      	b.n	8002264 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	4a0e      	ldr	r2, [pc, #56]	@ (8002288 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d804      	bhi.n	800225c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	e003      	b.n	8002264 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002262:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	02160ebf 	.word	0x02160ebf
 800227c:	03938700 	.word	0x03938700
 8002280:	05f5e0ff 	.word	0x05f5e0ff
 8002284:	08f0d17f 	.word	0x08f0d17f
 8002288:	0ee6b27f 	.word	0x0ee6b27f

0800228c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800229e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	791b      	ldrb	r3, [r3, #4]
 80022a4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80022a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	7b1b      	ldrb	r3, [r3, #12]
 80022ac:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80022ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	7b5b      	ldrb	r3, [r3, #13]
 80022b4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80022b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	7b9b      	ldrb	r3, [r3, #14]
 80022bc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80022be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	7bdb      	ldrb	r3, [r3, #15]
 80022c4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80022c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	7c12      	ldrb	r2, [r2, #16]
 80022cc:	2a00      	cmp	r2, #0
 80022ce:	d102      	bne.n	80022d6 <ETH_SetMACConfig+0x4a>
 80022d0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022d4:	e000      	b.n	80022d8 <ETH_SetMACConfig+0x4c>
 80022d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80022d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	7c52      	ldrb	r2, [r2, #17]
 80022de:	2a00      	cmp	r2, #0
 80022e0:	d102      	bne.n	80022e8 <ETH_SetMACConfig+0x5c>
 80022e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022e6:	e000      	b.n	80022ea <ETH_SetMACConfig+0x5e>
 80022e8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80022ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	7c9b      	ldrb	r3, [r3, #18]
 80022f0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80022f2:	431a      	orrs	r2, r3
               macconf->Speed |
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80022f8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80022fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	7f1b      	ldrb	r3, [r3, #28]
 8002304:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002306:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	7f5b      	ldrb	r3, [r3, #29]
 800230c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800230e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	7f92      	ldrb	r2, [r2, #30]
 8002314:	2a00      	cmp	r2, #0
 8002316:	d102      	bne.n	800231e <ETH_SetMACConfig+0x92>
 8002318:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800231c:	e000      	b.n	8002320 <ETH_SetMACConfig+0x94>
 800231e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002320:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	7fdb      	ldrb	r3, [r3, #31]
 8002326:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002328:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002330:	2a00      	cmp	r2, #0
 8002332:	d102      	bne.n	800233a <ETH_SetMACConfig+0xae>
 8002334:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002338:	e000      	b.n	800233c <ETH_SetMACConfig+0xb0>
 800233a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800233c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002342:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800234a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800234c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002352:	4313      	orrs	r3, r2
 8002354:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	4b56      	ldr	r3, [pc, #344]	@ (80024b8 <ETH_SetMACConfig+0x22c>)
 800235e:	4013      	ands	r3, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	68f9      	ldr	r1, [r7, #12]
 8002366:	430b      	orrs	r3, r1
 8002368:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002376:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002378:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002380:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002382:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800238a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800238c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002394:	2a00      	cmp	r2, #0
 8002396:	d102      	bne.n	800239e <ETH_SetMACConfig+0x112>
 8002398:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800239c:	e000      	b.n	80023a0 <ETH_SetMACConfig+0x114>
 800239e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80023a0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4b42      	ldr	r3, [pc, #264]	@ (80024bc <ETH_SetMACConfig+0x230>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	68f9      	ldr	r1, [r7, #12]
 80023ba:	430b      	orrs	r3, r1
 80023bc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023c4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80023ca:	4313      	orrs	r3, r2
 80023cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	4b3a      	ldr	r3, [pc, #232]	@ (80024c0 <ETH_SetMACConfig+0x234>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	68f9      	ldr	r1, [r7, #12]
 80023de:	430b      	orrs	r3, r1
 80023e0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80023e8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80023ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80023f6:	2a00      	cmp	r2, #0
 80023f8:	d101      	bne.n	80023fe <ETH_SetMACConfig+0x172>
 80023fa:	2280      	movs	r2, #128	@ 0x80
 80023fc:	e000      	b.n	8002400 <ETH_SetMACConfig+0x174>
 80023fe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002400:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002406:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002408:	4313      	orrs	r3, r2
 800240a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002412:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002416:	4013      	ands	r3, r2
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6812      	ldr	r2, [r2, #0]
 800241c:	68f9      	ldr	r1, [r7, #12]
 800241e:	430b      	orrs	r3, r1
 8002420:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002428:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002430:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800243e:	f023 0103 	bic.w	r1, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	430a      	orrs	r2, r1
 800244a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002456:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002472:	2a00      	cmp	r2, #0
 8002474:	d101      	bne.n	800247a <ETH_SetMACConfig+0x1ee>
 8002476:	2240      	movs	r2, #64	@ 0x40
 8002478:	e000      	b.n	800247c <ETH_SetMACConfig+0x1f0>
 800247a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800247c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002484:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002486:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800248e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002490:	4313      	orrs	r3, r2
 8002492:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800249c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	430a      	orrs	r2, r1
 80024a8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	00048083 	.word	0x00048083
 80024bc:	c0f88000 	.word	0xc0f88000
 80024c0:	fffffef0 	.word	0xfffffef0

080024c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b38      	ldr	r3, [pc, #224]	@ (80025bc <ETH_SetDMAConfig+0xf8>)
 80024da:	4013      	ands	r3, r2
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	6811      	ldr	r1, [r2, #0]
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	6812      	ldr	r2, [r2, #0]
 80024e4:	430b      	orrs	r3, r1
 80024e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80024ea:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	791b      	ldrb	r3, [r3, #4]
 80024f0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	7b1b      	ldrb	r3, [r3, #12]
 80024fc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	4b2c      	ldr	r3, [pc, #176]	@ (80025c0 <ETH_SetDMAConfig+0xfc>)
 800250e:	4013      	ands	r3, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	68f9      	ldr	r1, [r7, #12]
 8002516:	430b      	orrs	r3, r1
 8002518:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800251c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	7b5b      	ldrb	r3, [r3, #13]
 8002522:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002528:	4313      	orrs	r3, r2
 800252a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002534:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002538:	4b22      	ldr	r3, [pc, #136]	@ (80025c4 <ETH_SetDMAConfig+0x100>)
 800253a:	4013      	ands	r3, r2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6812      	ldr	r2, [r2, #0]
 8002540:	68f9      	ldr	r1, [r7, #12]
 8002542:	430b      	orrs	r3, r1
 8002544:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002548:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	7d1b      	ldrb	r3, [r3, #20]
 8002554:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002556:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	7f5b      	ldrb	r3, [r3, #29]
 800255c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800255e:	4313      	orrs	r3, r2
 8002560:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800256a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800256e:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <ETH_SetDMAConfig+0x104>)
 8002570:	4013      	ands	r3, r2
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6812      	ldr	r2, [r2, #0]
 8002576:	68f9      	ldr	r1, [r7, #12]
 8002578:	430b      	orrs	r3, r1
 800257a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800257e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	7f1b      	ldrb	r3, [r3, #28]
 8002586:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800258c:	4313      	orrs	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002598:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800259c:	4b0b      	ldr	r3, [pc, #44]	@ (80025cc <ETH_SetDMAConfig+0x108>)
 800259e:	4013      	ands	r3, r2
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	68f9      	ldr	r1, [r7, #12]
 80025a6:	430b      	orrs	r3, r1
 80025a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80025ac:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	ffff87fd 	.word	0xffff87fd
 80025c0:	ffff2ffe 	.word	0xffff2ffe
 80025c4:	fffec000 	.word	0xfffec000
 80025c8:	ffc0efef 	.word	0xffc0efef
 80025cc:	7fc0ffff 	.word	0x7fc0ffff

080025d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b0a4      	sub	sp, #144	@ 0x90
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80025de:	2300      	movs	r3, #0
 80025e0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80025e8:	2300      	movs	r3, #0
 80025ea:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80025ee:	2301      	movs	r3, #1
 80025f0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80025f4:	2301      	movs	r3, #1
 80025f6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80025fa:	2301      	movs	r3, #1
 80025fc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002606:	2301      	movs	r3, #1
 8002608:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800260c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002610:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002618:	2300      	movs	r3, #0
 800261a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800261c:	2300      	movs	r3, #0
 800261e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002622:	2300      	movs	r3, #0
 8002624:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002628:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800262c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800262e:	2300      	movs	r3, #0
 8002630:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002634:	2300      	movs	r3, #0
 8002636:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002638:	2301      	movs	r3, #1
 800263a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800263e:	2300      	movs	r3, #0
 8002640:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002644:	2300      	movs	r3, #0
 8002646:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800264a:	2300      	movs	r3, #0
 800264c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800264e:	2300      	movs	r3, #0
 8002650:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002652:	2300      	movs	r3, #0
 8002654:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002656:	2300      	movs	r3, #0
 8002658:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002662:	2301      	movs	r3, #1
 8002664:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002668:	2320      	movs	r3, #32
 800266a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800266e:	2301      	movs	r3, #1
 8002670:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002674:	2300      	movs	r3, #0
 8002676:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800267a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800267e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002680:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002684:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800268c:	2302      	movs	r3, #2
 800268e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002692:	2300      	movs	r3, #0
 8002694:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800269e:	2300      	movs	r3, #0
 80026a0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80026a4:	2301      	movs	r3, #1
 80026a6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80026aa:	2300      	movs	r3, #0
 80026ac:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80026b4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026b8:	4619      	mov	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fde6 	bl	800228c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80026c0:	2301      	movs	r3, #1
 80026c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80026c4:	2301      	movs	r3, #1
 80026c6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026da:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80026de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80026e4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80026e8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80026f0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80026f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80026f6:	f107 0308 	add.w	r3, r7, #8
 80026fa:	4619      	mov	r1, r3
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f7ff fee1 	bl	80024c4 <ETH_SetDMAConfig>
}
 8002702:	bf00      	nop
 8002704:	3790      	adds	r7, #144	@ 0x90
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800270a:	b480      	push	{r7}
 800270c:	b085      	sub	sp, #20
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	e01d      	b.n	8002754 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68d9      	ldr	r1, [r3, #12]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	440b      	add	r3, r1
 8002728:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2200      	movs	r2, #0
 8002734:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	2200      	movs	r2, #0
 800273a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002742:	68b9      	ldr	r1, [r7, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	3206      	adds	r2, #6
 800274a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	3301      	adds	r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b03      	cmp	r3, #3
 8002758:	d9de      	bls.n	8002718 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002768:	461a      	mov	r2, r3
 800276a:	2303      	movs	r3, #3
 800276c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68da      	ldr	r2, [r3, #12]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800277c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800278c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8002790:	bf00      	nop
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	e023      	b.n	80027f2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6919      	ldr	r1, [r3, #16]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	440b      	add	r3, r1
 80027ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2200      	movs	r2, #0
 80027c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2200      	movs	r2, #0
 80027d2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	2200      	movs	r2, #0
 80027d8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2200      	movs	r2, #0
 80027de:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	3212      	adds	r2, #18
 80027e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	3301      	adds	r3, #1
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d9d8      	bls.n	80027aa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800281e:	461a      	mov	r2, r3
 8002820:	2303      	movs	r3, #3
 8002822:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002832:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002846:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	@ 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002866:	4b89      	ldr	r3, [pc, #548]	@ (8002a8c <HAL_GPIO_Init+0x234>)
 8002868:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800286a:	e194      	b.n	8002b96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	2101      	movs	r1, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa01 f303 	lsl.w	r3, r1, r3
 8002878:	4013      	ands	r3, r2
 800287a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 8186 	beq.w	8002b90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d005      	beq.n	800289c <HAL_GPIO_Init+0x44>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0303 	and.w	r3, r3, #3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d130      	bne.n	80028fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028d2:	2201      	movs	r2, #1
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	f003 0201 	and.w	r2, r3, #1
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	2b03      	cmp	r3, #3
 8002908:	d017      	beq.n	800293a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	2203      	movs	r2, #3
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d123      	bne.n	800298e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	08da      	lsrs	r2, r3, #3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3208      	adds	r2, #8
 800294e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	220f      	movs	r2, #15
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4013      	ands	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	08da      	lsrs	r2, r3, #3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	3208      	adds	r2, #8
 8002988:	69b9      	ldr	r1, [r7, #24]
 800298a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	005b      	lsls	r3, r3, #1
 8002998:	2203      	movs	r2, #3
 800299a:	fa02 f303 	lsl.w	r3, r2, r3
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0203 	and.w	r2, r3, #3
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 80e0 	beq.w	8002b90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d0:	4b2f      	ldr	r3, [pc, #188]	@ (8002a90 <HAL_GPIO_Init+0x238>)
 80029d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029d6:	4a2e      	ldr	r2, [pc, #184]	@ (8002a90 <HAL_GPIO_Init+0x238>)
 80029d8:	f043 0302 	orr.w	r3, r3, #2
 80029dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80029e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a90 <HAL_GPIO_Init+0x238>)
 80029e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	60fb      	str	r3, [r7, #12]
 80029ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029ee:	4a29      	ldr	r2, [pc, #164]	@ (8002a94 <HAL_GPIO_Init+0x23c>)
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	089b      	lsrs	r3, r3, #2
 80029f4:	3302      	adds	r3, #2
 80029f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	220f      	movs	r2, #15
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a20      	ldr	r2, [pc, #128]	@ (8002a98 <HAL_GPIO_Init+0x240>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d052      	beq.n	8002ac0 <HAL_GPIO_Init+0x268>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002a9c <HAL_GPIO_Init+0x244>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d031      	beq.n	8002a86 <HAL_GPIO_Init+0x22e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa0 <HAL_GPIO_Init+0x248>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d02b      	beq.n	8002a82 <HAL_GPIO_Init+0x22a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa4 <HAL_GPIO_Init+0x24c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d025      	beq.n	8002a7e <HAL_GPIO_Init+0x226>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa8 <HAL_GPIO_Init+0x250>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01f      	beq.n	8002a7a <HAL_GPIO_Init+0x222>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8002aac <HAL_GPIO_Init+0x254>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d019      	beq.n	8002a76 <HAL_GPIO_Init+0x21e>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a1a      	ldr	r2, [pc, #104]	@ (8002ab0 <HAL_GPIO_Init+0x258>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <HAL_GPIO_Init+0x21a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a19      	ldr	r2, [pc, #100]	@ (8002ab4 <HAL_GPIO_Init+0x25c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00d      	beq.n	8002a6e <HAL_GPIO_Init+0x216>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a18      	ldr	r2, [pc, #96]	@ (8002ab8 <HAL_GPIO_Init+0x260>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d007      	beq.n	8002a6a <HAL_GPIO_Init+0x212>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a17      	ldr	r2, [pc, #92]	@ (8002abc <HAL_GPIO_Init+0x264>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d101      	bne.n	8002a66 <HAL_GPIO_Init+0x20e>
 8002a62:	2309      	movs	r3, #9
 8002a64:	e02d      	b.n	8002ac2 <HAL_GPIO_Init+0x26a>
 8002a66:	230a      	movs	r3, #10
 8002a68:	e02b      	b.n	8002ac2 <HAL_GPIO_Init+0x26a>
 8002a6a:	2308      	movs	r3, #8
 8002a6c:	e029      	b.n	8002ac2 <HAL_GPIO_Init+0x26a>
 8002a6e:	2307      	movs	r3, #7
 8002a70:	e027      	b.n	8002ac2 <HAL_GPIO_Init+0x26a>
 8002a72:	2306      	movs	r3, #6
 8002a74:	e025      	b.n	8002ac2 <HAL_GPIO_Init+0x26a>
 8002a76:	2305      	movs	r3, #5
 8002a78:	e023      	b.n	8002ac2 <HAL_GPIO_Init+0x26a>
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	e021      	b.n	8002ac2 <HAL_GPIO_Init+0x26a>
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e01f      	b.n	8002ac2 <HAL_GPIO_Init+0x26a>
 8002a82:	2302      	movs	r3, #2
 8002a84:	e01d      	b.n	8002ac2 <HAL_GPIO_Init+0x26a>
 8002a86:	2301      	movs	r3, #1
 8002a88:	e01b      	b.n	8002ac2 <HAL_GPIO_Init+0x26a>
 8002a8a:	bf00      	nop
 8002a8c:	58000080 	.word	0x58000080
 8002a90:	58024400 	.word	0x58024400
 8002a94:	58000400 	.word	0x58000400
 8002a98:	58020000 	.word	0x58020000
 8002a9c:	58020400 	.word	0x58020400
 8002aa0:	58020800 	.word	0x58020800
 8002aa4:	58020c00 	.word	0x58020c00
 8002aa8:	58021000 	.word	0x58021000
 8002aac:	58021400 	.word	0x58021400
 8002ab0:	58021800 	.word	0x58021800
 8002ab4:	58021c00 	.word	0x58021c00
 8002ab8:	58022000 	.word	0x58022000
 8002abc:	58022400 	.word	0x58022400
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	f002 0203 	and.w	r2, r2, #3
 8002ac8:	0092      	lsls	r2, r2, #2
 8002aca:	4093      	lsls	r3, r2
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ad2:	4938      	ldr	r1, [pc, #224]	@ (8002bb4 <HAL_GPIO_Init+0x35c>)
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	089b      	lsrs	r3, r3, #2
 8002ad8:	3302      	adds	r3, #2
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002b34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	43db      	mvns	r3, r3
 8002b46:	69ba      	ldr	r2, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	3301      	adds	r3, #1
 8002b94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	f47f ae63 	bne.w	800286c <HAL_GPIO_Init+0x14>
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	bf00      	nop
 8002baa:	3724      	adds	r7, #36	@ 0x24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	58000400 	.word	0x58000400

08002bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002bd4:	e003      	b.n	8002bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	041a      	lsls	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	619a      	str	r2, [r3, #24]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e08b      	b.n	8002d16 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe f8a8 	bl	8000d68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2224      	movs	r2, #36	@ 0x24
 8002c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0201 	bic.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002c3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d107      	bne.n	8002c66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	e006      	b.n	8002c74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002c72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d108      	bne.n	8002c8e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	e007      	b.n	8002c9e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c9c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d20 <HAL_I2C_Init+0x134>)
 8002caa:	430b      	orrs	r3, r1
 8002cac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cbc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691a      	ldr	r2, [r3, #16]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69d9      	ldr	r1, [r3, #28]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1a      	ldr	r2, [r3, #32]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f042 0201 	orr.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2220      	movs	r2, #32
 8002d02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	02008000 	.word	0x02008000

08002d24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af02      	add	r7, sp, #8
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	460b      	mov	r3, r1
 8002d32:	817b      	strh	r3, [r7, #10]
 8002d34:	4613      	mov	r3, r2
 8002d36:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	f040 80fd 	bne.w	8002f40 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_I2C_Master_Transmit+0x30>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e0f6      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x21e>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002d5c:	f7fe ff9a 	bl	8001c94 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	2319      	movs	r3, #25
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fa0a 	bl	8003188 <I2C_WaitOnFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e0e1      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2221      	movs	r2, #33	@ 0x21
 8002d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2210      	movs	r2, #16
 8002d8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	893a      	ldrh	r2, [r7, #8]
 8002d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2bff      	cmp	r3, #255	@ 0xff
 8002dae:	d906      	bls.n	8002dbe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	22ff      	movs	r2, #255	@ 0xff
 8002db4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002db6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	e007      	b.n	8002dce <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002dc8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002dcc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d024      	beq.n	8002e20 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dda:	781a      	ldrb	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	3b01      	subs	r3, #1
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	b2da      	uxtb	r2, r3
 8002e10:	8979      	ldrh	r1, [r7, #10]
 8002e12:	4b4e      	ldr	r3, [pc, #312]	@ (8002f4c <HAL_I2C_Master_Transmit+0x228>)
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 fc05 	bl	8003628 <I2C_TransferConfig>
 8002e1e:	e066      	b.n	8002eee <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	8979      	ldrh	r1, [r7, #10]
 8002e28:	4b48      	ldr	r3, [pc, #288]	@ (8002f4c <HAL_I2C_Master_Transmit+0x228>)
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fbfa 	bl	8003628 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e34:	e05b      	b.n	8002eee <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	6a39      	ldr	r1, [r7, #32]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f9fd 	bl	800323a <I2C_WaitOnTXISFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e07b      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4e:	781a      	ldrb	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5a:	1c5a      	adds	r2, r3, #1
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d034      	beq.n	8002eee <HAL_I2C_Master_Transmit+0x1ca>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d130      	bne.n	8002eee <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	6a3b      	ldr	r3, [r7, #32]
 8002e92:	2200      	movs	r2, #0
 8002e94:	2180      	movs	r1, #128	@ 0x80
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f976 	bl	8003188 <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e04d      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	2bff      	cmp	r3, #255	@ 0xff
 8002eae:	d90e      	bls.n	8002ece <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	22ff      	movs	r2, #255	@ 0xff
 8002eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	8979      	ldrh	r1, [r7, #10]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 fbae 	bl	8003628 <I2C_TransferConfig>
 8002ecc:	e00f      	b.n	8002eee <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	8979      	ldrh	r1, [r7, #10]
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	9300      	str	r3, [sp, #0]
 8002ee4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 fb9d 	bl	8003628 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d19e      	bne.n	8002e36 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	6a39      	ldr	r1, [r7, #32]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f9e3 	bl	80032c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e01a      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2220      	movs	r2, #32
 8002f12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <HAL_I2C_Master_Transmit+0x22c>)
 8002f20:	400b      	ands	r3, r1
 8002f22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	80002000 	.word	0x80002000
 8002f50:	fe00e800 	.word	0xfe00e800

08002f54 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	607a      	str	r2, [r7, #4]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	460b      	mov	r3, r1
 8002f62:	817b      	strh	r3, [r7, #10]
 8002f64:	4613      	mov	r3, r2
 8002f66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b20      	cmp	r3, #32
 8002f72:	f040 80db 	bne.w	800312c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d101      	bne.n	8002f84 <HAL_I2C_Master_Receive+0x30>
 8002f80:	2302      	movs	r3, #2
 8002f82:	e0d4      	b.n	800312e <HAL_I2C_Master_Receive+0x1da>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f8c:	f7fe fe82 	bl	8001c94 <HAL_GetTick>
 8002f90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	2319      	movs	r3, #25
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f8f2 	bl	8003188 <I2C_WaitOnFlagUntilTimeout>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e0bf      	b.n	800312e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2222      	movs	r2, #34	@ 0x22
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2210      	movs	r2, #16
 8002fba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	893a      	ldrh	r2, [r7, #8]
 8002fce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2bff      	cmp	r3, #255	@ 0xff
 8002fde:	d90e      	bls.n	8002ffe <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	22ff      	movs	r2, #255	@ 0xff
 8002fe4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	8979      	ldrh	r1, [r7, #10]
 8002fee:	4b52      	ldr	r3, [pc, #328]	@ (8003138 <HAL_I2C_Master_Receive+0x1e4>)
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fb16 	bl	8003628 <I2C_TransferConfig>
 8002ffc:	e06d      	b.n	80030da <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800300c:	b2da      	uxtb	r2, r3
 800300e:	8979      	ldrh	r1, [r7, #10]
 8003010:	4b49      	ldr	r3, [pc, #292]	@ (8003138 <HAL_I2C_Master_Receive+0x1e4>)
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 fb05 	bl	8003628 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800301e:	e05c      	b.n	80030da <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	6a39      	ldr	r1, [r7, #32]
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f000 f993 	bl	8003350 <I2C_WaitOnRXNEFlagUntilTimeout>
 800302a:	4603      	mov	r3, r0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e07c      	b.n	800312e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800306a:	b29b      	uxth	r3, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	d034      	beq.n	80030da <HAL_I2C_Master_Receive+0x186>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003074:	2b00      	cmp	r3, #0
 8003076:	d130      	bne.n	80030da <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	2200      	movs	r2, #0
 8003080:	2180      	movs	r1, #128	@ 0x80
 8003082:	68f8      	ldr	r0, [r7, #12]
 8003084:	f000 f880 	bl	8003188 <I2C_WaitOnFlagUntilTimeout>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e04d      	b.n	800312e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003096:	b29b      	uxth	r3, r3
 8003098:	2bff      	cmp	r3, #255	@ 0xff
 800309a:	d90e      	bls.n	80030ba <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	22ff      	movs	r2, #255	@ 0xff
 80030a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	8979      	ldrh	r1, [r7, #10]
 80030aa:	2300      	movs	r3, #0
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fab8 	bl	8003628 <I2C_TransferConfig>
 80030b8:	e00f      	b.n	80030da <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030c8:	b2da      	uxtb	r2, r3
 80030ca:	8979      	ldrh	r1, [r7, #10]
 80030cc:	2300      	movs	r3, #0
 80030ce:	9300      	str	r3, [sp, #0]
 80030d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 faa7 	bl	8003628 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d19d      	bne.n	8003020 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	6a39      	ldr	r1, [r7, #32]
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f8ed 	bl	80032c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e01a      	b.n	800312e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2220      	movs	r2, #32
 80030fe:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6859      	ldr	r1, [r3, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	4b0c      	ldr	r3, [pc, #48]	@ (800313c <HAL_I2C_Master_Receive+0x1e8>)
 800310c:	400b      	ands	r3, r1
 800310e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003128:	2300      	movs	r3, #0
 800312a:	e000      	b.n	800312e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800312c:	2302      	movs	r3, #2
  }
}
 800312e:	4618      	mov	r0, r3
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	80002400 	.word	0x80002400
 800313c:	fe00e800 	.word	0xfe00e800

08003140 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b02      	cmp	r3, #2
 8003154:	d103      	bne.n	800315e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2200      	movs	r2, #0
 800315c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	2b01      	cmp	r3, #1
 800316a:	d007      	beq.n	800317c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0201 	orr.w	r2, r2, #1
 800317a:	619a      	str	r2, [r3, #24]
  }
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	603b      	str	r3, [r7, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003198:	e03b      	b.n	8003212 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	6839      	ldr	r1, [r7, #0]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 f962 	bl	8003468 <I2C_IsErrorOccurred>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e041      	b.n	8003232 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d02d      	beq.n	8003212 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b6:	f7fe fd6d 	bl	8001c94 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	683a      	ldr	r2, [r7, #0]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d302      	bcc.n	80031cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d122      	bne.n	8003212 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	699a      	ldr	r2, [r3, #24]
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4013      	ands	r3, r2
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	429a      	cmp	r2, r3
 80031da:	bf0c      	ite	eq
 80031dc:	2301      	moveq	r3, #1
 80031de:	2300      	movne	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d113      	bne.n	8003212 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ee:	f043 0220 	orr.w	r2, r3, #32
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e00f      	b.n	8003232 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4013      	ands	r3, r2
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	429a      	cmp	r2, r3
 8003220:	bf0c      	ite	eq
 8003222:	2301      	moveq	r3, #1
 8003224:	2300      	movne	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	429a      	cmp	r2, r3
 800322e:	d0b4      	beq.n	800319a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b084      	sub	sp, #16
 800323e:	af00      	add	r7, sp, #0
 8003240:	60f8      	str	r0, [r7, #12]
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003246:	e033      	b.n	80032b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	68b9      	ldr	r1, [r7, #8]
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 f90b 	bl	8003468 <I2C_IsErrorOccurred>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e031      	b.n	80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003262:	d025      	beq.n	80032b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003264:	f7fe fd16 	bl	8001c94 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	429a      	cmp	r2, r3
 8003272:	d302      	bcc.n	800327a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d11a      	bne.n	80032b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b02      	cmp	r3, #2
 8003286:	d013      	beq.n	80032b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328c:	f043 0220 	orr.w	r2, r3, #32
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e007      	b.n	80032c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d1c4      	bne.n	8003248 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032d4:	e02f      	b.n	8003336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	68b9      	ldr	r1, [r7, #8]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f8c4 	bl	8003468 <I2C_IsErrorOccurred>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d001      	beq.n	80032ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e02d      	b.n	8003346 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ea:	f7fe fcd3 	bl	8001c94 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d302      	bcc.n	8003300 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d11a      	bne.n	8003336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b20      	cmp	r3, #32
 800330c:	d013      	beq.n	8003336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003312:	f043 0220 	orr.w	r2, r3, #32
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e007      	b.n	8003346 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f003 0320 	and.w	r3, r3, #32
 8003340:	2b20      	cmp	r3, #32
 8003342:	d1c8      	bne.n	80032d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003360:	e071      	b.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	68b9      	ldr	r1, [r7, #8]
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 f87e 	bl	8003468 <I2C_IsErrorOccurred>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b20      	cmp	r3, #32
 8003382:	d13b      	bne.n	80033fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003384:	7dfb      	ldrb	r3, [r7, #23]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d138      	bne.n	80033fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d105      	bne.n	80033a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 0310 	and.w	r3, r3, #16
 80033ae:	2b10      	cmp	r3, #16
 80033b0:	d121      	bne.n	80033f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2210      	movs	r2, #16
 80033b8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2204      	movs	r2, #4
 80033be:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2220      	movs	r2, #32
 80033c6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b24      	ldr	r3, [pc, #144]	@ (8003464 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80033d4:	400b      	ands	r3, r1
 80033d6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	75fb      	strb	r3, [r7, #23]
 80033f4:	e002      	b.n	80033fc <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80033fc:	f7fe fc4a 	bl	8001c94 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	68ba      	ldr	r2, [r7, #8]
 8003408:	429a      	cmp	r2, r3
 800340a:	d302      	bcc.n	8003412 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d119      	bne.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003412:	7dfb      	ldrb	r3, [r7, #23]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d116      	bne.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	f003 0304 	and.w	r3, r3, #4
 8003422:	2b04      	cmp	r3, #4
 8003424:	d00f      	beq.n	8003446 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b04      	cmp	r3, #4
 8003452:	d002      	beq.n	800345a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003454:	7dfb      	ldrb	r3, [r7, #23]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d083      	beq.n	8003362 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800345a:	7dfb      	ldrb	r3, [r7, #23]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	fe00e800 	.word	0xfe00e800

08003468 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	@ 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d068      	beq.n	8003566 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2210      	movs	r2, #16
 800349a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800349c:	e049      	b.n	8003532 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d045      	beq.n	8003532 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80034a6:	f7fe fbf5 	bl	8001c94 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d302      	bcc.n	80034bc <I2C_IsErrorOccurred+0x54>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d13a      	bne.n	8003532 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034c6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80034ce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034de:	d121      	bne.n	8003524 <I2C_IsErrorOccurred+0xbc>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034e6:	d01d      	beq.n	8003524 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80034e8:	7cfb      	ldrb	r3, [r7, #19]
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	d01a      	beq.n	8003524 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034fc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80034fe:	f7fe fbc9 	bl	8001c94 <HAL_GetTick>
 8003502:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003504:	e00e      	b.n	8003524 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003506:	f7fe fbc5 	bl	8001c94 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b19      	cmp	r3, #25
 8003512:	d907      	bls.n	8003524 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	f043 0320 	orr.w	r3, r3, #32
 800351a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003522:	e006      	b.n	8003532 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b20      	cmp	r3, #32
 8003530:	d1e9      	bne.n	8003506 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b20      	cmp	r3, #32
 800353e:	d003      	beq.n	8003548 <I2C_IsErrorOccurred+0xe0>
 8003540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0aa      	beq.n	800349e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800354c:	2b00      	cmp	r3, #0
 800354e:	d103      	bne.n	8003558 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2220      	movs	r2, #32
 8003556:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	f043 0304 	orr.w	r3, r3, #4
 800355e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00b      	beq.n	8003590 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	f043 0301 	orr.w	r3, r3, #1
 800357e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003588:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	f043 0308 	orr.w	r3, r3, #8
 80035a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80035aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00b      	beq.n	80035d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80035bc:	6a3b      	ldr	r3, [r7, #32]
 80035be:	f043 0302 	orr.w	r3, r3, #2
 80035c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80035d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01c      	beq.n	8003616 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f7ff fdaf 	bl	8003140 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6859      	ldr	r1, [r3, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003624 <I2C_IsErrorOccurred+0x1bc>)
 80035ee:	400b      	ands	r3, r1
 80035f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035f6:	6a3b      	ldr	r3, [r7, #32]
 80035f8:	431a      	orrs	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003616:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800361a:	4618      	mov	r0, r3
 800361c:	3728      	adds	r7, #40	@ 0x28
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	fe00e800 	.word	0xfe00e800

08003628 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003628:	b480      	push	{r7}
 800362a:	b087      	sub	sp, #28
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	817b      	strh	r3, [r7, #10]
 8003636:	4613      	mov	r3, r2
 8003638:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800363a:	897b      	ldrh	r3, [r7, #10]
 800363c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003640:	7a7b      	ldrb	r3, [r7, #9]
 8003642:	041b      	lsls	r3, r3, #16
 8003644:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003648:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	4313      	orrs	r3, r2
 8003652:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003656:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	0d5b      	lsrs	r3, r3, #21
 8003662:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003666:	4b08      	ldr	r3, [pc, #32]	@ (8003688 <I2C_TransferConfig+0x60>)
 8003668:	430b      	orrs	r3, r1
 800366a:	43db      	mvns	r3, r3
 800366c:	ea02 0103 	and.w	r1, r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	03ff63ff 	.word	0x03ff63ff

0800368c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800369c:	b2db      	uxtb	r3, r3
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d138      	bne.n	8003714 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e032      	b.n	8003716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2224      	movs	r2, #36	@ 0x24
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80036de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6819      	ldr	r1, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2220      	movs	r2, #32
 8003704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2200      	movs	r2, #0
 800370c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003710:	2300      	movs	r3, #0
 8003712:	e000      	b.n	8003716 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003714:	2302      	movs	r3, #2
  }
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003722:	b480      	push	{r7}
 8003724:	b085      	sub	sp, #20
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
 800372a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b20      	cmp	r3, #32
 8003736:	d139      	bne.n	80037ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800373e:	2b01      	cmp	r3, #1
 8003740:	d101      	bne.n	8003746 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003742:	2302      	movs	r3, #2
 8003744:	e033      	b.n	80037ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2224      	movs	r2, #36	@ 0x24
 8003752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f022 0201 	bic.w	r2, r2, #1
 8003764:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003774:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4313      	orrs	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2220      	movs	r2, #32
 800379c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e000      	b.n	80037ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b086      	sub	sp, #24
 80037be:	af02      	add	r7, sp, #8
 80037c0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0fe      	b.n	80039ca <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d106      	bne.n	80037e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f7fe f92b 	bl	8001a3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2203      	movs	r2, #3
 80037ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f005 fcc0 	bl	8009178 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6818      	ldr	r0, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	7c1a      	ldrb	r2, [r3, #16]
 8003800:	f88d 2000 	strb.w	r2, [sp]
 8003804:	3304      	adds	r3, #4
 8003806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003808:	f005 fc44 	bl	8009094 <USB_CoreInit>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2202      	movs	r2, #2
 8003816:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e0d5      	b.n	80039ca <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f005 fcb8 	bl	800919a <USB_SetCurrentMode>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e0c6      	b.n	80039ca <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800383c:	2300      	movs	r3, #0
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e04a      	b.n	80038d8 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3315      	adds	r3, #21
 8003852:	2201      	movs	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	4413      	add	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3314      	adds	r3, #20
 8003866:	7bfa      	ldrb	r2, [r7, #15]
 8003868:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800386a:	7bfa      	ldrb	r2, [r7, #15]
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	b298      	uxth	r0, r3
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	4413      	add	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	332e      	adds	r3, #46	@ 0x2e
 800387e:	4602      	mov	r2, r0
 8003880:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003882:	7bfa      	ldrb	r2, [r7, #15]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	3318      	adds	r3, #24
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	331c      	adds	r3, #28
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038aa:	7bfa      	ldrb	r2, [r7, #15]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	3320      	adds	r3, #32
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80038be:	7bfa      	ldrb	r2, [r7, #15]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	3324      	adds	r3, #36	@ 0x24
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	3301      	adds	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	791b      	ldrb	r3, [r3, #4]
 80038dc:	7bfa      	ldrb	r2, [r7, #15]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d3af      	bcc.n	8003842 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038e2:	2300      	movs	r3, #0
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	e044      	b.n	8003972 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80038e8:	7bfa      	ldrb	r2, [r7, #15]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	00db      	lsls	r3, r3, #3
 80038f0:	4413      	add	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80038fa:	2200      	movs	r2, #0
 80038fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80038fe:	7bfa      	ldrb	r2, [r7, #15]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	4413      	add	r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003910:	7bfa      	ldrb	r2, [r7, #15]
 8003912:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003914:	7bfa      	ldrb	r2, [r7, #15]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003926:	2200      	movs	r2, #0
 8003928:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800393c:	2200      	movs	r2, #0
 800393e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4413      	add	r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003968:	2200      	movs	r2, #0
 800396a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800396c:	7bfb      	ldrb	r3, [r7, #15]
 800396e:	3301      	adds	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	791b      	ldrb	r3, [r3, #4]
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	429a      	cmp	r2, r3
 800397a:	d3b5      	bcc.n	80038e8 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	7c1a      	ldrb	r2, [r3, #16]
 8003984:	f88d 2000 	strb.w	r2, [sp]
 8003988:	3304      	adds	r3, #4
 800398a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800398c:	f005 fc52 	bl	8009234 <USB_DevInit>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d005      	beq.n	80039a2 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2202      	movs	r2, #2
 800399a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e013      	b.n	80039ca <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	7b1b      	ldrb	r3, [r3, #12]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d102      	bne.n	80039be <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f80b 	bl	80039d4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f005 fe0d 	bl	80095e2 <USB_DevDisconnect>

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
	...

080039d4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003a02:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <HAL_PCDEx_ActivateLPM+0x44>)
 8003a04:	4313      	orrs	r3, r2
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	10000003 	.word	0x10000003

08003a1c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003a24:	4b19      	ldr	r3, [pc, #100]	@ (8003a8c <HAL_PWREx_ConfigSupply+0x70>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b04      	cmp	r3, #4
 8003a2e:	d00a      	beq.n	8003a46 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003a30:	4b16      	ldr	r3, [pc, #88]	@ (8003a8c <HAL_PWREx_ConfigSupply+0x70>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d001      	beq.n	8003a42 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e01f      	b.n	8003a82 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e01d      	b.n	8003a82 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003a46:	4b11      	ldr	r3, [pc, #68]	@ (8003a8c <HAL_PWREx_ConfigSupply+0x70>)
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f023 0207 	bic.w	r2, r3, #7
 8003a4e:	490f      	ldr	r1, [pc, #60]	@ (8003a8c <HAL_PWREx_ConfigSupply+0x70>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003a56:	f7fe f91d 	bl	8001c94 <HAL_GetTick>
 8003a5a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a5c:	e009      	b.n	8003a72 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003a5e:	f7fe f919 	bl	8001c94 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003a6c:	d901      	bls.n	8003a72 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e007      	b.n	8003a82 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003a72:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <HAL_PWREx_ConfigSupply+0x70>)
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a7e:	d1ee      	bne.n	8003a5e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	58024800 	.word	0x58024800

08003a90 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003a90:	b480      	push	{r7}
 8003a92:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003a94:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	4a04      	ldr	r2, [pc, #16]	@ (8003aac <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003a9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a9e:	60d3      	str	r3, [r2, #12]
}
 8003aa0:	bf00      	nop
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	58024800 	.word	0x58024800

08003ab0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08c      	sub	sp, #48	@ 0x30
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d102      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	f000 bc48 	b.w	8004354 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 8088 	beq.w	8003be2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad2:	4b99      	ldr	r3, [pc, #612]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003adc:	4b96      	ldr	r3, [pc, #600]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d007      	beq.n	8003af8 <HAL_RCC_OscConfig+0x48>
 8003ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aea:	2b18      	cmp	r3, #24
 8003aec:	d111      	bne.n	8003b12 <HAL_RCC_OscConfig+0x62>
 8003aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af0:	f003 0303 	and.w	r3, r3, #3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d10c      	bne.n	8003b12 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	4b8f      	ldr	r3, [pc, #572]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d06d      	beq.n	8003be0 <HAL_RCC_OscConfig+0x130>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d169      	bne.n	8003be0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	f000 bc21 	b.w	8004354 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b1a:	d106      	bne.n	8003b2a <HAL_RCC_OscConfig+0x7a>
 8003b1c:	4b86      	ldr	r3, [pc, #536]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a85      	ldr	r2, [pc, #532]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	e02e      	b.n	8003b88 <HAL_RCC_OscConfig+0xd8>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10c      	bne.n	8003b4c <HAL_RCC_OscConfig+0x9c>
 8003b32:	4b81      	ldr	r3, [pc, #516]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a80      	ldr	r2, [pc, #512]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b7e      	ldr	r3, [pc, #504]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a7d      	ldr	r2, [pc, #500]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b44:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b48:	6013      	str	r3, [r2, #0]
 8003b4a:	e01d      	b.n	8003b88 <HAL_RCC_OscConfig+0xd8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0xc0>
 8003b56:	4b78      	ldr	r3, [pc, #480]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a77      	ldr	r2, [pc, #476]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b75      	ldr	r3, [pc, #468]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a74      	ldr	r2, [pc, #464]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e00b      	b.n	8003b88 <HAL_RCC_OscConfig+0xd8>
 8003b70:	4b71      	ldr	r3, [pc, #452]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a70      	ldr	r2, [pc, #448]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b7a:	6013      	str	r3, [r2, #0]
 8003b7c:	4b6e      	ldr	r3, [pc, #440]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a6d      	ldr	r2, [pc, #436]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003b82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d013      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b90:	f7fe f880 	bl	8001c94 <HAL_GetTick>
 8003b94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b98:	f7fe f87c 	bl	8001c94 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b64      	cmp	r3, #100	@ 0x64
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e3d4      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003baa:	4b63      	ldr	r3, [pc, #396]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0xe8>
 8003bb6:	e014      	b.n	8003be2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fe f86c 	bl	8001c94 <HAL_GetTick>
 8003bbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bc0:	f7fe f868 	bl	8001c94 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b64      	cmp	r3, #100	@ 0x64
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e3c0      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003bd2:	4b59      	ldr	r3, [pc, #356]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x110>
 8003bde:	e000      	b.n	8003be2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80ca 	beq.w	8003d84 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf0:	4b51      	ldr	r3, [pc, #324]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003bf2:	691b      	ldr	r3, [r3, #16]
 8003bf4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bf8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d007      	beq.n	8003c16 <HAL_RCC_OscConfig+0x166>
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	2b18      	cmp	r3, #24
 8003c0a:	d156      	bne.n	8003cba <HAL_RCC_OscConfig+0x20a>
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d151      	bne.n	8003cba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c16:	4b48      	ldr	r3, [pc, #288]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_RCC_OscConfig+0x17e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e392      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003c2e:	4b42      	ldr	r3, [pc, #264]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f023 0219 	bic.w	r2, r3, #25
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	493f      	ldr	r1, [pc, #252]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7fe f828 	bl	8001c94 <HAL_GetTick>
 8003c44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c48:	f7fe f824 	bl	8001c94 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e37c      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c5a:	4b37      	ldr	r3, [pc, #220]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c66:	f7fe f845 	bl	8001cf4 <HAL_GetREVID>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d817      	bhi.n	8003ca4 <HAL_RCC_OscConfig+0x1f4>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b40      	cmp	r3, #64	@ 0x40
 8003c7a:	d108      	bne.n	8003c8e <HAL_RCC_OscConfig+0x1de>
 8003c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003c84:	4a2c      	ldr	r2, [pc, #176]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003c86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c8a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c8c:	e07a      	b.n	8003d84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	031b      	lsls	r3, r3, #12
 8003c9c:	4926      	ldr	r1, [pc, #152]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca2:	e06f      	b.n	8003d84 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ca4:	4b24      	ldr	r3, [pc, #144]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	061b      	lsls	r3, r3, #24
 8003cb2:	4921      	ldr	r1, [pc, #132]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb8:	e064      	b.n	8003d84 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d047      	beq.n	8003d52 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 0219 	bic.w	r2, r3, #25
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	491a      	ldr	r1, [pc, #104]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fd ffde 	bl	8001c94 <HAL_GetTick>
 8003cd8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cdc:	f7fd ffda 	bl	8001c94 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e332      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cee:	4b12      	ldr	r3, [pc, #72]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d0f0      	beq.n	8003cdc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cfa:	f7fd fffb 	bl	8001cf4 <HAL_GetREVID>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d819      	bhi.n	8003d3c <HAL_RCC_OscConfig+0x28c>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	2b40      	cmp	r3, #64	@ 0x40
 8003d0e:	d108      	bne.n	8003d22 <HAL_RCC_OscConfig+0x272>
 8003d10:	4b09      	ldr	r3, [pc, #36]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003d18:	4a07      	ldr	r2, [pc, #28]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d1e:	6053      	str	r3, [r2, #4]
 8003d20:	e030      	b.n	8003d84 <HAL_RCC_OscConfig+0x2d4>
 8003d22:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	031b      	lsls	r3, r3, #12
 8003d30:	4901      	ldr	r1, [pc, #4]	@ (8003d38 <HAL_RCC_OscConfig+0x288>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	604b      	str	r3, [r1, #4]
 8003d36:	e025      	b.n	8003d84 <HAL_RCC_OscConfig+0x2d4>
 8003d38:	58024400 	.word	0x58024400
 8003d3c:	4b9a      	ldr	r3, [pc, #616]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	061b      	lsls	r3, r3, #24
 8003d4a:	4997      	ldr	r1, [pc, #604]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	604b      	str	r3, [r1, #4]
 8003d50:	e018      	b.n	8003d84 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d52:	4b95      	ldr	r3, [pc, #596]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a94      	ldr	r2, [pc, #592]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003d58:	f023 0301 	bic.w	r3, r3, #1
 8003d5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5e:	f7fd ff99 	bl	8001c94 <HAL_GetTick>
 8003d62:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d64:	e008      	b.n	8003d78 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d66:	f7fd ff95 	bl	8001c94 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d901      	bls.n	8003d78 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e2ed      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003d78:	4b8b      	ldr	r3, [pc, #556]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1f0      	bne.n	8003d66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	f000 80a9 	beq.w	8003ee4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d92:	4b85      	ldr	r3, [pc, #532]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003d9a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d9c:	4b82      	ldr	r3, [pc, #520]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	2b08      	cmp	r3, #8
 8003da6:	d007      	beq.n	8003db8 <HAL_RCC_OscConfig+0x308>
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	2b18      	cmp	r3, #24
 8003dac:	d13a      	bne.n	8003e24 <HAL_RCC_OscConfig+0x374>
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f003 0303 	and.w	r3, r3, #3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d135      	bne.n	8003e24 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003db8:	4b7b      	ldr	r3, [pc, #492]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x320>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	2b80      	cmp	r3, #128	@ 0x80
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e2c1      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003dd0:	f7fd ff90 	bl	8001cf4 <HAL_GetREVID>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d817      	bhi.n	8003e0e <HAL_RCC_OscConfig+0x35e>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d108      	bne.n	8003df8 <HAL_RCC_OscConfig+0x348>
 8003de6:	4b70      	ldr	r3, [pc, #448]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003dee:	4a6e      	ldr	r2, [pc, #440]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003df0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003df4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003df6:	e075      	b.n	8003ee4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003df8:	4b6b      	ldr	r3, [pc, #428]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	069b      	lsls	r3, r3, #26
 8003e06:	4968      	ldr	r1, [pc, #416]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e0c:	e06a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e0e:	4b66      	ldr	r3, [pc, #408]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	061b      	lsls	r3, r3, #24
 8003e1c:	4962      	ldr	r1, [pc, #392]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003e22:	e05f      	b.n	8003ee4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d042      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003e2c:	4b5e      	ldr	r3, [pc, #376]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a5d      	ldr	r2, [pc, #372]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003e32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003e36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fd ff2c 	bl	8001c94 <HAL_GetTick>
 8003e3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003e40:	f7fd ff28 	bl	8001c94 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e280      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e52:	4b55      	ldr	r3, [pc, #340]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003e5e:	f7fd ff49 	bl	8001cf4 <HAL_GetREVID>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d817      	bhi.n	8003e9c <HAL_RCC_OscConfig+0x3ec>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	d108      	bne.n	8003e86 <HAL_RCC_OscConfig+0x3d6>
 8003e74:	4b4c      	ldr	r3, [pc, #304]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003e7c:	4a4a      	ldr	r2, [pc, #296]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003e7e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003e82:	6053      	str	r3, [r2, #4]
 8003e84:	e02e      	b.n	8003ee4 <HAL_RCC_OscConfig+0x434>
 8003e86:	4b48      	ldr	r3, [pc, #288]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a1b      	ldr	r3, [r3, #32]
 8003e92:	069b      	lsls	r3, r3, #26
 8003e94:	4944      	ldr	r1, [pc, #272]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	604b      	str	r3, [r1, #4]
 8003e9a:	e023      	b.n	8003ee4 <HAL_RCC_OscConfig+0x434>
 8003e9c:	4b42      	ldr	r3, [pc, #264]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	061b      	lsls	r3, r3, #24
 8003eaa:	493f      	ldr	r1, [pc, #252]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003eac:	4313      	orrs	r3, r2
 8003eae:	60cb      	str	r3, [r1, #12]
 8003eb0:	e018      	b.n	8003ee4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003eb2:	4b3d      	ldr	r3, [pc, #244]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a3c      	ldr	r2, [pc, #240]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003eb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fd fee9 	bl	8001c94 <HAL_GetTick>
 8003ec2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003ec6:	f7fd fee5 	bl	8001c94 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e23d      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003ed8:	4b33      	ldr	r3, [pc, #204]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1f0      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d036      	beq.n	8003f5e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d019      	beq.n	8003f2c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003efa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003efc:	4a2a      	ldr	r2, [pc, #168]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003efe:	f043 0301 	orr.w	r3, r3, #1
 8003f02:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fd fec6 	bl	8001c94 <HAL_GetTick>
 8003f08:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f0a:	e008      	b.n	8003f1e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0c:	f7fd fec2 	bl	8001c94 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d901      	bls.n	8003f1e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e21a      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003f1e:	4b22      	ldr	r3, [pc, #136]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f0      	beq.n	8003f0c <HAL_RCC_OscConfig+0x45c>
 8003f2a:	e018      	b.n	8003f5e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003f2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f30:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003f32:	f023 0301 	bic.w	r3, r3, #1
 8003f36:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f38:	f7fd feac 	bl	8001c94 <HAL_GetTick>
 8003f3c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f40:	f7fd fea8 	bl	8001c94 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e200      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003f52:	4b15      	ldr	r3, [pc, #84]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003f54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1f0      	bne.n	8003f40 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0320 	and.w	r3, r3, #32
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d039      	beq.n	8003fde <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01c      	beq.n	8003fac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f72:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a0c      	ldr	r2, [pc, #48]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003f78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003f7c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003f7e:	f7fd fe89 	bl	8001c94 <HAL_GetTick>
 8003f82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f86:	f7fd fe85 	bl	8001c94 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e1dd      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003f98:	4b03      	ldr	r3, [pc, #12]	@ (8003fa8 <HAL_RCC_OscConfig+0x4f8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_RCC_OscConfig+0x4d6>
 8003fa4:	e01b      	b.n	8003fde <HAL_RCC_OscConfig+0x52e>
 8003fa6:	bf00      	nop
 8003fa8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003fac:	4b9b      	ldr	r3, [pc, #620]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a9a      	ldr	r2, [pc, #616]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8003fb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fb6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003fb8:	f7fd fe6c 	bl	8001c94 <HAL_GetTick>
 8003fbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003fc0:	f7fd fe68 	bl	8001c94 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e1c0      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003fd2:	4b92      	ldr	r3, [pc, #584]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1f0      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	f000 8081 	beq.w	80040ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003fec:	4b8c      	ldr	r3, [pc, #560]	@ (8004220 <HAL_RCC_OscConfig+0x770>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a8b      	ldr	r2, [pc, #556]	@ (8004220 <HAL_RCC_OscConfig+0x770>)
 8003ff2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ff8:	f7fd fe4c 	bl	8001c94 <HAL_GetTick>
 8003ffc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004000:	f7fd fe48 	bl	8001c94 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	@ 0x64
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e1a0      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004012:	4b83      	ldr	r3, [pc, #524]	@ (8004220 <HAL_RCC_OscConfig+0x770>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d106      	bne.n	8004034 <HAL_RCC_OscConfig+0x584>
 8004026:	4b7d      	ldr	r3, [pc, #500]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402a:	4a7c      	ldr	r2, [pc, #496]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6713      	str	r3, [r2, #112]	@ 0x70
 8004032:	e02d      	b.n	8004090 <HAL_RCC_OscConfig+0x5e0>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d10c      	bne.n	8004056 <HAL_RCC_OscConfig+0x5a6>
 800403c:	4b77      	ldr	r3, [pc, #476]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 800403e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004040:	4a76      	ldr	r2, [pc, #472]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004042:	f023 0301 	bic.w	r3, r3, #1
 8004046:	6713      	str	r3, [r2, #112]	@ 0x70
 8004048:	4b74      	ldr	r3, [pc, #464]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 800404a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404c:	4a73      	ldr	r2, [pc, #460]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 800404e:	f023 0304 	bic.w	r3, r3, #4
 8004052:	6713      	str	r3, [r2, #112]	@ 0x70
 8004054:	e01c      	b.n	8004090 <HAL_RCC_OscConfig+0x5e0>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b05      	cmp	r3, #5
 800405c:	d10c      	bne.n	8004078 <HAL_RCC_OscConfig+0x5c8>
 800405e:	4b6f      	ldr	r3, [pc, #444]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004062:	4a6e      	ldr	r2, [pc, #440]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004064:	f043 0304 	orr.w	r3, r3, #4
 8004068:	6713      	str	r3, [r2, #112]	@ 0x70
 800406a:	4b6c      	ldr	r3, [pc, #432]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406e:	4a6b      	ldr	r2, [pc, #428]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004070:	f043 0301 	orr.w	r3, r3, #1
 8004074:	6713      	str	r3, [r2, #112]	@ 0x70
 8004076:	e00b      	b.n	8004090 <HAL_RCC_OscConfig+0x5e0>
 8004078:	4b68      	ldr	r3, [pc, #416]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 800407a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800407c:	4a67      	ldr	r2, [pc, #412]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	6713      	str	r3, [r2, #112]	@ 0x70
 8004084:	4b65      	ldr	r3, [pc, #404]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004088:	4a64      	ldr	r2, [pc, #400]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 800408a:	f023 0304 	bic.w	r3, r3, #4
 800408e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d015      	beq.n	80040c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004098:	f7fd fdfc 	bl	8001c94 <HAL_GetTick>
 800409c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800409e:	e00a      	b.n	80040b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a0:	f7fd fdf8 	bl	8001c94 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d901      	bls.n	80040b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80040b2:	2303      	movs	r3, #3
 80040b4:	e14e      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80040b6:	4b59      	ldr	r3, [pc, #356]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d0ee      	beq.n	80040a0 <HAL_RCC_OscConfig+0x5f0>
 80040c2:	e014      	b.n	80040ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040c4:	f7fd fde6 	bl	8001c94 <HAL_GetTick>
 80040c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040ca:	e00a      	b.n	80040e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040cc:	f7fd fde2 	bl	8001c94 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e138      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80040e2:	4b4e      	ldr	r3, [pc, #312]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80040e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1ee      	bne.n	80040cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 812d 	beq.w	8004352 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80040f8:	4b48      	ldr	r3, [pc, #288]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004100:	2b18      	cmp	r3, #24
 8004102:	f000 80bd 	beq.w	8004280 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410a:	2b02      	cmp	r3, #2
 800410c:	f040 809e 	bne.w	800424c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004110:	4b42      	ldr	r3, [pc, #264]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a41      	ldr	r2, [pc, #260]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800411a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd fdba 	bl	8001c94 <HAL_GetTick>
 8004120:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004124:	f7fd fdb6 	bl	8001c94 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e10e      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004136:	4b39      	ldr	r3, [pc, #228]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004142:	4b36      	ldr	r3, [pc, #216]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004144:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004146:	4b37      	ldr	r3, [pc, #220]	@ (8004224 <HAL_RCC_OscConfig+0x774>)
 8004148:	4013      	ands	r3, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004152:	0112      	lsls	r2, r2, #4
 8004154:	430a      	orrs	r2, r1
 8004156:	4931      	ldr	r1, [pc, #196]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004158:	4313      	orrs	r3, r2
 800415a:	628b      	str	r3, [r1, #40]	@ 0x28
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004160:	3b01      	subs	r3, #1
 8004162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800416a:	3b01      	subs	r3, #1
 800416c:	025b      	lsls	r3, r3, #9
 800416e:	b29b      	uxth	r3, r3
 8004170:	431a      	orrs	r2, r3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004176:	3b01      	subs	r3, #1
 8004178:	041b      	lsls	r3, r3, #16
 800417a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004184:	3b01      	subs	r3, #1
 8004186:	061b      	lsls	r3, r3, #24
 8004188:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800418c:	4923      	ldr	r1, [pc, #140]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 800418e:	4313      	orrs	r3, r2
 8004190:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004192:	4b22      	ldr	r3, [pc, #136]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004196:	4a21      	ldr	r2, [pc, #132]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800419e:	4b1f      	ldr	r3, [pc, #124]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80041a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80041a2:	4b21      	ldr	r3, [pc, #132]	@ (8004228 <HAL_RCC_OscConfig+0x778>)
 80041a4:	4013      	ands	r3, r2
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80041aa:	00d2      	lsls	r2, r2, #3
 80041ac:	491b      	ldr	r1, [pc, #108]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80041b2:	4b1a      	ldr	r3, [pc, #104]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b6:	f023 020c 	bic.w	r2, r3, #12
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	4917      	ldr	r1, [pc, #92]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80041c4:	4b15      	ldr	r3, [pc, #84]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80041c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c8:	f023 0202 	bic.w	r2, r3, #2
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041d0:	4912      	ldr	r1, [pc, #72]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80041d6:	4b11      	ldr	r3, [pc, #68]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80041d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041da:	4a10      	ldr	r2, [pc, #64]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e2:	4b0e      	ldr	r3, [pc, #56]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80041e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e6:	4a0d      	ldr	r2, [pc, #52]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80041ee:	4b0b      	ldr	r3, [pc, #44]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f2:	4a0a      	ldr	r2, [pc, #40]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80041f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80041fa:	4b08      	ldr	r3, [pc, #32]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 80041fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fe:	4a07      	ldr	r2, [pc, #28]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004200:	f043 0301 	orr.w	r3, r3, #1
 8004204:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004206:	4b05      	ldr	r3, [pc, #20]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a04      	ldr	r2, [pc, #16]	@ (800421c <HAL_RCC_OscConfig+0x76c>)
 800420c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004212:	f7fd fd3f 	bl	8001c94 <HAL_GetTick>
 8004216:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004218:	e011      	b.n	800423e <HAL_RCC_OscConfig+0x78e>
 800421a:	bf00      	nop
 800421c:	58024400 	.word	0x58024400
 8004220:	58024800 	.word	0x58024800
 8004224:	fffffc0c 	.word	0xfffffc0c
 8004228:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422c:	f7fd fd32 	bl	8001c94 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b02      	cmp	r3, #2
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e08a      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800423e:	4b47      	ldr	r3, [pc, #284]	@ (800435c <HAL_RCC_OscConfig+0x8ac>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0x77c>
 800424a:	e082      	b.n	8004352 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424c:	4b43      	ldr	r3, [pc, #268]	@ (800435c <HAL_RCC_OscConfig+0x8ac>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a42      	ldr	r2, [pc, #264]	@ (800435c <HAL_RCC_OscConfig+0x8ac>)
 8004252:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004256:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7fd fd1c 	bl	8001c94 <HAL_GetTick>
 800425c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004260:	f7fd fd18 	bl	8001c94 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e070      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004272:	4b3a      	ldr	r3, [pc, #232]	@ (800435c <HAL_RCC_OscConfig+0x8ac>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x7b0>
 800427e:	e068      	b.n	8004352 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004280:	4b36      	ldr	r3, [pc, #216]	@ (800435c <HAL_RCC_OscConfig+0x8ac>)
 8004282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004284:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004286:	4b35      	ldr	r3, [pc, #212]	@ (800435c <HAL_RCC_OscConfig+0x8ac>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	2b01      	cmp	r3, #1
 8004292:	d031      	beq.n	80042f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f003 0203 	and.w	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d12a      	bne.n	80042f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	091b      	lsrs	r3, r3, #4
 80042a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d122      	bne.n	80042f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80042be:	429a      	cmp	r2, r3
 80042c0:	d11a      	bne.n	80042f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	0a5b      	lsrs	r3, r3, #9
 80042c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d111      	bne.n	80042f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	0c1b      	lsrs	r3, r3, #16
 80042d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d108      	bne.n	80042f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	0e1b      	lsrs	r3, r3, #24
 80042ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e02b      	b.n	8004354 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80042fc:	4b17      	ldr	r3, [pc, #92]	@ (800435c <HAL_RCC_OscConfig+0x8ac>)
 80042fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004300:	08db      	lsrs	r3, r3, #3
 8004302:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004306:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	429a      	cmp	r2, r3
 8004310:	d01f      	beq.n	8004352 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004312:	4b12      	ldr	r3, [pc, #72]	@ (800435c <HAL_RCC_OscConfig+0x8ac>)
 8004314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004316:	4a11      	ldr	r2, [pc, #68]	@ (800435c <HAL_RCC_OscConfig+0x8ac>)
 8004318:	f023 0301 	bic.w	r3, r3, #1
 800431c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800431e:	f7fd fcb9 	bl	8001c94 <HAL_GetTick>
 8004322:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004324:	bf00      	nop
 8004326:	f7fd fcb5 	bl	8001c94 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	4293      	cmp	r3, r2
 8004330:	d0f9      	beq.n	8004326 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004332:	4b0a      	ldr	r3, [pc, #40]	@ (800435c <HAL_RCC_OscConfig+0x8ac>)
 8004334:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004336:	4b0a      	ldr	r3, [pc, #40]	@ (8004360 <HAL_RCC_OscConfig+0x8b0>)
 8004338:	4013      	ands	r3, r2
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800433e:	00d2      	lsls	r2, r2, #3
 8004340:	4906      	ldr	r1, [pc, #24]	@ (800435c <HAL_RCC_OscConfig+0x8ac>)
 8004342:	4313      	orrs	r3, r2
 8004344:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004346:	4b05      	ldr	r3, [pc, #20]	@ (800435c <HAL_RCC_OscConfig+0x8ac>)
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	4a04      	ldr	r2, [pc, #16]	@ (800435c <HAL_RCC_OscConfig+0x8ac>)
 800434c:	f043 0301 	orr.w	r3, r3, #1
 8004350:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3730      	adds	r7, #48	@ 0x30
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	58024400 	.word	0x58024400
 8004360:	ffff0007 	.word	0xffff0007

08004364 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e19c      	b.n	80046b2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004378:	4b8a      	ldr	r3, [pc, #552]	@ (80045a4 <HAL_RCC_ClockConfig+0x240>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d910      	bls.n	80043a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b87      	ldr	r3, [pc, #540]	@ (80045a4 <HAL_RCC_ClockConfig+0x240>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 020f 	bic.w	r2, r3, #15
 800438e:	4985      	ldr	r1, [pc, #532]	@ (80045a4 <HAL_RCC_ClockConfig+0x240>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b83      	ldr	r3, [pc, #524]	@ (80045a4 <HAL_RCC_ClockConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d001      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e184      	b.n	80046b2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d010      	beq.n	80043d6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691a      	ldr	r2, [r3, #16]
 80043b8:	4b7b      	ldr	r3, [pc, #492]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d908      	bls.n	80043d6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80043c4:	4b78      	ldr	r3, [pc, #480]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	4975      	ldr	r1, [pc, #468]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d010      	beq.n	8004404 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	4b70      	ldr	r3, [pc, #448]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d908      	bls.n	8004404 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80043f2:	4b6d      	ldr	r3, [pc, #436]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	496a      	ldr	r1, [pc, #424]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 8004400:	4313      	orrs	r3, r2
 8004402:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2b00      	cmp	r3, #0
 800440e:	d010      	beq.n	8004432 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699a      	ldr	r2, [r3, #24]
 8004414:	4b64      	ldr	r3, [pc, #400]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800441c:	429a      	cmp	r2, r3
 800441e:	d908      	bls.n	8004432 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004420:	4b61      	ldr	r3, [pc, #388]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	495e      	ldr	r1, [pc, #376]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 800442e:	4313      	orrs	r3, r2
 8004430:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d010      	beq.n	8004460 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	4b59      	ldr	r3, [pc, #356]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800444a:	429a      	cmp	r2, r3
 800444c:	d908      	bls.n	8004460 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800444e:	4b56      	ldr	r3, [pc, #344]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	4953      	ldr	r1, [pc, #332]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 800445c:	4313      	orrs	r3, r2
 800445e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d010      	beq.n	800448e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68da      	ldr	r2, [r3, #12]
 8004470:	4b4d      	ldr	r3, [pc, #308]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f003 030f 	and.w	r3, r3, #15
 8004478:	429a      	cmp	r2, r3
 800447a:	d908      	bls.n	800448e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800447c:	4b4a      	ldr	r3, [pc, #296]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	f023 020f 	bic.w	r2, r3, #15
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4947      	ldr	r1, [pc, #284]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 800448a:	4313      	orrs	r3, r2
 800448c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	2b00      	cmp	r3, #0
 8004498:	d055      	beq.n	8004546 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800449a:	4b43      	ldr	r3, [pc, #268]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	4940      	ldr	r1, [pc, #256]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d107      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044b4:	4b3c      	ldr	r3, [pc, #240]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d121      	bne.n	8004504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0f6      	b.n	80046b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b03      	cmp	r3, #3
 80044ca:	d107      	bne.n	80044dc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044cc:	4b36      	ldr	r3, [pc, #216]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d115      	bne.n	8004504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e0ea      	b.n	80046b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044e4:	4b30      	ldr	r3, [pc, #192]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e0de      	b.n	80046b2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044f4:	4b2c      	ldr	r3, [pc, #176]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f003 0304 	and.w	r3, r3, #4
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0d6      	b.n	80046b2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004504:	4b28      	ldr	r3, [pc, #160]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	f023 0207 	bic.w	r2, r3, #7
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	4925      	ldr	r1, [pc, #148]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 8004512:	4313      	orrs	r3, r2
 8004514:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004516:	f7fd fbbd 	bl	8001c94 <HAL_GetTick>
 800451a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451c:	e00a      	b.n	8004534 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451e:	f7fd fbb9 	bl	8001c94 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e0be      	b.n	80046b2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004534:	4b1c      	ldr	r3, [pc, #112]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	429a      	cmp	r2, r3
 8004544:	d1eb      	bne.n	800451e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d010      	beq.n	8004574 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	4b14      	ldr	r3, [pc, #80]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	429a      	cmp	r2, r3
 8004560:	d208      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004562:	4b11      	ldr	r3, [pc, #68]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f023 020f 	bic.w	r2, r3, #15
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	490e      	ldr	r1, [pc, #56]	@ (80045a8 <HAL_RCC_ClockConfig+0x244>)
 8004570:	4313      	orrs	r3, r2
 8004572:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004574:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <HAL_RCC_ClockConfig+0x240>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d214      	bcs.n	80045ac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004582:	4b08      	ldr	r3, [pc, #32]	@ (80045a4 <HAL_RCC_ClockConfig+0x240>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f023 020f 	bic.w	r2, r3, #15
 800458a:	4906      	ldr	r1, [pc, #24]	@ (80045a4 <HAL_RCC_ClockConfig+0x240>)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	4313      	orrs	r3, r2
 8004590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004592:	4b04      	ldr	r3, [pc, #16]	@ (80045a4 <HAL_RCC_ClockConfig+0x240>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d005      	beq.n	80045ac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e086      	b.n	80046b2 <HAL_RCC_ClockConfig+0x34e>
 80045a4:	52002000 	.word	0x52002000
 80045a8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d010      	beq.n	80045da <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	4b3f      	ldr	r3, [pc, #252]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 80045be:	699b      	ldr	r3, [r3, #24]
 80045c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d208      	bcs.n	80045da <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045c8:	4b3c      	ldr	r3, [pc, #240]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	4939      	ldr	r1, [pc, #228]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d010      	beq.n	8004608 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	4b34      	ldr	r3, [pc, #208]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 80045ec:	69db      	ldr	r3, [r3, #28]
 80045ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d208      	bcs.n	8004608 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80045f6:	4b31      	ldr	r3, [pc, #196]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 80045f8:	69db      	ldr	r3, [r3, #28]
 80045fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	492e      	ldr	r1, [pc, #184]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 8004604:	4313      	orrs	r3, r2
 8004606:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	d010      	beq.n	8004636 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699a      	ldr	r2, [r3, #24]
 8004618:	4b28      	ldr	r3, [pc, #160]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004620:	429a      	cmp	r2, r3
 8004622:	d208      	bcs.n	8004636 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004624:	4b25      	ldr	r3, [pc, #148]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	4922      	ldr	r1, [pc, #136]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 8004632:	4313      	orrs	r3, r2
 8004634:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	d010      	beq.n	8004664 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	4b1d      	ldr	r3, [pc, #116]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800464e:	429a      	cmp	r2, r3
 8004650:	d208      	bcs.n	8004664 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004652:	4b1a      	ldr	r3, [pc, #104]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	69db      	ldr	r3, [r3, #28]
 800465e:	4917      	ldr	r1, [pc, #92]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 8004660:	4313      	orrs	r3, r2
 8004662:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004664:	f000 f89e 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 8004668:	4602      	mov	r2, r0
 800466a:	4b14      	ldr	r3, [pc, #80]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	0a1b      	lsrs	r3, r3, #8
 8004670:	f003 030f 	and.w	r3, r3, #15
 8004674:	4912      	ldr	r1, [pc, #72]	@ (80046c0 <HAL_RCC_ClockConfig+0x35c>)
 8004676:	5ccb      	ldrb	r3, [r1, r3]
 8004678:	f003 031f 	and.w	r3, r3, #31
 800467c:	fa22 f303 	lsr.w	r3, r2, r3
 8004680:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004682:	4b0e      	ldr	r3, [pc, #56]	@ (80046bc <HAL_RCC_ClockConfig+0x358>)
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	4a0d      	ldr	r2, [pc, #52]	@ (80046c0 <HAL_RCC_ClockConfig+0x35c>)
 800468c:	5cd3      	ldrb	r3, [r2, r3]
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
 8004698:	4a0a      	ldr	r2, [pc, #40]	@ (80046c4 <HAL_RCC_ClockConfig+0x360>)
 800469a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800469c:	4a0a      	ldr	r2, [pc, #40]	@ (80046c8 <HAL_RCC_ClockConfig+0x364>)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80046a2:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <HAL_RCC_ClockConfig+0x368>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd faaa 	bl	8001c00 <HAL_InitTick>
 80046ac:	4603      	mov	r3, r0
 80046ae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	58024400 	.word	0x58024400
 80046c0:	0800a048 	.word	0x0800a048
 80046c4:	24000004 	.word	0x24000004
 80046c8:	24000000 	.word	0x24000000
 80046cc:	24000008 	.word	0x24000008

080046d0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08c      	sub	sp, #48	@ 0x30
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d12a      	bne.n	8004738 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80046e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004798 <HAL_RCC_MCOConfig+0xc8>)
 80046e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004798 <HAL_RCC_MCOConfig+0xc8>)
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046f2:	4b29      	ldr	r3, [pc, #164]	@ (8004798 <HAL_RCC_MCOConfig+0xc8>)
 80046f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	61bb      	str	r3, [r7, #24]
 80046fe:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004700:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004706:	2302      	movs	r3, #2
 8004708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800470a:	2303      	movs	r3, #3
 800470c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470e:	2300      	movs	r3, #0
 8004710:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004712:	2300      	movs	r3, #0
 8004714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004716:	f107 031c 	add.w	r3, r7, #28
 800471a:	4619      	mov	r1, r3
 800471c:	481f      	ldr	r0, [pc, #124]	@ (800479c <HAL_RCC_MCOConfig+0xcc>)
 800471e:	f7fe f89b 	bl	8002858 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004722:	4b1d      	ldr	r3, [pc, #116]	@ (8004798 <HAL_RCC_MCOConfig+0xc8>)
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	430b      	orrs	r3, r1
 8004730:	4919      	ldr	r1, [pc, #100]	@ (8004798 <HAL_RCC_MCOConfig+0xc8>)
 8004732:	4313      	orrs	r3, r2
 8004734:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8004736:	e02a      	b.n	800478e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8004738:	4b17      	ldr	r3, [pc, #92]	@ (8004798 <HAL_RCC_MCOConfig+0xc8>)
 800473a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800473e:	4a16      	ldr	r2, [pc, #88]	@ (8004798 <HAL_RCC_MCOConfig+0xc8>)
 8004740:	f043 0304 	orr.w	r3, r3, #4
 8004744:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004748:	4b13      	ldr	r3, [pc, #76]	@ (8004798 <HAL_RCC_MCOConfig+0xc8>)
 800474a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	617b      	str	r3, [r7, #20]
 8004754:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004756:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800475a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475c:	2302      	movs	r3, #2
 800475e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004760:	2303      	movs	r3, #3
 8004762:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004764:	2300      	movs	r3, #0
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004768:	2300      	movs	r3, #0
 800476a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800476c:	f107 031c 	add.w	r3, r7, #28
 8004770:	4619      	mov	r1, r3
 8004772:	480b      	ldr	r0, [pc, #44]	@ (80047a0 <HAL_RCC_MCOConfig+0xd0>)
 8004774:	f7fe f870 	bl	8002858 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8004778:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <HAL_RCC_MCOConfig+0xc8>)
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	01d9      	lsls	r1, r3, #7
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	430b      	orrs	r3, r1
 8004788:	4903      	ldr	r1, [pc, #12]	@ (8004798 <HAL_RCC_MCOConfig+0xc8>)
 800478a:	4313      	orrs	r3, r2
 800478c:	610b      	str	r3, [r1, #16]
}
 800478e:	bf00      	nop
 8004790:	3730      	adds	r7, #48	@ 0x30
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	58024400 	.word	0x58024400
 800479c:	58020000 	.word	0x58020000
 80047a0:	58020800 	.word	0x58020800

080047a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b089      	sub	sp, #36	@ 0x24
 80047a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047aa:	4bb3      	ldr	r3, [pc, #716]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047b2:	2b18      	cmp	r3, #24
 80047b4:	f200 8155 	bhi.w	8004a62 <HAL_RCC_GetSysClockFreq+0x2be>
 80047b8:	a201      	add	r2, pc, #4	@ (adr r2, 80047c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80047ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047be:	bf00      	nop
 80047c0:	08004825 	.word	0x08004825
 80047c4:	08004a63 	.word	0x08004a63
 80047c8:	08004a63 	.word	0x08004a63
 80047cc:	08004a63 	.word	0x08004a63
 80047d0:	08004a63 	.word	0x08004a63
 80047d4:	08004a63 	.word	0x08004a63
 80047d8:	08004a63 	.word	0x08004a63
 80047dc:	08004a63 	.word	0x08004a63
 80047e0:	0800484b 	.word	0x0800484b
 80047e4:	08004a63 	.word	0x08004a63
 80047e8:	08004a63 	.word	0x08004a63
 80047ec:	08004a63 	.word	0x08004a63
 80047f0:	08004a63 	.word	0x08004a63
 80047f4:	08004a63 	.word	0x08004a63
 80047f8:	08004a63 	.word	0x08004a63
 80047fc:	08004a63 	.word	0x08004a63
 8004800:	08004851 	.word	0x08004851
 8004804:	08004a63 	.word	0x08004a63
 8004808:	08004a63 	.word	0x08004a63
 800480c:	08004a63 	.word	0x08004a63
 8004810:	08004a63 	.word	0x08004a63
 8004814:	08004a63 	.word	0x08004a63
 8004818:	08004a63 	.word	0x08004a63
 800481c:	08004a63 	.word	0x08004a63
 8004820:	08004857 	.word	0x08004857
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004824:	4b94      	ldr	r3, [pc, #592]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0320 	and.w	r3, r3, #32
 800482c:	2b00      	cmp	r3, #0
 800482e:	d009      	beq.n	8004844 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004830:	4b91      	ldr	r3, [pc, #580]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	08db      	lsrs	r3, r3, #3
 8004836:	f003 0303 	and.w	r3, r3, #3
 800483a:	4a90      	ldr	r2, [pc, #576]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
 8004840:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004842:	e111      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004844:	4b8d      	ldr	r3, [pc, #564]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004846:	61bb      	str	r3, [r7, #24]
      break;
 8004848:	e10e      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800484a:	4b8d      	ldr	r3, [pc, #564]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800484c:	61bb      	str	r3, [r7, #24]
      break;
 800484e:	e10b      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004850:	4b8c      	ldr	r3, [pc, #560]	@ (8004a84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004852:	61bb      	str	r3, [r7, #24]
      break;
 8004854:	e108      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004856:	4b88      	ldr	r3, [pc, #544]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004860:	4b85      	ldr	r3, [pc, #532]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800486a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800486c:	4b82      	ldr	r3, [pc, #520]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800486e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004876:	4b80      	ldr	r3, [pc, #512]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487a:	08db      	lsrs	r3, r3, #3
 800487c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	ee07 3a90 	vmov	s15, r3
 800488a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800488e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80e1 	beq.w	8004a5c <HAL_RCC_GetSysClockFreq+0x2b8>
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b02      	cmp	r3, #2
 800489e:	f000 8083 	beq.w	80049a8 <HAL_RCC_GetSysClockFreq+0x204>
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	f200 80a1 	bhi.w	80049ec <HAL_RCC_GetSysClockFreq+0x248>
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d003      	beq.n	80048b8 <HAL_RCC_GetSysClockFreq+0x114>
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d056      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x1c0>
 80048b6:	e099      	b.n	80049ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048b8:	4b6f      	ldr	r3, [pc, #444]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d02d      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048c4:	4b6c      	ldr	r3, [pc, #432]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	08db      	lsrs	r3, r3, #3
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	4a6b      	ldr	r2, [pc, #428]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
 80048d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	ee07 3a90 	vmov	s15, r3
 80048dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ee:	4b62      	ldr	r3, [pc, #392]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80048f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004902:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800490a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800490e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800491e:	e087      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004a8c <HAL_RCC_GetSysClockFreq+0x2e8>
 800492e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004932:	4b51      	ldr	r3, [pc, #324]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800493a:	ee07 3a90 	vmov	s15, r3
 800493e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004942:	ed97 6a02 	vldr	s12, [r7, #8]
 8004946:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800494a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800494e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004952:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800495a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800495e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004962:	e065      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004a90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004976:	4b40      	ldr	r3, [pc, #256]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004986:	ed97 6a02 	vldr	s12, [r7, #8]
 800498a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 800498e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004996:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800499a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800499e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049a6:	e043      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	ee07 3a90 	vmov	s15, r3
 80049ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004a94 <HAL_RCC_GetSysClockFreq+0x2f0>
 80049b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80049ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 80049d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80049ea:	e021      	b.n	8004a30 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	ee07 3a90 	vmov	s15, r3
 80049f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004a90 <HAL_RCC_GetSysClockFreq+0x2ec>
 80049fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a12:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004a88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004a2e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004a30:	4b11      	ldr	r3, [pc, #68]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a34:	0a5b      	lsrs	r3, r3, #9
 8004a36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a3a:	3301      	adds	r3, #1
 8004a3c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	ee07 3a90 	vmov	s15, r3
 8004a44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a48:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a54:	ee17 3a90 	vmov	r3, s15
 8004a58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004a5a:	e005      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	61bb      	str	r3, [r7, #24]
      break;
 8004a60:	e002      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004a62:	4b07      	ldr	r3, [pc, #28]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004a64:	61bb      	str	r3, [r7, #24]
      break;
 8004a66:	bf00      	nop
  }

  return sysclockfreq;
 8004a68:	69bb      	ldr	r3, [r7, #24]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3724      	adds	r7, #36	@ 0x24
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	58024400 	.word	0x58024400
 8004a7c:	03d09000 	.word	0x03d09000
 8004a80:	003d0900 	.word	0x003d0900
 8004a84:	007a1200 	.word	0x007a1200
 8004a88:	46000000 	.word	0x46000000
 8004a8c:	4c742400 	.word	0x4c742400
 8004a90:	4a742400 	.word	0x4a742400
 8004a94:	4af42400 	.word	0x4af42400

08004a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004a9e:	f7ff fe81 	bl	80047a4 <HAL_RCC_GetSysClockFreq>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	4b10      	ldr	r3, [pc, #64]	@ (8004ae8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	0a1b      	lsrs	r3, r3, #8
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	490f      	ldr	r1, [pc, #60]	@ (8004aec <HAL_RCC_GetHCLKFreq+0x54>)
 8004ab0:	5ccb      	ldrb	r3, [r1, r3]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004abc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	4a09      	ldr	r2, [pc, #36]	@ (8004aec <HAL_RCC_GetHCLKFreq+0x54>)
 8004ac6:	5cd3      	ldrb	r3, [r2, r3]
 8004ac8:	f003 031f 	and.w	r3, r3, #31
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad2:	4a07      	ldr	r2, [pc, #28]	@ (8004af0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ad4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ad6:	4a07      	ldr	r2, [pc, #28]	@ (8004af4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004adc:	4b04      	ldr	r3, [pc, #16]	@ (8004af0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ade:	681b      	ldr	r3, [r3, #0]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	58024400 	.word	0x58024400
 8004aec:	0800a048 	.word	0x0800a048
 8004af0:	24000004 	.word	0x24000004
 8004af4:	24000000 	.word	0x24000000

08004af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004afc:	f7ff ffcc 	bl	8004a98 <HAL_RCC_GetHCLKFreq>
 8004b00:	4602      	mov	r2, r0
 8004b02:	4b06      	ldr	r3, [pc, #24]	@ (8004b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	091b      	lsrs	r3, r3, #4
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	4904      	ldr	r1, [pc, #16]	@ (8004b20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b0e:	5ccb      	ldrb	r3, [r1, r3]
 8004b10:	f003 031f 	and.w	r3, r3, #31
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	58024400 	.word	0x58024400
 8004b20:	0800a048 	.word	0x0800a048

08004b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004b28:	f7ff ffb6 	bl	8004a98 <HAL_RCC_GetHCLKFreq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	4904      	ldr	r1, [pc, #16]	@ (8004b4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b3a:	5ccb      	ldrb	r3, [r1, r3]
 8004b3c:	f003 031f 	and.w	r3, r3, #31
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	58024400 	.word	0x58024400
 8004b4c:	0800a048 	.word	0x0800a048

08004b50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b54:	b0ca      	sub	sp, #296	@ 0x128
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b62:	2300      	movs	r3, #0
 8004b64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b70:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004b74:	2500      	movs	r5, #0
 8004b76:	ea54 0305 	orrs.w	r3, r4, r5
 8004b7a:	d049      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b80:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004b82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b86:	d02f      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004b88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b8c:	d828      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b8e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b92:	d01a      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004b94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b98:	d822      	bhi.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004b9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ba2:	d007      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ba4:	e01c      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba6:	4bb8      	ldr	r3, [pc, #736]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004baa:	4ab7      	ldr	r2, [pc, #732]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bb2:	e01a      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb8:	3308      	adds	r3, #8
 8004bba:	2102      	movs	r1, #2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 fc8f 	bl	80064e0 <RCCEx_PLL2_Config>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bc8:	e00f      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bce:	3328      	adds	r3, #40	@ 0x28
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 fd36 	bl	8006644 <RCCEx_PLL3_Config>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004bde:	e004      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004be6:	e000      	b.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004bf2:	4ba5      	ldr	r3, [pc, #660]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bf6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004c00:	4aa1      	ldr	r2, [pc, #644]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c02:	430b      	orrs	r3, r1
 8004c04:	6513      	str	r3, [r2, #80]	@ 0x50
 8004c06:	e003      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c18:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8004c1c:	f04f 0900 	mov.w	r9, #0
 8004c20:	ea58 0309 	orrs.w	r3, r8, r9
 8004c24:	d047      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d82a      	bhi.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004c30:	a201      	add	r2, pc, #4	@ (adr r2, 8004c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c36:	bf00      	nop
 8004c38:	08004c4d 	.word	0x08004c4d
 8004c3c:	08004c5b 	.word	0x08004c5b
 8004c40:	08004c71 	.word	0x08004c71
 8004c44:	08004c8f 	.word	0x08004c8f
 8004c48:	08004c8f 	.word	0x08004c8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c4c:	4b8e      	ldr	r3, [pc, #568]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c50:	4a8d      	ldr	r2, [pc, #564]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c58:	e01a      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c5e:	3308      	adds	r3, #8
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f001 fc3c 	bl	80064e0 <RCCEx_PLL2_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c6e:	e00f      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c74:	3328      	adds	r3, #40	@ 0x28
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f001 fce3 	bl	8006644 <RCCEx_PLL3_Config>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004c84:	e004      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c8c:	e000      	b.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8004c8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d10a      	bne.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c98:	4b7b      	ldr	r3, [pc, #492]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c9c:	f023 0107 	bic.w	r1, r3, #7
 8004ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ca6:	4a78      	ldr	r2, [pc, #480]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004ca8:	430b      	orrs	r3, r1
 8004caa:	6513      	str	r3, [r2, #80]	@ 0x50
 8004cac:	e003      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8004cc2:	f04f 0b00 	mov.w	fp, #0
 8004cc6:	ea5a 030b 	orrs.w	r3, sl, fp
 8004cca:	d04c      	beq.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8004ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cd6:	d030      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8004cd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cdc:	d829      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004cde:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ce0:	d02d      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8004ce2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ce4:	d825      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004ce6:	2b80      	cmp	r3, #128	@ 0x80
 8004ce8:	d018      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004cea:	2b80      	cmp	r3, #128	@ 0x80
 8004cec:	d821      	bhi.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d002      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004cf2:	2b40      	cmp	r3, #64	@ 0x40
 8004cf4:	d007      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004cf6:	e01c      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf8:	4b63      	ldr	r3, [pc, #396]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfc:	4a62      	ldr	r2, [pc, #392]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004cfe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d04:	e01c      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f001 fbe6 	bl	80064e0 <RCCEx_PLL2_Config>
 8004d14:	4603      	mov	r3, r0
 8004d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d1a:	e011      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d20:	3328      	adds	r3, #40	@ 0x28
 8004d22:	2100      	movs	r1, #0
 8004d24:	4618      	mov	r0, r3
 8004d26:	f001 fc8d 	bl	8006644 <RCCEx_PLL3_Config>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004d30:	e006      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d38:	e002      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d3a:	bf00      	nop
 8004d3c:	e000      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8004d3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d48:	4b4f      	ldr	r3, [pc, #316]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d56:	4a4c      	ldr	r2, [pc, #304]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8004d5c:	e003      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004d72:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8004d76:	2300      	movs	r3, #0
 8004d78:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004d7c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004d80:	460b      	mov	r3, r1
 8004d82:	4313      	orrs	r3, r2
 8004d84:	d053      	beq.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004d8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d92:	d035      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004d94:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d98:	d82e      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004d9a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004d9e:	d031      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004da0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004da4:	d828      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004da6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004daa:	d01a      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004dac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004db0:	d822      	bhi.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8004db6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dba:	d007      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004dbc:	e01c      	b.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dbe:	4b32      	ldr	r3, [pc, #200]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc2:	4a31      	ldr	r2, [pc, #196]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004dca:	e01c      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f001 fb83 	bl	80064e0 <RCCEx_PLL2_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004de0:	e011      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de6:	3328      	adds	r3, #40	@ 0x28
 8004de8:	2100      	movs	r1, #0
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 fc2a 	bl	8006644 <RCCEx_PLL3_Config>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004df6:	e006      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dfe:	e002      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e00:	bf00      	nop
 8004e02:	e000      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e12:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8004e88 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004e20:	430b      	orrs	r3, r1
 8004e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e24:	e003      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e36:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004e3a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004e44:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	d056      	beq.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004e56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e5a:	d038      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004e5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e60:	d831      	bhi.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e62:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e66:	d034      	beq.n	8004ed2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004e68:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004e6c:	d82b      	bhi.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e72:	d01d      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004e74:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e78:	d825      	bhi.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d006      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004e7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e82:	d00a      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004e84:	e01f      	b.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004e86:	bf00      	nop
 8004e88:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e8c:	4ba2      	ldr	r3, [pc, #648]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	4aa1      	ldr	r2, [pc, #644]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004e92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004e98:	e01c      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e9e:	3308      	adds	r3, #8
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 fb1c 	bl	80064e0 <RCCEx_PLL2_Config>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004eae:	e011      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb4:	3328      	adds	r3, #40	@ 0x28
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f001 fbc3 	bl	8006644 <RCCEx_PLL3_Config>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004ec4:	e006      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ecc:	e002      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004ece:	bf00      	nop
 8004ed0:	e000      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004ed2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ed4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004edc:	4b8e      	ldr	r3, [pc, #568]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ee0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004eec:	4a8a      	ldr	r2, [pc, #552]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ef2:	e003      	b.n	8004efc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ef8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f04:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004f08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004f12:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8004f16:	460b      	mov	r3, r1
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	d03a      	beq.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f22:	2b30      	cmp	r3, #48	@ 0x30
 8004f24:	d01f      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004f26:	2b30      	cmp	r3, #48	@ 0x30
 8004f28:	d819      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f2a:	2b20      	cmp	r3, #32
 8004f2c:	d00c      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004f2e:	2b20      	cmp	r3, #32
 8004f30:	d815      	bhi.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d019      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004f36:	2b10      	cmp	r3, #16
 8004f38:	d111      	bne.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f3a:	4b77      	ldr	r3, [pc, #476]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	4a76      	ldr	r2, [pc, #472]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f46:	e011      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f4c:	3308      	adds	r3, #8
 8004f4e:	2102      	movs	r1, #2
 8004f50:	4618      	mov	r0, r3
 8004f52:	f001 fac5 	bl	80064e0 <RCCEx_PLL2_Config>
 8004f56:	4603      	mov	r3, r0
 8004f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004f5c:	e006      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f64:	e002      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004f66:	bf00      	nop
 8004f68:	e000      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004f6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10a      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f74:	4b68      	ldr	r3, [pc, #416]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f78:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f82:	4a65      	ldr	r2, [pc, #404]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004f84:	430b      	orrs	r3, r1
 8004f86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f88:	e003      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004f9e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004fa8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004fac:	460b      	mov	r3, r1
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	d051      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fbc:	d035      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004fbe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fc2:	d82e      	bhi.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004fc4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fc8:	d031      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004fca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fce:	d828      	bhi.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd4:	d01a      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004fd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fda:	d822      	bhi.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fe4:	d007      	beq.n	8004ff6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004fe6:	e01c      	b.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fec:	4a4a      	ldr	r2, [pc, #296]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004fee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ff2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004ff4:	e01c      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffa:	3308      	adds	r3, #8
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	4618      	mov	r0, r3
 8005000:	f001 fa6e 	bl	80064e0 <RCCEx_PLL2_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800500a:	e011      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800500c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005010:	3328      	adds	r3, #40	@ 0x28
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f001 fb15 	bl	8006644 <RCCEx_PLL3_Config>
 800501a:	4603      	mov	r3, r0
 800501c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005020:	e006      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005028:	e002      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800502a:	bf00      	nop
 800502c:	e000      	b.n	8005030 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800502e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005030:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10a      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005038:	4b37      	ldr	r3, [pc, #220]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800503a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800503c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005040:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005046:	4a34      	ldr	r2, [pc, #208]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005048:	430b      	orrs	r3, r1
 800504a:	6513      	str	r3, [r2, #80]	@ 0x50
 800504c:	e003      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800504e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005052:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800505e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005062:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005066:	2300      	movs	r3, #0
 8005068:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800506c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005070:	460b      	mov	r3, r1
 8005072:	4313      	orrs	r3, r2
 8005074:	d056      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800507c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005080:	d033      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005082:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005086:	d82c      	bhi.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005088:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800508c:	d02f      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800508e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005092:	d826      	bhi.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005094:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005098:	d02b      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800509a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800509e:	d820      	bhi.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050a4:	d012      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80050a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050aa:	d81a      	bhi.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d022      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050b4:	d115      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ba:	3308      	adds	r3, #8
 80050bc:	2101      	movs	r1, #1
 80050be:	4618      	mov	r0, r3
 80050c0:	f001 fa0e 	bl	80064e0 <RCCEx_PLL2_Config>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80050ca:	e015      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d0:	3328      	adds	r3, #40	@ 0x28
 80050d2:	2101      	movs	r1, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f001 fab5 	bl	8006644 <RCCEx_PLL3_Config>
 80050da:	4603      	mov	r3, r0
 80050dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80050e0:	e00a      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050e8:	e006      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050ea:	bf00      	nop
 80050ec:	e004      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80050f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10d      	bne.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005100:	4b05      	ldr	r3, [pc, #20]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005104:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005108:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800510c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800510e:	4a02      	ldr	r2, [pc, #8]	@ (8005118 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005110:	430b      	orrs	r3, r1
 8005112:	6513      	str	r3, [r2, #80]	@ 0x50
 8005114:	e006      	b.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005116:	bf00      	nop
 8005118:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800511c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005120:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005134:	2300      	movs	r3, #0
 8005136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800513a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800513e:	460b      	mov	r3, r1
 8005140:	4313      	orrs	r3, r2
 8005142:	d055      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005148:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800514c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005150:	d033      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005152:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005156:	d82c      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005158:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800515c:	d02f      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800515e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005162:	d826      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005164:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005168:	d02b      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800516a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800516e:	d820      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005170:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005174:	d012      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005176:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800517a:	d81a      	bhi.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800517c:	2b00      	cmp	r3, #0
 800517e:	d022      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005180:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005184:	d115      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800518a:	3308      	adds	r3, #8
 800518c:	2101      	movs	r1, #1
 800518e:	4618      	mov	r0, r3
 8005190:	f001 f9a6 	bl	80064e0 <RCCEx_PLL2_Config>
 8005194:	4603      	mov	r3, r0
 8005196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800519a:	e015      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800519c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051a0:	3328      	adds	r3, #40	@ 0x28
 80051a2:	2101      	movs	r1, #1
 80051a4:	4618      	mov	r0, r3
 80051a6:	f001 fa4d 	bl	8006644 <RCCEx_PLL3_Config>
 80051aa:	4603      	mov	r3, r0
 80051ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80051b0:	e00a      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051b8:	e006      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051ba:	bf00      	nop
 80051bc:	e004      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051be:	bf00      	nop
 80051c0:	e002      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051c2:	bf00      	nop
 80051c4:	e000      	b.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80051c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10b      	bne.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80051d0:	4ba3      	ldr	r3, [pc, #652]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051d4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80051d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051e0:	4a9f      	ldr	r2, [pc, #636]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80051e2:	430b      	orrs	r3, r1
 80051e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051e6:	e003      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80051f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80051fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005200:	2300      	movs	r3, #0
 8005202:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005206:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800520a:	460b      	mov	r3, r1
 800520c:	4313      	orrs	r3, r2
 800520e:	d037      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005216:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800521a:	d00e      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800521c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005220:	d816      	bhi.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005222:	2b00      	cmp	r3, #0
 8005224:	d018      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005226:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800522a:	d111      	bne.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800522c:	4b8c      	ldr	r3, [pc, #560]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800522e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005230:	4a8b      	ldr	r2, [pc, #556]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005238:	e00f      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800523a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800523e:	3308      	adds	r3, #8
 8005240:	2101      	movs	r1, #1
 8005242:	4618      	mov	r0, r3
 8005244:	f001 f94c 	bl	80064e0 <RCCEx_PLL2_Config>
 8005248:	4603      	mov	r3, r0
 800524a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800524e:	e004      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005256:	e000      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800525a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10a      	bne.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005262:	4b7f      	ldr	r3, [pc, #508]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005266:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800526a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800526e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005270:	4a7b      	ldr	r2, [pc, #492]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005272:	430b      	orrs	r3, r1
 8005274:	6513      	str	r3, [r2, #80]	@ 0x50
 8005276:	e003      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005278:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800527c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005288:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800528c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005290:	2300      	movs	r3, #0
 8005292:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005296:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800529a:	460b      	mov	r3, r1
 800529c:	4313      	orrs	r3, r2
 800529e:	d039      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80052a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d81c      	bhi.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80052aa:	a201      	add	r2, pc, #4	@ (adr r2, 80052b0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80052ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b0:	080052ed 	.word	0x080052ed
 80052b4:	080052c1 	.word	0x080052c1
 80052b8:	080052cf 	.word	0x080052cf
 80052bc:	080052ed 	.word	0x080052ed
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052c0:	4b67      	ldr	r3, [pc, #412]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c4:	4a66      	ldr	r2, [pc, #408]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80052cc:	e00f      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052d2:	3308      	adds	r3, #8
 80052d4:	2102      	movs	r1, #2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f001 f902 	bl	80064e0 <RCCEx_PLL2_Config>
 80052dc:	4603      	mov	r3, r0
 80052de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80052e2:	e004      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052ea:	e000      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80052ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d10a      	bne.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80052f6:	4b5a      	ldr	r3, [pc, #360]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80052f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052fa:	f023 0103 	bic.w	r1, r3, #3
 80052fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005304:	4a56      	ldr	r2, [pc, #344]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005306:	430b      	orrs	r3, r1
 8005308:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800530a:	e003      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800530c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005310:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005320:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005324:	2300      	movs	r3, #0
 8005326:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800532a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800532e:	460b      	mov	r3, r1
 8005330:	4313      	orrs	r3, r2
 8005332:	f000 809f 	beq.w	8005474 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005336:	4b4b      	ldr	r3, [pc, #300]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a4a      	ldr	r2, [pc, #296]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800533c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005340:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005342:	f7fc fca7 	bl	8001c94 <HAL_GetTick>
 8005346:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800534a:	e00b      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800534c:	f7fc fca2 	bl	8001c94 <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	2b64      	cmp	r3, #100	@ 0x64
 800535a:	d903      	bls.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800535c:	2303      	movs	r3, #3
 800535e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005362:	e005      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005364:	4b3f      	ldr	r3, [pc, #252]	@ (8005464 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0ed      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005370:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005374:	2b00      	cmp	r3, #0
 8005376:	d179      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005378:	4b39      	ldr	r3, [pc, #228]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800537a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800537c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005380:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005384:	4053      	eors	r3, r2
 8005386:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800538a:	2b00      	cmp	r3, #0
 800538c:	d015      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800538e:	4b34      	ldr	r3, [pc, #208]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005396:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800539a:	4b31      	ldr	r3, [pc, #196]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800539e:	4a30      	ldr	r2, [pc, #192]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053a4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80053a6:	4b2e      	ldr	r3, [pc, #184]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053b0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80053b2:	4a2b      	ldr	r2, [pc, #172]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80053b8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80053ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80053c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c6:	d118      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053c8:	f7fc fc64 	bl	8001c94 <HAL_GetTick>
 80053cc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053d0:	e00d      	b.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053d2:	f7fc fc5f 	bl	8001c94 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80053dc:	1ad2      	subs	r2, r2, r3
 80053de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d903      	bls.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80053ec:	e005      	b.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80053ee:	4b1c      	ldr	r3, [pc, #112]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80053f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0eb      	beq.n	80053d2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80053fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d129      	bne.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005406:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800540a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800540e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005412:	d10e      	bne.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005414:	4b12      	ldr	r3, [pc, #72]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800541c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005420:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005424:	091a      	lsrs	r2, r3, #4
 8005426:	4b10      	ldr	r3, [pc, #64]	@ (8005468 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005428:	4013      	ands	r3, r2
 800542a:	4a0d      	ldr	r2, [pc, #52]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800542c:	430b      	orrs	r3, r1
 800542e:	6113      	str	r3, [r2, #16]
 8005430:	e005      	b.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005432:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	4a0a      	ldr	r2, [pc, #40]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005438:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800543c:	6113      	str	r3, [r2, #16]
 800543e:	4b08      	ldr	r3, [pc, #32]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005440:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005446:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800544a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800544e:	4a04      	ldr	r2, [pc, #16]	@ (8005460 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005450:	430b      	orrs	r3, r1
 8005452:	6713      	str	r3, [r2, #112]	@ 0x70
 8005454:	e00e      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800545a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800545e:	e009      	b.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005460:	58024400 	.word	0x58024400
 8005464:	58024800 	.word	0x58024800
 8005468:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005470:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f002 0301 	and.w	r3, r2, #1
 8005480:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005484:	2300      	movs	r3, #0
 8005486:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800548a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800548e:	460b      	mov	r3, r1
 8005490:	4313      	orrs	r3, r2
 8005492:	f000 8089 	beq.w	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800549a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800549c:	2b28      	cmp	r3, #40	@ 0x28
 800549e:	d86b      	bhi.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80054a0:	a201      	add	r2, pc, #4	@ (adr r2, 80054a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80054a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a6:	bf00      	nop
 80054a8:	08005581 	.word	0x08005581
 80054ac:	08005579 	.word	0x08005579
 80054b0:	08005579 	.word	0x08005579
 80054b4:	08005579 	.word	0x08005579
 80054b8:	08005579 	.word	0x08005579
 80054bc:	08005579 	.word	0x08005579
 80054c0:	08005579 	.word	0x08005579
 80054c4:	08005579 	.word	0x08005579
 80054c8:	0800554d 	.word	0x0800554d
 80054cc:	08005579 	.word	0x08005579
 80054d0:	08005579 	.word	0x08005579
 80054d4:	08005579 	.word	0x08005579
 80054d8:	08005579 	.word	0x08005579
 80054dc:	08005579 	.word	0x08005579
 80054e0:	08005579 	.word	0x08005579
 80054e4:	08005579 	.word	0x08005579
 80054e8:	08005563 	.word	0x08005563
 80054ec:	08005579 	.word	0x08005579
 80054f0:	08005579 	.word	0x08005579
 80054f4:	08005579 	.word	0x08005579
 80054f8:	08005579 	.word	0x08005579
 80054fc:	08005579 	.word	0x08005579
 8005500:	08005579 	.word	0x08005579
 8005504:	08005579 	.word	0x08005579
 8005508:	08005581 	.word	0x08005581
 800550c:	08005579 	.word	0x08005579
 8005510:	08005579 	.word	0x08005579
 8005514:	08005579 	.word	0x08005579
 8005518:	08005579 	.word	0x08005579
 800551c:	08005579 	.word	0x08005579
 8005520:	08005579 	.word	0x08005579
 8005524:	08005579 	.word	0x08005579
 8005528:	08005581 	.word	0x08005581
 800552c:	08005579 	.word	0x08005579
 8005530:	08005579 	.word	0x08005579
 8005534:	08005579 	.word	0x08005579
 8005538:	08005579 	.word	0x08005579
 800553c:	08005579 	.word	0x08005579
 8005540:	08005579 	.word	0x08005579
 8005544:	08005579 	.word	0x08005579
 8005548:	08005581 	.word	0x08005581
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800554c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005550:	3308      	adds	r3, #8
 8005552:	2101      	movs	r1, #1
 8005554:	4618      	mov	r0, r3
 8005556:	f000 ffc3 	bl	80064e0 <RCCEx_PLL2_Config>
 800555a:	4603      	mov	r3, r0
 800555c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005560:	e00f      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005566:	3328      	adds	r3, #40	@ 0x28
 8005568:	2101      	movs	r1, #1
 800556a:	4618      	mov	r0, r3
 800556c:	f001 f86a 	bl	8006644 <RCCEx_PLL3_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005576:	e004      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800557e:	e000      	b.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10a      	bne.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800558a:	4bbf      	ldr	r3, [pc, #764]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800558c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800558e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005596:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005598:	4abb      	ldr	r2, [pc, #748]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800559a:	430b      	orrs	r3, r1
 800559c:	6553      	str	r3, [r2, #84]	@ 0x54
 800559e:	e003      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80055a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	f002 0302 	and.w	r3, r2, #2
 80055b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055b8:	2300      	movs	r3, #0
 80055ba:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80055be:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80055c2:	460b      	mov	r3, r1
 80055c4:	4313      	orrs	r3, r2
 80055c6:	d041      	beq.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80055c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80055ce:	2b05      	cmp	r3, #5
 80055d0:	d824      	bhi.n	800561c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80055d2:	a201      	add	r2, pc, #4	@ (adr r2, 80055d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d8:	08005625 	.word	0x08005625
 80055dc:	080055f1 	.word	0x080055f1
 80055e0:	08005607 	.word	0x08005607
 80055e4:	08005625 	.word	0x08005625
 80055e8:	08005625 	.word	0x08005625
 80055ec:	08005625 	.word	0x08005625
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f4:	3308      	adds	r3, #8
 80055f6:	2101      	movs	r1, #1
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 ff71 	bl	80064e0 <RCCEx_PLL2_Config>
 80055fe:	4603      	mov	r3, r0
 8005600:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005604:	e00f      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560a:	3328      	adds	r3, #40	@ 0x28
 800560c:	2101      	movs	r1, #1
 800560e:	4618      	mov	r0, r3
 8005610:	f001 f818 	bl	8006644 <RCCEx_PLL3_Config>
 8005614:	4603      	mov	r3, r0
 8005616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800561a:	e004      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005622:	e000      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005624:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10a      	bne.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800562e:	4b96      	ldr	r3, [pc, #600]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005632:	f023 0107 	bic.w	r1, r3, #7
 8005636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800563c:	4a92      	ldr	r2, [pc, #584]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800563e:	430b      	orrs	r3, r1
 8005640:	6553      	str	r3, [r2, #84]	@ 0x54
 8005642:	e003      	b.n	800564c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005648:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800564c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f002 0304 	and.w	r3, r2, #4
 8005658:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800565c:	2300      	movs	r3, #0
 800565e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005662:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005666:	460b      	mov	r3, r1
 8005668:	4313      	orrs	r3, r2
 800566a:	d044      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005670:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005674:	2b05      	cmp	r3, #5
 8005676:	d825      	bhi.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005678:	a201      	add	r2, pc, #4	@ (adr r2, 8005680 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800567a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567e:	bf00      	nop
 8005680:	080056cd 	.word	0x080056cd
 8005684:	08005699 	.word	0x08005699
 8005688:	080056af 	.word	0x080056af
 800568c:	080056cd 	.word	0x080056cd
 8005690:	080056cd 	.word	0x080056cd
 8005694:	080056cd 	.word	0x080056cd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569c:	3308      	adds	r3, #8
 800569e:	2101      	movs	r1, #1
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 ff1d 	bl	80064e0 <RCCEx_PLL2_Config>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80056ac:	e00f      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80056ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b2:	3328      	adds	r3, #40	@ 0x28
 80056b4:	2101      	movs	r1, #1
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 ffc4 	bl	8006644 <RCCEx_PLL3_Config>
 80056bc:	4603      	mov	r3, r0
 80056be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80056c2:	e004      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80056ca:	e000      	b.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80056cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10b      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056d6:	4b6c      	ldr	r3, [pc, #432]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056da:	f023 0107 	bic.w	r1, r3, #7
 80056de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80056e6:	4a68      	ldr	r2, [pc, #416]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80056e8:	430b      	orrs	r3, r1
 80056ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80056ec:	e003      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f002 0320 	and.w	r3, r2, #32
 8005702:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005706:	2300      	movs	r3, #0
 8005708:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800570c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005710:	460b      	mov	r3, r1
 8005712:	4313      	orrs	r3, r2
 8005714:	d055      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800571e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005722:	d033      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005724:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005728:	d82c      	bhi.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800572a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800572e:	d02f      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005730:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005734:	d826      	bhi.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005736:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800573a:	d02b      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800573c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005740:	d820      	bhi.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005746:	d012      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005748:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800574c:	d81a      	bhi.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d022      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005756:	d115      	bne.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575c:	3308      	adds	r3, #8
 800575e:	2100      	movs	r1, #0
 8005760:	4618      	mov	r0, r3
 8005762:	f000 febd 	bl	80064e0 <RCCEx_PLL2_Config>
 8005766:	4603      	mov	r3, r0
 8005768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800576c:	e015      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800576e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005772:	3328      	adds	r3, #40	@ 0x28
 8005774:	2102      	movs	r1, #2
 8005776:	4618      	mov	r0, r3
 8005778:	f000 ff64 	bl	8006644 <RCCEx_PLL3_Config>
 800577c:	4603      	mov	r3, r0
 800577e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005782:	e00a      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800578a:	e006      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800578c:	bf00      	nop
 800578e:	e004      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005790:	bf00      	nop
 8005792:	e002      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005794:	bf00      	nop
 8005796:	e000      	b.n	800579a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800579a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10b      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057a2:	4b39      	ldr	r3, [pc, #228]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b2:	4a35      	ldr	r2, [pc, #212]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80057b4:	430b      	orrs	r3, r1
 80057b6:	6553      	str	r3, [r2, #84]	@ 0x54
 80057b8:	e003      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80057ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057d2:	2300      	movs	r3, #0
 80057d4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80057d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80057dc:	460b      	mov	r3, r1
 80057de:	4313      	orrs	r3, r2
 80057e0:	d058      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80057e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80057ea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80057ee:	d033      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80057f0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80057f4:	d82c      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80057f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057fa:	d02f      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80057fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005800:	d826      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005802:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005806:	d02b      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005808:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800580c:	d820      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800580e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005812:	d012      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005818:	d81a      	bhi.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d022      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800581e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005822:	d115      	bne.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005828:	3308      	adds	r3, #8
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f000 fe57 	bl	80064e0 <RCCEx_PLL2_Config>
 8005832:	4603      	mov	r3, r0
 8005834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005838:	e015      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800583a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800583e:	3328      	adds	r3, #40	@ 0x28
 8005840:	2102      	movs	r1, #2
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fefe 	bl	8006644 <RCCEx_PLL3_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800584e:	e00a      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005856:	e006      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005858:	bf00      	nop
 800585a:	e004      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800585c:	bf00      	nop
 800585e:	e002      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005860:	bf00      	nop
 8005862:	e000      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005866:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10e      	bne.n	800588c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800586e:	4b06      	ldr	r3, [pc, #24]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005872:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800587e:	4a02      	ldr	r2, [pc, #8]	@ (8005888 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005880:	430b      	orrs	r3, r1
 8005882:	6593      	str	r3, [r2, #88]	@ 0x58
 8005884:	e006      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005886:	bf00      	nop
 8005888:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005890:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80058a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058a4:	2300      	movs	r3, #0
 80058a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058aa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80058ae:	460b      	mov	r3, r1
 80058b0:	4313      	orrs	r3, r2
 80058b2:	d055      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80058b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80058bc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80058c0:	d033      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80058c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80058c6:	d82c      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80058c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058cc:	d02f      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80058ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058d2:	d826      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80058d4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80058d8:	d02b      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80058da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80058de:	d820      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80058e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058e4:	d012      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80058e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058ea:	d81a      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d022      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80058f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058f4:	d115      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fa:	3308      	adds	r3, #8
 80058fc:	2100      	movs	r1, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 fdee 	bl	80064e0 <RCCEx_PLL2_Config>
 8005904:	4603      	mov	r3, r0
 8005906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800590a:	e015      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800590c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005910:	3328      	adds	r3, #40	@ 0x28
 8005912:	2102      	movs	r1, #2
 8005914:	4618      	mov	r0, r3
 8005916:	f000 fe95 	bl	8006644 <RCCEx_PLL3_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005920:	e00a      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005928:	e006      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800592a:	bf00      	nop
 800592c:	e004      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800592e:	bf00      	nop
 8005930:	e002      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10b      	bne.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005940:	4ba1      	ldr	r3, [pc, #644]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005944:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005950:	4a9d      	ldr	r2, [pc, #628]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005952:	430b      	orrs	r3, r1
 8005954:	6593      	str	r3, [r2, #88]	@ 0x58
 8005956:	e003      	b.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800595c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005968:	f002 0308 	and.w	r3, r2, #8
 800596c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005970:	2300      	movs	r3, #0
 8005972:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005976:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800597a:	460b      	mov	r3, r1
 800597c:	4313      	orrs	r3, r2
 800597e:	d01e      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005984:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800598c:	d10c      	bne.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800598e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005992:	3328      	adds	r3, #40	@ 0x28
 8005994:	2102      	movs	r1, #2
 8005996:	4618      	mov	r0, r3
 8005998:	f000 fe54 	bl	8006644 <RCCEx_PLL3_Config>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d002      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80059a8:	4b87      	ldr	r3, [pc, #540]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ac:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80059b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059b8:	4a83      	ldr	r2, [pc, #524]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80059ba:	430b      	orrs	r3, r1
 80059bc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c6:	f002 0310 	and.w	r3, r2, #16
 80059ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059ce:	2300      	movs	r3, #0
 80059d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80059d4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80059d8:	460b      	mov	r3, r1
 80059da:	4313      	orrs	r3, r2
 80059dc:	d01e      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80059de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80059e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059ea:	d10c      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80059ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f0:	3328      	adds	r3, #40	@ 0x28
 80059f2:	2102      	movs	r1, #2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 fe25 	bl	8006644 <RCCEx_PLL3_Config>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a06:	4b70      	ldr	r3, [pc, #448]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005a16:	4a6c      	ldr	r2, [pc, #432]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005a28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a32:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005a36:	460b      	mov	r3, r1
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	d03e      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005a44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a48:	d022      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005a4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a4e:	d81b      	bhi.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d003      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a58:	d00b      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005a5a:	e015      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a60:	3308      	adds	r3, #8
 8005a62:	2100      	movs	r1, #0
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 fd3b 	bl	80064e0 <RCCEx_PLL2_Config>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a70:	e00f      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a76:	3328      	adds	r3, #40	@ 0x28
 8005a78:	2102      	movs	r1, #2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f000 fde2 	bl	8006644 <RCCEx_PLL3_Config>
 8005a80:	4603      	mov	r3, r0
 8005a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005a86:	e004      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a8e:	e000      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a9e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005aaa:	4a47      	ldr	r2, [pc, #284]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005aac:	430b      	orrs	r3, r1
 8005aae:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ab0:	e003      	b.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ab6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005ac6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005ac8:	2300      	movs	r3, #0
 8005aca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005acc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	d03b      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ade:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ae2:	d01f      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005ae4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005ae8:	d818      	bhi.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005aea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aee:	d003      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005af0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005af4:	d007      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005af6:	e011      	b.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005af8:	4b33      	ldr	r3, [pc, #204]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005afc:	4a32      	ldr	r2, [pc, #200]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005afe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b04:	e00f      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b0a:	3328      	adds	r3, #40	@ 0x28
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fd98 	bl	8006644 <RCCEx_PLL3_Config>
 8005b14:	4603      	mov	r3, r0
 8005b16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005b1a:	e004      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b22:	e000      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005b24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10b      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b2e:	4b26      	ldr	r3, [pc, #152]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b32:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3e:	4a22      	ldr	r2, [pc, #136]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b40:	430b      	orrs	r3, r1
 8005b42:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b44:	e003      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005b5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	677b      	str	r3, [r7, #116]	@ 0x74
 8005b60:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005b64:	460b      	mov	r3, r1
 8005b66:	4313      	orrs	r3, r2
 8005b68:	d034      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8005b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b78:	d007      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8005b7a:	e011      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b7c:	4b12      	ldr	r3, [pc, #72]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b80:	4a11      	ldr	r2, [pc, #68]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005b88:	e00e      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8e:	3308      	adds	r3, #8
 8005b90:	2102      	movs	r1, #2
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 fca4 	bl	80064e0 <RCCEx_PLL2_Config>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005b9e:	e003      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10d      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005bb0:	4b05      	ldr	r3, [pc, #20]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bb4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bbe:	4a02      	ldr	r2, [pc, #8]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005bc4:	e006      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8005bc6:	bf00      	nop
 8005bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8005be0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005be2:	2300      	movs	r3, #0
 8005be4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005be6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005bea:	460b      	mov	r3, r1
 8005bec:	4313      	orrs	r3, r2
 8005bee:	d00c      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bf4:	3328      	adds	r3, #40	@ 0x28
 8005bf6:	2102      	movs	r1, #2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fd23 	bl	8006644 <RCCEx_PLL3_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c12:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005c16:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c18:	2300      	movs	r3, #0
 8005c1a:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c1c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005c20:	460b      	mov	r3, r1
 8005c22:	4313      	orrs	r3, r2
 8005c24:	d038      	beq.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c32:	d018      	beq.n	8005c66 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8005c34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c38:	d811      	bhi.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005c3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c3e:	d014      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8005c40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c44:	d80b      	bhi.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d011      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8005c4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c4e:	d106      	bne.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c50:	4bc3      	ldr	r3, [pc, #780]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c54:	4ac2      	ldr	r2, [pc, #776]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005c5c:	e008      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c64:	e004      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c66:	bf00      	nop
 8005c68:	e002      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c6a:	bf00      	nop
 8005c6c:	e000      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8005c6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c78:	4bb9      	ldr	r3, [pc, #740]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c88:	4ab5      	ldr	r2, [pc, #724]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005c8a:	430b      	orrs	r3, r1
 8005c8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c8e:	e003      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005ca4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005caa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005cae:	460b      	mov	r3, r1
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	d009      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cb4:	4baa      	ldr	r3, [pc, #680]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cb8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8005cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cc2:	4aa7      	ldr	r2, [pc, #668]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cc4:	430b      	orrs	r3, r1
 8005cc6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005cd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cda:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	d00a      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005ce4:	4b9e      	ldr	r3, [pc, #632]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8005cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cf0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005cf4:	4a9a      	ldr	r2, [pc, #616]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005cf6:	430b      	orrs	r3, r1
 8005cf8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d02:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005d06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d08:	2300      	movs	r3, #0
 8005d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d0c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005d10:	460b      	mov	r3, r1
 8005d12:	4313      	orrs	r3, r2
 8005d14:	d009      	beq.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005d16:	4b92      	ldr	r3, [pc, #584]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d1a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8005d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d24:	4a8e      	ldr	r2, [pc, #568]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d26:	430b      	orrs	r3, r1
 8005d28:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8005d36:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d38:	2300      	movs	r3, #0
 8005d3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d3c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005d40:	460b      	mov	r3, r1
 8005d42:	4313      	orrs	r3, r2
 8005d44:	d00e      	beq.n	8005d64 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005d46:	4b86      	ldr	r3, [pc, #536]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	4a85      	ldr	r2, [pc, #532]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d4c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005d50:	6113      	str	r3, [r2, #16]
 8005d52:	4b83      	ldr	r3, [pc, #524]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d54:	6919      	ldr	r1, [r3, #16]
 8005d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d5a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005d5e:	4a80      	ldr	r2, [pc, #512]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d60:	430b      	orrs	r3, r1
 8005d62:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005d70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d72:	2300      	movs	r3, #0
 8005d74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d76:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	d009      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005d80:	4b77      	ldr	r3, [pc, #476]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d84:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8e:	4a74      	ldr	r2, [pc, #464]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005d90:	430b      	orrs	r3, r1
 8005d92:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005da2:	2300      	movs	r3, #0
 8005da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005da6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005daa:	460b      	mov	r3, r1
 8005dac:	4313      	orrs	r3, r2
 8005dae:	d00a      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005db0:	4b6b      	ldr	r3, [pc, #428]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005db2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005dc0:	4a67      	ldr	r2, [pc, #412]	@ (8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005dc2:	430b      	orrs	r3, r1
 8005dc4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dce:	2100      	movs	r1, #0
 8005dd0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dd8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005ddc:	460b      	mov	r3, r1
 8005dde:	4313      	orrs	r3, r2
 8005de0:	d011      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de6:	3308      	adds	r3, #8
 8005de8:	2100      	movs	r1, #0
 8005dea:	4618      	mov	r0, r3
 8005dec:	f000 fb78 	bl	80064e0 <RCCEx_PLL2_Config>
 8005df0:	4603      	mov	r3, r0
 8005df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	2100      	movs	r1, #0
 8005e10:	6239      	str	r1, [r7, #32]
 8005e12:	f003 0302 	and.w	r3, r3, #2
 8005e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e18:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	d011      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e26:	3308      	adds	r3, #8
 8005e28:	2101      	movs	r1, #1
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fb58 	bl	80064e0 <RCCEx_PLL2_Config>
 8005e30:	4603      	mov	r3, r0
 8005e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	2100      	movs	r1, #0
 8005e50:	61b9      	str	r1, [r7, #24]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	d011      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e66:	3308      	adds	r3, #8
 8005e68:	2102      	movs	r1, #2
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f000 fb38 	bl	80064e0 <RCCEx_PLL2_Config>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	2100      	movs	r1, #0
 8005e90:	6139      	str	r1, [r7, #16]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	617b      	str	r3, [r7, #20]
 8005e98:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	d011      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea6:	3328      	adds	r3, #40	@ 0x28
 8005ea8:	2100      	movs	r1, #0
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 fbca 	bl	8006644 <RCCEx_PLL3_Config>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8005eb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ece:	2100      	movs	r1, #0
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005edc:	460b      	mov	r3, r1
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	d011      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee6:	3328      	adds	r3, #40	@ 0x28
 8005ee8:	2101      	movs	r1, #1
 8005eea:	4618      	mov	r0, r3
 8005eec:	f000 fbaa 	bl	8006644 <RCCEx_PLL3_Config>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005ef6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0e:	2100      	movs	r1, #0
 8005f10:	6039      	str	r1, [r7, #0]
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	d011      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f26:	3328      	adds	r3, #40	@ 0x28
 8005f28:	2102      	movs	r1, #2
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f000 fb8a 	bl	8006644 <RCCEx_PLL3_Config>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8005f36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8005f46:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e000      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f60:	58024400 	.word	0x58024400

08005f64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005f68:	f7fe fd96 	bl	8004a98 <HAL_RCC_GetHCLKFreq>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	4b06      	ldr	r3, [pc, #24]	@ (8005f88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	091b      	lsrs	r3, r3, #4
 8005f74:	f003 0307 	and.w	r3, r3, #7
 8005f78:	4904      	ldr	r1, [pc, #16]	@ (8005f8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005f7a:	5ccb      	ldrb	r3, [r1, r3]
 8005f7c:	f003 031f 	and.w	r3, r3, #31
 8005f80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	58024400 	.word	0x58024400
 8005f8c:	0800a048 	.word	0x0800a048

08005f90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b089      	sub	sp, #36	@ 0x24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f98:	4ba1      	ldr	r3, [pc, #644]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9c:	f003 0303 	and.w	r3, r3, #3
 8005fa0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005fa2:	4b9f      	ldr	r3, [pc, #636]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa6:	0b1b      	lsrs	r3, r3, #12
 8005fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005fac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005fae:	4b9c      	ldr	r3, [pc, #624]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb2:	091b      	lsrs	r3, r3, #4
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005fba:	4b99      	ldr	r3, [pc, #612]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fbe:	08db      	lsrs	r3, r3, #3
 8005fc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	fb02 f303 	mul.w	r3, r2, r3
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f000 8111 	beq.w	8006200 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	2b02      	cmp	r3, #2
 8005fe2:	f000 8083 	beq.w	80060ec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	f200 80a1 	bhi.w	8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d056      	beq.n	80060a8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005ffa:	e099      	b.n	8006130 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ffc:	4b88      	ldr	r3, [pc, #544]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b00      	cmp	r3, #0
 8006006:	d02d      	beq.n	8006064 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006008:	4b85      	ldr	r3, [pc, #532]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	08db      	lsrs	r3, r3, #3
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	4a84      	ldr	r2, [pc, #528]	@ (8006224 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006014:	fa22 f303 	lsr.w	r3, r2, r3
 8006018:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	ee07 3a90 	vmov	s15, r3
 8006020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006032:	4b7b      	ldr	r3, [pc, #492]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800603a:	ee07 3a90 	vmov	s15, r3
 800603e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006042:	ed97 6a03 	vldr	s12, [r7, #12]
 8006046:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800604a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800604e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800605a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006062:	e087      	b.n	8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800606e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800622c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006076:	4b6a      	ldr	r3, [pc, #424]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800607e:	ee07 3a90 	vmov	s15, r3
 8006082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006086:	ed97 6a03 	vldr	s12, [r7, #12]
 800608a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800608e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800609a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800609e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060a6:	e065      	b.n	8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	ee07 3a90 	vmov	s15, r3
 80060ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80060b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ba:	4b59      	ldr	r3, [pc, #356]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80060bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c2:	ee07 3a90 	vmov	s15, r3
 80060c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ce:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80060d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ea:	e043      	b.n	8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060f6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006234 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80060fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060fe:	4b48      	ldr	r3, [pc, #288]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006100:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800610e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006112:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800611a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800611e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800612a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800612e:	e021      	b.n	8006174 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	ee07 3a90 	vmov	s15, r3
 8006136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006230 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800613e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006142:	4b37      	ldr	r3, [pc, #220]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006144:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006152:	ed97 6a03 	vldr	s12, [r7, #12]
 8006156:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006228 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800615a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800615e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006162:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800616a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006172:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006174:	4b2a      	ldr	r3, [pc, #168]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006178:	0a5b      	lsrs	r3, r3, #9
 800617a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006186:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800618a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800618e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006192:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006196:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800619a:	ee17 2a90 	vmov	r2, s15
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80061a2:	4b1f      	ldr	r3, [pc, #124]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a6:	0c1b      	lsrs	r3, r3, #16
 80061a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ac:	ee07 3a90 	vmov	s15, r3
 80061b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80061c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061c8:	ee17 2a90 	vmov	r2, s15
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80061d0:	4b13      	ldr	r3, [pc, #76]	@ (8006220 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d4:	0e1b      	lsrs	r3, r3, #24
 80061d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061f6:	ee17 2a90 	vmov	r2, s15
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80061fe:	e008      	b.n	8006212 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	609a      	str	r2, [r3, #8]
}
 8006212:	bf00      	nop
 8006214:	3724      	adds	r7, #36	@ 0x24
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	58024400 	.word	0x58024400
 8006224:	03d09000 	.word	0x03d09000
 8006228:	46000000 	.word	0x46000000
 800622c:	4c742400 	.word	0x4c742400
 8006230:	4a742400 	.word	0x4a742400
 8006234:	4af42400 	.word	0x4af42400

08006238 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006238:	b480      	push	{r7}
 800623a:	b089      	sub	sp, #36	@ 0x24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006240:	4ba1      	ldr	r3, [pc, #644]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006244:	f003 0303 	and.w	r3, r3, #3
 8006248:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800624a:	4b9f      	ldr	r3, [pc, #636]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800624c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624e:	0d1b      	lsrs	r3, r3, #20
 8006250:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006254:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006256:	4b9c      	ldr	r3, [pc, #624]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625a:	0a1b      	lsrs	r3, r3, #8
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006262:	4b99      	ldr	r3, [pc, #612]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006266:	08db      	lsrs	r3, r3, #3
 8006268:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800626c:	693a      	ldr	r2, [r7, #16]
 800626e:	fb02 f303 	mul.w	r3, r2, r3
 8006272:	ee07 3a90 	vmov	s15, r3
 8006276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800627a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	f000 8111 	beq.w	80064a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	2b02      	cmp	r3, #2
 800628a:	f000 8083 	beq.w	8006394 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	2b02      	cmp	r3, #2
 8006292:	f200 80a1 	bhi.w	80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d003      	beq.n	80062a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d056      	beq.n	8006350 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80062a2:	e099      	b.n	80063d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062a4:	4b88      	ldr	r3, [pc, #544]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0320 	and.w	r3, r3, #32
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d02d      	beq.n	800630c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062b0:	4b85      	ldr	r3, [pc, #532]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	08db      	lsrs	r3, r3, #3
 80062b6:	f003 0303 	and.w	r3, r3, #3
 80062ba:	4a84      	ldr	r2, [pc, #528]	@ (80064cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80062bc:	fa22 f303 	lsr.w	r3, r2, r3
 80062c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	ee07 3a90 	vmov	s15, r3
 80062d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062da:	4b7b      	ldr	r3, [pc, #492]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80062dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80062ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80062f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006306:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800630a:	e087      	b.n	800641c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006316:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80064d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800631a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800631e:	4b6a      	ldr	r3, [pc, #424]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006326:	ee07 3a90 	vmov	s15, r3
 800632a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800632e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006332:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800633a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800633e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800634e:	e065      	b.n	800641c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	ee07 3a90 	vmov	s15, r3
 8006356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80064d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800635e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006362:	4b59      	ldr	r3, [pc, #356]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006372:	ed97 6a03 	vldr	s12, [r7, #12]
 8006376:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800637a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800637e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006382:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800638a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800638e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006392:	e043      	b.n	800641c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800639e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80064dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80063a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063a6:	4b48      	ldr	r3, [pc, #288]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ae:	ee07 3a90 	vmov	s15, r3
 80063b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80063ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80063be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063d6:	e021      	b.n	800641c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	ee07 3a90 	vmov	s15, r3
 80063de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80064d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80063e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ea:	4b37      	ldr	r3, [pc, #220]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80063fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80064d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800640e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006416:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800641a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800641c:	4b2a      	ldr	r3, [pc, #168]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800641e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006420:	0a5b      	lsrs	r3, r3, #9
 8006422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800642e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006432:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006436:	edd7 6a07 	vldr	s13, [r7, #28]
 800643a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800643e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006442:	ee17 2a90 	vmov	r2, s15
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800644a:	4b1f      	ldr	r3, [pc, #124]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800644e:	0c1b      	lsrs	r3, r3, #16
 8006450:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006454:	ee07 3a90 	vmov	s15, r3
 8006458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800645c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006460:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006464:	edd7 6a07 	vldr	s13, [r7, #28]
 8006468:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800646c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006470:	ee17 2a90 	vmov	r2, s15
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006478:	4b13      	ldr	r3, [pc, #76]	@ (80064c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800647a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647c:	0e1b      	lsrs	r3, r3, #24
 800647e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800648e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006492:	edd7 6a07 	vldr	s13, [r7, #28]
 8006496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800649a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649e:	ee17 2a90 	vmov	r2, s15
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80064a6:	e008      	b.n	80064ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	609a      	str	r2, [r3, #8]
}
 80064ba:	bf00      	nop
 80064bc:	3724      	adds	r7, #36	@ 0x24
 80064be:	46bd      	mov	sp, r7
 80064c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	58024400 	.word	0x58024400
 80064cc:	03d09000 	.word	0x03d09000
 80064d0:	46000000 	.word	0x46000000
 80064d4:	4c742400 	.word	0x4c742400
 80064d8:	4a742400 	.word	0x4a742400
 80064dc:	4af42400 	.word	0x4af42400

080064e0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80064ee:	4b53      	ldr	r3, [pc, #332]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 80064f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	2b03      	cmp	r3, #3
 80064f8:	d101      	bne.n	80064fe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e099      	b.n	8006632 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80064fe:	4b4f      	ldr	r3, [pc, #316]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a4e      	ldr	r2, [pc, #312]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 8006504:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006508:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800650a:	f7fb fbc3 	bl	8001c94 <HAL_GetTick>
 800650e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006510:	e008      	b.n	8006524 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006512:	f7fb fbbf 	bl	8001c94 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	2b02      	cmp	r3, #2
 800651e:	d901      	bls.n	8006524 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006520:	2303      	movs	r3, #3
 8006522:	e086      	b.n	8006632 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006524:	4b45      	ldr	r3, [pc, #276]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1f0      	bne.n	8006512 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006530:	4b42      	ldr	r3, [pc, #264]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 8006532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006534:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	031b      	lsls	r3, r3, #12
 800653e:	493f      	ldr	r1, [pc, #252]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 8006540:	4313      	orrs	r3, r2
 8006542:	628b      	str	r3, [r1, #40]	@ 0x28
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	3b01      	subs	r3, #1
 800654a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	3b01      	subs	r3, #1
 8006554:	025b      	lsls	r3, r3, #9
 8006556:	b29b      	uxth	r3, r3
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	3b01      	subs	r3, #1
 8006560:	041b      	lsls	r3, r3, #16
 8006562:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	3b01      	subs	r3, #1
 800656e:	061b      	lsls	r3, r3, #24
 8006570:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006574:	4931      	ldr	r1, [pc, #196]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 8006576:	4313      	orrs	r3, r2
 8006578:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800657a:	4b30      	ldr	r3, [pc, #192]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 800657c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	695b      	ldr	r3, [r3, #20]
 8006586:	492d      	ldr	r1, [pc, #180]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 8006588:	4313      	orrs	r3, r2
 800658a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800658c:	4b2b      	ldr	r3, [pc, #172]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 800658e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006590:	f023 0220 	bic.w	r2, r3, #32
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	4928      	ldr	r1, [pc, #160]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 800659a:	4313      	orrs	r3, r2
 800659c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800659e:	4b27      	ldr	r3, [pc, #156]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	4a26      	ldr	r2, [pc, #152]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 80065a4:	f023 0310 	bic.w	r3, r3, #16
 80065a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80065aa:	4b24      	ldr	r3, [pc, #144]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 80065ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065ae:	4b24      	ldr	r3, [pc, #144]	@ (8006640 <RCCEx_PLL2_Config+0x160>)
 80065b0:	4013      	ands	r3, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	69d2      	ldr	r2, [r2, #28]
 80065b6:	00d2      	lsls	r2, r2, #3
 80065b8:	4920      	ldr	r1, [pc, #128]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80065be:	4b1f      	ldr	r3, [pc, #124]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 80065c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c2:	4a1e      	ldr	r2, [pc, #120]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 80065c4:	f043 0310 	orr.w	r3, r3, #16
 80065c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d106      	bne.n	80065de <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80065d0:	4b1a      	ldr	r3, [pc, #104]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 80065d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d4:	4a19      	ldr	r2, [pc, #100]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 80065d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80065da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80065dc:	e00f      	b.n	80065fe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d106      	bne.n	80065f2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80065e4:	4b15      	ldr	r3, [pc, #84]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 80065e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e8:	4a14      	ldr	r2, [pc, #80]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 80065ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80065f0:	e005      	b.n	80065fe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80065f2:	4b12      	ldr	r3, [pc, #72]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 80065f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f6:	4a11      	ldr	r2, [pc, #68]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 80065f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80065fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80065fe:	4b0f      	ldr	r3, [pc, #60]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a0e      	ldr	r2, [pc, #56]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 8006604:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800660a:	f7fb fb43 	bl	8001c94 <HAL_GetTick>
 800660e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006610:	e008      	b.n	8006624 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006612:	f7fb fb3f 	bl	8001c94 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d901      	bls.n	8006624 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e006      	b.n	8006632 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006624:	4b05      	ldr	r3, [pc, #20]	@ (800663c <RCCEx_PLL2_Config+0x15c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0f0      	beq.n	8006612 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006630:	7bfb      	ldrb	r3, [r7, #15]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	58024400 	.word	0x58024400
 8006640:	ffff0007 	.word	0xffff0007

08006644 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800664e:	2300      	movs	r3, #0
 8006650:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006652:	4b53      	ldr	r3, [pc, #332]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 8006654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	2b03      	cmp	r3, #3
 800665c:	d101      	bne.n	8006662 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	e099      	b.n	8006796 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006662:	4b4f      	ldr	r3, [pc, #316]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a4e      	ldr	r2, [pc, #312]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 8006668:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800666c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666e:	f7fb fb11 	bl	8001c94 <HAL_GetTick>
 8006672:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006674:	e008      	b.n	8006688 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006676:	f7fb fb0d 	bl	8001c94 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d901      	bls.n	8006688 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e086      	b.n	8006796 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006688:	4b45      	ldr	r3, [pc, #276]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1f0      	bne.n	8006676 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006694:	4b42      	ldr	r3, [pc, #264]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 8006696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006698:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	051b      	lsls	r3, r3, #20
 80066a2:	493f      	ldr	r1, [pc, #252]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	3b01      	subs	r3, #1
 80066ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	025b      	lsls	r3, r3, #9
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	431a      	orrs	r2, r3
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	3b01      	subs	r3, #1
 80066c4:	041b      	lsls	r3, r3, #16
 80066c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80066ca:	431a      	orrs	r2, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	061b      	lsls	r3, r3, #24
 80066d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80066d8:	4931      	ldr	r1, [pc, #196]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 80066da:	4313      	orrs	r3, r2
 80066dc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80066de:	4b30      	ldr	r3, [pc, #192]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 80066e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	695b      	ldr	r3, [r3, #20]
 80066ea:	492d      	ldr	r1, [pc, #180]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80066f0:	4b2b      	ldr	r3, [pc, #172]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 80066f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	4928      	ldr	r1, [pc, #160]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006702:	4b27      	ldr	r3, [pc, #156]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 8006704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006706:	4a26      	ldr	r2, [pc, #152]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 8006708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800670c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800670e:	4b24      	ldr	r3, [pc, #144]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 8006710:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006712:	4b24      	ldr	r3, [pc, #144]	@ (80067a4 <RCCEx_PLL3_Config+0x160>)
 8006714:	4013      	ands	r3, r2
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	69d2      	ldr	r2, [r2, #28]
 800671a:	00d2      	lsls	r2, r2, #3
 800671c:	4920      	ldr	r1, [pc, #128]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 800671e:	4313      	orrs	r3, r2
 8006720:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006722:	4b1f      	ldr	r3, [pc, #124]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 8006724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006726:	4a1e      	ldr	r2, [pc, #120]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 8006728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800672c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d106      	bne.n	8006742 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006734:	4b1a      	ldr	r3, [pc, #104]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 8006736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006738:	4a19      	ldr	r2, [pc, #100]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 800673a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800673e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006740:	e00f      	b.n	8006762 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d106      	bne.n	8006756 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006748:	4b15      	ldr	r3, [pc, #84]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 800674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674c:	4a14      	ldr	r2, [pc, #80]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 800674e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006752:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006754:	e005      	b.n	8006762 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006756:	4b12      	ldr	r3, [pc, #72]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 8006758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675a:	4a11      	ldr	r2, [pc, #68]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 800675c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006760:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006762:	4b0f      	ldr	r3, [pc, #60]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a0e      	ldr	r2, [pc, #56]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 8006768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800676c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800676e:	f7fb fa91 	bl	8001c94 <HAL_GetTick>
 8006772:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006774:	e008      	b.n	8006788 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006776:	f7fb fa8d 	bl	8001c94 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e006      	b.n	8006796 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006788:	4b05      	ldr	r3, [pc, #20]	@ (80067a0 <RCCEx_PLL3_Config+0x15c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0f0      	beq.n	8006776 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006794:	7bfb      	ldrb	r3, [r7, #15]
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	58024400 	.word	0x58024400
 80067a4:	ffff0007 	.word	0xffff0007

080067a8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e10f      	b.n	80069da <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a87      	ldr	r2, [pc, #540]	@ (80069e4 <HAL_SPI_Init+0x23c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00f      	beq.n	80067ea <HAL_SPI_Init+0x42>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a86      	ldr	r2, [pc, #536]	@ (80069e8 <HAL_SPI_Init+0x240>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d00a      	beq.n	80067ea <HAL_SPI_Init+0x42>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a84      	ldr	r2, [pc, #528]	@ (80069ec <HAL_SPI_Init+0x244>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d005      	beq.n	80067ea <HAL_SPI_Init+0x42>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	2b0f      	cmp	r3, #15
 80067e4:	d901      	bls.n	80067ea <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e0f7      	b.n	80069da <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f900 	bl	80069f0 <SPI_GetPacketSize>
 80067f0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a7b      	ldr	r2, [pc, #492]	@ (80069e4 <HAL_SPI_Init+0x23c>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d00c      	beq.n	8006816 <HAL_SPI_Init+0x6e>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a79      	ldr	r2, [pc, #484]	@ (80069e8 <HAL_SPI_Init+0x240>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d007      	beq.n	8006816 <HAL_SPI_Init+0x6e>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a78      	ldr	r2, [pc, #480]	@ (80069ec <HAL_SPI_Init+0x244>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d002      	beq.n	8006816 <HAL_SPI_Init+0x6e>
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2b08      	cmp	r3, #8
 8006814:	d811      	bhi.n	800683a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800681a:	4a72      	ldr	r2, [pc, #456]	@ (80069e4 <HAL_SPI_Init+0x23c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d009      	beq.n	8006834 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a70      	ldr	r2, [pc, #448]	@ (80069e8 <HAL_SPI_Init+0x240>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d004      	beq.n	8006834 <HAL_SPI_Init+0x8c>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a6f      	ldr	r2, [pc, #444]	@ (80069ec <HAL_SPI_Init+0x244>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d104      	bne.n	800683e <HAL_SPI_Init+0x96>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2b10      	cmp	r3, #16
 8006838:	d901      	bls.n	800683e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e0cd      	b.n	80069da <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fa fd0c 	bl	8001270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f022 0201 	bic.w	r2, r2, #1
 800686e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800687a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006884:	d119      	bne.n	80068ba <HAL_SPI_Init+0x112>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800688e:	d103      	bne.n	8006898 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006894:	2b00      	cmp	r3, #0
 8006896:	d008      	beq.n	80068aa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10c      	bne.n	80068ba <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80068a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068a8:	d107      	bne.n	80068ba <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80068b8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00f      	beq.n	80068e6 <HAL_SPI_Init+0x13e>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	2b06      	cmp	r3, #6
 80068cc:	d90b      	bls.n	80068e6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	430a      	orrs	r2, r1
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	e007      	b.n	80068f6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681a      	ldr	r2, [r3, #0]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80068f4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	69da      	ldr	r2, [r3, #28]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fe:	431a      	orrs	r2, r3
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006908:	ea42 0103 	orr.w	r1, r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	68da      	ldr	r2, [r3, #12]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	430a      	orrs	r2, r1
 8006916:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006920:	431a      	orrs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006926:	431a      	orrs	r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	431a      	orrs	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	431a      	orrs	r2, r3
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	431a      	orrs	r2, r3
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	431a      	orrs	r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006956:	ea42 0103 	orr.w	r1, r2, r3
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d113      	bne.n	8006996 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006980:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006994:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0201 	bic.w	r2, r2, #1
 80069a4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	430a      	orrs	r2, r1
 80069c6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	40013000 	.word	0x40013000
 80069e8:	40003800 	.word	0x40003800
 80069ec:	40003c00 	.word	0x40003c00

080069f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fc:	095b      	lsrs	r3, r3, #5
 80069fe:	3301      	adds	r3, #1
 8006a00:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	3301      	adds	r3, #1
 8006a08:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	3307      	adds	r3, #7
 8006a0e:	08db      	lsrs	r3, r3, #3
 8006a10:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	fb02 f303 	mul.w	r3, r2, r3
}
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr

08006a26 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a26:	b580      	push	{r7, lr}
 8006a28:	b082      	sub	sp, #8
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e049      	b.n	8006acc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d106      	bne.n	8006a52 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f7fa fe99 	bl	8001784 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2202      	movs	r2, #2
 8006a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3304      	adds	r3, #4
 8006a62:	4619      	mov	r1, r3
 8006a64:	4610      	mov	r0, r2
 8006a66:	f000 fbf3 	bl	8007250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b082      	sub	sp, #8
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d101      	bne.n	8006ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e049      	b.n	8006b7a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d106      	bne.n	8006b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f841 	bl	8006b82 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	3304      	adds	r3, #4
 8006b10:	4619      	mov	r1, r3
 8006b12:	4610      	mov	r0, r2
 8006b14:	f000 fb9c 	bl	8007250 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006b82:	b480      	push	{r7}
 8006b84:	b083      	sub	sp, #12
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
	...

08006b98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d109      	bne.n	8006bbc <HAL_TIM_PWM_Start+0x24>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	bf14      	ite	ne
 8006bb4:	2301      	movne	r3, #1
 8006bb6:	2300      	moveq	r3, #0
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	e03c      	b.n	8006c36 <HAL_TIM_PWM_Start+0x9e>
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d109      	bne.n	8006bd6 <HAL_TIM_PWM_Start+0x3e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006bc8:	b2db      	uxtb	r3, r3
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	bf14      	ite	ne
 8006bce:	2301      	movne	r3, #1
 8006bd0:	2300      	moveq	r3, #0
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	e02f      	b.n	8006c36 <HAL_TIM_PWM_Start+0x9e>
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	2b08      	cmp	r3, #8
 8006bda:	d109      	bne.n	8006bf0 <HAL_TIM_PWM_Start+0x58>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	bf14      	ite	ne
 8006be8:	2301      	movne	r3, #1
 8006bea:	2300      	moveq	r3, #0
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	e022      	b.n	8006c36 <HAL_TIM_PWM_Start+0x9e>
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	2b0c      	cmp	r3, #12
 8006bf4:	d109      	bne.n	8006c0a <HAL_TIM_PWM_Start+0x72>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	bf14      	ite	ne
 8006c02:	2301      	movne	r3, #1
 8006c04:	2300      	moveq	r3, #0
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	e015      	b.n	8006c36 <HAL_TIM_PWM_Start+0x9e>
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	2b10      	cmp	r3, #16
 8006c0e:	d109      	bne.n	8006c24 <HAL_TIM_PWM_Start+0x8c>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	bf14      	ite	ne
 8006c1c:	2301      	movne	r3, #1
 8006c1e:	2300      	moveq	r3, #0
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	e008      	b.n	8006c36 <HAL_TIM_PWM_Start+0x9e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	bf14      	ite	ne
 8006c30:	2301      	movne	r3, #1
 8006c32:	2300      	moveq	r3, #0
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d001      	beq.n	8006c3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e0a1      	b.n	8006d82 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d104      	bne.n	8006c4e <HAL_TIM_PWM_Start+0xb6>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2202      	movs	r2, #2
 8006c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c4c:	e023      	b.n	8006c96 <HAL_TIM_PWM_Start+0xfe>
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d104      	bne.n	8006c5e <HAL_TIM_PWM_Start+0xc6>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c5c:	e01b      	b.n	8006c96 <HAL_TIM_PWM_Start+0xfe>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d104      	bne.n	8006c6e <HAL_TIM_PWM_Start+0xd6>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2202      	movs	r2, #2
 8006c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c6c:	e013      	b.n	8006c96 <HAL_TIM_PWM_Start+0xfe>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	2b0c      	cmp	r3, #12
 8006c72:	d104      	bne.n	8006c7e <HAL_TIM_PWM_Start+0xe6>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2202      	movs	r2, #2
 8006c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c7c:	e00b      	b.n	8006c96 <HAL_TIM_PWM_Start+0xfe>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	2b10      	cmp	r3, #16
 8006c82:	d104      	bne.n	8006c8e <HAL_TIM_PWM_Start+0xf6>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c8c:	e003      	b.n	8006c96 <HAL_TIM_PWM_Start+0xfe>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2202      	movs	r2, #2
 8006c92:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 ffda 	bl	8007c58 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a38      	ldr	r2, [pc, #224]	@ (8006d8c <HAL_TIM_PWM_Start+0x1f4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d013      	beq.n	8006cd6 <HAL_TIM_PWM_Start+0x13e>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a37      	ldr	r2, [pc, #220]	@ (8006d90 <HAL_TIM_PWM_Start+0x1f8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d00e      	beq.n	8006cd6 <HAL_TIM_PWM_Start+0x13e>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a35      	ldr	r2, [pc, #212]	@ (8006d94 <HAL_TIM_PWM_Start+0x1fc>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d009      	beq.n	8006cd6 <HAL_TIM_PWM_Start+0x13e>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a34      	ldr	r2, [pc, #208]	@ (8006d98 <HAL_TIM_PWM_Start+0x200>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d004      	beq.n	8006cd6 <HAL_TIM_PWM_Start+0x13e>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a32      	ldr	r2, [pc, #200]	@ (8006d9c <HAL_TIM_PWM_Start+0x204>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d101      	bne.n	8006cda <HAL_TIM_PWM_Start+0x142>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <HAL_TIM_PWM_Start+0x144>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d007      	beq.n	8006cf0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cee:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a25      	ldr	r2, [pc, #148]	@ (8006d8c <HAL_TIM_PWM_Start+0x1f4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d022      	beq.n	8006d40 <HAL_TIM_PWM_Start+0x1a8>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d02:	d01d      	beq.n	8006d40 <HAL_TIM_PWM_Start+0x1a8>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a25      	ldr	r2, [pc, #148]	@ (8006da0 <HAL_TIM_PWM_Start+0x208>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d018      	beq.n	8006d40 <HAL_TIM_PWM_Start+0x1a8>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a24      	ldr	r2, [pc, #144]	@ (8006da4 <HAL_TIM_PWM_Start+0x20c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d013      	beq.n	8006d40 <HAL_TIM_PWM_Start+0x1a8>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a22      	ldr	r2, [pc, #136]	@ (8006da8 <HAL_TIM_PWM_Start+0x210>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d00e      	beq.n	8006d40 <HAL_TIM_PWM_Start+0x1a8>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a1a      	ldr	r2, [pc, #104]	@ (8006d90 <HAL_TIM_PWM_Start+0x1f8>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d009      	beq.n	8006d40 <HAL_TIM_PWM_Start+0x1a8>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a1e      	ldr	r2, [pc, #120]	@ (8006dac <HAL_TIM_PWM_Start+0x214>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d004      	beq.n	8006d40 <HAL_TIM_PWM_Start+0x1a8>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a16      	ldr	r2, [pc, #88]	@ (8006d94 <HAL_TIM_PWM_Start+0x1fc>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d115      	bne.n	8006d6c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689a      	ldr	r2, [r3, #8]
 8006d46:	4b1a      	ldr	r3, [pc, #104]	@ (8006db0 <HAL_TIM_PWM_Start+0x218>)
 8006d48:	4013      	ands	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b06      	cmp	r3, #6
 8006d50:	d015      	beq.n	8006d7e <HAL_TIM_PWM_Start+0x1e6>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d58:	d011      	beq.n	8006d7e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0201 	orr.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d6a:	e008      	b.n	8006d7e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f042 0201 	orr.w	r2, r2, #1
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e000      	b.n	8006d80 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d80:	2300      	movs	r3, #0
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	40010000 	.word	0x40010000
 8006d90:	40010400 	.word	0x40010400
 8006d94:	40014000 	.word	0x40014000
 8006d98:	40014400 	.word	0x40014400
 8006d9c:	40014800 	.word	0x40014800
 8006da0:	40000400 	.word	0x40000400
 8006da4:	40000800 	.word	0x40000800
 8006da8:	40000c00 	.word	0x40000c00
 8006dac:	40001800 	.word	0x40001800
 8006db0:	00010007 	.word	0x00010007

08006db4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006dca:	2b01      	cmp	r3, #1
 8006dcc:	d101      	bne.n	8006dd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006dce:	2302      	movs	r3, #2
 8006dd0:	e0ff      	b.n	8006fd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b14      	cmp	r3, #20
 8006dde:	f200 80f0 	bhi.w	8006fc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006de2:	a201      	add	r2, pc, #4	@ (adr r2, 8006de8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de8:	08006e3d 	.word	0x08006e3d
 8006dec:	08006fc3 	.word	0x08006fc3
 8006df0:	08006fc3 	.word	0x08006fc3
 8006df4:	08006fc3 	.word	0x08006fc3
 8006df8:	08006e7d 	.word	0x08006e7d
 8006dfc:	08006fc3 	.word	0x08006fc3
 8006e00:	08006fc3 	.word	0x08006fc3
 8006e04:	08006fc3 	.word	0x08006fc3
 8006e08:	08006ebf 	.word	0x08006ebf
 8006e0c:	08006fc3 	.word	0x08006fc3
 8006e10:	08006fc3 	.word	0x08006fc3
 8006e14:	08006fc3 	.word	0x08006fc3
 8006e18:	08006eff 	.word	0x08006eff
 8006e1c:	08006fc3 	.word	0x08006fc3
 8006e20:	08006fc3 	.word	0x08006fc3
 8006e24:	08006fc3 	.word	0x08006fc3
 8006e28:	08006f41 	.word	0x08006f41
 8006e2c:	08006fc3 	.word	0x08006fc3
 8006e30:	08006fc3 	.word	0x08006fc3
 8006e34:	08006fc3 	.word	0x08006fc3
 8006e38:	08006f81 	.word	0x08006f81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68b9      	ldr	r1, [r7, #8]
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 faaa 	bl	800739c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	699a      	ldr	r2, [r3, #24]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f042 0208 	orr.w	r2, r2, #8
 8006e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699a      	ldr	r2, [r3, #24]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0204 	bic.w	r2, r2, #4
 8006e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6999      	ldr	r1, [r3, #24]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	691a      	ldr	r2, [r3, #16]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	430a      	orrs	r2, r1
 8006e78:	619a      	str	r2, [r3, #24]
      break;
 8006e7a:	e0a5      	b.n	8006fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68b9      	ldr	r1, [r7, #8]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f000 fb1a 	bl	80074bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	699a      	ldr	r2, [r3, #24]
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	699a      	ldr	r2, [r3, #24]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6999      	ldr	r1, [r3, #24]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	021a      	lsls	r2, r3, #8
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	430a      	orrs	r2, r1
 8006eba:	619a      	str	r2, [r3, #24]
      break;
 8006ebc:	e084      	b.n	8006fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68b9      	ldr	r1, [r7, #8]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fb83 	bl	80075d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	69da      	ldr	r2, [r3, #28]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f042 0208 	orr.w	r2, r2, #8
 8006ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	69da      	ldr	r2, [r3, #28]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f022 0204 	bic.w	r2, r2, #4
 8006ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	69d9      	ldr	r1, [r3, #28]
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	691a      	ldr	r2, [r3, #16]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	61da      	str	r2, [r3, #28]
      break;
 8006efc:	e064      	b.n	8006fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68b9      	ldr	r1, [r7, #8]
 8006f04:	4618      	mov	r0, r3
 8006f06:	f000 fbeb 	bl	80076e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	69da      	ldr	r2, [r3, #28]
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69da      	ldr	r2, [r3, #28]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	69d9      	ldr	r1, [r3, #28]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	021a      	lsls	r2, r3, #8
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	430a      	orrs	r2, r1
 8006f3c:	61da      	str	r2, [r3, #28]
      break;
 8006f3e:	e043      	b.n	8006fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68b9      	ldr	r1, [r7, #8]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fc34 	bl	80077b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0208 	orr.w	r2, r2, #8
 8006f5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0204 	bic.w	r2, r2, #4
 8006f6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	691a      	ldr	r2, [r3, #16]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006f7e:	e023      	b.n	8006fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68b9      	ldr	r1, [r7, #8]
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fc78 	bl	800787c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006faa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	021a      	lsls	r2, r3, #8
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006fc0:	e002      	b.n	8006fc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3718      	adds	r7, #24
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop

08006fdc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d101      	bne.n	8006ff8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e0dc      	b.n	80071b2 <HAL_TIM_ConfigClockSource+0x1d6>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	4b6a      	ldr	r3, [pc, #424]	@ (80071bc <HAL_TIM_ConfigClockSource+0x1e0>)
 8007014:	4013      	ands	r3, r2
 8007016:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800701e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a64      	ldr	r2, [pc, #400]	@ (80071c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800702e:	4293      	cmp	r3, r2
 8007030:	f000 80a9 	beq.w	8007186 <HAL_TIM_ConfigClockSource+0x1aa>
 8007034:	4a62      	ldr	r2, [pc, #392]	@ (80071c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	f200 80ae 	bhi.w	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
 800703c:	4a61      	ldr	r2, [pc, #388]	@ (80071c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	f000 80a1 	beq.w	8007186 <HAL_TIM_ConfigClockSource+0x1aa>
 8007044:	4a5f      	ldr	r2, [pc, #380]	@ (80071c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	f200 80a6 	bhi.w	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
 800704c:	4a5e      	ldr	r2, [pc, #376]	@ (80071c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800704e:	4293      	cmp	r3, r2
 8007050:	f000 8099 	beq.w	8007186 <HAL_TIM_ConfigClockSource+0x1aa>
 8007054:	4a5c      	ldr	r2, [pc, #368]	@ (80071c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007056:	4293      	cmp	r3, r2
 8007058:	f200 809e 	bhi.w	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
 800705c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007060:	f000 8091 	beq.w	8007186 <HAL_TIM_ConfigClockSource+0x1aa>
 8007064:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007068:	f200 8096 	bhi.w	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
 800706c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007070:	f000 8089 	beq.w	8007186 <HAL_TIM_ConfigClockSource+0x1aa>
 8007074:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007078:	f200 808e 	bhi.w	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
 800707c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007080:	d03e      	beq.n	8007100 <HAL_TIM_ConfigClockSource+0x124>
 8007082:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007086:	f200 8087 	bhi.w	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
 800708a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800708e:	f000 8086 	beq.w	800719e <HAL_TIM_ConfigClockSource+0x1c2>
 8007092:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007096:	d87f      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
 8007098:	2b70      	cmp	r3, #112	@ 0x70
 800709a:	d01a      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0xf6>
 800709c:	2b70      	cmp	r3, #112	@ 0x70
 800709e:	d87b      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
 80070a0:	2b60      	cmp	r3, #96	@ 0x60
 80070a2:	d050      	beq.n	8007146 <HAL_TIM_ConfigClockSource+0x16a>
 80070a4:	2b60      	cmp	r3, #96	@ 0x60
 80070a6:	d877      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
 80070a8:	2b50      	cmp	r3, #80	@ 0x50
 80070aa:	d03c      	beq.n	8007126 <HAL_TIM_ConfigClockSource+0x14a>
 80070ac:	2b50      	cmp	r3, #80	@ 0x50
 80070ae:	d873      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
 80070b0:	2b40      	cmp	r3, #64	@ 0x40
 80070b2:	d058      	beq.n	8007166 <HAL_TIM_ConfigClockSource+0x18a>
 80070b4:	2b40      	cmp	r3, #64	@ 0x40
 80070b6:	d86f      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
 80070b8:	2b30      	cmp	r3, #48	@ 0x30
 80070ba:	d064      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0x1aa>
 80070bc:	2b30      	cmp	r3, #48	@ 0x30
 80070be:	d86b      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	d060      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0x1aa>
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	d867      	bhi.n	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d05c      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0x1aa>
 80070cc:	2b10      	cmp	r3, #16
 80070ce:	d05a      	beq.n	8007186 <HAL_TIM_ConfigClockSource+0x1aa>
 80070d0:	e062      	b.n	8007198 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070e2:	f000 fd99 	bl	8007c18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80070f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	609a      	str	r2, [r3, #8]
      break;
 80070fe:	e04f      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007110:	f000 fd82 	bl	8007c18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007122:	609a      	str	r2, [r3, #8]
      break;
 8007124:	e03c      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007132:	461a      	mov	r2, r3
 8007134:	f000 fcf2 	bl	8007b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2150      	movs	r1, #80	@ 0x50
 800713e:	4618      	mov	r0, r3
 8007140:	f000 fd4c 	bl	8007bdc <TIM_ITRx_SetConfig>
      break;
 8007144:	e02c      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007152:	461a      	mov	r2, r3
 8007154:	f000 fd11 	bl	8007b7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2160      	movs	r1, #96	@ 0x60
 800715e:	4618      	mov	r0, r3
 8007160:	f000 fd3c 	bl	8007bdc <TIM_ITRx_SetConfig>
      break;
 8007164:	e01c      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007172:	461a      	mov	r2, r3
 8007174:	f000 fcd2 	bl	8007b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2140      	movs	r1, #64	@ 0x40
 800717e:	4618      	mov	r0, r3
 8007180:	f000 fd2c 	bl	8007bdc <TIM_ITRx_SetConfig>
      break;
 8007184:	e00c      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4619      	mov	r1, r3
 8007190:	4610      	mov	r0, r2
 8007192:	f000 fd23 	bl	8007bdc <TIM_ITRx_SetConfig>
      break;
 8007196:	e003      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	73fb      	strb	r3, [r7, #15]
      break;
 800719c:	e000      	b.n	80071a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800719e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80071b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3710      	adds	r7, #16
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	ffceff88 	.word	0xffceff88
 80071c0:	00100040 	.word	0x00100040
 80071c4:	00100030 	.word	0x00100030
 80071c8:	00100020 	.word	0x00100020

080071cc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_TIM_SlaveConfigSynchro+0x18>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e031      	b.n	8007248 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80071f4:	6839      	ldr	r1, [r7, #0]
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 fba6 	bl	8007948 <TIM_SlaveTimer_SetConfig>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2201      	movs	r2, #1
 8007206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
 8007214:	e018      	b.n	8007248 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007224:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68da      	ldr	r2, [r3, #12]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007234:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2201      	movs	r2, #1
 800723a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2200      	movs	r2, #0
 8007242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007246:	2300      	movs	r3, #0
}
 8007248:	4618      	mov	r0, r3
 800724a:	3708      	adds	r7, #8
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a46      	ldr	r2, [pc, #280]	@ (800737c <TIM_Base_SetConfig+0x12c>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d013      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800726e:	d00f      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	4a43      	ldr	r2, [pc, #268]	@ (8007380 <TIM_Base_SetConfig+0x130>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d00b      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a42      	ldr	r2, [pc, #264]	@ (8007384 <TIM_Base_SetConfig+0x134>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d007      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	4a41      	ldr	r2, [pc, #260]	@ (8007388 <TIM_Base_SetConfig+0x138>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d003      	beq.n	8007290 <TIM_Base_SetConfig+0x40>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	4a40      	ldr	r2, [pc, #256]	@ (800738c <TIM_Base_SetConfig+0x13c>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d108      	bne.n	80072a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	4a35      	ldr	r2, [pc, #212]	@ (800737c <TIM_Base_SetConfig+0x12c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d01f      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b0:	d01b      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a32      	ldr	r2, [pc, #200]	@ (8007380 <TIM_Base_SetConfig+0x130>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d017      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a31      	ldr	r2, [pc, #196]	@ (8007384 <TIM_Base_SetConfig+0x134>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d013      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	4a30      	ldr	r2, [pc, #192]	@ (8007388 <TIM_Base_SetConfig+0x138>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d00f      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4a2f      	ldr	r2, [pc, #188]	@ (800738c <TIM_Base_SetConfig+0x13c>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d00b      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4a2e      	ldr	r2, [pc, #184]	@ (8007390 <TIM_Base_SetConfig+0x140>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d007      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a2d      	ldr	r2, [pc, #180]	@ (8007394 <TIM_Base_SetConfig+0x144>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d003      	beq.n	80072ea <TIM_Base_SetConfig+0x9a>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a2c      	ldr	r2, [pc, #176]	@ (8007398 <TIM_Base_SetConfig+0x148>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d108      	bne.n	80072fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	4313      	orrs	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68fa      	ldr	r2, [r7, #12]
 800730e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	689a      	ldr	r2, [r3, #8]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	4a16      	ldr	r2, [pc, #88]	@ (800737c <TIM_Base_SetConfig+0x12c>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d00f      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	4a18      	ldr	r2, [pc, #96]	@ (800738c <TIM_Base_SetConfig+0x13c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d00b      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a17      	ldr	r2, [pc, #92]	@ (8007390 <TIM_Base_SetConfig+0x140>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d007      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a16      	ldr	r2, [pc, #88]	@ (8007394 <TIM_Base_SetConfig+0x144>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_Base_SetConfig+0xf8>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a15      	ldr	r2, [pc, #84]	@ (8007398 <TIM_Base_SetConfig+0x148>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d103      	bne.n	8007350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b01      	cmp	r3, #1
 8007360:	d105      	bne.n	800736e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	f023 0201 	bic.w	r2, r3, #1
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	611a      	str	r2, [r3, #16]
  }
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	40010000 	.word	0x40010000
 8007380:	40000400 	.word	0x40000400
 8007384:	40000800 	.word	0x40000800
 8007388:	40000c00 	.word	0x40000c00
 800738c:	40010400 	.word	0x40010400
 8007390:	40014000 	.word	0x40014000
 8007394:	40014400 	.word	0x40014400
 8007398:	40014800 	.word	0x40014800

0800739c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800739c:	b480      	push	{r7}
 800739e:	b087      	sub	sp, #28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	f023 0201 	bic.w	r2, r3, #1
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	699b      	ldr	r3, [r3, #24]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	4b37      	ldr	r3, [pc, #220]	@ (80074a4 <TIM_OC1_SetConfig+0x108>)
 80073c8:	4013      	ands	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f023 0303 	bic.w	r3, r3, #3
 80073d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	4313      	orrs	r3, r2
 80073dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f023 0302 	bic.w	r3, r3, #2
 80073e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a2d      	ldr	r2, [pc, #180]	@ (80074a8 <TIM_OC1_SetConfig+0x10c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d00f      	beq.n	8007418 <TIM_OC1_SetConfig+0x7c>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a2c      	ldr	r2, [pc, #176]	@ (80074ac <TIM_OC1_SetConfig+0x110>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d00b      	beq.n	8007418 <TIM_OC1_SetConfig+0x7c>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a2b      	ldr	r2, [pc, #172]	@ (80074b0 <TIM_OC1_SetConfig+0x114>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d007      	beq.n	8007418 <TIM_OC1_SetConfig+0x7c>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	4a2a      	ldr	r2, [pc, #168]	@ (80074b4 <TIM_OC1_SetConfig+0x118>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d003      	beq.n	8007418 <TIM_OC1_SetConfig+0x7c>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	4a29      	ldr	r2, [pc, #164]	@ (80074b8 <TIM_OC1_SetConfig+0x11c>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d10c      	bne.n	8007432 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	f023 0308 	bic.w	r3, r3, #8
 800741e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f023 0304 	bic.w	r3, r3, #4
 8007430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a1c      	ldr	r2, [pc, #112]	@ (80074a8 <TIM_OC1_SetConfig+0x10c>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d00f      	beq.n	800745a <TIM_OC1_SetConfig+0xbe>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a1b      	ldr	r2, [pc, #108]	@ (80074ac <TIM_OC1_SetConfig+0x110>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d00b      	beq.n	800745a <TIM_OC1_SetConfig+0xbe>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a1a      	ldr	r2, [pc, #104]	@ (80074b0 <TIM_OC1_SetConfig+0x114>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d007      	beq.n	800745a <TIM_OC1_SetConfig+0xbe>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a19      	ldr	r2, [pc, #100]	@ (80074b4 <TIM_OC1_SetConfig+0x118>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d003      	beq.n	800745a <TIM_OC1_SetConfig+0xbe>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a18      	ldr	r2, [pc, #96]	@ (80074b8 <TIM_OC1_SetConfig+0x11c>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d111      	bne.n	800747e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007460:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007468:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	4313      	orrs	r3, r2
 8007472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	699b      	ldr	r3, [r3, #24]
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4313      	orrs	r3, r2
 800747c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	621a      	str	r2, [r3, #32]
}
 8007498:	bf00      	nop
 800749a:	371c      	adds	r7, #28
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	fffeff8f 	.word	0xfffeff8f
 80074a8:	40010000 	.word	0x40010000
 80074ac:	40010400 	.word	0x40010400
 80074b0:	40014000 	.word	0x40014000
 80074b4:	40014400 	.word	0x40014400
 80074b8:	40014800 	.word	0x40014800

080074bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	f023 0210 	bic.w	r2, r3, #16
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	4b34      	ldr	r3, [pc, #208]	@ (80075b8 <TIM_OC2_SetConfig+0xfc>)
 80074e8:	4013      	ands	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	021b      	lsls	r3, r3, #8
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f023 0320 	bic.w	r3, r3, #32
 8007506:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	4313      	orrs	r3, r2
 8007512:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a29      	ldr	r2, [pc, #164]	@ (80075bc <TIM_OC2_SetConfig+0x100>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d003      	beq.n	8007524 <TIM_OC2_SetConfig+0x68>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a28      	ldr	r2, [pc, #160]	@ (80075c0 <TIM_OC2_SetConfig+0x104>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d10d      	bne.n	8007540 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800752a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	4313      	orrs	r3, r2
 8007536:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800753e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a1e      	ldr	r2, [pc, #120]	@ (80075bc <TIM_OC2_SetConfig+0x100>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d00f      	beq.n	8007568 <TIM_OC2_SetConfig+0xac>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a1d      	ldr	r2, [pc, #116]	@ (80075c0 <TIM_OC2_SetConfig+0x104>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d00b      	beq.n	8007568 <TIM_OC2_SetConfig+0xac>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4a1c      	ldr	r2, [pc, #112]	@ (80075c4 <TIM_OC2_SetConfig+0x108>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d007      	beq.n	8007568 <TIM_OC2_SetConfig+0xac>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a1b      	ldr	r2, [pc, #108]	@ (80075c8 <TIM_OC2_SetConfig+0x10c>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d003      	beq.n	8007568 <TIM_OC2_SetConfig+0xac>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a1a      	ldr	r2, [pc, #104]	@ (80075cc <TIM_OC2_SetConfig+0x110>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d113      	bne.n	8007590 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800756e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007576:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	693a      	ldr	r2, [r7, #16]
 8007580:	4313      	orrs	r3, r2
 8007582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	4313      	orrs	r3, r2
 800758e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	621a      	str	r2, [r3, #32]
}
 80075aa:	bf00      	nop
 80075ac:	371c      	adds	r7, #28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr
 80075b6:	bf00      	nop
 80075b8:	feff8fff 	.word	0xfeff8fff
 80075bc:	40010000 	.word	0x40010000
 80075c0:	40010400 	.word	0x40010400
 80075c4:	40014000 	.word	0x40014000
 80075c8:	40014400 	.word	0x40014400
 80075cc:	40014800 	.word	0x40014800

080075d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b087      	sub	sp, #28
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	69db      	ldr	r3, [r3, #28]
 80075f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	4b33      	ldr	r3, [pc, #204]	@ (80076c8 <TIM_OC3_SetConfig+0xf8>)
 80075fc:	4013      	ands	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 0303 	bic.w	r3, r3, #3
 8007606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	4313      	orrs	r3, r2
 8007610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	021b      	lsls	r3, r3, #8
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	4313      	orrs	r3, r2
 8007624:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	4a28      	ldr	r2, [pc, #160]	@ (80076cc <TIM_OC3_SetConfig+0xfc>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d003      	beq.n	8007636 <TIM_OC3_SetConfig+0x66>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a27      	ldr	r2, [pc, #156]	@ (80076d0 <TIM_OC3_SetConfig+0x100>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d10d      	bne.n	8007652 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800763c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a1d      	ldr	r2, [pc, #116]	@ (80076cc <TIM_OC3_SetConfig+0xfc>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d00f      	beq.n	800767a <TIM_OC3_SetConfig+0xaa>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	4a1c      	ldr	r2, [pc, #112]	@ (80076d0 <TIM_OC3_SetConfig+0x100>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d00b      	beq.n	800767a <TIM_OC3_SetConfig+0xaa>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a1b      	ldr	r2, [pc, #108]	@ (80076d4 <TIM_OC3_SetConfig+0x104>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d007      	beq.n	800767a <TIM_OC3_SetConfig+0xaa>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a1a      	ldr	r2, [pc, #104]	@ (80076d8 <TIM_OC3_SetConfig+0x108>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d003      	beq.n	800767a <TIM_OC3_SetConfig+0xaa>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a19      	ldr	r2, [pc, #100]	@ (80076dc <TIM_OC3_SetConfig+0x10c>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d113      	bne.n	80076a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007680:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007688:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	011b      	lsls	r3, r3, #4
 8007690:	693a      	ldr	r2, [r7, #16]
 8007692:	4313      	orrs	r3, r2
 8007694:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	011b      	lsls	r3, r3, #4
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	4313      	orrs	r3, r2
 80076a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685a      	ldr	r2, [r3, #4]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	697a      	ldr	r2, [r7, #20]
 80076ba:	621a      	str	r2, [r3, #32]
}
 80076bc:	bf00      	nop
 80076be:	371c      	adds	r7, #28
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	fffeff8f 	.word	0xfffeff8f
 80076cc:	40010000 	.word	0x40010000
 80076d0:	40010400 	.word	0x40010400
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40014400 	.word	0x40014400
 80076dc:	40014800 	.word	0x40014800

080076e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	4b24      	ldr	r3, [pc, #144]	@ (800779c <TIM_OC4_SetConfig+0xbc>)
 800770c:	4013      	ands	r3, r2
 800770e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	021b      	lsls	r3, r3, #8
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	4313      	orrs	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800772a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	031b      	lsls	r3, r3, #12
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	4313      	orrs	r3, r2
 8007736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a19      	ldr	r2, [pc, #100]	@ (80077a0 <TIM_OC4_SetConfig+0xc0>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00f      	beq.n	8007760 <TIM_OC4_SetConfig+0x80>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a18      	ldr	r2, [pc, #96]	@ (80077a4 <TIM_OC4_SetConfig+0xc4>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00b      	beq.n	8007760 <TIM_OC4_SetConfig+0x80>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a17      	ldr	r2, [pc, #92]	@ (80077a8 <TIM_OC4_SetConfig+0xc8>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d007      	beq.n	8007760 <TIM_OC4_SetConfig+0x80>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a16      	ldr	r2, [pc, #88]	@ (80077ac <TIM_OC4_SetConfig+0xcc>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d003      	beq.n	8007760 <TIM_OC4_SetConfig+0x80>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a15      	ldr	r2, [pc, #84]	@ (80077b0 <TIM_OC4_SetConfig+0xd0>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d109      	bne.n	8007774 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	695b      	ldr	r3, [r3, #20]
 800776c:	019b      	lsls	r3, r3, #6
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	4313      	orrs	r3, r2
 8007772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68fa      	ldr	r2, [r7, #12]
 800777e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	685a      	ldr	r2, [r3, #4]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	621a      	str	r2, [r3, #32]
}
 800778e:	bf00      	nop
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	feff8fff 	.word	0xfeff8fff
 80077a0:	40010000 	.word	0x40010000
 80077a4:	40010400 	.word	0x40010400
 80077a8:	40014000 	.word	0x40014000
 80077ac:	40014400 	.word	0x40014400
 80077b0:	40014800 	.word	0x40014800

080077b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a1b      	ldr	r3, [r3, #32]
 80077c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4b21      	ldr	r3, [pc, #132]	@ (8007864 <TIM_OC5_SetConfig+0xb0>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80077f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	041b      	lsls	r3, r3, #16
 80077fc:	693a      	ldr	r2, [r7, #16]
 80077fe:	4313      	orrs	r3, r2
 8007800:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a18      	ldr	r2, [pc, #96]	@ (8007868 <TIM_OC5_SetConfig+0xb4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d00f      	beq.n	800782a <TIM_OC5_SetConfig+0x76>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a17      	ldr	r2, [pc, #92]	@ (800786c <TIM_OC5_SetConfig+0xb8>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00b      	beq.n	800782a <TIM_OC5_SetConfig+0x76>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a16      	ldr	r2, [pc, #88]	@ (8007870 <TIM_OC5_SetConfig+0xbc>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d007      	beq.n	800782a <TIM_OC5_SetConfig+0x76>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a15      	ldr	r2, [pc, #84]	@ (8007874 <TIM_OC5_SetConfig+0xc0>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d003      	beq.n	800782a <TIM_OC5_SetConfig+0x76>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a14      	ldr	r2, [pc, #80]	@ (8007878 <TIM_OC5_SetConfig+0xc4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d109      	bne.n	800783e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007830:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	021b      	lsls	r3, r3, #8
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	4313      	orrs	r3, r2
 800783c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	697a      	ldr	r2, [r7, #20]
 8007842:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	68fa      	ldr	r2, [r7, #12]
 8007848:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	621a      	str	r2, [r3, #32]
}
 8007858:	bf00      	nop
 800785a:	371c      	adds	r7, #28
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	fffeff8f 	.word	0xfffeff8f
 8007868:	40010000 	.word	0x40010000
 800786c:	40010400 	.word	0x40010400
 8007870:	40014000 	.word	0x40014000
 8007874:	40014400 	.word	0x40014400
 8007878:	40014800 	.word	0x40014800

0800787c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800787c:	b480      	push	{r7}
 800787e:	b087      	sub	sp, #28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a1b      	ldr	r3, [r3, #32]
 800788a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6a1b      	ldr	r3, [r3, #32]
 8007890:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80078a4:	68fa      	ldr	r2, [r7, #12]
 80078a6:	4b22      	ldr	r3, [pc, #136]	@ (8007930 <TIM_OC6_SetConfig+0xb4>)
 80078a8:	4013      	ands	r3, r2
 80078aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	021b      	lsls	r3, r3, #8
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80078be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	051b      	lsls	r3, r3, #20
 80078c6:	693a      	ldr	r2, [r7, #16]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	4a19      	ldr	r2, [pc, #100]	@ (8007934 <TIM_OC6_SetConfig+0xb8>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d00f      	beq.n	80078f4 <TIM_OC6_SetConfig+0x78>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	4a18      	ldr	r2, [pc, #96]	@ (8007938 <TIM_OC6_SetConfig+0xbc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d00b      	beq.n	80078f4 <TIM_OC6_SetConfig+0x78>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	4a17      	ldr	r2, [pc, #92]	@ (800793c <TIM_OC6_SetConfig+0xc0>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d007      	beq.n	80078f4 <TIM_OC6_SetConfig+0x78>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4a16      	ldr	r2, [pc, #88]	@ (8007940 <TIM_OC6_SetConfig+0xc4>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d003      	beq.n	80078f4 <TIM_OC6_SetConfig+0x78>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a15      	ldr	r2, [pc, #84]	@ (8007944 <TIM_OC6_SetConfig+0xc8>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d109      	bne.n	8007908 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	029b      	lsls	r3, r3, #10
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	4313      	orrs	r3, r2
 8007906:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	693a      	ldr	r2, [r7, #16]
 8007920:	621a      	str	r2, [r3, #32]
}
 8007922:	bf00      	nop
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	feff8fff 	.word	0xfeff8fff
 8007934:	40010000 	.word	0x40010000
 8007938:	40010400 	.word	0x40010400
 800793c:	40014000 	.word	0x40014000
 8007940:	40014400 	.word	0x40014400
 8007944:	40014800 	.word	0x40014800

08007948 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007952:	2300      	movs	r3, #0
 8007954:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	4b65      	ldr	r3, [pc, #404]	@ (8007af8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8007962:	4013      	ands	r3, r2
 8007964:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	4313      	orrs	r3, r2
 800796e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	4b62      	ldr	r3, [pc, #392]	@ (8007afc <TIM_SlaveTimer_SetConfig+0x1b4>)
 8007974:	4013      	ands	r3, r2
 8007976:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	693a      	ldr	r2, [r7, #16]
 800797e:	4313      	orrs	r3, r2
 8007980:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	4a5c      	ldr	r2, [pc, #368]	@ (8007b00 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8007990:	4293      	cmp	r3, r2
 8007992:	f000 80ab 	beq.w	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 8007996:	4a5a      	ldr	r2, [pc, #360]	@ (8007b00 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8007998:	4293      	cmp	r3, r2
 800799a:	f200 80a4 	bhi.w	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 800799e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079a2:	f000 80a3 	beq.w	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 80079a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80079aa:	f200 809c 	bhi.w	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 80079ae:	4a55      	ldr	r2, [pc, #340]	@ (8007b04 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	f000 809b 	beq.w	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 80079b6:	4a53      	ldr	r2, [pc, #332]	@ (8007b04 <TIM_SlaveTimer_SetConfig+0x1bc>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	f200 8094 	bhi.w	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 80079be:	4a52      	ldr	r2, [pc, #328]	@ (8007b08 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	f000 8093 	beq.w	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 80079c6:	4a50      	ldr	r2, [pc, #320]	@ (8007b08 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	f200 808c 	bhi.w	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 80079ce:	4a4f      	ldr	r2, [pc, #316]	@ (8007b0c <TIM_SlaveTimer_SetConfig+0x1c4>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	f000 808b 	beq.w	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 80079d6:	4a4d      	ldr	r2, [pc, #308]	@ (8007b0c <TIM_SlaveTimer_SetConfig+0x1c4>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	f200 8084 	bhi.w	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 80079de:	4a4c      	ldr	r2, [pc, #304]	@ (8007b10 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	f000 8083 	beq.w	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 80079e6:	4a4a      	ldr	r2, [pc, #296]	@ (8007b10 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d87c      	bhi.n	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 80079ec:	4a49      	ldr	r2, [pc, #292]	@ (8007b14 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d07c      	beq.n	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 80079f2:	4a48      	ldr	r2, [pc, #288]	@ (8007b14 <TIM_SlaveTimer_SetConfig+0x1cc>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d876      	bhi.n	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 80079f8:	4a47      	ldr	r2, [pc, #284]	@ (8007b18 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d076      	beq.n	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 80079fe:	4a46      	ldr	r2, [pc, #280]	@ (8007b18 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d870      	bhi.n	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 8007a04:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007a08:	d070      	beq.n	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 8007a0a:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007a0e:	d86a      	bhi.n	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 8007a10:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a14:	d06a      	beq.n	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 8007a16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a1a:	d864      	bhi.n	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 8007a1c:	2b70      	cmp	r3, #112	@ 0x70
 8007a1e:	d01a      	beq.n	8007a56 <TIM_SlaveTimer_SetConfig+0x10e>
 8007a20:	2b70      	cmp	r3, #112	@ 0x70
 8007a22:	d860      	bhi.n	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 8007a24:	2b60      	cmp	r3, #96	@ 0x60
 8007a26:	d054      	beq.n	8007ad2 <TIM_SlaveTimer_SetConfig+0x18a>
 8007a28:	2b60      	cmp	r3, #96	@ 0x60
 8007a2a:	d85c      	bhi.n	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 8007a2c:	2b50      	cmp	r3, #80	@ 0x50
 8007a2e:	d046      	beq.n	8007abe <TIM_SlaveTimer_SetConfig+0x176>
 8007a30:	2b50      	cmp	r3, #80	@ 0x50
 8007a32:	d858      	bhi.n	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 8007a34:	2b40      	cmp	r3, #64	@ 0x40
 8007a36:	d019      	beq.n	8007a6c <TIM_SlaveTimer_SetConfig+0x124>
 8007a38:	2b40      	cmp	r3, #64	@ 0x40
 8007a3a:	d854      	bhi.n	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 8007a3c:	2b30      	cmp	r3, #48	@ 0x30
 8007a3e:	d055      	beq.n	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 8007a40:	2b30      	cmp	r3, #48	@ 0x30
 8007a42:	d850      	bhi.n	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d051      	beq.n	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 8007a48:	2b20      	cmp	r3, #32
 8007a4a:	d84c      	bhi.n	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d04d      	beq.n	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 8007a50:	2b10      	cmp	r3, #16
 8007a52:	d04b      	beq.n	8007aec <TIM_SlaveTimer_SetConfig+0x1a4>
 8007a54:	e047      	b.n	8007ae6 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007a66:	f000 f8d7 	bl	8007c18 <TIM_ETR_SetConfig>
      break;
 8007a6a:	e040      	b.n	8007aee <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2b05      	cmp	r3, #5
 8007a72:	d101      	bne.n	8007a78 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e03b      	b.n	8007af0 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6a1a      	ldr	r2, [r3, #32]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f022 0201 	bic.w	r2, r2, #1
 8007a8e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a9e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68fa      	ldr	r2, [r7, #12]
 8007aba:	621a      	str	r2, [r3, #32]
      break;
 8007abc:	e017      	b.n	8007aee <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aca:	461a      	mov	r2, r3
 8007acc:	f000 f826 	bl	8007b1c <TIM_TI1_ConfigInputStage>
      break;
 8007ad0:	e00d      	b.n	8007aee <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ade:	461a      	mov	r2, r3
 8007ae0:	f000 f84b 	bl	8007b7a <TIM_TI2_ConfigInputStage>
      break;
 8007ae4:	e003      	b.n	8007aee <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aea:	e000      	b.n	8007aee <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8007aec:	bf00      	nop
  }

  return status;
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3718      	adds	r7, #24
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	ffcfff8f 	.word	0xffcfff8f
 8007afc:	fffefff8 	.word	0xfffefff8
 8007b00:	00200010 	.word	0x00200010
 8007b04:	00100070 	.word	0x00100070
 8007b08:	00100060 	.word	0x00100060
 8007b0c:	00100050 	.word	0x00100050
 8007b10:	00100040 	.word	0x00100040
 8007b14:	00100030 	.word	0x00100030
 8007b18:	00100020 	.word	0x00100020

08007b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	f023 0201 	bic.w	r2, r3, #1
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	011b      	lsls	r3, r3, #4
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b52:	697b      	ldr	r3, [r7, #20]
 8007b54:	f023 030a 	bic.w	r3, r3, #10
 8007b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	621a      	str	r2, [r3, #32]
}
 8007b6e:	bf00      	nop
 8007b70:	371c      	adds	r7, #28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b087      	sub	sp, #28
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	60f8      	str	r0, [r7, #12]
 8007b82:	60b9      	str	r1, [r7, #8]
 8007b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	f023 0210 	bic.w	r2, r3, #16
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	699b      	ldr	r3, [r3, #24]
 8007b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007ba4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	031b      	lsls	r3, r3, #12
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007bb6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	011b      	lsls	r3, r3, #4
 8007bbc:	697a      	ldr	r2, [r7, #20]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	621a      	str	r2, [r3, #32]
}
 8007bce:	bf00      	nop
 8007bd0:	371c      	adds	r7, #28
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr
	...

08007bdc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bec:	68fa      	ldr	r2, [r7, #12]
 8007bee:	4b09      	ldr	r3, [pc, #36]	@ (8007c14 <TIM_ITRx_SetConfig+0x38>)
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bf4:	683a      	ldr	r2, [r7, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	f043 0307 	orr.w	r3, r3, #7
 8007bfe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	609a      	str	r2, [r3, #8]
}
 8007c06:	bf00      	nop
 8007c08:	3714      	adds	r7, #20
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
 8007c12:	bf00      	nop
 8007c14:	ffcfff8f 	.word	0xffcfff8f

08007c18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b087      	sub	sp, #28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	021a      	lsls	r2, r3, #8
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	431a      	orrs	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	697a      	ldr	r2, [r7, #20]
 8007c4a:	609a      	str	r2, [r3, #8]
}
 8007c4c:	bf00      	nop
 8007c4e:	371c      	adds	r7, #28
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	f003 031f 	and.w	r3, r3, #31
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c70:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6a1a      	ldr	r2, [r3, #32]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	43db      	mvns	r3, r3
 8007c7a:	401a      	ands	r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6a1a      	ldr	r2, [r3, #32]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f003 031f 	and.w	r3, r3, #31
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c90:	431a      	orrs	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	621a      	str	r2, [r3, #32]
}
 8007c96:	bf00      	nop
 8007c98:	371c      	adds	r7, #28
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
	...

08007ca4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b085      	sub	sp, #20
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d101      	bne.n	8007cbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cb8:	2302      	movs	r3, #2
 8007cba:	e06d      	b.n	8007d98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a30      	ldr	r2, [pc, #192]	@ (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d004      	beq.n	8007cf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a2f      	ldr	r2, [pc, #188]	@ (8007da8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d108      	bne.n	8007d02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007cf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	68fa      	ldr	r2, [r7, #12]
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68fa      	ldr	r2, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a20      	ldr	r2, [pc, #128]	@ (8007da4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d022      	beq.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d2e:	d01d      	beq.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a1d      	ldr	r2, [pc, #116]	@ (8007dac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d018      	beq.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a1c      	ldr	r2, [pc, #112]	@ (8007db0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d013      	beq.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a1a      	ldr	r2, [pc, #104]	@ (8007db4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d00e      	beq.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a15      	ldr	r2, [pc, #84]	@ (8007da8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d009      	beq.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a16      	ldr	r2, [pc, #88]	@ (8007db8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d004      	beq.n	8007d6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a15      	ldr	r2, [pc, #84]	@ (8007dbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d10c      	bne.n	8007d86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007d72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	68ba      	ldr	r2, [r7, #8]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	68ba      	ldr	r2, [r7, #8]
 8007d84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2200      	movs	r2, #0
 8007d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d96:	2300      	movs	r3, #0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3714      	adds	r7, #20
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr
 8007da4:	40010000 	.word	0x40010000
 8007da8:	40010400 	.word	0x40010400
 8007dac:	40000400 	.word	0x40000400
 8007db0:	40000800 	.word	0x40000800
 8007db4:	40000c00 	.word	0x40000c00
 8007db8:	40001800 	.word	0x40001800
 8007dbc:	40014000 	.word	0x40014000

08007dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d101      	bne.n	8007dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e042      	b.n	8007e58 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d106      	bne.n	8007dea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f7f9 fd8d 	bl	8001904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2224      	movs	r2, #36	@ 0x24
 8007dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f022 0201 	bic.w	r2, r2, #1
 8007e00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d002      	beq.n	8007e10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fe1e 	bl	8008a4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f000 f8b3 	bl	8007f7c <UART_SetConfig>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d101      	bne.n	8007e20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e01b      	b.n	8007e58 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	689a      	ldr	r2, [r3, #8]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	f042 0201 	orr.w	r2, r2, #1
 8007e4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fe9d 	bl	8008b90 <UART_CheckIdleState>
 8007e56:	4603      	mov	r3, r0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08a      	sub	sp, #40	@ 0x28
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e76:	2b20      	cmp	r3, #32
 8007e78:	d17b      	bne.n	8007f72 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <HAL_UART_Transmit+0x26>
 8007e80:	88fb      	ldrh	r3, [r7, #6]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e074      	b.n	8007f74 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2221      	movs	r2, #33	@ 0x21
 8007e96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007e9a:	f7f9 fefb 	bl	8001c94 <HAL_GetTick>
 8007e9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	88fa      	ldrh	r2, [r7, #6]
 8007ea4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	88fa      	ldrh	r2, [r7, #6]
 8007eac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eb8:	d108      	bne.n	8007ecc <HAL_UART_Transmit+0x6c>
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d104      	bne.n	8007ecc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	61bb      	str	r3, [r7, #24]
 8007eca:	e003      	b.n	8007ed4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ed4:	e030      	b.n	8007f38 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	2200      	movs	r2, #0
 8007ede:	2180      	movs	r1, #128	@ 0x80
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 feff 	bl	8008ce4 <UART_WaitOnFlagUntilTimeout>
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d005      	beq.n	8007ef8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2220      	movs	r2, #32
 8007ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e03d      	b.n	8007f74 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10b      	bne.n	8007f16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	881b      	ldrh	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f0c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	3302      	adds	r3, #2
 8007f12:	61bb      	str	r3, [r7, #24]
 8007f14:	e007      	b.n	8007f26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	781a      	ldrb	r2, [r3, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007f20:	69fb      	ldr	r3, [r7, #28]
 8007f22:	3301      	adds	r3, #1
 8007f24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	3b01      	subs	r3, #1
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d1c8      	bne.n	8007ed6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	2140      	movs	r1, #64	@ 0x40
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	f000 fec8 	bl	8008ce4 <UART_WaitOnFlagUntilTimeout>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d005      	beq.n	8007f66 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007f62:	2303      	movs	r3, #3
 8007f64:	e006      	b.n	8007f74 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	e000      	b.n	8007f74 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007f72:	2302      	movs	r3, #2
  }
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3720      	adds	r7, #32
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f80:	b092      	sub	sp, #72	@ 0x48
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f86:	2300      	movs	r3, #0
 8007f88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	431a      	orrs	r2, r3
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	4bbe      	ldr	r3, [pc, #760]	@ (80082a4 <UART_SetConfig+0x328>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	6812      	ldr	r2, [r2, #0]
 8007fb2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4ab3      	ldr	r2, [pc, #716]	@ (80082a8 <UART_SetConfig+0x32c>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d004      	beq.n	8007fe8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689a      	ldr	r2, [r3, #8]
 8007fee:	4baf      	ldr	r3, [pc, #700]	@ (80082ac <UART_SetConfig+0x330>)
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	6812      	ldr	r2, [r2, #0]
 8007ff6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ff8:	430b      	orrs	r3, r1
 8007ffa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008002:	f023 010f 	bic.w	r1, r3, #15
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	430a      	orrs	r2, r1
 8008010:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4aa6      	ldr	r2, [pc, #664]	@ (80082b0 <UART_SetConfig+0x334>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d177      	bne.n	800810c <UART_SetConfig+0x190>
 800801c:	4ba5      	ldr	r3, [pc, #660]	@ (80082b4 <UART_SetConfig+0x338>)
 800801e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008020:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008024:	2b28      	cmp	r3, #40	@ 0x28
 8008026:	d86d      	bhi.n	8008104 <UART_SetConfig+0x188>
 8008028:	a201      	add	r2, pc, #4	@ (adr r2, 8008030 <UART_SetConfig+0xb4>)
 800802a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802e:	bf00      	nop
 8008030:	080080d5 	.word	0x080080d5
 8008034:	08008105 	.word	0x08008105
 8008038:	08008105 	.word	0x08008105
 800803c:	08008105 	.word	0x08008105
 8008040:	08008105 	.word	0x08008105
 8008044:	08008105 	.word	0x08008105
 8008048:	08008105 	.word	0x08008105
 800804c:	08008105 	.word	0x08008105
 8008050:	080080dd 	.word	0x080080dd
 8008054:	08008105 	.word	0x08008105
 8008058:	08008105 	.word	0x08008105
 800805c:	08008105 	.word	0x08008105
 8008060:	08008105 	.word	0x08008105
 8008064:	08008105 	.word	0x08008105
 8008068:	08008105 	.word	0x08008105
 800806c:	08008105 	.word	0x08008105
 8008070:	080080e5 	.word	0x080080e5
 8008074:	08008105 	.word	0x08008105
 8008078:	08008105 	.word	0x08008105
 800807c:	08008105 	.word	0x08008105
 8008080:	08008105 	.word	0x08008105
 8008084:	08008105 	.word	0x08008105
 8008088:	08008105 	.word	0x08008105
 800808c:	08008105 	.word	0x08008105
 8008090:	080080ed 	.word	0x080080ed
 8008094:	08008105 	.word	0x08008105
 8008098:	08008105 	.word	0x08008105
 800809c:	08008105 	.word	0x08008105
 80080a0:	08008105 	.word	0x08008105
 80080a4:	08008105 	.word	0x08008105
 80080a8:	08008105 	.word	0x08008105
 80080ac:	08008105 	.word	0x08008105
 80080b0:	080080f5 	.word	0x080080f5
 80080b4:	08008105 	.word	0x08008105
 80080b8:	08008105 	.word	0x08008105
 80080bc:	08008105 	.word	0x08008105
 80080c0:	08008105 	.word	0x08008105
 80080c4:	08008105 	.word	0x08008105
 80080c8:	08008105 	.word	0x08008105
 80080cc:	08008105 	.word	0x08008105
 80080d0:	080080fd 	.word	0x080080fd
 80080d4:	2301      	movs	r3, #1
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080da:	e222      	b.n	8008522 <UART_SetConfig+0x5a6>
 80080dc:	2304      	movs	r3, #4
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e2:	e21e      	b.n	8008522 <UART_SetConfig+0x5a6>
 80080e4:	2308      	movs	r3, #8
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ea:	e21a      	b.n	8008522 <UART_SetConfig+0x5a6>
 80080ec:	2310      	movs	r3, #16
 80080ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080f2:	e216      	b.n	8008522 <UART_SetConfig+0x5a6>
 80080f4:	2320      	movs	r3, #32
 80080f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080fa:	e212      	b.n	8008522 <UART_SetConfig+0x5a6>
 80080fc:	2340      	movs	r3, #64	@ 0x40
 80080fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008102:	e20e      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008104:	2380      	movs	r3, #128	@ 0x80
 8008106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800810a:	e20a      	b.n	8008522 <UART_SetConfig+0x5a6>
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a69      	ldr	r2, [pc, #420]	@ (80082b8 <UART_SetConfig+0x33c>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d130      	bne.n	8008178 <UART_SetConfig+0x1fc>
 8008116:	4b67      	ldr	r3, [pc, #412]	@ (80082b4 <UART_SetConfig+0x338>)
 8008118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	2b05      	cmp	r3, #5
 8008120:	d826      	bhi.n	8008170 <UART_SetConfig+0x1f4>
 8008122:	a201      	add	r2, pc, #4	@ (adr r2, 8008128 <UART_SetConfig+0x1ac>)
 8008124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008128:	08008141 	.word	0x08008141
 800812c:	08008149 	.word	0x08008149
 8008130:	08008151 	.word	0x08008151
 8008134:	08008159 	.word	0x08008159
 8008138:	08008161 	.word	0x08008161
 800813c:	08008169 	.word	0x08008169
 8008140:	2300      	movs	r3, #0
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008146:	e1ec      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008148:	2304      	movs	r3, #4
 800814a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800814e:	e1e8      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008150:	2308      	movs	r3, #8
 8008152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008156:	e1e4      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008158:	2310      	movs	r3, #16
 800815a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800815e:	e1e0      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008160:	2320      	movs	r3, #32
 8008162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008166:	e1dc      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008168:	2340      	movs	r3, #64	@ 0x40
 800816a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800816e:	e1d8      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008170:	2380      	movs	r3, #128	@ 0x80
 8008172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008176:	e1d4      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a4f      	ldr	r2, [pc, #316]	@ (80082bc <UART_SetConfig+0x340>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d130      	bne.n	80081e4 <UART_SetConfig+0x268>
 8008182:	4b4c      	ldr	r3, [pc, #304]	@ (80082b4 <UART_SetConfig+0x338>)
 8008184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008186:	f003 0307 	and.w	r3, r3, #7
 800818a:	2b05      	cmp	r3, #5
 800818c:	d826      	bhi.n	80081dc <UART_SetConfig+0x260>
 800818e:	a201      	add	r2, pc, #4	@ (adr r2, 8008194 <UART_SetConfig+0x218>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081ad 	.word	0x080081ad
 8008198:	080081b5 	.word	0x080081b5
 800819c:	080081bd 	.word	0x080081bd
 80081a0:	080081c5 	.word	0x080081c5
 80081a4:	080081cd 	.word	0x080081cd
 80081a8:	080081d5 	.word	0x080081d5
 80081ac:	2300      	movs	r3, #0
 80081ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081b2:	e1b6      	b.n	8008522 <UART_SetConfig+0x5a6>
 80081b4:	2304      	movs	r3, #4
 80081b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ba:	e1b2      	b.n	8008522 <UART_SetConfig+0x5a6>
 80081bc:	2308      	movs	r3, #8
 80081be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081c2:	e1ae      	b.n	8008522 <UART_SetConfig+0x5a6>
 80081c4:	2310      	movs	r3, #16
 80081c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ca:	e1aa      	b.n	8008522 <UART_SetConfig+0x5a6>
 80081cc:	2320      	movs	r3, #32
 80081ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081d2:	e1a6      	b.n	8008522 <UART_SetConfig+0x5a6>
 80081d4:	2340      	movs	r3, #64	@ 0x40
 80081d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081da:	e1a2      	b.n	8008522 <UART_SetConfig+0x5a6>
 80081dc:	2380      	movs	r3, #128	@ 0x80
 80081de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e2:	e19e      	b.n	8008522 <UART_SetConfig+0x5a6>
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a35      	ldr	r2, [pc, #212]	@ (80082c0 <UART_SetConfig+0x344>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d130      	bne.n	8008250 <UART_SetConfig+0x2d4>
 80081ee:	4b31      	ldr	r3, [pc, #196]	@ (80082b4 <UART_SetConfig+0x338>)
 80081f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f2:	f003 0307 	and.w	r3, r3, #7
 80081f6:	2b05      	cmp	r3, #5
 80081f8:	d826      	bhi.n	8008248 <UART_SetConfig+0x2cc>
 80081fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008200 <UART_SetConfig+0x284>)
 80081fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008200:	08008219 	.word	0x08008219
 8008204:	08008221 	.word	0x08008221
 8008208:	08008229 	.word	0x08008229
 800820c:	08008231 	.word	0x08008231
 8008210:	08008239 	.word	0x08008239
 8008214:	08008241 	.word	0x08008241
 8008218:	2300      	movs	r3, #0
 800821a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800821e:	e180      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008220:	2304      	movs	r3, #4
 8008222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008226:	e17c      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008228:	2308      	movs	r3, #8
 800822a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800822e:	e178      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008230:	2310      	movs	r3, #16
 8008232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008236:	e174      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008238:	2320      	movs	r3, #32
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823e:	e170      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008240:	2340      	movs	r3, #64	@ 0x40
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008246:	e16c      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008248:	2380      	movs	r3, #128	@ 0x80
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824e:	e168      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a1b      	ldr	r2, [pc, #108]	@ (80082c4 <UART_SetConfig+0x348>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d142      	bne.n	80082e0 <UART_SetConfig+0x364>
 800825a:	4b16      	ldr	r3, [pc, #88]	@ (80082b4 <UART_SetConfig+0x338>)
 800825c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800825e:	f003 0307 	and.w	r3, r3, #7
 8008262:	2b05      	cmp	r3, #5
 8008264:	d838      	bhi.n	80082d8 <UART_SetConfig+0x35c>
 8008266:	a201      	add	r2, pc, #4	@ (adr r2, 800826c <UART_SetConfig+0x2f0>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	08008285 	.word	0x08008285
 8008270:	0800828d 	.word	0x0800828d
 8008274:	08008295 	.word	0x08008295
 8008278:	0800829d 	.word	0x0800829d
 800827c:	080082c9 	.word	0x080082c9
 8008280:	080082d1 	.word	0x080082d1
 8008284:	2300      	movs	r3, #0
 8008286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828a:	e14a      	b.n	8008522 <UART_SetConfig+0x5a6>
 800828c:	2304      	movs	r3, #4
 800828e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008292:	e146      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008294:	2308      	movs	r3, #8
 8008296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800829a:	e142      	b.n	8008522 <UART_SetConfig+0x5a6>
 800829c:	2310      	movs	r3, #16
 800829e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a2:	e13e      	b.n	8008522 <UART_SetConfig+0x5a6>
 80082a4:	cfff69f3 	.word	0xcfff69f3
 80082a8:	58000c00 	.word	0x58000c00
 80082ac:	11fff4ff 	.word	0x11fff4ff
 80082b0:	40011000 	.word	0x40011000
 80082b4:	58024400 	.word	0x58024400
 80082b8:	40004400 	.word	0x40004400
 80082bc:	40004800 	.word	0x40004800
 80082c0:	40004c00 	.word	0x40004c00
 80082c4:	40005000 	.word	0x40005000
 80082c8:	2320      	movs	r3, #32
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e128      	b.n	8008522 <UART_SetConfig+0x5a6>
 80082d0:	2340      	movs	r3, #64	@ 0x40
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d6:	e124      	b.n	8008522 <UART_SetConfig+0x5a6>
 80082d8:	2380      	movs	r3, #128	@ 0x80
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082de:	e120      	b.n	8008522 <UART_SetConfig+0x5a6>
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4acb      	ldr	r2, [pc, #812]	@ (8008614 <UART_SetConfig+0x698>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d176      	bne.n	80083d8 <UART_SetConfig+0x45c>
 80082ea:	4bcb      	ldr	r3, [pc, #812]	@ (8008618 <UART_SetConfig+0x69c>)
 80082ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082f2:	2b28      	cmp	r3, #40	@ 0x28
 80082f4:	d86c      	bhi.n	80083d0 <UART_SetConfig+0x454>
 80082f6:	a201      	add	r2, pc, #4	@ (adr r2, 80082fc <UART_SetConfig+0x380>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	080083a1 	.word	0x080083a1
 8008300:	080083d1 	.word	0x080083d1
 8008304:	080083d1 	.word	0x080083d1
 8008308:	080083d1 	.word	0x080083d1
 800830c:	080083d1 	.word	0x080083d1
 8008310:	080083d1 	.word	0x080083d1
 8008314:	080083d1 	.word	0x080083d1
 8008318:	080083d1 	.word	0x080083d1
 800831c:	080083a9 	.word	0x080083a9
 8008320:	080083d1 	.word	0x080083d1
 8008324:	080083d1 	.word	0x080083d1
 8008328:	080083d1 	.word	0x080083d1
 800832c:	080083d1 	.word	0x080083d1
 8008330:	080083d1 	.word	0x080083d1
 8008334:	080083d1 	.word	0x080083d1
 8008338:	080083d1 	.word	0x080083d1
 800833c:	080083b1 	.word	0x080083b1
 8008340:	080083d1 	.word	0x080083d1
 8008344:	080083d1 	.word	0x080083d1
 8008348:	080083d1 	.word	0x080083d1
 800834c:	080083d1 	.word	0x080083d1
 8008350:	080083d1 	.word	0x080083d1
 8008354:	080083d1 	.word	0x080083d1
 8008358:	080083d1 	.word	0x080083d1
 800835c:	080083b9 	.word	0x080083b9
 8008360:	080083d1 	.word	0x080083d1
 8008364:	080083d1 	.word	0x080083d1
 8008368:	080083d1 	.word	0x080083d1
 800836c:	080083d1 	.word	0x080083d1
 8008370:	080083d1 	.word	0x080083d1
 8008374:	080083d1 	.word	0x080083d1
 8008378:	080083d1 	.word	0x080083d1
 800837c:	080083c1 	.word	0x080083c1
 8008380:	080083d1 	.word	0x080083d1
 8008384:	080083d1 	.word	0x080083d1
 8008388:	080083d1 	.word	0x080083d1
 800838c:	080083d1 	.word	0x080083d1
 8008390:	080083d1 	.word	0x080083d1
 8008394:	080083d1 	.word	0x080083d1
 8008398:	080083d1 	.word	0x080083d1
 800839c:	080083c9 	.word	0x080083c9
 80083a0:	2301      	movs	r3, #1
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a6:	e0bc      	b.n	8008522 <UART_SetConfig+0x5a6>
 80083a8:	2304      	movs	r3, #4
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ae:	e0b8      	b.n	8008522 <UART_SetConfig+0x5a6>
 80083b0:	2308      	movs	r3, #8
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b6:	e0b4      	b.n	8008522 <UART_SetConfig+0x5a6>
 80083b8:	2310      	movs	r3, #16
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083be:	e0b0      	b.n	8008522 <UART_SetConfig+0x5a6>
 80083c0:	2320      	movs	r3, #32
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c6:	e0ac      	b.n	8008522 <UART_SetConfig+0x5a6>
 80083c8:	2340      	movs	r3, #64	@ 0x40
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ce:	e0a8      	b.n	8008522 <UART_SetConfig+0x5a6>
 80083d0:	2380      	movs	r3, #128	@ 0x80
 80083d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083d6:	e0a4      	b.n	8008522 <UART_SetConfig+0x5a6>
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a8f      	ldr	r2, [pc, #572]	@ (800861c <UART_SetConfig+0x6a0>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d130      	bne.n	8008444 <UART_SetConfig+0x4c8>
 80083e2:	4b8d      	ldr	r3, [pc, #564]	@ (8008618 <UART_SetConfig+0x69c>)
 80083e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	2b05      	cmp	r3, #5
 80083ec:	d826      	bhi.n	800843c <UART_SetConfig+0x4c0>
 80083ee:	a201      	add	r2, pc, #4	@ (adr r2, 80083f4 <UART_SetConfig+0x478>)
 80083f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f4:	0800840d 	.word	0x0800840d
 80083f8:	08008415 	.word	0x08008415
 80083fc:	0800841d 	.word	0x0800841d
 8008400:	08008425 	.word	0x08008425
 8008404:	0800842d 	.word	0x0800842d
 8008408:	08008435 	.word	0x08008435
 800840c:	2300      	movs	r3, #0
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008412:	e086      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008414:	2304      	movs	r3, #4
 8008416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841a:	e082      	b.n	8008522 <UART_SetConfig+0x5a6>
 800841c:	2308      	movs	r3, #8
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008422:	e07e      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008424:	2310      	movs	r3, #16
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842a:	e07a      	b.n	8008522 <UART_SetConfig+0x5a6>
 800842c:	2320      	movs	r3, #32
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008432:	e076      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008434:	2340      	movs	r3, #64	@ 0x40
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843a:	e072      	b.n	8008522 <UART_SetConfig+0x5a6>
 800843c:	2380      	movs	r3, #128	@ 0x80
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008442:	e06e      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a75      	ldr	r2, [pc, #468]	@ (8008620 <UART_SetConfig+0x6a4>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d130      	bne.n	80084b0 <UART_SetConfig+0x534>
 800844e:	4b72      	ldr	r3, [pc, #456]	@ (8008618 <UART_SetConfig+0x69c>)
 8008450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008452:	f003 0307 	and.w	r3, r3, #7
 8008456:	2b05      	cmp	r3, #5
 8008458:	d826      	bhi.n	80084a8 <UART_SetConfig+0x52c>
 800845a:	a201      	add	r2, pc, #4	@ (adr r2, 8008460 <UART_SetConfig+0x4e4>)
 800845c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008460:	08008479 	.word	0x08008479
 8008464:	08008481 	.word	0x08008481
 8008468:	08008489 	.word	0x08008489
 800846c:	08008491 	.word	0x08008491
 8008470:	08008499 	.word	0x08008499
 8008474:	080084a1 	.word	0x080084a1
 8008478:	2300      	movs	r3, #0
 800847a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800847e:	e050      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008480:	2304      	movs	r3, #4
 8008482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008486:	e04c      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008488:	2308      	movs	r3, #8
 800848a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800848e:	e048      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008490:	2310      	movs	r3, #16
 8008492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008496:	e044      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008498:	2320      	movs	r3, #32
 800849a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800849e:	e040      	b.n	8008522 <UART_SetConfig+0x5a6>
 80084a0:	2340      	movs	r3, #64	@ 0x40
 80084a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084a6:	e03c      	b.n	8008522 <UART_SetConfig+0x5a6>
 80084a8:	2380      	movs	r3, #128	@ 0x80
 80084aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ae:	e038      	b.n	8008522 <UART_SetConfig+0x5a6>
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a5b      	ldr	r2, [pc, #364]	@ (8008624 <UART_SetConfig+0x6a8>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d130      	bne.n	800851c <UART_SetConfig+0x5a0>
 80084ba:	4b57      	ldr	r3, [pc, #348]	@ (8008618 <UART_SetConfig+0x69c>)
 80084bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084be:	f003 0307 	and.w	r3, r3, #7
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	d826      	bhi.n	8008514 <UART_SetConfig+0x598>
 80084c6:	a201      	add	r2, pc, #4	@ (adr r2, 80084cc <UART_SetConfig+0x550>)
 80084c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084cc:	080084e5 	.word	0x080084e5
 80084d0:	080084ed 	.word	0x080084ed
 80084d4:	080084f5 	.word	0x080084f5
 80084d8:	080084fd 	.word	0x080084fd
 80084dc:	08008505 	.word	0x08008505
 80084e0:	0800850d 	.word	0x0800850d
 80084e4:	2302      	movs	r3, #2
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ea:	e01a      	b.n	8008522 <UART_SetConfig+0x5a6>
 80084ec:	2304      	movs	r3, #4
 80084ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084f2:	e016      	b.n	8008522 <UART_SetConfig+0x5a6>
 80084f4:	2308      	movs	r3, #8
 80084f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084fa:	e012      	b.n	8008522 <UART_SetConfig+0x5a6>
 80084fc:	2310      	movs	r3, #16
 80084fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008502:	e00e      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008504:	2320      	movs	r3, #32
 8008506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800850a:	e00a      	b.n	8008522 <UART_SetConfig+0x5a6>
 800850c:	2340      	movs	r3, #64	@ 0x40
 800850e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008512:	e006      	b.n	8008522 <UART_SetConfig+0x5a6>
 8008514:	2380      	movs	r3, #128	@ 0x80
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851a:	e002      	b.n	8008522 <UART_SetConfig+0x5a6>
 800851c:	2380      	movs	r3, #128	@ 0x80
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008522:	697b      	ldr	r3, [r7, #20]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a3f      	ldr	r2, [pc, #252]	@ (8008624 <UART_SetConfig+0x6a8>)
 8008528:	4293      	cmp	r3, r2
 800852a:	f040 80f8 	bne.w	800871e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800852e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008532:	2b20      	cmp	r3, #32
 8008534:	dc46      	bgt.n	80085c4 <UART_SetConfig+0x648>
 8008536:	2b02      	cmp	r3, #2
 8008538:	f2c0 8082 	blt.w	8008640 <UART_SetConfig+0x6c4>
 800853c:	3b02      	subs	r3, #2
 800853e:	2b1e      	cmp	r3, #30
 8008540:	d87e      	bhi.n	8008640 <UART_SetConfig+0x6c4>
 8008542:	a201      	add	r2, pc, #4	@ (adr r2, 8008548 <UART_SetConfig+0x5cc>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	080085cb 	.word	0x080085cb
 800854c:	08008641 	.word	0x08008641
 8008550:	080085d3 	.word	0x080085d3
 8008554:	08008641 	.word	0x08008641
 8008558:	08008641 	.word	0x08008641
 800855c:	08008641 	.word	0x08008641
 8008560:	080085e3 	.word	0x080085e3
 8008564:	08008641 	.word	0x08008641
 8008568:	08008641 	.word	0x08008641
 800856c:	08008641 	.word	0x08008641
 8008570:	08008641 	.word	0x08008641
 8008574:	08008641 	.word	0x08008641
 8008578:	08008641 	.word	0x08008641
 800857c:	08008641 	.word	0x08008641
 8008580:	080085f3 	.word	0x080085f3
 8008584:	08008641 	.word	0x08008641
 8008588:	08008641 	.word	0x08008641
 800858c:	08008641 	.word	0x08008641
 8008590:	08008641 	.word	0x08008641
 8008594:	08008641 	.word	0x08008641
 8008598:	08008641 	.word	0x08008641
 800859c:	08008641 	.word	0x08008641
 80085a0:	08008641 	.word	0x08008641
 80085a4:	08008641 	.word	0x08008641
 80085a8:	08008641 	.word	0x08008641
 80085ac:	08008641 	.word	0x08008641
 80085b0:	08008641 	.word	0x08008641
 80085b4:	08008641 	.word	0x08008641
 80085b8:	08008641 	.word	0x08008641
 80085bc:	08008641 	.word	0x08008641
 80085c0:	08008633 	.word	0x08008633
 80085c4:	2b40      	cmp	r3, #64	@ 0x40
 80085c6:	d037      	beq.n	8008638 <UART_SetConfig+0x6bc>
 80085c8:	e03a      	b.n	8008640 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80085ca:	f7fd fccb 	bl	8005f64 <HAL_RCCEx_GetD3PCLK1Freq>
 80085ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80085d0:	e03c      	b.n	800864c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80085d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085d6:	4618      	mov	r0, r3
 80085d8:	f7fd fcda 	bl	8005f90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80085dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085e0:	e034      	b.n	800864c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80085e2:	f107 0318 	add.w	r3, r7, #24
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fd fe26 	bl	8006238 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80085f0:	e02c      	b.n	800864c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085f2:	4b09      	ldr	r3, [pc, #36]	@ (8008618 <UART_SetConfig+0x69c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0320 	and.w	r3, r3, #32
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d016      	beq.n	800862c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80085fe:	4b06      	ldr	r3, [pc, #24]	@ (8008618 <UART_SetConfig+0x69c>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	08db      	lsrs	r3, r3, #3
 8008604:	f003 0303 	and.w	r3, r3, #3
 8008608:	4a07      	ldr	r2, [pc, #28]	@ (8008628 <UART_SetConfig+0x6ac>)
 800860a:	fa22 f303 	lsr.w	r3, r2, r3
 800860e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008610:	e01c      	b.n	800864c <UART_SetConfig+0x6d0>
 8008612:	bf00      	nop
 8008614:	40011400 	.word	0x40011400
 8008618:	58024400 	.word	0x58024400
 800861c:	40007800 	.word	0x40007800
 8008620:	40007c00 	.word	0x40007c00
 8008624:	58000c00 	.word	0x58000c00
 8008628:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800862c:	4b9d      	ldr	r3, [pc, #628]	@ (80088a4 <UART_SetConfig+0x928>)
 800862e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008630:	e00c      	b.n	800864c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008632:	4b9d      	ldr	r3, [pc, #628]	@ (80088a8 <UART_SetConfig+0x92c>)
 8008634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008636:	e009      	b.n	800864c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008638:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800863c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800863e:	e005      	b.n	800864c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008640:	2300      	movs	r3, #0
 8008642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800864a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800864c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 81de 	beq.w	8008a10 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008658:	4a94      	ldr	r2, [pc, #592]	@ (80088ac <UART_SetConfig+0x930>)
 800865a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800865e:	461a      	mov	r2, r3
 8008660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008662:	fbb3 f3f2 	udiv	r3, r3, r2
 8008666:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	4613      	mov	r3, r2
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	4413      	add	r3, r2
 8008672:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008674:	429a      	cmp	r2, r3
 8008676:	d305      	bcc.n	8008684 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008678:	697b      	ldr	r3, [r7, #20]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800867e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008680:	429a      	cmp	r2, r3
 8008682:	d903      	bls.n	800868c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800868a:	e1c1      	b.n	8008a10 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800868c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800868e:	2200      	movs	r2, #0
 8008690:	60bb      	str	r3, [r7, #8]
 8008692:	60fa      	str	r2, [r7, #12]
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008698:	4a84      	ldr	r2, [pc, #528]	@ (80088ac <UART_SetConfig+0x930>)
 800869a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	2200      	movs	r2, #0
 80086a2:	603b      	str	r3, [r7, #0]
 80086a4:	607a      	str	r2, [r7, #4]
 80086a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086ae:	f7f7 fe6f 	bl	8000390 <__aeabi_uldivmod>
 80086b2:	4602      	mov	r2, r0
 80086b4:	460b      	mov	r3, r1
 80086b6:	4610      	mov	r0, r2
 80086b8:	4619      	mov	r1, r3
 80086ba:	f04f 0200 	mov.w	r2, #0
 80086be:	f04f 0300 	mov.w	r3, #0
 80086c2:	020b      	lsls	r3, r1, #8
 80086c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086c8:	0202      	lsls	r2, r0, #8
 80086ca:	6979      	ldr	r1, [r7, #20]
 80086cc:	6849      	ldr	r1, [r1, #4]
 80086ce:	0849      	lsrs	r1, r1, #1
 80086d0:	2000      	movs	r0, #0
 80086d2:	460c      	mov	r4, r1
 80086d4:	4605      	mov	r5, r0
 80086d6:	eb12 0804 	adds.w	r8, r2, r4
 80086da:	eb43 0905 	adc.w	r9, r3, r5
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	469a      	mov	sl, r3
 80086e6:	4693      	mov	fp, r2
 80086e8:	4652      	mov	r2, sl
 80086ea:	465b      	mov	r3, fp
 80086ec:	4640      	mov	r0, r8
 80086ee:	4649      	mov	r1, r9
 80086f0:	f7f7 fe4e 	bl	8000390 <__aeabi_uldivmod>
 80086f4:	4602      	mov	r2, r0
 80086f6:	460b      	mov	r3, r1
 80086f8:	4613      	mov	r3, r2
 80086fa:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80086fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008702:	d308      	bcc.n	8008716 <UART_SetConfig+0x79a>
 8008704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800870a:	d204      	bcs.n	8008716 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008712:	60da      	str	r2, [r3, #12]
 8008714:	e17c      	b.n	8008a10 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800871c:	e178      	b.n	8008a10 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	69db      	ldr	r3, [r3, #28]
 8008722:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008726:	f040 80c5 	bne.w	80088b4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800872a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800872e:	2b20      	cmp	r3, #32
 8008730:	dc48      	bgt.n	80087c4 <UART_SetConfig+0x848>
 8008732:	2b00      	cmp	r3, #0
 8008734:	db7b      	blt.n	800882e <UART_SetConfig+0x8b2>
 8008736:	2b20      	cmp	r3, #32
 8008738:	d879      	bhi.n	800882e <UART_SetConfig+0x8b2>
 800873a:	a201      	add	r2, pc, #4	@ (adr r2, 8008740 <UART_SetConfig+0x7c4>)
 800873c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008740:	080087cb 	.word	0x080087cb
 8008744:	080087d3 	.word	0x080087d3
 8008748:	0800882f 	.word	0x0800882f
 800874c:	0800882f 	.word	0x0800882f
 8008750:	080087db 	.word	0x080087db
 8008754:	0800882f 	.word	0x0800882f
 8008758:	0800882f 	.word	0x0800882f
 800875c:	0800882f 	.word	0x0800882f
 8008760:	080087eb 	.word	0x080087eb
 8008764:	0800882f 	.word	0x0800882f
 8008768:	0800882f 	.word	0x0800882f
 800876c:	0800882f 	.word	0x0800882f
 8008770:	0800882f 	.word	0x0800882f
 8008774:	0800882f 	.word	0x0800882f
 8008778:	0800882f 	.word	0x0800882f
 800877c:	0800882f 	.word	0x0800882f
 8008780:	080087fb 	.word	0x080087fb
 8008784:	0800882f 	.word	0x0800882f
 8008788:	0800882f 	.word	0x0800882f
 800878c:	0800882f 	.word	0x0800882f
 8008790:	0800882f 	.word	0x0800882f
 8008794:	0800882f 	.word	0x0800882f
 8008798:	0800882f 	.word	0x0800882f
 800879c:	0800882f 	.word	0x0800882f
 80087a0:	0800882f 	.word	0x0800882f
 80087a4:	0800882f 	.word	0x0800882f
 80087a8:	0800882f 	.word	0x0800882f
 80087ac:	0800882f 	.word	0x0800882f
 80087b0:	0800882f 	.word	0x0800882f
 80087b4:	0800882f 	.word	0x0800882f
 80087b8:	0800882f 	.word	0x0800882f
 80087bc:	0800882f 	.word	0x0800882f
 80087c0:	08008821 	.word	0x08008821
 80087c4:	2b40      	cmp	r3, #64	@ 0x40
 80087c6:	d02e      	beq.n	8008826 <UART_SetConfig+0x8aa>
 80087c8:	e031      	b.n	800882e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087ca:	f7fc f995 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 80087ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087d0:	e033      	b.n	800883a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087d2:	f7fc f9a7 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 80087d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80087d8:	e02f      	b.n	800883a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fd fbd6 	bl	8005f90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80087e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087e8:	e027      	b.n	800883a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80087ea:	f107 0318 	add.w	r3, r7, #24
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fd fd22 	bl	8006238 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80087f8:	e01f      	b.n	800883a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087fa:	4b2d      	ldr	r3, [pc, #180]	@ (80088b0 <UART_SetConfig+0x934>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0320 	and.w	r3, r3, #32
 8008802:	2b00      	cmp	r3, #0
 8008804:	d009      	beq.n	800881a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008806:	4b2a      	ldr	r3, [pc, #168]	@ (80088b0 <UART_SetConfig+0x934>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	08db      	lsrs	r3, r3, #3
 800880c:	f003 0303 	and.w	r3, r3, #3
 8008810:	4a24      	ldr	r2, [pc, #144]	@ (80088a4 <UART_SetConfig+0x928>)
 8008812:	fa22 f303 	lsr.w	r3, r2, r3
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008818:	e00f      	b.n	800883a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800881a:	4b22      	ldr	r3, [pc, #136]	@ (80088a4 <UART_SetConfig+0x928>)
 800881c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800881e:	e00c      	b.n	800883a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008820:	4b21      	ldr	r3, [pc, #132]	@ (80088a8 <UART_SetConfig+0x92c>)
 8008822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008824:	e009      	b.n	800883a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008826:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800882a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800882c:	e005      	b.n	800883a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800882e:	2300      	movs	r3, #0
 8008830:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008832:	2301      	movs	r3, #1
 8008834:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008838:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800883a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800883c:	2b00      	cmp	r3, #0
 800883e:	f000 80e7 	beq.w	8008a10 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008846:	4a19      	ldr	r2, [pc, #100]	@ (80088ac <UART_SetConfig+0x930>)
 8008848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800884c:	461a      	mov	r2, r3
 800884e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008850:	fbb3 f3f2 	udiv	r3, r3, r2
 8008854:	005a      	lsls	r2, r3, #1
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	085b      	lsrs	r3, r3, #1
 800885c:	441a      	add	r2, r3
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	fbb2 f3f3 	udiv	r3, r2, r3
 8008866:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800886a:	2b0f      	cmp	r3, #15
 800886c:	d916      	bls.n	800889c <UART_SetConfig+0x920>
 800886e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008874:	d212      	bcs.n	800889c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008878:	b29b      	uxth	r3, r3
 800887a:	f023 030f 	bic.w	r3, r3, #15
 800887e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008882:	085b      	lsrs	r3, r3, #1
 8008884:	b29b      	uxth	r3, r3
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	b29a      	uxth	r2, r3
 800888c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800888e:	4313      	orrs	r3, r2
 8008890:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008898:	60da      	str	r2, [r3, #12]
 800889a:	e0b9      	b.n	8008a10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80088a2:	e0b5      	b.n	8008a10 <UART_SetConfig+0xa94>
 80088a4:	03d09000 	.word	0x03d09000
 80088a8:	003d0900 	.word	0x003d0900
 80088ac:	0800a058 	.word	0x0800a058
 80088b0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80088b4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	dc49      	bgt.n	8008950 <UART_SetConfig+0x9d4>
 80088bc:	2b00      	cmp	r3, #0
 80088be:	db7c      	blt.n	80089ba <UART_SetConfig+0xa3e>
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	d87a      	bhi.n	80089ba <UART_SetConfig+0xa3e>
 80088c4:	a201      	add	r2, pc, #4	@ (adr r2, 80088cc <UART_SetConfig+0x950>)
 80088c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ca:	bf00      	nop
 80088cc:	08008957 	.word	0x08008957
 80088d0:	0800895f 	.word	0x0800895f
 80088d4:	080089bb 	.word	0x080089bb
 80088d8:	080089bb 	.word	0x080089bb
 80088dc:	08008967 	.word	0x08008967
 80088e0:	080089bb 	.word	0x080089bb
 80088e4:	080089bb 	.word	0x080089bb
 80088e8:	080089bb 	.word	0x080089bb
 80088ec:	08008977 	.word	0x08008977
 80088f0:	080089bb 	.word	0x080089bb
 80088f4:	080089bb 	.word	0x080089bb
 80088f8:	080089bb 	.word	0x080089bb
 80088fc:	080089bb 	.word	0x080089bb
 8008900:	080089bb 	.word	0x080089bb
 8008904:	080089bb 	.word	0x080089bb
 8008908:	080089bb 	.word	0x080089bb
 800890c:	08008987 	.word	0x08008987
 8008910:	080089bb 	.word	0x080089bb
 8008914:	080089bb 	.word	0x080089bb
 8008918:	080089bb 	.word	0x080089bb
 800891c:	080089bb 	.word	0x080089bb
 8008920:	080089bb 	.word	0x080089bb
 8008924:	080089bb 	.word	0x080089bb
 8008928:	080089bb 	.word	0x080089bb
 800892c:	080089bb 	.word	0x080089bb
 8008930:	080089bb 	.word	0x080089bb
 8008934:	080089bb 	.word	0x080089bb
 8008938:	080089bb 	.word	0x080089bb
 800893c:	080089bb 	.word	0x080089bb
 8008940:	080089bb 	.word	0x080089bb
 8008944:	080089bb 	.word	0x080089bb
 8008948:	080089bb 	.word	0x080089bb
 800894c:	080089ad 	.word	0x080089ad
 8008950:	2b40      	cmp	r3, #64	@ 0x40
 8008952:	d02e      	beq.n	80089b2 <UART_SetConfig+0xa36>
 8008954:	e031      	b.n	80089ba <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008956:	f7fc f8cf 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 800895a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800895c:	e033      	b.n	80089c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800895e:	f7fc f8e1 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 8008962:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008964:	e02f      	b.n	80089c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800896a:	4618      	mov	r0, r3
 800896c:	f7fd fb10 	bl	8005f90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008974:	e027      	b.n	80089c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008976:	f107 0318 	add.w	r3, r7, #24
 800897a:	4618      	mov	r0, r3
 800897c:	f7fd fc5c 	bl	8006238 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008984:	e01f      	b.n	80089c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008986:	4b2d      	ldr	r3, [pc, #180]	@ (8008a3c <UART_SetConfig+0xac0>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0320 	and.w	r3, r3, #32
 800898e:	2b00      	cmp	r3, #0
 8008990:	d009      	beq.n	80089a6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008992:	4b2a      	ldr	r3, [pc, #168]	@ (8008a3c <UART_SetConfig+0xac0>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	08db      	lsrs	r3, r3, #3
 8008998:	f003 0303 	and.w	r3, r3, #3
 800899c:	4a28      	ldr	r2, [pc, #160]	@ (8008a40 <UART_SetConfig+0xac4>)
 800899e:	fa22 f303 	lsr.w	r3, r2, r3
 80089a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089a4:	e00f      	b.n	80089c6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80089a6:	4b26      	ldr	r3, [pc, #152]	@ (8008a40 <UART_SetConfig+0xac4>)
 80089a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089aa:	e00c      	b.n	80089c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089ac:	4b25      	ldr	r3, [pc, #148]	@ (8008a44 <UART_SetConfig+0xac8>)
 80089ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089b0:	e009      	b.n	80089c6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089b8:	e005      	b.n	80089c6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80089ba:	2300      	movs	r3, #0
 80089bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80089c4:	bf00      	nop
    }

    if (pclk != 0U)
 80089c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d021      	beq.n	8008a10 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a48 <UART_SetConfig+0xacc>)
 80089d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80089d6:	461a      	mov	r2, r3
 80089d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089da:	fbb3 f2f2 	udiv	r2, r3, r2
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	085b      	lsrs	r3, r3, #1
 80089e4:	441a      	add	r2, r3
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f2:	2b0f      	cmp	r3, #15
 80089f4:	d909      	bls.n	8008a0a <UART_SetConfig+0xa8e>
 80089f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089fc:	d205      	bcs.n	8008a0a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	60da      	str	r2, [r3, #12]
 8008a08:	e002      	b.n	8008a10 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	2200      	movs	r2, #0
 8008a24:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008a2c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	3748      	adds	r7, #72	@ 0x48
 8008a34:	46bd      	mov	sp, r7
 8008a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a3a:	bf00      	nop
 8008a3c:	58024400 	.word	0x58024400
 8008a40:	03d09000 	.word	0x03d09000
 8008a44:	003d0900 	.word	0x003d0900
 8008a48:	0800a058 	.word	0x0800a058

08008a4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a58:	f003 0308 	and.w	r3, r3, #8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00a      	beq.n	8008a76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00a      	beq.n	8008a98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a9c:	f003 0302 	and.w	r3, r3, #2
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00a      	beq.n	8008aba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	430a      	orrs	r2, r1
 8008ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008abe:	f003 0304 	and.w	r3, r3, #4
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00a      	beq.n	8008adc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	430a      	orrs	r2, r1
 8008ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae0:	f003 0310 	and.w	r3, r3, #16
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00a      	beq.n	8008afe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	430a      	orrs	r2, r1
 8008afc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b02:	f003 0320 	and.w	r3, r3, #32
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00a      	beq.n	8008b20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d01a      	beq.n	8008b62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685b      	ldr	r3, [r3, #4]
 8008b32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b4a:	d10a      	bne.n	8008b62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d00a      	beq.n	8008b84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	430a      	orrs	r2, r1
 8008b82:	605a      	str	r2, [r3, #4]
  }
}
 8008b84:	bf00      	nop
 8008b86:	370c      	adds	r7, #12
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b098      	sub	sp, #96	@ 0x60
 8008b94:	af02      	add	r7, sp, #8
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ba0:	f7f9 f878 	bl	8001c94 <HAL_GetTick>
 8008ba4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0308 	and.w	r3, r3, #8
 8008bb0:	2b08      	cmp	r3, #8
 8008bb2:	d12f      	bne.n	8008c14 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bb4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 f88e 	bl	8008ce4 <UART_WaitOnFlagUntilTimeout>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d022      	beq.n	8008c14 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bd6:	e853 3f00 	ldrex	r3, [r3]
 8008bda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	461a      	mov	r2, r3
 8008bea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008bec:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bf4:	e841 2300 	strex	r3, r2, [r1]
 8008bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e6      	bne.n	8008bce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e063      	b.n	8008cdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f003 0304 	and.w	r3, r3, #4
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	d149      	bne.n	8008cb6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c22:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c26:	9300      	str	r3, [sp, #0]
 8008c28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f857 	bl	8008ce4 <UART_WaitOnFlagUntilTimeout>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d03c      	beq.n	8008cb6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c44:	e853 3f00 	ldrex	r3, [r3]
 8008c48:	623b      	str	r3, [r7, #32]
   return(result);
 8008c4a:	6a3b      	ldr	r3, [r7, #32]
 8008c4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c62:	e841 2300 	strex	r3, r2, [r1]
 8008c66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1e6      	bne.n	8008c3c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3308      	adds	r3, #8
 8008c74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	e853 3f00 	ldrex	r3, [r3]
 8008c7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	f023 0301 	bic.w	r3, r3, #1
 8008c84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	3308      	adds	r3, #8
 8008c8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c8e:	61fa      	str	r2, [r7, #28]
 8008c90:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c92:	69b9      	ldr	r1, [r7, #24]
 8008c94:	69fa      	ldr	r2, [r7, #28]
 8008c96:	e841 2300 	strex	r3, r2, [r1]
 8008c9a:	617b      	str	r3, [r7, #20]
   return(result);
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1e5      	bne.n	8008c6e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2220      	movs	r2, #32
 8008ca6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2200      	movs	r2, #0
 8008cae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cb2:	2303      	movs	r3, #3
 8008cb4:	e012      	b.n	8008cdc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2220      	movs	r2, #32
 8008cba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2220      	movs	r2, #32
 8008cc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2200      	movs	r2, #0
 8008cd0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3758      	adds	r7, #88	@ 0x58
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	603b      	str	r3, [r7, #0]
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cf4:	e04f      	b.n	8008d96 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cfc:	d04b      	beq.n	8008d96 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cfe:	f7f8 ffc9 	bl	8001c94 <HAL_GetTick>
 8008d02:	4602      	mov	r2, r0
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	1ad3      	subs	r3, r2, r3
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d302      	bcc.n	8008d14 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d101      	bne.n	8008d18 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e04e      	b.n	8008db6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0304 	and.w	r3, r3, #4
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d037      	beq.n	8008d96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	2b80      	cmp	r3, #128	@ 0x80
 8008d2a:	d034      	beq.n	8008d96 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	2b40      	cmp	r3, #64	@ 0x40
 8008d30:	d031      	beq.n	8008d96 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	f003 0308 	and.w	r3, r3, #8
 8008d3c:	2b08      	cmp	r3, #8
 8008d3e:	d110      	bne.n	8008d62 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2208      	movs	r2, #8
 8008d46:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d48:	68f8      	ldr	r0, [r7, #12]
 8008d4a:	f000 f839 	bl	8008dc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2208      	movs	r2, #8
 8008d52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	e029      	b.n	8008db6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008d70:	d111      	bne.n	8008d96 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d7c:	68f8      	ldr	r0, [r7, #12]
 8008d7e:	f000 f81f 	bl	8008dc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2220      	movs	r2, #32
 8008d86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	e00f      	b.n	8008db6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	69da      	ldr	r2, [r3, #28]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	4013      	ands	r3, r2
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	bf0c      	ite	eq
 8008da6:	2301      	moveq	r3, #1
 8008da8:	2300      	movne	r3, #0
 8008daa:	b2db      	uxtb	r3, r3
 8008dac:	461a      	mov	r2, r3
 8008dae:	79fb      	ldrb	r3, [r7, #7]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d0a0      	beq.n	8008cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
	...

08008dc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b095      	sub	sp, #84	@ 0x54
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd0:	e853 3f00 	ldrex	r3, [r3]
 8008dd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008de6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008de8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008dec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008dee:	e841 2300 	strex	r3, r2, [r1]
 8008df2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1e6      	bne.n	8008dc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	3308      	adds	r3, #8
 8008e00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	e853 3f00 	ldrex	r3, [r3]
 8008e08:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e0a:	69fa      	ldr	r2, [r7, #28]
 8008e0c:	4b1e      	ldr	r3, [pc, #120]	@ (8008e88 <UART_EndRxTransfer+0xc8>)
 8008e0e:	4013      	ands	r3, r2
 8008e10:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3308      	adds	r3, #8
 8008e18:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008e1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e22:	e841 2300 	strex	r3, r2, [r1]
 8008e26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1e5      	bne.n	8008dfa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d118      	bne.n	8008e68 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	e853 3f00 	ldrex	r3, [r3]
 8008e42:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f023 0310 	bic.w	r3, r3, #16
 8008e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	461a      	mov	r2, r3
 8008e52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e54:	61bb      	str	r3, [r7, #24]
 8008e56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e58:	6979      	ldr	r1, [r7, #20]
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	e841 2300 	strex	r3, r2, [r1]
 8008e60:	613b      	str	r3, [r7, #16]
   return(result);
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1e6      	bne.n	8008e36 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2220      	movs	r2, #32
 8008e6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008e7c:	bf00      	nop
 8008e7e:	3754      	adds	r7, #84	@ 0x54
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr
 8008e88:	effffffe 	.word	0xeffffffe

08008e8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d101      	bne.n	8008ea2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	e027      	b.n	8008ef2 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2224      	movs	r2, #36	@ 0x24
 8008eae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 0201 	bic.w	r2, r2, #1
 8008ec8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008ed0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr

08008efe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b084      	sub	sp, #16
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	6078      	str	r0, [r7, #4]
 8008f06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d101      	bne.n	8008f16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f12:	2302      	movs	r3, #2
 8008f14:	e02d      	b.n	8008f72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2224      	movs	r2, #36	@ 0x24
 8008f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f022 0201 	bic.w	r2, r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	683a      	ldr	r2, [r7, #0]
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f850 	bl	8008ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2220      	movs	r2, #32
 8008f64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d101      	bne.n	8008f92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f8e:	2302      	movs	r3, #2
 8008f90:	e02d      	b.n	8008fee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2224      	movs	r2, #36	@ 0x24
 8008f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	681a      	ldr	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f022 0201 	bic.w	r2, r2, #1
 8008fb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	683a      	ldr	r2, [r7, #0]
 8008fca:	430a      	orrs	r2, r1
 8008fcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f812 	bl	8008ff8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2220      	movs	r2, #32
 8008fe0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
	...

08008ff8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009004:	2b00      	cmp	r3, #0
 8009006:	d108      	bne.n	800901a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009018:	e031      	b.n	800907e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800901a:	2310      	movs	r3, #16
 800901c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800901e:	2310      	movs	r3, #16
 8009020:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	0e5b      	lsrs	r3, r3, #25
 800902a:	b2db      	uxtb	r3, r3
 800902c:	f003 0307 	and.w	r3, r3, #7
 8009030:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	0f5b      	lsrs	r3, r3, #29
 800903a:	b2db      	uxtb	r3, r3
 800903c:	f003 0307 	and.w	r3, r3, #7
 8009040:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009042:	7bbb      	ldrb	r3, [r7, #14]
 8009044:	7b3a      	ldrb	r2, [r7, #12]
 8009046:	4911      	ldr	r1, [pc, #68]	@ (800908c <UARTEx_SetNbDataToProcess+0x94>)
 8009048:	5c8a      	ldrb	r2, [r1, r2]
 800904a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800904e:	7b3a      	ldrb	r2, [r7, #12]
 8009050:	490f      	ldr	r1, [pc, #60]	@ (8009090 <UARTEx_SetNbDataToProcess+0x98>)
 8009052:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009054:	fb93 f3f2 	sdiv	r3, r3, r2
 8009058:	b29a      	uxth	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009060:	7bfb      	ldrb	r3, [r7, #15]
 8009062:	7b7a      	ldrb	r2, [r7, #13]
 8009064:	4909      	ldr	r1, [pc, #36]	@ (800908c <UARTEx_SetNbDataToProcess+0x94>)
 8009066:	5c8a      	ldrb	r2, [r1, r2]
 8009068:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800906c:	7b7a      	ldrb	r2, [r7, #13]
 800906e:	4908      	ldr	r1, [pc, #32]	@ (8009090 <UARTEx_SetNbDataToProcess+0x98>)
 8009070:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009072:	fb93 f3f2 	sdiv	r3, r3, r2
 8009076:	b29a      	uxth	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800907e:	bf00      	nop
 8009080:	3714      	adds	r7, #20
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	0800a070 	.word	0x0800a070
 8009090:	0800a078 	.word	0x0800a078

08009094 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009094:	b084      	sub	sp, #16
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	f107 001c 	add.w	r0, r7, #28
 80090a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090a6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d121      	bne.n	80090f2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	4b2c      	ldr	r3, [pc, #176]	@ (8009170 <USB_CoreInit+0xdc>)
 80090c0:	4013      	ands	r3, r2
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80090d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80090d6:	2b01      	cmp	r3, #1
 80090d8:	d105      	bne.n	80090e6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 faaa 	bl	8009640 <USB_CoreReset>
 80090ec:	4603      	mov	r3, r0
 80090ee:	73fb      	strb	r3, [r7, #15]
 80090f0:	e01b      	b.n	800912a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fa9e 	bl	8009640 <USB_CoreReset>
 8009104:	4603      	mov	r3, r0
 8009106:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009108:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800910c:	2b00      	cmp	r3, #0
 800910e:	d106      	bne.n	800911e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009114:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	639a      	str	r2, [r3, #56]	@ 0x38
 800911c:	e005      	b.n	800912a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009122:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800912a:	7fbb      	ldrb	r3, [r7, #30]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d116      	bne.n	800915e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009134:	b29a      	uxth	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800913e:	4b0d      	ldr	r3, [pc, #52]	@ (8009174 <USB_CoreInit+0xe0>)
 8009140:	4313      	orrs	r3, r2
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f043 0206 	orr.w	r2, r3, #6
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	689b      	ldr	r3, [r3, #8]
 8009156:	f043 0220 	orr.w	r2, r3, #32
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800915e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800916a:	b004      	add	sp, #16
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	ffbdffbf 	.word	0xffbdffbf
 8009174:	03ee0000 	.word	0x03ee0000

08009178 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f023 0201 	bic.w	r2, r3, #1
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800918c:	2300      	movs	r3, #0
}
 800918e:	4618      	mov	r0, r3
 8009190:	370c      	adds	r7, #12
 8009192:	46bd      	mov	sp, r7
 8009194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009198:	4770      	bx	lr

0800919a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b084      	sub	sp, #16
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
 80091a2:	460b      	mov	r3, r1
 80091a4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091a6:	2300      	movs	r3, #0
 80091a8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	68db      	ldr	r3, [r3, #12]
 80091ae:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091b6:	78fb      	ldrb	r3, [r7, #3]
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d115      	bne.n	80091e8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80091c8:	200a      	movs	r0, #10
 80091ca:	f7f8 fd6f 	bl	8001cac <HAL_Delay>
      ms += 10U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	330a      	adds	r3, #10
 80091d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 fa25 	bl	8009624 <USB_GetMode>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d01e      	beq.n	800921e <USB_SetCurrentMode+0x84>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80091e4:	d9f0      	bls.n	80091c8 <USB_SetCurrentMode+0x2e>
 80091e6:	e01a      	b.n	800921e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80091e8:	78fb      	ldrb	r3, [r7, #3]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d115      	bne.n	800921a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68db      	ldr	r3, [r3, #12]
 80091f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80091fa:	200a      	movs	r0, #10
 80091fc:	f7f8 fd56 	bl	8001cac <HAL_Delay>
      ms += 10U;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	330a      	adds	r3, #10
 8009204:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 fa0c 	bl	8009624 <USB_GetMode>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d005      	beq.n	800921e <USB_SetCurrentMode+0x84>
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2bc7      	cmp	r3, #199	@ 0xc7
 8009216:	d9f0      	bls.n	80091fa <USB_SetCurrentMode+0x60>
 8009218:	e001      	b.n	800921e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e005      	b.n	800922a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2bc8      	cmp	r3, #200	@ 0xc8
 8009222:	d101      	bne.n	8009228 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
	...

08009234 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009234:	b084      	sub	sp, #16
 8009236:	b580      	push	{r7, lr}
 8009238:	b086      	sub	sp, #24
 800923a:	af00      	add	r7, sp, #0
 800923c:	6078      	str	r0, [r7, #4]
 800923e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800924e:	2300      	movs	r3, #0
 8009250:	613b      	str	r3, [r7, #16]
 8009252:	e009      	b.n	8009268 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	3340      	adds	r3, #64	@ 0x40
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	2200      	movs	r2, #0
 8009260:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	3301      	adds	r3, #1
 8009266:	613b      	str	r3, [r7, #16]
 8009268:	693b      	ldr	r3, [r7, #16]
 800926a:	2b0e      	cmp	r3, #14
 800926c:	d9f2      	bls.n	8009254 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800926e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009272:	2b00      	cmp	r3, #0
 8009274:	d11c      	bne.n	80092b0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	68fa      	ldr	r2, [r7, #12]
 8009280:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009284:	f043 0302 	orr.w	r3, r3, #2
 8009288:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800928e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	601a      	str	r2, [r3, #0]
 80092ae:	e005      	b.n	80092bc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80092c2:	461a      	mov	r2, r3
 80092c4:	2300      	movs	r3, #0
 80092c6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092c8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d10d      	bne.n	80092ec <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80092d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d104      	bne.n	80092e2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80092d8:	2100      	movs	r1, #0
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f968 	bl	80095b0 <USB_SetDevSpeed>
 80092e0:	e008      	b.n	80092f4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80092e2:	2101      	movs	r1, #1
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f963 	bl	80095b0 <USB_SetDevSpeed>
 80092ea:	e003      	b.n	80092f4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80092ec:	2103      	movs	r1, #3
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 f95e 	bl	80095b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80092f4:	2110      	movs	r1, #16
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f8fa 	bl	80094f0 <USB_FlushTxFifo>
 80092fc:	4603      	mov	r3, r0
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 f924 	bl	8009554 <USB_FlushRxFifo>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d001      	beq.n	8009316 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800931c:	461a      	mov	r2, r3
 800931e:	2300      	movs	r3, #0
 8009320:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009328:	461a      	mov	r2, r3
 800932a:	2300      	movs	r3, #0
 800932c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009334:	461a      	mov	r2, r3
 8009336:	2300      	movs	r3, #0
 8009338:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800933a:	2300      	movs	r3, #0
 800933c:	613b      	str	r3, [r7, #16]
 800933e:	e043      	b.n	80093c8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	4413      	add	r3, r2
 8009348:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009352:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009356:	d118      	bne.n	800938a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d10a      	bne.n	8009374 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	015a      	lsls	r2, r3, #5
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4413      	add	r3, r2
 8009366:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800936a:	461a      	mov	r2, r3
 800936c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009370:	6013      	str	r3, [r2, #0]
 8009372:	e013      	b.n	800939c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	015a      	lsls	r2, r3, #5
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	4413      	add	r3, r2
 800937c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009380:	461a      	mov	r2, r3
 8009382:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009386:	6013      	str	r3, [r2, #0]
 8009388:	e008      	b.n	800939c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	015a      	lsls	r2, r3, #5
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	4413      	add	r3, r2
 8009392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009396:	461a      	mov	r2, r3
 8009398:	2300      	movs	r3, #0
 800939a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	015a      	lsls	r2, r3, #5
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4413      	add	r3, r2
 80093a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093a8:	461a      	mov	r2, r3
 80093aa:	2300      	movs	r3, #0
 80093ac:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	015a      	lsls	r2, r3, #5
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	4413      	add	r3, r2
 80093b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093ba:	461a      	mov	r2, r3
 80093bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80093c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	3301      	adds	r3, #1
 80093c6:	613b      	str	r3, [r7, #16]
 80093c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80093cc:	461a      	mov	r2, r3
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d3b5      	bcc.n	8009340 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093d4:	2300      	movs	r3, #0
 80093d6:	613b      	str	r3, [r7, #16]
 80093d8:	e043      	b.n	8009462 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	015a      	lsls	r2, r3, #5
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	4413      	add	r3, r2
 80093e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80093ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80093f0:	d118      	bne.n	8009424 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d10a      	bne.n	800940e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009404:	461a      	mov	r2, r3
 8009406:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800940a:	6013      	str	r3, [r2, #0]
 800940c:	e013      	b.n	8009436 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	015a      	lsls	r2, r3, #5
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	4413      	add	r3, r2
 8009416:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800941a:	461a      	mov	r2, r3
 800941c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	e008      	b.n	8009436 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	4413      	add	r3, r2
 800942c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009430:	461a      	mov	r2, r3
 8009432:	2300      	movs	r3, #0
 8009434:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	4413      	add	r3, r2
 800943e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009442:	461a      	mov	r2, r3
 8009444:	2300      	movs	r3, #0
 8009446:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009454:	461a      	mov	r2, r3
 8009456:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800945a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	3301      	adds	r3, #1
 8009460:	613b      	str	r3, [r7, #16]
 8009462:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009466:	461a      	mov	r2, r3
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	4293      	cmp	r3, r2
 800946c:	d3b5      	bcc.n	80093da <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800947c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009480:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800948e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009490:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009494:	2b00      	cmp	r3, #0
 8009496:	d105      	bne.n	80094a4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	699b      	ldr	r3, [r3, #24]
 800949c:	f043 0210 	orr.w	r2, r3, #16
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	699a      	ldr	r2, [r3, #24]
 80094a8:	4b0f      	ldr	r3, [pc, #60]	@ (80094e8 <USB_DevInit+0x2b4>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d005      	beq.n	80094c4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	699b      	ldr	r3, [r3, #24]
 80094bc:	f043 0208 	orr.w	r2, r3, #8
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80094c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d105      	bne.n	80094d8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	699a      	ldr	r2, [r3, #24]
 80094d0:	4b06      	ldr	r3, [pc, #24]	@ (80094ec <USB_DevInit+0x2b8>)
 80094d2:	4313      	orrs	r3, r2
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80094d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3718      	adds	r7, #24
 80094de:	46bd      	mov	sp, r7
 80094e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094e4:	b004      	add	sp, #16
 80094e6:	4770      	bx	lr
 80094e8:	803c3800 	.word	0x803c3800
 80094ec:	40000004 	.word	0x40000004

080094f0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	3301      	adds	r3, #1
 8009502:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800950a:	d901      	bls.n	8009510 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e01b      	b.n	8009548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	691b      	ldr	r3, [r3, #16]
 8009514:	2b00      	cmp	r3, #0
 8009516:	daf2      	bge.n	80094fe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009518:	2300      	movs	r3, #0
 800951a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	019b      	lsls	r3, r3, #6
 8009520:	f043 0220 	orr.w	r2, r3, #32
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	3301      	adds	r3, #1
 800952c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009534:	d901      	bls.n	800953a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009536:	2303      	movs	r3, #3
 8009538:	e006      	b.n	8009548 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	691b      	ldr	r3, [r3, #16]
 800953e:	f003 0320 	and.w	r3, r3, #32
 8009542:	2b20      	cmp	r3, #32
 8009544:	d0f0      	beq.n	8009528 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3714      	adds	r7, #20
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009554:	b480      	push	{r7}
 8009556:	b085      	sub	sp, #20
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	3301      	adds	r3, #1
 8009564:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800956c:	d901      	bls.n	8009572 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800956e:	2303      	movs	r3, #3
 8009570:	e018      	b.n	80095a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	691b      	ldr	r3, [r3, #16]
 8009576:	2b00      	cmp	r3, #0
 8009578:	daf2      	bge.n	8009560 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800957a:	2300      	movs	r3, #0
 800957c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2210      	movs	r2, #16
 8009582:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	3301      	adds	r3, #1
 8009588:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009590:	d901      	bls.n	8009596 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009592:	2303      	movs	r3, #3
 8009594:	e006      	b.n	80095a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	f003 0310 	and.w	r3, r3, #16
 800959e:	2b10      	cmp	r3, #16
 80095a0:	d0f0      	beq.n	8009584 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80095a2:	2300      	movs	r3, #0
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3714      	adds	r7, #20
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b085      	sub	sp, #20
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
 80095b8:	460b      	mov	r3, r1
 80095ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095c6:	681a      	ldr	r2, [r3, #0]
 80095c8:	78fb      	ldrb	r3, [r7, #3]
 80095ca:	68f9      	ldr	r1, [r7, #12]
 80095cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095d0:	4313      	orrs	r3, r2
 80095d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr

080095e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80095e2:	b480      	push	{r7}
 80095e4:	b085      	sub	sp, #20
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80095fc:	f023 0303 	bic.w	r3, r3, #3
 8009600:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009610:	f043 0302 	orr.w	r3, r3, #2
 8009614:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009616:	2300      	movs	r3, #0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3714      	adds	r7, #20
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009624:	b480      	push	{r7}
 8009626:	b083      	sub	sp, #12
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	695b      	ldr	r3, [r3, #20]
 8009630:	f003 0301 	and.w	r3, r3, #1
}
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	3301      	adds	r3, #1
 8009650:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009658:	d901      	bls.n	800965e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	e01b      	b.n	8009696 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	2b00      	cmp	r3, #0
 8009664:	daf2      	bge.n	800964c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009666:	2300      	movs	r3, #0
 8009668:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	f043 0201 	orr.w	r2, r3, #1
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	3301      	adds	r3, #1
 800967a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009682:	d901      	bls.n	8009688 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009684:	2303      	movs	r3, #3
 8009686:	e006      	b.n	8009696 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	691b      	ldr	r3, [r3, #16]
 800968c:	f003 0301 	and.w	r3, r3, #1
 8009690:	2b01      	cmp	r3, #1
 8009692:	d0f0      	beq.n	8009676 <USB_CoreReset+0x36>

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3714      	adds	r7, #20
 800969a:	46bd      	mov	sp, r7
 800969c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a0:	4770      	bx	lr
	...

080096a4 <siprintf>:
 80096a4:	b40e      	push	{r1, r2, r3}
 80096a6:	b500      	push	{lr}
 80096a8:	b09c      	sub	sp, #112	@ 0x70
 80096aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80096ac:	9002      	str	r0, [sp, #8]
 80096ae:	9006      	str	r0, [sp, #24]
 80096b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80096b4:	4809      	ldr	r0, [pc, #36]	@ (80096dc <siprintf+0x38>)
 80096b6:	9107      	str	r1, [sp, #28]
 80096b8:	9104      	str	r1, [sp, #16]
 80096ba:	4909      	ldr	r1, [pc, #36]	@ (80096e0 <siprintf+0x3c>)
 80096bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80096c0:	9105      	str	r1, [sp, #20]
 80096c2:	6800      	ldr	r0, [r0, #0]
 80096c4:	9301      	str	r3, [sp, #4]
 80096c6:	a902      	add	r1, sp, #8
 80096c8:	f000 f994 	bl	80099f4 <_svfiprintf_r>
 80096cc:	9b02      	ldr	r3, [sp, #8]
 80096ce:	2200      	movs	r2, #0
 80096d0:	701a      	strb	r2, [r3, #0]
 80096d2:	b01c      	add	sp, #112	@ 0x70
 80096d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096d8:	b003      	add	sp, #12
 80096da:	4770      	bx	lr
 80096dc:	24000010 	.word	0x24000010
 80096e0:	ffff0208 	.word	0xffff0208

080096e4 <memset>:
 80096e4:	4402      	add	r2, r0
 80096e6:	4603      	mov	r3, r0
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d100      	bne.n	80096ee <memset+0xa>
 80096ec:	4770      	bx	lr
 80096ee:	f803 1b01 	strb.w	r1, [r3], #1
 80096f2:	e7f9      	b.n	80096e8 <memset+0x4>

080096f4 <__errno>:
 80096f4:	4b01      	ldr	r3, [pc, #4]	@ (80096fc <__errno+0x8>)
 80096f6:	6818      	ldr	r0, [r3, #0]
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	24000010 	.word	0x24000010

08009700 <__libc_init_array>:
 8009700:	b570      	push	{r4, r5, r6, lr}
 8009702:	4d0d      	ldr	r5, [pc, #52]	@ (8009738 <__libc_init_array+0x38>)
 8009704:	4c0d      	ldr	r4, [pc, #52]	@ (800973c <__libc_init_array+0x3c>)
 8009706:	1b64      	subs	r4, r4, r5
 8009708:	10a4      	asrs	r4, r4, #2
 800970a:	2600      	movs	r6, #0
 800970c:	42a6      	cmp	r6, r4
 800970e:	d109      	bne.n	8009724 <__libc_init_array+0x24>
 8009710:	4d0b      	ldr	r5, [pc, #44]	@ (8009740 <__libc_init_array+0x40>)
 8009712:	4c0c      	ldr	r4, [pc, #48]	@ (8009744 <__libc_init_array+0x44>)
 8009714:	f000 fc66 	bl	8009fe4 <_init>
 8009718:	1b64      	subs	r4, r4, r5
 800971a:	10a4      	asrs	r4, r4, #2
 800971c:	2600      	movs	r6, #0
 800971e:	42a6      	cmp	r6, r4
 8009720:	d105      	bne.n	800972e <__libc_init_array+0x2e>
 8009722:	bd70      	pop	{r4, r5, r6, pc}
 8009724:	f855 3b04 	ldr.w	r3, [r5], #4
 8009728:	4798      	blx	r3
 800972a:	3601      	adds	r6, #1
 800972c:	e7ee      	b.n	800970c <__libc_init_array+0xc>
 800972e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009732:	4798      	blx	r3
 8009734:	3601      	adds	r6, #1
 8009736:	e7f2      	b.n	800971e <__libc_init_array+0x1e>
 8009738:	0800a0bc 	.word	0x0800a0bc
 800973c:	0800a0bc 	.word	0x0800a0bc
 8009740:	0800a0bc 	.word	0x0800a0bc
 8009744:	0800a0c0 	.word	0x0800a0c0

08009748 <__retarget_lock_acquire_recursive>:
 8009748:	4770      	bx	lr

0800974a <__retarget_lock_release_recursive>:
 800974a:	4770      	bx	lr

0800974c <_free_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4605      	mov	r5, r0
 8009750:	2900      	cmp	r1, #0
 8009752:	d041      	beq.n	80097d8 <_free_r+0x8c>
 8009754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009758:	1f0c      	subs	r4, r1, #4
 800975a:	2b00      	cmp	r3, #0
 800975c:	bfb8      	it	lt
 800975e:	18e4      	addlt	r4, r4, r3
 8009760:	f000 f8e0 	bl	8009924 <__malloc_lock>
 8009764:	4a1d      	ldr	r2, [pc, #116]	@ (80097dc <_free_r+0x90>)
 8009766:	6813      	ldr	r3, [r2, #0]
 8009768:	b933      	cbnz	r3, 8009778 <_free_r+0x2c>
 800976a:	6063      	str	r3, [r4, #4]
 800976c:	6014      	str	r4, [r2, #0]
 800976e:	4628      	mov	r0, r5
 8009770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009774:	f000 b8dc 	b.w	8009930 <__malloc_unlock>
 8009778:	42a3      	cmp	r3, r4
 800977a:	d908      	bls.n	800978e <_free_r+0x42>
 800977c:	6820      	ldr	r0, [r4, #0]
 800977e:	1821      	adds	r1, r4, r0
 8009780:	428b      	cmp	r3, r1
 8009782:	bf01      	itttt	eq
 8009784:	6819      	ldreq	r1, [r3, #0]
 8009786:	685b      	ldreq	r3, [r3, #4]
 8009788:	1809      	addeq	r1, r1, r0
 800978a:	6021      	streq	r1, [r4, #0]
 800978c:	e7ed      	b.n	800976a <_free_r+0x1e>
 800978e:	461a      	mov	r2, r3
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	b10b      	cbz	r3, 8009798 <_free_r+0x4c>
 8009794:	42a3      	cmp	r3, r4
 8009796:	d9fa      	bls.n	800978e <_free_r+0x42>
 8009798:	6811      	ldr	r1, [r2, #0]
 800979a:	1850      	adds	r0, r2, r1
 800979c:	42a0      	cmp	r0, r4
 800979e:	d10b      	bne.n	80097b8 <_free_r+0x6c>
 80097a0:	6820      	ldr	r0, [r4, #0]
 80097a2:	4401      	add	r1, r0
 80097a4:	1850      	adds	r0, r2, r1
 80097a6:	4283      	cmp	r3, r0
 80097a8:	6011      	str	r1, [r2, #0]
 80097aa:	d1e0      	bne.n	800976e <_free_r+0x22>
 80097ac:	6818      	ldr	r0, [r3, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	6053      	str	r3, [r2, #4]
 80097b2:	4408      	add	r0, r1
 80097b4:	6010      	str	r0, [r2, #0]
 80097b6:	e7da      	b.n	800976e <_free_r+0x22>
 80097b8:	d902      	bls.n	80097c0 <_free_r+0x74>
 80097ba:	230c      	movs	r3, #12
 80097bc:	602b      	str	r3, [r5, #0]
 80097be:	e7d6      	b.n	800976e <_free_r+0x22>
 80097c0:	6820      	ldr	r0, [r4, #0]
 80097c2:	1821      	adds	r1, r4, r0
 80097c4:	428b      	cmp	r3, r1
 80097c6:	bf04      	itt	eq
 80097c8:	6819      	ldreq	r1, [r3, #0]
 80097ca:	685b      	ldreq	r3, [r3, #4]
 80097cc:	6063      	str	r3, [r4, #4]
 80097ce:	bf04      	itt	eq
 80097d0:	1809      	addeq	r1, r1, r0
 80097d2:	6021      	streq	r1, [r4, #0]
 80097d4:	6054      	str	r4, [r2, #4]
 80097d6:	e7ca      	b.n	800976e <_free_r+0x22>
 80097d8:	bd38      	pop	{r3, r4, r5, pc}
 80097da:	bf00      	nop
 80097dc:	24000ab4 	.word	0x24000ab4

080097e0 <sbrk_aligned>:
 80097e0:	b570      	push	{r4, r5, r6, lr}
 80097e2:	4e0f      	ldr	r6, [pc, #60]	@ (8009820 <sbrk_aligned+0x40>)
 80097e4:	460c      	mov	r4, r1
 80097e6:	6831      	ldr	r1, [r6, #0]
 80097e8:	4605      	mov	r5, r0
 80097ea:	b911      	cbnz	r1, 80097f2 <sbrk_aligned+0x12>
 80097ec:	f000 fba6 	bl	8009f3c <_sbrk_r>
 80097f0:	6030      	str	r0, [r6, #0]
 80097f2:	4621      	mov	r1, r4
 80097f4:	4628      	mov	r0, r5
 80097f6:	f000 fba1 	bl	8009f3c <_sbrk_r>
 80097fa:	1c43      	adds	r3, r0, #1
 80097fc:	d103      	bne.n	8009806 <sbrk_aligned+0x26>
 80097fe:	f04f 34ff 	mov.w	r4, #4294967295
 8009802:	4620      	mov	r0, r4
 8009804:	bd70      	pop	{r4, r5, r6, pc}
 8009806:	1cc4      	adds	r4, r0, #3
 8009808:	f024 0403 	bic.w	r4, r4, #3
 800980c:	42a0      	cmp	r0, r4
 800980e:	d0f8      	beq.n	8009802 <sbrk_aligned+0x22>
 8009810:	1a21      	subs	r1, r4, r0
 8009812:	4628      	mov	r0, r5
 8009814:	f000 fb92 	bl	8009f3c <_sbrk_r>
 8009818:	3001      	adds	r0, #1
 800981a:	d1f2      	bne.n	8009802 <sbrk_aligned+0x22>
 800981c:	e7ef      	b.n	80097fe <sbrk_aligned+0x1e>
 800981e:	bf00      	nop
 8009820:	24000ab0 	.word	0x24000ab0

08009824 <_malloc_r>:
 8009824:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009828:	1ccd      	adds	r5, r1, #3
 800982a:	f025 0503 	bic.w	r5, r5, #3
 800982e:	3508      	adds	r5, #8
 8009830:	2d0c      	cmp	r5, #12
 8009832:	bf38      	it	cc
 8009834:	250c      	movcc	r5, #12
 8009836:	2d00      	cmp	r5, #0
 8009838:	4606      	mov	r6, r0
 800983a:	db01      	blt.n	8009840 <_malloc_r+0x1c>
 800983c:	42a9      	cmp	r1, r5
 800983e:	d904      	bls.n	800984a <_malloc_r+0x26>
 8009840:	230c      	movs	r3, #12
 8009842:	6033      	str	r3, [r6, #0]
 8009844:	2000      	movs	r0, #0
 8009846:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800984a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009920 <_malloc_r+0xfc>
 800984e:	f000 f869 	bl	8009924 <__malloc_lock>
 8009852:	f8d8 3000 	ldr.w	r3, [r8]
 8009856:	461c      	mov	r4, r3
 8009858:	bb44      	cbnz	r4, 80098ac <_malloc_r+0x88>
 800985a:	4629      	mov	r1, r5
 800985c:	4630      	mov	r0, r6
 800985e:	f7ff ffbf 	bl	80097e0 <sbrk_aligned>
 8009862:	1c43      	adds	r3, r0, #1
 8009864:	4604      	mov	r4, r0
 8009866:	d158      	bne.n	800991a <_malloc_r+0xf6>
 8009868:	f8d8 4000 	ldr.w	r4, [r8]
 800986c:	4627      	mov	r7, r4
 800986e:	2f00      	cmp	r7, #0
 8009870:	d143      	bne.n	80098fa <_malloc_r+0xd6>
 8009872:	2c00      	cmp	r4, #0
 8009874:	d04b      	beq.n	800990e <_malloc_r+0xea>
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	4639      	mov	r1, r7
 800987a:	4630      	mov	r0, r6
 800987c:	eb04 0903 	add.w	r9, r4, r3
 8009880:	f000 fb5c 	bl	8009f3c <_sbrk_r>
 8009884:	4581      	cmp	r9, r0
 8009886:	d142      	bne.n	800990e <_malloc_r+0xea>
 8009888:	6821      	ldr	r1, [r4, #0]
 800988a:	1a6d      	subs	r5, r5, r1
 800988c:	4629      	mov	r1, r5
 800988e:	4630      	mov	r0, r6
 8009890:	f7ff ffa6 	bl	80097e0 <sbrk_aligned>
 8009894:	3001      	adds	r0, #1
 8009896:	d03a      	beq.n	800990e <_malloc_r+0xea>
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	442b      	add	r3, r5
 800989c:	6023      	str	r3, [r4, #0]
 800989e:	f8d8 3000 	ldr.w	r3, [r8]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	bb62      	cbnz	r2, 8009900 <_malloc_r+0xdc>
 80098a6:	f8c8 7000 	str.w	r7, [r8]
 80098aa:	e00f      	b.n	80098cc <_malloc_r+0xa8>
 80098ac:	6822      	ldr	r2, [r4, #0]
 80098ae:	1b52      	subs	r2, r2, r5
 80098b0:	d420      	bmi.n	80098f4 <_malloc_r+0xd0>
 80098b2:	2a0b      	cmp	r2, #11
 80098b4:	d917      	bls.n	80098e6 <_malloc_r+0xc2>
 80098b6:	1961      	adds	r1, r4, r5
 80098b8:	42a3      	cmp	r3, r4
 80098ba:	6025      	str	r5, [r4, #0]
 80098bc:	bf18      	it	ne
 80098be:	6059      	strne	r1, [r3, #4]
 80098c0:	6863      	ldr	r3, [r4, #4]
 80098c2:	bf08      	it	eq
 80098c4:	f8c8 1000 	streq.w	r1, [r8]
 80098c8:	5162      	str	r2, [r4, r5]
 80098ca:	604b      	str	r3, [r1, #4]
 80098cc:	4630      	mov	r0, r6
 80098ce:	f000 f82f 	bl	8009930 <__malloc_unlock>
 80098d2:	f104 000b 	add.w	r0, r4, #11
 80098d6:	1d23      	adds	r3, r4, #4
 80098d8:	f020 0007 	bic.w	r0, r0, #7
 80098dc:	1ac2      	subs	r2, r0, r3
 80098de:	bf1c      	itt	ne
 80098e0:	1a1b      	subne	r3, r3, r0
 80098e2:	50a3      	strne	r3, [r4, r2]
 80098e4:	e7af      	b.n	8009846 <_malloc_r+0x22>
 80098e6:	6862      	ldr	r2, [r4, #4]
 80098e8:	42a3      	cmp	r3, r4
 80098ea:	bf0c      	ite	eq
 80098ec:	f8c8 2000 	streq.w	r2, [r8]
 80098f0:	605a      	strne	r2, [r3, #4]
 80098f2:	e7eb      	b.n	80098cc <_malloc_r+0xa8>
 80098f4:	4623      	mov	r3, r4
 80098f6:	6864      	ldr	r4, [r4, #4]
 80098f8:	e7ae      	b.n	8009858 <_malloc_r+0x34>
 80098fa:	463c      	mov	r4, r7
 80098fc:	687f      	ldr	r7, [r7, #4]
 80098fe:	e7b6      	b.n	800986e <_malloc_r+0x4a>
 8009900:	461a      	mov	r2, r3
 8009902:	685b      	ldr	r3, [r3, #4]
 8009904:	42a3      	cmp	r3, r4
 8009906:	d1fb      	bne.n	8009900 <_malloc_r+0xdc>
 8009908:	2300      	movs	r3, #0
 800990a:	6053      	str	r3, [r2, #4]
 800990c:	e7de      	b.n	80098cc <_malloc_r+0xa8>
 800990e:	230c      	movs	r3, #12
 8009910:	6033      	str	r3, [r6, #0]
 8009912:	4630      	mov	r0, r6
 8009914:	f000 f80c 	bl	8009930 <__malloc_unlock>
 8009918:	e794      	b.n	8009844 <_malloc_r+0x20>
 800991a:	6005      	str	r5, [r0, #0]
 800991c:	e7d6      	b.n	80098cc <_malloc_r+0xa8>
 800991e:	bf00      	nop
 8009920:	24000ab4 	.word	0x24000ab4

08009924 <__malloc_lock>:
 8009924:	4801      	ldr	r0, [pc, #4]	@ (800992c <__malloc_lock+0x8>)
 8009926:	f7ff bf0f 	b.w	8009748 <__retarget_lock_acquire_recursive>
 800992a:	bf00      	nop
 800992c:	24000aac 	.word	0x24000aac

08009930 <__malloc_unlock>:
 8009930:	4801      	ldr	r0, [pc, #4]	@ (8009938 <__malloc_unlock+0x8>)
 8009932:	f7ff bf0a 	b.w	800974a <__retarget_lock_release_recursive>
 8009936:	bf00      	nop
 8009938:	24000aac 	.word	0x24000aac

0800993c <__ssputs_r>:
 800993c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009940:	688e      	ldr	r6, [r1, #8]
 8009942:	461f      	mov	r7, r3
 8009944:	42be      	cmp	r6, r7
 8009946:	680b      	ldr	r3, [r1, #0]
 8009948:	4682      	mov	sl, r0
 800994a:	460c      	mov	r4, r1
 800994c:	4690      	mov	r8, r2
 800994e:	d82d      	bhi.n	80099ac <__ssputs_r+0x70>
 8009950:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009954:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009958:	d026      	beq.n	80099a8 <__ssputs_r+0x6c>
 800995a:	6965      	ldr	r5, [r4, #20]
 800995c:	6909      	ldr	r1, [r1, #16]
 800995e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009962:	eba3 0901 	sub.w	r9, r3, r1
 8009966:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800996a:	1c7b      	adds	r3, r7, #1
 800996c:	444b      	add	r3, r9
 800996e:	106d      	asrs	r5, r5, #1
 8009970:	429d      	cmp	r5, r3
 8009972:	bf38      	it	cc
 8009974:	461d      	movcc	r5, r3
 8009976:	0553      	lsls	r3, r2, #21
 8009978:	d527      	bpl.n	80099ca <__ssputs_r+0x8e>
 800997a:	4629      	mov	r1, r5
 800997c:	f7ff ff52 	bl	8009824 <_malloc_r>
 8009980:	4606      	mov	r6, r0
 8009982:	b360      	cbz	r0, 80099de <__ssputs_r+0xa2>
 8009984:	6921      	ldr	r1, [r4, #16]
 8009986:	464a      	mov	r2, r9
 8009988:	f000 fae8 	bl	8009f5c <memcpy>
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009992:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009996:	81a3      	strh	r3, [r4, #12]
 8009998:	6126      	str	r6, [r4, #16]
 800999a:	6165      	str	r5, [r4, #20]
 800999c:	444e      	add	r6, r9
 800999e:	eba5 0509 	sub.w	r5, r5, r9
 80099a2:	6026      	str	r6, [r4, #0]
 80099a4:	60a5      	str	r5, [r4, #8]
 80099a6:	463e      	mov	r6, r7
 80099a8:	42be      	cmp	r6, r7
 80099aa:	d900      	bls.n	80099ae <__ssputs_r+0x72>
 80099ac:	463e      	mov	r6, r7
 80099ae:	6820      	ldr	r0, [r4, #0]
 80099b0:	4632      	mov	r2, r6
 80099b2:	4641      	mov	r1, r8
 80099b4:	f000 faa8 	bl	8009f08 <memmove>
 80099b8:	68a3      	ldr	r3, [r4, #8]
 80099ba:	1b9b      	subs	r3, r3, r6
 80099bc:	60a3      	str	r3, [r4, #8]
 80099be:	6823      	ldr	r3, [r4, #0]
 80099c0:	4433      	add	r3, r6
 80099c2:	6023      	str	r3, [r4, #0]
 80099c4:	2000      	movs	r0, #0
 80099c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099ca:	462a      	mov	r2, r5
 80099cc:	f000 fad4 	bl	8009f78 <_realloc_r>
 80099d0:	4606      	mov	r6, r0
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d1e0      	bne.n	8009998 <__ssputs_r+0x5c>
 80099d6:	6921      	ldr	r1, [r4, #16]
 80099d8:	4650      	mov	r0, sl
 80099da:	f7ff feb7 	bl	800974c <_free_r>
 80099de:	230c      	movs	r3, #12
 80099e0:	f8ca 3000 	str.w	r3, [sl]
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099ea:	81a3      	strh	r3, [r4, #12]
 80099ec:	f04f 30ff 	mov.w	r0, #4294967295
 80099f0:	e7e9      	b.n	80099c6 <__ssputs_r+0x8a>
	...

080099f4 <_svfiprintf_r>:
 80099f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099f8:	4698      	mov	r8, r3
 80099fa:	898b      	ldrh	r3, [r1, #12]
 80099fc:	061b      	lsls	r3, r3, #24
 80099fe:	b09d      	sub	sp, #116	@ 0x74
 8009a00:	4607      	mov	r7, r0
 8009a02:	460d      	mov	r5, r1
 8009a04:	4614      	mov	r4, r2
 8009a06:	d510      	bpl.n	8009a2a <_svfiprintf_r+0x36>
 8009a08:	690b      	ldr	r3, [r1, #16]
 8009a0a:	b973      	cbnz	r3, 8009a2a <_svfiprintf_r+0x36>
 8009a0c:	2140      	movs	r1, #64	@ 0x40
 8009a0e:	f7ff ff09 	bl	8009824 <_malloc_r>
 8009a12:	6028      	str	r0, [r5, #0]
 8009a14:	6128      	str	r0, [r5, #16]
 8009a16:	b930      	cbnz	r0, 8009a26 <_svfiprintf_r+0x32>
 8009a18:	230c      	movs	r3, #12
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a20:	b01d      	add	sp, #116	@ 0x74
 8009a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a26:	2340      	movs	r3, #64	@ 0x40
 8009a28:	616b      	str	r3, [r5, #20]
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a2e:	2320      	movs	r3, #32
 8009a30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a34:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a38:	2330      	movs	r3, #48	@ 0x30
 8009a3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009bd8 <_svfiprintf_r+0x1e4>
 8009a3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a42:	f04f 0901 	mov.w	r9, #1
 8009a46:	4623      	mov	r3, r4
 8009a48:	469a      	mov	sl, r3
 8009a4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a4e:	b10a      	cbz	r2, 8009a54 <_svfiprintf_r+0x60>
 8009a50:	2a25      	cmp	r2, #37	@ 0x25
 8009a52:	d1f9      	bne.n	8009a48 <_svfiprintf_r+0x54>
 8009a54:	ebba 0b04 	subs.w	fp, sl, r4
 8009a58:	d00b      	beq.n	8009a72 <_svfiprintf_r+0x7e>
 8009a5a:	465b      	mov	r3, fp
 8009a5c:	4622      	mov	r2, r4
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4638      	mov	r0, r7
 8009a62:	f7ff ff6b 	bl	800993c <__ssputs_r>
 8009a66:	3001      	adds	r0, #1
 8009a68:	f000 80a7 	beq.w	8009bba <_svfiprintf_r+0x1c6>
 8009a6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a6e:	445a      	add	r2, fp
 8009a70:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a72:	f89a 3000 	ldrb.w	r3, [sl]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	f000 809f 	beq.w	8009bba <_svfiprintf_r+0x1c6>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8009a82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a86:	f10a 0a01 	add.w	sl, sl, #1
 8009a8a:	9304      	str	r3, [sp, #16]
 8009a8c:	9307      	str	r3, [sp, #28]
 8009a8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a92:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a94:	4654      	mov	r4, sl
 8009a96:	2205      	movs	r2, #5
 8009a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a9c:	484e      	ldr	r0, [pc, #312]	@ (8009bd8 <_svfiprintf_r+0x1e4>)
 8009a9e:	f7f6 fc27 	bl	80002f0 <memchr>
 8009aa2:	9a04      	ldr	r2, [sp, #16]
 8009aa4:	b9d8      	cbnz	r0, 8009ade <_svfiprintf_r+0xea>
 8009aa6:	06d0      	lsls	r0, r2, #27
 8009aa8:	bf44      	itt	mi
 8009aaa:	2320      	movmi	r3, #32
 8009aac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ab0:	0711      	lsls	r1, r2, #28
 8009ab2:	bf44      	itt	mi
 8009ab4:	232b      	movmi	r3, #43	@ 0x2b
 8009ab6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aba:	f89a 3000 	ldrb.w	r3, [sl]
 8009abe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ac0:	d015      	beq.n	8009aee <_svfiprintf_r+0xfa>
 8009ac2:	9a07      	ldr	r2, [sp, #28]
 8009ac4:	4654      	mov	r4, sl
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	f04f 0c0a 	mov.w	ip, #10
 8009acc:	4621      	mov	r1, r4
 8009ace:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ad2:	3b30      	subs	r3, #48	@ 0x30
 8009ad4:	2b09      	cmp	r3, #9
 8009ad6:	d94b      	bls.n	8009b70 <_svfiprintf_r+0x17c>
 8009ad8:	b1b0      	cbz	r0, 8009b08 <_svfiprintf_r+0x114>
 8009ada:	9207      	str	r2, [sp, #28]
 8009adc:	e014      	b.n	8009b08 <_svfiprintf_r+0x114>
 8009ade:	eba0 0308 	sub.w	r3, r0, r8
 8009ae2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ae6:	4313      	orrs	r3, r2
 8009ae8:	9304      	str	r3, [sp, #16]
 8009aea:	46a2      	mov	sl, r4
 8009aec:	e7d2      	b.n	8009a94 <_svfiprintf_r+0xa0>
 8009aee:	9b03      	ldr	r3, [sp, #12]
 8009af0:	1d19      	adds	r1, r3, #4
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	9103      	str	r1, [sp, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	bfbb      	ittet	lt
 8009afa:	425b      	neglt	r3, r3
 8009afc:	f042 0202 	orrlt.w	r2, r2, #2
 8009b00:	9307      	strge	r3, [sp, #28]
 8009b02:	9307      	strlt	r3, [sp, #28]
 8009b04:	bfb8      	it	lt
 8009b06:	9204      	strlt	r2, [sp, #16]
 8009b08:	7823      	ldrb	r3, [r4, #0]
 8009b0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b0c:	d10a      	bne.n	8009b24 <_svfiprintf_r+0x130>
 8009b0e:	7863      	ldrb	r3, [r4, #1]
 8009b10:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b12:	d132      	bne.n	8009b7a <_svfiprintf_r+0x186>
 8009b14:	9b03      	ldr	r3, [sp, #12]
 8009b16:	1d1a      	adds	r2, r3, #4
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	9203      	str	r2, [sp, #12]
 8009b1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b20:	3402      	adds	r4, #2
 8009b22:	9305      	str	r3, [sp, #20]
 8009b24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009be8 <_svfiprintf_r+0x1f4>
 8009b28:	7821      	ldrb	r1, [r4, #0]
 8009b2a:	2203      	movs	r2, #3
 8009b2c:	4650      	mov	r0, sl
 8009b2e:	f7f6 fbdf 	bl	80002f0 <memchr>
 8009b32:	b138      	cbz	r0, 8009b44 <_svfiprintf_r+0x150>
 8009b34:	9b04      	ldr	r3, [sp, #16]
 8009b36:	eba0 000a 	sub.w	r0, r0, sl
 8009b3a:	2240      	movs	r2, #64	@ 0x40
 8009b3c:	4082      	lsls	r2, r0
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	3401      	adds	r4, #1
 8009b42:	9304      	str	r3, [sp, #16]
 8009b44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b48:	4824      	ldr	r0, [pc, #144]	@ (8009bdc <_svfiprintf_r+0x1e8>)
 8009b4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b4e:	2206      	movs	r2, #6
 8009b50:	f7f6 fbce 	bl	80002f0 <memchr>
 8009b54:	2800      	cmp	r0, #0
 8009b56:	d036      	beq.n	8009bc6 <_svfiprintf_r+0x1d2>
 8009b58:	4b21      	ldr	r3, [pc, #132]	@ (8009be0 <_svfiprintf_r+0x1ec>)
 8009b5a:	bb1b      	cbnz	r3, 8009ba4 <_svfiprintf_r+0x1b0>
 8009b5c:	9b03      	ldr	r3, [sp, #12]
 8009b5e:	3307      	adds	r3, #7
 8009b60:	f023 0307 	bic.w	r3, r3, #7
 8009b64:	3308      	adds	r3, #8
 8009b66:	9303      	str	r3, [sp, #12]
 8009b68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b6a:	4433      	add	r3, r6
 8009b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b6e:	e76a      	b.n	8009a46 <_svfiprintf_r+0x52>
 8009b70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b74:	460c      	mov	r4, r1
 8009b76:	2001      	movs	r0, #1
 8009b78:	e7a8      	b.n	8009acc <_svfiprintf_r+0xd8>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	3401      	adds	r4, #1
 8009b7e:	9305      	str	r3, [sp, #20]
 8009b80:	4619      	mov	r1, r3
 8009b82:	f04f 0c0a 	mov.w	ip, #10
 8009b86:	4620      	mov	r0, r4
 8009b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b8c:	3a30      	subs	r2, #48	@ 0x30
 8009b8e:	2a09      	cmp	r2, #9
 8009b90:	d903      	bls.n	8009b9a <_svfiprintf_r+0x1a6>
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0c6      	beq.n	8009b24 <_svfiprintf_r+0x130>
 8009b96:	9105      	str	r1, [sp, #20]
 8009b98:	e7c4      	b.n	8009b24 <_svfiprintf_r+0x130>
 8009b9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b9e:	4604      	mov	r4, r0
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e7f0      	b.n	8009b86 <_svfiprintf_r+0x192>
 8009ba4:	ab03      	add	r3, sp, #12
 8009ba6:	9300      	str	r3, [sp, #0]
 8009ba8:	462a      	mov	r2, r5
 8009baa:	4b0e      	ldr	r3, [pc, #56]	@ (8009be4 <_svfiprintf_r+0x1f0>)
 8009bac:	a904      	add	r1, sp, #16
 8009bae:	4638      	mov	r0, r7
 8009bb0:	f3af 8000 	nop.w
 8009bb4:	1c42      	adds	r2, r0, #1
 8009bb6:	4606      	mov	r6, r0
 8009bb8:	d1d6      	bne.n	8009b68 <_svfiprintf_r+0x174>
 8009bba:	89ab      	ldrh	r3, [r5, #12]
 8009bbc:	065b      	lsls	r3, r3, #25
 8009bbe:	f53f af2d 	bmi.w	8009a1c <_svfiprintf_r+0x28>
 8009bc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bc4:	e72c      	b.n	8009a20 <_svfiprintf_r+0x2c>
 8009bc6:	ab03      	add	r3, sp, #12
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	462a      	mov	r2, r5
 8009bcc:	4b05      	ldr	r3, [pc, #20]	@ (8009be4 <_svfiprintf_r+0x1f0>)
 8009bce:	a904      	add	r1, sp, #16
 8009bd0:	4638      	mov	r0, r7
 8009bd2:	f000 f879 	bl	8009cc8 <_printf_i>
 8009bd6:	e7ed      	b.n	8009bb4 <_svfiprintf_r+0x1c0>
 8009bd8:	0800a080 	.word	0x0800a080
 8009bdc:	0800a08a 	.word	0x0800a08a
 8009be0:	00000000 	.word	0x00000000
 8009be4:	0800993d 	.word	0x0800993d
 8009be8:	0800a086 	.word	0x0800a086

08009bec <_printf_common>:
 8009bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bf0:	4616      	mov	r6, r2
 8009bf2:	4698      	mov	r8, r3
 8009bf4:	688a      	ldr	r2, [r1, #8]
 8009bf6:	690b      	ldr	r3, [r1, #16]
 8009bf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	bfb8      	it	lt
 8009c00:	4613      	movlt	r3, r2
 8009c02:	6033      	str	r3, [r6, #0]
 8009c04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c08:	4607      	mov	r7, r0
 8009c0a:	460c      	mov	r4, r1
 8009c0c:	b10a      	cbz	r2, 8009c12 <_printf_common+0x26>
 8009c0e:	3301      	adds	r3, #1
 8009c10:	6033      	str	r3, [r6, #0]
 8009c12:	6823      	ldr	r3, [r4, #0]
 8009c14:	0699      	lsls	r1, r3, #26
 8009c16:	bf42      	ittt	mi
 8009c18:	6833      	ldrmi	r3, [r6, #0]
 8009c1a:	3302      	addmi	r3, #2
 8009c1c:	6033      	strmi	r3, [r6, #0]
 8009c1e:	6825      	ldr	r5, [r4, #0]
 8009c20:	f015 0506 	ands.w	r5, r5, #6
 8009c24:	d106      	bne.n	8009c34 <_printf_common+0x48>
 8009c26:	f104 0a19 	add.w	sl, r4, #25
 8009c2a:	68e3      	ldr	r3, [r4, #12]
 8009c2c:	6832      	ldr	r2, [r6, #0]
 8009c2e:	1a9b      	subs	r3, r3, r2
 8009c30:	42ab      	cmp	r3, r5
 8009c32:	dc26      	bgt.n	8009c82 <_printf_common+0x96>
 8009c34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c38:	6822      	ldr	r2, [r4, #0]
 8009c3a:	3b00      	subs	r3, #0
 8009c3c:	bf18      	it	ne
 8009c3e:	2301      	movne	r3, #1
 8009c40:	0692      	lsls	r2, r2, #26
 8009c42:	d42b      	bmi.n	8009c9c <_printf_common+0xb0>
 8009c44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c48:	4641      	mov	r1, r8
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	47c8      	blx	r9
 8009c4e:	3001      	adds	r0, #1
 8009c50:	d01e      	beq.n	8009c90 <_printf_common+0xa4>
 8009c52:	6823      	ldr	r3, [r4, #0]
 8009c54:	6922      	ldr	r2, [r4, #16]
 8009c56:	f003 0306 	and.w	r3, r3, #6
 8009c5a:	2b04      	cmp	r3, #4
 8009c5c:	bf02      	ittt	eq
 8009c5e:	68e5      	ldreq	r5, [r4, #12]
 8009c60:	6833      	ldreq	r3, [r6, #0]
 8009c62:	1aed      	subeq	r5, r5, r3
 8009c64:	68a3      	ldr	r3, [r4, #8]
 8009c66:	bf0c      	ite	eq
 8009c68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c6c:	2500      	movne	r5, #0
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	bfc4      	itt	gt
 8009c72:	1a9b      	subgt	r3, r3, r2
 8009c74:	18ed      	addgt	r5, r5, r3
 8009c76:	2600      	movs	r6, #0
 8009c78:	341a      	adds	r4, #26
 8009c7a:	42b5      	cmp	r5, r6
 8009c7c:	d11a      	bne.n	8009cb4 <_printf_common+0xc8>
 8009c7e:	2000      	movs	r0, #0
 8009c80:	e008      	b.n	8009c94 <_printf_common+0xa8>
 8009c82:	2301      	movs	r3, #1
 8009c84:	4652      	mov	r2, sl
 8009c86:	4641      	mov	r1, r8
 8009c88:	4638      	mov	r0, r7
 8009c8a:	47c8      	blx	r9
 8009c8c:	3001      	adds	r0, #1
 8009c8e:	d103      	bne.n	8009c98 <_printf_common+0xac>
 8009c90:	f04f 30ff 	mov.w	r0, #4294967295
 8009c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c98:	3501      	adds	r5, #1
 8009c9a:	e7c6      	b.n	8009c2a <_printf_common+0x3e>
 8009c9c:	18e1      	adds	r1, r4, r3
 8009c9e:	1c5a      	adds	r2, r3, #1
 8009ca0:	2030      	movs	r0, #48	@ 0x30
 8009ca2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ca6:	4422      	add	r2, r4
 8009ca8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009cac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009cb0:	3302      	adds	r3, #2
 8009cb2:	e7c7      	b.n	8009c44 <_printf_common+0x58>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	4622      	mov	r2, r4
 8009cb8:	4641      	mov	r1, r8
 8009cba:	4638      	mov	r0, r7
 8009cbc:	47c8      	blx	r9
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	d0e6      	beq.n	8009c90 <_printf_common+0xa4>
 8009cc2:	3601      	adds	r6, #1
 8009cc4:	e7d9      	b.n	8009c7a <_printf_common+0x8e>
	...

08009cc8 <_printf_i>:
 8009cc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ccc:	7e0f      	ldrb	r7, [r1, #24]
 8009cce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009cd0:	2f78      	cmp	r7, #120	@ 0x78
 8009cd2:	4691      	mov	r9, r2
 8009cd4:	4680      	mov	r8, r0
 8009cd6:	460c      	mov	r4, r1
 8009cd8:	469a      	mov	sl, r3
 8009cda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009cde:	d807      	bhi.n	8009cf0 <_printf_i+0x28>
 8009ce0:	2f62      	cmp	r7, #98	@ 0x62
 8009ce2:	d80a      	bhi.n	8009cfa <_printf_i+0x32>
 8009ce4:	2f00      	cmp	r7, #0
 8009ce6:	f000 80d2 	beq.w	8009e8e <_printf_i+0x1c6>
 8009cea:	2f58      	cmp	r7, #88	@ 0x58
 8009cec:	f000 80b9 	beq.w	8009e62 <_printf_i+0x19a>
 8009cf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009cf8:	e03a      	b.n	8009d70 <_printf_i+0xa8>
 8009cfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009cfe:	2b15      	cmp	r3, #21
 8009d00:	d8f6      	bhi.n	8009cf0 <_printf_i+0x28>
 8009d02:	a101      	add	r1, pc, #4	@ (adr r1, 8009d08 <_printf_i+0x40>)
 8009d04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d08:	08009d61 	.word	0x08009d61
 8009d0c:	08009d75 	.word	0x08009d75
 8009d10:	08009cf1 	.word	0x08009cf1
 8009d14:	08009cf1 	.word	0x08009cf1
 8009d18:	08009cf1 	.word	0x08009cf1
 8009d1c:	08009cf1 	.word	0x08009cf1
 8009d20:	08009d75 	.word	0x08009d75
 8009d24:	08009cf1 	.word	0x08009cf1
 8009d28:	08009cf1 	.word	0x08009cf1
 8009d2c:	08009cf1 	.word	0x08009cf1
 8009d30:	08009cf1 	.word	0x08009cf1
 8009d34:	08009e75 	.word	0x08009e75
 8009d38:	08009d9f 	.word	0x08009d9f
 8009d3c:	08009e2f 	.word	0x08009e2f
 8009d40:	08009cf1 	.word	0x08009cf1
 8009d44:	08009cf1 	.word	0x08009cf1
 8009d48:	08009e97 	.word	0x08009e97
 8009d4c:	08009cf1 	.word	0x08009cf1
 8009d50:	08009d9f 	.word	0x08009d9f
 8009d54:	08009cf1 	.word	0x08009cf1
 8009d58:	08009cf1 	.word	0x08009cf1
 8009d5c:	08009e37 	.word	0x08009e37
 8009d60:	6833      	ldr	r3, [r6, #0]
 8009d62:	1d1a      	adds	r2, r3, #4
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	6032      	str	r2, [r6, #0]
 8009d68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d70:	2301      	movs	r3, #1
 8009d72:	e09d      	b.n	8009eb0 <_printf_i+0x1e8>
 8009d74:	6833      	ldr	r3, [r6, #0]
 8009d76:	6820      	ldr	r0, [r4, #0]
 8009d78:	1d19      	adds	r1, r3, #4
 8009d7a:	6031      	str	r1, [r6, #0]
 8009d7c:	0606      	lsls	r6, r0, #24
 8009d7e:	d501      	bpl.n	8009d84 <_printf_i+0xbc>
 8009d80:	681d      	ldr	r5, [r3, #0]
 8009d82:	e003      	b.n	8009d8c <_printf_i+0xc4>
 8009d84:	0645      	lsls	r5, r0, #25
 8009d86:	d5fb      	bpl.n	8009d80 <_printf_i+0xb8>
 8009d88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d8c:	2d00      	cmp	r5, #0
 8009d8e:	da03      	bge.n	8009d98 <_printf_i+0xd0>
 8009d90:	232d      	movs	r3, #45	@ 0x2d
 8009d92:	426d      	negs	r5, r5
 8009d94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d98:	4859      	ldr	r0, [pc, #356]	@ (8009f00 <_printf_i+0x238>)
 8009d9a:	230a      	movs	r3, #10
 8009d9c:	e011      	b.n	8009dc2 <_printf_i+0xfa>
 8009d9e:	6821      	ldr	r1, [r4, #0]
 8009da0:	6833      	ldr	r3, [r6, #0]
 8009da2:	0608      	lsls	r0, r1, #24
 8009da4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009da8:	d402      	bmi.n	8009db0 <_printf_i+0xe8>
 8009daa:	0649      	lsls	r1, r1, #25
 8009dac:	bf48      	it	mi
 8009dae:	b2ad      	uxthmi	r5, r5
 8009db0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009db2:	4853      	ldr	r0, [pc, #332]	@ (8009f00 <_printf_i+0x238>)
 8009db4:	6033      	str	r3, [r6, #0]
 8009db6:	bf14      	ite	ne
 8009db8:	230a      	movne	r3, #10
 8009dba:	2308      	moveq	r3, #8
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009dc2:	6866      	ldr	r6, [r4, #4]
 8009dc4:	60a6      	str	r6, [r4, #8]
 8009dc6:	2e00      	cmp	r6, #0
 8009dc8:	bfa2      	ittt	ge
 8009dca:	6821      	ldrge	r1, [r4, #0]
 8009dcc:	f021 0104 	bicge.w	r1, r1, #4
 8009dd0:	6021      	strge	r1, [r4, #0]
 8009dd2:	b90d      	cbnz	r5, 8009dd8 <_printf_i+0x110>
 8009dd4:	2e00      	cmp	r6, #0
 8009dd6:	d04b      	beq.n	8009e70 <_printf_i+0x1a8>
 8009dd8:	4616      	mov	r6, r2
 8009dda:	fbb5 f1f3 	udiv	r1, r5, r3
 8009dde:	fb03 5711 	mls	r7, r3, r1, r5
 8009de2:	5dc7      	ldrb	r7, [r0, r7]
 8009de4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009de8:	462f      	mov	r7, r5
 8009dea:	42bb      	cmp	r3, r7
 8009dec:	460d      	mov	r5, r1
 8009dee:	d9f4      	bls.n	8009dda <_printf_i+0x112>
 8009df0:	2b08      	cmp	r3, #8
 8009df2:	d10b      	bne.n	8009e0c <_printf_i+0x144>
 8009df4:	6823      	ldr	r3, [r4, #0]
 8009df6:	07df      	lsls	r7, r3, #31
 8009df8:	d508      	bpl.n	8009e0c <_printf_i+0x144>
 8009dfa:	6923      	ldr	r3, [r4, #16]
 8009dfc:	6861      	ldr	r1, [r4, #4]
 8009dfe:	4299      	cmp	r1, r3
 8009e00:	bfde      	ittt	le
 8009e02:	2330      	movle	r3, #48	@ 0x30
 8009e04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009e0c:	1b92      	subs	r2, r2, r6
 8009e0e:	6122      	str	r2, [r4, #16]
 8009e10:	f8cd a000 	str.w	sl, [sp]
 8009e14:	464b      	mov	r3, r9
 8009e16:	aa03      	add	r2, sp, #12
 8009e18:	4621      	mov	r1, r4
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	f7ff fee6 	bl	8009bec <_printf_common>
 8009e20:	3001      	adds	r0, #1
 8009e22:	d14a      	bne.n	8009eba <_printf_i+0x1f2>
 8009e24:	f04f 30ff 	mov.w	r0, #4294967295
 8009e28:	b004      	add	sp, #16
 8009e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e2e:	6823      	ldr	r3, [r4, #0]
 8009e30:	f043 0320 	orr.w	r3, r3, #32
 8009e34:	6023      	str	r3, [r4, #0]
 8009e36:	4833      	ldr	r0, [pc, #204]	@ (8009f04 <_printf_i+0x23c>)
 8009e38:	2778      	movs	r7, #120	@ 0x78
 8009e3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e3e:	6823      	ldr	r3, [r4, #0]
 8009e40:	6831      	ldr	r1, [r6, #0]
 8009e42:	061f      	lsls	r7, r3, #24
 8009e44:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e48:	d402      	bmi.n	8009e50 <_printf_i+0x188>
 8009e4a:	065f      	lsls	r7, r3, #25
 8009e4c:	bf48      	it	mi
 8009e4e:	b2ad      	uxthmi	r5, r5
 8009e50:	6031      	str	r1, [r6, #0]
 8009e52:	07d9      	lsls	r1, r3, #31
 8009e54:	bf44      	itt	mi
 8009e56:	f043 0320 	orrmi.w	r3, r3, #32
 8009e5a:	6023      	strmi	r3, [r4, #0]
 8009e5c:	b11d      	cbz	r5, 8009e66 <_printf_i+0x19e>
 8009e5e:	2310      	movs	r3, #16
 8009e60:	e7ac      	b.n	8009dbc <_printf_i+0xf4>
 8009e62:	4827      	ldr	r0, [pc, #156]	@ (8009f00 <_printf_i+0x238>)
 8009e64:	e7e9      	b.n	8009e3a <_printf_i+0x172>
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	f023 0320 	bic.w	r3, r3, #32
 8009e6c:	6023      	str	r3, [r4, #0]
 8009e6e:	e7f6      	b.n	8009e5e <_printf_i+0x196>
 8009e70:	4616      	mov	r6, r2
 8009e72:	e7bd      	b.n	8009df0 <_printf_i+0x128>
 8009e74:	6833      	ldr	r3, [r6, #0]
 8009e76:	6825      	ldr	r5, [r4, #0]
 8009e78:	6961      	ldr	r1, [r4, #20]
 8009e7a:	1d18      	adds	r0, r3, #4
 8009e7c:	6030      	str	r0, [r6, #0]
 8009e7e:	062e      	lsls	r6, r5, #24
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	d501      	bpl.n	8009e88 <_printf_i+0x1c0>
 8009e84:	6019      	str	r1, [r3, #0]
 8009e86:	e002      	b.n	8009e8e <_printf_i+0x1c6>
 8009e88:	0668      	lsls	r0, r5, #25
 8009e8a:	d5fb      	bpl.n	8009e84 <_printf_i+0x1bc>
 8009e8c:	8019      	strh	r1, [r3, #0]
 8009e8e:	2300      	movs	r3, #0
 8009e90:	6123      	str	r3, [r4, #16]
 8009e92:	4616      	mov	r6, r2
 8009e94:	e7bc      	b.n	8009e10 <_printf_i+0x148>
 8009e96:	6833      	ldr	r3, [r6, #0]
 8009e98:	1d1a      	adds	r2, r3, #4
 8009e9a:	6032      	str	r2, [r6, #0]
 8009e9c:	681e      	ldr	r6, [r3, #0]
 8009e9e:	6862      	ldr	r2, [r4, #4]
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	f7f6 fa24 	bl	80002f0 <memchr>
 8009ea8:	b108      	cbz	r0, 8009eae <_printf_i+0x1e6>
 8009eaa:	1b80      	subs	r0, r0, r6
 8009eac:	6060      	str	r0, [r4, #4]
 8009eae:	6863      	ldr	r3, [r4, #4]
 8009eb0:	6123      	str	r3, [r4, #16]
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009eb8:	e7aa      	b.n	8009e10 <_printf_i+0x148>
 8009eba:	6923      	ldr	r3, [r4, #16]
 8009ebc:	4632      	mov	r2, r6
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	4640      	mov	r0, r8
 8009ec2:	47d0      	blx	sl
 8009ec4:	3001      	adds	r0, #1
 8009ec6:	d0ad      	beq.n	8009e24 <_printf_i+0x15c>
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	079b      	lsls	r3, r3, #30
 8009ecc:	d413      	bmi.n	8009ef6 <_printf_i+0x22e>
 8009ece:	68e0      	ldr	r0, [r4, #12]
 8009ed0:	9b03      	ldr	r3, [sp, #12]
 8009ed2:	4298      	cmp	r0, r3
 8009ed4:	bfb8      	it	lt
 8009ed6:	4618      	movlt	r0, r3
 8009ed8:	e7a6      	b.n	8009e28 <_printf_i+0x160>
 8009eda:	2301      	movs	r3, #1
 8009edc:	4632      	mov	r2, r6
 8009ede:	4649      	mov	r1, r9
 8009ee0:	4640      	mov	r0, r8
 8009ee2:	47d0      	blx	sl
 8009ee4:	3001      	adds	r0, #1
 8009ee6:	d09d      	beq.n	8009e24 <_printf_i+0x15c>
 8009ee8:	3501      	adds	r5, #1
 8009eea:	68e3      	ldr	r3, [r4, #12]
 8009eec:	9903      	ldr	r1, [sp, #12]
 8009eee:	1a5b      	subs	r3, r3, r1
 8009ef0:	42ab      	cmp	r3, r5
 8009ef2:	dcf2      	bgt.n	8009eda <_printf_i+0x212>
 8009ef4:	e7eb      	b.n	8009ece <_printf_i+0x206>
 8009ef6:	2500      	movs	r5, #0
 8009ef8:	f104 0619 	add.w	r6, r4, #25
 8009efc:	e7f5      	b.n	8009eea <_printf_i+0x222>
 8009efe:	bf00      	nop
 8009f00:	0800a091 	.word	0x0800a091
 8009f04:	0800a0a2 	.word	0x0800a0a2

08009f08 <memmove>:
 8009f08:	4288      	cmp	r0, r1
 8009f0a:	b510      	push	{r4, lr}
 8009f0c:	eb01 0402 	add.w	r4, r1, r2
 8009f10:	d902      	bls.n	8009f18 <memmove+0x10>
 8009f12:	4284      	cmp	r4, r0
 8009f14:	4623      	mov	r3, r4
 8009f16:	d807      	bhi.n	8009f28 <memmove+0x20>
 8009f18:	1e43      	subs	r3, r0, #1
 8009f1a:	42a1      	cmp	r1, r4
 8009f1c:	d008      	beq.n	8009f30 <memmove+0x28>
 8009f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f26:	e7f8      	b.n	8009f1a <memmove+0x12>
 8009f28:	4402      	add	r2, r0
 8009f2a:	4601      	mov	r1, r0
 8009f2c:	428a      	cmp	r2, r1
 8009f2e:	d100      	bne.n	8009f32 <memmove+0x2a>
 8009f30:	bd10      	pop	{r4, pc}
 8009f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f3a:	e7f7      	b.n	8009f2c <memmove+0x24>

08009f3c <_sbrk_r>:
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4d06      	ldr	r5, [pc, #24]	@ (8009f58 <_sbrk_r+0x1c>)
 8009f40:	2300      	movs	r3, #0
 8009f42:	4604      	mov	r4, r0
 8009f44:	4608      	mov	r0, r1
 8009f46:	602b      	str	r3, [r5, #0]
 8009f48:	f7f7 fa92 	bl	8001470 <_sbrk>
 8009f4c:	1c43      	adds	r3, r0, #1
 8009f4e:	d102      	bne.n	8009f56 <_sbrk_r+0x1a>
 8009f50:	682b      	ldr	r3, [r5, #0]
 8009f52:	b103      	cbz	r3, 8009f56 <_sbrk_r+0x1a>
 8009f54:	6023      	str	r3, [r4, #0]
 8009f56:	bd38      	pop	{r3, r4, r5, pc}
 8009f58:	24000aa8 	.word	0x24000aa8

08009f5c <memcpy>:
 8009f5c:	440a      	add	r2, r1
 8009f5e:	4291      	cmp	r1, r2
 8009f60:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f64:	d100      	bne.n	8009f68 <memcpy+0xc>
 8009f66:	4770      	bx	lr
 8009f68:	b510      	push	{r4, lr}
 8009f6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f72:	4291      	cmp	r1, r2
 8009f74:	d1f9      	bne.n	8009f6a <memcpy+0xe>
 8009f76:	bd10      	pop	{r4, pc}

08009f78 <_realloc_r>:
 8009f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f7c:	4680      	mov	r8, r0
 8009f7e:	4615      	mov	r5, r2
 8009f80:	460c      	mov	r4, r1
 8009f82:	b921      	cbnz	r1, 8009f8e <_realloc_r+0x16>
 8009f84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f88:	4611      	mov	r1, r2
 8009f8a:	f7ff bc4b 	b.w	8009824 <_malloc_r>
 8009f8e:	b92a      	cbnz	r2, 8009f9c <_realloc_r+0x24>
 8009f90:	f7ff fbdc 	bl	800974c <_free_r>
 8009f94:	2400      	movs	r4, #0
 8009f96:	4620      	mov	r0, r4
 8009f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f9c:	f000 f81a 	bl	8009fd4 <_malloc_usable_size_r>
 8009fa0:	4285      	cmp	r5, r0
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	d802      	bhi.n	8009fac <_realloc_r+0x34>
 8009fa6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009faa:	d8f4      	bhi.n	8009f96 <_realloc_r+0x1e>
 8009fac:	4629      	mov	r1, r5
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f7ff fc38 	bl	8009824 <_malloc_r>
 8009fb4:	4607      	mov	r7, r0
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d0ec      	beq.n	8009f94 <_realloc_r+0x1c>
 8009fba:	42b5      	cmp	r5, r6
 8009fbc:	462a      	mov	r2, r5
 8009fbe:	4621      	mov	r1, r4
 8009fc0:	bf28      	it	cs
 8009fc2:	4632      	movcs	r2, r6
 8009fc4:	f7ff ffca 	bl	8009f5c <memcpy>
 8009fc8:	4621      	mov	r1, r4
 8009fca:	4640      	mov	r0, r8
 8009fcc:	f7ff fbbe 	bl	800974c <_free_r>
 8009fd0:	463c      	mov	r4, r7
 8009fd2:	e7e0      	b.n	8009f96 <_realloc_r+0x1e>

08009fd4 <_malloc_usable_size_r>:
 8009fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fd8:	1f18      	subs	r0, r3, #4
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	bfbc      	itt	lt
 8009fde:	580b      	ldrlt	r3, [r1, r0]
 8009fe0:	18c0      	addlt	r0, r0, r3
 8009fe2:	4770      	bx	lr

08009fe4 <_init>:
 8009fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe6:	bf00      	nop
 8009fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fea:	bc08      	pop	{r3}
 8009fec:	469e      	mov	lr, r3
 8009fee:	4770      	bx	lr

08009ff0 <_fini>:
 8009ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ff2:	bf00      	nop
 8009ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ff6:	bc08      	pop	{r3}
 8009ff8:	469e      	mov	lr, r3
 8009ffa:	4770      	bx	lr
