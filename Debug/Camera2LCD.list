
Camera2LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a664  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800a904  0800a904  0000b904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a9fc  0800a9fc  0000b9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aa04  0800aa04  0000ba04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800aa08  0800aa08  0000ba08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800aa0c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000064  0800aa70  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000c4  0800aad0  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000099c  24000124  0800ab30  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000ac0  0800ab30  0000cac0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   000275ac  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b8f  00000000  00000000  000336fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c58  00000000  00000000  00038290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001615  00000000  00000000  00039ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003cb6e  00000000  00000000  0003b4fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bae0  00000000  00000000  0007806b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00174575  00000000  00000000  000a3b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002180c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e28  00000000  00000000  00218104  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0021ff2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a8ec 	.word	0x0800a8ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800a8ec 	.word	0x0800a8ec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <OV5640_WriteReg>:
		OV5640_FORMAT_RGB565
};

OV5640_CameraConfig* activeCameraConfigPtr = &activeCameraConfig;

HAL_StatusTypeDef OV5640_WriteReg(uint16_t regAddr, uint8_t data) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af02      	add	r7, sp, #8
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	80fb      	strh	r3, [r7, #6]
 800068c:	4613      	mov	r3, r2
 800068e:	717b      	strb	r3, [r7, #5]
	uint8_t transmitData[3];
	transmitData[0] = (regAddr >> 8);
 8000690:	88fb      	ldrh	r3, [r7, #6]
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	b29b      	uxth	r3, r3
 8000696:	b2db      	uxtb	r3, r3
 8000698:	733b      	strb	r3, [r7, #12]
	transmitData[1] = regAddr & 0xFF;
 800069a:	88fb      	ldrh	r3, [r7, #6]
 800069c:	b2db      	uxtb	r3, r3
 800069e:	737b      	strb	r3, [r7, #13]
	transmitData[2] = data;
 80006a0:	797b      	ldrb	r3, [r7, #5]
 80006a2:	73bb      	strb	r3, [r7, #14]

	return HAL_I2C_Master_Transmit(&hi2c1, OV5640_I2C_ADDR, transmitData, 3,
 80006a4:	f107 020c 	add.w	r2, r7, #12
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2303      	movs	r3, #3
 80006b0:	2178      	movs	r1, #120	@ 0x78
 80006b2:	4804      	ldr	r0, [pc, #16]	@ (80006c4 <OV5640_WriteReg+0x44>)
 80006b4:	f002 ffba 	bl	800362c <HAL_I2C_Master_Transmit>
 80006b8:	4603      	mov	r3, r0
			HAL_MAX_DELAY);

}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	24000284 	.word	0x24000284

080006c8 <OV5640_ReadReg>:

HAL_StatusTypeDef OV5640_ReadReg(uint16_t regAddr, uint8_t *dataPtr) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b09a      	sub	sp, #104	@ 0x68
 80006cc:	af02      	add	r7, sp, #8
 80006ce:	4603      	mov	r3, r0
 80006d0:	6039      	str	r1, [r7, #0]
 80006d2:	80fb      	strh	r3, [r7, #6]
	char buff[25] = "readStart\r\n";
 80006d4:	4a2b      	ldr	r2, [pc, #172]	@ (8000784 <OV5640_ReadReg+0xbc>)
 80006d6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80006da:	ca07      	ldmia	r2, {r0, r1, r2}
 80006dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80006e0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	731a      	strb	r2, [r3, #12]
	HAL_UART_Transmit(&huart3, &buff, sizeof(buff), HAL_MAX_DELAY);
 80006ee:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295
 80006f6:	2219      	movs	r2, #25
 80006f8:	4823      	ldr	r0, [pc, #140]	@ (8000788 <OV5640_ReadReg+0xc0>)
 80006fa:	f008 f835 	bl	8008768 <HAL_UART_Transmit>
	uint8_t transmitData[2];
	transmitData[0] = (regAddr >> 8);
 80006fe:	88fb      	ldrh	r3, [r7, #6]
 8000700:	0a1b      	lsrs	r3, r3, #8
 8000702:	b29b      	uxth	r3, r3
 8000704:	b2db      	uxtb	r3, r3
 8000706:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	transmitData[1] = regAddr & 0xFF;
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, OV5640_I2C_ADDR,
 8000712:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	9300      	str	r3, [sp, #0]
 800071c:	2302      	movs	r3, #2
 800071e:	2178      	movs	r1, #120	@ 0x78
 8000720:	481a      	ldr	r0, [pc, #104]	@ (800078c <OV5640_ReadReg+0xc4>)
 8000722:	f002 ff83 	bl	800362c <HAL_I2C_Master_Transmit>
 8000726:	4603      	mov	r3, r0
 8000728:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			transmitData, 2, HAL_MAX_DELAY);
	char buffStatus[50];
	sprintf(buffStatus, "transmit Status: %d \r\n", status);
 800072c:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4916      	ldr	r1, [pc, #88]	@ (8000790 <OV5640_ReadReg+0xc8>)
 8000736:	4618      	mov	r0, r3
 8000738:	f009 fc38 	bl	8009fac <siprintf>
	HAL_UART_Transmit(&huart3, buffStatus, strlen(buffStatus), HAL_MAX_DELAY);
 800073c:	f107 030c 	add.w	r3, r7, #12
 8000740:	4618      	mov	r0, r3
 8000742:	f7ff fdcd 	bl	80002e0 <strlen>
 8000746:	4603      	mov	r3, r0
 8000748:	b29a      	uxth	r2, r3
 800074a:	f107 010c 	add.w	r1, r7, #12
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	480d      	ldr	r0, [pc, #52]	@ (8000788 <OV5640_ReadReg+0xc0>)
 8000754:	f008 f808 	bl	8008768 <HAL_UART_Transmit>
	if (status != HAL_OK) {
 8000758:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800075c:	2b00      	cmp	r3, #0
 800075e:	d002      	beq.n	8000766 <OV5640_ReadReg+0x9e>
		return status;
 8000760:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8000764:	e009      	b.n	800077a <OV5640_ReadReg+0xb2>
	}
	return HAL_I2C_Master_Receive(&hi2c1, OV5640_I2C_ADDR, dataPtr, 1,
 8000766:	f04f 33ff 	mov.w	r3, #4294967295
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2301      	movs	r3, #1
 800076e:	683a      	ldr	r2, [r7, #0]
 8000770:	2178      	movs	r1, #120	@ 0x78
 8000772:	4806      	ldr	r0, [pc, #24]	@ (800078c <OV5640_ReadReg+0xc4>)
 8000774:	f003 f872 	bl	800385c <HAL_I2C_Master_Receive>
 8000778:	4603      	mov	r3, r0
			HAL_MAX_DELAY);
}
 800077a:	4618      	mov	r0, r3
 800077c:	3760      	adds	r7, #96	@ 0x60
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	0800a91c 	.word	0x0800a91c
 8000788:	240003fc 	.word	0x240003fc
 800078c:	24000284 	.word	0x24000284
 8000790:	0800a904 	.word	0x0800a904

08000794 <OV5640_PowerUpSequence>:
		return HAL_ERROR;
	}

	return HAL_OK;
}
HAL_StatusTypeDef OV5640_PowerUpSequence(void) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 800079a:	200a      	movs	r0, #10
 800079c:	f001 fbd0 	bl	8001f40 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2101      	movs	r1, #1
 80007a4:	480f      	ldr	r0, [pc, #60]	@ (80007e4 <OV5640_PowerUpSequence+0x50>)
 80007a6:	f002 fe8b 	bl	80034c0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80007aa:	2005      	movs	r0, #5
 80007ac:	f001 fbc8 	bl	8001f40 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port, CAMERA_RST_Pin, GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80007b6:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <OV5640_PowerUpSequence+0x54>)
 80007b8:	f002 fe82 	bl	80034c0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80007bc:	2014      	movs	r0, #20
 80007be:	f001 fbbf 	bl	8001f40 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80007c2:	2100      	movs	r1, #0
 80007c4:	4809      	ldr	r0, [pc, #36]	@ (80007ec <OV5640_PowerUpSequence+0x58>)
 80007c6:	f006 fe6b 	bl	80074a0 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 80007ca:	2005      	movs	r0, #5
 80007cc:	f001 fbb8 	bl	8001f40 <HAL_Delay>
	HAL_StatusTypeDef status = OV5640_ConfigureCamera();
 80007d0:	f000 f87c 	bl	80008cc <OV5640_ConfigureCamera>
 80007d4:	4603      	mov	r3, r0
 80007d6:	71fb      	strb	r3, [r7, #7]
	return status;
 80007d8:	79fb      	ldrb	r3, [r7, #7]

}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	58020000 	.word	0x58020000
 80007e8:	58021800 	.word	0x58021800
 80007ec:	240003b0 	.word	0x240003b0

080007f0 <OV5640_SetResolution>:
HAL_StatusTypeDef OV5640_SetResolution(void){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	71fb      	strb	r3, [r7, #7]
	const uint16_t selectedWidth =OV5640_Resolutions[activeCameraConfigPtr->resolution].width;
 80007fa:	4b24      	ldr	r3, [pc, #144]	@ (800088c <OV5640_SetResolution+0x9c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	461a      	mov	r2, r3
 8000802:	4b23      	ldr	r3, [pc, #140]	@ (8000890 <OV5640_SetResolution+0xa0>)
 8000804:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000808:	80bb      	strh	r3, [r7, #4]
	const uint16_t selectedHeight = OV5640_Resolutions[activeCameraConfigPtr->resolution].height;
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <OV5640_SetResolution+0x9c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	4a1f      	ldr	r2, [pc, #124]	@ (8000890 <OV5640_SetResolution+0xa0>)
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	885b      	ldrh	r3, [r3, #2]
 8000818:	807b      	strh	r3, [r7, #2]
	status |= OV5640_WriteReg(OV5640_REG_OUT_WIDTH_H, selectedWidth>>8);
 800081a:	88bb      	ldrh	r3, [r7, #4]
 800081c:	0a1b      	lsrs	r3, r3, #8
 800081e:	b29b      	uxth	r3, r3
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4619      	mov	r1, r3
 8000824:	f643 0008 	movw	r0, #14344	@ 0x3808
 8000828:	f7ff ff2a 	bl	8000680 <OV5640_WriteReg>
 800082c:	4603      	mov	r3, r0
 800082e:	461a      	mov	r2, r3
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	4313      	orrs	r3, r2
 8000834:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_WIDTH_L, selectedWidth&0xFF);
 8000836:	88bb      	ldrh	r3, [r7, #4]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4619      	mov	r1, r3
 800083c:	f643 0009 	movw	r0, #14345	@ 0x3809
 8000840:	f7ff ff1e 	bl	8000680 <OV5640_WriteReg>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4313      	orrs	r3, r2
 800084c:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_HEIGHT_H, selectedHeight>>8);
 800084e:	887b      	ldrh	r3, [r7, #2]
 8000850:	0a1b      	lsrs	r3, r3, #8
 8000852:	b29b      	uxth	r3, r3
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	f643 000a 	movw	r0, #14346	@ 0x380a
 800085c:	f7ff ff10 	bl	8000680 <OV5640_WriteReg>
 8000860:	4603      	mov	r3, r0
 8000862:	461a      	mov	r2, r3
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4313      	orrs	r3, r2
 8000868:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_HEIGHT_L, selectedHeight&0xFF);
 800086a:	887b      	ldrh	r3, [r7, #2]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4619      	mov	r1, r3
 8000870:	f643 000b 	movw	r0, #14347	@ 0x380b
 8000874:	f7ff ff04 	bl	8000680 <OV5640_WriteReg>
 8000878:	4603      	mov	r3, r0
 800087a:	461a      	mov	r2, r3
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4313      	orrs	r3, r2
 8000880:	71fb      	strb	r3, [r7, #7]
	return status;
 8000882:	79fb      	ldrb	r3, [r7, #7]
}
 8000884:	4618      	mov	r0, r3
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	24000000 	.word	0x24000000
 8000890:	0800a974 	.word	0x0800a974

08000894 <OV5640_SetFormat>:
HAL_StatusTypeDef OV5640_SetFormat(void){
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 800089a:	2300      	movs	r3, #0
 800089c:	71fb      	strb	r3, [r7, #7]
	uint8_t formatData= OV5640_Formats[activeCameraConfigPtr->pixelFormat].formatValue;
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <OV5640_SetFormat+0x30>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	785b      	ldrb	r3, [r3, #1]
 80008a4:	461a      	mov	r2, r3
 80008a6:	4b08      	ldr	r3, [pc, #32]	@ (80008c8 <OV5640_SetFormat+0x34>)
 80008a8:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80008ac:	71bb      	strb	r3, [r7, #6]
	status | OV5640_WriteReg(OV5640_REG_FORMAT_CTRL, formatData);
 80008ae:	79bb      	ldrb	r3, [r7, #6]
 80008b0:	4619      	mov	r1, r3
 80008b2:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 80008b6:	f7ff fee3 	bl	8000680 <OV5640_WriteReg>
	return status;
 80008ba:	79fb      	ldrb	r3, [r7, #7]


}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	24000000 	.word	0x24000000
 80008c8:	0800a980 	.word	0x0800a980

080008cc <OV5640_ConfigureCamera>:
HAL_StatusTypeDef OV5640_ConfigureCamera(void){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	75fb      	strb	r3, [r7, #23]
	uint8_t resetValue = 0x0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	75bb      	strb	r3, [r7, #22]

	OV5640_ReadReg(OV5640_SOFTWARE_RESET, &resetValue);
 80008da:	f107 0316 	add.w	r3, r7, #22
 80008de:	4619      	mov	r1, r3
 80008e0:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008e4:	f7ff fef0 	bl	80006c8 <OV5640_ReadReg>
	resetValue |=0x80;
 80008e8:	7dbb      	ldrb	r3, [r7, #22]
 80008ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	75bb      	strb	r3, [r7, #22]
	OV5640_WriteReg(OV5640_SOFTWARE_RESET, resetValue);
 80008f2:	7dbb      	ldrb	r3, [r7, #22]
 80008f4:	4619      	mov	r1, r3
 80008f6:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008fa:	f7ff fec1 	bl	8000680 <OV5640_WriteReg>
	HAL_Delay(10);
 80008fe:	200a      	movs	r0, #10
 8000900:	f001 fb1e 	bl	8001f40 <HAL_Delay>
	resetValue &= ~0x80;
 8000904:	7dbb      	ldrb	r3, [r7, #22]
 8000906:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800090a:	b2db      	uxtb	r3, r3
 800090c:	75bb      	strb	r3, [r7, #22]
	OV5640_WriteReg(OV5640_SOFTWARE_RESET, resetValue);
 800090e:	7dbb      	ldrb	r3, [r7, #22]
 8000910:	4619      	mov	r1, r3
 8000912:	f243 0008 	movw	r0, #12296	@ 0x3008
 8000916:	f7ff feb3 	bl	8000680 <OV5640_WriteReg>
	HAL_Delay(100);
 800091a:	2064      	movs	r0, #100	@ 0x64
 800091c:	f001 fb10 	bl	8001f40 <HAL_Delay>

	status |= OV5640_SetResolution();
 8000920:	f7ff ff66 	bl	80007f0 <OV5640_SetResolution>
 8000924:	4603      	mov	r3, r0
 8000926:	461a      	mov	r2, r3
 8000928:	7dfb      	ldrb	r3, [r7, #23]
 800092a:	4313      	orrs	r3, r2
 800092c:	75fb      	strb	r3, [r7, #23]
	status |= OV5640_SetFormat();
 800092e:	f7ff ffb1 	bl	8000894 <OV5640_SetFormat>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	7dfb      	ldrb	r3, [r7, #23]
 8000938:	4313      	orrs	r3, r2
 800093a:	75fb      	strb	r3, [r7, #23]
	uint8_t result;
	//write format for format control register to make format rgb565

	OV5640_ReadReg(OV5640_REG_FORMAT_CTRL, &result);
 800093c:	f107 0315 	add.w	r3, r7, #21
 8000940:	4619      	mov	r1, r3
 8000942:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 8000946:	f7ff febf 	bl	80006c8 <OV5640_ReadReg>
	char buff3[20];
	sprintf(buff3, "result of format: %d\n\r", result);
 800094a:	7d7b      	ldrb	r3, [r7, #21]
 800094c:	461a      	mov	r2, r3
 800094e:	463b      	mov	r3, r7
 8000950:	490a      	ldr	r1, [pc, #40]	@ (800097c <OV5640_ConfigureCamera+0xb0>)
 8000952:	4618      	mov	r0, r3
 8000954:	f009 fb2a 	bl	8009fac <siprintf>
	HAL_UART_Transmit(&huart3, buff3, strlen(buff3), HAL_MAX_DELAY);
 8000958:	463b      	mov	r3, r7
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fcc0 	bl	80002e0 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	4639      	mov	r1, r7
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <OV5640_ConfigureCamera+0xb4>)
 800096c:	f007 fefc 	bl	8008768 <HAL_UART_Transmit>
	return status;
 8000970:	7dfb      	ldrb	r3, [r7, #23]



}
 8000972:	4618      	mov	r0, r3
 8000974:	3718      	adds	r7, #24
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	0800a938 	.word	0x0800a938
 8000980:	240003fc 	.word	0x240003fc

08000984 <frameCapture>:
void frameCapture(void){
 8000984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000988:	b08e      	sub	sp, #56	@ 0x38
 800098a:	af00      	add	r7, sp, #0
 800098c:	466b      	mov	r3, sp
 800098e:	4698      	mov	r8, r3

	uint16_t width = OV5640_Resolutions[activeCameraConfigPtr->resolution].width;
 8000990:	4b46      	ldr	r3, [pc, #280]	@ (8000aac <frameCapture+0x128>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	461a      	mov	r2, r3
 8000998:	4b45      	ldr	r3, [pc, #276]	@ (8000ab0 <frameCapture+0x12c>)
 800099a:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 800099e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	uint16_t height = OV5640_Resolutions[activeCameraConfigPtr->resolution].height;
 80009a0:	4b42      	ldr	r3, [pc, #264]	@ (8000aac <frameCapture+0x128>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4a42      	ldr	r2, [pc, #264]	@ (8000ab0 <frameCapture+0x12c>)
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	885b      	ldrh	r3, [r3, #2]
 80009ae:	86bb      	strh	r3, [r7, #52]	@ 0x34
	uint8_t pixelSize = OV5640_Formats[activeCameraConfigPtr->pixelFormat].bytesPerPixel;
 80009b0:	4b3e      	ldr	r3, [pc, #248]	@ (8000aac <frameCapture+0x128>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	785b      	ldrb	r3, [r3, #1]
 80009b6:	4a3f      	ldr	r2, [pc, #252]	@ (8000ab4 <frameCapture+0x130>)
 80009b8:	009b      	lsls	r3, r3, #2
 80009ba:	4413      	add	r3, r2
 80009bc:	885b      	ldrh	r3, [r3, #2]
 80009be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	uint8_t frame[width*height*pixelSize];
 80009c2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80009c4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80009c6:	fb02 f303 	mul.w	r3, r2, r3
 80009ca:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80009ce:	fb02 f603 	mul.w	r6, r2, r3
 80009d2:	1e73      	subs	r3, r6, #1
 80009d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009d6:	4632      	mov	r2, r6
 80009d8:	2300      	movs	r3, #0
 80009da:	4614      	mov	r4, r2
 80009dc:	461d      	mov	r5, r3
 80009de:	f04f 0200 	mov.w	r2, #0
 80009e2:	f04f 0300 	mov.w	r3, #0
 80009e6:	00eb      	lsls	r3, r5, #3
 80009e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009ec:	00e2      	lsls	r2, r4, #3
 80009ee:	4632      	mov	r2, r6
 80009f0:	2300      	movs	r3, #0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	f04f 0300 	mov.w	r3, #0
 80009fe:	00cb      	lsls	r3, r1, #3
 8000a00:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a04:	00c2      	lsls	r2, r0, #3
 8000a06:	4633      	mov	r3, r6
 8000a08:	3307      	adds	r3, #7
 8000a0a:	08db      	lsrs	r3, r3, #3
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	ebad 0d03 	sub.w	sp, sp, r3
 8000a12:	466b      	mov	r3, sp
 8000a14:	3300      	adds	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t timeout = HAL_MAX_DELAY;
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    char testBuff[10] = "In Frame\n\r";
 8000a1e:	4a26      	ldr	r2, [pc, #152]	@ (8000ab8 <frameCapture+0x134>)
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a26:	c303      	stmia	r3!, {r0, r1}
 8000a28:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart3, testBuff, strlen(testBuff), HAL_MAX_DELAY);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f7ff fc56 	bl	80002e0 <strlen>
 8000a34:	4603      	mov	r3, r0
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	f107 0114 	add.w	r1, r7, #20
 8000a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a40:	481e      	ldr	r0, [pc, #120]	@ (8000abc <frameCapture+0x138>)
 8000a42:	f007 fe91 	bl	8008768 <HAL_UART_Transmit>
	DCMI->CR |=DCMI_CR_ENABLE;
 8000a46:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <frameCapture+0x13c>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	@ (8000ac0 <frameCapture+0x13c>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a50:	6013      	str	r3, [r2, #0]
	DCMI->CR |=DCMI_CR_CM;
 8000a52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <frameCapture+0x13c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac0 <frameCapture+0x13c>)
 8000a58:	f043 0302 	orr.w	r3, r3, #2
 8000a5c:	6013      	str	r3, [r2, #0]
	DCMI->CR |= DCMI_CR_CAPTURE;
 8000a5e:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <frameCapture+0x13c>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a17      	ldr	r2, [pc, #92]	@ (8000ac0 <frameCapture+0x13c>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6013      	str	r3, [r2, #0]
	if (DCMI->RISR & 0x01<<0){
 8000a6a:	4b15      	ldr	r3, [pc, #84]	@ (8000ac0 <frameCapture+0x13c>)
 8000a6c:	689b      	ldr	r3, [r3, #8]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d014      	beq.n	8000aa0 <frameCapture+0x11c>
		uint32_t pixel = DCMI->DR;
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <frameCapture+0x13c>)
 8000a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a7a:	623b      	str	r3, [r7, #32]
		char buffFrame[20];
		sprintf(buffFrame, "Start of image: %d,\n\r", pixel);
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	6a3a      	ldr	r2, [r7, #32]
 8000a80:	4910      	ldr	r1, [pc, #64]	@ (8000ac4 <frameCapture+0x140>)
 8000a82:	4618      	mov	r0, r3
 8000a84:	f009 fa92 	bl	8009fac <siprintf>
		HAL_UART_Transmit(&huart3, buffFrame, strlen(buffFrame),HAL_MAX_DELAY);
 8000a88:	463b      	mov	r3, r7
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fc28 	bl	80002e0 <strlen>
 8000a90:	4603      	mov	r3, r0
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	4639      	mov	r1, r7
 8000a96:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9a:	4808      	ldr	r0, [pc, #32]	@ (8000abc <frameCapture+0x138>)
 8000a9c:	f007 fe64 	bl	8008768 <HAL_UART_Transmit>
 8000aa0:	46c5      	mov	sp, r8
	}

}
 8000aa2:	bf00      	nop
 8000aa4:	3738      	adds	r7, #56	@ 0x38
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000aac:	24000000 	.word	0x24000000
 8000ab0:	0800a974 	.word	0x0800a974
 8000ab4:	0800a980 	.word	0x0800a980
 8000ab8:	0800a968 	.word	0x0800a968
 8000abc:	240003fc 	.word	0x240003fc
 8000ac0:	48020000 	.word	0x48020000
 8000ac4:	0800a950 	.word	0x0800a950

08000ac8 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000acc:	4b16      	ldr	r3, [pc, #88]	@ (8000b28 <MX_DCMI_Init+0x60>)
 8000ace:	4a17      	ldr	r2, [pc, #92]	@ (8000b2c <MX_DCMI_Init+0x64>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <MX_DCMI_Init+0x60>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <MX_DCMI_Init+0x60>)
 8000ada:	2220      	movs	r2, #32
 8000adc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000ade:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <MX_DCMI_Init+0x60>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000ae4:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <MX_DCMI_Init+0x60>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000aea:	4b0f      	ldr	r3, [pc, #60]	@ (8000b28 <MX_DCMI_Init+0x60>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000af0:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <MX_DCMI_Init+0x60>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <MX_DCMI_Init+0x60>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000afc:	4b0a      	ldr	r3, [pc, #40]	@ (8000b28 <MX_DCMI_Init+0x60>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <MX_DCMI_Init+0x60>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000b08:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <MX_DCMI_Init+0x60>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <MX_DCMI_Init+0x60>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000b14:	4804      	ldr	r0, [pc, #16]	@ (8000b28 <MX_DCMI_Init+0x60>)
 8000b16:	f001 fb67 	bl	80021e8 <HAL_DCMI_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000b20:	f000 fc88 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	24000144 	.word	0x24000144
 8000b2c:	48020000 	.word	0x48020000

08000b30 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08e      	sub	sp, #56	@ 0x38
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a5d      	ldr	r2, [pc, #372]	@ (8000cc4 <HAL_DCMI_MspInit+0x194>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	f040 80b3 	bne.w	8000cba <HAL_DCMI_MspInit+0x18a>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000b54:	4b5c      	ldr	r3, [pc, #368]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000b56:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000b5a:	4a5b      	ldr	r2, [pc, #364]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000b64:	4b58      	ldr	r3, [pc, #352]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000b66:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	623b      	str	r3, [r7, #32]
 8000b70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b72:	4b55      	ldr	r3, [pc, #340]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b78:	4a53      	ldr	r2, [pc, #332]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000b7a:	f043 0310 	orr.w	r3, r3, #16
 8000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b82:	4b51      	ldr	r3, [pc, #324]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b88:	f003 0310 	and.w	r3, r3, #16
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b90:	4b4d      	ldr	r3, [pc, #308]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b96:	4a4c      	ldr	r2, [pc, #304]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba0:	4b49      	ldr	r3, [pc, #292]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	61bb      	str	r3, [r7, #24]
 8000bac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	4b46      	ldr	r3, [pc, #280]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000bb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb4:	4a44      	ldr	r2, [pc, #272]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000bb6:	f043 0304 	orr.w	r3, r3, #4
 8000bba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bbe:	4b42      	ldr	r3, [pc, #264]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc4:	f003 0304 	and.w	r3, r3, #4
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000bce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd2:	4a3d      	ldr	r2, [pc, #244]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bdc:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	4b37      	ldr	r3, [pc, #220]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000bec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf0:	4a35      	ldr	r2, [pc, #212]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000bf2:	f043 0302 	orr.w	r3, r3, #2
 8000bf6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bfa:	4b33      	ldr	r3, [pc, #204]	@ (8000cc8 <HAL_DCMI_MspInit+0x198>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c00:	f003 0302 	and.w	r3, r3, #2
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000c08:	2370      	movs	r3, #112	@ 0x70
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c18:	230d      	movs	r3, #13
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c20:	4619      	mov	r1, r3
 8000c22:	482a      	ldr	r0, [pc, #168]	@ (8000ccc <HAL_DCMI_MspInit+0x19c>)
 8000c24:	f002 fa9c 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000c28:	2350      	movs	r3, #80	@ 0x50
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c38:	230d      	movs	r3, #13
 8000c3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c40:	4619      	mov	r1, r3
 8000c42:	4823      	ldr	r0, [pc, #140]	@ (8000cd0 <HAL_DCMI_MspInit+0x1a0>)
 8000c44:	f002 fa8c 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000c48:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c5a:	230d      	movs	r3, #13
 8000c5c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c62:	4619      	mov	r1, r3
 8000c64:	481b      	ldr	r0, [pc, #108]	@ (8000cd4 <HAL_DCMI_MspInit+0x1a4>)
 8000c66:	f002 fa7b 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c7a:	230d      	movs	r3, #13
 8000c7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	4814      	ldr	r0, [pc, #80]	@ (8000cd8 <HAL_DCMI_MspInit+0x1a8>)
 8000c86:	f002 fa6b 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c8a:	2380      	movs	r3, #128	@ 0x80
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c9a:	230d      	movs	r3, #13
 8000c9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480d      	ldr	r0, [pc, #52]	@ (8000cdc <HAL_DCMI_MspInit+0x1ac>)
 8000ca6:	f002 fa5b 	bl	8003160 <HAL_GPIO_Init>

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	204e      	movs	r0, #78	@ 0x4e
 8000cb0:	f001 fa65 	bl	800217e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000cb4:	204e      	movs	r0, #78	@ 0x4e
 8000cb6:	f001 fa7c 	bl	80021b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3738      	adds	r7, #56	@ 0x38
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	48020000 	.word	0x48020000
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58021000 	.word	0x58021000
 8000cd0:	58020000 	.word	0x58020000
 8000cd4:	58020800 	.word	0x58020800
 8000cd8:	58020c00 	.word	0x58020c00
 8000cdc:	58020400 	.word	0x58020400

08000ce0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d60 <MX_ETH_Init+0x80>)
 8000ce6:	4a1f      	ldr	r2, [pc, #124]	@ (8000d64 <MX_ETH_Init+0x84>)
 8000ce8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000cea:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <MX_ETH_Init+0x88>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000d68 <MX_ETH_Init+0x88>)
 8000cf2:	2280      	movs	r2, #128	@ 0x80
 8000cf4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d68 <MX_ETH_Init+0x88>)
 8000cf8:	22e1      	movs	r2, #225	@ 0xe1
 8000cfa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <MX_ETH_Init+0x88>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000d02:	4b19      	ldr	r3, [pc, #100]	@ (8000d68 <MX_ETH_Init+0x88>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000d08:	4b17      	ldr	r3, [pc, #92]	@ (8000d68 <MX_ETH_Init+0x88>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_ETH_Init+0x80>)
 8000d10:	4a15      	ldr	r2, [pc, #84]	@ (8000d68 <MX_ETH_Init+0x88>)
 8000d12:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_ETH_Init+0x80>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_ETH_Init+0x80>)
 8000d1c:	4a13      	ldr	r2, [pc, #76]	@ (8000d6c <MX_ETH_Init+0x8c>)
 8000d1e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_ETH_Init+0x80>)
 8000d22:	4a13      	ldr	r2, [pc, #76]	@ (8000d70 <MX_ETH_Init+0x90>)
 8000d24:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_ETH_Init+0x80>)
 8000d28:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000d2c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000d2e:	480c      	ldr	r0, [pc, #48]	@ (8000d60 <MX_ETH_Init+0x80>)
 8000d30:	f001 fde2 	bl	80028f8 <HAL_ETH_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000d3a:	f000 fb7b 	bl	8001434 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000d3e:	2238      	movs	r2, #56	@ 0x38
 8000d40:	2100      	movs	r1, #0
 8000d42:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <MX_ETH_Init+0x94>)
 8000d44:	f009 f952 	bl	8009fec <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000d48:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <MX_ETH_Init+0x94>)
 8000d4a:	2221      	movs	r2, #33	@ 0x21
 8000d4c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000d4e:	4b09      	ldr	r3, [pc, #36]	@ (8000d74 <MX_ETH_Init+0x94>)
 8000d50:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000d54:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <MX_ETH_Init+0x94>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	240001cc 	.word	0x240001cc
 8000d64:	40028000 	.word	0x40028000
 8000d68:	2400027c 	.word	0x2400027c
 8000d6c:	240000c4 	.word	0x240000c4
 8000d70:	24000064 	.word	0x24000064
 8000d74:	24000194 	.word	0x24000194

08000d78 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	@ 0x38
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a59      	ldr	r2, [pc, #356]	@ (8000efc <HAL_ETH_MspInit+0x184>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	f040 80ab 	bne.w	8000ef2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d9c:	4b58      	ldr	r3, [pc, #352]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000d9e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000da2:	4a57      	ldr	r2, [pc, #348]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000da4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000da8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dac:	4b54      	ldr	r3, [pc, #336]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000dae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000db6:	623b      	str	r3, [r7, #32]
 8000db8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000dba:	4b51      	ldr	r3, [pc, #324]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000dbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dc6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dca:	4b4d      	ldr	r3, [pc, #308]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000dcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000dd8:	4b49      	ldr	r3, [pc, #292]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000dda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dde:	4a48      	ldr	r2, [pc, #288]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000de8:	4b45      	ldr	r3, [pc, #276]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000dea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df2:	61bb      	str	r3, [r7, #24]
 8000df4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b42      	ldr	r3, [pc, #264]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfc:	4a40      	ldr	r2, [pc, #256]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e06:	4b3e      	ldr	r3, [pc, #248]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	617b      	str	r3, [r7, #20]
 8000e12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b3a      	ldr	r3, [pc, #232]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	4a39      	ldr	r2, [pc, #228]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e24:	4b36      	ldr	r3, [pc, #216]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b33      	ldr	r3, [pc, #204]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	4a31      	ldr	r2, [pc, #196]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e42:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e50:	4b2b      	ldr	r3, [pc, #172]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	4a2a      	ldr	r2, [pc, #168]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e60:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <HAL_ETH_MspInit+0x188>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e6e:	2332      	movs	r3, #50	@ 0x32
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e72:	2302      	movs	r3, #2
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e7e:	230b      	movs	r3, #11
 8000e80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	481e      	ldr	r0, [pc, #120]	@ (8000f04 <HAL_ETH_MspInit+0x18c>)
 8000e8a:	f002 f969 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e8e:	2386      	movs	r3, #134	@ 0x86
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e96:	2300      	movs	r3, #0
 8000e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e9e:	230b      	movs	r3, #11
 8000ea0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4817      	ldr	r0, [pc, #92]	@ (8000f08 <HAL_ETH_MspInit+0x190>)
 8000eaa:	f002 f959 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ec0:	230b      	movs	r3, #11
 8000ec2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4810      	ldr	r0, [pc, #64]	@ (8000f0c <HAL_ETH_MspInit+0x194>)
 8000ecc:	f002 f948 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ed0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ed4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ee2:	230b      	movs	r3, #11
 8000ee4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	4808      	ldr	r0, [pc, #32]	@ (8000f10 <HAL_ETH_MspInit+0x198>)
 8000eee:	f002 f937 	bl	8003160 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3738      	adds	r7, #56	@ 0x38
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40028000 	.word	0x40028000
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58020800 	.word	0x58020800
 8000f08:	58020000 	.word	0x58020000
 8000f0c:	58020400 	.word	0x58020400
 8000f10:	58021800 	.word	0x58021800

08000f14 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	@ 0x30
 8000f18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1a:	f107 031c 	add.w	r3, r7, #28
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
 8000f26:	60da      	str	r2, [r3, #12]
 8000f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2a:	4b7e      	ldr	r3, [pc, #504]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000f2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f30:	4a7c      	ldr	r2, [pc, #496]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f3a:	4b7a      	ldr	r3, [pc, #488]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f40:	f003 0310 	and.w	r3, r3, #16
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f48:	4b76      	ldr	r3, [pc, #472]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4e:	4a75      	ldr	r2, [pc, #468]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f58:	4b72      	ldr	r3, [pc, #456]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f66:	4b6f      	ldr	r3, [pc, #444]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6c:	4a6d      	ldr	r2, [pc, #436]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f76:	4b6b      	ldr	r3, [pc, #428]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000f78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	4b67      	ldr	r3, [pc, #412]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8a:	4a66      	ldr	r2, [pc, #408]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f94:	4b63      	ldr	r3, [pc, #396]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000f96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	4b60      	ldr	r3, [pc, #384]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa8:	4a5e      	ldr	r2, [pc, #376]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fb2:	4b5c      	ldr	r3, [pc, #368]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fc0:	4b58      	ldr	r3, [pc, #352]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc6:	4a57      	ldr	r2, [pc, #348]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000fc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fd0:	4b54      	ldr	r3, [pc, #336]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000fd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fde:	4b51      	ldr	r3, [pc, #324]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe4:	4a4f      	ldr	r2, [pc, #316]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000fe6:	f043 0308 	orr.w	r3, r3, #8
 8000fea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fee:	4b4d      	ldr	r3, [pc, #308]	@ (8001124 <MX_GPIO_Init+0x210>)
 8000ff0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_SET);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2101      	movs	r1, #1
 8001000:	4849      	ldr	r0, [pc, #292]	@ (8001128 <MX_GPIO_Init+0x214>)
 8001002:	f002 fa5d 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f245 0101 	movw	r1, #20481	@ 0x5001
 800100c:	4847      	ldr	r0, [pc, #284]	@ (800112c <MX_GPIO_Init+0x218>)
 800100e:	f002 fa57 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_DC_Pin|CAMERA_RST_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001012:	2200      	movs	r2, #0
 8001014:	f249 4102 	movw	r1, #37890	@ 0x9402
 8001018:	4845      	ldr	r0, [pc, #276]	@ (8001130 <MX_GPIO_Init+0x21c>)
 800101a:	f002 fa51 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001024:	4843      	ldr	r0, [pc, #268]	@ (8001134 <MX_GPIO_Init+0x220>)
 8001026:	f002 fa4b 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2102      	movs	r1, #2
 800102e:	4842      	ldr	r0, [pc, #264]	@ (8001138 <MX_GPIO_Init+0x224>)
 8001030:	f002 fa46 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001034:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001038:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001042:	f107 031c 	add.w	r3, r7, #28
 8001046:	4619      	mov	r1, r3
 8001048:	483c      	ldr	r0, [pc, #240]	@ (800113c <MX_GPIO_Init+0x228>)
 800104a:	f002 f889 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin;
 800104e:	2301      	movs	r3, #1
 8001050:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001056:	2300      	movs	r3, #0
 8001058:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105a:	2300      	movs	r3, #0
 800105c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CAMERA_PWDN_GPIO_Port, &GPIO_InitStruct);
 800105e:	f107 031c 	add.w	r3, r7, #28
 8001062:	4619      	mov	r1, r3
 8001064:	4830      	ldr	r0, [pc, #192]	@ (8001128 <MX_GPIO_Init+0x214>)
 8001066:	f002 f87b 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin;
 800106a:	f245 0301 	movw	r3, #20481	@ 0x5001
 800106e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	2301      	movs	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	4619      	mov	r1, r3
 8001082:	482a      	ldr	r0, [pc, #168]	@ (800112c <MX_GPIO_Init+0x218>)
 8001084:	f002 f86c 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|CAMERA_RST_Pin|LCD_RESET_Pin|LCD_CS_Pin;
 8001088:	f249 4302 	movw	r3, #37890	@ 0x9402
 800108c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800109a:	f107 031c 	add.w	r3, r7, #28
 800109e:	4619      	mov	r1, r3
 80010a0:	4823      	ldr	r0, [pc, #140]	@ (8001130 <MX_GPIO_Init+0x21c>)
 80010a2:	f002 f85d 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80010a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4619      	mov	r1, r3
 80010be:	481d      	ldr	r0, [pc, #116]	@ (8001134 <MX_GPIO_Init+0x220>)
 80010c0:	f002 f84e 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80010c4:	2380      	movs	r3, #128	@ 0x80
 80010c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 031c 	add.w	r3, r7, #28
 80010d6:	4619      	mov	r1, r3
 80010d8:	4815      	ldr	r0, [pc, #84]	@ (8001130 <MX_GPIO_Init+0x21c>)
 80010da:	f002 f841 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	480b      	ldr	r0, [pc, #44]	@ (8001128 <MX_GPIO_Init+0x214>)
 80010fc:	f002 f830 	bl	8003160 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001100:	2302      	movs	r3, #2
 8001102:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	4808      	ldr	r0, [pc, #32]	@ (8001138 <MX_GPIO_Init+0x224>)
 8001118:	f002 f822 	bl	8003160 <HAL_GPIO_Init>

}
 800111c:	bf00      	nop
 800111e:	3730      	adds	r7, #48	@ 0x30
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	58024400 	.word	0x58024400
 8001128:	58020000 	.word	0x58020000
 800112c:	58020400 	.word	0x58020400
 8001130:	58021800 	.word	0x58021800
 8001134:	58020c00 	.word	0x58020c00
 8001138:	58021000 	.word	0x58021000
 800113c:	58020800 	.word	0x58020800

08001140 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001144:	4b1b      	ldr	r3, [pc, #108]	@ (80011b4 <MX_I2C1_Init+0x74>)
 8001146:	4a1c      	ldr	r2, [pc, #112]	@ (80011b8 <MX_I2C1_Init+0x78>)
 8001148:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60000008;
 800114a:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <MX_I2C1_Init+0x74>)
 800114c:	4a1b      	ldr	r2, [pc, #108]	@ (80011bc <MX_I2C1_Init+0x7c>)
 800114e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001150:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <MX_I2C1_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001156:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <MX_I2C1_Init+0x74>)
 8001158:	2201      	movs	r2, #1
 800115a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b15      	ldr	r3, [pc, #84]	@ (80011b4 <MX_I2C1_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <MX_I2C1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_I2C1_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_I2C1_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <MX_I2C1_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800117a:	480e      	ldr	r0, [pc, #56]	@ (80011b4 <MX_I2C1_Init+0x74>)
 800117c:	f002 f9ba 	bl	80034f4 <HAL_I2C_Init>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001186:	f000 f955 	bl	8001434 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118a:	2100      	movs	r1, #0
 800118c:	4809      	ldr	r0, [pc, #36]	@ (80011b4 <MX_I2C1_Init+0x74>)
 800118e:	f002 ff01 	bl	8003f94 <HAL_I2CEx_ConfigAnalogFilter>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001198:	f000 f94c 	bl	8001434 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800119c:	2100      	movs	r1, #0
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_I2C1_Init+0x74>)
 80011a0:	f002 ff43 	bl	800402a <HAL_I2CEx_ConfigDigitalFilter>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011aa:	f000 f943 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	24000284 	.word	0x24000284
 80011b8:	40005400 	.word	0x40005400
 80011bc:	60000008 	.word	0x60000008

080011c0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b0ba      	sub	sp, #232	@ 0xe8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	22c0      	movs	r2, #192	@ 0xc0
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f008 ff03 	bl	8009fec <memset>
  if(i2cHandle->Instance==I2C1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a30      	ldr	r2, [pc, #192]	@ (80012ac <HAL_I2C_MspInit+0xec>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d158      	bne.n	80012a2 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011f0:	f04f 0208 	mov.w	r2, #8
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 8;
 80011fc:	2308      	movs	r3, #8
 80011fe:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 150;
 8001200:	2396      	movs	r3, #150	@ 0x96
 8001202:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 10;
 8001204:	230a      	movs	r3, #10
 8001206:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8001208:	230a      	movs	r3, #10
 800120a:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 10;
 800120c:	230a      	movs	r3, #10
 800120e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001210:	2300      	movs	r3, #0
 8001212:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001214:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001218:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 800121e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001222:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 0310 	add.w	r3, r7, #16
 800122a:	4618      	mov	r0, r3
 800122c:	f004 f914 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 8001236:	f000 f8fd 	bl	8001434 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123a:	4b1d      	ldr	r3, [pc, #116]	@ (80012b0 <HAL_I2C_MspInit+0xf0>)
 800123c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001240:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <HAL_I2C_MspInit+0xf0>)
 8001242:	f043 0302 	orr.w	r3, r3, #2
 8001246:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800124a:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <HAL_I2C_MspInit+0xf0>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001250:	f003 0302 	and.w	r3, r3, #2
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001258:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800125c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001260:	2312      	movs	r3, #18
 8001262:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001266:	2301      	movs	r3, #1
 8001268:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001272:	2304      	movs	r3, #4
 8001274:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001278:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800127c:	4619      	mov	r1, r3
 800127e:	480d      	ldr	r0, [pc, #52]	@ (80012b4 <HAL_I2C_MspInit+0xf4>)
 8001280:	f001 ff6e 	bl	8003160 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001284:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <HAL_I2C_MspInit+0xf0>)
 8001286:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800128a:	4a09      	ldr	r2, [pc, #36]	@ (80012b0 <HAL_I2C_MspInit+0xf0>)
 800128c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001290:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_I2C_MspInit+0xf0>)
 8001296:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800129a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012a2:	bf00      	nop
 80012a4:	37e8      	adds	r7, #232	@ 0xe8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40005400 	.word	0x40005400
 80012b0:	58024400 	.word	0x58024400
 80012b4:	58020400 	.word	0x58020400

080012b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012be:	f000 fdad 	bl	8001e1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c2:	f000 f833 	bl	800132c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c6:	f7ff fe25 	bl	8000f14 <MX_GPIO_Init>
  MX_ETH_Init();
 80012ca:	f7ff fd09 	bl	8000ce0 <MX_ETH_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012ce:	f000 fccd 	bl	8001c6c <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 80012d2:	f7ff fbf9 	bl	8000ac8 <MX_DCMI_Init>
  MX_I2C1_Init();
 80012d6:	f7ff ff33 	bl	8001140 <MX_I2C1_Init>
  MX_SPI1_Init();
 80012da:	f000 f8b1 	bl	8001440 <MX_SPI1_Init>
  MX_TIM1_Init();
 80012de:	f000 facf 	bl	8001880 <MX_TIM1_Init>
  MX_TIM4_Init();
 80012e2:	f000 fb23 	bl	800192c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 80012e6:	f000 fc0b 	bl	8001b00 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_StatusTypeDef cameraConfigStatus = OV5640_PowerUpSequence();
 80012ea:	f7ff fa53 	bl	8000794 <OV5640_PowerUpSequence>
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	if (cameraConfigStatus == HAL_OK){
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d113      	bne.n	8001320 <main+0x68>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin, GPIO_PIN_SET);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80012fe:	480a      	ldr	r0, [pc, #40]	@ (8001328 <main+0x70>)
 8001300:	f002 f8de 	bl	80034c0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001304:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001308:	f000 fe1a 	bl	8001f40 <HAL_Delay>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin,GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <main+0x70>)
 8001314:	f002 f8d4 	bl	80034c0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001318:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800131c:	f000 fe10 	bl	8001f40 <HAL_Delay>
	}

	frameCapture();
 8001320:	f7ff fb30 	bl	8000984 <frameCapture>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <main+0x6c>
 8001328:	58020400 	.word	0x58020400

0800132c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b09c      	sub	sp, #112	@ 0x70
 8001330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001336:	224c      	movs	r2, #76	@ 0x4c
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f008 fe56 	bl	8009fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001340:	1d3b      	adds	r3, r7, #4
 8001342:	2220      	movs	r2, #32
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f008 fe50 	bl	8009fec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800134c:	2002      	movs	r0, #2
 800134e:	f002 ffe9 	bl	8004324 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001352:	2300      	movs	r3, #0
 8001354:	603b      	str	r3, [r7, #0]
 8001356:	4b35      	ldr	r3, [pc, #212]	@ (800142c <SystemClock_Config+0x100>)
 8001358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800135a:	4a34      	ldr	r2, [pc, #208]	@ (800142c <SystemClock_Config+0x100>)
 800135c:	f023 0301 	bic.w	r3, r3, #1
 8001360:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001362:	4b32      	ldr	r3, [pc, #200]	@ (800142c <SystemClock_Config+0x100>)
 8001364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	4b30      	ldr	r3, [pc, #192]	@ (8001430 <SystemClock_Config+0x104>)
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	4a2f      	ldr	r2, [pc, #188]	@ (8001430 <SystemClock_Config+0x104>)
 8001372:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001376:	6193      	str	r3, [r2, #24]
 8001378:	4b2d      	ldr	r3, [pc, #180]	@ (8001430 <SystemClock_Config+0x104>)
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001384:	bf00      	nop
 8001386:	4b2a      	ldr	r3, [pc, #168]	@ (8001430 <SystemClock_Config+0x104>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800138e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001392:	d1f8      	bne.n	8001386 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001394:	2321      	movs	r3, #33	@ 0x21
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001398:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800139c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800139e:	2301      	movs	r3, #1
 80013a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a2:	2302      	movs	r3, #2
 80013a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013a6:	2302      	movs	r3, #2
 80013a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013aa:	2308      	movs	r3, #8
 80013ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 480;
 80013ae:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80013b2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013b8:	2304      	movs	r3, #4
 80013ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013bc:	2302      	movs	r3, #2
 80013be:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 fff1 	bl	80043b8 <HAL_RCC_OscConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80013dc:	f000 f82a 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e0:	233f      	movs	r3, #63	@ 0x3f
 80013e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e4:	2303      	movs	r3, #3
 80013e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013ec:	2308      	movs	r3, #8
 80013ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80013f0:	2340      	movs	r3, #64	@ 0x40
 80013f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80013f4:	2340      	movs	r3, #64	@ 0x40
 80013f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80013f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80013fe:	2340      	movs	r3, #64	@ 0x40
 8001400:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2101      	movs	r1, #1
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fc30 	bl	8004c6c <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8001412:	f000 f80f 	bl	8001434 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8001416:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800141a:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 800141e:	2000      	movs	r0, #0
 8001420:	f003 fdda 	bl	8004fd8 <HAL_RCC_MCOConfig>
}
 8001424:	bf00      	nop
 8001426:	3770      	adds	r7, #112	@ 0x70
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	58000400 	.word	0x58000400
 8001430:	58024800 	.word	0x58024800

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <Error_Handler+0x8>

08001440 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001444:	4b28      	ldr	r3, [pc, #160]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 8001446:	4a29      	ldr	r2, [pc, #164]	@ (80014ec <MX_SPI1_Init+0xac>)
 8001448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800144a:	4b27      	ldr	r3, [pc, #156]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 800144c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001450:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001452:	4b25      	ldr	r3, [pc, #148]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001458:	4b23      	ldr	r3, [pc, #140]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 800145a:	2203      	movs	r2, #3
 800145c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800145e:	4b22      	ldr	r3, [pc, #136]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 8001460:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001464:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001466:	4b20      	ldr	r3, [pc, #128]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 8001468:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800146c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800146e:	4b1e      	ldr	r3, [pc, #120]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 8001470:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001474:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001476:	4b1c      	ldr	r3, [pc, #112]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 8001478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800147c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800147e:	4b1a      	ldr	r3, [pc, #104]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001484:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 8001486:	2200      	movs	r2, #0
 8001488:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148a:	4b17      	ldr	r3, [pc, #92]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001490:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 8001492:	2200      	movs	r2, #0
 8001494:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001496:	4b14      	ldr	r3, [pc, #80]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 8001498:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800149c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800149e:	4b12      	ldr	r3, [pc, #72]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80014a4:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014aa:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80014b0:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80014b6:	4b0c      	ldr	r3, [pc, #48]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 80014be:	2200      	movs	r2, #0
 80014c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80014c2:	4b09      	ldr	r3, [pc, #36]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80014c8:	4b07      	ldr	r3, [pc, #28]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80014ce:	4b06      	ldr	r3, [pc, #24]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014d4:	4804      	ldr	r0, [pc, #16]	@ (80014e8 <MX_SPI1_Init+0xa8>)
 80014d6:	f005 fdeb 	bl	80070b0 <HAL_SPI_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80014e0:	f7ff ffa8 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	240002d8 	.word	0x240002d8
 80014ec:	40013000 	.word	0x40013000

080014f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0bc      	sub	sp, #240	@ 0xf0
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	22c0      	movs	r2, #192	@ 0xc0
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f008 fd6b 	bl	8009fec <memset>
  if(spiHandle->Instance==SPI1)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a4b      	ldr	r2, [pc, #300]	@ (8001648 <HAL_SPI_MspInit+0x158>)
 800151c:	4293      	cmp	r3, r2
 800151e:	f040 808e 	bne.w	800163e <HAL_SPI_MspInit+0x14e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001522:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001526:	f04f 0300 	mov.w	r3, #0
 800152a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800152e:	2300      	movs	r3, #0
 8001530:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001532:	f107 0318 	add.w	r3, r7, #24
 8001536:	4618      	mov	r0, r3
 8001538:	f003 ff8e 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001542:	f7ff ff77 	bl	8001434 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001546:	4b41      	ldr	r3, [pc, #260]	@ (800164c <HAL_SPI_MspInit+0x15c>)
 8001548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800154c:	4a3f      	ldr	r2, [pc, #252]	@ (800164c <HAL_SPI_MspInit+0x15c>)
 800154e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001552:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001556:	4b3d      	ldr	r3, [pc, #244]	@ (800164c <HAL_SPI_MspInit+0x15c>)
 8001558:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800155c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001560:	617b      	str	r3, [r7, #20]
 8001562:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001564:	4b39      	ldr	r3, [pc, #228]	@ (800164c <HAL_SPI_MspInit+0x15c>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156a:	4a38      	ldr	r2, [pc, #224]	@ (800164c <HAL_SPI_MspInit+0x15c>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001574:	4b35      	ldr	r3, [pc, #212]	@ (800164c <HAL_SPI_MspInit+0x15c>)
 8001576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800157a:	f003 0301 	and.w	r3, r3, #1
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001582:	4b32      	ldr	r3, [pc, #200]	@ (800164c <HAL_SPI_MspInit+0x15c>)
 8001584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001588:	4a30      	ldr	r2, [pc, #192]	@ (800164c <HAL_SPI_MspInit+0x15c>)
 800158a:	f043 0308 	orr.w	r3, r3, #8
 800158e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001592:	4b2e      	ldr	r3, [pc, #184]	@ (800164c <HAL_SPI_MspInit+0x15c>)
 8001594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001598:	f003 0308 	and.w	r3, r3, #8
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80015a0:	4b2a      	ldr	r3, [pc, #168]	@ (800164c <HAL_SPI_MspInit+0x15c>)
 80015a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a6:	4a29      	ldr	r2, [pc, #164]	@ (800164c <HAL_SPI_MspInit+0x15c>)
 80015a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015b0:	4b26      	ldr	r3, [pc, #152]	@ (800164c <HAL_SPI_MspInit+0x15c>)
 80015b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015be:	2320      	movs	r3, #32
 80015c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015d6:	2305      	movs	r3, #5
 80015d8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015dc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80015e0:	4619      	mov	r1, r3
 80015e2:	481b      	ldr	r0, [pc, #108]	@ (8001650 <HAL_SPI_MspInit+0x160>)
 80015e4:	f001 fdbc 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015e8:	2380      	movs	r3, #128	@ 0x80
 80015ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015fa:	2300      	movs	r3, #0
 80015fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001600:	2305      	movs	r3, #5
 8001602:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001606:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800160a:	4619      	mov	r1, r3
 800160c:	4811      	ldr	r0, [pc, #68]	@ (8001654 <HAL_SPI_MspInit+0x164>)
 800160e:	f001 fda7 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001612:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001616:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161a:	2302      	movs	r3, #2
 800161c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800162c:	2305      	movs	r3, #5
 800162e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001632:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001636:	4619      	mov	r1, r3
 8001638:	4807      	ldr	r0, [pc, #28]	@ (8001658 <HAL_SPI_MspInit+0x168>)
 800163a:	f001 fd91 	bl	8003160 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800163e:	bf00      	nop
 8001640:	37f0      	adds	r7, #240	@ 0xf0
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40013000 	.word	0x40013000
 800164c:	58024400 	.word	0x58024400
 8001650:	58020000 	.word	0x58020000
 8001654:	58020c00 	.word	0x58020c00
 8001658:	58021800 	.word	0x58021800

0800165c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_MspInit+0x30>)
 8001664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001668:	4a08      	ldr	r2, [pc, #32]	@ (800168c <HAL_MspInit+0x30>)
 800166a:	f043 0302 	orr.w	r3, r3, #2
 800166e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_MspInit+0x30>)
 8001674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	58024400 	.word	0x58024400

08001690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <NMI_Handler+0x4>

08001698 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <HardFault_Handler+0x4>

080016a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <MemManage_Handler+0x4>

080016a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	bf00      	nop
 80016b6:	e7fd      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e6:	f000 fc0b 	bl	8001f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <DCMI_IRQHandler+0x10>)
 80016f6:	f000 fdf1 	bl	80022dc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	24000144 	.word	0x24000144

08001704 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 800170c:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <_sbrk+0x64>)
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <_sbrk+0x68>)
 8001724:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d207      	bcs.n	8001744 <_sbrk+0x40>
		errno = ENOMEM;
 8001734:	f008 fc62 	bl	8009ffc <__errno>
 8001738:	4603      	mov	r3, r0
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	e009      	b.n	8001758 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <_sbrk+0x64>)
 8001754:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	24080000 	.word	0x24080000
 8001764:	00000400 	.word	0x00000400
 8001768:	24000360 	.word	0x24000360
 800176c:	24000ac0 	.word	0x24000ac0

08001770 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8001774:	4b37      	ldr	r3, [pc, #220]	@ (8001854 <SystemInit+0xe4>)
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800177a:	4a36      	ldr	r2, [pc, #216]	@ (8001854 <SystemInit+0xe4>)
 800177c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001784:	4b34      	ldr	r3, [pc, #208]	@ (8001858 <SystemInit+0xe8>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 030f 	and.w	r3, r3, #15
 800178c:	2b06      	cmp	r3, #6
 800178e:	d807      	bhi.n	80017a0 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001790:	4b31      	ldr	r3, [pc, #196]	@ (8001858 <SystemInit+0xe8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 030f 	bic.w	r3, r3, #15
 8001798:	4a2f      	ldr	r2, [pc, #188]	@ (8001858 <SystemInit+0xe8>)
 800179a:	f043 0307 	orr.w	r3, r3, #7
 800179e:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 80017a0:	4b2e      	ldr	r3, [pc, #184]	@ (800185c <SystemInit+0xec>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a2d      	ldr	r2, [pc, #180]	@ (800185c <SystemInit+0xec>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80017ac:	4b2b      	ldr	r3, [pc, #172]	@ (800185c <SystemInit+0xec>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80017b2:	4b2a      	ldr	r3, [pc, #168]	@ (800185c <SystemInit+0xec>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	4929      	ldr	r1, [pc, #164]	@ (800185c <SystemInit+0xec>)
 80017b8:	4b29      	ldr	r3, [pc, #164]	@ (8001860 <SystemInit+0xf0>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80017be:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <SystemInit+0xe8>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d007      	beq.n	80017da <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80017ca:	4b23      	ldr	r3, [pc, #140]	@ (8001858 <SystemInit+0xe8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 030f 	bic.w	r3, r3, #15
 80017d2:	4a21      	ldr	r2, [pc, #132]	@ (8001858 <SystemInit+0xe8>)
 80017d4:	f043 0307 	orr.w	r3, r3, #7
 80017d8:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80017da:	4b20      	ldr	r3, [pc, #128]	@ (800185c <SystemInit+0xec>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80017e0:	4b1e      	ldr	r3, [pc, #120]	@ (800185c <SystemInit+0xec>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <SystemInit+0xec>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	@ (800185c <SystemInit+0xec>)
 80017ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001864 <SystemInit+0xf4>)
 80017f0:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	@ (800185c <SystemInit+0xec>)
 80017f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001868 <SystemInit+0xf8>)
 80017f6:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80017f8:	4b18      	ldr	r3, [pc, #96]	@ (800185c <SystemInit+0xec>)
 80017fa:	4a1c      	ldr	r2, [pc, #112]	@ (800186c <SystemInit+0xfc>)
 80017fc:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80017fe:	4b17      	ldr	r3, [pc, #92]	@ (800185c <SystemInit+0xec>)
 8001800:	2200      	movs	r2, #0
 8001802:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8001804:	4b15      	ldr	r3, [pc, #84]	@ (800185c <SystemInit+0xec>)
 8001806:	4a19      	ldr	r2, [pc, #100]	@ (800186c <SystemInit+0xfc>)
 8001808:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 800180a:	4b14      	ldr	r3, [pc, #80]	@ (800185c <SystemInit+0xec>)
 800180c:	2200      	movs	r2, #0
 800180e:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 8001810:	4b12      	ldr	r3, [pc, #72]	@ (800185c <SystemInit+0xec>)
 8001812:	4a16      	ldr	r2, [pc, #88]	@ (800186c <SystemInit+0xfc>)
 8001814:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8001816:	4b11      	ldr	r3, [pc, #68]	@ (800185c <SystemInit+0xec>)
 8001818:	2200      	movs	r2, #0
 800181a:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 800181c:	4b0f      	ldr	r3, [pc, #60]	@ (800185c <SystemInit+0xec>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a0e      	ldr	r2, [pc, #56]	@ (800185c <SystemInit+0xec>)
 8001822:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001826:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <SystemInit+0xec>)
 800182a:	2200      	movs	r2, #0
 800182c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800182e:	4b10      	ldr	r3, [pc, #64]	@ (8001870 <SystemInit+0x100>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b10      	ldr	r3, [pc, #64]	@ (8001874 <SystemInit+0x104>)
 8001834:	4013      	ands	r3, r2
 8001836:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800183a:	d202      	bcs.n	8001842 <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 800183c:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <SystemInit+0x108>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001842:	4b0e      	ldr	r3, [pc, #56]	@ (800187c <SystemInit+0x10c>)
 8001844:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001848:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00
 8001858:	52002000 	.word	0x52002000
 800185c:	58024400 	.word	0x58024400
 8001860:	eaf6ed7f 	.word	0xeaf6ed7f
 8001864:	02020200 	.word	0x02020200
 8001868:	01ff0000 	.word	0x01ff0000
 800186c:	01010280 	.word	0x01010280
 8001870:	5c001000 	.word	0x5c001000
 8001874:	ffff0000 	.word	0xffff0000
 8001878:	51008108 	.word	0x51008108
 800187c:	52004000 	.word	0x52004000

08001880 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b088      	sub	sp, #32
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
 8001894:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001896:	463b      	mov	r3, r7
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018a0:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <MX_TIM1_Init+0xa4>)
 80018a2:	4a21      	ldr	r2, [pc, #132]	@ (8001928 <MX_TIM1_Init+0xa8>)
 80018a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001924 <MX_TIM1_Init+0xa4>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001924 <MX_TIM1_Init+0xa4>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001924 <MX_TIM1_Init+0xa4>)
 80018b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <MX_TIM1_Init+0xa4>)
 80018bc:	2200      	movs	r2, #0
 80018be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018c0:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <MX_TIM1_Init+0xa4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c6:	4b17      	ldr	r3, [pc, #92]	@ (8001924 <MX_TIM1_Init+0xa4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018cc:	4815      	ldr	r0, [pc, #84]	@ (8001924 <MX_TIM1_Init+0xa4>)
 80018ce:	f005 fd2e 	bl	800732e <HAL_TIM_Base_Init>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80018d8:	f7ff fdac 	bl	8001434 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	4619      	mov	r1, r3
 80018ea:	480e      	ldr	r0, [pc, #56]	@ (8001924 <MX_TIM1_Init+0xa4>)
 80018ec:	f006 f8f2 	bl	8007ad4 <HAL_TIM_SlaveConfigSynchro>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018f6:	f7ff fd9d 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001906:	463b      	mov	r3, r7
 8001908:	4619      	mov	r1, r3
 800190a:	4806      	ldr	r0, [pc, #24]	@ (8001924 <MX_TIM1_Init+0xa4>)
 800190c:	f006 fe4e 	bl	80085ac <HAL_TIMEx_MasterConfigSynchronization>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001916:	f7ff fd8d 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	3720      	adds	r7, #32
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	24000364 	.word	0x24000364
 8001928:	40010000 	.word	0x40010000

0800192c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08e      	sub	sp, #56	@ 0x38
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	f107 031c 	add.w	r3, r7, #28
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800194c:	463b      	mov	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]
 800195a:	615a      	str	r2, [r3, #20]
 800195c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800195e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a10 <MX_TIM4_Init+0xe4>)
 8001960:	4a2c      	ldr	r2, [pc, #176]	@ (8001a14 <MX_TIM4_Init+0xe8>)
 8001962:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001964:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <MX_TIM4_Init+0xe4>)
 8001966:	2200      	movs	r2, #0
 8001968:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800196a:	4b29      	ldr	r3, [pc, #164]	@ (8001a10 <MX_TIM4_Init+0xe4>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9;
 8001970:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <MX_TIM4_Init+0xe4>)
 8001972:	2209      	movs	r2, #9
 8001974:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001976:	4b26      	ldr	r3, [pc, #152]	@ (8001a10 <MX_TIM4_Init+0xe4>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197c:	4b24      	ldr	r3, [pc, #144]	@ (8001a10 <MX_TIM4_Init+0xe4>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001982:	4823      	ldr	r0, [pc, #140]	@ (8001a10 <MX_TIM4_Init+0xe4>)
 8001984:	f005 fcd3 	bl	800732e <HAL_TIM_Base_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800198e:	f7ff fd51 	bl	8001434 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001992:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001998:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800199c:	4619      	mov	r1, r3
 800199e:	481c      	ldr	r0, [pc, #112]	@ (8001a10 <MX_TIM4_Init+0xe4>)
 80019a0:	f005 ffa0 	bl	80078e4 <HAL_TIM_ConfigClockSource>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80019aa:	f7ff fd43 	bl	8001434 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019ae:	4818      	ldr	r0, [pc, #96]	@ (8001a10 <MX_TIM4_Init+0xe4>)
 80019b0:	f005 fd14 	bl	80073dc <HAL_TIM_PWM_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80019ba:	f7ff fd3b 	bl	8001434 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	4810      	ldr	r0, [pc, #64]	@ (8001a10 <MX_TIM4_Init+0xe4>)
 80019ce:	f006 fded 	bl	80085ac <HAL_TIMEx_MasterConfigSynchronization>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80019d8:	f7ff fd2c 	bl	8001434 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019dc:	2360      	movs	r3, #96	@ 0x60
 80019de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5;
 80019e0:	2305      	movs	r3, #5
 80019e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ec:	463b      	mov	r3, r7
 80019ee:	2200      	movs	r2, #0
 80019f0:	4619      	mov	r1, r3
 80019f2:	4807      	ldr	r0, [pc, #28]	@ (8001a10 <MX_TIM4_Init+0xe4>)
 80019f4:	f005 fe62 	bl	80076bc <HAL_TIM_PWM_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80019fe:	f7ff fd19 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a02:	4803      	ldr	r0, [pc, #12]	@ (8001a10 <MX_TIM4_Init+0xe4>)
 8001a04:	f000 f842 	bl	8001a8c <HAL_TIM_MspPostInit>

}
 8001a08:	bf00      	nop
 8001a0a:	3738      	adds	r7, #56	@ 0x38
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	240003b0 	.word	0x240003b0
 8001a14:	40000800 	.word	0x40000800

08001a18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a16      	ldr	r2, [pc, #88]	@ (8001a80 <HAL_TIM_Base_MspInit+0x68>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d10f      	bne.n	8001a4a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a2a:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <HAL_TIM_Base_MspInit+0x6c>)
 8001a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a30:	4a14      	ldr	r2, [pc, #80]	@ (8001a84 <HAL_TIM_Base_MspInit+0x6c>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a3a:	4b12      	ldr	r3, [pc, #72]	@ (8001a84 <HAL_TIM_Base_MspInit+0x6c>)
 8001a3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a40:	f003 0301 	and.w	r3, r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001a48:	e013      	b.n	8001a72 <HAL_TIM_Base_MspInit+0x5a>
  else if(tim_baseHandle->Instance==TIM4)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001a88 <HAL_TIM_Base_MspInit+0x70>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d10e      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a54:	4b0b      	ldr	r3, [pc, #44]	@ (8001a84 <HAL_TIM_Base_MspInit+0x6c>)
 8001a56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a84 <HAL_TIM_Base_MspInit+0x6c>)
 8001a5c:	f043 0304 	orr.w	r3, r3, #4
 8001a60:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a64:	4b07      	ldr	r3, [pc, #28]	@ (8001a84 <HAL_TIM_Base_MspInit+0x6c>)
 8001a66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40010000 	.word	0x40010000
 8001a84:	58024400 	.word	0x58024400
 8001a88:	40000800 	.word	0x40000800

08001a8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b088      	sub	sp, #32
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <HAL_TIM_MspPostInit+0x68>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d11e      	bne.n	8001aec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aae:	4b12      	ldr	r3, [pc, #72]	@ (8001af8 <HAL_TIM_MspPostInit+0x6c>)
 8001ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ab4:	4a10      	ldr	r2, [pc, #64]	@ (8001af8 <HAL_TIM_MspPostInit+0x6c>)
 8001ab6:	f043 0302 	orr.w	r3, r3, #2
 8001aba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001abe:	4b0e      	ldr	r3, [pc, #56]	@ (8001af8 <HAL_TIM_MspPostInit+0x6c>)
 8001ac0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ac4:	f003 0302 	and.w	r3, r3, #2
 8001ac8:	60bb      	str	r3, [r7, #8]
 8001aca:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001acc:	2340      	movs	r3, #64	@ 0x40
 8001ace:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001adc:	2302      	movs	r3, #2
 8001ade:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 030c 	add.w	r3, r7, #12
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4805      	ldr	r0, [pc, #20]	@ (8001afc <HAL_TIM_MspPostInit+0x70>)
 8001ae8:	f001 fb3a 	bl	8003160 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001aec:	bf00      	nop
 8001aee:	3720      	adds	r7, #32
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	40000800 	.word	0x40000800
 8001af8:	58024400 	.word	0x58024400
 8001afc:	58020400 	.word	0x58020400

08001b00 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b04:	4b22      	ldr	r3, [pc, #136]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b06:	4a23      	ldr	r2, [pc, #140]	@ (8001b94 <MX_USART3_UART_Init+0x94>)
 8001b08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b0a:	4b21      	ldr	r3, [pc, #132]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b12:	4b1f      	ldr	r3, [pc, #124]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b24:	4b1a      	ldr	r3, [pc, #104]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b26:	220c      	movs	r2, #12
 8001b28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	4b19      	ldr	r3, [pc, #100]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b30:	4b17      	ldr	r3, [pc, #92]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b36:	4b16      	ldr	r3, [pc, #88]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b3c:	4b14      	ldr	r3, [pc, #80]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b42:	4b13      	ldr	r3, [pc, #76]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b48:	4811      	ldr	r0, [pc, #68]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b4a:	f006 fdbd 	bl	80086c8 <HAL_UART_Init>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001b54:	f7ff fc6e 	bl	8001434 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b58:	2100      	movs	r1, #0
 8001b5a:	480d      	ldr	r0, [pc, #52]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b5c:	f007 fe53 	bl	8009806 <HAL_UARTEx_SetTxFifoThreshold>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001b66:	f7ff fc65 	bl	8001434 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4808      	ldr	r0, [pc, #32]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b6e:	f007 fe88 	bl	8009882 <HAL_UARTEx_SetRxFifoThreshold>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001b78:	f7ff fc5c 	bl	8001434 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b7c:	4804      	ldr	r0, [pc, #16]	@ (8001b90 <MX_USART3_UART_Init+0x90>)
 8001b7e:	f007 fe09 	bl	8009794 <HAL_UARTEx_DisableFifoMode>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001b88:	f7ff fc54 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b8c:	bf00      	nop
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	240003fc 	.word	0x240003fc
 8001b94:	40004800 	.word	0x40004800

08001b98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b0ba      	sub	sp, #232	@ 0xe8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb0:	f107 0310 	add.w	r3, r7, #16
 8001bb4:	22c0      	movs	r2, #192	@ 0xc0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f008 fa17 	bl	8009fec <memset>
  if(uartHandle->Instance==USART3)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a27      	ldr	r2, [pc, #156]	@ (8001c60 <HAL_UART_MspInit+0xc8>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d146      	bne.n	8001c56 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bc8:	f04f 0202 	mov.w	r2, #2
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	4618      	mov	r0, r3
 8001be0:	f003 fc3a 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001bea:	f7ff fc23 	bl	8001434 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bee:	4b1d      	ldr	r3, [pc, #116]	@ (8001c64 <HAL_UART_MspInit+0xcc>)
 8001bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8001c64 <HAL_UART_MspInit+0xcc>)
 8001bf6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bfa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001bfe:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <HAL_UART_MspInit+0xcc>)
 8001c00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c0c:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <HAL_UART_MspInit+0xcc>)
 8001c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c12:	4a14      	ldr	r2, [pc, #80]	@ (8001c64 <HAL_UART_MspInit+0xcc>)
 8001c14:	f043 0308 	orr.w	r3, r3, #8
 8001c18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c1c:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <HAL_UART_MspInit+0xcc>)
 8001c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c2a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c32:	2302      	movs	r3, #2
 8001c34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c44:	2307      	movs	r3, #7
 8001c46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c4a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4805      	ldr	r0, [pc, #20]	@ (8001c68 <HAL_UART_MspInit+0xd0>)
 8001c52:	f001 fa85 	bl	8003160 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c56:	bf00      	nop
 8001c58:	37e8      	adds	r7, #232	@ 0xe8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40004800 	.word	0x40004800
 8001c64:	58024400 	.word	0x58024400
 8001c68:	58020c00 	.word	0x58020c00

08001c6c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c70:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c72:	4a16      	ldr	r2, [pc, #88]	@ (8001ccc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001c74:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001c76:	4b14      	ldr	r3, [pc, #80]	@ (8001cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c78:	2209      	movs	r2, #9
 8001c7a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c7c:	4b12      	ldr	r3, [pc, #72]	@ (8001cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c7e:	2202      	movs	r2, #2
 8001c80:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c82:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c88:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c94:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001ca0:	4b09      	ldr	r3, [pc, #36]	@ (8001cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001ca6:	4b08      	ldr	r3, [pc, #32]	@ (8001cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001cac:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001cb2:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001cb4:	f002 fa05 	bl	80040c2 <HAL_PCD_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001cbe:	f7ff fbb9 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	24000490 	.word	0x24000490
 8001ccc:	40080000 	.word	0x40080000

08001cd0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b0ba      	sub	sp, #232	@ 0xe8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	22c0      	movs	r2, #192	@ 0xc0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f008 f97b 	bl	8009fec <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a30      	ldr	r2, [pc, #192]	@ (8001dbc <HAL_PCD_MspInit+0xec>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d159      	bne.n	8001db4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001d00:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001d04:	f04f 0300 	mov.w	r3, #0
 8001d08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001d0c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001d10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fb9d 	bl	8005458 <HAL_RCCEx_PeriphCLKConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001d24:	f7ff fb86 	bl	8001434 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001d28:	f002 fb36 	bl	8004398 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b24      	ldr	r3, [pc, #144]	@ (8001dc0 <HAL_PCD_MspInit+0xf0>)
 8001d2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d32:	4a23      	ldr	r2, [pc, #140]	@ (8001dc0 <HAL_PCD_MspInit+0xf0>)
 8001d34:	f043 0301 	orr.w	r3, r3, #1
 8001d38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d3c:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <HAL_PCD_MspInit+0xf0>)
 8001d3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d62:	4619      	mov	r1, r3
 8001d64:	4817      	ldr	r0, [pc, #92]	@ (8001dc4 <HAL_PCD_MspInit+0xf4>)
 8001d66:	f001 f9fb 	bl	8003160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001d6a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001d84:	230a      	movs	r3, #10
 8001d86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d8e:	4619      	mov	r1, r3
 8001d90:	480c      	ldr	r0, [pc, #48]	@ (8001dc4 <HAL_PCD_MspInit+0xf4>)
 8001d92:	f001 f9e5 	bl	8003160 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d96:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <HAL_PCD_MspInit+0xf0>)
 8001d98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001d9c:	4a08      	ldr	r2, [pc, #32]	@ (8001dc0 <HAL_PCD_MspInit+0xf0>)
 8001d9e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001da2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_PCD_MspInit+0xf0>)
 8001da8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001dac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001db0:	60bb      	str	r3, [r7, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001db4:	bf00      	nop
 8001db6:	37e8      	adds	r7, #232	@ 0xe8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40080000 	.word	0x40080000
 8001dc0:	58024400 	.word	0x58024400
 8001dc4:	58020000 	.word	0x58020000

08001dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001dc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001dcc:	f7ff fcd0 	bl	8001770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dd0:	480c      	ldr	r0, [pc, #48]	@ (8001e04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dd2:	490d      	ldr	r1, [pc, #52]	@ (8001e08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd8:	e002      	b.n	8001de0 <LoopCopyDataInit>

08001dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dde:	3304      	adds	r3, #4

08001de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de4:	d3f9      	bcc.n	8001dda <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de6:	4a0a      	ldr	r2, [pc, #40]	@ (8001e10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001de8:	4c0a      	ldr	r4, [pc, #40]	@ (8001e14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dec:	e001      	b.n	8001df2 <LoopFillZerobss>

08001dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df0:	3204      	adds	r2, #4

08001df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df4:	d3fb      	bcc.n	8001dee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001df6:	f008 f907 	bl	800a008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dfa:	f7ff fa5d 	bl	80012b8 <main>
  bx  lr
 8001dfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001e00:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001e04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001e08:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8001e0c:	0800aa0c 	.word	0x0800aa0c
  ldr r2, =_sbss
 8001e10:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8001e14:	24000ac0 	.word	0x24000ac0

08001e18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e18:	e7fe      	b.n	8001e18 <ADC3_IRQHandler>
	...

08001e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e22:	2003      	movs	r0, #3
 8001e24:	f000 f9a0 	bl	8002168 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e28:	f003 f940 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	4b15      	ldr	r3, [pc, #84]	@ (8001e84 <HAL_Init+0x68>)
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	4913      	ldr	r1, [pc, #76]	@ (8001e88 <HAL_Init+0x6c>)
 8001e3a:	5ccb      	ldrb	r3, [r1, r3]
 8001e3c:	f003 031f 	and.w	r3, r3, #31
 8001e40:	fa22 f303 	lsr.w	r3, r2, r3
 8001e44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e46:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <HAL_Init+0x68>)
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001e88 <HAL_Init+0x6c>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	f003 031f 	and.w	r3, r3, #31
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e8c <HAL_Init+0x70>)
 8001e5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e60:	4a0b      	ldr	r2, [pc, #44]	@ (8001e90 <HAL_Init+0x74>)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e66:	2000      	movs	r0, #0
 8001e68:	f000 f814 	bl	8001e94 <HAL_InitTick>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e002      	b.n	8001e7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e76:	f7ff fbf1 	bl	800165c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	58024400 	.word	0x58024400
 8001e88:	0800a990 	.word	0x0800a990
 8001e8c:	24000008 	.word	0x24000008
 8001e90:	24000004 	.word	0x24000004

08001e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ef4 <HAL_InitTick+0x60>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d101      	bne.n	8001ea8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e021      	b.n	8001eec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <HAL_InitTick+0x64>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <HAL_InitTick+0x60>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f985 	bl	80021ce <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00e      	b.n	8001eec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d80a      	bhi.n	8001eea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f000 f94f 	bl	800217e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee0:	4a06      	ldr	r2, [pc, #24]	@ (8001efc <HAL_InitTick+0x68>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	24000010 	.word	0x24000010
 8001ef8:	24000004 	.word	0x24000004
 8001efc:	2400000c 	.word	0x2400000c

08001f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f04:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <HAL_IncTick+0x20>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b06      	ldr	r3, [pc, #24]	@ (8001f24 <HAL_IncTick+0x24>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a04      	ldr	r2, [pc, #16]	@ (8001f24 <HAL_IncTick+0x24>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	24000010 	.word	0x24000010
 8001f24:	24000974 	.word	0x24000974

08001f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	@ (8001f3c <HAL_GetTick+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	24000974 	.word	0x24000974

08001f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff ffee 	bl	8001f28 <HAL_GetTick>
 8001f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d005      	beq.n	8001f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f84 <HAL_Delay+0x44>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f66:	bf00      	nop
 8001f68:	f7ff ffde 	bl	8001f28 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d8f7      	bhi.n	8001f68 <HAL_Delay+0x28>
  {
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	24000010 	.word	0x24000010

08001f88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <HAL_GetREVID+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	0c1b      	lsrs	r3, r3, #16
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	5c001000 	.word	0x5c001000

08001fa0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001fa8:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001fb0:	4904      	ldr	r1, [pc, #16]	@ (8001fc4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	58000400 	.word	0x58000400

08001fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002008 <__NVIC_SetPriorityGrouping+0x40>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ff0:	4b06      	ldr	r3, [pc, #24]	@ (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ff6:	4a04      	ldr	r2, [pc, #16]	@ (8002008 <__NVIC_SetPriorityGrouping+0x40>)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	60d3      	str	r3, [r2, #12]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00
 800200c:	05fa0000 	.word	0x05fa0000

08002010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002014:	4b04      	ldr	r3, [pc, #16]	@ (8002028 <__NVIC_GetPriorityGrouping+0x18>)
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	0a1b      	lsrs	r3, r3, #8
 800201a:	f003 0307 	and.w	r3, r3, #7
}
 800201e:	4618      	mov	r0, r3
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800203a:	2b00      	cmp	r3, #0
 800203c:	db0b      	blt.n	8002056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	f003 021f 	and.w	r2, r3, #31
 8002044:	4907      	ldr	r1, [pc, #28]	@ (8002064 <__NVIC_EnableIRQ+0x38>)
 8002046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	2001      	movs	r0, #1
 800204e:	fa00 f202 	lsl.w	r2, r0, r2
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000e100 	.word	0xe000e100

08002068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	6039      	str	r1, [r7, #0]
 8002072:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002078:	2b00      	cmp	r3, #0
 800207a:	db0a      	blt.n	8002092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	b2da      	uxtb	r2, r3
 8002080:	490c      	ldr	r1, [pc, #48]	@ (80020b4 <__NVIC_SetPriority+0x4c>)
 8002082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002086:	0112      	lsls	r2, r2, #4
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	440b      	add	r3, r1
 800208c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002090:	e00a      	b.n	80020a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4908      	ldr	r1, [pc, #32]	@ (80020b8 <__NVIC_SetPriority+0x50>)
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	3b04      	subs	r3, #4
 80020a0:	0112      	lsls	r2, r2, #4
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	440b      	add	r3, r1
 80020a6:	761a      	strb	r2, [r3, #24]
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	e000e100 	.word	0xe000e100
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	@ 0x24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f003 0307 	and.w	r3, r3, #7
 80020ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f1c3 0307 	rsb	r3, r3, #7
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	bf28      	it	cs
 80020da:	2304      	movcs	r3, #4
 80020dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	3304      	adds	r3, #4
 80020e2:	2b06      	cmp	r3, #6
 80020e4:	d902      	bls.n	80020ec <NVIC_EncodePriority+0x30>
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	3b03      	subs	r3, #3
 80020ea:	e000      	b.n	80020ee <NVIC_EncodePriority+0x32>
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43da      	mvns	r2, r3
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	401a      	ands	r2, r3
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	fa01 f303 	lsl.w	r3, r1, r3
 800210e:	43d9      	mvns	r1, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	4313      	orrs	r3, r2
         );
}
 8002116:	4618      	mov	r0, r3
 8002118:	3724      	adds	r7, #36	@ 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
	...

08002124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3b01      	subs	r3, #1
 8002130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002134:	d301      	bcc.n	800213a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002136:	2301      	movs	r3, #1
 8002138:	e00f      	b.n	800215a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213a:	4a0a      	ldr	r2, [pc, #40]	@ (8002164 <SysTick_Config+0x40>)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	3b01      	subs	r3, #1
 8002140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002142:	210f      	movs	r1, #15
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f7ff ff8e 	bl	8002068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800214c:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <SysTick_Config+0x40>)
 800214e:	2200      	movs	r2, #0
 8002150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002152:	4b04      	ldr	r3, [pc, #16]	@ (8002164 <SysTick_Config+0x40>)
 8002154:	2207      	movs	r2, #7
 8002156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	e000e010 	.word	0xe000e010

08002168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff ff29 	bl	8001fc8 <__NVIC_SetPriorityGrouping>
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
 800218a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800218c:	f7ff ff40 	bl	8002010 <__NVIC_GetPriorityGrouping>
 8002190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	6978      	ldr	r0, [r7, #20]
 8002198:	f7ff ff90 	bl	80020bc <NVIC_EncodePriority>
 800219c:	4602      	mov	r2, r0
 800219e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021a2:	4611      	mov	r1, r2
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff5f 	bl	8002068 <__NVIC_SetPriority>
}
 80021aa:	bf00      	nop
 80021ac:	3718      	adds	r7, #24
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	4603      	mov	r3, r0
 80021ba:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff ff33 	bl	800202c <__NVIC_EnableIRQ>
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b082      	sub	sp, #8
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff ffa4 	bl	8002124 <SysTick_Config>
 80021dc:	4603      	mov	r3, r0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e069      	b.n	80022ce <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d102      	bne.n	800220c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7fe fc92 	bl	8000b30 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6819      	ldr	r1, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	4b2a      	ldr	r3, [pc, #168]	@ (80022d8 <HAL_DCMI_Init+0xf0>)
 800222e:	400b      	ands	r3, r1
 8002230:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6819      	ldr	r1, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002246:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002252:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	699b      	ldr	r3, [r3, #24]
 8002258:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800225e:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002264:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800226a:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002270:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002276:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	2b10      	cmp	r3, #16
 8002286:	d112      	bne.n	80022ae <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7f1b      	ldrb	r3, [r3, #28]
 800228c:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7f5b      	ldrb	r3, [r3, #29]
 8002292:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002294:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7f9b      	ldrb	r3, [r3, #30]
 800229a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800229c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7fdb      	ldrb	r3, [r3, #31]
 80022a4:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80022aa:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80022ac:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 021e 	orr.w	r2, r2, #30
 80022bc:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	ffe0f007 	.word	0xffe0f007

080022dc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d016      	beq.n	8002324 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2204      	movs	r2, #4
 80022fc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	f043 0202 	orr.w	r2, r3, #2
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2204      	movs	r2, #4
 800230e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002316:	4a31      	ldr	r2, [pc, #196]	@ (80023dc <HAL_DCMI_IRQHandler+0x100>)
 8002318:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f8a4 	bl	800246c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d016      	beq.n	800235c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2202      	movs	r2, #2
 8002334:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233a:	f043 0201 	orr.w	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2204      	movs	r2, #4
 8002346:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800234e:	4a23      	ldr	r2, [pc, #140]	@ (80023dc <HAL_DCMI_IRQHandler+0x100>)
 8002350:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002356:	4618      	mov	r0, r3
 8002358:	f000 f888 	bl	800246c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2210      	movs	r2, #16
 800236c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f840 	bl	80023f4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d006      	beq.n	800238c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2208      	movs	r2, #8
 8002384:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f83e 	bl	8002408 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d01d      	beq.n	80023d2 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d107      	bne.n	80023b4 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 021e 	bic.w	r2, r2, #30
 80023b2:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0201 	bic.w	r2, r2, #1
 80023c2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2201      	movs	r2, #1
 80023ca:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f825 	bl	800241c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80023d2:	bf00      	nop
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	08002431 	.word	0x08002431

080023e0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800243c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002444:	2b02      	cmp	r3, #2
 8002446:	d009      	beq.n	800245c <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002454:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f7ff ffbf 	bl	80023e0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8002462:	bf00      	nop
 8002464:	3710      	adds	r7, #16
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e237      	b.n	80028ee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002484:	b2db      	uxtb	r3, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d004      	beq.n	8002494 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2280      	movs	r2, #128	@ 0x80
 800248e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e22c      	b.n	80028ee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a5c      	ldr	r2, [pc, #368]	@ (800260c <HAL_DMA_Abort_IT+0x1a0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d04a      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002610 <HAL_DMA_Abort_IT+0x1a4>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d045      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a59      	ldr	r2, [pc, #356]	@ (8002614 <HAL_DMA_Abort_IT+0x1a8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d040      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a58      	ldr	r2, [pc, #352]	@ (8002618 <HAL_DMA_Abort_IT+0x1ac>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d03b      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a56      	ldr	r2, [pc, #344]	@ (800261c <HAL_DMA_Abort_IT+0x1b0>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d036      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a55      	ldr	r2, [pc, #340]	@ (8002620 <HAL_DMA_Abort_IT+0x1b4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d031      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a53      	ldr	r2, [pc, #332]	@ (8002624 <HAL_DMA_Abort_IT+0x1b8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d02c      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a52      	ldr	r2, [pc, #328]	@ (8002628 <HAL_DMA_Abort_IT+0x1bc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d027      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a50      	ldr	r2, [pc, #320]	@ (800262c <HAL_DMA_Abort_IT+0x1c0>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d022      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a4f      	ldr	r2, [pc, #316]	@ (8002630 <HAL_DMA_Abort_IT+0x1c4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d01d      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002634 <HAL_DMA_Abort_IT+0x1c8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d018      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a4c      	ldr	r2, [pc, #304]	@ (8002638 <HAL_DMA_Abort_IT+0x1cc>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d013      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a4a      	ldr	r2, [pc, #296]	@ (800263c <HAL_DMA_Abort_IT+0x1d0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00e      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a49      	ldr	r2, [pc, #292]	@ (8002640 <HAL_DMA_Abort_IT+0x1d4>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d009      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a47      	ldr	r2, [pc, #284]	@ (8002644 <HAL_DMA_Abort_IT+0x1d8>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d004      	beq.n	8002534 <HAL_DMA_Abort_IT+0xc8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a46      	ldr	r2, [pc, #280]	@ (8002648 <HAL_DMA_Abort_IT+0x1dc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d101      	bne.n	8002538 <HAL_DMA_Abort_IT+0xcc>
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <HAL_DMA_Abort_IT+0xce>
 8002538:	2300      	movs	r3, #0
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8086 	beq.w	800264c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2204      	movs	r2, #4
 8002544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a2f      	ldr	r2, [pc, #188]	@ (800260c <HAL_DMA_Abort_IT+0x1a0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d04a      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a2e      	ldr	r2, [pc, #184]	@ (8002610 <HAL_DMA_Abort_IT+0x1a4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d045      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a2c      	ldr	r2, [pc, #176]	@ (8002614 <HAL_DMA_Abort_IT+0x1a8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d040      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a2b      	ldr	r2, [pc, #172]	@ (8002618 <HAL_DMA_Abort_IT+0x1ac>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d03b      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a29      	ldr	r2, [pc, #164]	@ (800261c <HAL_DMA_Abort_IT+0x1b0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d036      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a28      	ldr	r2, [pc, #160]	@ (8002620 <HAL_DMA_Abort_IT+0x1b4>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d031      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a26      	ldr	r2, [pc, #152]	@ (8002624 <HAL_DMA_Abort_IT+0x1b8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d02c      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a25      	ldr	r2, [pc, #148]	@ (8002628 <HAL_DMA_Abort_IT+0x1bc>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d027      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a23      	ldr	r2, [pc, #140]	@ (800262c <HAL_DMA_Abort_IT+0x1c0>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d022      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a22      	ldr	r2, [pc, #136]	@ (8002630 <HAL_DMA_Abort_IT+0x1c4>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d01d      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a20      	ldr	r2, [pc, #128]	@ (8002634 <HAL_DMA_Abort_IT+0x1c8>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d018      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1f      	ldr	r2, [pc, #124]	@ (8002638 <HAL_DMA_Abort_IT+0x1cc>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d013      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a1d      	ldr	r2, [pc, #116]	@ (800263c <HAL_DMA_Abort_IT+0x1d0>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d00e      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002640 <HAL_DMA_Abort_IT+0x1d4>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d009      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a1a      	ldr	r2, [pc, #104]	@ (8002644 <HAL_DMA_Abort_IT+0x1d8>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d004      	beq.n	80025e8 <HAL_DMA_Abort_IT+0x17c>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a19      	ldr	r2, [pc, #100]	@ (8002648 <HAL_DMA_Abort_IT+0x1dc>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d108      	bne.n	80025fa <HAL_DMA_Abort_IT+0x18e>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e178      	b.n	80028ec <HAL_DMA_Abort_IT+0x480>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e16f      	b.n	80028ec <HAL_DMA_Abort_IT+0x480>
 800260c:	40020010 	.word	0x40020010
 8002610:	40020028 	.word	0x40020028
 8002614:	40020040 	.word	0x40020040
 8002618:	40020058 	.word	0x40020058
 800261c:	40020070 	.word	0x40020070
 8002620:	40020088 	.word	0x40020088
 8002624:	400200a0 	.word	0x400200a0
 8002628:	400200b8 	.word	0x400200b8
 800262c:	40020410 	.word	0x40020410
 8002630:	40020428 	.word	0x40020428
 8002634:	40020440 	.word	0x40020440
 8002638:	40020458 	.word	0x40020458
 800263c:	40020470 	.word	0x40020470
 8002640:	40020488 	.word	0x40020488
 8002644:	400204a0 	.word	0x400204a0
 8002648:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 020e 	bic.w	r2, r2, #14
 800265a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a6c      	ldr	r2, [pc, #432]	@ (8002814 <HAL_DMA_Abort_IT+0x3a8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d04a      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a6b      	ldr	r2, [pc, #428]	@ (8002818 <HAL_DMA_Abort_IT+0x3ac>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d045      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a69      	ldr	r2, [pc, #420]	@ (800281c <HAL_DMA_Abort_IT+0x3b0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d040      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a68      	ldr	r2, [pc, #416]	@ (8002820 <HAL_DMA_Abort_IT+0x3b4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d03b      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a66      	ldr	r2, [pc, #408]	@ (8002824 <HAL_DMA_Abort_IT+0x3b8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d036      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a65      	ldr	r2, [pc, #404]	@ (8002828 <HAL_DMA_Abort_IT+0x3bc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d031      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a63      	ldr	r2, [pc, #396]	@ (800282c <HAL_DMA_Abort_IT+0x3c0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02c      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a62      	ldr	r2, [pc, #392]	@ (8002830 <HAL_DMA_Abort_IT+0x3c4>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d027      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a60      	ldr	r2, [pc, #384]	@ (8002834 <HAL_DMA_Abort_IT+0x3c8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d022      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002838 <HAL_DMA_Abort_IT+0x3cc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d01d      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a5d      	ldr	r2, [pc, #372]	@ (800283c <HAL_DMA_Abort_IT+0x3d0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d018      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a5c      	ldr	r2, [pc, #368]	@ (8002840 <HAL_DMA_Abort_IT+0x3d4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d013      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a5a      	ldr	r2, [pc, #360]	@ (8002844 <HAL_DMA_Abort_IT+0x3d8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00e      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a59      	ldr	r2, [pc, #356]	@ (8002848 <HAL_DMA_Abort_IT+0x3dc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d009      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a57      	ldr	r2, [pc, #348]	@ (800284c <HAL_DMA_Abort_IT+0x3e0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d004      	beq.n	80026fc <HAL_DMA_Abort_IT+0x290>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a56      	ldr	r2, [pc, #344]	@ (8002850 <HAL_DMA_Abort_IT+0x3e4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d108      	bne.n	800270e <HAL_DMA_Abort_IT+0x2a2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e007      	b.n	800271e <HAL_DMA_Abort_IT+0x2b2>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0201 	bic.w	r2, r2, #1
 800271c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a3c      	ldr	r2, [pc, #240]	@ (8002814 <HAL_DMA_Abort_IT+0x3a8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d072      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a3a      	ldr	r2, [pc, #232]	@ (8002818 <HAL_DMA_Abort_IT+0x3ac>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d06d      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a39      	ldr	r2, [pc, #228]	@ (800281c <HAL_DMA_Abort_IT+0x3b0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d068      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a37      	ldr	r2, [pc, #220]	@ (8002820 <HAL_DMA_Abort_IT+0x3b4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d063      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a36      	ldr	r2, [pc, #216]	@ (8002824 <HAL_DMA_Abort_IT+0x3b8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d05e      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a34      	ldr	r2, [pc, #208]	@ (8002828 <HAL_DMA_Abort_IT+0x3bc>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d059      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a33      	ldr	r2, [pc, #204]	@ (800282c <HAL_DMA_Abort_IT+0x3c0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d054      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a31      	ldr	r2, [pc, #196]	@ (8002830 <HAL_DMA_Abort_IT+0x3c4>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d04f      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a30      	ldr	r2, [pc, #192]	@ (8002834 <HAL_DMA_Abort_IT+0x3c8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d04a      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a2e      	ldr	r2, [pc, #184]	@ (8002838 <HAL_DMA_Abort_IT+0x3cc>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d045      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a2d      	ldr	r2, [pc, #180]	@ (800283c <HAL_DMA_Abort_IT+0x3d0>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d040      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a2b      	ldr	r2, [pc, #172]	@ (8002840 <HAL_DMA_Abort_IT+0x3d4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d03b      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a2a      	ldr	r2, [pc, #168]	@ (8002844 <HAL_DMA_Abort_IT+0x3d8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d036      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a28      	ldr	r2, [pc, #160]	@ (8002848 <HAL_DMA_Abort_IT+0x3dc>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d031      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a27      	ldr	r2, [pc, #156]	@ (800284c <HAL_DMA_Abort_IT+0x3e0>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d02c      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a25      	ldr	r2, [pc, #148]	@ (8002850 <HAL_DMA_Abort_IT+0x3e4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d027      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a24      	ldr	r2, [pc, #144]	@ (8002854 <HAL_DMA_Abort_IT+0x3e8>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a22      	ldr	r2, [pc, #136]	@ (8002858 <HAL_DMA_Abort_IT+0x3ec>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01d      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a21      	ldr	r2, [pc, #132]	@ (800285c <HAL_DMA_Abort_IT+0x3f0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d018      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002860 <HAL_DMA_Abort_IT+0x3f4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a1e      	ldr	r2, [pc, #120]	@ (8002864 <HAL_DMA_Abort_IT+0x3f8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002868 <HAL_DMA_Abort_IT+0x3fc>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a1b      	ldr	r2, [pc, #108]	@ (800286c <HAL_DMA_Abort_IT+0x400>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <HAL_DMA_Abort_IT+0x3a2>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a19      	ldr	r2, [pc, #100]	@ (8002870 <HAL_DMA_Abort_IT+0x404>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d132      	bne.n	8002874 <HAL_DMA_Abort_IT+0x408>
 800280e:	2301      	movs	r3, #1
 8002810:	e031      	b.n	8002876 <HAL_DMA_Abort_IT+0x40a>
 8002812:	bf00      	nop
 8002814:	40020010 	.word	0x40020010
 8002818:	40020028 	.word	0x40020028
 800281c:	40020040 	.word	0x40020040
 8002820:	40020058 	.word	0x40020058
 8002824:	40020070 	.word	0x40020070
 8002828:	40020088 	.word	0x40020088
 800282c:	400200a0 	.word	0x400200a0
 8002830:	400200b8 	.word	0x400200b8
 8002834:	40020410 	.word	0x40020410
 8002838:	40020428 	.word	0x40020428
 800283c:	40020440 	.word	0x40020440
 8002840:	40020458 	.word	0x40020458
 8002844:	40020470 	.word	0x40020470
 8002848:	40020488 	.word	0x40020488
 800284c:	400204a0 	.word	0x400204a0
 8002850:	400204b8 	.word	0x400204b8
 8002854:	58025408 	.word	0x58025408
 8002858:	5802541c 	.word	0x5802541c
 800285c:	58025430 	.word	0x58025430
 8002860:	58025444 	.word	0x58025444
 8002864:	58025458 	.word	0x58025458
 8002868:	5802546c 	.word	0x5802546c
 800286c:	58025480 	.word	0x58025480
 8002870:	58025494 	.word	0x58025494
 8002874:	2300      	movs	r3, #0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d028      	beq.n	80028cc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002884:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002888:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	2201      	movs	r2, #1
 800289a:	409a      	lsls	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028a8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d00c      	beq.n	80028cc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028c0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028ca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop

080028f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e0e3      	b.n	8002ad2 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002910:	2b00      	cmp	r3, #0
 8002912:	d106      	bne.n	8002922 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2223      	movs	r2, #35	@ 0x23
 8002918:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7fe fa2b 	bl	8000d78 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002922:	4b6e      	ldr	r3, [pc, #440]	@ (8002adc <HAL_ETH_Init+0x1e4>)
 8002924:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002928:	4a6c      	ldr	r2, [pc, #432]	@ (8002adc <HAL_ETH_Init+0x1e4>)
 800292a:	f043 0302 	orr.w	r3, r3, #2
 800292e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002932:	4b6a      	ldr	r3, [pc, #424]	@ (8002adc <HAL_ETH_Init+0x1e4>)
 8002934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	7a1b      	ldrb	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d103      	bne.n	8002950 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002948:	2000      	movs	r0, #0
 800294a:	f7ff fb29 	bl	8001fa0 <HAL_SYSCFG_ETHInterfaceSelect>
 800294e:	e003      	b.n	8002958 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002950:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002954:	f7ff fb24 	bl	8001fa0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002958:	4b61      	ldr	r3, [pc, #388]	@ (8002ae0 <HAL_ETH_Init+0x1e8>)
 800295a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	f043 0301 	orr.w	r3, r3, #1
 800296e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002972:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002974:	f7ff fad8 	bl	8001f28 <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800297a:	e011      	b.n	80029a0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800297c:	f7ff fad4 	bl	8001f28 <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800298a:	d909      	bls.n	80029a0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2204      	movs	r2, #4
 8002990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	22e0      	movs	r2, #224	@ 0xe0
 8002998:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e098      	b.n	8002ad2 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1e4      	bne.n	800297c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f89e 	bl	8002af4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80029b8:	f002 fcf2 	bl	80053a0 <HAL_RCC_GetHCLKFreq>
 80029bc:	4603      	mov	r3, r0
 80029be:	4a49      	ldr	r2, [pc, #292]	@ (8002ae4 <HAL_ETH_Init+0x1ec>)
 80029c0:	fba2 2303 	umull	r2, r3, r2, r3
 80029c4:	0c9a      	lsrs	r2, r3, #18
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3a01      	subs	r2, #1
 80029cc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 fa81 	bl	8002ed8 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029de:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80029e2:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80029ee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029f2:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d009      	beq.n	8002a16 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2201      	movs	r2, #1
 8002a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	22e0      	movs	r2, #224	@ 0xe0
 8002a0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e05d      	b.n	8002ad2 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a1e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002a22:	4b31      	ldr	r3, [pc, #196]	@ (8002ae8 <HAL_ETH_Init+0x1f0>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6952      	ldr	r2, [r2, #20]
 8002a2a:	0051      	lsls	r1, r2, #1
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a36:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fae9 	bl	8003012 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f000 fb2f 	bl	80030a4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	3305      	adds	r3, #5
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	021a      	lsls	r2, r3, #8
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	3304      	adds	r3, #4
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	4619      	mov	r1, r3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	3303      	adds	r3, #3
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	061a      	lsls	r2, r3, #24
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	3302      	adds	r3, #2
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	041b      	lsls	r3, r3, #16
 8002a78:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a84:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002a92:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002a94:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <HAL_ETH_Init+0x1f4>)
 8002aa6:	430b      	orrs	r3, r1
 8002aa8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <HAL_ETH_Init+0x1f8>)
 8002aba:	430b      	orrs	r3, r1
 8002abc:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2210      	movs	r2, #16
 8002acc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	58000400 	.word	0x58000400
 8002ae4:	431bde83 	.word	0x431bde83
 8002ae8:	ffff8001 	.word	0xffff8001
 8002aec:	0c020060 	.word	0x0c020060
 8002af0:	0c20c000 	.word	0x0c20c000

08002af4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b04:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002b0e:	f002 fc47 	bl	80053a0 <HAL_RCC_GetHCLKFreq>
 8002b12:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	4a1a      	ldr	r2, [pc, #104]	@ (8002b80 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d804      	bhi.n	8002b26 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	e022      	b.n	8002b6c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	4a16      	ldr	r2, [pc, #88]	@ (8002b84 <HAL_ETH_SetMDIOClockRange+0x90>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d204      	bcs.n	8002b38 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	e019      	b.n	8002b6c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	4a13      	ldr	r2, [pc, #76]	@ (8002b88 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d915      	bls.n	8002b6c <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	4a12      	ldr	r2, [pc, #72]	@ (8002b8c <HAL_ETH_SetMDIOClockRange+0x98>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d804      	bhi.n	8002b52 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	e00c      	b.n	8002b6c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	4a0e      	ldr	r2, [pc, #56]	@ (8002b90 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d804      	bhi.n	8002b64 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e003      	b.n	8002b6c <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002b6a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	02160ebf 	.word	0x02160ebf
 8002b84:	03938700 	.word	0x03938700
 8002b88:	05f5e0ff 	.word	0x05f5e0ff
 8002b8c:	08f0d17f 	.word	0x08f0d17f
 8002b90:	0ee6b27f 	.word	0x0ee6b27f

08002b94 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002ba6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	791b      	ldrb	r3, [r3, #4]
 8002bac:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002bae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	7b1b      	ldrb	r3, [r3, #12]
 8002bb4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002bb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	7b5b      	ldrb	r3, [r3, #13]
 8002bbc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002bbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	7b9b      	ldrb	r3, [r3, #14]
 8002bc4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002bc6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	7bdb      	ldrb	r3, [r3, #15]
 8002bcc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002bce:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	7c12      	ldrb	r2, [r2, #16]
 8002bd4:	2a00      	cmp	r2, #0
 8002bd6:	d102      	bne.n	8002bde <ETH_SetMACConfig+0x4a>
 8002bd8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002bdc:	e000      	b.n	8002be0 <ETH_SetMACConfig+0x4c>
 8002bde:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002be0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	7c52      	ldrb	r2, [r2, #17]
 8002be6:	2a00      	cmp	r2, #0
 8002be8:	d102      	bne.n	8002bf0 <ETH_SetMACConfig+0x5c>
 8002bea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002bee:	e000      	b.n	8002bf2 <ETH_SetMACConfig+0x5e>
 8002bf0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002bf2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	7c9b      	ldrb	r3, [r3, #18]
 8002bf8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002bfa:	431a      	orrs	r2, r3
               macconf->Speed |
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002c00:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002c06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	7f1b      	ldrb	r3, [r3, #28]
 8002c0c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002c0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	7f5b      	ldrb	r3, [r3, #29]
 8002c14:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002c16:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	7f92      	ldrb	r2, [r2, #30]
 8002c1c:	2a00      	cmp	r2, #0
 8002c1e:	d102      	bne.n	8002c26 <ETH_SetMACConfig+0x92>
 8002c20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c24:	e000      	b.n	8002c28 <ETH_SetMACConfig+0x94>
 8002c26:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002c28:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	7fdb      	ldrb	r3, [r3, #31]
 8002c2e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002c30:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002c38:	2a00      	cmp	r2, #0
 8002c3a:	d102      	bne.n	8002c42 <ETH_SetMACConfig+0xae>
 8002c3c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002c40:	e000      	b.n	8002c44 <ETH_SetMACConfig+0xb0>
 8002c42:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002c44:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002c4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002c52:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002c54:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	4b56      	ldr	r3, [pc, #344]	@ (8002dc0 <ETH_SetMACConfig+0x22c>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	68f9      	ldr	r1, [r7, #12]
 8002c6e:	430b      	orrs	r3, r1
 8002c70:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c76:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002c7e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002c80:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002c88:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002c8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002c92:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002c94:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002c9c:	2a00      	cmp	r2, #0
 8002c9e:	d102      	bne.n	8002ca6 <ETH_SetMACConfig+0x112>
 8002ca0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ca4:	e000      	b.n	8002ca8 <ETH_SetMACConfig+0x114>
 8002ca6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002ca8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	4b42      	ldr	r3, [pc, #264]	@ (8002dc4 <ETH_SetMACConfig+0x230>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	6812      	ldr	r2, [r2, #0]
 8002cc0:	68f9      	ldr	r1, [r7, #12]
 8002cc2:	430b      	orrs	r3, r1
 8002cc4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ccc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68da      	ldr	r2, [r3, #12]
 8002cdc:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc8 <ETH_SetMACConfig+0x234>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	6812      	ldr	r2, [r2, #0]
 8002ce4:	68f9      	ldr	r1, [r7, #12]
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002cf0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002cf6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002cfe:	2a00      	cmp	r2, #0
 8002d00:	d101      	bne.n	8002d06 <ETH_SetMACConfig+0x172>
 8002d02:	2280      	movs	r2, #128	@ 0x80
 8002d04:	e000      	b.n	8002d08 <ETH_SetMACConfig+0x174>
 8002d06:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002d08:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d0e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d1a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002d1e:	4013      	ands	r3, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	68f9      	ldr	r1, [r7, #12]
 8002d26:	430b      	orrs	r3, r1
 8002d28:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002d30:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002d38:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d46:	f023 0103 	bic.w	r1, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002d5e:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002d74:	683a      	ldr	r2, [r7, #0]
 8002d76:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002d7a:	2a00      	cmp	r2, #0
 8002d7c:	d101      	bne.n	8002d82 <ETH_SetMACConfig+0x1ee>
 8002d7e:	2240      	movs	r2, #64	@ 0x40
 8002d80:	e000      	b.n	8002d84 <ETH_SetMACConfig+0x1f0>
 8002d82:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002d84:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002d8c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002d8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002d96:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002da4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	00048083 	.word	0x00048083
 8002dc4:	c0f88000 	.word	0xc0f88000
 8002dc8:	fffffef0 	.word	0xfffffef0

08002dcc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	4b38      	ldr	r3, [pc, #224]	@ (8002ec4 <ETH_SetDMAConfig+0xf8>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	6811      	ldr	r1, [r2, #0]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6812      	ldr	r2, [r2, #0]
 8002dec:	430b      	orrs	r3, r1
 8002dee:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002df2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	791b      	ldrb	r3, [r3, #4]
 8002df8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002dfe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	7b1b      	ldrb	r3, [r3, #12]
 8002e04:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002e06:	4313      	orrs	r3, r2
 8002e08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec8 <ETH_SetDMAConfig+0xfc>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	68f9      	ldr	r1, [r7, #12]
 8002e1e:	430b      	orrs	r3, r1
 8002e20:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e24:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	7b5b      	ldrb	r3, [r3, #13]
 8002e2a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e3c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8002e40:	4b22      	ldr	r3, [pc, #136]	@ (8002ecc <ETH_SetDMAConfig+0x100>)
 8002e42:	4013      	ands	r3, r2
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	68f9      	ldr	r1, [r7, #12]
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e50:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	7d1b      	ldrb	r3, [r3, #20]
 8002e5c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8002e5e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	7f5b      	ldrb	r3, [r3, #29]
 8002e64:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e72:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8002e76:	4b16      	ldr	r3, [pc, #88]	@ (8002ed0 <ETH_SetDMAConfig+0x104>)
 8002e78:	4013      	ands	r3, r2
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	68f9      	ldr	r1, [r7, #12]
 8002e80:	430b      	orrs	r3, r1
 8002e82:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002e86:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	7f1b      	ldrb	r3, [r3, #28]
 8002e8e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ea0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <ETH_SetDMAConfig+0x108>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	68f9      	ldr	r1, [r7, #12]
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002eb4:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8002eb8:	bf00      	nop
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	ffff87fd 	.word	0xffff87fd
 8002ec8:	ffff2ffe 	.word	0xffff2ffe
 8002ecc:	fffec000 	.word	0xfffec000
 8002ed0:	ffc0efef 	.word	0xffc0efef
 8002ed4:	7fc0ffff 	.word	0x7fc0ffff

08002ed8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b0a4      	sub	sp, #144	@ 0x90
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002eea:	2300      	movs	r3, #0
 8002eec:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002efc:	2301      	movs	r3, #1
 8002efe:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002f02:	2301      	movs	r3, #1
 8002f04:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f18:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8002f20:	2300      	movs	r3, #0
 8002f22:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8002f30:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8002f34:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8002f40:	2301      	movs	r3, #1
 8002f42:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8002f52:	2300      	movs	r3, #0
 8002f54:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002f70:	2320      	movs	r3, #32
 8002f72:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002f82:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f88:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f8c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002f94:	2302      	movs	r3, #2
 8002f96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002fbc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fde6 	bl	8002b94 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002fe2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002fe6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002fec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002ff0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8002ff8:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8002ffc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	4619      	mov	r1, r3
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff fee1 	bl	8002dcc <ETH_SetDMAConfig>
}
 800300a:	bf00      	nop
 800300c:	3790      	adds	r7, #144	@ 0x90
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003012:	b480      	push	{r7}
 8003014:	b085      	sub	sp, #20
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	e01d      	b.n	800305c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68d9      	ldr	r1, [r3, #12]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4613      	mov	r3, r2
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2200      	movs	r2, #0
 800303c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	2200      	movs	r2, #0
 8003042:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2200      	movs	r2, #0
 8003048:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800304a:	68b9      	ldr	r1, [r7, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	3206      	adds	r2, #6
 8003052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3301      	adds	r3, #1
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d9de      	bls.n	8003020 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003070:	461a      	mov	r2, r3
 8003072:	2303      	movs	r3, #3
 8003074:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003084:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003094:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003098:	bf00      	nop
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b085      	sub	sp, #20
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030ac:	2300      	movs	r3, #0
 80030ae:	60fb      	str	r3, [r7, #12]
 80030b0:	e023      	b.n	80030fa <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6919      	ldr	r1, [r3, #16]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4613      	mov	r3, r2
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	440b      	add	r3, r1
 80030c2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2200      	movs	r2, #0
 80030ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2200      	movs	r2, #0
 80030d4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2200      	movs	r2, #0
 80030da:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2200      	movs	r2, #0
 80030e0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2200      	movs	r2, #0
 80030e6:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80030e8:	68b9      	ldr	r1, [r7, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	3212      	adds	r2, #18
 80030f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	3301      	adds	r3, #1
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d9d8      	bls.n	80030b2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003126:	461a      	mov	r2, r3
 8003128:	2303      	movs	r3, #3
 800312a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800313a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800314e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
	...

08003160 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003160:	b480      	push	{r7}
 8003162:	b089      	sub	sp, #36	@ 0x24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800316e:	4b89      	ldr	r3, [pc, #548]	@ (8003394 <HAL_GPIO_Init+0x234>)
 8003170:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003172:	e194      	b.n	800349e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	2101      	movs	r1, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa01 f303 	lsl.w	r3, r1, r3
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	2b00      	cmp	r3, #0
 8003188:	f000 8186 	beq.w	8003498 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	2b01      	cmp	r3, #1
 8003196:	d005      	beq.n	80031a4 <HAL_GPIO_Init+0x44>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d130      	bne.n	8003206 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68da      	ldr	r2, [r3, #12]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031da:	2201      	movs	r2, #1
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4013      	ands	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f003 0201 	and.w	r2, r3, #1
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b03      	cmp	r3, #3
 8003210:	d017      	beq.n	8003242 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2203      	movs	r2, #3
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d123      	bne.n	8003296 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	08da      	lsrs	r2, r3, #3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	3208      	adds	r2, #8
 8003256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0307 	and.w	r3, r3, #7
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	220f      	movs	r2, #15
 8003266:	fa02 f303 	lsl.w	r3, r2, r3
 800326a:	43db      	mvns	r3, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4013      	ands	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	69b9      	ldr	r1, [r7, #24]
 8003292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0203 	and.w	r2, r3, #3
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	fa02 f303 	lsl.w	r3, r2, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	f000 80e0 	beq.w	8003498 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003398 <HAL_GPIO_Init+0x238>)
 80032da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80032de:	4a2e      	ldr	r2, [pc, #184]	@ (8003398 <HAL_GPIO_Init+0x238>)
 80032e0:	f043 0302 	orr.w	r3, r3, #2
 80032e4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80032e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003398 <HAL_GPIO_Init+0x238>)
 80032ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032f6:	4a29      	ldr	r2, [pc, #164]	@ (800339c <HAL_GPIO_Init+0x23c>)
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	089b      	lsrs	r3, r3, #2
 80032fc:	3302      	adds	r3, #2
 80032fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	220f      	movs	r2, #15
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a20      	ldr	r2, [pc, #128]	@ (80033a0 <HAL_GPIO_Init+0x240>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d052      	beq.n	80033c8 <HAL_GPIO_Init+0x268>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a1f      	ldr	r2, [pc, #124]	@ (80033a4 <HAL_GPIO_Init+0x244>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d031      	beq.n	800338e <HAL_GPIO_Init+0x22e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a1e      	ldr	r2, [pc, #120]	@ (80033a8 <HAL_GPIO_Init+0x248>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d02b      	beq.n	800338a <HAL_GPIO_Init+0x22a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a1d      	ldr	r2, [pc, #116]	@ (80033ac <HAL_GPIO_Init+0x24c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d025      	beq.n	8003386 <HAL_GPIO_Init+0x226>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a1c      	ldr	r2, [pc, #112]	@ (80033b0 <HAL_GPIO_Init+0x250>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d01f      	beq.n	8003382 <HAL_GPIO_Init+0x222>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a1b      	ldr	r2, [pc, #108]	@ (80033b4 <HAL_GPIO_Init+0x254>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d019      	beq.n	800337e <HAL_GPIO_Init+0x21e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a1a      	ldr	r2, [pc, #104]	@ (80033b8 <HAL_GPIO_Init+0x258>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_Init+0x21a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a19      	ldr	r2, [pc, #100]	@ (80033bc <HAL_GPIO_Init+0x25c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00d      	beq.n	8003376 <HAL_GPIO_Init+0x216>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a18      	ldr	r2, [pc, #96]	@ (80033c0 <HAL_GPIO_Init+0x260>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d007      	beq.n	8003372 <HAL_GPIO_Init+0x212>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a17      	ldr	r2, [pc, #92]	@ (80033c4 <HAL_GPIO_Init+0x264>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d101      	bne.n	800336e <HAL_GPIO_Init+0x20e>
 800336a:	2309      	movs	r3, #9
 800336c:	e02d      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800336e:	230a      	movs	r3, #10
 8003370:	e02b      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003372:	2308      	movs	r3, #8
 8003374:	e029      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003376:	2307      	movs	r3, #7
 8003378:	e027      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800337a:	2306      	movs	r3, #6
 800337c:	e025      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800337e:	2305      	movs	r3, #5
 8003380:	e023      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003382:	2304      	movs	r3, #4
 8003384:	e021      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003386:	2303      	movs	r3, #3
 8003388:	e01f      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800338a:	2302      	movs	r3, #2
 800338c:	e01d      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 800338e:	2301      	movs	r3, #1
 8003390:	e01b      	b.n	80033ca <HAL_GPIO_Init+0x26a>
 8003392:	bf00      	nop
 8003394:	58000080 	.word	0x58000080
 8003398:	58024400 	.word	0x58024400
 800339c:	58000400 	.word	0x58000400
 80033a0:	58020000 	.word	0x58020000
 80033a4:	58020400 	.word	0x58020400
 80033a8:	58020800 	.word	0x58020800
 80033ac:	58020c00 	.word	0x58020c00
 80033b0:	58021000 	.word	0x58021000
 80033b4:	58021400 	.word	0x58021400
 80033b8:	58021800 	.word	0x58021800
 80033bc:	58021c00 	.word	0x58021c00
 80033c0:	58022000 	.word	0x58022000
 80033c4:	58022400 	.word	0x58022400
 80033c8:	2300      	movs	r3, #0
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	f002 0203 	and.w	r2, r2, #3
 80033d0:	0092      	lsls	r2, r2, #2
 80033d2:	4093      	lsls	r3, r2
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033da:	4938      	ldr	r1, [pc, #224]	@ (80034bc <HAL_GPIO_Init+0x35c>)
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	089b      	lsrs	r3, r3, #2
 80033e0:	3302      	adds	r3, #2
 80033e2:	69ba      	ldr	r2, [r7, #24]
 80033e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800340e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003430:	2b00      	cmp	r3, #0
 8003432:	d003      	beq.n	800343c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800343c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	43db      	mvns	r3, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4013      	ands	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	3301      	adds	r3, #1
 800349c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f47f ae63 	bne.w	8003174 <HAL_GPIO_Init+0x14>
  }
}
 80034ae:	bf00      	nop
 80034b0:	bf00      	nop
 80034b2:	3724      	adds	r7, #36	@ 0x24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	58000400 	.word	0x58000400

080034c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
 80034cc:	4613      	mov	r3, r2
 80034ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034d0:	787b      	ldrb	r3, [r7, #1]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80034dc:	e003      	b.n	80034e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	041a      	lsls	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	619a      	str	r2, [r3, #24]
}
 80034e6:	bf00      	nop
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d101      	bne.n	8003506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e08b      	b.n	800361e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d106      	bne.n	8003520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd fe50 	bl	80011c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	@ 0x24
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0201 	bic.w	r2, r2, #1
 8003536:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003544:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003554:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d107      	bne.n	800356e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	e006      	b.n	800357c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800357a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	2b02      	cmp	r3, #2
 8003582:	d108      	bne.n	8003596 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003592:	605a      	str	r2, [r3, #4]
 8003594:	e007      	b.n	80035a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b1d      	ldr	r3, [pc, #116]	@ (8003628 <HAL_I2C_Init+0x134>)
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80035c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691a      	ldr	r2, [r3, #16]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69d9      	ldr	r1, [r3, #28]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1a      	ldr	r2, [r3, #32]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f042 0201 	orr.w	r2, r2, #1
 80035fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2220      	movs	r2, #32
 800360a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	02008000 	.word	0x02008000

0800362c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b088      	sub	sp, #32
 8003630:	af02      	add	r7, sp, #8
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	461a      	mov	r2, r3
 8003638:	460b      	mov	r3, r1
 800363a:	817b      	strh	r3, [r7, #10]
 800363c:	4613      	mov	r3, r2
 800363e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b20      	cmp	r3, #32
 800364a:	f040 80fd 	bne.w	8003848 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_I2C_Master_Transmit+0x30>
 8003658:	2302      	movs	r3, #2
 800365a:	e0f6      	b.n	800384a <HAL_I2C_Master_Transmit+0x21e>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003664:	f7fe fc60 	bl	8001f28 <HAL_GetTick>
 8003668:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	2319      	movs	r3, #25
 8003670:	2201      	movs	r2, #1
 8003672:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f000 fa0a 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e0e1      	b.n	800384a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2221      	movs	r2, #33	@ 0x21
 800368a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2210      	movs	r2, #16
 8003692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	893a      	ldrh	r2, [r7, #8]
 80036a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2bff      	cmp	r3, #255	@ 0xff
 80036b6:	d906      	bls.n	80036c6 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	22ff      	movs	r2, #255	@ 0xff
 80036bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80036be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	e007      	b.n	80036d6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80036d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80036d4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d024      	beq.n	8003728 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e2:	781a      	ldrb	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003706:	3b01      	subs	r3, #1
 8003708:	b29a      	uxth	r2, r3
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003712:	b2db      	uxtb	r3, r3
 8003714:	3301      	adds	r3, #1
 8003716:	b2da      	uxtb	r2, r3
 8003718:	8979      	ldrh	r1, [r7, #10]
 800371a:	4b4e      	ldr	r3, [pc, #312]	@ (8003854 <HAL_I2C_Master_Transmit+0x228>)
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 fc05 	bl	8003f30 <I2C_TransferConfig>
 8003726:	e066      	b.n	80037f6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800372c:	b2da      	uxtb	r2, r3
 800372e:	8979      	ldrh	r1, [r7, #10]
 8003730:	4b48      	ldr	r3, [pc, #288]	@ (8003854 <HAL_I2C_Master_Transmit+0x228>)
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 fbfa 	bl	8003f30 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800373c:	e05b      	b.n	80037f6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	6a39      	ldr	r1, [r7, #32]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f9fd 	bl	8003b42 <I2C_WaitOnTXISFlagUntilTimeout>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d001      	beq.n	8003752 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07b      	b.n	800384a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003756:	781a      	ldrb	r2, [r3, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	1c5a      	adds	r2, r3, #1
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d034      	beq.n	80037f6 <HAL_I2C_Master_Transmit+0x1ca>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003790:	2b00      	cmp	r3, #0
 8003792:	d130      	bne.n	80037f6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	2200      	movs	r2, #0
 800379c:	2180      	movs	r1, #128	@ 0x80
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f976 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e04d      	b.n	800384a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2bff      	cmp	r3, #255	@ 0xff
 80037b6:	d90e      	bls.n	80037d6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	22ff      	movs	r2, #255	@ 0xff
 80037bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	8979      	ldrh	r1, [r7, #10]
 80037c6:	2300      	movs	r3, #0
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fbae 	bl	8003f30 <I2C_TransferConfig>
 80037d4:	e00f      	b.n	80037f6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	8979      	ldrh	r1, [r7, #10]
 80037e8:	2300      	movs	r3, #0
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 fb9d 	bl	8003f30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d19e      	bne.n	800373e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	6a39      	ldr	r1, [r7, #32]
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f9e3 	bl	8003bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e01a      	b.n	800384a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2220      	movs	r2, #32
 800381a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <HAL_I2C_Master_Transmit+0x22c>)
 8003828:	400b      	ands	r3, r1
 800382a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	e000      	b.n	800384a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003848:	2302      	movs	r3, #2
  }
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	80002000 	.word	0x80002000
 8003858:	fe00e800 	.word	0xfe00e800

0800385c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af02      	add	r7, sp, #8
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	607a      	str	r2, [r7, #4]
 8003866:	461a      	mov	r2, r3
 8003868:	460b      	mov	r3, r1
 800386a:	817b      	strh	r3, [r7, #10]
 800386c:	4613      	mov	r3, r2
 800386e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b20      	cmp	r3, #32
 800387a:	f040 80db 	bne.w	8003a34 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_I2C_Master_Receive+0x30>
 8003888:	2302      	movs	r3, #2
 800388a:	e0d4      	b.n	8003a36 <HAL_I2C_Master_Receive+0x1da>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003894:	f7fe fb48 	bl	8001f28 <HAL_GetTick>
 8003898:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	2319      	movs	r3, #25
 80038a0:	2201      	movs	r2, #1
 80038a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 f8f2 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e0bf      	b.n	8003a36 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2222      	movs	r2, #34	@ 0x22
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2210      	movs	r2, #16
 80038c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	893a      	ldrh	r2, [r7, #8]
 80038d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	2bff      	cmp	r3, #255	@ 0xff
 80038e6:	d90e      	bls.n	8003906 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	22ff      	movs	r2, #255	@ 0xff
 80038ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	8979      	ldrh	r1, [r7, #10]
 80038f6:	4b52      	ldr	r3, [pc, #328]	@ (8003a40 <HAL_I2C_Master_Receive+0x1e4>)
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 fb16 	bl	8003f30 <I2C_TransferConfig>
 8003904:	e06d      	b.n	80039e2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003914:	b2da      	uxtb	r2, r3
 8003916:	8979      	ldrh	r1, [r7, #10]
 8003918:	4b49      	ldr	r3, [pc, #292]	@ (8003a40 <HAL_I2C_Master_Receive+0x1e4>)
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 fb05 	bl	8003f30 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003926:	e05c      	b.n	80039e2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	6a39      	ldr	r1, [r7, #32]
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	f000 f993 	bl	8003c58 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d001      	beq.n	800393c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e07c      	b.n	8003a36 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394e:	1c5a      	adds	r2, r3, #1
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003958:	3b01      	subs	r3, #1
 800395a:	b29a      	uxth	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	3b01      	subs	r3, #1
 8003968:	b29a      	uxth	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003972:	b29b      	uxth	r3, r3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d034      	beq.n	80039e2 <HAL_I2C_Master_Receive+0x186>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800397c:	2b00      	cmp	r3, #0
 800397e:	d130      	bne.n	80039e2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	6a3b      	ldr	r3, [r7, #32]
 8003986:	2200      	movs	r2, #0
 8003988:	2180      	movs	r1, #128	@ 0x80
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f880 	bl	8003a90 <I2C_WaitOnFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e04d      	b.n	8003a36 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800399e:	b29b      	uxth	r3, r3
 80039a0:	2bff      	cmp	r3, #255	@ 0xff
 80039a2:	d90e      	bls.n	80039c2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	22ff      	movs	r2, #255	@ 0xff
 80039a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ae:	b2da      	uxtb	r2, r3
 80039b0:	8979      	ldrh	r1, [r7, #10]
 80039b2:	2300      	movs	r3, #0
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039ba:	68f8      	ldr	r0, [r7, #12]
 80039bc:	f000 fab8 	bl	8003f30 <I2C_TransferConfig>
 80039c0:	e00f      	b.n	80039e2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039c6:	b29a      	uxth	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	8979      	ldrh	r1, [r7, #10]
 80039d4:	2300      	movs	r3, #0
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 faa7 	bl	8003f30 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d19d      	bne.n	8003928 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	6a39      	ldr	r1, [r7, #32]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f8ed 	bl	8003bd0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e01a      	b.n	8003a36 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2220      	movs	r2, #32
 8003a06:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	6859      	ldr	r1, [r3, #4]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <HAL_I2C_Master_Receive+0x1e8>)
 8003a14:	400b      	ands	r3, r1
 8003a16:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	e000      	b.n	8003a36 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003a34:	2302      	movs	r3, #2
  }
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3718      	adds	r7, #24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	80002400 	.word	0x80002400
 8003a44:	fe00e800 	.word	0xfe00e800

08003a48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	f003 0302 	and.w	r3, r3, #2
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d103      	bne.n	8003a66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2200      	movs	r2, #0
 8003a64:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d007      	beq.n	8003a84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	619a      	str	r2, [r3, #24]
  }
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003aa0:	e03b      	b.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	6839      	ldr	r1, [r7, #0]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f962 	bl	8003d70 <I2C_IsErrorOccurred>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e041      	b.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d02d      	beq.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003abe:	f7fe fa33 	bl	8001f28 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d302      	bcc.n	8003ad4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d122      	bne.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699a      	ldr	r2, [r3, #24]
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4013      	ands	r3, r2
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	461a      	mov	r2, r3
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d113      	bne.n	8003b1a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af6:	f043 0220 	orr.w	r2, r3, #32
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e00f      	b.n	8003b3a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699a      	ldr	r2, [r3, #24]
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	4013      	ands	r3, r2
 8003b24:	68ba      	ldr	r2, [r7, #8]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	bf0c      	ite	eq
 8003b2a:	2301      	moveq	r3, #1
 8003b2c:	2300      	movne	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d0b4      	beq.n	8003aa2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b4e:	e033      	b.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68b9      	ldr	r1, [r7, #8]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 f90b 	bl	8003d70 <I2C_IsErrorOccurred>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e031      	b.n	8003bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d025      	beq.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b6c:	f7fe f9dc 	bl	8001f28 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d302      	bcc.n	8003b82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d11a      	bne.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d013      	beq.n	8003bb8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b94:	f043 0220 	orr.w	r2, r3, #32
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e007      	b.n	8003bc8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d1c4      	bne.n	8003b50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3710      	adds	r7, #16
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bdc:	e02f      	b.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	68b9      	ldr	r1, [r7, #8]
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 f8c4 	bl	8003d70 <I2C_IsErrorOccurred>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e02d      	b.n	8003c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf2:	f7fe f999 	bl	8001f28 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d302      	bcc.n	8003c08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d11a      	bne.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d013      	beq.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1a:	f043 0220 	orr.w	r2, r3, #32
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2220      	movs	r2, #32
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e007      	b.n	8003c4e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	f003 0320 	and.w	r3, r3, #32
 8003c48:	2b20      	cmp	r3, #32
 8003c4a:	d1c8      	bne.n	8003bde <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3710      	adds	r7, #16
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003c68:	e071      	b.n	8003d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68b9      	ldr	r1, [r7, #8]
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 f87e 	bl	8003d70 <I2C_IsErrorOccurred>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	f003 0320 	and.w	r3, r3, #32
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	d13b      	bne.n	8003d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8003c8c:	7dfb      	ldrb	r3, [r7, #23]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d138      	bne.n	8003d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d105      	bne.n	8003cac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f003 0310 	and.w	r3, r3, #16
 8003cb6:	2b10      	cmp	r3, #16
 8003cb8:	d121      	bne.n	8003cfe <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2210      	movs	r2, #16
 8003cc0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2204      	movs	r2, #4
 8003cc6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	6859      	ldr	r1, [r3, #4]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	4b24      	ldr	r3, [pc, #144]	@ (8003d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8003cdc:	400b      	ands	r3, r1
 8003cde:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	75fb      	strb	r3, [r7, #23]
 8003cfc:	e002      	b.n	8003d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8003d04:	f7fe f910 	bl	8001f28 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d302      	bcc.n	8003d1a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d119      	bne.n	8003d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d116      	bne.n	8003d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	f003 0304 	and.w	r3, r3, #4
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d00f      	beq.n	8003d4e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	f043 0220 	orr.w	r2, r3, #32
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f003 0304 	and.w	r3, r3, #4
 8003d58:	2b04      	cmp	r3, #4
 8003d5a:	d002      	beq.n	8003d62 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d083      	beq.n	8003c6a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8003d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	fe00e800 	.word	0xfe00e800

08003d70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	@ 0x28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f003 0310 	and.w	r3, r3, #16
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d068      	beq.n	8003e6e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2210      	movs	r2, #16
 8003da2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003da4:	e049      	b.n	8003e3a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dac:	d045      	beq.n	8003e3a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003dae:	f7fe f8bb 	bl	8001f28 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	68ba      	ldr	r2, [r7, #8]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d302      	bcc.n	8003dc4 <I2C_IsErrorOccurred+0x54>
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d13a      	bne.n	8003e3a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003de2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003de6:	d121      	bne.n	8003e2c <I2C_IsErrorOccurred+0xbc>
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dee:	d01d      	beq.n	8003e2c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d01a      	beq.n	8003e2c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685a      	ldr	r2, [r3, #4]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e04:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e06:	f7fe f88f 	bl	8001f28 <HAL_GetTick>
 8003e0a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e0c:	e00e      	b.n	8003e2c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e0e:	f7fe f88b 	bl	8001f28 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b19      	cmp	r3, #25
 8003e1a:	d907      	bls.n	8003e2c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	f043 0320 	orr.w	r3, r3, #32
 8003e22:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003e2a:	e006      	b.n	8003e3a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	f003 0320 	and.w	r3, r3, #32
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d1e9      	bne.n	8003e0e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	f003 0320 	and.w	r3, r3, #32
 8003e44:	2b20      	cmp	r3, #32
 8003e46:	d003      	beq.n	8003e50 <I2C_IsErrorOccurred+0xe0>
 8003e48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d0aa      	beq.n	8003da6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d103      	bne.n	8003e60 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	f043 0304 	orr.w	r3, r3, #4
 8003e66:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d00b      	beq.n	8003e98 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	f043 0301 	orr.w	r3, r3, #1
 8003e86:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003e90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00b      	beq.n	8003eba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ea2:	6a3b      	ldr	r3, [r7, #32]
 8003ea4:	f043 0308 	orr.w	r3, r3, #8
 8003ea8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eb2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00b      	beq.n	8003edc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ec4:	6a3b      	ldr	r3, [r7, #32]
 8003ec6:	f043 0302 	orr.w	r3, r3, #2
 8003eca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003edc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01c      	beq.n	8003f1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f7ff fdaf 	bl	8003a48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6859      	ldr	r1, [r3, #4]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <I2C_IsErrorOccurred+0x1bc>)
 8003ef6:	400b      	ands	r3, r1
 8003ef8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003efe:	6a3b      	ldr	r3, [r7, #32]
 8003f00:	431a      	orrs	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2220      	movs	r2, #32
 8003f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3728      	adds	r7, #40	@ 0x28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	fe00e800 	.word	0xfe00e800

08003f30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	817b      	strh	r3, [r7, #10]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f42:	897b      	ldrh	r3, [r7, #10]
 8003f44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f48:	7a7b      	ldrb	r3, [r7, #9]
 8003f4a:	041b      	lsls	r3, r3, #16
 8003f4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	0d5b      	lsrs	r3, r3, #21
 8003f6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003f6e:	4b08      	ldr	r3, [pc, #32]	@ (8003f90 <I2C_TransferConfig+0x60>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	43db      	mvns	r3, r3
 8003f74:	ea02 0103 	and.w	r1, r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	697a      	ldr	r2, [r7, #20]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	03ff63ff 	.word	0x03ff63ff

08003f94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b20      	cmp	r3, #32
 8003fa8:	d138      	bne.n	800401c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e032      	b.n	800401e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2224      	movs	r2, #36	@ 0x24
 8003fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003fe6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6819      	ldr	r1, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	430a      	orrs	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0201 	orr.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e000      	b.n	800401e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
  }
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800402a:	b480      	push	{r7}
 800402c:	b085      	sub	sp, #20
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b20      	cmp	r3, #32
 800403e:	d139      	bne.n	80040b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800404a:	2302      	movs	r3, #2
 800404c:	e033      	b.n	80040b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2224      	movs	r2, #36	@ 0x24
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0201 	bic.w	r2, r2, #1
 800406c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800407c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	021b      	lsls	r3, r3, #8
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4313      	orrs	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f042 0201 	orr.w	r2, r2, #1
 800409e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	e000      	b.n	80040b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040b4:	2302      	movs	r3, #2
  }
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr

080040c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b086      	sub	sp, #24
 80040c6:	af02      	add	r7, sp, #8
 80040c8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e0fe      	b.n	80042d2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f7fd fdf1 	bl	8001cd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2203      	movs	r2, #3
 80040f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f005 fcc0 	bl	8009a80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6818      	ldr	r0, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	7c1a      	ldrb	r2, [r3, #16]
 8004108:	f88d 2000 	strb.w	r2, [sp]
 800410c:	3304      	adds	r3, #4
 800410e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004110:	f005 fc44 	bl	800999c <USB_CoreInit>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d005      	beq.n	8004126 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e0d5      	b.n	80042d2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f005 fcb8 	bl	8009aa2 <USB_SetCurrentMode>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d005      	beq.n	8004144 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e0c6      	b.n	80042d2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004144:	2300      	movs	r3, #0
 8004146:	73fb      	strb	r3, [r7, #15]
 8004148:	e04a      	b.n	80041e0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800414a:	7bfa      	ldrb	r2, [r7, #15]
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	4613      	mov	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4413      	add	r3, r2
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	440b      	add	r3, r1
 8004158:	3315      	adds	r3, #21
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800415e:	7bfa      	ldrb	r2, [r7, #15]
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	3314      	adds	r3, #20
 800416e:	7bfa      	ldrb	r2, [r7, #15]
 8004170:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004172:	7bfa      	ldrb	r2, [r7, #15]
 8004174:	7bfb      	ldrb	r3, [r7, #15]
 8004176:	b298      	uxth	r0, r3
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	332e      	adds	r3, #46	@ 0x2e
 8004186:	4602      	mov	r2, r0
 8004188:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800418a:	7bfa      	ldrb	r2, [r7, #15]
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	3318      	adds	r3, #24
 800419a:	2200      	movs	r2, #0
 800419c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800419e:	7bfa      	ldrb	r2, [r7, #15]
 80041a0:	6879      	ldr	r1, [r7, #4]
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	440b      	add	r3, r1
 80041ac:	331c      	adds	r3, #28
 80041ae:	2200      	movs	r2, #0
 80041b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80041b2:	7bfa      	ldrb	r2, [r7, #15]
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	3320      	adds	r3, #32
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80041c6:	7bfa      	ldrb	r2, [r7, #15]
 80041c8:	6879      	ldr	r1, [r7, #4]
 80041ca:	4613      	mov	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	3324      	adds	r3, #36	@ 0x24
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	3301      	adds	r3, #1
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	791b      	ldrb	r3, [r3, #4]
 80041e4:	7bfa      	ldrb	r2, [r7, #15]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d3af      	bcc.n	800414a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041ea:	2300      	movs	r3, #0
 80041ec:	73fb      	strb	r3, [r7, #15]
 80041ee:	e044      	b.n	800427a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041f0:	7bfa      	ldrb	r2, [r7, #15]
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	4613      	mov	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	4413      	add	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004202:	2200      	movs	r2, #0
 8004204:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004206:	7bfa      	ldrb	r2, [r7, #15]
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	4613      	mov	r3, r2
 800420c:	00db      	lsls	r3, r3, #3
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	440b      	add	r3, r1
 8004214:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004218:	7bfa      	ldrb	r2, [r7, #15]
 800421a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800421c:	7bfa      	ldrb	r2, [r7, #15]
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	4613      	mov	r3, r2
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	4413      	add	r3, r2
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800422e:	2200      	movs	r2, #0
 8004230:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004232:	7bfa      	ldrb	r2, [r7, #15]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	00db      	lsls	r3, r3, #3
 800423a:	4413      	add	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004248:	7bfa      	ldrb	r2, [r7, #15]
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	4613      	mov	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	4413      	add	r3, r2
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800425e:	7bfa      	ldrb	r2, [r7, #15]
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	4613      	mov	r3, r2
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	3301      	adds	r3, #1
 8004278:	73fb      	strb	r3, [r7, #15]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	791b      	ldrb	r3, [r3, #4]
 800427e:	7bfa      	ldrb	r2, [r7, #15]
 8004280:	429a      	cmp	r2, r3
 8004282:	d3b5      	bcc.n	80041f0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	7c1a      	ldrb	r2, [r3, #16]
 800428c:	f88d 2000 	strb.w	r2, [sp]
 8004290:	3304      	adds	r3, #4
 8004292:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004294:	f005 fc52 	bl	8009b3c <USB_DevInit>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e013      	b.n	80042d2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	7b1b      	ldrb	r3, [r3, #12]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d102      	bne.n	80042c6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f80b 	bl	80042dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f005 fe0d 	bl	8009eea <USB_DevDisconnect>

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800430a:	4b05      	ldr	r3, [pc, #20]	@ (8004320 <HAL_PCDEx_ActivateLPM+0x44>)
 800430c:	4313      	orrs	r3, r2
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	10000003 	.word	0x10000003

08004324 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800432c:	4b19      	ldr	r3, [pc, #100]	@ (8004394 <HAL_PWREx_ConfigSupply+0x70>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0304 	and.w	r3, r3, #4
 8004334:	2b04      	cmp	r3, #4
 8004336:	d00a      	beq.n	800434e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004338:	4b16      	ldr	r3, [pc, #88]	@ (8004394 <HAL_PWREx_ConfigSupply+0x70>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f003 0307 	and.w	r3, r3, #7
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d001      	beq.n	800434a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e01f      	b.n	800438a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	e01d      	b.n	800438a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800434e:	4b11      	ldr	r3, [pc, #68]	@ (8004394 <HAL_PWREx_ConfigSupply+0x70>)
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	f023 0207 	bic.w	r2, r3, #7
 8004356:	490f      	ldr	r1, [pc, #60]	@ (8004394 <HAL_PWREx_ConfigSupply+0x70>)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4313      	orrs	r3, r2
 800435c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800435e:	f7fd fde3 	bl	8001f28 <HAL_GetTick>
 8004362:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004364:	e009      	b.n	800437a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004366:	f7fd fddf 	bl	8001f28 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004374:	d901      	bls.n	800437a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e007      	b.n	800438a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800437a:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_PWREx_ConfigSupply+0x70>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004386:	d1ee      	bne.n	8004366 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	58024800 	.word	0x58024800

08004398 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004398:	b480      	push	{r7}
 800439a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800439c:	4b05      	ldr	r3, [pc, #20]	@ (80043b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a04      	ldr	r2, [pc, #16]	@ (80043b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80043a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043a6:	60d3      	str	r3, [r2, #12]
}
 80043a8:	bf00      	nop
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	58024800 	.word	0x58024800

080043b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08c      	sub	sp, #48	@ 0x30
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d102      	bne.n	80043cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	f000 bc48 	b.w	8004c5c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0301 	and.w	r3, r3, #1
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 8088 	beq.w	80044ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043da:	4b99      	ldr	r3, [pc, #612]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043e4:	4b96      	ldr	r3, [pc, #600]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 80043e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80043ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	d007      	beq.n	8004400 <HAL_RCC_OscConfig+0x48>
 80043f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043f2:	2b18      	cmp	r3, #24
 80043f4:	d111      	bne.n	800441a <HAL_RCC_OscConfig+0x62>
 80043f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f8:	f003 0303 	and.w	r3, r3, #3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d10c      	bne.n	800441a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004400:	4b8f      	ldr	r3, [pc, #572]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d06d      	beq.n	80044e8 <HAL_RCC_OscConfig+0x130>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d169      	bne.n	80044e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f000 bc21 	b.w	8004c5c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004422:	d106      	bne.n	8004432 <HAL_RCC_OscConfig+0x7a>
 8004424:	4b86      	ldr	r3, [pc, #536]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a85      	ldr	r2, [pc, #532]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 800442a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800442e:	6013      	str	r3, [r2, #0]
 8004430:	e02e      	b.n	8004490 <HAL_RCC_OscConfig+0xd8>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10c      	bne.n	8004454 <HAL_RCC_OscConfig+0x9c>
 800443a:	4b81      	ldr	r3, [pc, #516]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a80      	ldr	r2, [pc, #512]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	4b7e      	ldr	r3, [pc, #504]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a7d      	ldr	r2, [pc, #500]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 800444c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e01d      	b.n	8004490 <HAL_RCC_OscConfig+0xd8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800445c:	d10c      	bne.n	8004478 <HAL_RCC_OscConfig+0xc0>
 800445e:	4b78      	ldr	r3, [pc, #480]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a77      	ldr	r2, [pc, #476]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b75      	ldr	r3, [pc, #468]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a74      	ldr	r2, [pc, #464]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e00b      	b.n	8004490 <HAL_RCC_OscConfig+0xd8>
 8004478:	4b71      	ldr	r3, [pc, #452]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a70      	ldr	r2, [pc, #448]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 800447e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b6e      	ldr	r3, [pc, #440]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a6d      	ldr	r2, [pc, #436]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 800448a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800448e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d013      	beq.n	80044c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fd fd46 	bl	8001f28 <HAL_GetTick>
 800449c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a0:	f7fd fd42 	bl	8001f28 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	@ 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e3d4      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044b2:	4b63      	ldr	r3, [pc, #396]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0xe8>
 80044be:	e014      	b.n	80044ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c0:	f7fd fd32 	bl	8001f28 <HAL_GetTick>
 80044c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044c6:	e008      	b.n	80044da <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044c8:	f7fd fd2e 	bl	8001f28 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b64      	cmp	r3, #100	@ 0x64
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e3c0      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044da:	4b59      	ldr	r3, [pc, #356]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d1f0      	bne.n	80044c8 <HAL_RCC_OscConfig+0x110>
 80044e6:	e000      	b.n	80044ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80ca 	beq.w	800468c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044f8:	4b51      	ldr	r3, [pc, #324]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004500:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004502:	4b4f      	ldr	r3, [pc, #316]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004506:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <HAL_RCC_OscConfig+0x166>
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	2b18      	cmp	r3, #24
 8004512:	d156      	bne.n	80045c2 <HAL_RCC_OscConfig+0x20a>
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d151      	bne.n	80045c2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800451e:	4b48      	ldr	r3, [pc, #288]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0304 	and.w	r3, r3, #4
 8004526:	2b00      	cmp	r3, #0
 8004528:	d005      	beq.n	8004536 <HAL_RCC_OscConfig+0x17e>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68db      	ldr	r3, [r3, #12]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e392      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004536:	4b42      	ldr	r3, [pc, #264]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f023 0219 	bic.w	r2, r3, #25
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	493f      	ldr	r1, [pc, #252]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fd fcee 	bl	8001f28 <HAL_GetTick>
 800454c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004550:	f7fd fcea 	bl	8001f28 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e37c      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004562:	4b37      	ldr	r3, [pc, #220]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0304 	and.w	r3, r3, #4
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456e:	f7fd fd0b 	bl	8001f88 <HAL_GetREVID>
 8004572:	4603      	mov	r3, r0
 8004574:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004578:	4293      	cmp	r3, r2
 800457a:	d817      	bhi.n	80045ac <HAL_RCC_OscConfig+0x1f4>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d108      	bne.n	8004596 <HAL_RCC_OscConfig+0x1de>
 8004584:	4b2e      	ldr	r3, [pc, #184]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800458c:	4a2c      	ldr	r2, [pc, #176]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 800458e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004592:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004594:	e07a      	b.n	800468c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004596:	4b2a      	ldr	r3, [pc, #168]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	031b      	lsls	r3, r3, #12
 80045a4:	4926      	ldr	r1, [pc, #152]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045aa:	e06f      	b.n	800468c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ac:	4b24      	ldr	r3, [pc, #144]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	4921      	ldr	r1, [pc, #132]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c0:	e064      	b.n	800468c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d047      	beq.n	800465a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045ca:	4b1d      	ldr	r3, [pc, #116]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f023 0219 	bic.w	r2, r3, #25
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	491a      	ldr	r1, [pc, #104]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045dc:	f7fd fca4 	bl	8001f28 <HAL_GetTick>
 80045e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e4:	f7fd fca0 	bl	8001f28 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e332      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045f6:	4b12      	ldr	r3, [pc, #72]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004602:	f7fd fcc1 	bl	8001f88 <HAL_GetREVID>
 8004606:	4603      	mov	r3, r0
 8004608:	f241 0203 	movw	r2, #4099	@ 0x1003
 800460c:	4293      	cmp	r3, r2
 800460e:	d819      	bhi.n	8004644 <HAL_RCC_OscConfig+0x28c>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2b40      	cmp	r3, #64	@ 0x40
 8004616:	d108      	bne.n	800462a <HAL_RCC_OscConfig+0x272>
 8004618:	4b09      	ldr	r3, [pc, #36]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004620:	4a07      	ldr	r2, [pc, #28]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 8004622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004626:	6053      	str	r3, [r2, #4]
 8004628:	e030      	b.n	800468c <HAL_RCC_OscConfig+0x2d4>
 800462a:	4b05      	ldr	r3, [pc, #20]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	031b      	lsls	r3, r3, #12
 8004638:	4901      	ldr	r1, [pc, #4]	@ (8004640 <HAL_RCC_OscConfig+0x288>)
 800463a:	4313      	orrs	r3, r2
 800463c:	604b      	str	r3, [r1, #4]
 800463e:	e025      	b.n	800468c <HAL_RCC_OscConfig+0x2d4>
 8004640:	58024400 	.word	0x58024400
 8004644:	4b9a      	ldr	r3, [pc, #616]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	4997      	ldr	r1, [pc, #604]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
 8004658:	e018      	b.n	800468c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465a:	4b95      	ldr	r3, [pc, #596]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a94      	ldr	r2, [pc, #592]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004660:	f023 0301 	bic.w	r3, r3, #1
 8004664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fd fc5f 	bl	8001f28 <HAL_GetTick>
 800466a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466e:	f7fd fc5b 	bl	8001f28 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e2ed      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004680:	4b8b      	ldr	r3, [pc, #556]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 80a9 	beq.w	80047ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800469a:	4b85      	ldr	r3, [pc, #532]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046a4:	4b82      	ldr	r3, [pc, #520]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 80046a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d007      	beq.n	80046c0 <HAL_RCC_OscConfig+0x308>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b18      	cmp	r3, #24
 80046b4:	d13a      	bne.n	800472c <HAL_RCC_OscConfig+0x374>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d135      	bne.n	800472c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046c0:	4b7b      	ldr	r3, [pc, #492]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_OscConfig+0x320>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	2b80      	cmp	r3, #128	@ 0x80
 80046d2:	d001      	beq.n	80046d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e2c1      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046d8:	f7fd fc56 	bl	8001f88 <HAL_GetREVID>
 80046dc:	4603      	mov	r3, r0
 80046de:	f241 0203 	movw	r2, #4099	@ 0x1003
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d817      	bhi.n	8004716 <HAL_RCC_OscConfig+0x35e>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	2b20      	cmp	r3, #32
 80046ec:	d108      	bne.n	8004700 <HAL_RCC_OscConfig+0x348>
 80046ee:	4b70      	ldr	r3, [pc, #448]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80046f6:	4a6e      	ldr	r2, [pc, #440]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 80046f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80046fc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046fe:	e075      	b.n	80047ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004700:	4b6b      	ldr	r3, [pc, #428]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a1b      	ldr	r3, [r3, #32]
 800470c:	069b      	lsls	r3, r3, #26
 800470e:	4968      	ldr	r1, [pc, #416]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004710:	4313      	orrs	r3, r2
 8004712:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004714:	e06a      	b.n	80047ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004716:	4b66      	ldr	r3, [pc, #408]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	061b      	lsls	r3, r3, #24
 8004724:	4962      	ldr	r1, [pc, #392]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004726:	4313      	orrs	r3, r2
 8004728:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800472a:	e05f      	b.n	80047ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d042      	beq.n	80047ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004734:	4b5e      	ldr	r3, [pc, #376]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a5d      	ldr	r2, [pc, #372]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 800473a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800473e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004740:	f7fd fbf2 	bl	8001f28 <HAL_GetTick>
 8004744:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004746:	e008      	b.n	800475a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004748:	f7fd fbee 	bl	8001f28 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	1ad3      	subs	r3, r2, r3
 8004752:	2b02      	cmp	r3, #2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e280      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800475a:	4b55      	ldr	r3, [pc, #340]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d0f0      	beq.n	8004748 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004766:	f7fd fc0f 	bl	8001f88 <HAL_GetREVID>
 800476a:	4603      	mov	r3, r0
 800476c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004770:	4293      	cmp	r3, r2
 8004772:	d817      	bhi.n	80047a4 <HAL_RCC_OscConfig+0x3ec>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	2b20      	cmp	r3, #32
 800477a:	d108      	bne.n	800478e <HAL_RCC_OscConfig+0x3d6>
 800477c:	4b4c      	ldr	r3, [pc, #304]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004784:	4a4a      	ldr	r2, [pc, #296]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004786:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800478a:	6053      	str	r3, [r2, #4]
 800478c:	e02e      	b.n	80047ec <HAL_RCC_OscConfig+0x434>
 800478e:	4b48      	ldr	r3, [pc, #288]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	069b      	lsls	r3, r3, #26
 800479c:	4944      	ldr	r1, [pc, #272]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	604b      	str	r3, [r1, #4]
 80047a2:	e023      	b.n	80047ec <HAL_RCC_OscConfig+0x434>
 80047a4:	4b42      	ldr	r3, [pc, #264]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	061b      	lsls	r3, r3, #24
 80047b2:	493f      	ldr	r1, [pc, #252]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	60cb      	str	r3, [r1, #12]
 80047b8:	e018      	b.n	80047ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047ba:	4b3d      	ldr	r3, [pc, #244]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a3c      	ldr	r2, [pc, #240]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 80047c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c6:	f7fd fbaf 	bl	8001f28 <HAL_GetTick>
 80047ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047cc:	e008      	b.n	80047e0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80047ce:	f7fd fbab 	bl	8001f28 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d901      	bls.n	80047e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e23d      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047e0:	4b33      	ldr	r3, [pc, #204]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1f0      	bne.n	80047ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d036      	beq.n	8004866 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d019      	beq.n	8004834 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004800:	4b2b      	ldr	r3, [pc, #172]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004804:	4a2a      	ldr	r2, [pc, #168]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800480c:	f7fd fb8c 	bl	8001f28 <HAL_GetTick>
 8004810:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004814:	f7fd fb88 	bl	8001f28 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e21a      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004826:	4b22      	ldr	r3, [pc, #136]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0f0      	beq.n	8004814 <HAL_RCC_OscConfig+0x45c>
 8004832:	e018      	b.n	8004866 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004834:	4b1e      	ldr	r3, [pc, #120]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004836:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004838:	4a1d      	ldr	r2, [pc, #116]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fd fb72 	bl	8001f28 <HAL_GetTick>
 8004844:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004846:	e008      	b.n	800485a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004848:	f7fd fb6e 	bl	8001f28 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e200      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800485a:	4b15      	ldr	r3, [pc, #84]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 800485c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1f0      	bne.n	8004848 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0320 	and.w	r3, r3, #32
 800486e:	2b00      	cmp	r3, #0
 8004870:	d039      	beq.n	80048e6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d01c      	beq.n	80048b4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800487a:	4b0d      	ldr	r3, [pc, #52]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a0c      	ldr	r2, [pc, #48]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 8004880:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004884:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004886:	f7fd fb4f 	bl	8001f28 <HAL_GetTick>
 800488a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800488e:	f7fd fb4b 	bl	8001f28 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e1dd      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048a0:	4b03      	ldr	r3, [pc, #12]	@ (80048b0 <HAL_RCC_OscConfig+0x4f8>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d0f0      	beq.n	800488e <HAL_RCC_OscConfig+0x4d6>
 80048ac:	e01b      	b.n	80048e6 <HAL_RCC_OscConfig+0x52e>
 80048ae:	bf00      	nop
 80048b0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048b4:	4b9b      	ldr	r3, [pc, #620]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a9a      	ldr	r2, [pc, #616]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 80048ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048be:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048c0:	f7fd fb32 	bl	8001f28 <HAL_GetTick>
 80048c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048c8:	f7fd fb2e 	bl	8001f28 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e1c0      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048da:	4b92      	ldr	r3, [pc, #584]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	f000 8081 	beq.w	80049f6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80048f4:	4b8c      	ldr	r3, [pc, #560]	@ (8004b28 <HAL_RCC_OscConfig+0x770>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a8b      	ldr	r2, [pc, #556]	@ (8004b28 <HAL_RCC_OscConfig+0x770>)
 80048fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048fe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004900:	f7fd fb12 	bl	8001f28 <HAL_GetTick>
 8004904:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004908:	f7fd fb0e 	bl	8001f28 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b64      	cmp	r3, #100	@ 0x64
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e1a0      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800491a:	4b83      	ldr	r3, [pc, #524]	@ (8004b28 <HAL_RCC_OscConfig+0x770>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d106      	bne.n	800493c <HAL_RCC_OscConfig+0x584>
 800492e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004932:	4a7c      	ldr	r2, [pc, #496]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004934:	f043 0301 	orr.w	r3, r3, #1
 8004938:	6713      	str	r3, [r2, #112]	@ 0x70
 800493a:	e02d      	b.n	8004998 <HAL_RCC_OscConfig+0x5e0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10c      	bne.n	800495e <HAL_RCC_OscConfig+0x5a6>
 8004944:	4b77      	ldr	r3, [pc, #476]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004948:	4a76      	ldr	r2, [pc, #472]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004950:	4b74      	ldr	r3, [pc, #464]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004954:	4a73      	ldr	r2, [pc, #460]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004956:	f023 0304 	bic.w	r3, r3, #4
 800495a:	6713      	str	r3, [r2, #112]	@ 0x70
 800495c:	e01c      	b.n	8004998 <HAL_RCC_OscConfig+0x5e0>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	2b05      	cmp	r3, #5
 8004964:	d10c      	bne.n	8004980 <HAL_RCC_OscConfig+0x5c8>
 8004966:	4b6f      	ldr	r3, [pc, #444]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496a:	4a6e      	ldr	r2, [pc, #440]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 800496c:	f043 0304 	orr.w	r3, r3, #4
 8004970:	6713      	str	r3, [r2, #112]	@ 0x70
 8004972:	4b6c      	ldr	r3, [pc, #432]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004976:	4a6b      	ldr	r2, [pc, #428]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004978:	f043 0301 	orr.w	r3, r3, #1
 800497c:	6713      	str	r3, [r2, #112]	@ 0x70
 800497e:	e00b      	b.n	8004998 <HAL_RCC_OscConfig+0x5e0>
 8004980:	4b68      	ldr	r3, [pc, #416]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004984:	4a67      	ldr	r2, [pc, #412]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004986:	f023 0301 	bic.w	r3, r3, #1
 800498a:	6713      	str	r3, [r2, #112]	@ 0x70
 800498c:	4b65      	ldr	r3, [pc, #404]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 800498e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004990:	4a64      	ldr	r2, [pc, #400]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004992:	f023 0304 	bic.w	r3, r3, #4
 8004996:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d015      	beq.n	80049cc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a0:	f7fd fac2 	bl	8001f28 <HAL_GetTick>
 80049a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049a6:	e00a      	b.n	80049be <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a8:	f7fd fabe 	bl	8001f28 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d901      	bls.n	80049be <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e14e      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049be:	4b59      	ldr	r3, [pc, #356]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 80049c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0ee      	beq.n	80049a8 <HAL_RCC_OscConfig+0x5f0>
 80049ca:	e014      	b.n	80049f6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049cc:	f7fd faac 	bl	8001f28 <HAL_GetTick>
 80049d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049d2:	e00a      	b.n	80049ea <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d4:	f7fd faa8 	bl	8001f28 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e138      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049ea:	4b4e      	ldr	r3, [pc, #312]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 80049ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1ee      	bne.n	80049d4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 812d 	beq.w	8004c5a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a00:	4b48      	ldr	r3, [pc, #288]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a08:	2b18      	cmp	r3, #24
 8004a0a:	f000 80bd 	beq.w	8004b88 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	2b02      	cmp	r3, #2
 8004a14:	f040 809e 	bne.w	8004b54 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a18:	4b42      	ldr	r3, [pc, #264]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a41      	ldr	r2, [pc, #260]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004a1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a24:	f7fd fa80 	bl	8001f28 <HAL_GetTick>
 8004a28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a2a:	e008      	b.n	8004a3e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a2c:	f7fd fa7c 	bl	8001f28 <HAL_GetTick>
 8004a30:	4602      	mov	r2, r0
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	d901      	bls.n	8004a3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e10e      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a3e:	4b39      	ldr	r3, [pc, #228]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d1f0      	bne.n	8004a2c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a4a:	4b36      	ldr	r3, [pc, #216]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004a4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a4e:	4b37      	ldr	r3, [pc, #220]	@ (8004b2c <HAL_RCC_OscConfig+0x774>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a5a:	0112      	lsls	r2, r2, #4
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	4931      	ldr	r1, [pc, #196]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a72:	3b01      	subs	r3, #1
 8004a74:	025b      	lsls	r3, r3, #9
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	061b      	lsls	r3, r3, #24
 8004a90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a94:	4923      	ldr	r1, [pc, #140]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004a9a:	4b22      	ldr	r3, [pc, #136]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9e:	4a21      	ldr	r2, [pc, #132]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004aa0:	f023 0301 	bic.w	r3, r3, #1
 8004aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004aa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004aaa:	4b21      	ldr	r3, [pc, #132]	@ (8004b30 <HAL_RCC_OscConfig+0x778>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004ab2:	00d2      	lsls	r2, r2, #3
 8004ab4:	491b      	ldr	r1, [pc, #108]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004aba:	4b1a      	ldr	r3, [pc, #104]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	f023 020c 	bic.w	r2, r3, #12
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	4917      	ldr	r1, [pc, #92]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004acc:	4b15      	ldr	r3, [pc, #84]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	f023 0202 	bic.w	r2, r3, #2
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad8:	4912      	ldr	r1, [pc, #72]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004ade:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae2:	4a10      	ldr	r2, [pc, #64]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004aea:	4b0e      	ldr	r3, [pc, #56]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aee:	4a0d      	ldr	r2, [pc, #52]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004af4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004af6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004afa:	4a0a      	ldr	r2, [pc, #40]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004b02:	4b08      	ldr	r3, [pc, #32]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b06:	4a07      	ldr	r2, [pc, #28]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b0e:	4b05      	ldr	r3, [pc, #20]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a04      	ldr	r2, [pc, #16]	@ (8004b24 <HAL_RCC_OscConfig+0x76c>)
 8004b14:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1a:	f7fd fa05 	bl	8001f28 <HAL_GetTick>
 8004b1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b20:	e011      	b.n	8004b46 <HAL_RCC_OscConfig+0x78e>
 8004b22:	bf00      	nop
 8004b24:	58024400 	.word	0x58024400
 8004b28:	58024800 	.word	0x58024800
 8004b2c:	fffffc0c 	.word	0xfffffc0c
 8004b30:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b34:	f7fd f9f8 	bl	8001f28 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e08a      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b46:	4b47      	ldr	r3, [pc, #284]	@ (8004c64 <HAL_RCC_OscConfig+0x8ac>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0x77c>
 8004b52:	e082      	b.n	8004c5a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b54:	4b43      	ldr	r3, [pc, #268]	@ (8004c64 <HAL_RCC_OscConfig+0x8ac>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a42      	ldr	r2, [pc, #264]	@ (8004c64 <HAL_RCC_OscConfig+0x8ac>)
 8004b5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b60:	f7fd f9e2 	bl	8001f28 <HAL_GetTick>
 8004b64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b68:	f7fd f9de 	bl	8001f28 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e070      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c64 <HAL_RCC_OscConfig+0x8ac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1f0      	bne.n	8004b68 <HAL_RCC_OscConfig+0x7b0>
 8004b86:	e068      	b.n	8004c5a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b88:	4b36      	ldr	r3, [pc, #216]	@ (8004c64 <HAL_RCC_OscConfig+0x8ac>)
 8004b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b8e:	4b35      	ldr	r3, [pc, #212]	@ (8004c64 <HAL_RCC_OscConfig+0x8ac>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b92:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d031      	beq.n	8004c00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f003 0203 	and.w	r2, r3, #3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d12a      	bne.n	8004c00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d122      	bne.n	8004c00 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d11a      	bne.n	8004c00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	0a5b      	lsrs	r3, r3, #9
 8004bce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bd6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d111      	bne.n	8004c00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	0c1b      	lsrs	r3, r3, #16
 8004be0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d108      	bne.n	8004c00 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	0e1b      	lsrs	r3, r3, #24
 8004bf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e02b      	b.n	8004c5c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004c04:	4b17      	ldr	r3, [pc, #92]	@ (8004c64 <HAL_RCC_OscConfig+0x8ac>)
 8004c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c08:	08db      	lsrs	r3, r3, #3
 8004c0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c0e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d01f      	beq.n	8004c5a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004c1a:	4b12      	ldr	r3, [pc, #72]	@ (8004c64 <HAL_RCC_OscConfig+0x8ac>)
 8004c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c1e:	4a11      	ldr	r2, [pc, #68]	@ (8004c64 <HAL_RCC_OscConfig+0x8ac>)
 8004c20:	f023 0301 	bic.w	r3, r3, #1
 8004c24:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c26:	f7fd f97f 	bl	8001f28 <HAL_GetTick>
 8004c2a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004c2c:	bf00      	nop
 8004c2e:	f7fd f97b 	bl	8001f28 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d0f9      	beq.n	8004c2e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c64 <HAL_RCC_OscConfig+0x8ac>)
 8004c3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c68 <HAL_RCC_OscConfig+0x8b0>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c46:	00d2      	lsls	r2, r2, #3
 8004c48:	4906      	ldr	r1, [pc, #24]	@ (8004c64 <HAL_RCC_OscConfig+0x8ac>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004c4e:	4b05      	ldr	r3, [pc, #20]	@ (8004c64 <HAL_RCC_OscConfig+0x8ac>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	4a04      	ldr	r2, [pc, #16]	@ (8004c64 <HAL_RCC_OscConfig+0x8ac>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3730      	adds	r7, #48	@ 0x30
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	58024400 	.word	0x58024400
 8004c68:	ffff0007 	.word	0xffff0007

08004c6c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d101      	bne.n	8004c80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e19c      	b.n	8004fba <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c80:	4b8a      	ldr	r3, [pc, #552]	@ (8004eac <HAL_RCC_ClockConfig+0x240>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d910      	bls.n	8004cb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8e:	4b87      	ldr	r3, [pc, #540]	@ (8004eac <HAL_RCC_ClockConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f023 020f 	bic.w	r2, r3, #15
 8004c96:	4985      	ldr	r1, [pc, #532]	@ (8004eac <HAL_RCC_ClockConfig+0x240>)
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9e:	4b83      	ldr	r3, [pc, #524]	@ (8004eac <HAL_RCC_ClockConfig+0x240>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e184      	b.n	8004fba <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d010      	beq.n	8004cde <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	4b7b      	ldr	r3, [pc, #492]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d908      	bls.n	8004cde <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ccc:	4b78      	ldr	r3, [pc, #480]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	4975      	ldr	r1, [pc, #468]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d010      	beq.n	8004d0c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	695a      	ldr	r2, [r3, #20]
 8004cee:	4b70      	ldr	r3, [pc, #448]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d908      	bls.n	8004d0c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	496a      	ldr	r1, [pc, #424]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0310 	and.w	r3, r3, #16
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d010      	beq.n	8004d3a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	4b64      	ldr	r3, [pc, #400]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d908      	bls.n	8004d3a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004d28:	4b61      	ldr	r3, [pc, #388]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	495e      	ldr	r1, [pc, #376]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0320 	and.w	r3, r3, #32
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d010      	beq.n	8004d68 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	69da      	ldr	r2, [r3, #28]
 8004d4a:	4b59      	ldr	r3, [pc, #356]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d908      	bls.n	8004d68 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004d56:	4b56      	ldr	r3, [pc, #344]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69db      	ldr	r3, [r3, #28]
 8004d62:	4953      	ldr	r1, [pc, #332]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d010      	beq.n	8004d96 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68da      	ldr	r2, [r3, #12]
 8004d78:	4b4d      	ldr	r3, [pc, #308]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d908      	bls.n	8004d96 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d84:	4b4a      	ldr	r3, [pc, #296]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	f023 020f 	bic.w	r2, r3, #15
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	4947      	ldr	r1, [pc, #284]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d055      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004da2:	4b43      	ldr	r3, [pc, #268]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	4940      	ldr	r1, [pc, #256]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d107      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004dbc:	4b3c      	ldr	r3, [pc, #240]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d121      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0f6      	b.n	8004fba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d107      	bne.n	8004de4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dd4:	4b36      	ldr	r3, [pc, #216]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d115      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e0ea      	b.n	8004fba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d107      	bne.n	8004dfc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dec:	4b30      	ldr	r3, [pc, #192]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d109      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e0de      	b.n	8004fba <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0304 	and.w	r3, r3, #4
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e0d6      	b.n	8004fba <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e0c:	4b28      	ldr	r3, [pc, #160]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f023 0207 	bic.w	r2, r3, #7
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	4925      	ldr	r1, [pc, #148]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1e:	f7fd f883 	bl	8001f28 <HAL_GetTick>
 8004e22:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e26:	f7fd f87f 	bl	8001f28 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e0be      	b.n	8004fba <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	00db      	lsls	r3, r3, #3
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d1eb      	bne.n	8004e26 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d010      	beq.n	8004e7c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	4b14      	ldr	r3, [pc, #80]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f003 030f 	and.w	r3, r3, #15
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d208      	bcs.n	8004e7c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e6a:	4b11      	ldr	r3, [pc, #68]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004e6c:	699b      	ldr	r3, [r3, #24]
 8004e6e:	f023 020f 	bic.w	r2, r3, #15
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	490e      	ldr	r1, [pc, #56]	@ (8004eb0 <HAL_RCC_ClockConfig+0x244>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004eac <HAL_RCC_ClockConfig+0x240>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 030f 	and.w	r3, r3, #15
 8004e84:	683a      	ldr	r2, [r7, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d214      	bcs.n	8004eb4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8a:	4b08      	ldr	r3, [pc, #32]	@ (8004eac <HAL_RCC_ClockConfig+0x240>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f023 020f 	bic.w	r2, r3, #15
 8004e92:	4906      	ldr	r1, [pc, #24]	@ (8004eac <HAL_RCC_ClockConfig+0x240>)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9a:	4b04      	ldr	r3, [pc, #16]	@ (8004eac <HAL_RCC_ClockConfig+0x240>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 030f 	and.w	r3, r3, #15
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d005      	beq.n	8004eb4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e086      	b.n	8004fba <HAL_RCC_ClockConfig+0x34e>
 8004eac:	52002000 	.word	0x52002000
 8004eb0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d010      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	4b3f      	ldr	r3, [pc, #252]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d208      	bcs.n	8004ee2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004ed0:	4b3c      	ldr	r3, [pc, #240]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	691b      	ldr	r3, [r3, #16]
 8004edc:	4939      	ldr	r1, [pc, #228]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0308 	and.w	r3, r3, #8
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d010      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695a      	ldr	r2, [r3, #20]
 8004ef2:	4b34      	ldr	r3, [pc, #208]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d208      	bcs.n	8004f10 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004efe:	4b31      	ldr	r3, [pc, #196]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004f00:	69db      	ldr	r3, [r3, #28]
 8004f02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	492e      	ldr	r1, [pc, #184]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 0310 	and.w	r3, r3, #16
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d010      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699a      	ldr	r2, [r3, #24]
 8004f20:	4b28      	ldr	r3, [pc, #160]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d208      	bcs.n	8004f3e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f2c:	4b25      	ldr	r3, [pc, #148]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	699b      	ldr	r3, [r3, #24]
 8004f38:	4922      	ldr	r1, [pc, #136]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d010      	beq.n	8004f6c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69da      	ldr	r2, [r3, #28]
 8004f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004f50:	6a1b      	ldr	r3, [r3, #32]
 8004f52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d208      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004f5a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	4917      	ldr	r1, [pc, #92]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f6c:	f000 f89e 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b14      	ldr	r3, [pc, #80]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	0a1b      	lsrs	r3, r3, #8
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	4912      	ldr	r1, [pc, #72]	@ (8004fc8 <HAL_RCC_ClockConfig+0x35c>)
 8004f7e:	5ccb      	ldrb	r3, [r1, r3]
 8004f80:	f003 031f 	and.w	r3, r3, #31
 8004f84:	fa22 f303 	lsr.w	r3, r2, r3
 8004f88:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc4 <HAL_RCC_ClockConfig+0x358>)
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	4a0d      	ldr	r2, [pc, #52]	@ (8004fc8 <HAL_RCC_ClockConfig+0x35c>)
 8004f94:	5cd3      	ldrb	r3, [r2, r3]
 8004f96:	f003 031f 	and.w	r3, r3, #31
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8004fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8004fcc <HAL_RCC_ClockConfig+0x360>)
 8004fa2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fa4:	4a0a      	ldr	r2, [pc, #40]	@ (8004fd0 <HAL_RCC_ClockConfig+0x364>)
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004faa:	4b0a      	ldr	r3, [pc, #40]	@ (8004fd4 <HAL_RCC_ClockConfig+0x368>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fc ff70 	bl	8001e94 <HAL_InitTick>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	58024400 	.word	0x58024400
 8004fc8:	0800a990 	.word	0x0800a990
 8004fcc:	24000008 	.word	0x24000008
 8004fd0:	24000004 	.word	0x24000004
 8004fd4:	2400000c 	.word	0x2400000c

08004fd8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08c      	sub	sp, #48	@ 0x30
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d12a      	bne.n	8005040 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8004fea:	4b2d      	ldr	r3, [pc, #180]	@ (80050a0 <HAL_RCC_MCOConfig+0xc8>)
 8004fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ff0:	4a2b      	ldr	r2, [pc, #172]	@ (80050a0 <HAL_RCC_MCOConfig+0xc8>)
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004ffa:	4b29      	ldr	r3, [pc, #164]	@ (80050a0 <HAL_RCC_MCOConfig+0xc8>)
 8004ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	61bb      	str	r3, [r7, #24]
 8005006:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8005008:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800500c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800500e:	2302      	movs	r3, #2
 8005010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005012:	2303      	movs	r3, #3
 8005014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005016:	2300      	movs	r3, #0
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800501a:	2300      	movs	r3, #0
 800501c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800501e:	f107 031c 	add.w	r3, r7, #28
 8005022:	4619      	mov	r1, r3
 8005024:	481f      	ldr	r0, [pc, #124]	@ (80050a4 <HAL_RCC_MCOConfig+0xcc>)
 8005026:	f7fe f89b 	bl	8003160 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800502a:	4b1d      	ldr	r3, [pc, #116]	@ (80050a0 <HAL_RCC_MCOConfig+0xc8>)
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8005032:	68b9      	ldr	r1, [r7, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	430b      	orrs	r3, r1
 8005038:	4919      	ldr	r1, [pc, #100]	@ (80050a0 <HAL_RCC_MCOConfig+0xc8>)
 800503a:	4313      	orrs	r3, r2
 800503c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800503e:	e02a      	b.n	8005096 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005040:	4b17      	ldr	r3, [pc, #92]	@ (80050a0 <HAL_RCC_MCOConfig+0xc8>)
 8005042:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005046:	4a16      	ldr	r2, [pc, #88]	@ (80050a0 <HAL_RCC_MCOConfig+0xc8>)
 8005048:	f043 0304 	orr.w	r3, r3, #4
 800504c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005050:	4b13      	ldr	r3, [pc, #76]	@ (80050a0 <HAL_RCC_MCOConfig+0xc8>)
 8005052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005056:	f003 0304 	and.w	r3, r3, #4
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800505e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005064:	2302      	movs	r3, #2
 8005066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005068:	2303      	movs	r3, #3
 800506a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800506c:	2300      	movs	r3, #0
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005070:	2300      	movs	r3, #0
 8005072:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8005074:	f107 031c 	add.w	r3, r7, #28
 8005078:	4619      	mov	r1, r3
 800507a:	480b      	ldr	r0, [pc, #44]	@ (80050a8 <HAL_RCC_MCOConfig+0xd0>)
 800507c:	f7fe f870 	bl	8003160 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005080:	4b07      	ldr	r3, [pc, #28]	@ (80050a0 <HAL_RCC_MCOConfig+0xc8>)
 8005082:	691b      	ldr	r3, [r3, #16]
 8005084:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	01d9      	lsls	r1, r3, #7
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	430b      	orrs	r3, r1
 8005090:	4903      	ldr	r1, [pc, #12]	@ (80050a0 <HAL_RCC_MCOConfig+0xc8>)
 8005092:	4313      	orrs	r3, r2
 8005094:	610b      	str	r3, [r1, #16]
}
 8005096:	bf00      	nop
 8005098:	3730      	adds	r7, #48	@ 0x30
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	58024400 	.word	0x58024400
 80050a4:	58020000 	.word	0x58020000
 80050a8:	58020800 	.word	0x58020800

080050ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b089      	sub	sp, #36	@ 0x24
 80050b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050b2:	4bb3      	ldr	r3, [pc, #716]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050ba:	2b18      	cmp	r3, #24
 80050bc:	f200 8155 	bhi.w	800536a <HAL_RCC_GetSysClockFreq+0x2be>
 80050c0:	a201      	add	r2, pc, #4	@ (adr r2, 80050c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	0800512d 	.word	0x0800512d
 80050cc:	0800536b 	.word	0x0800536b
 80050d0:	0800536b 	.word	0x0800536b
 80050d4:	0800536b 	.word	0x0800536b
 80050d8:	0800536b 	.word	0x0800536b
 80050dc:	0800536b 	.word	0x0800536b
 80050e0:	0800536b 	.word	0x0800536b
 80050e4:	0800536b 	.word	0x0800536b
 80050e8:	08005153 	.word	0x08005153
 80050ec:	0800536b 	.word	0x0800536b
 80050f0:	0800536b 	.word	0x0800536b
 80050f4:	0800536b 	.word	0x0800536b
 80050f8:	0800536b 	.word	0x0800536b
 80050fc:	0800536b 	.word	0x0800536b
 8005100:	0800536b 	.word	0x0800536b
 8005104:	0800536b 	.word	0x0800536b
 8005108:	08005159 	.word	0x08005159
 800510c:	0800536b 	.word	0x0800536b
 8005110:	0800536b 	.word	0x0800536b
 8005114:	0800536b 	.word	0x0800536b
 8005118:	0800536b 	.word	0x0800536b
 800511c:	0800536b 	.word	0x0800536b
 8005120:	0800536b 	.word	0x0800536b
 8005124:	0800536b 	.word	0x0800536b
 8005128:	0800515f 	.word	0x0800515f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800512c:	4b94      	ldr	r3, [pc, #592]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d009      	beq.n	800514c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005138:	4b91      	ldr	r3, [pc, #580]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	08db      	lsrs	r3, r3, #3
 800513e:	f003 0303 	and.w	r3, r3, #3
 8005142:	4a90      	ldr	r2, [pc, #576]	@ (8005384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
 8005148:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800514a:	e111      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800514c:	4b8d      	ldr	r3, [pc, #564]	@ (8005384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800514e:	61bb      	str	r3, [r7, #24]
      break;
 8005150:	e10e      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005152:	4b8d      	ldr	r3, [pc, #564]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005154:	61bb      	str	r3, [r7, #24]
      break;
 8005156:	e10b      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005158:	4b8c      	ldr	r3, [pc, #560]	@ (800538c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800515a:	61bb      	str	r3, [r7, #24]
      break;
 800515c:	e108      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800515e:	4b88      	ldr	r3, [pc, #544]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005162:	f003 0303 	and.w	r3, r3, #3
 8005166:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005168:	4b85      	ldr	r3, [pc, #532]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800516c:	091b      	lsrs	r3, r3, #4
 800516e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005172:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005174:	4b82      	ldr	r3, [pc, #520]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800517e:	4b80      	ldr	r3, [pc, #512]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005182:	08db      	lsrs	r3, r3, #3
 8005184:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	fb02 f303 	mul.w	r3, r2, r3
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005196:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 80e1 	beq.w	8005364 <HAL_RCC_GetSysClockFreq+0x2b8>
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	f000 8083 	beq.w	80052b0 <HAL_RCC_GetSysClockFreq+0x204>
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	f200 80a1 	bhi.w	80052f4 <HAL_RCC_GetSysClockFreq+0x248>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x114>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d056      	beq.n	800526c <HAL_RCC_GetSysClockFreq+0x1c0>
 80051be:	e099      	b.n	80052f4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d02d      	beq.n	8005228 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051cc:	4b6c      	ldr	r3, [pc, #432]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	08db      	lsrs	r3, r3, #3
 80051d2:	f003 0303 	and.w	r3, r3, #3
 80051d6:	4a6b      	ldr	r2, [pc, #428]	@ (8005384 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051d8:	fa22 f303 	lsr.w	r3, r2, r3
 80051dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	ee07 3a90 	vmov	s15, r3
 80051e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	ee07 3a90 	vmov	s15, r3
 80051ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f6:	4b62      	ldr	r3, [pc, #392]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fe:	ee07 3a90 	vmov	s15, r3
 8005202:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005206:	ed97 6a02 	vldr	s12, [r7, #8]
 800520a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005390 <HAL_RCC_GetSysClockFreq+0x2e4>
 800520e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005212:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005216:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800521a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800521e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005222:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005226:	e087      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	ee07 3a90 	vmov	s15, r3
 800522e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005232:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005394 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800523a:	4b51      	ldr	r3, [pc, #324]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800523c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005242:	ee07 3a90 	vmov	s15, r3
 8005246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800524a:	ed97 6a02 	vldr	s12, [r7, #8]
 800524e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005390 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800525a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800525e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005266:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800526a:	e065      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	ee07 3a90 	vmov	s15, r3
 8005272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005276:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005398 <HAL_RCC_GetSysClockFreq+0x2ec>
 800527a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527e:	4b40      	ldr	r3, [pc, #256]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005292:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005390 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800529a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052ae:	e043      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	ee07 3a90 	vmov	s15, r3
 80052b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800539c <HAL_RCC_GetSysClockFreq+0x2f0>
 80052be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ca:	ee07 3a90 	vmov	s15, r3
 80052ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80052d6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005390 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052f2:	e021      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005398 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005306:	4b1e      	ldr	r3, [pc, #120]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530e:	ee07 3a90 	vmov	s15, r3
 8005312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005316:	ed97 6a02 	vldr	s12, [r7, #8]
 800531a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005390 <HAL_RCC_GetSysClockFreq+0x2e4>
 800531e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800532a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005332:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005336:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005338:	4b11      	ldr	r3, [pc, #68]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800533a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800533c:	0a5b      	lsrs	r3, r3, #9
 800533e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005342:	3301      	adds	r3, #1
 8005344:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	ee07 3a90 	vmov	s15, r3
 800534c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005350:	edd7 6a07 	vldr	s13, [r7, #28]
 8005354:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005358:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800535c:	ee17 3a90 	vmov	r3, s15
 8005360:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005362:	e005      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005364:	2300      	movs	r3, #0
 8005366:	61bb      	str	r3, [r7, #24]
      break;
 8005368:	e002      	b.n	8005370 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800536a:	4b07      	ldr	r3, [pc, #28]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800536c:	61bb      	str	r3, [r7, #24]
      break;
 800536e:	bf00      	nop
  }

  return sysclockfreq;
 8005370:	69bb      	ldr	r3, [r7, #24]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3724      	adds	r7, #36	@ 0x24
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	58024400 	.word	0x58024400
 8005384:	03d09000 	.word	0x03d09000
 8005388:	003d0900 	.word	0x003d0900
 800538c:	007a1200 	.word	0x007a1200
 8005390:	46000000 	.word	0x46000000
 8005394:	4c742400 	.word	0x4c742400
 8005398:	4a742400 	.word	0x4a742400
 800539c:	4af42400 	.word	0x4af42400

080053a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80053a6:	f7ff fe81 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 80053aa:	4602      	mov	r2, r0
 80053ac:	4b10      	ldr	r3, [pc, #64]	@ (80053f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	0a1b      	lsrs	r3, r3, #8
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	490f      	ldr	r1, [pc, #60]	@ (80053f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80053b8:	5ccb      	ldrb	r3, [r1, r3]
 80053ba:	f003 031f 	and.w	r3, r3, #31
 80053be:	fa22 f303 	lsr.w	r3, r2, r3
 80053c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053c4:	4b0a      	ldr	r3, [pc, #40]	@ (80053f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	4a09      	ldr	r2, [pc, #36]	@ (80053f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80053ce:	5cd3      	ldrb	r3, [r2, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	fa22 f303 	lsr.w	r3, r2, r3
 80053da:	4a07      	ldr	r2, [pc, #28]	@ (80053f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80053dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053de:	4a07      	ldr	r2, [pc, #28]	@ (80053fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80053e4:	4b04      	ldr	r3, [pc, #16]	@ (80053f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80053e6:	681b      	ldr	r3, [r3, #0]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	58024400 	.word	0x58024400
 80053f4:	0800a990 	.word	0x0800a990
 80053f8:	24000008 	.word	0x24000008
 80053fc:	24000004 	.word	0x24000004

08005400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005404:	f7ff ffcc 	bl	80053a0 <HAL_RCC_GetHCLKFreq>
 8005408:	4602      	mov	r2, r0
 800540a:	4b06      	ldr	r3, [pc, #24]	@ (8005424 <HAL_RCC_GetPCLK1Freq+0x24>)
 800540c:	69db      	ldr	r3, [r3, #28]
 800540e:	091b      	lsrs	r3, r3, #4
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	4904      	ldr	r1, [pc, #16]	@ (8005428 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005416:	5ccb      	ldrb	r3, [r1, r3]
 8005418:	f003 031f 	and.w	r3, r3, #31
 800541c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005420:	4618      	mov	r0, r3
 8005422:	bd80      	pop	{r7, pc}
 8005424:	58024400 	.word	0x58024400
 8005428:	0800a990 	.word	0x0800a990

0800542c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005430:	f7ff ffb6 	bl	80053a0 <HAL_RCC_GetHCLKFreq>
 8005434:	4602      	mov	r2, r0
 8005436:	4b06      	ldr	r3, [pc, #24]	@ (8005450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	0a1b      	lsrs	r3, r3, #8
 800543c:	f003 0307 	and.w	r3, r3, #7
 8005440:	4904      	ldr	r1, [pc, #16]	@ (8005454 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005442:	5ccb      	ldrb	r3, [r1, r3]
 8005444:	f003 031f 	and.w	r3, r3, #31
 8005448:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800544c:	4618      	mov	r0, r3
 800544e:	bd80      	pop	{r7, pc}
 8005450:	58024400 	.word	0x58024400
 8005454:	0800a990 	.word	0x0800a990

08005458 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800545c:	b0ca      	sub	sp, #296	@ 0x128
 800545e:	af00      	add	r7, sp, #0
 8005460:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005464:	2300      	movs	r3, #0
 8005466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800546a:	2300      	movs	r3, #0
 800546c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800547c:	2500      	movs	r5, #0
 800547e:	ea54 0305 	orrs.w	r3, r4, r5
 8005482:	d049      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005488:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800548a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800548e:	d02f      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005490:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005494:	d828      	bhi.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005496:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800549a:	d01a      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800549c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054a0:	d822      	bhi.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054aa:	d007      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054ac:	e01c      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ae:	4bb8      	ldr	r3, [pc, #736]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b2:	4ab7      	ldr	r2, [pc, #732]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054ba:	e01a      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c0:	3308      	adds	r3, #8
 80054c2:	2102      	movs	r1, #2
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 fc8f 	bl	8006de8 <RCCEx_PLL2_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054d0:	e00f      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d6:	3328      	adds	r3, #40	@ 0x28
 80054d8:	2102      	movs	r1, #2
 80054da:	4618      	mov	r0, r3
 80054dc:	f001 fd36 	bl	8006f4c <RCCEx_PLL3_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054e6:	e004      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054ee:	e000      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80054f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80054fa:	4ba5      	ldr	r3, [pc, #660]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005506:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005508:	4aa1      	ldr	r2, [pc, #644]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800550a:	430b      	orrs	r3, r1
 800550c:	6513      	str	r3, [r2, #80]	@ 0x50
 800550e:	e003      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005514:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005520:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005524:	f04f 0900 	mov.w	r9, #0
 8005528:	ea58 0309 	orrs.w	r3, r8, r9
 800552c:	d047      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800552e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005534:	2b04      	cmp	r3, #4
 8005536:	d82a      	bhi.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005538:	a201      	add	r2, pc, #4	@ (adr r2, 8005540 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005555 	.word	0x08005555
 8005544:	08005563 	.word	0x08005563
 8005548:	08005579 	.word	0x08005579
 800554c:	08005597 	.word	0x08005597
 8005550:	08005597 	.word	0x08005597
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005554:	4b8e      	ldr	r3, [pc, #568]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005558:	4a8d      	ldr	r2, [pc, #564]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800555a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800555e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005560:	e01a      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005566:	3308      	adds	r3, #8
 8005568:	2100      	movs	r1, #0
 800556a:	4618      	mov	r0, r3
 800556c:	f001 fc3c 	bl	8006de8 <RCCEx_PLL2_Config>
 8005570:	4603      	mov	r3, r0
 8005572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005576:	e00f      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557c:	3328      	adds	r3, #40	@ 0x28
 800557e:	2100      	movs	r1, #0
 8005580:	4618      	mov	r0, r3
 8005582:	f001 fce3 	bl	8006f4c <RCCEx_PLL3_Config>
 8005586:	4603      	mov	r3, r0
 8005588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800558c:	e004      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005594:	e000      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10a      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055a0:	4b7b      	ldr	r3, [pc, #492]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a4:	f023 0107 	bic.w	r1, r3, #7
 80055a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055ae:	4a78      	ldr	r2, [pc, #480]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055b0:	430b      	orrs	r3, r1
 80055b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80055b4:	e003      	b.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80055be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80055ca:	f04f 0b00 	mov.w	fp, #0
 80055ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80055d2:	d04c      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80055d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055de:	d030      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80055e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e4:	d829      	bhi.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80055e8:	d02d      	beq.n	8005646 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80055ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80055ec:	d825      	bhi.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055ee:	2b80      	cmp	r3, #128	@ 0x80
 80055f0:	d018      	beq.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80055f2:	2b80      	cmp	r3, #128	@ 0x80
 80055f4:	d821      	bhi.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d002      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80055fa:	2b40      	cmp	r3, #64	@ 0x40
 80055fc:	d007      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80055fe:	e01c      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005600:	4b63      	ldr	r3, [pc, #396]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005604:	4a62      	ldr	r2, [pc, #392]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005606:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800560a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800560c:	e01c      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800560e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005612:	3308      	adds	r3, #8
 8005614:	2100      	movs	r1, #0
 8005616:	4618      	mov	r0, r3
 8005618:	f001 fbe6 	bl	8006de8 <RCCEx_PLL2_Config>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005622:	e011      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005628:	3328      	adds	r3, #40	@ 0x28
 800562a:	2100      	movs	r1, #0
 800562c:	4618      	mov	r0, r3
 800562e:	f001 fc8d 	bl	8006f4c <RCCEx_PLL3_Config>
 8005632:	4603      	mov	r3, r0
 8005634:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005638:	e006      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005640:	e002      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005642:	bf00      	nop
 8005644:	e000      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005646:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800564c:	2b00      	cmp	r3, #0
 800564e:	d10a      	bne.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005650:	4b4f      	ldr	r3, [pc, #316]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005654:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800565c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800565e:	4a4c      	ldr	r2, [pc, #304]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005660:	430b      	orrs	r3, r1
 8005662:	6513      	str	r3, [r2, #80]	@ 0x50
 8005664:	e003      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005666:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800566a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800566e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005676:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800567a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800567e:	2300      	movs	r3, #0
 8005680:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005684:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005688:	460b      	mov	r3, r1
 800568a:	4313      	orrs	r3, r2
 800568c:	d053      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800568e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005692:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005696:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800569a:	d035      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800569c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80056a0:	d82e      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056a6:	d031      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80056a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056ac:	d828      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056b2:	d01a      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 80056b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056b8:	d822      	bhi.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d003      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80056be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056c2:	d007      	beq.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80056c4:	e01c      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c6:	4b32      	ldr	r3, [pc, #200]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ca:	4a31      	ldr	r2, [pc, #196]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056d2:	e01c      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d8:	3308      	adds	r3, #8
 80056da:	2100      	movs	r1, #0
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 fb83 	bl	8006de8 <RCCEx_PLL2_Config>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80056e8:	e011      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ee:	3328      	adds	r3, #40	@ 0x28
 80056f0:	2100      	movs	r1, #0
 80056f2:	4618      	mov	r0, r3
 80056f4:	f001 fc2a 	bl	8006f4c <RCCEx_PLL3_Config>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056fe:	e006      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005706:	e002      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005708:	bf00      	nop
 800570a:	e000      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800570c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800570e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10b      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005716:	4b1e      	ldr	r3, [pc, #120]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005718:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800571e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005722:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005726:	4a1a      	ldr	r2, [pc, #104]	@ (8005790 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005728:	430b      	orrs	r3, r1
 800572a:	6593      	str	r3, [r2, #88]	@ 0x58
 800572c:	e003      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005732:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005742:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005746:	2300      	movs	r3, #0
 8005748:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800574c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005750:	460b      	mov	r3, r1
 8005752:	4313      	orrs	r3, r2
 8005754:	d056      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800575e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005762:	d038      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005764:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005768:	d831      	bhi.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800576a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800576e:	d034      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005770:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005774:	d82b      	bhi.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005776:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800577a:	d01d      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800577c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005780:	d825      	bhi.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005782:	2b00      	cmp	r3, #0
 8005784:	d006      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005786:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800578a:	d00a      	beq.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800578c:	e01f      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800578e:	bf00      	nop
 8005790:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005794:	4ba2      	ldr	r3, [pc, #648]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	4aa1      	ldr	r2, [pc, #644]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800579a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800579e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057a0:	e01c      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80057a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a6:	3308      	adds	r3, #8
 80057a8:	2100      	movs	r1, #0
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 fb1c 	bl	8006de8 <RCCEx_PLL2_Config>
 80057b0:	4603      	mov	r3, r0
 80057b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80057b6:	e011      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057bc:	3328      	adds	r3, #40	@ 0x28
 80057be:	2100      	movs	r1, #0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 fbc3 	bl	8006f4c <RCCEx_PLL3_Config>
 80057c6:	4603      	mov	r3, r0
 80057c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057cc:	e006      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057d4:	e002      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80057d6:	bf00      	nop
 80057d8:	e000      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80057da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10b      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057e4:	4b8e      	ldr	r3, [pc, #568]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80057ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057f4:	4a8a      	ldr	r2, [pc, #552]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f6:	430b      	orrs	r3, r1
 80057f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80057fa:	e003      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005800:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005810:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800581a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800581e:	460b      	mov	r3, r1
 8005820:	4313      	orrs	r3, r2
 8005822:	d03a      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800582a:	2b30      	cmp	r3, #48	@ 0x30
 800582c:	d01f      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800582e:	2b30      	cmp	r3, #48	@ 0x30
 8005830:	d819      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005832:	2b20      	cmp	r3, #32
 8005834:	d00c      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005836:	2b20      	cmp	r3, #32
 8005838:	d815      	bhi.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d019      	beq.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800583e:	2b10      	cmp	r3, #16
 8005840:	d111      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005842:	4b77      	ldr	r3, [pc, #476]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	4a76      	ldr	r2, [pc, #472]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005848:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800584c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800584e:	e011      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005854:	3308      	adds	r3, #8
 8005856:	2102      	movs	r1, #2
 8005858:	4618      	mov	r0, r3
 800585a:	f001 fac5 	bl	8006de8 <RCCEx_PLL2_Config>
 800585e:	4603      	mov	r3, r0
 8005860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005864:	e006      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800586c:	e002      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800586e:	bf00      	nop
 8005870:	e000      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005872:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005874:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800587c:	4b68      	ldr	r3, [pc, #416]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800587e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005880:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800588a:	4a65      	ldr	r2, [pc, #404]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800588c:	430b      	orrs	r3, r1
 800588e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005890:	e003      	b.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800589a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80058a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058aa:	2300      	movs	r3, #0
 80058ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4313      	orrs	r3, r2
 80058b8:	d051      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80058ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058c4:	d035      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80058c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058ca:	d82e      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058d0:	d031      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80058d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058d6:	d828      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058dc:	d01a      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80058de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058e2:	d822      	bhi.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d003      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80058e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ec:	d007      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80058ee:	e01c      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f0:	4b4b      	ldr	r3, [pc, #300]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f4:	4a4a      	ldr	r2, [pc, #296]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058fc:	e01c      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005902:	3308      	adds	r3, #8
 8005904:	2100      	movs	r1, #0
 8005906:	4618      	mov	r0, r3
 8005908:	f001 fa6e 	bl	8006de8 <RCCEx_PLL2_Config>
 800590c:	4603      	mov	r3, r0
 800590e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005912:	e011      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005918:	3328      	adds	r3, #40	@ 0x28
 800591a:	2100      	movs	r1, #0
 800591c:	4618      	mov	r0, r3
 800591e:	f001 fb15 	bl	8006f4c <RCCEx_PLL3_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005928:	e006      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800592a:	2301      	movs	r3, #1
 800592c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005930:	e002      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005932:	bf00      	nop
 8005934:	e000      	b.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005936:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005938:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005940:	4b37      	ldr	r3, [pc, #220]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005944:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005948:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800594c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800594e:	4a34      	ldr	r2, [pc, #208]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005950:	430b      	orrs	r3, r1
 8005952:	6513      	str	r3, [r2, #80]	@ 0x50
 8005954:	e003      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005956:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800595a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800595e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800596a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800596e:	2300      	movs	r3, #0
 8005970:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005974:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005978:	460b      	mov	r3, r1
 800597a:	4313      	orrs	r3, r2
 800597c:	d056      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800597e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005982:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005988:	d033      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800598a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800598e:	d82c      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005990:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005994:	d02f      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005996:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800599a:	d826      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 800599c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059a0:	d02b      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80059a2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059a6:	d820      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059ac:	d012      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80059ae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059b2:	d81a      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d022      	beq.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80059b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059bc:	d115      	bne.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c2:	3308      	adds	r3, #8
 80059c4:	2101      	movs	r1, #1
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 fa0e 	bl	8006de8 <RCCEx_PLL2_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059d2:	e015      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d8:	3328      	adds	r3, #40	@ 0x28
 80059da:	2101      	movs	r1, #1
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 fab5 	bl	8006f4c <RCCEx_PLL3_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059e8:	e00a      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059f0:	e006      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059f2:	bf00      	nop
 80059f4:	e004      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059f6:	bf00      	nop
 80059f8:	e002      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059fa:	bf00      	nop
 80059fc:	e000      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10d      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a08:	4b05      	ldr	r3, [pc, #20]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a0c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a16:	4a02      	ldr	r2, [pc, #8]	@ (8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a18:	430b      	orrs	r3, r1
 8005a1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a1c:	e006      	b.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a1e:	bf00      	nop
 8005a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a34:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a42:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a46:	460b      	mov	r3, r1
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	d055      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a58:	d033      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005a5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a5e:	d82c      	bhi.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a64:	d02f      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a6a:	d826      	bhi.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a70:	d02b      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005a72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a76:	d820      	bhi.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a7c:	d012      	beq.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005a7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a82:	d81a      	bhi.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d022      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005a88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a8c:	d115      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a92:	3308      	adds	r3, #8
 8005a94:	2101      	movs	r1, #1
 8005a96:	4618      	mov	r0, r3
 8005a98:	f001 f9a6 	bl	8006de8 <RCCEx_PLL2_Config>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005aa2:	e015      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa8:	3328      	adds	r3, #40	@ 0x28
 8005aaa:	2101      	movs	r1, #1
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 fa4d 	bl	8006f4c <RCCEx_PLL3_Config>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ab8:	e00a      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ac0:	e006      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ac2:	bf00      	nop
 8005ac4:	e004      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ac6:	bf00      	nop
 8005ac8:	e002      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005aca:	bf00      	nop
 8005acc:	e000      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ace:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10b      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ad8:	4ba3      	ldr	r3, [pc, #652]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005adc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ae0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ae8:	4a9f      	ldr	r2, [pc, #636]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aea:	430b      	orrs	r3, r1
 8005aec:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aee:	e003      	b.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b00:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b12:	460b      	mov	r3, r1
 8005b14:	4313      	orrs	r3, r2
 8005b16:	d037      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b22:	d00e      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005b24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b28:	d816      	bhi.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d018      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005b2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b32:	d111      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b34:	4b8c      	ldr	r3, [pc, #560]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b38:	4a8b      	ldr	r2, [pc, #556]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b40:	e00f      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b46:	3308      	adds	r3, #8
 8005b48:	2101      	movs	r1, #1
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f001 f94c 	bl	8006de8 <RCCEx_PLL2_Config>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b56:	e004      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b5e:	e000      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005b60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d10a      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b78:	4a7b      	ldr	r2, [pc, #492]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b7a:	430b      	orrs	r3, r1
 8005b7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b7e:	e003      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005b94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	d039      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d81c      	bhi.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bf5 	.word	0x08005bf5
 8005bbc:	08005bc9 	.word	0x08005bc9
 8005bc0:	08005bd7 	.word	0x08005bd7
 8005bc4:	08005bf5 	.word	0x08005bf5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc8:	4b67      	ldr	r3, [pc, #412]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bcc:	4a66      	ldr	r2, [pc, #408]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005bd4:	e00f      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bda:	3308      	adds	r3, #8
 8005bdc:	2102      	movs	r1, #2
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 f902 	bl	8006de8 <RCCEx_PLL2_Config>
 8005be4:	4603      	mov	r3, r0
 8005be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005bea:	e004      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bf2:	e000      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005bf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10a      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005bfe:	4b5a      	ldr	r3, [pc, #360]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c02:	f023 0103 	bic.w	r1, r3, #3
 8005c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c0c:	4a56      	ldr	r2, [pc, #344]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c0e:	430b      	orrs	r3, r1
 8005c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c12:	e003      	b.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c36:	460b      	mov	r3, r1
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	f000 809f 	beq.w	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c3e:	4b4b      	ldr	r3, [pc, #300]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a4a      	ldr	r2, [pc, #296]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c4a:	f7fc f96d 	bl	8001f28 <HAL_GetTick>
 8005c4e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c52:	e00b      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c54:	f7fc f968 	bl	8001f28 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005c5e:	1ad3      	subs	r3, r2, r3
 8005c60:	2b64      	cmp	r3, #100	@ 0x64
 8005c62:	d903      	bls.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c6a:	e005      	b.n	8005c78 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c6c:	4b3f      	ldr	r3, [pc, #252]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d0ed      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d179      	bne.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c80:	4b39      	ldr	r3, [pc, #228]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c8c:	4053      	eors	r3, r2
 8005c8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d015      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c96:	4b34      	ldr	r3, [pc, #208]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ca2:	4b31      	ldr	r3, [pc, #196]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca6:	4a30      	ldr	r2, [pc, #192]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005cae:	4b2e      	ldr	r3, [pc, #184]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cb8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005cba:	4a2b      	ldr	r2, [pc, #172]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cc0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cce:	d118      	bne.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd0:	f7fc f92a 	bl	8001f28 <HAL_GetTick>
 8005cd4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cd8:	e00d      	b.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cda:	f7fc f925 	bl	8001f28 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ce4:	1ad2      	subs	r2, r2, r3
 8005ce6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d903      	bls.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005cf4:	e005      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0eb      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d129      	bne.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d1a:	d10e      	bne.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005d1c:	4b12      	ldr	r3, [pc, #72]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d1e:	691b      	ldr	r3, [r3, #16]
 8005d20:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d2c:	091a      	lsrs	r2, r3, #4
 8005d2e:	4b10      	ldr	r3, [pc, #64]	@ (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	4a0d      	ldr	r2, [pc, #52]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d34:	430b      	orrs	r3, r1
 8005d36:	6113      	str	r3, [r2, #16]
 8005d38:	e005      	b.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d44:	6113      	str	r3, [r2, #16]
 8005d46:	4b08      	ldr	r3, [pc, #32]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d48:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d56:	4a04      	ldr	r2, [pc, #16]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d58:	430b      	orrs	r3, r1
 8005d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d5c:	e00e      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005d66:	e009      	b.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	58024800 	.word	0x58024800
 8005d70:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d84:	f002 0301 	and.w	r3, r2, #1
 8005d88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	f000 8089 	beq.w	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005da4:	2b28      	cmp	r3, #40	@ 0x28
 8005da6:	d86b      	bhi.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005da8:	a201      	add	r2, pc, #4	@ (adr r2, 8005db0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dae:	bf00      	nop
 8005db0:	08005e89 	.word	0x08005e89
 8005db4:	08005e81 	.word	0x08005e81
 8005db8:	08005e81 	.word	0x08005e81
 8005dbc:	08005e81 	.word	0x08005e81
 8005dc0:	08005e81 	.word	0x08005e81
 8005dc4:	08005e81 	.word	0x08005e81
 8005dc8:	08005e81 	.word	0x08005e81
 8005dcc:	08005e81 	.word	0x08005e81
 8005dd0:	08005e55 	.word	0x08005e55
 8005dd4:	08005e81 	.word	0x08005e81
 8005dd8:	08005e81 	.word	0x08005e81
 8005ddc:	08005e81 	.word	0x08005e81
 8005de0:	08005e81 	.word	0x08005e81
 8005de4:	08005e81 	.word	0x08005e81
 8005de8:	08005e81 	.word	0x08005e81
 8005dec:	08005e81 	.word	0x08005e81
 8005df0:	08005e6b 	.word	0x08005e6b
 8005df4:	08005e81 	.word	0x08005e81
 8005df8:	08005e81 	.word	0x08005e81
 8005dfc:	08005e81 	.word	0x08005e81
 8005e00:	08005e81 	.word	0x08005e81
 8005e04:	08005e81 	.word	0x08005e81
 8005e08:	08005e81 	.word	0x08005e81
 8005e0c:	08005e81 	.word	0x08005e81
 8005e10:	08005e89 	.word	0x08005e89
 8005e14:	08005e81 	.word	0x08005e81
 8005e18:	08005e81 	.word	0x08005e81
 8005e1c:	08005e81 	.word	0x08005e81
 8005e20:	08005e81 	.word	0x08005e81
 8005e24:	08005e81 	.word	0x08005e81
 8005e28:	08005e81 	.word	0x08005e81
 8005e2c:	08005e81 	.word	0x08005e81
 8005e30:	08005e89 	.word	0x08005e89
 8005e34:	08005e81 	.word	0x08005e81
 8005e38:	08005e81 	.word	0x08005e81
 8005e3c:	08005e81 	.word	0x08005e81
 8005e40:	08005e81 	.word	0x08005e81
 8005e44:	08005e81 	.word	0x08005e81
 8005e48:	08005e81 	.word	0x08005e81
 8005e4c:	08005e81 	.word	0x08005e81
 8005e50:	08005e89 	.word	0x08005e89
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e58:	3308      	adds	r3, #8
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f000 ffc3 	bl	8006de8 <RCCEx_PLL2_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e68:	e00f      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6e:	3328      	adds	r3, #40	@ 0x28
 8005e70:	2101      	movs	r1, #1
 8005e72:	4618      	mov	r0, r3
 8005e74:	f001 f86a 	bl	8006f4c <RCCEx_PLL3_Config>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e7e:	e004      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e86:	e000      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e92:	4bbf      	ldr	r3, [pc, #764]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e96:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005ea0:	4abb      	ldr	r2, [pc, #748]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ea6:	e003      	b.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb8:	f002 0302 	and.w	r3, r2, #2
 8005ebc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ec6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	d041      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ed6:	2b05      	cmp	r3, #5
 8005ed8:	d824      	bhi.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005eda:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005f2d 	.word	0x08005f2d
 8005ee4:	08005ef9 	.word	0x08005ef9
 8005ee8:	08005f0f 	.word	0x08005f0f
 8005eec:	08005f2d 	.word	0x08005f2d
 8005ef0:	08005f2d 	.word	0x08005f2d
 8005ef4:	08005f2d 	.word	0x08005f2d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005efc:	3308      	adds	r3, #8
 8005efe:	2101      	movs	r1, #1
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 ff71 	bl	8006de8 <RCCEx_PLL2_Config>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f0c:	e00f      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f12:	3328      	adds	r3, #40	@ 0x28
 8005f14:	2101      	movs	r1, #1
 8005f16:	4618      	mov	r0, r3
 8005f18:	f001 f818 	bl	8006f4c <RCCEx_PLL3_Config>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f22:	e004      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f2a:	e000      	b.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d10a      	bne.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f36:	4b96      	ldr	r3, [pc, #600]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3a:	f023 0107 	bic.w	r1, r3, #7
 8005f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f44:	4a92      	ldr	r2, [pc, #584]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f46:	430b      	orrs	r3, r1
 8005f48:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f4a:	e003      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f5c:	f002 0304 	and.w	r3, r2, #4
 8005f60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f64:	2300      	movs	r3, #0
 8005f66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f6a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005f6e:	460b      	mov	r3, r1
 8005f70:	4313      	orrs	r3, r2
 8005f72:	d044      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f7c:	2b05      	cmp	r3, #5
 8005f7e:	d825      	bhi.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005f80:	a201      	add	r2, pc, #4	@ (adr r2, 8005f88 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08005fd5 	.word	0x08005fd5
 8005f8c:	08005fa1 	.word	0x08005fa1
 8005f90:	08005fb7 	.word	0x08005fb7
 8005f94:	08005fd5 	.word	0x08005fd5
 8005f98:	08005fd5 	.word	0x08005fd5
 8005f9c:	08005fd5 	.word	0x08005fd5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 ff1d 	bl	8006de8 <RCCEx_PLL2_Config>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fb4:	e00f      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fba:	3328      	adds	r3, #40	@ 0x28
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 ffc4 	bl	8006f4c <RCCEx_PLL3_Config>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fca:	e004      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fd2:	e000      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005fd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10b      	bne.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fde:	4b6c      	ldr	r3, [pc, #432]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fe0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fe2:	f023 0107 	bic.w	r1, r3, #7
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fee:	4a68      	ldr	r2, [pc, #416]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ff4:	e003      	b.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ffa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006006:	f002 0320 	and.w	r3, r2, #32
 800600a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800600e:	2300      	movs	r3, #0
 8006010:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006014:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006018:	460b      	mov	r3, r1
 800601a:	4313      	orrs	r3, r2
 800601c:	d055      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800601e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006026:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800602a:	d033      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800602c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006030:	d82c      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006036:	d02f      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800603c:	d826      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800603e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006042:	d02b      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006044:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006048:	d820      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800604a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800604e:	d012      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006054:	d81a      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006056:	2b00      	cmp	r3, #0
 8006058:	d022      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800605a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800605e:	d115      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006064:	3308      	adds	r3, #8
 8006066:	2100      	movs	r1, #0
 8006068:	4618      	mov	r0, r3
 800606a:	f000 febd 	bl	8006de8 <RCCEx_PLL2_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006074:	e015      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	3328      	adds	r3, #40	@ 0x28
 800607c:	2102      	movs	r1, #2
 800607e:	4618      	mov	r0, r3
 8006080:	f000 ff64 	bl	8006f4c <RCCEx_PLL3_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800608a:	e00a      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006092:	e006      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006094:	bf00      	nop
 8006096:	e004      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006098:	bf00      	nop
 800609a:	e002      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800609c:	bf00      	nop
 800609e:	e000      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80060a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d10b      	bne.n	80060c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060aa:	4b39      	ldr	r3, [pc, #228]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ba:	4a35      	ldr	r2, [pc, #212]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060bc:	430b      	orrs	r3, r1
 80060be:	6553      	str	r3, [r2, #84]	@ 0x54
 80060c0:	e003      	b.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80060ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80060d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060da:	2300      	movs	r3, #0
 80060dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80060e4:	460b      	mov	r3, r1
 80060e6:	4313      	orrs	r3, r2
 80060e8:	d058      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80060ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060f6:	d033      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80060f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060fc:	d82c      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006102:	d02f      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006108:	d826      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800610a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800610e:	d02b      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8006110:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006114:	d820      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006116:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800611a:	d012      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800611c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006120:	d81a      	bhi.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d022      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006126:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800612a:	d115      	bne.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800612c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006130:	3308      	adds	r3, #8
 8006132:	2100      	movs	r1, #0
 8006134:	4618      	mov	r0, r3
 8006136:	f000 fe57 	bl	8006de8 <RCCEx_PLL2_Config>
 800613a:	4603      	mov	r3, r0
 800613c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006140:	e015      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006146:	3328      	adds	r3, #40	@ 0x28
 8006148:	2102      	movs	r1, #2
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fefe 	bl	8006f4c <RCCEx_PLL3_Config>
 8006150:	4603      	mov	r3, r0
 8006152:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006156:	e00a      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800615e:	e006      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006160:	bf00      	nop
 8006162:	e004      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006164:	bf00      	nop
 8006166:	e002      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006168:	bf00      	nop
 800616a:	e000      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800616c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10e      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006176:	4b06      	ldr	r3, [pc, #24]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006178:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800617a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800617e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006182:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006186:	4a02      	ldr	r2, [pc, #8]	@ (8006190 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006188:	430b      	orrs	r3, r1
 800618a:	6593      	str	r3, [r2, #88]	@ 0x58
 800618c:	e006      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800618e:	bf00      	nop
 8006190:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006194:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006198:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800619c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80061a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061ac:	2300      	movs	r3, #0
 80061ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80061b6:	460b      	mov	r3, r1
 80061b8:	4313      	orrs	r3, r2
 80061ba:	d055      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80061bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061c8:	d033      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80061ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061ce:	d82c      	bhi.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d4:	d02f      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80061d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061da:	d826      	bhi.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061e0:	d02b      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80061e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061e6:	d820      	bhi.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061ec:	d012      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80061ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061f2:	d81a      	bhi.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d022      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80061f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061fc:	d115      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006202:	3308      	adds	r3, #8
 8006204:	2100      	movs	r1, #0
 8006206:	4618      	mov	r0, r3
 8006208:	f000 fdee 	bl	8006de8 <RCCEx_PLL2_Config>
 800620c:	4603      	mov	r3, r0
 800620e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006212:	e015      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006218:	3328      	adds	r3, #40	@ 0x28
 800621a:	2102      	movs	r1, #2
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fe95 	bl	8006f4c <RCCEx_PLL3_Config>
 8006222:	4603      	mov	r3, r0
 8006224:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006228:	e00a      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006230:	e006      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006232:	bf00      	nop
 8006234:	e004      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006236:	bf00      	nop
 8006238:	e002      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800623a:	bf00      	nop
 800623c:	e000      	b.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800623e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006240:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10b      	bne.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006248:	4ba1      	ldr	r3, [pc, #644]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800624a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006254:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006258:	4a9d      	ldr	r2, [pc, #628]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800625a:	430b      	orrs	r3, r1
 800625c:	6593      	str	r3, [r2, #88]	@ 0x58
 800625e:	e003      	b.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f002 0308 	and.w	r3, r2, #8
 8006274:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006278:	2300      	movs	r3, #0
 800627a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800627e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006282:	460b      	mov	r3, r1
 8006284:	4313      	orrs	r3, r2
 8006286:	d01e      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006290:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006294:	d10c      	bne.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800629a:	3328      	adds	r3, #40	@ 0x28
 800629c:	2102      	movs	r1, #2
 800629e:	4618      	mov	r0, r3
 80062a0:	f000 fe54 	bl	8006f4c <RCCEx_PLL3_Config>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062b0:	4b87      	ldr	r3, [pc, #540]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062c0:	4a83      	ldr	r2, [pc, #524]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062c2:	430b      	orrs	r3, r1
 80062c4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	f002 0310 	and.w	r3, r2, #16
 80062d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062d6:	2300      	movs	r3, #0
 80062d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80062dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80062e0:	460b      	mov	r3, r1
 80062e2:	4313      	orrs	r3, r2
 80062e4:	d01e      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062f2:	d10c      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f8:	3328      	adds	r3, #40	@ 0x28
 80062fa:	2102      	movs	r1, #2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fe25 	bl	8006f4c <RCCEx_PLL3_Config>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800630e:	4b70      	ldr	r3, [pc, #448]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006312:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800631e:	4a6c      	ldr	r2, [pc, #432]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006320:	430b      	orrs	r3, r1
 8006322:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800632c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006330:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006334:	2300      	movs	r3, #0
 8006336:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800633a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800633e:	460b      	mov	r3, r1
 8006340:	4313      	orrs	r3, r2
 8006342:	d03e      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006348:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800634c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006350:	d022      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006356:	d81b      	bhi.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006358:	2b00      	cmp	r3, #0
 800635a:	d003      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800635c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006360:	d00b      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006362:	e015      	b.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006368:	3308      	adds	r3, #8
 800636a:	2100      	movs	r1, #0
 800636c:	4618      	mov	r0, r3
 800636e:	f000 fd3b 	bl	8006de8 <RCCEx_PLL2_Config>
 8006372:	4603      	mov	r3, r0
 8006374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006378:	e00f      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800637a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637e:	3328      	adds	r3, #40	@ 0x28
 8006380:	2102      	movs	r1, #2
 8006382:	4618      	mov	r0, r3
 8006384:	f000 fde2 	bl	8006f4c <RCCEx_PLL3_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800638e:	e004      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006396:	e000      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006398:	bf00      	nop
    }

    if (ret == HAL_OK)
 800639a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10b      	bne.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80063a2:	4b4b      	ldr	r3, [pc, #300]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063b2:	4a47      	ldr	r2, [pc, #284]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063b4:	430b      	orrs	r3, r1
 80063b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80063b8:	e003      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80063ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063d0:	2300      	movs	r3, #0
 80063d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80063d8:	460b      	mov	r3, r1
 80063da:	4313      	orrs	r3, r2
 80063dc:	d03b      	beq.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80063de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063ea:	d01f      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80063ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063f0:	d818      	bhi.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80063f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063f6:	d003      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80063f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063fc:	d007      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80063fe:	e011      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006400:	4b33      	ldr	r3, [pc, #204]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006404:	4a32      	ldr	r2, [pc, #200]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800640a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800640c:	e00f      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006412:	3328      	adds	r3, #40	@ 0x28
 8006414:	2101      	movs	r1, #1
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fd98 	bl	8006f4c <RCCEx_PLL3_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8006422:	e004      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800642a:	e000      	b.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800642c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800642e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10b      	bne.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006436:	4b26      	ldr	r3, [pc, #152]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006438:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800643a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800643e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006442:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006446:	4a22      	ldr	r2, [pc, #136]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006448:	430b      	orrs	r3, r1
 800644a:	6553      	str	r3, [r2, #84]	@ 0x54
 800644c:	e003      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006462:	673b      	str	r3, [r7, #112]	@ 0x70
 8006464:	2300      	movs	r3, #0
 8006466:	677b      	str	r3, [r7, #116]	@ 0x74
 8006468:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800646c:	460b      	mov	r3, r1
 800646e:	4313      	orrs	r3, r2
 8006470:	d034      	beq.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800647c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006480:	d007      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006482:	e011      	b.n	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006484:	4b12      	ldr	r3, [pc, #72]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006488:	4a11      	ldr	r2, [pc, #68]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800648a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800648e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006490:	e00e      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006496:	3308      	adds	r3, #8
 8006498:	2102      	movs	r1, #2
 800649a:	4618      	mov	r0, r3
 800649c:	f000 fca4 	bl	8006de8 <RCCEx_PLL2_Config>
 80064a0:	4603      	mov	r3, r0
 80064a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064a6:	e003      	b.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10d      	bne.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064b8:	4b05      	ldr	r3, [pc, #20]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c6:	4a02      	ldr	r2, [pc, #8]	@ (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064c8:	430b      	orrs	r3, r1
 80064ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064cc:	e006      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80064ce:	bf00      	nop
 80064d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80064e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064ea:	2300      	movs	r3, #0
 80064ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80064f2:	460b      	mov	r3, r1
 80064f4:	4313      	orrs	r3, r2
 80064f6:	d00c      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fc:	3328      	adds	r3, #40	@ 0x28
 80064fe:	2102      	movs	r1, #2
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fd23 	bl	8006f4c <RCCEx_PLL3_Config>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d002      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800651e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006520:	2300      	movs	r3, #0
 8006522:	667b      	str	r3, [r7, #100]	@ 0x64
 8006524:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006528:	460b      	mov	r3, r1
 800652a:	4313      	orrs	r3, r2
 800652c:	d038      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800652e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006532:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006536:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800653a:	d018      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800653c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006540:	d811      	bhi.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006542:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006546:	d014      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006548:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800654c:	d80b      	bhi.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d011      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006556:	d106      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006558:	4bc3      	ldr	r3, [pc, #780]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800655a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655c:	4ac2      	ldr	r2, [pc, #776]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800655e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006562:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006564:	e008      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800656c:	e004      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800656e:	bf00      	nop
 8006570:	e002      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006572:	bf00      	nop
 8006574:	e000      	b.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006576:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006578:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10b      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006580:	4bb9      	ldr	r3, [pc, #740]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006582:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006584:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800658c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006590:	4ab5      	ldr	r2, [pc, #724]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006592:	430b      	orrs	r3, r1
 8006594:	6553      	str	r3, [r2, #84]	@ 0x54
 8006596:	e003      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800659c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80065a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80065ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065ae:	2300      	movs	r3, #0
 80065b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80065b6:	460b      	mov	r3, r1
 80065b8:	4313      	orrs	r3, r2
 80065ba:	d009      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065bc:	4baa      	ldr	r3, [pc, #680]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80065c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065ca:	4aa7      	ldr	r2, [pc, #668]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065cc:	430b      	orrs	r3, r1
 80065ce:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80065d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80065dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80065de:	2300      	movs	r3, #0
 80065e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80065e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80065e6:	460b      	mov	r3, r1
 80065e8:	4313      	orrs	r3, r2
 80065ea:	d00a      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80065ec:	4b9e      	ldr	r3, [pc, #632]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80065f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80065fc:	4a9a      	ldr	r2, [pc, #616]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065fe:	430b      	orrs	r3, r1
 8006600:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800660a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800660e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006610:	2300      	movs	r3, #0
 8006612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006614:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006618:	460b      	mov	r3, r1
 800661a:	4313      	orrs	r3, r2
 800661c:	d009      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800661e:	4b92      	ldr	r3, [pc, #584]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006620:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006622:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800662a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800662c:	4a8e      	ldr	r2, [pc, #568]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800662e:	430b      	orrs	r3, r1
 8006630:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800663e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006640:	2300      	movs	r3, #0
 8006642:	647b      	str	r3, [r7, #68]	@ 0x44
 8006644:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006648:	460b      	mov	r3, r1
 800664a:	4313      	orrs	r3, r2
 800664c:	d00e      	beq.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800664e:	4b86      	ldr	r3, [pc, #536]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	4a85      	ldr	r2, [pc, #532]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006654:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006658:	6113      	str	r3, [r2, #16]
 800665a:	4b83      	ldr	r3, [pc, #524]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800665c:	6919      	ldr	r1, [r3, #16]
 800665e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006662:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006666:	4a80      	ldr	r2, [pc, #512]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006668:	430b      	orrs	r3, r1
 800666a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800666c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006678:	63bb      	str	r3, [r7, #56]	@ 0x38
 800667a:	2300      	movs	r3, #0
 800667c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800667e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006682:	460b      	mov	r3, r1
 8006684:	4313      	orrs	r3, r2
 8006686:	d009      	beq.n	800669c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006688:	4b77      	ldr	r3, [pc, #476]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800668a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800668c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006694:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006696:	4a74      	ldr	r2, [pc, #464]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006698:	430b      	orrs	r3, r1
 800669a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800669c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066aa:	2300      	movs	r3, #0
 80066ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80066b2:	460b      	mov	r3, r1
 80066b4:	4313      	orrs	r3, r2
 80066b6:	d00a      	beq.n	80066ce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066b8:	4b6b      	ldr	r3, [pc, #428]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066bc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80066c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066c8:	4a67      	ldr	r2, [pc, #412]	@ (8006868 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ca:	430b      	orrs	r3, r1
 80066cc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80066ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	2100      	movs	r1, #0
 80066d8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066e4:	460b      	mov	r3, r1
 80066e6:	4313      	orrs	r3, r2
 80066e8:	d011      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ee:	3308      	adds	r3, #8
 80066f0:	2100      	movs	r1, #0
 80066f2:	4618      	mov	r0, r3
 80066f4:	f000 fb78 	bl	8006de8 <RCCEx_PLL2_Config>
 80066f8:	4603      	mov	r3, r0
 80066fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800670a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800670e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	2100      	movs	r1, #0
 8006718:	6239      	str	r1, [r7, #32]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006720:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006724:	460b      	mov	r3, r1
 8006726:	4313      	orrs	r3, r2
 8006728:	d011      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800672a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672e:	3308      	adds	r3, #8
 8006730:	2101      	movs	r1, #1
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fb58 	bl	8006de8 <RCCEx_PLL2_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800673e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006742:	2b00      	cmp	r3, #0
 8006744:	d003      	beq.n	800674e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800674a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800674e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006756:	2100      	movs	r1, #0
 8006758:	61b9      	str	r1, [r7, #24]
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006764:	460b      	mov	r3, r1
 8006766:	4313      	orrs	r3, r2
 8006768:	d011      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800676a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676e:	3308      	adds	r3, #8
 8006770:	2102      	movs	r1, #2
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fb38 	bl	8006de8 <RCCEx_PLL2_Config>
 8006778:	4603      	mov	r3, r0
 800677a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800677e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	2100      	movs	r1, #0
 8006798:	6139      	str	r1, [r7, #16]
 800679a:	f003 0308 	and.w	r3, r3, #8
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067a4:	460b      	mov	r3, r1
 80067a6:	4313      	orrs	r3, r2
 80067a8:	d011      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ae:	3328      	adds	r3, #40	@ 0x28
 80067b0:	2100      	movs	r1, #0
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fbca 	bl	8006f4c <RCCEx_PLL3_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80067be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80067ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	2100      	movs	r1, #0
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	f003 0310 	and.w	r3, r3, #16
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067e4:	460b      	mov	r3, r1
 80067e6:	4313      	orrs	r3, r2
 80067e8:	d011      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ee:	3328      	adds	r3, #40	@ 0x28
 80067f0:	2101      	movs	r1, #1
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fbaa 	bl	8006f4c <RCCEx_PLL3_Config>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800680a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800680e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	2100      	movs	r1, #0
 8006818:	6039      	str	r1, [r7, #0]
 800681a:	f003 0320 	and.w	r3, r3, #32
 800681e:	607b      	str	r3, [r7, #4]
 8006820:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006824:	460b      	mov	r3, r1
 8006826:	4313      	orrs	r3, r2
 8006828:	d011      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800682a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682e:	3328      	adds	r3, #40	@ 0x28
 8006830:	2102      	movs	r1, #2
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fb8a 	bl	8006f4c <RCCEx_PLL3_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800683e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800684a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800684e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006856:	2300      	movs	r3, #0
 8006858:	e000      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
}
 800685c:	4618      	mov	r0, r3
 800685e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006862:	46bd      	mov	sp, r7
 8006864:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006868:	58024400 	.word	0x58024400

0800686c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006870:	f7fe fd96 	bl	80053a0 <HAL_RCC_GetHCLKFreq>
 8006874:	4602      	mov	r2, r0
 8006876:	4b06      	ldr	r3, [pc, #24]	@ (8006890 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006878:	6a1b      	ldr	r3, [r3, #32]
 800687a:	091b      	lsrs	r3, r3, #4
 800687c:	f003 0307 	and.w	r3, r3, #7
 8006880:	4904      	ldr	r1, [pc, #16]	@ (8006894 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006882:	5ccb      	ldrb	r3, [r1, r3]
 8006884:	f003 031f 	and.w	r3, r3, #31
 8006888:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800688c:	4618      	mov	r0, r3
 800688e:	bd80      	pop	{r7, pc}
 8006890:	58024400 	.word	0x58024400
 8006894:	0800a990 	.word	0x0800a990

08006898 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006898:	b480      	push	{r7}
 800689a:	b089      	sub	sp, #36	@ 0x24
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80068a0:	4ba1      	ldr	r3, [pc, #644]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	f003 0303 	and.w	r3, r3, #3
 80068a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80068aa:	4b9f      	ldr	r3, [pc, #636]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ae:	0b1b      	lsrs	r3, r3, #12
 80068b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80068b6:	4b9c      	ldr	r3, [pc, #624]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ba:	091b      	lsrs	r3, r3, #4
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80068c2:	4b99      	ldr	r3, [pc, #612]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c6:	08db      	lsrs	r3, r3, #3
 80068c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	fb02 f303 	mul.w	r3, r2, r3
 80068d2:	ee07 3a90 	vmov	s15, r3
 80068d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 8111 	beq.w	8006b08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	f000 8083 	beq.w	80069f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	2b02      	cmp	r3, #2
 80068f2:	f200 80a1 	bhi.w	8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d056      	beq.n	80069b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006902:	e099      	b.n	8006a38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006904:	4b88      	ldr	r3, [pc, #544]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d02d      	beq.n	800696c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006910:	4b85      	ldr	r3, [pc, #532]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	08db      	lsrs	r3, r3, #3
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	4a84      	ldr	r2, [pc, #528]	@ (8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
 8006920:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	ee07 3a90 	vmov	s15, r3
 8006928:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	ee07 3a90 	vmov	s15, r3
 8006932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800693a:	4b7b      	ldr	r3, [pc, #492]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800693c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800694a:	ed97 6a03 	vldr	s12, [r7, #12]
 800694e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800695a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800695e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006966:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800696a:	e087      	b.n	8006a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	ee07 3a90 	vmov	s15, r3
 8006972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006976:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006b34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800697a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697e:	4b6a      	ldr	r3, [pc, #424]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006986:	ee07 3a90 	vmov	s15, r3
 800698a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006992:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800699a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ae:	e065      	b.n	8006a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	ee07 3a90 	vmov	s15, r3
 80069b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006b38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069c2:	4b59      	ldr	r3, [pc, #356]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ca:	ee07 3a90 	vmov	s15, r3
 80069ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80069d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069f2:	e043      	b.n	8006a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	ee07 3a90 	vmov	s15, r3
 80069fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a06:	4b48      	ldr	r3, [pc, #288]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a36:	e021      	b.n	8006a7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	ee07 3a90 	vmov	s15, r3
 8006a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006b38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a4a:	4b37      	ldr	r3, [pc, #220]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a52:	ee07 3a90 	vmov	s15, r3
 8006a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006b30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a80:	0a5b      	lsrs	r3, r3, #9
 8006a82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006aa2:	ee17 2a90 	vmov	r2, s15
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aae:	0c1b      	lsrs	r3, r3, #16
 8006ab0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ab4:	ee07 3a90 	vmov	s15, r3
 8006ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ac0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ac4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006acc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ad0:	ee17 2a90 	vmov	r2, s15
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ad8:	4b13      	ldr	r3, [pc, #76]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006adc:	0e1b      	lsrs	r3, r3, #24
 8006ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006afe:	ee17 2a90 	vmov	r2, s15
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b06:	e008      	b.n	8006b1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	609a      	str	r2, [r3, #8]
}
 8006b1a:	bf00      	nop
 8006b1c:	3724      	adds	r7, #36	@ 0x24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	58024400 	.word	0x58024400
 8006b2c:	03d09000 	.word	0x03d09000
 8006b30:	46000000 	.word	0x46000000
 8006b34:	4c742400 	.word	0x4c742400
 8006b38:	4a742400 	.word	0x4a742400
 8006b3c:	4af42400 	.word	0x4af42400

08006b40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b089      	sub	sp, #36	@ 0x24
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b48:	4ba1      	ldr	r3, [pc, #644]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4c:	f003 0303 	and.w	r3, r3, #3
 8006b50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006b52:	4b9f      	ldr	r3, [pc, #636]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b56:	0d1b      	lsrs	r3, r3, #20
 8006b58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b5e:	4b9c      	ldr	r3, [pc, #624]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b62:	0a1b      	lsrs	r3, r3, #8
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006b6a:	4b99      	ldr	r3, [pc, #612]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6e:	08db      	lsrs	r3, r3, #3
 8006b70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f000 8111 	beq.w	8006db0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	f000 8083 	beq.w	8006c9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	f200 80a1 	bhi.w	8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d056      	beq.n	8006c58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006baa:	e099      	b.n	8006ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bac:	4b88      	ldr	r3, [pc, #544]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d02d      	beq.n	8006c14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bb8:	4b85      	ldr	r3, [pc, #532]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	08db      	lsrs	r3, r3, #3
 8006bbe:	f003 0303 	and.w	r3, r3, #3
 8006bc2:	4a84      	ldr	r2, [pc, #528]	@ (8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006bc4:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be2:	4b7b      	ldr	r3, [pc, #492]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c12:	e087      	b.n	8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006ddc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c26:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c56:	e065      	b.n	8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	ee07 3a90 	vmov	s15, r3
 8006c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006de0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c6a:	4b59      	ldr	r3, [pc, #356]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c72:	ee07 3a90 	vmov	s15, r3
 8006c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c9a:	e043      	b.n	8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cae:	4b48      	ldr	r3, [pc, #288]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb6:	ee07 3a90 	vmov	s15, r3
 8006cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cc2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cde:	e021      	b.n	8006d24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006de0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cf2:	4b37      	ldr	r3, [pc, #220]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cfa:	ee07 3a90 	vmov	s15, r3
 8006cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006d24:	4b2a      	ldr	r3, [pc, #168]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d28:	0a5b      	lsrs	r3, r3, #9
 8006d2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d2e:	ee07 3a90 	vmov	s15, r3
 8006d32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d4a:	ee17 2a90 	vmov	r2, s15
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006d52:	4b1f      	ldr	r3, [pc, #124]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d56:	0c1b      	lsrs	r3, r3, #16
 8006d58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d5c:	ee07 3a90 	vmov	s15, r3
 8006d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d78:	ee17 2a90 	vmov	r2, s15
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006d80:	4b13      	ldr	r3, [pc, #76]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d84:	0e1b      	lsrs	r3, r3, #24
 8006d86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da6:	ee17 2a90 	vmov	r2, s15
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006dae:	e008      	b.n	8006dc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	609a      	str	r2, [r3, #8]
}
 8006dc2:	bf00      	nop
 8006dc4:	3724      	adds	r7, #36	@ 0x24
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr
 8006dce:	bf00      	nop
 8006dd0:	58024400 	.word	0x58024400
 8006dd4:	03d09000 	.word	0x03d09000
 8006dd8:	46000000 	.word	0x46000000
 8006ddc:	4c742400 	.word	0x4c742400
 8006de0:	4a742400 	.word	0x4a742400
 8006de4:	4af42400 	.word	0x4af42400

08006de8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006df6:	4b53      	ldr	r3, [pc, #332]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfa:	f003 0303 	and.w	r3, r3, #3
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d101      	bne.n	8006e06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e099      	b.n	8006f3a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e06:	4b4f      	ldr	r3, [pc, #316]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a4e      	ldr	r2, [pc, #312]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006e0c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e12:	f7fb f889 	bl	8001f28 <HAL_GetTick>
 8006e16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e18:	e008      	b.n	8006e2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e1a:	f7fb f885 	bl	8001f28 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d901      	bls.n	8006e2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e086      	b.n	8006f3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e2c:	4b45      	ldr	r3, [pc, #276]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d1f0      	bne.n	8006e1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e38:	4b42      	ldr	r3, [pc, #264]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	031b      	lsls	r3, r3, #12
 8006e46:	493f      	ldr	r1, [pc, #252]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	3b01      	subs	r3, #1
 8006e5c:	025b      	lsls	r3, r3, #9
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	431a      	orrs	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	68db      	ldr	r3, [r3, #12]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	041b      	lsls	r3, r3, #16
 8006e6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	061b      	lsls	r3, r3, #24
 8006e78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e7c:	4931      	ldr	r1, [pc, #196]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e82:	4b30      	ldr	r3, [pc, #192]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	492d      	ldr	r1, [pc, #180]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006e90:	4313      	orrs	r3, r2
 8006e92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e94:	4b2b      	ldr	r3, [pc, #172]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e98:	f023 0220 	bic.w	r2, r3, #32
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	4928      	ldr	r1, [pc, #160]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006ea6:	4b27      	ldr	r3, [pc, #156]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eaa:	4a26      	ldr	r2, [pc, #152]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006eac:	f023 0310 	bic.w	r3, r3, #16
 8006eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006eb2:	4b24      	ldr	r3, [pc, #144]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006eb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eb6:	4b24      	ldr	r3, [pc, #144]	@ (8006f48 <RCCEx_PLL2_Config+0x160>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	69d2      	ldr	r2, [r2, #28]
 8006ebe:	00d2      	lsls	r2, r2, #3
 8006ec0:	4920      	ldr	r1, [pc, #128]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eca:	4a1e      	ldr	r2, [pc, #120]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006ecc:	f043 0310 	orr.w	r3, r3, #16
 8006ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006edc:	4a19      	ldr	r2, [pc, #100]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006ede:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ee2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ee4:	e00f      	b.n	8006f06 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d106      	bne.n	8006efa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006eec:	4b15      	ldr	r3, [pc, #84]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef0:	4a14      	ldr	r2, [pc, #80]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006ef2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ef8:	e005      	b.n	8006f06 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006efa:	4b12      	ldr	r3, [pc, #72]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efe:	4a11      	ldr	r2, [pc, #68]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006f00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f04:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f06:	4b0f      	ldr	r3, [pc, #60]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006f0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f12:	f7fb f809 	bl	8001f28 <HAL_GetTick>
 8006f16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f18:	e008      	b.n	8006f2c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f1a:	f7fb f805 	bl	8001f28 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d901      	bls.n	8006f2c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f28:	2303      	movs	r3, #3
 8006f2a:	e006      	b.n	8006f3a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f2c:	4b05      	ldr	r3, [pc, #20]	@ (8006f44 <RCCEx_PLL2_Config+0x15c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0f0      	beq.n	8006f1a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	58024400 	.word	0x58024400
 8006f48:	ffff0007 	.word	0xffff0007

08006f4c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f5a:	4b53      	ldr	r3, [pc, #332]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8006f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	2b03      	cmp	r3, #3
 8006f64:	d101      	bne.n	8006f6a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e099      	b.n	800709e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f6a:	4b4f      	ldr	r3, [pc, #316]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a4e      	ldr	r2, [pc, #312]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8006f70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f76:	f7fa ffd7 	bl	8001f28 <HAL_GetTick>
 8006f7a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f7c:	e008      	b.n	8006f90 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f7e:	f7fa ffd3 	bl	8001f28 <HAL_GetTick>
 8006f82:	4602      	mov	r2, r0
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	1ad3      	subs	r3, r2, r3
 8006f88:	2b02      	cmp	r3, #2
 8006f8a:	d901      	bls.n	8006f90 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	e086      	b.n	800709e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f90:	4b45      	ldr	r3, [pc, #276]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1f0      	bne.n	8006f7e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f9c:	4b42      	ldr	r3, [pc, #264]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	051b      	lsls	r3, r3, #20
 8006faa:	493f      	ldr	r1, [pc, #252]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	3b01      	subs	r3, #1
 8006fb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	025b      	lsls	r3, r3, #9
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	431a      	orrs	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	041b      	lsls	r3, r3, #16
 8006fce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	3b01      	subs	r3, #1
 8006fda:	061b      	lsls	r3, r3, #24
 8006fdc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fe0:	4931      	ldr	r1, [pc, #196]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006fe6:	4b30      	ldr	r3, [pc, #192]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8006fe8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	492d      	ldr	r1, [pc, #180]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8006ff4:	4313      	orrs	r3, r2
 8006ff6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8006ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	4928      	ldr	r1, [pc, #160]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8007006:	4313      	orrs	r3, r2
 8007008:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800700a:	4b27      	ldr	r3, [pc, #156]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 800700c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700e:	4a26      	ldr	r2, [pc, #152]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8007010:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007014:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007016:	4b24      	ldr	r3, [pc, #144]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8007018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800701a:	4b24      	ldr	r3, [pc, #144]	@ (80070ac <RCCEx_PLL3_Config+0x160>)
 800701c:	4013      	ands	r3, r2
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	69d2      	ldr	r2, [r2, #28]
 8007022:	00d2      	lsls	r2, r2, #3
 8007024:	4920      	ldr	r1, [pc, #128]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8007026:	4313      	orrs	r3, r2
 8007028:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800702a:	4b1f      	ldr	r3, [pc, #124]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 800702c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702e:	4a1e      	ldr	r2, [pc, #120]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8007030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007034:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d106      	bne.n	800704a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800703c:	4b1a      	ldr	r3, [pc, #104]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 800703e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007040:	4a19      	ldr	r2, [pc, #100]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8007042:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007046:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007048:	e00f      	b.n	800706a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d106      	bne.n	800705e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007050:	4b15      	ldr	r3, [pc, #84]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8007052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007054:	4a14      	ldr	r2, [pc, #80]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8007056:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800705a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800705c:	e005      	b.n	800706a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800705e:	4b12      	ldr	r3, [pc, #72]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	4a11      	ldr	r2, [pc, #68]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8007064:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007068:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800706a:	4b0f      	ldr	r3, [pc, #60]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a0e      	ldr	r2, [pc, #56]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8007070:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007076:	f7fa ff57 	bl	8001f28 <HAL_GetTick>
 800707a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800707c:	e008      	b.n	8007090 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800707e:	f7fa ff53 	bl	8001f28 <HAL_GetTick>
 8007082:	4602      	mov	r2, r0
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	1ad3      	subs	r3, r2, r3
 8007088:	2b02      	cmp	r3, #2
 800708a:	d901      	bls.n	8007090 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800708c:	2303      	movs	r3, #3
 800708e:	e006      	b.n	800709e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007090:	4b05      	ldr	r3, [pc, #20]	@ (80070a8 <RCCEx_PLL3_Config+0x15c>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007098:	2b00      	cmp	r3, #0
 800709a:	d0f0      	beq.n	800707e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800709c:	7bfb      	ldrb	r3, [r7, #15]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	58024400 	.word	0x58024400
 80070ac:	ffff0007 	.word	0xffff0007

080070b0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e10f      	b.n	80072e2 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a87      	ldr	r2, [pc, #540]	@ (80072ec <HAL_SPI_Init+0x23c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00f      	beq.n	80070f2 <HAL_SPI_Init+0x42>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a86      	ldr	r2, [pc, #536]	@ (80072f0 <HAL_SPI_Init+0x240>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00a      	beq.n	80070f2 <HAL_SPI_Init+0x42>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a84      	ldr	r2, [pc, #528]	@ (80072f4 <HAL_SPI_Init+0x244>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d005      	beq.n	80070f2 <HAL_SPI_Init+0x42>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	2b0f      	cmp	r3, #15
 80070ec:	d901      	bls.n	80070f2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e0f7      	b.n	80072e2 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f900 	bl	80072f8 <SPI_GetPacketSize>
 80070f8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a7b      	ldr	r2, [pc, #492]	@ (80072ec <HAL_SPI_Init+0x23c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00c      	beq.n	800711e <HAL_SPI_Init+0x6e>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a79      	ldr	r2, [pc, #484]	@ (80072f0 <HAL_SPI_Init+0x240>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d007      	beq.n	800711e <HAL_SPI_Init+0x6e>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a78      	ldr	r2, [pc, #480]	@ (80072f4 <HAL_SPI_Init+0x244>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d002      	beq.n	800711e <HAL_SPI_Init+0x6e>
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2b08      	cmp	r3, #8
 800711c:	d811      	bhi.n	8007142 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007122:	4a72      	ldr	r2, [pc, #456]	@ (80072ec <HAL_SPI_Init+0x23c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d009      	beq.n	800713c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a70      	ldr	r2, [pc, #448]	@ (80072f0 <HAL_SPI_Init+0x240>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d004      	beq.n	800713c <HAL_SPI_Init+0x8c>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a6f      	ldr	r2, [pc, #444]	@ (80072f4 <HAL_SPI_Init+0x244>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d104      	bne.n	8007146 <HAL_SPI_Init+0x96>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2b10      	cmp	r3, #16
 8007140:	d901      	bls.n	8007146 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e0cd      	b.n	80072e2 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fa f9c8 	bl	80014f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f022 0201 	bic.w	r2, r2, #1
 8007176:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8007182:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800718c:	d119      	bne.n	80071c2 <HAL_SPI_Init+0x112>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007196:	d103      	bne.n	80071a0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800719c:	2b00      	cmp	r3, #0
 800719e:	d008      	beq.n	80071b2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10c      	bne.n	80071c2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80071ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071b0:	d107      	bne.n	80071c2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	681a      	ldr	r2, [r3, #0]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80071c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00f      	beq.n	80071ee <HAL_SPI_Init+0x13e>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	2b06      	cmp	r3, #6
 80071d4:	d90b      	bls.n	80071ee <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	430a      	orrs	r2, r1
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	e007      	b.n	80071fe <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80071fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	69da      	ldr	r2, [r3, #28]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007206:	431a      	orrs	r2, r3
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	431a      	orrs	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007210:	ea42 0103 	orr.w	r1, r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	68da      	ldr	r2, [r3, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	699b      	ldr	r3, [r3, #24]
 8007234:	431a      	orrs	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	431a      	orrs	r2, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	431a      	orrs	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	431a      	orrs	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007252:	431a      	orrs	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	431a      	orrs	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800725e:	ea42 0103 	orr.w	r1, r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d113      	bne.n	800729e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007288:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800729c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0201 	bic.w	r2, r2, #1
 80072ac:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d00a      	beq.n	80072d0 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80072e0:	2300      	movs	r3, #0
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	40013000 	.word	0x40013000
 80072f0:	40003800 	.word	0x40003800
 80072f4:	40003c00 	.word	0x40003c00

080072f8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007304:	095b      	lsrs	r3, r3, #5
 8007306:	3301      	adds	r3, #1
 8007308:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	3301      	adds	r3, #1
 8007310:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	3307      	adds	r3, #7
 8007316:	08db      	lsrs	r3, r3, #3
 8007318:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	68fa      	ldr	r2, [r7, #12]
 800731e:	fb02 f303 	mul.w	r3, r2, r3
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b082      	sub	sp, #8
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d101      	bne.n	8007340 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800733c:	2301      	movs	r3, #1
 800733e:	e049      	b.n	80073d4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d106      	bne.n	800735a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f7fa fb5f 	bl	8001a18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2202      	movs	r2, #2
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3304      	adds	r3, #4
 800736a:	4619      	mov	r1, r3
 800736c:	4610      	mov	r0, r2
 800736e:	f000 fbf3 	bl	8007b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2201      	movs	r2, #1
 8007376:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2201      	movs	r2, #1
 800739e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b082      	sub	sp, #8
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d101      	bne.n	80073ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	e049      	b.n	8007482 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d106      	bne.n	8007408 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f841 	bl	800748a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	3304      	adds	r3, #4
 8007418:	4619      	mov	r1, r3
 800741a:	4610      	mov	r0, r2
 800741c:	f000 fb9c 	bl	8007b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2201      	movs	r2, #1
 8007444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2201      	movs	r2, #1
 800744c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2201      	movs	r2, #1
 8007464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800748a:	b480      	push	{r7}
 800748c:	b083      	sub	sp, #12
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007492:	bf00      	nop
 8007494:	370c      	adds	r7, #12
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
	...

080074a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d109      	bne.n	80074c4 <HAL_TIM_PWM_Start+0x24>
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	bf14      	ite	ne
 80074bc:	2301      	movne	r3, #1
 80074be:	2300      	moveq	r3, #0
 80074c0:	b2db      	uxtb	r3, r3
 80074c2:	e03c      	b.n	800753e <HAL_TIM_PWM_Start+0x9e>
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d109      	bne.n	80074de <HAL_TIM_PWM_Start+0x3e>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80074d0:	b2db      	uxtb	r3, r3
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	bf14      	ite	ne
 80074d6:	2301      	movne	r3, #1
 80074d8:	2300      	moveq	r3, #0
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	e02f      	b.n	800753e <HAL_TIM_PWM_Start+0x9e>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d109      	bne.n	80074f8 <HAL_TIM_PWM_Start+0x58>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	bf14      	ite	ne
 80074f0:	2301      	movne	r3, #1
 80074f2:	2300      	moveq	r3, #0
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	e022      	b.n	800753e <HAL_TIM_PWM_Start+0x9e>
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2b0c      	cmp	r3, #12
 80074fc:	d109      	bne.n	8007512 <HAL_TIM_PWM_Start+0x72>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b01      	cmp	r3, #1
 8007508:	bf14      	ite	ne
 800750a:	2301      	movne	r3, #1
 800750c:	2300      	moveq	r3, #0
 800750e:	b2db      	uxtb	r3, r3
 8007510:	e015      	b.n	800753e <HAL_TIM_PWM_Start+0x9e>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b10      	cmp	r3, #16
 8007516:	d109      	bne.n	800752c <HAL_TIM_PWM_Start+0x8c>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	bf14      	ite	ne
 8007524:	2301      	movne	r3, #1
 8007526:	2300      	moveq	r3, #0
 8007528:	b2db      	uxtb	r3, r3
 800752a:	e008      	b.n	800753e <HAL_TIM_PWM_Start+0x9e>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b01      	cmp	r3, #1
 8007536:	bf14      	ite	ne
 8007538:	2301      	movne	r3, #1
 800753a:	2300      	moveq	r3, #0
 800753c:	b2db      	uxtb	r3, r3
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	e0a1      	b.n	800768a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d104      	bne.n	8007556 <HAL_TIM_PWM_Start+0xb6>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2202      	movs	r2, #2
 8007550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007554:	e023      	b.n	800759e <HAL_TIM_PWM_Start+0xfe>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b04      	cmp	r3, #4
 800755a:	d104      	bne.n	8007566 <HAL_TIM_PWM_Start+0xc6>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007564:	e01b      	b.n	800759e <HAL_TIM_PWM_Start+0xfe>
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	2b08      	cmp	r3, #8
 800756a:	d104      	bne.n	8007576 <HAL_TIM_PWM_Start+0xd6>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007574:	e013      	b.n	800759e <HAL_TIM_PWM_Start+0xfe>
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	2b0c      	cmp	r3, #12
 800757a:	d104      	bne.n	8007586 <HAL_TIM_PWM_Start+0xe6>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2202      	movs	r2, #2
 8007580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007584:	e00b      	b.n	800759e <HAL_TIM_PWM_Start+0xfe>
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	2b10      	cmp	r3, #16
 800758a:	d104      	bne.n	8007596 <HAL_TIM_PWM_Start+0xf6>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007594:	e003      	b.n	800759e <HAL_TIM_PWM_Start+0xfe>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2202      	movs	r2, #2
 800759a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2201      	movs	r2, #1
 80075a4:	6839      	ldr	r1, [r7, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 ffda 	bl	8008560 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a38      	ldr	r2, [pc, #224]	@ (8007694 <HAL_TIM_PWM_Start+0x1f4>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d013      	beq.n	80075de <HAL_TIM_PWM_Start+0x13e>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a37      	ldr	r2, [pc, #220]	@ (8007698 <HAL_TIM_PWM_Start+0x1f8>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00e      	beq.n	80075de <HAL_TIM_PWM_Start+0x13e>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a35      	ldr	r2, [pc, #212]	@ (800769c <HAL_TIM_PWM_Start+0x1fc>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d009      	beq.n	80075de <HAL_TIM_PWM_Start+0x13e>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a34      	ldr	r2, [pc, #208]	@ (80076a0 <HAL_TIM_PWM_Start+0x200>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d004      	beq.n	80075de <HAL_TIM_PWM_Start+0x13e>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a32      	ldr	r2, [pc, #200]	@ (80076a4 <HAL_TIM_PWM_Start+0x204>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d101      	bne.n	80075e2 <HAL_TIM_PWM_Start+0x142>
 80075de:	2301      	movs	r3, #1
 80075e0:	e000      	b.n	80075e4 <HAL_TIM_PWM_Start+0x144>
 80075e2:	2300      	movs	r3, #0
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d007      	beq.n	80075f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80075f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a25      	ldr	r2, [pc, #148]	@ (8007694 <HAL_TIM_PWM_Start+0x1f4>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d022      	beq.n	8007648 <HAL_TIM_PWM_Start+0x1a8>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800760a:	d01d      	beq.n	8007648 <HAL_TIM_PWM_Start+0x1a8>
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a25      	ldr	r2, [pc, #148]	@ (80076a8 <HAL_TIM_PWM_Start+0x208>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d018      	beq.n	8007648 <HAL_TIM_PWM_Start+0x1a8>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a24      	ldr	r2, [pc, #144]	@ (80076ac <HAL_TIM_PWM_Start+0x20c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d013      	beq.n	8007648 <HAL_TIM_PWM_Start+0x1a8>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a22      	ldr	r2, [pc, #136]	@ (80076b0 <HAL_TIM_PWM_Start+0x210>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00e      	beq.n	8007648 <HAL_TIM_PWM_Start+0x1a8>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1a      	ldr	r2, [pc, #104]	@ (8007698 <HAL_TIM_PWM_Start+0x1f8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d009      	beq.n	8007648 <HAL_TIM_PWM_Start+0x1a8>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a1e      	ldr	r2, [pc, #120]	@ (80076b4 <HAL_TIM_PWM_Start+0x214>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d004      	beq.n	8007648 <HAL_TIM_PWM_Start+0x1a8>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a16      	ldr	r2, [pc, #88]	@ (800769c <HAL_TIM_PWM_Start+0x1fc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d115      	bne.n	8007674 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	689a      	ldr	r2, [r3, #8]
 800764e:	4b1a      	ldr	r3, [pc, #104]	@ (80076b8 <HAL_TIM_PWM_Start+0x218>)
 8007650:	4013      	ands	r3, r2
 8007652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2b06      	cmp	r3, #6
 8007658:	d015      	beq.n	8007686 <HAL_TIM_PWM_Start+0x1e6>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007660:	d011      	beq.n	8007686 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f042 0201 	orr.w	r2, r2, #1
 8007670:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007672:	e008      	b.n	8007686 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0201 	orr.w	r2, r2, #1
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	e000      	b.n	8007688 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007686:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	40010000 	.word	0x40010000
 8007698:	40010400 	.word	0x40010400
 800769c:	40014000 	.word	0x40014000
 80076a0:	40014400 	.word	0x40014400
 80076a4:	40014800 	.word	0x40014800
 80076a8:	40000400 	.word	0x40000400
 80076ac:	40000800 	.word	0x40000800
 80076b0:	40000c00 	.word	0x40000c00
 80076b4:	40001800 	.word	0x40001800
 80076b8:	00010007 	.word	0x00010007

080076bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d101      	bne.n	80076da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076d6:	2302      	movs	r3, #2
 80076d8:	e0ff      	b.n	80078da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2201      	movs	r2, #1
 80076de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b14      	cmp	r3, #20
 80076e6:	f200 80f0 	bhi.w	80078ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80076ea:	a201      	add	r2, pc, #4	@ (adr r2, 80076f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076f0:	08007745 	.word	0x08007745
 80076f4:	080078cb 	.word	0x080078cb
 80076f8:	080078cb 	.word	0x080078cb
 80076fc:	080078cb 	.word	0x080078cb
 8007700:	08007785 	.word	0x08007785
 8007704:	080078cb 	.word	0x080078cb
 8007708:	080078cb 	.word	0x080078cb
 800770c:	080078cb 	.word	0x080078cb
 8007710:	080077c7 	.word	0x080077c7
 8007714:	080078cb 	.word	0x080078cb
 8007718:	080078cb 	.word	0x080078cb
 800771c:	080078cb 	.word	0x080078cb
 8007720:	08007807 	.word	0x08007807
 8007724:	080078cb 	.word	0x080078cb
 8007728:	080078cb 	.word	0x080078cb
 800772c:	080078cb 	.word	0x080078cb
 8007730:	08007849 	.word	0x08007849
 8007734:	080078cb 	.word	0x080078cb
 8007738:	080078cb 	.word	0x080078cb
 800773c:	080078cb 	.word	0x080078cb
 8007740:	08007889 	.word	0x08007889
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	4618      	mov	r0, r3
 800774c:	f000 faaa 	bl	8007ca4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	699a      	ldr	r2, [r3, #24]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0208 	orr.w	r2, r2, #8
 800775e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	699a      	ldr	r2, [r3, #24]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f022 0204 	bic.w	r2, r2, #4
 800776e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	6999      	ldr	r1, [r3, #24]
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	691a      	ldr	r2, [r3, #16]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	430a      	orrs	r2, r1
 8007780:	619a      	str	r2, [r3, #24]
      break;
 8007782:	e0a5      	b.n	80078d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	68b9      	ldr	r1, [r7, #8]
 800778a:	4618      	mov	r0, r3
 800778c:	f000 fb1a 	bl	8007dc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699a      	ldr	r2, [r3, #24]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800779e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6999      	ldr	r1, [r3, #24]
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	021a      	lsls	r2, r3, #8
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	619a      	str	r2, [r3, #24]
      break;
 80077c4:	e084      	b.n	80078d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68b9      	ldr	r1, [r7, #8]
 80077cc:	4618      	mov	r0, r3
 80077ce:	f000 fb83 	bl	8007ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	69da      	ldr	r2, [r3, #28]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f042 0208 	orr.w	r2, r2, #8
 80077e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69da      	ldr	r2, [r3, #28]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f022 0204 	bic.w	r2, r2, #4
 80077f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	69d9      	ldr	r1, [r3, #28]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	691a      	ldr	r2, [r3, #16]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	61da      	str	r2, [r3, #28]
      break;
 8007804:	e064      	b.n	80078d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68b9      	ldr	r1, [r7, #8]
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fbeb 	bl	8007fe8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	69da      	ldr	r2, [r3, #28]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69d9      	ldr	r1, [r3, #28]
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	021a      	lsls	r2, r3, #8
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	430a      	orrs	r2, r1
 8007844:	61da      	str	r2, [r3, #28]
      break;
 8007846:	e043      	b.n	80078d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68b9      	ldr	r1, [r7, #8]
 800784e:	4618      	mov	r0, r3
 8007850:	f000 fc34 	bl	80080bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0208 	orr.w	r2, r2, #8
 8007862:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f022 0204 	bic.w	r2, r2, #4
 8007872:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	691a      	ldr	r2, [r3, #16]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007886:	e023      	b.n	80078d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68b9      	ldr	r1, [r7, #8]
 800788e:	4618      	mov	r0, r3
 8007890:	f000 fc78 	bl	8008184 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078a2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078b2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	021a      	lsls	r2, r3, #8
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	430a      	orrs	r2, r1
 80078c6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80078c8:	e002      	b.n	80078d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	75fb      	strb	r3, [r7, #23]
      break;
 80078ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3718      	adds	r7, #24
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop

080078e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078ee:	2300      	movs	r3, #0
 80078f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d101      	bne.n	8007900 <HAL_TIM_ConfigClockSource+0x1c>
 80078fc:	2302      	movs	r3, #2
 80078fe:	e0dc      	b.n	8007aba <HAL_TIM_ConfigClockSource+0x1d6>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2202      	movs	r2, #2
 800790c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007918:	68ba      	ldr	r2, [r7, #8]
 800791a:	4b6a      	ldr	r3, [pc, #424]	@ (8007ac4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800791c:	4013      	ands	r3, r2
 800791e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007926:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68ba      	ldr	r2, [r7, #8]
 800792e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a64      	ldr	r2, [pc, #400]	@ (8007ac8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	f000 80a9 	beq.w	8007a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800793c:	4a62      	ldr	r2, [pc, #392]	@ (8007ac8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800793e:	4293      	cmp	r3, r2
 8007940:	f200 80ae 	bhi.w	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007944:	4a61      	ldr	r2, [pc, #388]	@ (8007acc <HAL_TIM_ConfigClockSource+0x1e8>)
 8007946:	4293      	cmp	r3, r2
 8007948:	f000 80a1 	beq.w	8007a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800794c:	4a5f      	ldr	r2, [pc, #380]	@ (8007acc <HAL_TIM_ConfigClockSource+0x1e8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	f200 80a6 	bhi.w	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007954:	4a5e      	ldr	r2, [pc, #376]	@ (8007ad0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007956:	4293      	cmp	r3, r2
 8007958:	f000 8099 	beq.w	8007a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800795c:	4a5c      	ldr	r2, [pc, #368]	@ (8007ad0 <HAL_TIM_ConfigClockSource+0x1ec>)
 800795e:	4293      	cmp	r3, r2
 8007960:	f200 809e 	bhi.w	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007964:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007968:	f000 8091 	beq.w	8007a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800796c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007970:	f200 8096 	bhi.w	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007974:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007978:	f000 8089 	beq.w	8007a8e <HAL_TIM_ConfigClockSource+0x1aa>
 800797c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007980:	f200 808e 	bhi.w	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007984:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007988:	d03e      	beq.n	8007a08 <HAL_TIM_ConfigClockSource+0x124>
 800798a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800798e:	f200 8087 	bhi.w	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 8007992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007996:	f000 8086 	beq.w	8007aa6 <HAL_TIM_ConfigClockSource+0x1c2>
 800799a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800799e:	d87f      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079a0:	2b70      	cmp	r3, #112	@ 0x70
 80079a2:	d01a      	beq.n	80079da <HAL_TIM_ConfigClockSource+0xf6>
 80079a4:	2b70      	cmp	r3, #112	@ 0x70
 80079a6:	d87b      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079a8:	2b60      	cmp	r3, #96	@ 0x60
 80079aa:	d050      	beq.n	8007a4e <HAL_TIM_ConfigClockSource+0x16a>
 80079ac:	2b60      	cmp	r3, #96	@ 0x60
 80079ae:	d877      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079b0:	2b50      	cmp	r3, #80	@ 0x50
 80079b2:	d03c      	beq.n	8007a2e <HAL_TIM_ConfigClockSource+0x14a>
 80079b4:	2b50      	cmp	r3, #80	@ 0x50
 80079b6:	d873      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079b8:	2b40      	cmp	r3, #64	@ 0x40
 80079ba:	d058      	beq.n	8007a6e <HAL_TIM_ConfigClockSource+0x18a>
 80079bc:	2b40      	cmp	r3, #64	@ 0x40
 80079be:	d86f      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079c0:	2b30      	cmp	r3, #48	@ 0x30
 80079c2:	d064      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0x1aa>
 80079c4:	2b30      	cmp	r3, #48	@ 0x30
 80079c6:	d86b      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079c8:	2b20      	cmp	r3, #32
 80079ca:	d060      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0x1aa>
 80079cc:	2b20      	cmp	r3, #32
 80079ce:	d867      	bhi.n	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d05c      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0x1aa>
 80079d4:	2b10      	cmp	r3, #16
 80079d6:	d05a      	beq.n	8007a8e <HAL_TIM_ConfigClockSource+0x1aa>
 80079d8:	e062      	b.n	8007aa0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079ea:	f000 fd99 	bl	8008520 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80079fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	609a      	str	r2, [r3, #8]
      break;
 8007a06:	e04f      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007a18:	f000 fd82 	bl	8008520 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	689a      	ldr	r2, [r3, #8]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007a2a:	609a      	str	r2, [r3, #8]
      break;
 8007a2c:	e03c      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f000 fcf2 	bl	8008424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2150      	movs	r1, #80	@ 0x50
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fd4c 	bl	80084e4 <TIM_ITRx_SetConfig>
      break;
 8007a4c:	e02c      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	f000 fd11 	bl	8008482 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2160      	movs	r1, #96	@ 0x60
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 fd3c 	bl	80084e4 <TIM_ITRx_SetConfig>
      break;
 8007a6c:	e01c      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	f000 fcd2 	bl	8008424 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	2140      	movs	r1, #64	@ 0x40
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fd2c 	bl	80084e4 <TIM_ITRx_SetConfig>
      break;
 8007a8c:	e00c      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4619      	mov	r1, r3
 8007a98:	4610      	mov	r0, r2
 8007a9a:	f000 fd23 	bl	80084e4 <TIM_ITRx_SetConfig>
      break;
 8007a9e:	e003      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa4:	e000      	b.n	8007aa8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007aa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	ffceff88 	.word	0xffceff88
 8007ac8:	00100040 	.word	0x00100040
 8007acc:	00100030 	.word	0x00100030
 8007ad0:	00100020 	.word	0x00100020

08007ad4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_TIM_SlaveConfigSynchro+0x18>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e031      	b.n	8007b50 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fba6 	bl	8008250 <TIM_SlaveTimer_SetConfig>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d009      	beq.n	8007b1e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2200      	movs	r2, #0
 8007b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	e018      	b.n	8007b50 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	68da      	ldr	r2, [r3, #12]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b2c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b3c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a46      	ldr	r2, [pc, #280]	@ (8007c84 <TIM_Base_SetConfig+0x12c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d013      	beq.n	8007b98 <TIM_Base_SetConfig+0x40>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b76:	d00f      	beq.n	8007b98 <TIM_Base_SetConfig+0x40>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a43      	ldr	r2, [pc, #268]	@ (8007c88 <TIM_Base_SetConfig+0x130>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d00b      	beq.n	8007b98 <TIM_Base_SetConfig+0x40>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a42      	ldr	r2, [pc, #264]	@ (8007c8c <TIM_Base_SetConfig+0x134>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d007      	beq.n	8007b98 <TIM_Base_SetConfig+0x40>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a41      	ldr	r2, [pc, #260]	@ (8007c90 <TIM_Base_SetConfig+0x138>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d003      	beq.n	8007b98 <TIM_Base_SetConfig+0x40>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a40      	ldr	r2, [pc, #256]	@ (8007c94 <TIM_Base_SetConfig+0x13c>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d108      	bne.n	8007baa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a35      	ldr	r2, [pc, #212]	@ (8007c84 <TIM_Base_SetConfig+0x12c>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d01f      	beq.n	8007bf2 <TIM_Base_SetConfig+0x9a>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bb8:	d01b      	beq.n	8007bf2 <TIM_Base_SetConfig+0x9a>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a32      	ldr	r2, [pc, #200]	@ (8007c88 <TIM_Base_SetConfig+0x130>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d017      	beq.n	8007bf2 <TIM_Base_SetConfig+0x9a>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a31      	ldr	r2, [pc, #196]	@ (8007c8c <TIM_Base_SetConfig+0x134>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d013      	beq.n	8007bf2 <TIM_Base_SetConfig+0x9a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a30      	ldr	r2, [pc, #192]	@ (8007c90 <TIM_Base_SetConfig+0x138>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d00f      	beq.n	8007bf2 <TIM_Base_SetConfig+0x9a>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a2f      	ldr	r2, [pc, #188]	@ (8007c94 <TIM_Base_SetConfig+0x13c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00b      	beq.n	8007bf2 <TIM_Base_SetConfig+0x9a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a2e      	ldr	r2, [pc, #184]	@ (8007c98 <TIM_Base_SetConfig+0x140>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d007      	beq.n	8007bf2 <TIM_Base_SetConfig+0x9a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a2d      	ldr	r2, [pc, #180]	@ (8007c9c <TIM_Base_SetConfig+0x144>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d003      	beq.n	8007bf2 <TIM_Base_SetConfig+0x9a>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a2c      	ldr	r2, [pc, #176]	@ (8007ca0 <TIM_Base_SetConfig+0x148>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d108      	bne.n	8007c04 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4313      	orrs	r3, r2
 8007c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	695b      	ldr	r3, [r3, #20]
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a16      	ldr	r2, [pc, #88]	@ (8007c84 <TIM_Base_SetConfig+0x12c>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d00f      	beq.n	8007c50 <TIM_Base_SetConfig+0xf8>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a18      	ldr	r2, [pc, #96]	@ (8007c94 <TIM_Base_SetConfig+0x13c>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d00b      	beq.n	8007c50 <TIM_Base_SetConfig+0xf8>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a17      	ldr	r2, [pc, #92]	@ (8007c98 <TIM_Base_SetConfig+0x140>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d007      	beq.n	8007c50 <TIM_Base_SetConfig+0xf8>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a16      	ldr	r2, [pc, #88]	@ (8007c9c <TIM_Base_SetConfig+0x144>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d003      	beq.n	8007c50 <TIM_Base_SetConfig+0xf8>
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a15      	ldr	r2, [pc, #84]	@ (8007ca0 <TIM_Base_SetConfig+0x148>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d103      	bne.n	8007c58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	691a      	ldr	r2, [r3, #16]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2201      	movs	r2, #1
 8007c5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f003 0301 	and.w	r3, r3, #1
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d105      	bne.n	8007c76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f023 0201 	bic.w	r2, r3, #1
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	611a      	str	r2, [r3, #16]
  }
}
 8007c76:	bf00      	nop
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	40010000 	.word	0x40010000
 8007c88:	40000400 	.word	0x40000400
 8007c8c:	40000800 	.word	0x40000800
 8007c90:	40000c00 	.word	0x40000c00
 8007c94:	40010400 	.word	0x40010400
 8007c98:	40014000 	.word	0x40014000
 8007c9c:	40014400 	.word	0x40014400
 8007ca0:	40014800 	.word	0x40014800

08007ca4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b087      	sub	sp, #28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a1b      	ldr	r3, [r3, #32]
 8007cb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	f023 0201 	bic.w	r2, r3, #1
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	4b37      	ldr	r3, [pc, #220]	@ (8007dac <TIM_OC1_SetConfig+0x108>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 0303 	bic.w	r3, r3, #3
 8007cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	f023 0302 	bic.w	r3, r3, #2
 8007cec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	4a2d      	ldr	r2, [pc, #180]	@ (8007db0 <TIM_OC1_SetConfig+0x10c>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d00f      	beq.n	8007d20 <TIM_OC1_SetConfig+0x7c>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a2c      	ldr	r2, [pc, #176]	@ (8007db4 <TIM_OC1_SetConfig+0x110>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d00b      	beq.n	8007d20 <TIM_OC1_SetConfig+0x7c>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8007db8 <TIM_OC1_SetConfig+0x114>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d007      	beq.n	8007d20 <TIM_OC1_SetConfig+0x7c>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4a2a      	ldr	r2, [pc, #168]	@ (8007dbc <TIM_OC1_SetConfig+0x118>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d003      	beq.n	8007d20 <TIM_OC1_SetConfig+0x7c>
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	4a29      	ldr	r2, [pc, #164]	@ (8007dc0 <TIM_OC1_SetConfig+0x11c>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d10c      	bne.n	8007d3a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	f023 0308 	bic.w	r3, r3, #8
 8007d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	f023 0304 	bic.w	r3, r3, #4
 8007d38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8007db0 <TIM_OC1_SetConfig+0x10c>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d00f      	beq.n	8007d62 <TIM_OC1_SetConfig+0xbe>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	4a1b      	ldr	r2, [pc, #108]	@ (8007db4 <TIM_OC1_SetConfig+0x110>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d00b      	beq.n	8007d62 <TIM_OC1_SetConfig+0xbe>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8007db8 <TIM_OC1_SetConfig+0x114>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d007      	beq.n	8007d62 <TIM_OC1_SetConfig+0xbe>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	4a19      	ldr	r2, [pc, #100]	@ (8007dbc <TIM_OC1_SetConfig+0x118>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d003      	beq.n	8007d62 <TIM_OC1_SetConfig+0xbe>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	4a18      	ldr	r2, [pc, #96]	@ (8007dc0 <TIM_OC1_SetConfig+0x11c>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d111      	bne.n	8007d86 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	695b      	ldr	r3, [r3, #20]
 8007d76:	693a      	ldr	r2, [r7, #16]
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	699b      	ldr	r3, [r3, #24]
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	693a      	ldr	r2, [r7, #16]
 8007d8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	685a      	ldr	r2, [r3, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	621a      	str	r2, [r3, #32]
}
 8007da0:	bf00      	nop
 8007da2:	371c      	adds	r7, #28
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	fffeff8f 	.word	0xfffeff8f
 8007db0:	40010000 	.word	0x40010000
 8007db4:	40010400 	.word	0x40010400
 8007db8:	40014000 	.word	0x40014000
 8007dbc:	40014400 	.word	0x40014400
 8007dc0:	40014800 	.word	0x40014800

08007dc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b087      	sub	sp, #28
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
 8007dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a1b      	ldr	r3, [r3, #32]
 8007dd8:	f023 0210 	bic.w	r2, r3, #16
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	4b34      	ldr	r3, [pc, #208]	@ (8007ec0 <TIM_OC2_SetConfig+0xfc>)
 8007df0:	4013      	ands	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	021b      	lsls	r3, r3, #8
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f023 0320 	bic.w	r3, r3, #32
 8007e0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a29      	ldr	r2, [pc, #164]	@ (8007ec4 <TIM_OC2_SetConfig+0x100>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d003      	beq.n	8007e2c <TIM_OC2_SetConfig+0x68>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a28      	ldr	r2, [pc, #160]	@ (8007ec8 <TIM_OC2_SetConfig+0x104>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d10d      	bne.n	8007e48 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	011b      	lsls	r3, r3, #4
 8007e3a:	697a      	ldr	r2, [r7, #20]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ec4 <TIM_OC2_SetConfig+0x100>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d00f      	beq.n	8007e70 <TIM_OC2_SetConfig+0xac>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a1d      	ldr	r2, [pc, #116]	@ (8007ec8 <TIM_OC2_SetConfig+0x104>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d00b      	beq.n	8007e70 <TIM_OC2_SetConfig+0xac>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8007ecc <TIM_OC2_SetConfig+0x108>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d007      	beq.n	8007e70 <TIM_OC2_SetConfig+0xac>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a1b      	ldr	r2, [pc, #108]	@ (8007ed0 <TIM_OC2_SetConfig+0x10c>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d003      	beq.n	8007e70 <TIM_OC2_SetConfig+0xac>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8007ed4 <TIM_OC2_SetConfig+0x110>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d113      	bne.n	8007e98 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e78:	693b      	ldr	r3, [r7, #16]
 8007e7a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	695b      	ldr	r3, [r3, #20]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	699b      	ldr	r3, [r3, #24]
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	693a      	ldr	r2, [r7, #16]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	685a      	ldr	r2, [r3, #4]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	697a      	ldr	r2, [r7, #20]
 8007eb0:	621a      	str	r2, [r3, #32]
}
 8007eb2:	bf00      	nop
 8007eb4:	371c      	adds	r7, #28
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	feff8fff 	.word	0xfeff8fff
 8007ec4:	40010000 	.word	0x40010000
 8007ec8:	40010400 	.word	0x40010400
 8007ecc:	40014000 	.word	0x40014000
 8007ed0:	40014400 	.word	0x40014400
 8007ed4:	40014800 	.word	0x40014800

08007ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b087      	sub	sp, #28
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f00:	68fa      	ldr	r2, [r7, #12]
 8007f02:	4b33      	ldr	r3, [pc, #204]	@ (8007fd0 <TIM_OC3_SetConfig+0xf8>)
 8007f04:	4013      	ands	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f023 0303 	bic.w	r3, r3, #3
 8007f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68fa      	ldr	r2, [r7, #12]
 8007f16:	4313      	orrs	r3, r2
 8007f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	021b      	lsls	r3, r3, #8
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a28      	ldr	r2, [pc, #160]	@ (8007fd4 <TIM_OC3_SetConfig+0xfc>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d003      	beq.n	8007f3e <TIM_OC3_SetConfig+0x66>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a27      	ldr	r2, [pc, #156]	@ (8007fd8 <TIM_OC3_SetConfig+0x100>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d10d      	bne.n	8007f5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	021b      	lsls	r3, r3, #8
 8007f4c:	697a      	ldr	r2, [r7, #20]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007fd4 <TIM_OC3_SetConfig+0xfc>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d00f      	beq.n	8007f82 <TIM_OC3_SetConfig+0xaa>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	4a1c      	ldr	r2, [pc, #112]	@ (8007fd8 <TIM_OC3_SetConfig+0x100>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d00b      	beq.n	8007f82 <TIM_OC3_SetConfig+0xaa>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007fdc <TIM_OC3_SetConfig+0x104>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d007      	beq.n	8007f82 <TIM_OC3_SetConfig+0xaa>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a1a      	ldr	r2, [pc, #104]	@ (8007fe0 <TIM_OC3_SetConfig+0x108>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d003      	beq.n	8007f82 <TIM_OC3_SetConfig+0xaa>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	4a19      	ldr	r2, [pc, #100]	@ (8007fe4 <TIM_OC3_SetConfig+0x10c>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d113      	bne.n	8007faa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	699b      	ldr	r3, [r3, #24]
 8007fa2:	011b      	lsls	r3, r3, #4
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	693a      	ldr	r2, [r7, #16]
 8007fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	685a      	ldr	r2, [r3, #4]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	621a      	str	r2, [r3, #32]
}
 8007fc4:	bf00      	nop
 8007fc6:	371c      	adds	r7, #28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	fffeff8f 	.word	0xfffeff8f
 8007fd4:	40010000 	.word	0x40010000
 8007fd8:	40010400 	.word	0x40010400
 8007fdc:	40014000 	.word	0x40014000
 8007fe0:	40014400 	.word	0x40014400
 8007fe4:	40014800 	.word	0x40014800

08007fe8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a1b      	ldr	r3, [r3, #32]
 8007ffc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008010:	68fa      	ldr	r2, [r7, #12]
 8008012:	4b24      	ldr	r3, [pc, #144]	@ (80080a4 <TIM_OC4_SetConfig+0xbc>)
 8008014:	4013      	ands	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800801e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	021b      	lsls	r3, r3, #8
 8008026:	68fa      	ldr	r2, [r7, #12]
 8008028:	4313      	orrs	r3, r2
 800802a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008032:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	031b      	lsls	r3, r3, #12
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	4313      	orrs	r3, r2
 800803e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a19      	ldr	r2, [pc, #100]	@ (80080a8 <TIM_OC4_SetConfig+0xc0>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00f      	beq.n	8008068 <TIM_OC4_SetConfig+0x80>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a18      	ldr	r2, [pc, #96]	@ (80080ac <TIM_OC4_SetConfig+0xc4>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00b      	beq.n	8008068 <TIM_OC4_SetConfig+0x80>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a17      	ldr	r2, [pc, #92]	@ (80080b0 <TIM_OC4_SetConfig+0xc8>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d007      	beq.n	8008068 <TIM_OC4_SetConfig+0x80>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a16      	ldr	r2, [pc, #88]	@ (80080b4 <TIM_OC4_SetConfig+0xcc>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d003      	beq.n	8008068 <TIM_OC4_SetConfig+0x80>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a15      	ldr	r2, [pc, #84]	@ (80080b8 <TIM_OC4_SetConfig+0xd0>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d109      	bne.n	800807c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800806e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	019b      	lsls	r3, r3, #6
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	4313      	orrs	r3, r2
 800807a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	697a      	ldr	r2, [r7, #20]
 8008080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	685a      	ldr	r2, [r3, #4]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	621a      	str	r2, [r3, #32]
}
 8008096:	bf00      	nop
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	feff8fff 	.word	0xfeff8fff
 80080a8:	40010000 	.word	0x40010000
 80080ac:	40010400 	.word	0x40010400
 80080b0:	40014000 	.word	0x40014000
 80080b4:	40014400 	.word	0x40014400
 80080b8:	40014800 	.word	0x40014800

080080bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080bc:	b480      	push	{r7}
 80080be:	b087      	sub	sp, #28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6a1b      	ldr	r3, [r3, #32]
 80080d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	4b21      	ldr	r3, [pc, #132]	@ (800816c <TIM_OC5_SetConfig+0xb0>)
 80080e8:	4013      	ands	r3, r2
 80080ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80080fc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	041b      	lsls	r3, r3, #16
 8008104:	693a      	ldr	r2, [r7, #16]
 8008106:	4313      	orrs	r3, r2
 8008108:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	4a18      	ldr	r2, [pc, #96]	@ (8008170 <TIM_OC5_SetConfig+0xb4>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d00f      	beq.n	8008132 <TIM_OC5_SetConfig+0x76>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	4a17      	ldr	r2, [pc, #92]	@ (8008174 <TIM_OC5_SetConfig+0xb8>)
 8008116:	4293      	cmp	r3, r2
 8008118:	d00b      	beq.n	8008132 <TIM_OC5_SetConfig+0x76>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4a16      	ldr	r2, [pc, #88]	@ (8008178 <TIM_OC5_SetConfig+0xbc>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d007      	beq.n	8008132 <TIM_OC5_SetConfig+0x76>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	4a15      	ldr	r2, [pc, #84]	@ (800817c <TIM_OC5_SetConfig+0xc0>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d003      	beq.n	8008132 <TIM_OC5_SetConfig+0x76>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a14      	ldr	r2, [pc, #80]	@ (8008180 <TIM_OC5_SetConfig+0xc4>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d109      	bne.n	8008146 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008138:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	695b      	ldr	r3, [r3, #20]
 800813e:	021b      	lsls	r3, r3, #8
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	4313      	orrs	r3, r2
 8008144:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	685a      	ldr	r2, [r3, #4]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	693a      	ldr	r2, [r7, #16]
 800815e:	621a      	str	r2, [r3, #32]
}
 8008160:	bf00      	nop
 8008162:	371c      	adds	r7, #28
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr
 800816c:	fffeff8f 	.word	0xfffeff8f
 8008170:	40010000 	.word	0x40010000
 8008174:	40010400 	.word	0x40010400
 8008178:	40014000 	.word	0x40014000
 800817c:	40014400 	.word	0x40014400
 8008180:	40014800 	.word	0x40014800

08008184 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008184:	b480      	push	{r7}
 8008186:	b087      	sub	sp, #28
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a1b      	ldr	r3, [r3, #32]
 8008198:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	4b22      	ldr	r3, [pc, #136]	@ (8008238 <TIM_OC6_SetConfig+0xb4>)
 80081b0:	4013      	ands	r3, r2
 80081b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	021b      	lsls	r3, r3, #8
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	051b      	lsls	r3, r3, #20
 80081ce:	693a      	ldr	r2, [r7, #16]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	4a19      	ldr	r2, [pc, #100]	@ (800823c <TIM_OC6_SetConfig+0xb8>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d00f      	beq.n	80081fc <TIM_OC6_SetConfig+0x78>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	4a18      	ldr	r2, [pc, #96]	@ (8008240 <TIM_OC6_SetConfig+0xbc>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00b      	beq.n	80081fc <TIM_OC6_SetConfig+0x78>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a17      	ldr	r2, [pc, #92]	@ (8008244 <TIM_OC6_SetConfig+0xc0>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d007      	beq.n	80081fc <TIM_OC6_SetConfig+0x78>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a16      	ldr	r2, [pc, #88]	@ (8008248 <TIM_OC6_SetConfig+0xc4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d003      	beq.n	80081fc <TIM_OC6_SetConfig+0x78>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a15      	ldr	r2, [pc, #84]	@ (800824c <TIM_OC6_SetConfig+0xc8>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d109      	bne.n	8008210 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80081fc:	697b      	ldr	r3, [r7, #20]
 80081fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008202:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	029b      	lsls	r3, r3, #10
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	4313      	orrs	r3, r2
 800820e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685a      	ldr	r2, [r3, #4]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	693a      	ldr	r2, [r7, #16]
 8008228:	621a      	str	r2, [r3, #32]
}
 800822a:	bf00      	nop
 800822c:	371c      	adds	r7, #28
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	feff8fff 	.word	0xfeff8fff
 800823c:	40010000 	.word	0x40010000
 8008240:	40010400 	.word	0x40010400
 8008244:	40014000 	.word	0x40014000
 8008248:	40014400 	.word	0x40014400
 800824c:	40014800 	.word	0x40014800

08008250 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800825a:	2300      	movs	r3, #0
 800825c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	4b65      	ldr	r3, [pc, #404]	@ (8008400 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800826a:	4013      	ands	r3, r2
 800826c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	4313      	orrs	r3, r2
 8008276:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008278:	693a      	ldr	r2, [r7, #16]
 800827a:	4b62      	ldr	r3, [pc, #392]	@ (8008404 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800827c:	4013      	ands	r3, r2
 800827e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4313      	orrs	r3, r2
 8008288:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	4a5c      	ldr	r2, [pc, #368]	@ (8008408 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8008298:	4293      	cmp	r3, r2
 800829a:	f000 80ab 	beq.w	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800829e:	4a5a      	ldr	r2, [pc, #360]	@ (8008408 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	f200 80a4 	bhi.w	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 80082a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082aa:	f000 80a3 	beq.w	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80082ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80082b2:	f200 809c 	bhi.w	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 80082b6:	4a55      	ldr	r2, [pc, #340]	@ (800840c <TIM_SlaveTimer_SetConfig+0x1bc>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	f000 809b 	beq.w	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80082be:	4a53      	ldr	r2, [pc, #332]	@ (800840c <TIM_SlaveTimer_SetConfig+0x1bc>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	f200 8094 	bhi.w	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 80082c6:	4a52      	ldr	r2, [pc, #328]	@ (8008410 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	f000 8093 	beq.w	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80082ce:	4a50      	ldr	r2, [pc, #320]	@ (8008410 <TIM_SlaveTimer_SetConfig+0x1c0>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	f200 808c 	bhi.w	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 80082d6:	4a4f      	ldr	r2, [pc, #316]	@ (8008414 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	f000 808b 	beq.w	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80082de:	4a4d      	ldr	r2, [pc, #308]	@ (8008414 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	f200 8084 	bhi.w	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 80082e6:	4a4c      	ldr	r2, [pc, #304]	@ (8008418 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	f000 8083 	beq.w	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80082ee:	4a4a      	ldr	r2, [pc, #296]	@ (8008418 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d87c      	bhi.n	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 80082f4:	4a49      	ldr	r2, [pc, #292]	@ (800841c <TIM_SlaveTimer_SetConfig+0x1cc>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d07c      	beq.n	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80082fa:	4a48      	ldr	r2, [pc, #288]	@ (800841c <TIM_SlaveTimer_SetConfig+0x1cc>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d876      	bhi.n	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 8008300:	4a47      	ldr	r2, [pc, #284]	@ (8008420 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d076      	beq.n	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008306:	4a46      	ldr	r2, [pc, #280]	@ (8008420 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d870      	bhi.n	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 800830c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008310:	d070      	beq.n	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008312:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008316:	d86a      	bhi.n	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 8008318:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800831c:	d06a      	beq.n	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800831e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008322:	d864      	bhi.n	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 8008324:	2b70      	cmp	r3, #112	@ 0x70
 8008326:	d01a      	beq.n	800835e <TIM_SlaveTimer_SetConfig+0x10e>
 8008328:	2b70      	cmp	r3, #112	@ 0x70
 800832a:	d860      	bhi.n	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 800832c:	2b60      	cmp	r3, #96	@ 0x60
 800832e:	d054      	beq.n	80083da <TIM_SlaveTimer_SetConfig+0x18a>
 8008330:	2b60      	cmp	r3, #96	@ 0x60
 8008332:	d85c      	bhi.n	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 8008334:	2b50      	cmp	r3, #80	@ 0x50
 8008336:	d046      	beq.n	80083c6 <TIM_SlaveTimer_SetConfig+0x176>
 8008338:	2b50      	cmp	r3, #80	@ 0x50
 800833a:	d858      	bhi.n	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 800833c:	2b40      	cmp	r3, #64	@ 0x40
 800833e:	d019      	beq.n	8008374 <TIM_SlaveTimer_SetConfig+0x124>
 8008340:	2b40      	cmp	r3, #64	@ 0x40
 8008342:	d854      	bhi.n	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 8008344:	2b30      	cmp	r3, #48	@ 0x30
 8008346:	d055      	beq.n	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008348:	2b30      	cmp	r3, #48	@ 0x30
 800834a:	d850      	bhi.n	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 800834c:	2b20      	cmp	r3, #32
 800834e:	d051      	beq.n	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008350:	2b20      	cmp	r3, #32
 8008352:	d84c      	bhi.n	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
 8008354:	2b00      	cmp	r3, #0
 8008356:	d04d      	beq.n	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008358:	2b10      	cmp	r3, #16
 800835a:	d04b      	beq.n	80083f4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800835c:	e047      	b.n	80083ee <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800836e:	f000 f8d7 	bl	8008520 <TIM_ETR_SetConfig>
      break;
 8008372:	e040      	b.n	80083f6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b05      	cmp	r3, #5
 800837a:	d101      	bne.n	8008380 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	e03b      	b.n	80083f8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6a1a      	ldr	r2, [r3, #32]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	f022 0201 	bic.w	r2, r2, #1
 8008396:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083a6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	011b      	lsls	r3, r3, #4
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	621a      	str	r2, [r3, #32]
      break;
 80083c4:	e017      	b.n	80083f6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80083d2:	461a      	mov	r2, r3
 80083d4:	f000 f826 	bl	8008424 <TIM_TI1_ConfigInputStage>
      break;
 80083d8:	e00d      	b.n	80083f6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80083e6:	461a      	mov	r2, r3
 80083e8:	f000 f84b 	bl	8008482 <TIM_TI2_ConfigInputStage>
      break;
 80083ec:	e003      	b.n	80083f6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	75fb      	strb	r3, [r7, #23]
      break;
 80083f2:	e000      	b.n	80083f6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80083f4:	bf00      	nop
  }

  return status;
 80083f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	ffcfff8f 	.word	0xffcfff8f
 8008404:	fffefff8 	.word	0xfffefff8
 8008408:	00200010 	.word	0x00200010
 800840c:	00100070 	.word	0x00100070
 8008410:	00100060 	.word	0x00100060
 8008414:	00100050 	.word	0x00100050
 8008418:	00100040 	.word	0x00100040
 800841c:	00100030 	.word	0x00100030
 8008420:	00100020 	.word	0x00100020

08008424 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008424:	b480      	push	{r7}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6a1b      	ldr	r3, [r3, #32]
 8008434:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	f023 0201 	bic.w	r2, r3, #1
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800844e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	011b      	lsls	r3, r3, #4
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	4313      	orrs	r3, r2
 8008458:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	f023 030a 	bic.w	r3, r3, #10
 8008460:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008462:	697a      	ldr	r2, [r7, #20]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	4313      	orrs	r3, r2
 8008468:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	697a      	ldr	r2, [r7, #20]
 8008474:	621a      	str	r2, [r3, #32]
}
 8008476:	bf00      	nop
 8008478:	371c      	adds	r7, #28
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008482:	b480      	push	{r7}
 8008484:	b087      	sub	sp, #28
 8008486:	af00      	add	r7, sp, #0
 8008488:	60f8      	str	r0, [r7, #12]
 800848a:	60b9      	str	r1, [r7, #8]
 800848c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6a1b      	ldr	r3, [r3, #32]
 8008492:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	f023 0210 	bic.w	r2, r3, #16
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	699b      	ldr	r3, [r3, #24]
 80084a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80084ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	031b      	lsls	r3, r3, #12
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80084be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	011b      	lsls	r3, r3, #4
 80084c4:	697a      	ldr	r2, [r7, #20]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	621a      	str	r2, [r3, #32]
}
 80084d6:	bf00      	nop
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr
	...

080084e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b085      	sub	sp, #20
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	4b09      	ldr	r3, [pc, #36]	@ (800851c <TIM_ITRx_SetConfig+0x38>)
 80084f8:	4013      	ands	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4313      	orrs	r3, r2
 8008502:	f043 0307 	orr.w	r3, r3, #7
 8008506:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	609a      	str	r2, [r3, #8]
}
 800850e:	bf00      	nop
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	ffcfff8f 	.word	0xffcfff8f

08008520 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
 800852c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800853a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	021a      	lsls	r2, r3, #8
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	431a      	orrs	r2, r3
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	4313      	orrs	r3, r2
 8008548:	697a      	ldr	r2, [r7, #20]
 800854a:	4313      	orrs	r3, r2
 800854c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	697a      	ldr	r2, [r7, #20]
 8008552:	609a      	str	r2, [r3, #8]
}
 8008554:	bf00      	nop
 8008556:	371c      	adds	r7, #28
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008560:	b480      	push	{r7}
 8008562:	b087      	sub	sp, #28
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	f003 031f 	and.w	r3, r3, #31
 8008572:	2201      	movs	r2, #1
 8008574:	fa02 f303 	lsl.w	r3, r2, r3
 8008578:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6a1a      	ldr	r2, [r3, #32]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	43db      	mvns	r3, r3
 8008582:	401a      	ands	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6a1a      	ldr	r2, [r3, #32]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	f003 031f 	and.w	r3, r3, #31
 8008592:	6879      	ldr	r1, [r7, #4]
 8008594:	fa01 f303 	lsl.w	r3, r1, r3
 8008598:	431a      	orrs	r2, r3
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
	...

080085ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
 80085b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d101      	bne.n	80085c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085c0:	2302      	movs	r3, #2
 80085c2:	e06d      	b.n	80086a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2202      	movs	r2, #2
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a30      	ldr	r2, [pc, #192]	@ (80086ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d004      	beq.n	80085f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	4a2f      	ldr	r2, [pc, #188]	@ (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d108      	bne.n	800860a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80085fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008610:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	4313      	orrs	r3, r2
 800861a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a20      	ldr	r2, [pc, #128]	@ (80086ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d022      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008636:	d01d      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a1d      	ldr	r2, [pc, #116]	@ (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d018      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a1c      	ldr	r2, [pc, #112]	@ (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d013      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a1a      	ldr	r2, [pc, #104]	@ (80086bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d00e      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a15      	ldr	r2, [pc, #84]	@ (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d009      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a16      	ldr	r2, [pc, #88]	@ (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d004      	beq.n	8008674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a15      	ldr	r2, [pc, #84]	@ (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d10c      	bne.n	800868e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800867a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	4313      	orrs	r3, r2
 8008684:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2201      	movs	r2, #1
 8008692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2200      	movs	r2, #0
 800869a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800869e:	2300      	movs	r3, #0
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr
 80086ac:	40010000 	.word	0x40010000
 80086b0:	40010400 	.word	0x40010400
 80086b4:	40000400 	.word	0x40000400
 80086b8:	40000800 	.word	0x40000800
 80086bc:	40000c00 	.word	0x40000c00
 80086c0:	40001800 	.word	0x40001800
 80086c4:	40014000 	.word	0x40014000

080086c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d101      	bne.n	80086da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e042      	b.n	8008760 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d106      	bne.n	80086f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f7f9 fa53 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2224      	movs	r2, #36	@ 0x24
 80086f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0201 	bic.w	r2, r2, #1
 8008708:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800870e:	2b00      	cmp	r3, #0
 8008710:	d002      	beq.n	8008718 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fe1e 	bl	8009354 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 f8b3 	bl	8008884 <UART_SetConfig>
 800871e:	4603      	mov	r3, r0
 8008720:	2b01      	cmp	r3, #1
 8008722:	d101      	bne.n	8008728 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e01b      	b.n	8008760 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	685a      	ldr	r2, [r3, #4]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008736:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689a      	ldr	r2, [r3, #8]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008746:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f042 0201 	orr.w	r2, r2, #1
 8008756:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fe9d 	bl	8009498 <UART_CheckIdleState>
 800875e:	4603      	mov	r3, r0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b08a      	sub	sp, #40	@ 0x28
 800876c:	af02      	add	r7, sp, #8
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	603b      	str	r3, [r7, #0]
 8008774:	4613      	mov	r3, r2
 8008776:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800877e:	2b20      	cmp	r3, #32
 8008780:	d17b      	bne.n	800887a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d002      	beq.n	800878e <HAL_UART_Transmit+0x26>
 8008788:	88fb      	ldrh	r3, [r7, #6]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d101      	bne.n	8008792 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e074      	b.n	800887c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2221      	movs	r2, #33	@ 0x21
 800879e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087a2:	f7f9 fbc1 	bl	8001f28 <HAL_GetTick>
 80087a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	88fa      	ldrh	r2, [r7, #6]
 80087ac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	88fa      	ldrh	r2, [r7, #6]
 80087b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087c0:	d108      	bne.n	80087d4 <HAL_UART_Transmit+0x6c>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d104      	bne.n	80087d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	61bb      	str	r3, [r7, #24]
 80087d2:	e003      	b.n	80087dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087d8:	2300      	movs	r3, #0
 80087da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80087dc:	e030      	b.n	8008840 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2200      	movs	r2, #0
 80087e6:	2180      	movs	r1, #128	@ 0x80
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 feff 	bl	80095ec <UART_WaitOnFlagUntilTimeout>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d005      	beq.n	8008800 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2220      	movs	r2, #32
 80087f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80087fc:	2303      	movs	r3, #3
 80087fe:	e03d      	b.n	800887c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008800:	69fb      	ldr	r3, [r7, #28]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d10b      	bne.n	800881e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008814:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	3302      	adds	r3, #2
 800881a:	61bb      	str	r3, [r7, #24]
 800881c:	e007      	b.n	800882e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800881e:	69fb      	ldr	r3, [r7, #28]
 8008820:	781a      	ldrb	r2, [r3, #0]
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	3301      	adds	r3, #1
 800882c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008834:	b29b      	uxth	r3, r3
 8008836:	3b01      	subs	r3, #1
 8008838:	b29a      	uxth	r2, r3
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008846:	b29b      	uxth	r3, r3
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1c8      	bne.n	80087de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800884c:	683b      	ldr	r3, [r7, #0]
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2200      	movs	r2, #0
 8008854:	2140      	movs	r1, #64	@ 0x40
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f000 fec8 	bl	80095ec <UART_WaitOnFlagUntilTimeout>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2220      	movs	r2, #32
 8008866:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800886a:	2303      	movs	r3, #3
 800886c:	e006      	b.n	800887c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2220      	movs	r2, #32
 8008872:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	e000      	b.n	800887c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800887a:	2302      	movs	r3, #2
  }
}
 800887c:	4618      	mov	r0, r3
 800887e:	3720      	adds	r7, #32
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008888:	b092      	sub	sp, #72	@ 0x48
 800888a:	af00      	add	r7, sp, #0
 800888c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	689a      	ldr	r2, [r3, #8]
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	431a      	orrs	r2, r3
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	431a      	orrs	r2, r3
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	4bbe      	ldr	r3, [pc, #760]	@ (8008bac <UART_SetConfig+0x328>)
 80088b4:	4013      	ands	r3, r2
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	6812      	ldr	r2, [r2, #0]
 80088ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80088bc:	430b      	orrs	r3, r1
 80088be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4ab3      	ldr	r2, [pc, #716]	@ (8008bb0 <UART_SetConfig+0x32c>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d004      	beq.n	80088f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80088ec:	4313      	orrs	r3, r2
 80088ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689a      	ldr	r2, [r3, #8]
 80088f6:	4baf      	ldr	r3, [pc, #700]	@ (8008bb4 <UART_SetConfig+0x330>)
 80088f8:	4013      	ands	r3, r2
 80088fa:	697a      	ldr	r2, [r7, #20]
 80088fc:	6812      	ldr	r2, [r2, #0]
 80088fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008900:	430b      	orrs	r3, r1
 8008902:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890a:	f023 010f 	bic.w	r1, r3, #15
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	430a      	orrs	r2, r1
 8008918:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4aa6      	ldr	r2, [pc, #664]	@ (8008bb8 <UART_SetConfig+0x334>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d177      	bne.n	8008a14 <UART_SetConfig+0x190>
 8008924:	4ba5      	ldr	r3, [pc, #660]	@ (8008bbc <UART_SetConfig+0x338>)
 8008926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008928:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800892c:	2b28      	cmp	r3, #40	@ 0x28
 800892e:	d86d      	bhi.n	8008a0c <UART_SetConfig+0x188>
 8008930:	a201      	add	r2, pc, #4	@ (adr r2, 8008938 <UART_SetConfig+0xb4>)
 8008932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008936:	bf00      	nop
 8008938:	080089dd 	.word	0x080089dd
 800893c:	08008a0d 	.word	0x08008a0d
 8008940:	08008a0d 	.word	0x08008a0d
 8008944:	08008a0d 	.word	0x08008a0d
 8008948:	08008a0d 	.word	0x08008a0d
 800894c:	08008a0d 	.word	0x08008a0d
 8008950:	08008a0d 	.word	0x08008a0d
 8008954:	08008a0d 	.word	0x08008a0d
 8008958:	080089e5 	.word	0x080089e5
 800895c:	08008a0d 	.word	0x08008a0d
 8008960:	08008a0d 	.word	0x08008a0d
 8008964:	08008a0d 	.word	0x08008a0d
 8008968:	08008a0d 	.word	0x08008a0d
 800896c:	08008a0d 	.word	0x08008a0d
 8008970:	08008a0d 	.word	0x08008a0d
 8008974:	08008a0d 	.word	0x08008a0d
 8008978:	080089ed 	.word	0x080089ed
 800897c:	08008a0d 	.word	0x08008a0d
 8008980:	08008a0d 	.word	0x08008a0d
 8008984:	08008a0d 	.word	0x08008a0d
 8008988:	08008a0d 	.word	0x08008a0d
 800898c:	08008a0d 	.word	0x08008a0d
 8008990:	08008a0d 	.word	0x08008a0d
 8008994:	08008a0d 	.word	0x08008a0d
 8008998:	080089f5 	.word	0x080089f5
 800899c:	08008a0d 	.word	0x08008a0d
 80089a0:	08008a0d 	.word	0x08008a0d
 80089a4:	08008a0d 	.word	0x08008a0d
 80089a8:	08008a0d 	.word	0x08008a0d
 80089ac:	08008a0d 	.word	0x08008a0d
 80089b0:	08008a0d 	.word	0x08008a0d
 80089b4:	08008a0d 	.word	0x08008a0d
 80089b8:	080089fd 	.word	0x080089fd
 80089bc:	08008a0d 	.word	0x08008a0d
 80089c0:	08008a0d 	.word	0x08008a0d
 80089c4:	08008a0d 	.word	0x08008a0d
 80089c8:	08008a0d 	.word	0x08008a0d
 80089cc:	08008a0d 	.word	0x08008a0d
 80089d0:	08008a0d 	.word	0x08008a0d
 80089d4:	08008a0d 	.word	0x08008a0d
 80089d8:	08008a05 	.word	0x08008a05
 80089dc:	2301      	movs	r3, #1
 80089de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089e2:	e222      	b.n	8008e2a <UART_SetConfig+0x5a6>
 80089e4:	2304      	movs	r3, #4
 80089e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089ea:	e21e      	b.n	8008e2a <UART_SetConfig+0x5a6>
 80089ec:	2308      	movs	r3, #8
 80089ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089f2:	e21a      	b.n	8008e2a <UART_SetConfig+0x5a6>
 80089f4:	2310      	movs	r3, #16
 80089f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80089fa:	e216      	b.n	8008e2a <UART_SetConfig+0x5a6>
 80089fc:	2320      	movs	r3, #32
 80089fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a02:	e212      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008a04:	2340      	movs	r3, #64	@ 0x40
 8008a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a0a:	e20e      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008a0c:	2380      	movs	r3, #128	@ 0x80
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a12:	e20a      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a69      	ldr	r2, [pc, #420]	@ (8008bc0 <UART_SetConfig+0x33c>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d130      	bne.n	8008a80 <UART_SetConfig+0x1fc>
 8008a1e:	4b67      	ldr	r3, [pc, #412]	@ (8008bbc <UART_SetConfig+0x338>)
 8008a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a22:	f003 0307 	and.w	r3, r3, #7
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d826      	bhi.n	8008a78 <UART_SetConfig+0x1f4>
 8008a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8008a30 <UART_SetConfig+0x1ac>)
 8008a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a30:	08008a49 	.word	0x08008a49
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a59 	.word	0x08008a59
 8008a3c:	08008a61 	.word	0x08008a61
 8008a40:	08008a69 	.word	0x08008a69
 8008a44:	08008a71 	.word	0x08008a71
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a4e:	e1ec      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008a50:	2304      	movs	r3, #4
 8008a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a56:	e1e8      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008a58:	2308      	movs	r3, #8
 8008a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a5e:	e1e4      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008a60:	2310      	movs	r3, #16
 8008a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a66:	e1e0      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008a68:	2320      	movs	r3, #32
 8008a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a6e:	e1dc      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008a70:	2340      	movs	r3, #64	@ 0x40
 8008a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a76:	e1d8      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008a78:	2380      	movs	r3, #128	@ 0x80
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008a7e:	e1d4      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008a80:	697b      	ldr	r3, [r7, #20]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a4f      	ldr	r2, [pc, #316]	@ (8008bc4 <UART_SetConfig+0x340>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d130      	bne.n	8008aec <UART_SetConfig+0x268>
 8008a8a:	4b4c      	ldr	r3, [pc, #304]	@ (8008bbc <UART_SetConfig+0x338>)
 8008a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a8e:	f003 0307 	and.w	r3, r3, #7
 8008a92:	2b05      	cmp	r3, #5
 8008a94:	d826      	bhi.n	8008ae4 <UART_SetConfig+0x260>
 8008a96:	a201      	add	r2, pc, #4	@ (adr r2, 8008a9c <UART_SetConfig+0x218>)
 8008a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9c:	08008ab5 	.word	0x08008ab5
 8008aa0:	08008abd 	.word	0x08008abd
 8008aa4:	08008ac5 	.word	0x08008ac5
 8008aa8:	08008acd 	.word	0x08008acd
 8008aac:	08008ad5 	.word	0x08008ad5
 8008ab0:	08008add 	.word	0x08008add
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aba:	e1b6      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008abc:	2304      	movs	r3, #4
 8008abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ac2:	e1b2      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008ac4:	2308      	movs	r3, #8
 8008ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aca:	e1ae      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008acc:	2310      	movs	r3, #16
 8008ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ad2:	e1aa      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008ad4:	2320      	movs	r3, #32
 8008ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ada:	e1a6      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008adc:	2340      	movs	r3, #64	@ 0x40
 8008ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ae2:	e1a2      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008ae4:	2380      	movs	r3, #128	@ 0x80
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008aea:	e19e      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a35      	ldr	r2, [pc, #212]	@ (8008bc8 <UART_SetConfig+0x344>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d130      	bne.n	8008b58 <UART_SetConfig+0x2d4>
 8008af6:	4b31      	ldr	r3, [pc, #196]	@ (8008bbc <UART_SetConfig+0x338>)
 8008af8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	2b05      	cmp	r3, #5
 8008b00:	d826      	bhi.n	8008b50 <UART_SetConfig+0x2cc>
 8008b02:	a201      	add	r2, pc, #4	@ (adr r2, 8008b08 <UART_SetConfig+0x284>)
 8008b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b08:	08008b21 	.word	0x08008b21
 8008b0c:	08008b29 	.word	0x08008b29
 8008b10:	08008b31 	.word	0x08008b31
 8008b14:	08008b39 	.word	0x08008b39
 8008b18:	08008b41 	.word	0x08008b41
 8008b1c:	08008b49 	.word	0x08008b49
 8008b20:	2300      	movs	r3, #0
 8008b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b26:	e180      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008b28:	2304      	movs	r3, #4
 8008b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b2e:	e17c      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008b30:	2308      	movs	r3, #8
 8008b32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b36:	e178      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008b38:	2310      	movs	r3, #16
 8008b3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b3e:	e174      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008b40:	2320      	movs	r3, #32
 8008b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b46:	e170      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008b48:	2340      	movs	r3, #64	@ 0x40
 8008b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b4e:	e16c      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008b50:	2380      	movs	r3, #128	@ 0x80
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b56:	e168      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8008bcc <UART_SetConfig+0x348>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d142      	bne.n	8008be8 <UART_SetConfig+0x364>
 8008b62:	4b16      	ldr	r3, [pc, #88]	@ (8008bbc <UART_SetConfig+0x338>)
 8008b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b66:	f003 0307 	and.w	r3, r3, #7
 8008b6a:	2b05      	cmp	r3, #5
 8008b6c:	d838      	bhi.n	8008be0 <UART_SetConfig+0x35c>
 8008b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b74 <UART_SetConfig+0x2f0>)
 8008b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b74:	08008b8d 	.word	0x08008b8d
 8008b78:	08008b95 	.word	0x08008b95
 8008b7c:	08008b9d 	.word	0x08008b9d
 8008b80:	08008ba5 	.word	0x08008ba5
 8008b84:	08008bd1 	.word	0x08008bd1
 8008b88:	08008bd9 	.word	0x08008bd9
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b92:	e14a      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008b94:	2304      	movs	r3, #4
 8008b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008b9a:	e146      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008b9c:	2308      	movs	r3, #8
 8008b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ba2:	e142      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008ba4:	2310      	movs	r3, #16
 8008ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008baa:	e13e      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008bac:	cfff69f3 	.word	0xcfff69f3
 8008bb0:	58000c00 	.word	0x58000c00
 8008bb4:	11fff4ff 	.word	0x11fff4ff
 8008bb8:	40011000 	.word	0x40011000
 8008bbc:	58024400 	.word	0x58024400
 8008bc0:	40004400 	.word	0x40004400
 8008bc4:	40004800 	.word	0x40004800
 8008bc8:	40004c00 	.word	0x40004c00
 8008bcc:	40005000 	.word	0x40005000
 8008bd0:	2320      	movs	r3, #32
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bd6:	e128      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008bd8:	2340      	movs	r3, #64	@ 0x40
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008bde:	e124      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008be0:	2380      	movs	r3, #128	@ 0x80
 8008be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008be6:	e120      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4acb      	ldr	r2, [pc, #812]	@ (8008f1c <UART_SetConfig+0x698>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d176      	bne.n	8008ce0 <UART_SetConfig+0x45c>
 8008bf2:	4bcb      	ldr	r3, [pc, #812]	@ (8008f20 <UART_SetConfig+0x69c>)
 8008bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bf6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008bfa:	2b28      	cmp	r3, #40	@ 0x28
 8008bfc:	d86c      	bhi.n	8008cd8 <UART_SetConfig+0x454>
 8008bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8008c04 <UART_SetConfig+0x380>)
 8008c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c04:	08008ca9 	.word	0x08008ca9
 8008c08:	08008cd9 	.word	0x08008cd9
 8008c0c:	08008cd9 	.word	0x08008cd9
 8008c10:	08008cd9 	.word	0x08008cd9
 8008c14:	08008cd9 	.word	0x08008cd9
 8008c18:	08008cd9 	.word	0x08008cd9
 8008c1c:	08008cd9 	.word	0x08008cd9
 8008c20:	08008cd9 	.word	0x08008cd9
 8008c24:	08008cb1 	.word	0x08008cb1
 8008c28:	08008cd9 	.word	0x08008cd9
 8008c2c:	08008cd9 	.word	0x08008cd9
 8008c30:	08008cd9 	.word	0x08008cd9
 8008c34:	08008cd9 	.word	0x08008cd9
 8008c38:	08008cd9 	.word	0x08008cd9
 8008c3c:	08008cd9 	.word	0x08008cd9
 8008c40:	08008cd9 	.word	0x08008cd9
 8008c44:	08008cb9 	.word	0x08008cb9
 8008c48:	08008cd9 	.word	0x08008cd9
 8008c4c:	08008cd9 	.word	0x08008cd9
 8008c50:	08008cd9 	.word	0x08008cd9
 8008c54:	08008cd9 	.word	0x08008cd9
 8008c58:	08008cd9 	.word	0x08008cd9
 8008c5c:	08008cd9 	.word	0x08008cd9
 8008c60:	08008cd9 	.word	0x08008cd9
 8008c64:	08008cc1 	.word	0x08008cc1
 8008c68:	08008cd9 	.word	0x08008cd9
 8008c6c:	08008cd9 	.word	0x08008cd9
 8008c70:	08008cd9 	.word	0x08008cd9
 8008c74:	08008cd9 	.word	0x08008cd9
 8008c78:	08008cd9 	.word	0x08008cd9
 8008c7c:	08008cd9 	.word	0x08008cd9
 8008c80:	08008cd9 	.word	0x08008cd9
 8008c84:	08008cc9 	.word	0x08008cc9
 8008c88:	08008cd9 	.word	0x08008cd9
 8008c8c:	08008cd9 	.word	0x08008cd9
 8008c90:	08008cd9 	.word	0x08008cd9
 8008c94:	08008cd9 	.word	0x08008cd9
 8008c98:	08008cd9 	.word	0x08008cd9
 8008c9c:	08008cd9 	.word	0x08008cd9
 8008ca0:	08008cd9 	.word	0x08008cd9
 8008ca4:	08008cd1 	.word	0x08008cd1
 8008ca8:	2301      	movs	r3, #1
 8008caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cae:	e0bc      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008cb0:	2304      	movs	r3, #4
 8008cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cb6:	e0b8      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008cb8:	2308      	movs	r3, #8
 8008cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cbe:	e0b4      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cc6:	e0b0      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008cc8:	2320      	movs	r3, #32
 8008cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cce:	e0ac      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008cd0:	2340      	movs	r3, #64	@ 0x40
 8008cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cd6:	e0a8      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008cd8:	2380      	movs	r3, #128	@ 0x80
 8008cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008cde:	e0a4      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a8f      	ldr	r2, [pc, #572]	@ (8008f24 <UART_SetConfig+0x6a0>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d130      	bne.n	8008d4c <UART_SetConfig+0x4c8>
 8008cea:	4b8d      	ldr	r3, [pc, #564]	@ (8008f20 <UART_SetConfig+0x69c>)
 8008cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cee:	f003 0307 	and.w	r3, r3, #7
 8008cf2:	2b05      	cmp	r3, #5
 8008cf4:	d826      	bhi.n	8008d44 <UART_SetConfig+0x4c0>
 8008cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8008cfc <UART_SetConfig+0x478>)
 8008cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfc:	08008d15 	.word	0x08008d15
 8008d00:	08008d1d 	.word	0x08008d1d
 8008d04:	08008d25 	.word	0x08008d25
 8008d08:	08008d2d 	.word	0x08008d2d
 8008d0c:	08008d35 	.word	0x08008d35
 8008d10:	08008d3d 	.word	0x08008d3d
 8008d14:	2300      	movs	r3, #0
 8008d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d1a:	e086      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d22:	e082      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008d24:	2308      	movs	r3, #8
 8008d26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d2a:	e07e      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d32:	e07a      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008d34:	2320      	movs	r3, #32
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d3a:	e076      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008d3c:	2340      	movs	r3, #64	@ 0x40
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d42:	e072      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008d44:	2380      	movs	r3, #128	@ 0x80
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d4a:	e06e      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a75      	ldr	r2, [pc, #468]	@ (8008f28 <UART_SetConfig+0x6a4>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d130      	bne.n	8008db8 <UART_SetConfig+0x534>
 8008d56:	4b72      	ldr	r3, [pc, #456]	@ (8008f20 <UART_SetConfig+0x69c>)
 8008d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d5a:	f003 0307 	and.w	r3, r3, #7
 8008d5e:	2b05      	cmp	r3, #5
 8008d60:	d826      	bhi.n	8008db0 <UART_SetConfig+0x52c>
 8008d62:	a201      	add	r2, pc, #4	@ (adr r2, 8008d68 <UART_SetConfig+0x4e4>)
 8008d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d68:	08008d81 	.word	0x08008d81
 8008d6c:	08008d89 	.word	0x08008d89
 8008d70:	08008d91 	.word	0x08008d91
 8008d74:	08008d99 	.word	0x08008d99
 8008d78:	08008da1 	.word	0x08008da1
 8008d7c:	08008da9 	.word	0x08008da9
 8008d80:	2300      	movs	r3, #0
 8008d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d86:	e050      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008d88:	2304      	movs	r3, #4
 8008d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d8e:	e04c      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008d90:	2308      	movs	r3, #8
 8008d92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d96:	e048      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008d98:	2310      	movs	r3, #16
 8008d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008d9e:	e044      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008da0:	2320      	movs	r3, #32
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008da6:	e040      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008da8:	2340      	movs	r3, #64	@ 0x40
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dae:	e03c      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008db0:	2380      	movs	r3, #128	@ 0x80
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008db6:	e038      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a5b      	ldr	r2, [pc, #364]	@ (8008f2c <UART_SetConfig+0x6a8>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d130      	bne.n	8008e24 <UART_SetConfig+0x5a0>
 8008dc2:	4b57      	ldr	r3, [pc, #348]	@ (8008f20 <UART_SetConfig+0x69c>)
 8008dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc6:	f003 0307 	and.w	r3, r3, #7
 8008dca:	2b05      	cmp	r3, #5
 8008dcc:	d826      	bhi.n	8008e1c <UART_SetConfig+0x598>
 8008dce:	a201      	add	r2, pc, #4	@ (adr r2, 8008dd4 <UART_SetConfig+0x550>)
 8008dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd4:	08008ded 	.word	0x08008ded
 8008dd8:	08008df5 	.word	0x08008df5
 8008ddc:	08008dfd 	.word	0x08008dfd
 8008de0:	08008e05 	.word	0x08008e05
 8008de4:	08008e0d 	.word	0x08008e0d
 8008de8:	08008e15 	.word	0x08008e15
 8008dec:	2302      	movs	r3, #2
 8008dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008df2:	e01a      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008df4:	2304      	movs	r3, #4
 8008df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008dfa:	e016      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008dfc:	2308      	movs	r3, #8
 8008dfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e02:	e012      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008e04:	2310      	movs	r3, #16
 8008e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e0a:	e00e      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008e0c:	2320      	movs	r3, #32
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e12:	e00a      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008e14:	2340      	movs	r3, #64	@ 0x40
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e1a:	e006      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008e1c:	2380      	movs	r3, #128	@ 0x80
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008e22:	e002      	b.n	8008e2a <UART_SetConfig+0x5a6>
 8008e24:	2380      	movs	r3, #128	@ 0x80
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a3f      	ldr	r2, [pc, #252]	@ (8008f2c <UART_SetConfig+0x6a8>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	f040 80f8 	bne.w	8009026 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008e3a:	2b20      	cmp	r3, #32
 8008e3c:	dc46      	bgt.n	8008ecc <UART_SetConfig+0x648>
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	f2c0 8082 	blt.w	8008f48 <UART_SetConfig+0x6c4>
 8008e44:	3b02      	subs	r3, #2
 8008e46:	2b1e      	cmp	r3, #30
 8008e48:	d87e      	bhi.n	8008f48 <UART_SetConfig+0x6c4>
 8008e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008e50 <UART_SetConfig+0x5cc>)
 8008e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e50:	08008ed3 	.word	0x08008ed3
 8008e54:	08008f49 	.word	0x08008f49
 8008e58:	08008edb 	.word	0x08008edb
 8008e5c:	08008f49 	.word	0x08008f49
 8008e60:	08008f49 	.word	0x08008f49
 8008e64:	08008f49 	.word	0x08008f49
 8008e68:	08008eeb 	.word	0x08008eeb
 8008e6c:	08008f49 	.word	0x08008f49
 8008e70:	08008f49 	.word	0x08008f49
 8008e74:	08008f49 	.word	0x08008f49
 8008e78:	08008f49 	.word	0x08008f49
 8008e7c:	08008f49 	.word	0x08008f49
 8008e80:	08008f49 	.word	0x08008f49
 8008e84:	08008f49 	.word	0x08008f49
 8008e88:	08008efb 	.word	0x08008efb
 8008e8c:	08008f49 	.word	0x08008f49
 8008e90:	08008f49 	.word	0x08008f49
 8008e94:	08008f49 	.word	0x08008f49
 8008e98:	08008f49 	.word	0x08008f49
 8008e9c:	08008f49 	.word	0x08008f49
 8008ea0:	08008f49 	.word	0x08008f49
 8008ea4:	08008f49 	.word	0x08008f49
 8008ea8:	08008f49 	.word	0x08008f49
 8008eac:	08008f49 	.word	0x08008f49
 8008eb0:	08008f49 	.word	0x08008f49
 8008eb4:	08008f49 	.word	0x08008f49
 8008eb8:	08008f49 	.word	0x08008f49
 8008ebc:	08008f49 	.word	0x08008f49
 8008ec0:	08008f49 	.word	0x08008f49
 8008ec4:	08008f49 	.word	0x08008f49
 8008ec8:	08008f3b 	.word	0x08008f3b
 8008ecc:	2b40      	cmp	r3, #64	@ 0x40
 8008ece:	d037      	beq.n	8008f40 <UART_SetConfig+0x6bc>
 8008ed0:	e03a      	b.n	8008f48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008ed2:	f7fd fccb 	bl	800686c <HAL_RCCEx_GetD3PCLK1Freq>
 8008ed6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008ed8:	e03c      	b.n	8008f54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7fd fcda 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ee8:	e034      	b.n	8008f54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008eea:	f107 0318 	add.w	r3, r7, #24
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fd fe26 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008ef8:	e02c      	b.n	8008f54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008efa:	4b09      	ldr	r3, [pc, #36]	@ (8008f20 <UART_SetConfig+0x69c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0320 	and.w	r3, r3, #32
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d016      	beq.n	8008f34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f06:	4b06      	ldr	r3, [pc, #24]	@ (8008f20 <UART_SetConfig+0x69c>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	08db      	lsrs	r3, r3, #3
 8008f0c:	f003 0303 	and.w	r3, r3, #3
 8008f10:	4a07      	ldr	r2, [pc, #28]	@ (8008f30 <UART_SetConfig+0x6ac>)
 8008f12:	fa22 f303 	lsr.w	r3, r2, r3
 8008f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f18:	e01c      	b.n	8008f54 <UART_SetConfig+0x6d0>
 8008f1a:	bf00      	nop
 8008f1c:	40011400 	.word	0x40011400
 8008f20:	58024400 	.word	0x58024400
 8008f24:	40007800 	.word	0x40007800
 8008f28:	40007c00 	.word	0x40007c00
 8008f2c:	58000c00 	.word	0x58000c00
 8008f30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008f34:	4b9d      	ldr	r3, [pc, #628]	@ (80091ac <UART_SetConfig+0x928>)
 8008f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f38:	e00c      	b.n	8008f54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f3a:	4b9d      	ldr	r3, [pc, #628]	@ (80091b0 <UART_SetConfig+0x92c>)
 8008f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f3e:	e009      	b.n	8008f54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008f46:	e005      	b.n	8008f54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008f52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 81de 	beq.w	8009318 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f60:	4a94      	ldr	r2, [pc, #592]	@ (80091b4 <UART_SetConfig+0x930>)
 8008f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f66:	461a      	mov	r2, r3
 8008f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	685a      	ldr	r2, [r3, #4]
 8008f74:	4613      	mov	r3, r2
 8008f76:	005b      	lsls	r3, r3, #1
 8008f78:	4413      	add	r3, r2
 8008f7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d305      	bcc.n	8008f8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d903      	bls.n	8008f94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008f92:	e1c1      	b.n	8009318 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f96:	2200      	movs	r2, #0
 8008f98:	60bb      	str	r3, [r7, #8]
 8008f9a:	60fa      	str	r2, [r7, #12]
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa0:	4a84      	ldr	r2, [pc, #528]	@ (80091b4 <UART_SetConfig+0x930>)
 8008fa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	2200      	movs	r2, #0
 8008faa:	603b      	str	r3, [r7, #0]
 8008fac:	607a      	str	r2, [r7, #4]
 8008fae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fb6:	f7f7 f9eb 	bl	8000390 <__aeabi_uldivmod>
 8008fba:	4602      	mov	r2, r0
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	f04f 0200 	mov.w	r2, #0
 8008fc6:	f04f 0300 	mov.w	r3, #0
 8008fca:	020b      	lsls	r3, r1, #8
 8008fcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fd0:	0202      	lsls	r2, r0, #8
 8008fd2:	6979      	ldr	r1, [r7, #20]
 8008fd4:	6849      	ldr	r1, [r1, #4]
 8008fd6:	0849      	lsrs	r1, r1, #1
 8008fd8:	2000      	movs	r0, #0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	4605      	mov	r5, r0
 8008fde:	eb12 0804 	adds.w	r8, r2, r4
 8008fe2:	eb43 0905 	adc.w	r9, r3, r5
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	469a      	mov	sl, r3
 8008fee:	4693      	mov	fp, r2
 8008ff0:	4652      	mov	r2, sl
 8008ff2:	465b      	mov	r3, fp
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	f7f7 f9ca 	bl	8000390 <__aeabi_uldivmod>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	460b      	mov	r3, r1
 8009000:	4613      	mov	r3, r2
 8009002:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009006:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800900a:	d308      	bcc.n	800901e <UART_SetConfig+0x79a>
 800900c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800900e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009012:	d204      	bcs.n	800901e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800901a:	60da      	str	r2, [r3, #12]
 800901c:	e17c      	b.n	8009318 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009024:	e178      	b.n	8009318 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	69db      	ldr	r3, [r3, #28]
 800902a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800902e:	f040 80c5 	bne.w	80091bc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009032:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009036:	2b20      	cmp	r3, #32
 8009038:	dc48      	bgt.n	80090cc <UART_SetConfig+0x848>
 800903a:	2b00      	cmp	r3, #0
 800903c:	db7b      	blt.n	8009136 <UART_SetConfig+0x8b2>
 800903e:	2b20      	cmp	r3, #32
 8009040:	d879      	bhi.n	8009136 <UART_SetConfig+0x8b2>
 8009042:	a201      	add	r2, pc, #4	@ (adr r2, 8009048 <UART_SetConfig+0x7c4>)
 8009044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009048:	080090d3 	.word	0x080090d3
 800904c:	080090db 	.word	0x080090db
 8009050:	08009137 	.word	0x08009137
 8009054:	08009137 	.word	0x08009137
 8009058:	080090e3 	.word	0x080090e3
 800905c:	08009137 	.word	0x08009137
 8009060:	08009137 	.word	0x08009137
 8009064:	08009137 	.word	0x08009137
 8009068:	080090f3 	.word	0x080090f3
 800906c:	08009137 	.word	0x08009137
 8009070:	08009137 	.word	0x08009137
 8009074:	08009137 	.word	0x08009137
 8009078:	08009137 	.word	0x08009137
 800907c:	08009137 	.word	0x08009137
 8009080:	08009137 	.word	0x08009137
 8009084:	08009137 	.word	0x08009137
 8009088:	08009103 	.word	0x08009103
 800908c:	08009137 	.word	0x08009137
 8009090:	08009137 	.word	0x08009137
 8009094:	08009137 	.word	0x08009137
 8009098:	08009137 	.word	0x08009137
 800909c:	08009137 	.word	0x08009137
 80090a0:	08009137 	.word	0x08009137
 80090a4:	08009137 	.word	0x08009137
 80090a8:	08009137 	.word	0x08009137
 80090ac:	08009137 	.word	0x08009137
 80090b0:	08009137 	.word	0x08009137
 80090b4:	08009137 	.word	0x08009137
 80090b8:	08009137 	.word	0x08009137
 80090bc:	08009137 	.word	0x08009137
 80090c0:	08009137 	.word	0x08009137
 80090c4:	08009137 	.word	0x08009137
 80090c8:	08009129 	.word	0x08009129
 80090cc:	2b40      	cmp	r3, #64	@ 0x40
 80090ce:	d02e      	beq.n	800912e <UART_SetConfig+0x8aa>
 80090d0:	e031      	b.n	8009136 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090d2:	f7fc f995 	bl	8005400 <HAL_RCC_GetPCLK1Freq>
 80090d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090d8:	e033      	b.n	8009142 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090da:	f7fc f9a7 	bl	800542c <HAL_RCC_GetPCLK2Freq>
 80090de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80090e0:	e02f      	b.n	8009142 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80090e6:	4618      	mov	r0, r3
 80090e8:	f7fd fbd6 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80090ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80090f0:	e027      	b.n	8009142 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090f2:	f107 0318 	add.w	r3, r7, #24
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7fd fd22 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009100:	e01f      	b.n	8009142 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009102:	4b2d      	ldr	r3, [pc, #180]	@ (80091b8 <UART_SetConfig+0x934>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0320 	and.w	r3, r3, #32
 800910a:	2b00      	cmp	r3, #0
 800910c:	d009      	beq.n	8009122 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800910e:	4b2a      	ldr	r3, [pc, #168]	@ (80091b8 <UART_SetConfig+0x934>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	08db      	lsrs	r3, r3, #3
 8009114:	f003 0303 	and.w	r3, r3, #3
 8009118:	4a24      	ldr	r2, [pc, #144]	@ (80091ac <UART_SetConfig+0x928>)
 800911a:	fa22 f303 	lsr.w	r3, r2, r3
 800911e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009120:	e00f      	b.n	8009142 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009122:	4b22      	ldr	r3, [pc, #136]	@ (80091ac <UART_SetConfig+0x928>)
 8009124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009126:	e00c      	b.n	8009142 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009128:	4b21      	ldr	r3, [pc, #132]	@ (80091b0 <UART_SetConfig+0x92c>)
 800912a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800912c:	e009      	b.n	8009142 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800912e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009134:	e005      	b.n	8009142 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009136:	2300      	movs	r3, #0
 8009138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009140:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009144:	2b00      	cmp	r3, #0
 8009146:	f000 80e7 	beq.w	8009318 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800914e:	4a19      	ldr	r2, [pc, #100]	@ (80091b4 <UART_SetConfig+0x930>)
 8009150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009154:	461a      	mov	r2, r3
 8009156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009158:	fbb3 f3f2 	udiv	r3, r3, r2
 800915c:	005a      	lsls	r2, r3, #1
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	085b      	lsrs	r3, r3, #1
 8009164:	441a      	add	r2, r3
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	fbb2 f3f3 	udiv	r3, r2, r3
 800916e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009172:	2b0f      	cmp	r3, #15
 8009174:	d916      	bls.n	80091a4 <UART_SetConfig+0x920>
 8009176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800917c:	d212      	bcs.n	80091a4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800917e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009180:	b29b      	uxth	r3, r3
 8009182:	f023 030f 	bic.w	r3, r3, #15
 8009186:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918a:	085b      	lsrs	r3, r3, #1
 800918c:	b29b      	uxth	r3, r3
 800918e:	f003 0307 	and.w	r3, r3, #7
 8009192:	b29a      	uxth	r2, r3
 8009194:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009196:	4313      	orrs	r3, r2
 8009198:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80091a0:	60da      	str	r2, [r3, #12]
 80091a2:	e0b9      	b.n	8009318 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80091aa:	e0b5      	b.n	8009318 <UART_SetConfig+0xa94>
 80091ac:	03d09000 	.word	0x03d09000
 80091b0:	003d0900 	.word	0x003d0900
 80091b4:	0800a9a0 	.word	0x0800a9a0
 80091b8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80091bc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80091c0:	2b20      	cmp	r3, #32
 80091c2:	dc49      	bgt.n	8009258 <UART_SetConfig+0x9d4>
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	db7c      	blt.n	80092c2 <UART_SetConfig+0xa3e>
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d87a      	bhi.n	80092c2 <UART_SetConfig+0xa3e>
 80091cc:	a201      	add	r2, pc, #4	@ (adr r2, 80091d4 <UART_SetConfig+0x950>)
 80091ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d2:	bf00      	nop
 80091d4:	0800925f 	.word	0x0800925f
 80091d8:	08009267 	.word	0x08009267
 80091dc:	080092c3 	.word	0x080092c3
 80091e0:	080092c3 	.word	0x080092c3
 80091e4:	0800926f 	.word	0x0800926f
 80091e8:	080092c3 	.word	0x080092c3
 80091ec:	080092c3 	.word	0x080092c3
 80091f0:	080092c3 	.word	0x080092c3
 80091f4:	0800927f 	.word	0x0800927f
 80091f8:	080092c3 	.word	0x080092c3
 80091fc:	080092c3 	.word	0x080092c3
 8009200:	080092c3 	.word	0x080092c3
 8009204:	080092c3 	.word	0x080092c3
 8009208:	080092c3 	.word	0x080092c3
 800920c:	080092c3 	.word	0x080092c3
 8009210:	080092c3 	.word	0x080092c3
 8009214:	0800928f 	.word	0x0800928f
 8009218:	080092c3 	.word	0x080092c3
 800921c:	080092c3 	.word	0x080092c3
 8009220:	080092c3 	.word	0x080092c3
 8009224:	080092c3 	.word	0x080092c3
 8009228:	080092c3 	.word	0x080092c3
 800922c:	080092c3 	.word	0x080092c3
 8009230:	080092c3 	.word	0x080092c3
 8009234:	080092c3 	.word	0x080092c3
 8009238:	080092c3 	.word	0x080092c3
 800923c:	080092c3 	.word	0x080092c3
 8009240:	080092c3 	.word	0x080092c3
 8009244:	080092c3 	.word	0x080092c3
 8009248:	080092c3 	.word	0x080092c3
 800924c:	080092c3 	.word	0x080092c3
 8009250:	080092c3 	.word	0x080092c3
 8009254:	080092b5 	.word	0x080092b5
 8009258:	2b40      	cmp	r3, #64	@ 0x40
 800925a:	d02e      	beq.n	80092ba <UART_SetConfig+0xa36>
 800925c:	e031      	b.n	80092c2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800925e:	f7fc f8cf 	bl	8005400 <HAL_RCC_GetPCLK1Freq>
 8009262:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009264:	e033      	b.n	80092ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009266:	f7fc f8e1 	bl	800542c <HAL_RCC_GetPCLK2Freq>
 800926a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800926c:	e02f      	b.n	80092ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800926e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009272:	4618      	mov	r0, r3
 8009274:	f7fd fb10 	bl	8006898 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800927a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800927c:	e027      	b.n	80092ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800927e:	f107 0318 	add.w	r3, r7, #24
 8009282:	4618      	mov	r0, r3
 8009284:	f7fd fc5c 	bl	8006b40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800928c:	e01f      	b.n	80092ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800928e:	4b2d      	ldr	r3, [pc, #180]	@ (8009344 <UART_SetConfig+0xac0>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b00      	cmp	r3, #0
 8009298:	d009      	beq.n	80092ae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800929a:	4b2a      	ldr	r3, [pc, #168]	@ (8009344 <UART_SetConfig+0xac0>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	08db      	lsrs	r3, r3, #3
 80092a0:	f003 0303 	and.w	r3, r3, #3
 80092a4:	4a28      	ldr	r2, [pc, #160]	@ (8009348 <UART_SetConfig+0xac4>)
 80092a6:	fa22 f303 	lsr.w	r3, r2, r3
 80092aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092ac:	e00f      	b.n	80092ce <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80092ae:	4b26      	ldr	r3, [pc, #152]	@ (8009348 <UART_SetConfig+0xac4>)
 80092b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b2:	e00c      	b.n	80092ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092b4:	4b25      	ldr	r3, [pc, #148]	@ (800934c <UART_SetConfig+0xac8>)
 80092b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092b8:	e009      	b.n	80092ce <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80092c0:	e005      	b.n	80092ce <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80092cc:	bf00      	nop
    }

    if (pclk != 0U)
 80092ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d021      	beq.n	8009318 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092d4:	697b      	ldr	r3, [r7, #20]
 80092d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009350 <UART_SetConfig+0xacc>)
 80092da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092de:	461a      	mov	r2, r3
 80092e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	085b      	lsrs	r3, r3, #1
 80092ec:	441a      	add	r2, r3
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80092f6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092fa:	2b0f      	cmp	r3, #15
 80092fc:	d909      	bls.n	8009312 <UART_SetConfig+0xa8e>
 80092fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009304:	d205      	bcs.n	8009312 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009308:	b29a      	uxth	r2, r3
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	60da      	str	r2, [r3, #12]
 8009310:	e002      	b.n	8009318 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	2201      	movs	r2, #1
 800931c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	2201      	movs	r2, #1
 8009324:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	2200      	movs	r2, #0
 800932c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2200      	movs	r2, #0
 8009332:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009334:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009338:	4618      	mov	r0, r3
 800933a:	3748      	adds	r7, #72	@ 0x48
 800933c:	46bd      	mov	sp, r7
 800933e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009342:	bf00      	nop
 8009344:	58024400 	.word	0x58024400
 8009348:	03d09000 	.word	0x03d09000
 800934c:	003d0900 	.word	0x003d0900
 8009350:	0800a9a0 	.word	0x0800a9a0

08009354 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009360:	f003 0308 	and.w	r3, r3, #8
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00a      	beq.n	800937e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009382:	f003 0301 	and.w	r3, r3, #1
 8009386:	2b00      	cmp	r3, #0
 8009388:	d00a      	beq.n	80093a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	430a      	orrs	r2, r1
 800939e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00a      	beq.n	80093c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c6:	f003 0304 	and.w	r3, r3, #4
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d00a      	beq.n	80093e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	430a      	orrs	r2, r1
 80093e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e8:	f003 0310 	and.w	r3, r3, #16
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00a      	beq.n	8009406 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	430a      	orrs	r2, r1
 8009404:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800940a:	f003 0320 	and.w	r3, r3, #32
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00a      	beq.n	8009428 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	430a      	orrs	r2, r1
 8009426:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800942c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009430:	2b00      	cmp	r3, #0
 8009432:	d01a      	beq.n	800946a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	430a      	orrs	r2, r1
 8009448:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800944e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009452:	d10a      	bne.n	800946a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800946e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00a      	beq.n	800948c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	685b      	ldr	r3, [r3, #4]
 800947c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	605a      	str	r2, [r3, #4]
  }
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b098      	sub	sp, #96	@ 0x60
 800949c:	af02      	add	r7, sp, #8
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094a8:	f7f8 fd3e 	bl	8001f28 <HAL_GetTick>
 80094ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	f003 0308 	and.w	r3, r3, #8
 80094b8:	2b08      	cmp	r3, #8
 80094ba:	d12f      	bne.n	800951c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094c0:	9300      	str	r3, [sp, #0]
 80094c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094c4:	2200      	movs	r2, #0
 80094c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 f88e 	bl	80095ec <UART_WaitOnFlagUntilTimeout>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d022      	beq.n	800951c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094de:	e853 3f00 	ldrex	r3, [r3]
 80094e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	461a      	mov	r2, r3
 80094f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80094f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094fc:	e841 2300 	strex	r3, r2, [r1]
 8009500:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e6      	bne.n	80094d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2220      	movs	r2, #32
 800950c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009518:	2303      	movs	r3, #3
 800951a:	e063      	b.n	80095e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f003 0304 	and.w	r3, r3, #4
 8009526:	2b04      	cmp	r3, #4
 8009528:	d149      	bne.n	80095be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800952a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009532:	2200      	movs	r2, #0
 8009534:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f857 	bl	80095ec <UART_WaitOnFlagUntilTimeout>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d03c      	beq.n	80095be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	623b      	str	r3, [r7, #32]
   return(result);
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009558:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009562:	633b      	str	r3, [r7, #48]	@ 0x30
 8009564:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009566:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800956a:	e841 2300 	strex	r3, r2, [r1]
 800956e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009572:	2b00      	cmp	r3, #0
 8009574:	d1e6      	bne.n	8009544 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	3308      	adds	r3, #8
 800957c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	e853 3f00 	ldrex	r3, [r3]
 8009584:	60fb      	str	r3, [r7, #12]
   return(result);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f023 0301 	bic.w	r3, r3, #1
 800958c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	3308      	adds	r3, #8
 8009594:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009596:	61fa      	str	r2, [r7, #28]
 8009598:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959a:	69b9      	ldr	r1, [r7, #24]
 800959c:	69fa      	ldr	r2, [r7, #28]
 800959e:	e841 2300 	strex	r3, r2, [r1]
 80095a2:	617b      	str	r3, [r7, #20]
   return(result);
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d1e5      	bne.n	8009576 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2220      	movs	r2, #32
 80095ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e012      	b.n	80095e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2220      	movs	r2, #32
 80095c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2220      	movs	r2, #32
 80095ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2200      	movs	r2, #0
 80095de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095e2:	2300      	movs	r3, #0
}
 80095e4:	4618      	mov	r0, r3
 80095e6:	3758      	adds	r7, #88	@ 0x58
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}

080095ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095ec:	b580      	push	{r7, lr}
 80095ee:	b084      	sub	sp, #16
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	60f8      	str	r0, [r7, #12]
 80095f4:	60b9      	str	r1, [r7, #8]
 80095f6:	603b      	str	r3, [r7, #0]
 80095f8:	4613      	mov	r3, r2
 80095fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095fc:	e04f      	b.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009604:	d04b      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009606:	f7f8 fc8f 	bl	8001f28 <HAL_GetTick>
 800960a:	4602      	mov	r2, r0
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	1ad3      	subs	r3, r2, r3
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	429a      	cmp	r2, r3
 8009614:	d302      	bcc.n	800961c <UART_WaitOnFlagUntilTimeout+0x30>
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800961c:	2303      	movs	r3, #3
 800961e:	e04e      	b.n	80096be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f003 0304 	and.w	r3, r3, #4
 800962a:	2b00      	cmp	r3, #0
 800962c:	d037      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	2b80      	cmp	r3, #128	@ 0x80
 8009632:	d034      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	2b40      	cmp	r3, #64	@ 0x40
 8009638:	d031      	beq.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	f003 0308 	and.w	r3, r3, #8
 8009644:	2b08      	cmp	r3, #8
 8009646:	d110      	bne.n	800966a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	2208      	movs	r2, #8
 800964e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f000 f839 	bl	80096c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	2208      	movs	r2, #8
 800965a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009666:	2301      	movs	r3, #1
 8009668:	e029      	b.n	80096be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69db      	ldr	r3, [r3, #28]
 8009670:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009674:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009678:	d111      	bne.n	800969e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009682:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f000 f81f 	bl	80096c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2220      	movs	r2, #32
 800968e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800969a:	2303      	movs	r3, #3
 800969c:	e00f      	b.n	80096be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	69da      	ldr	r2, [r3, #28]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	4013      	ands	r3, r2
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	bf0c      	ite	eq
 80096ae:	2301      	moveq	r3, #1
 80096b0:	2300      	movne	r3, #0
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	461a      	mov	r2, r3
 80096b6:	79fb      	ldrb	r3, [r7, #7]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d0a0      	beq.n	80095fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096bc:	2300      	movs	r3, #0
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b095      	sub	sp, #84	@ 0x54
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80096de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80096e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80096ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80096f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80096f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80096f6:	e841 2300 	strex	r3, r2, [r1]
 80096fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80096fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e6      	bne.n	80096d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3308      	adds	r3, #8
 8009708:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970a:	6a3b      	ldr	r3, [r7, #32]
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	61fb      	str	r3, [r7, #28]
   return(result);
 8009712:	69fa      	ldr	r2, [r7, #28]
 8009714:	4b1e      	ldr	r3, [pc, #120]	@ (8009790 <UART_EndRxTransfer+0xc8>)
 8009716:	4013      	ands	r3, r2
 8009718:	64bb      	str	r3, [r7, #72]	@ 0x48
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3308      	adds	r3, #8
 8009720:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009724:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e5      	bne.n	8009702 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800973a:	2b01      	cmp	r3, #1
 800973c:	d118      	bne.n	8009770 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	e853 3f00 	ldrex	r3, [r3]
 800974a:	60bb      	str	r3, [r7, #8]
   return(result);
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	f023 0310 	bic.w	r3, r3, #16
 8009752:	647b      	str	r3, [r7, #68]	@ 0x44
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	461a      	mov	r2, r3
 800975a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800975c:	61bb      	str	r3, [r7, #24]
 800975e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	6979      	ldr	r1, [r7, #20]
 8009762:	69ba      	ldr	r2, [r7, #24]
 8009764:	e841 2300 	strex	r3, r2, [r1]
 8009768:	613b      	str	r3, [r7, #16]
   return(result);
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d1e6      	bne.n	800973e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2220      	movs	r2, #32
 8009774:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2200      	movs	r2, #0
 800977c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009784:	bf00      	nop
 8009786:	3754      	adds	r7, #84	@ 0x54
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	effffffe 	.word	0xeffffffe

08009794 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d101      	bne.n	80097aa <HAL_UARTEx_DisableFifoMode+0x16>
 80097a6:	2302      	movs	r3, #2
 80097a8:	e027      	b.n	80097fa <HAL_UARTEx_DisableFifoMode+0x66>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2224      	movs	r2, #36	@ 0x24
 80097b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681a      	ldr	r2, [r3, #0]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f022 0201 	bic.w	r2, r2, #1
 80097d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80097d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2220      	movs	r2, #32
 80097ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097f8:	2300      	movs	r3, #0
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b084      	sub	sp, #16
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
 800980e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009816:	2b01      	cmp	r3, #1
 8009818:	d101      	bne.n	800981e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800981a:	2302      	movs	r3, #2
 800981c:	e02d      	b.n	800987a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2201      	movs	r2, #1
 8009822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2224      	movs	r2, #36	@ 0x24
 800982a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f022 0201 	bic.w	r2, r2, #1
 8009844:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	430a      	orrs	r2, r1
 8009858:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f850 	bl	8009900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68fa      	ldr	r2, [r7, #12]
 8009866:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2220      	movs	r2, #32
 800986c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009878:	2300      	movs	r3, #0
}
 800987a:	4618      	mov	r0, r3
 800987c:	3710      	adds	r7, #16
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}

08009882 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009882:	b580      	push	{r7, lr}
 8009884:	b084      	sub	sp, #16
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009892:	2b01      	cmp	r3, #1
 8009894:	d101      	bne.n	800989a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009896:	2302      	movs	r3, #2
 8009898:	e02d      	b.n	80098f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2224      	movs	r2, #36	@ 0x24
 80098a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f022 0201 	bic.w	r2, r2, #1
 80098c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	689b      	ldr	r3, [r3, #8]
 80098c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	430a      	orrs	r2, r1
 80098d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f812 	bl	8009900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68fa      	ldr	r2, [r7, #12]
 80098e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2220      	movs	r2, #32
 80098e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2200      	movs	r2, #0
 80098f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098f4:	2300      	movs	r3, #0
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
	...

08009900 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800990c:	2b00      	cmp	r3, #0
 800990e:	d108      	bne.n	8009922 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2201      	movs	r2, #1
 8009914:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2201      	movs	r2, #1
 800991c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009920:	e031      	b.n	8009986 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009922:	2310      	movs	r3, #16
 8009924:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009926:	2310      	movs	r3, #16
 8009928:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	0e5b      	lsrs	r3, r3, #25
 8009932:	b2db      	uxtb	r3, r3
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	0f5b      	lsrs	r3, r3, #29
 8009942:	b2db      	uxtb	r3, r3
 8009944:	f003 0307 	and.w	r3, r3, #7
 8009948:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800994a:	7bbb      	ldrb	r3, [r7, #14]
 800994c:	7b3a      	ldrb	r2, [r7, #12]
 800994e:	4911      	ldr	r1, [pc, #68]	@ (8009994 <UARTEx_SetNbDataToProcess+0x94>)
 8009950:	5c8a      	ldrb	r2, [r1, r2]
 8009952:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009956:	7b3a      	ldrb	r2, [r7, #12]
 8009958:	490f      	ldr	r1, [pc, #60]	@ (8009998 <UARTEx_SetNbDataToProcess+0x98>)
 800995a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800995c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009960:	b29a      	uxth	r2, r3
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	7b7a      	ldrb	r2, [r7, #13]
 800996c:	4909      	ldr	r1, [pc, #36]	@ (8009994 <UARTEx_SetNbDataToProcess+0x94>)
 800996e:	5c8a      	ldrb	r2, [r1, r2]
 8009970:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009974:	7b7a      	ldrb	r2, [r7, #13]
 8009976:	4908      	ldr	r1, [pc, #32]	@ (8009998 <UARTEx_SetNbDataToProcess+0x98>)
 8009978:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800997a:	fb93 f3f2 	sdiv	r3, r3, r2
 800997e:	b29a      	uxth	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	0800a9b8 	.word	0x0800a9b8
 8009998:	0800a9c0 	.word	0x0800a9c0

0800999c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800999c:	b084      	sub	sp, #16
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	f107 001c 	add.w	r0, r7, #28
 80099aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80099ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80099b2:	2b01      	cmp	r3, #1
 80099b4:	d121      	bne.n	80099fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	68da      	ldr	r2, [r3, #12]
 80099c6:	4b2c      	ldr	r3, [pc, #176]	@ (8009a78 <USB_CoreInit+0xdc>)
 80099c8:	4013      	ands	r3, r2
 80099ca:	687a      	ldr	r2, [r7, #4]
 80099cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	68db      	ldr	r3, [r3, #12]
 80099d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80099da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d105      	bne.n	80099ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	68db      	ldr	r3, [r3, #12]
 80099e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 faaa 	bl	8009f48 <USB_CoreReset>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73fb      	strb	r3, [r7, #15]
 80099f8:	e01b      	b.n	8009a32 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	68db      	ldr	r3, [r3, #12]
 80099fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fa9e 	bl	8009f48 <USB_CoreReset>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009a10:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d106      	bne.n	8009a26 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	639a      	str	r2, [r3, #56]	@ 0x38
 8009a24:	e005      	b.n	8009a32 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009a32:	7fbb      	ldrb	r3, [r7, #30]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d116      	bne.n	8009a66 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009a46:	4b0d      	ldr	r3, [pc, #52]	@ (8009a7c <USB_CoreInit+0xe0>)
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	f043 0206 	orr.w	r2, r3, #6
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f043 0220 	orr.w	r2, r3, #32
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3710      	adds	r7, #16
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009a72:	b004      	add	sp, #16
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	ffbdffbf 	.word	0xffbdffbf
 8009a7c:	03ee0000 	.word	0x03ee0000

08009a80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	689b      	ldr	r3, [r3, #8]
 8009a8c:	f023 0201 	bic.w	r2, r3, #1
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	370c      	adds	r7, #12
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr

08009aa2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009abe:	78fb      	ldrb	r3, [r7, #3]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d115      	bne.n	8009af0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009ad0:	200a      	movs	r0, #10
 8009ad2:	f7f8 fa35 	bl	8001f40 <HAL_Delay>
      ms += 10U;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	330a      	adds	r3, #10
 8009ada:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009adc:	6878      	ldr	r0, [r7, #4]
 8009ade:	f000 fa25 	bl	8009f2c <USB_GetMode>
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d01e      	beq.n	8009b26 <USB_SetCurrentMode+0x84>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2bc7      	cmp	r3, #199	@ 0xc7
 8009aec:	d9f0      	bls.n	8009ad0 <USB_SetCurrentMode+0x2e>
 8009aee:	e01a      	b.n	8009b26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009af0:	78fb      	ldrb	r3, [r7, #3]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d115      	bne.n	8009b22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009b02:	200a      	movs	r0, #10
 8009b04:	f7f8 fa1c 	bl	8001f40 <HAL_Delay>
      ms += 10U;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	330a      	adds	r3, #10
 8009b0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fa0c 	bl	8009f2c <USB_GetMode>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d005      	beq.n	8009b26 <USB_SetCurrentMode+0x84>
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8009b1e:	d9f0      	bls.n	8009b02 <USB_SetCurrentMode+0x60>
 8009b20:	e001      	b.n	8009b26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	e005      	b.n	8009b32 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2bc8      	cmp	r3, #200	@ 0xc8
 8009b2a:	d101      	bne.n	8009b30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	e000      	b.n	8009b32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b3c:	b084      	sub	sp, #16
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b086      	sub	sp, #24
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009b4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009b56:	2300      	movs	r3, #0
 8009b58:	613b      	str	r3, [r7, #16]
 8009b5a:	e009      	b.n	8009b70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	3340      	adds	r3, #64	@ 0x40
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	2200      	movs	r2, #0
 8009b68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	613b      	str	r3, [r7, #16]
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	2b0e      	cmp	r3, #14
 8009b74:	d9f2      	bls.n	8009b5c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009b76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d11c      	bne.n	8009bb8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b8c:	f043 0302 	orr.w	r3, r3, #2
 8009b90:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b96:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	601a      	str	r2, [r3, #0]
 8009bb6:	e005      	b.n	8009bc4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bbc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009bca:	461a      	mov	r2, r3
 8009bcc:	2300      	movs	r3, #0
 8009bce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009bd0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d10d      	bne.n	8009bf4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d104      	bne.n	8009bea <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009be0:	2100      	movs	r1, #0
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 f968 	bl	8009eb8 <USB_SetDevSpeed>
 8009be8:	e008      	b.n	8009bfc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009bea:	2101      	movs	r1, #1
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f963 	bl	8009eb8 <USB_SetDevSpeed>
 8009bf2:	e003      	b.n	8009bfc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009bf4:	2103      	movs	r1, #3
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 f95e 	bl	8009eb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009bfc:	2110      	movs	r1, #16
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f8fa 	bl	8009df8 <USB_FlushTxFifo>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f924 	bl	8009e5c <USB_FlushRxFifo>
 8009c14:	4603      	mov	r3, r0
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d001      	beq.n	8009c1e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c24:	461a      	mov	r2, r3
 8009c26:	2300      	movs	r3, #0
 8009c28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c30:	461a      	mov	r2, r3
 8009c32:	2300      	movs	r3, #0
 8009c34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	2300      	movs	r3, #0
 8009c40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c42:	2300      	movs	r3, #0
 8009c44:	613b      	str	r3, [r7, #16]
 8009c46:	e043      	b.n	8009cd0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c5e:	d118      	bne.n	8009c92 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10a      	bne.n	8009c7c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009c66:	693b      	ldr	r3, [r7, #16]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c72:	461a      	mov	r2, r3
 8009c74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009c78:	6013      	str	r3, [r2, #0]
 8009c7a:	e013      	b.n	8009ca4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	015a      	lsls	r2, r3, #5
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4413      	add	r3, r2
 8009c84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c88:	461a      	mov	r2, r3
 8009c8a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009c8e:	6013      	str	r3, [r2, #0]
 8009c90:	e008      	b.n	8009ca4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	015a      	lsls	r2, r3, #5
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cb0:	461a      	mov	r2, r3
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	015a      	lsls	r2, r3, #5
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009cc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cca:	693b      	ldr	r3, [r7, #16]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	613b      	str	r3, [r7, #16]
 8009cd0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d3b5      	bcc.n	8009c48 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009cdc:	2300      	movs	r3, #0
 8009cde:	613b      	str	r3, [r7, #16]
 8009ce0:	e043      	b.n	8009d6a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	015a      	lsls	r2, r3, #5
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	4413      	add	r3, r2
 8009cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cf8:	d118      	bne.n	8009d2c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d10a      	bne.n	8009d16 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	015a      	lsls	r2, r3, #5
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	4413      	add	r3, r2
 8009d08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	e013      	b.n	8009d3e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d22:	461a      	mov	r2, r3
 8009d24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009d28:	6013      	str	r3, [r2, #0]
 8009d2a:	e008      	b.n	8009d3e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	015a      	lsls	r2, r3, #5
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d38:	461a      	mov	r2, r3
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	015a      	lsls	r2, r3, #5
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	4413      	add	r3, r2
 8009d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	015a      	lsls	r2, r3, #5
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	4413      	add	r3, r2
 8009d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009d62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	3301      	adds	r3, #1
 8009d68:	613b      	str	r3, [r7, #16]
 8009d6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009d6e:	461a      	mov	r2, r3
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d3b5      	bcc.n	8009ce2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d7c:	691b      	ldr	r3, [r3, #16]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d88:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009d96:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d105      	bne.n	8009dac <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	699b      	ldr	r3, [r3, #24]
 8009da4:	f043 0210 	orr.w	r2, r3, #16
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	699a      	ldr	r2, [r3, #24]
 8009db0:	4b0f      	ldr	r3, [pc, #60]	@ (8009df0 <USB_DevInit+0x2b4>)
 8009db2:	4313      	orrs	r3, r2
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009db8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d005      	beq.n	8009dcc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	f043 0208 	orr.w	r2, r3, #8
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009dcc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d105      	bne.n	8009de0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	699a      	ldr	r2, [r3, #24]
 8009dd8:	4b06      	ldr	r3, [pc, #24]	@ (8009df4 <USB_DevInit+0x2b8>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009dec:	b004      	add	sp, #16
 8009dee:	4770      	bx	lr
 8009df0:	803c3800 	.word	0x803c3800
 8009df4:	40000004 	.word	0x40000004

08009df8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009e02:	2300      	movs	r3, #0
 8009e04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e12:	d901      	bls.n	8009e18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e01b      	b.n	8009e50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	691b      	ldr	r3, [r3, #16]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	daf2      	bge.n	8009e06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009e20:	2300      	movs	r3, #0
 8009e22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	019b      	lsls	r3, r3, #6
 8009e28:	f043 0220 	orr.w	r2, r3, #32
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	3301      	adds	r3, #1
 8009e34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e3c:	d901      	bls.n	8009e42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009e3e:	2303      	movs	r3, #3
 8009e40:	e006      	b.n	8009e50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	f003 0320 	and.w	r3, r3, #32
 8009e4a:	2b20      	cmp	r3, #32
 8009e4c:	d0f0      	beq.n	8009e30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e64:	2300      	movs	r3, #0
 8009e66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e74:	d901      	bls.n	8009e7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e018      	b.n	8009eac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	691b      	ldr	r3, [r3, #16]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	daf2      	bge.n	8009e68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009e82:	2300      	movs	r3, #0
 8009e84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2210      	movs	r2, #16
 8009e8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009e98:	d901      	bls.n	8009e9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e006      	b.n	8009eac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	f003 0310 	and.w	r3, r3, #16
 8009ea6:	2b10      	cmp	r3, #16
 8009ea8:	d0f0      	beq.n	8009e8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3714      	adds	r7, #20
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	78fb      	ldrb	r3, [r7, #3]
 8009ed2:	68f9      	ldr	r1, [r7, #12]
 8009ed4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3714      	adds	r7, #20
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b085      	sub	sp, #20
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009f04:	f023 0303 	bic.w	r3, r3, #3
 8009f08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f18:	f043 0302 	orr.w	r3, r3, #2
 8009f1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f1e:	2300      	movs	r3, #0
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b083      	sub	sp, #12
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	695b      	ldr	r3, [r3, #20]
 8009f38:	f003 0301 	and.w	r3, r3, #1
}
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f46:	4770      	bx	lr

08009f48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f50:	2300      	movs	r3, #0
 8009f52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3301      	adds	r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f60:	d901      	bls.n	8009f66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e01b      	b.n	8009f9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	691b      	ldr	r3, [r3, #16]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	daf2      	bge.n	8009f54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	f043 0201 	orr.w	r2, r3, #1
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	3301      	adds	r3, #1
 8009f82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009f8a:	d901      	bls.n	8009f90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f8c:	2303      	movs	r3, #3
 8009f8e:	e006      	b.n	8009f9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	f003 0301 	and.w	r3, r3, #1
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d0f0      	beq.n	8009f7e <USB_CoreReset+0x36>

  return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3714      	adds	r7, #20
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
	...

08009fac <siprintf>:
 8009fac:	b40e      	push	{r1, r2, r3}
 8009fae:	b500      	push	{lr}
 8009fb0:	b09c      	sub	sp, #112	@ 0x70
 8009fb2:	ab1d      	add	r3, sp, #116	@ 0x74
 8009fb4:	9002      	str	r0, [sp, #8]
 8009fb6:	9006      	str	r0, [sp, #24]
 8009fb8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009fbc:	4809      	ldr	r0, [pc, #36]	@ (8009fe4 <siprintf+0x38>)
 8009fbe:	9107      	str	r1, [sp, #28]
 8009fc0:	9104      	str	r1, [sp, #16]
 8009fc2:	4909      	ldr	r1, [pc, #36]	@ (8009fe8 <siprintf+0x3c>)
 8009fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fc8:	9105      	str	r1, [sp, #20]
 8009fca:	6800      	ldr	r0, [r0, #0]
 8009fcc:	9301      	str	r3, [sp, #4]
 8009fce:	a902      	add	r1, sp, #8
 8009fd0:	f000 f994 	bl	800a2fc <_svfiprintf_r>
 8009fd4:	9b02      	ldr	r3, [sp, #8]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	701a      	strb	r2, [r3, #0]
 8009fda:	b01c      	add	sp, #112	@ 0x70
 8009fdc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009fe0:	b003      	add	sp, #12
 8009fe2:	4770      	bx	lr
 8009fe4:	24000014 	.word	0x24000014
 8009fe8:	ffff0208 	.word	0xffff0208

08009fec <memset>:
 8009fec:	4402      	add	r2, r0
 8009fee:	4603      	mov	r3, r0
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d100      	bne.n	8009ff6 <memset+0xa>
 8009ff4:	4770      	bx	lr
 8009ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8009ffa:	e7f9      	b.n	8009ff0 <memset+0x4>

08009ffc <__errno>:
 8009ffc:	4b01      	ldr	r3, [pc, #4]	@ (800a004 <__errno+0x8>)
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	24000014 	.word	0x24000014

0800a008 <__libc_init_array>:
 800a008:	b570      	push	{r4, r5, r6, lr}
 800a00a:	4d0d      	ldr	r5, [pc, #52]	@ (800a040 <__libc_init_array+0x38>)
 800a00c:	4c0d      	ldr	r4, [pc, #52]	@ (800a044 <__libc_init_array+0x3c>)
 800a00e:	1b64      	subs	r4, r4, r5
 800a010:	10a4      	asrs	r4, r4, #2
 800a012:	2600      	movs	r6, #0
 800a014:	42a6      	cmp	r6, r4
 800a016:	d109      	bne.n	800a02c <__libc_init_array+0x24>
 800a018:	4d0b      	ldr	r5, [pc, #44]	@ (800a048 <__libc_init_array+0x40>)
 800a01a:	4c0c      	ldr	r4, [pc, #48]	@ (800a04c <__libc_init_array+0x44>)
 800a01c:	f000 fc66 	bl	800a8ec <_init>
 800a020:	1b64      	subs	r4, r4, r5
 800a022:	10a4      	asrs	r4, r4, #2
 800a024:	2600      	movs	r6, #0
 800a026:	42a6      	cmp	r6, r4
 800a028:	d105      	bne.n	800a036 <__libc_init_array+0x2e>
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a030:	4798      	blx	r3
 800a032:	3601      	adds	r6, #1
 800a034:	e7ee      	b.n	800a014 <__libc_init_array+0xc>
 800a036:	f855 3b04 	ldr.w	r3, [r5], #4
 800a03a:	4798      	blx	r3
 800a03c:	3601      	adds	r6, #1
 800a03e:	e7f2      	b.n	800a026 <__libc_init_array+0x1e>
 800a040:	0800aa04 	.word	0x0800aa04
 800a044:	0800aa04 	.word	0x0800aa04
 800a048:	0800aa04 	.word	0x0800aa04
 800a04c:	0800aa08 	.word	0x0800aa08

0800a050 <__retarget_lock_acquire_recursive>:
 800a050:	4770      	bx	lr

0800a052 <__retarget_lock_release_recursive>:
 800a052:	4770      	bx	lr

0800a054 <_free_r>:
 800a054:	b538      	push	{r3, r4, r5, lr}
 800a056:	4605      	mov	r5, r0
 800a058:	2900      	cmp	r1, #0
 800a05a:	d041      	beq.n	800a0e0 <_free_r+0x8c>
 800a05c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a060:	1f0c      	subs	r4, r1, #4
 800a062:	2b00      	cmp	r3, #0
 800a064:	bfb8      	it	lt
 800a066:	18e4      	addlt	r4, r4, r3
 800a068:	f000 f8e0 	bl	800a22c <__malloc_lock>
 800a06c:	4a1d      	ldr	r2, [pc, #116]	@ (800a0e4 <_free_r+0x90>)
 800a06e:	6813      	ldr	r3, [r2, #0]
 800a070:	b933      	cbnz	r3, 800a080 <_free_r+0x2c>
 800a072:	6063      	str	r3, [r4, #4]
 800a074:	6014      	str	r4, [r2, #0]
 800a076:	4628      	mov	r0, r5
 800a078:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a07c:	f000 b8dc 	b.w	800a238 <__malloc_unlock>
 800a080:	42a3      	cmp	r3, r4
 800a082:	d908      	bls.n	800a096 <_free_r+0x42>
 800a084:	6820      	ldr	r0, [r4, #0]
 800a086:	1821      	adds	r1, r4, r0
 800a088:	428b      	cmp	r3, r1
 800a08a:	bf01      	itttt	eq
 800a08c:	6819      	ldreq	r1, [r3, #0]
 800a08e:	685b      	ldreq	r3, [r3, #4]
 800a090:	1809      	addeq	r1, r1, r0
 800a092:	6021      	streq	r1, [r4, #0]
 800a094:	e7ed      	b.n	800a072 <_free_r+0x1e>
 800a096:	461a      	mov	r2, r3
 800a098:	685b      	ldr	r3, [r3, #4]
 800a09a:	b10b      	cbz	r3, 800a0a0 <_free_r+0x4c>
 800a09c:	42a3      	cmp	r3, r4
 800a09e:	d9fa      	bls.n	800a096 <_free_r+0x42>
 800a0a0:	6811      	ldr	r1, [r2, #0]
 800a0a2:	1850      	adds	r0, r2, r1
 800a0a4:	42a0      	cmp	r0, r4
 800a0a6:	d10b      	bne.n	800a0c0 <_free_r+0x6c>
 800a0a8:	6820      	ldr	r0, [r4, #0]
 800a0aa:	4401      	add	r1, r0
 800a0ac:	1850      	adds	r0, r2, r1
 800a0ae:	4283      	cmp	r3, r0
 800a0b0:	6011      	str	r1, [r2, #0]
 800a0b2:	d1e0      	bne.n	800a076 <_free_r+0x22>
 800a0b4:	6818      	ldr	r0, [r3, #0]
 800a0b6:	685b      	ldr	r3, [r3, #4]
 800a0b8:	6053      	str	r3, [r2, #4]
 800a0ba:	4408      	add	r0, r1
 800a0bc:	6010      	str	r0, [r2, #0]
 800a0be:	e7da      	b.n	800a076 <_free_r+0x22>
 800a0c0:	d902      	bls.n	800a0c8 <_free_r+0x74>
 800a0c2:	230c      	movs	r3, #12
 800a0c4:	602b      	str	r3, [r5, #0]
 800a0c6:	e7d6      	b.n	800a076 <_free_r+0x22>
 800a0c8:	6820      	ldr	r0, [r4, #0]
 800a0ca:	1821      	adds	r1, r4, r0
 800a0cc:	428b      	cmp	r3, r1
 800a0ce:	bf04      	itt	eq
 800a0d0:	6819      	ldreq	r1, [r3, #0]
 800a0d2:	685b      	ldreq	r3, [r3, #4]
 800a0d4:	6063      	str	r3, [r4, #4]
 800a0d6:	bf04      	itt	eq
 800a0d8:	1809      	addeq	r1, r1, r0
 800a0da:	6021      	streq	r1, [r4, #0]
 800a0dc:	6054      	str	r4, [r2, #4]
 800a0de:	e7ca      	b.n	800a076 <_free_r+0x22>
 800a0e0:	bd38      	pop	{r3, r4, r5, pc}
 800a0e2:	bf00      	nop
 800a0e4:	24000abc 	.word	0x24000abc

0800a0e8 <sbrk_aligned>:
 800a0e8:	b570      	push	{r4, r5, r6, lr}
 800a0ea:	4e0f      	ldr	r6, [pc, #60]	@ (800a128 <sbrk_aligned+0x40>)
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	6831      	ldr	r1, [r6, #0]
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	b911      	cbnz	r1, 800a0fa <sbrk_aligned+0x12>
 800a0f4:	f000 fba6 	bl	800a844 <_sbrk_r>
 800a0f8:	6030      	str	r0, [r6, #0]
 800a0fa:	4621      	mov	r1, r4
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f000 fba1 	bl	800a844 <_sbrk_r>
 800a102:	1c43      	adds	r3, r0, #1
 800a104:	d103      	bne.n	800a10e <sbrk_aligned+0x26>
 800a106:	f04f 34ff 	mov.w	r4, #4294967295
 800a10a:	4620      	mov	r0, r4
 800a10c:	bd70      	pop	{r4, r5, r6, pc}
 800a10e:	1cc4      	adds	r4, r0, #3
 800a110:	f024 0403 	bic.w	r4, r4, #3
 800a114:	42a0      	cmp	r0, r4
 800a116:	d0f8      	beq.n	800a10a <sbrk_aligned+0x22>
 800a118:	1a21      	subs	r1, r4, r0
 800a11a:	4628      	mov	r0, r5
 800a11c:	f000 fb92 	bl	800a844 <_sbrk_r>
 800a120:	3001      	adds	r0, #1
 800a122:	d1f2      	bne.n	800a10a <sbrk_aligned+0x22>
 800a124:	e7ef      	b.n	800a106 <sbrk_aligned+0x1e>
 800a126:	bf00      	nop
 800a128:	24000ab8 	.word	0x24000ab8

0800a12c <_malloc_r>:
 800a12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a130:	1ccd      	adds	r5, r1, #3
 800a132:	f025 0503 	bic.w	r5, r5, #3
 800a136:	3508      	adds	r5, #8
 800a138:	2d0c      	cmp	r5, #12
 800a13a:	bf38      	it	cc
 800a13c:	250c      	movcc	r5, #12
 800a13e:	2d00      	cmp	r5, #0
 800a140:	4606      	mov	r6, r0
 800a142:	db01      	blt.n	800a148 <_malloc_r+0x1c>
 800a144:	42a9      	cmp	r1, r5
 800a146:	d904      	bls.n	800a152 <_malloc_r+0x26>
 800a148:	230c      	movs	r3, #12
 800a14a:	6033      	str	r3, [r6, #0]
 800a14c:	2000      	movs	r0, #0
 800a14e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a152:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a228 <_malloc_r+0xfc>
 800a156:	f000 f869 	bl	800a22c <__malloc_lock>
 800a15a:	f8d8 3000 	ldr.w	r3, [r8]
 800a15e:	461c      	mov	r4, r3
 800a160:	bb44      	cbnz	r4, 800a1b4 <_malloc_r+0x88>
 800a162:	4629      	mov	r1, r5
 800a164:	4630      	mov	r0, r6
 800a166:	f7ff ffbf 	bl	800a0e8 <sbrk_aligned>
 800a16a:	1c43      	adds	r3, r0, #1
 800a16c:	4604      	mov	r4, r0
 800a16e:	d158      	bne.n	800a222 <_malloc_r+0xf6>
 800a170:	f8d8 4000 	ldr.w	r4, [r8]
 800a174:	4627      	mov	r7, r4
 800a176:	2f00      	cmp	r7, #0
 800a178:	d143      	bne.n	800a202 <_malloc_r+0xd6>
 800a17a:	2c00      	cmp	r4, #0
 800a17c:	d04b      	beq.n	800a216 <_malloc_r+0xea>
 800a17e:	6823      	ldr	r3, [r4, #0]
 800a180:	4639      	mov	r1, r7
 800a182:	4630      	mov	r0, r6
 800a184:	eb04 0903 	add.w	r9, r4, r3
 800a188:	f000 fb5c 	bl	800a844 <_sbrk_r>
 800a18c:	4581      	cmp	r9, r0
 800a18e:	d142      	bne.n	800a216 <_malloc_r+0xea>
 800a190:	6821      	ldr	r1, [r4, #0]
 800a192:	1a6d      	subs	r5, r5, r1
 800a194:	4629      	mov	r1, r5
 800a196:	4630      	mov	r0, r6
 800a198:	f7ff ffa6 	bl	800a0e8 <sbrk_aligned>
 800a19c:	3001      	adds	r0, #1
 800a19e:	d03a      	beq.n	800a216 <_malloc_r+0xea>
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	442b      	add	r3, r5
 800a1a4:	6023      	str	r3, [r4, #0]
 800a1a6:	f8d8 3000 	ldr.w	r3, [r8]
 800a1aa:	685a      	ldr	r2, [r3, #4]
 800a1ac:	bb62      	cbnz	r2, 800a208 <_malloc_r+0xdc>
 800a1ae:	f8c8 7000 	str.w	r7, [r8]
 800a1b2:	e00f      	b.n	800a1d4 <_malloc_r+0xa8>
 800a1b4:	6822      	ldr	r2, [r4, #0]
 800a1b6:	1b52      	subs	r2, r2, r5
 800a1b8:	d420      	bmi.n	800a1fc <_malloc_r+0xd0>
 800a1ba:	2a0b      	cmp	r2, #11
 800a1bc:	d917      	bls.n	800a1ee <_malloc_r+0xc2>
 800a1be:	1961      	adds	r1, r4, r5
 800a1c0:	42a3      	cmp	r3, r4
 800a1c2:	6025      	str	r5, [r4, #0]
 800a1c4:	bf18      	it	ne
 800a1c6:	6059      	strne	r1, [r3, #4]
 800a1c8:	6863      	ldr	r3, [r4, #4]
 800a1ca:	bf08      	it	eq
 800a1cc:	f8c8 1000 	streq.w	r1, [r8]
 800a1d0:	5162      	str	r2, [r4, r5]
 800a1d2:	604b      	str	r3, [r1, #4]
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f000 f82f 	bl	800a238 <__malloc_unlock>
 800a1da:	f104 000b 	add.w	r0, r4, #11
 800a1de:	1d23      	adds	r3, r4, #4
 800a1e0:	f020 0007 	bic.w	r0, r0, #7
 800a1e4:	1ac2      	subs	r2, r0, r3
 800a1e6:	bf1c      	itt	ne
 800a1e8:	1a1b      	subne	r3, r3, r0
 800a1ea:	50a3      	strne	r3, [r4, r2]
 800a1ec:	e7af      	b.n	800a14e <_malloc_r+0x22>
 800a1ee:	6862      	ldr	r2, [r4, #4]
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	bf0c      	ite	eq
 800a1f4:	f8c8 2000 	streq.w	r2, [r8]
 800a1f8:	605a      	strne	r2, [r3, #4]
 800a1fa:	e7eb      	b.n	800a1d4 <_malloc_r+0xa8>
 800a1fc:	4623      	mov	r3, r4
 800a1fe:	6864      	ldr	r4, [r4, #4]
 800a200:	e7ae      	b.n	800a160 <_malloc_r+0x34>
 800a202:	463c      	mov	r4, r7
 800a204:	687f      	ldr	r7, [r7, #4]
 800a206:	e7b6      	b.n	800a176 <_malloc_r+0x4a>
 800a208:	461a      	mov	r2, r3
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	d1fb      	bne.n	800a208 <_malloc_r+0xdc>
 800a210:	2300      	movs	r3, #0
 800a212:	6053      	str	r3, [r2, #4]
 800a214:	e7de      	b.n	800a1d4 <_malloc_r+0xa8>
 800a216:	230c      	movs	r3, #12
 800a218:	6033      	str	r3, [r6, #0]
 800a21a:	4630      	mov	r0, r6
 800a21c:	f000 f80c 	bl	800a238 <__malloc_unlock>
 800a220:	e794      	b.n	800a14c <_malloc_r+0x20>
 800a222:	6005      	str	r5, [r0, #0]
 800a224:	e7d6      	b.n	800a1d4 <_malloc_r+0xa8>
 800a226:	bf00      	nop
 800a228:	24000abc 	.word	0x24000abc

0800a22c <__malloc_lock>:
 800a22c:	4801      	ldr	r0, [pc, #4]	@ (800a234 <__malloc_lock+0x8>)
 800a22e:	f7ff bf0f 	b.w	800a050 <__retarget_lock_acquire_recursive>
 800a232:	bf00      	nop
 800a234:	24000ab4 	.word	0x24000ab4

0800a238 <__malloc_unlock>:
 800a238:	4801      	ldr	r0, [pc, #4]	@ (800a240 <__malloc_unlock+0x8>)
 800a23a:	f7ff bf0a 	b.w	800a052 <__retarget_lock_release_recursive>
 800a23e:	bf00      	nop
 800a240:	24000ab4 	.word	0x24000ab4

0800a244 <__ssputs_r>:
 800a244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a248:	688e      	ldr	r6, [r1, #8]
 800a24a:	461f      	mov	r7, r3
 800a24c:	42be      	cmp	r6, r7
 800a24e:	680b      	ldr	r3, [r1, #0]
 800a250:	4682      	mov	sl, r0
 800a252:	460c      	mov	r4, r1
 800a254:	4690      	mov	r8, r2
 800a256:	d82d      	bhi.n	800a2b4 <__ssputs_r+0x70>
 800a258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a25c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a260:	d026      	beq.n	800a2b0 <__ssputs_r+0x6c>
 800a262:	6965      	ldr	r5, [r4, #20]
 800a264:	6909      	ldr	r1, [r1, #16]
 800a266:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a26a:	eba3 0901 	sub.w	r9, r3, r1
 800a26e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a272:	1c7b      	adds	r3, r7, #1
 800a274:	444b      	add	r3, r9
 800a276:	106d      	asrs	r5, r5, #1
 800a278:	429d      	cmp	r5, r3
 800a27a:	bf38      	it	cc
 800a27c:	461d      	movcc	r5, r3
 800a27e:	0553      	lsls	r3, r2, #21
 800a280:	d527      	bpl.n	800a2d2 <__ssputs_r+0x8e>
 800a282:	4629      	mov	r1, r5
 800a284:	f7ff ff52 	bl	800a12c <_malloc_r>
 800a288:	4606      	mov	r6, r0
 800a28a:	b360      	cbz	r0, 800a2e6 <__ssputs_r+0xa2>
 800a28c:	6921      	ldr	r1, [r4, #16]
 800a28e:	464a      	mov	r2, r9
 800a290:	f000 fae8 	bl	800a864 <memcpy>
 800a294:	89a3      	ldrh	r3, [r4, #12]
 800a296:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a29a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a29e:	81a3      	strh	r3, [r4, #12]
 800a2a0:	6126      	str	r6, [r4, #16]
 800a2a2:	6165      	str	r5, [r4, #20]
 800a2a4:	444e      	add	r6, r9
 800a2a6:	eba5 0509 	sub.w	r5, r5, r9
 800a2aa:	6026      	str	r6, [r4, #0]
 800a2ac:	60a5      	str	r5, [r4, #8]
 800a2ae:	463e      	mov	r6, r7
 800a2b0:	42be      	cmp	r6, r7
 800a2b2:	d900      	bls.n	800a2b6 <__ssputs_r+0x72>
 800a2b4:	463e      	mov	r6, r7
 800a2b6:	6820      	ldr	r0, [r4, #0]
 800a2b8:	4632      	mov	r2, r6
 800a2ba:	4641      	mov	r1, r8
 800a2bc:	f000 faa8 	bl	800a810 <memmove>
 800a2c0:	68a3      	ldr	r3, [r4, #8]
 800a2c2:	1b9b      	subs	r3, r3, r6
 800a2c4:	60a3      	str	r3, [r4, #8]
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	4433      	add	r3, r6
 800a2ca:	6023      	str	r3, [r4, #0]
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	f000 fad4 	bl	800a880 <_realloc_r>
 800a2d8:	4606      	mov	r6, r0
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d1e0      	bne.n	800a2a0 <__ssputs_r+0x5c>
 800a2de:	6921      	ldr	r1, [r4, #16]
 800a2e0:	4650      	mov	r0, sl
 800a2e2:	f7ff feb7 	bl	800a054 <_free_r>
 800a2e6:	230c      	movs	r3, #12
 800a2e8:	f8ca 3000 	str.w	r3, [sl]
 800a2ec:	89a3      	ldrh	r3, [r4, #12]
 800a2ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2f2:	81a3      	strh	r3, [r4, #12]
 800a2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2f8:	e7e9      	b.n	800a2ce <__ssputs_r+0x8a>
	...

0800a2fc <_svfiprintf_r>:
 800a2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a300:	4698      	mov	r8, r3
 800a302:	898b      	ldrh	r3, [r1, #12]
 800a304:	061b      	lsls	r3, r3, #24
 800a306:	b09d      	sub	sp, #116	@ 0x74
 800a308:	4607      	mov	r7, r0
 800a30a:	460d      	mov	r5, r1
 800a30c:	4614      	mov	r4, r2
 800a30e:	d510      	bpl.n	800a332 <_svfiprintf_r+0x36>
 800a310:	690b      	ldr	r3, [r1, #16]
 800a312:	b973      	cbnz	r3, 800a332 <_svfiprintf_r+0x36>
 800a314:	2140      	movs	r1, #64	@ 0x40
 800a316:	f7ff ff09 	bl	800a12c <_malloc_r>
 800a31a:	6028      	str	r0, [r5, #0]
 800a31c:	6128      	str	r0, [r5, #16]
 800a31e:	b930      	cbnz	r0, 800a32e <_svfiprintf_r+0x32>
 800a320:	230c      	movs	r3, #12
 800a322:	603b      	str	r3, [r7, #0]
 800a324:	f04f 30ff 	mov.w	r0, #4294967295
 800a328:	b01d      	add	sp, #116	@ 0x74
 800a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	2340      	movs	r3, #64	@ 0x40
 800a330:	616b      	str	r3, [r5, #20]
 800a332:	2300      	movs	r3, #0
 800a334:	9309      	str	r3, [sp, #36]	@ 0x24
 800a336:	2320      	movs	r3, #32
 800a338:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a33c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a340:	2330      	movs	r3, #48	@ 0x30
 800a342:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a4e0 <_svfiprintf_r+0x1e4>
 800a346:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a34a:	f04f 0901 	mov.w	r9, #1
 800a34e:	4623      	mov	r3, r4
 800a350:	469a      	mov	sl, r3
 800a352:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a356:	b10a      	cbz	r2, 800a35c <_svfiprintf_r+0x60>
 800a358:	2a25      	cmp	r2, #37	@ 0x25
 800a35a:	d1f9      	bne.n	800a350 <_svfiprintf_r+0x54>
 800a35c:	ebba 0b04 	subs.w	fp, sl, r4
 800a360:	d00b      	beq.n	800a37a <_svfiprintf_r+0x7e>
 800a362:	465b      	mov	r3, fp
 800a364:	4622      	mov	r2, r4
 800a366:	4629      	mov	r1, r5
 800a368:	4638      	mov	r0, r7
 800a36a:	f7ff ff6b 	bl	800a244 <__ssputs_r>
 800a36e:	3001      	adds	r0, #1
 800a370:	f000 80a7 	beq.w	800a4c2 <_svfiprintf_r+0x1c6>
 800a374:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a376:	445a      	add	r2, fp
 800a378:	9209      	str	r2, [sp, #36]	@ 0x24
 800a37a:	f89a 3000 	ldrb.w	r3, [sl]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f000 809f 	beq.w	800a4c2 <_svfiprintf_r+0x1c6>
 800a384:	2300      	movs	r3, #0
 800a386:	f04f 32ff 	mov.w	r2, #4294967295
 800a38a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a38e:	f10a 0a01 	add.w	sl, sl, #1
 800a392:	9304      	str	r3, [sp, #16]
 800a394:	9307      	str	r3, [sp, #28]
 800a396:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a39a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a39c:	4654      	mov	r4, sl
 800a39e:	2205      	movs	r2, #5
 800a3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a4:	484e      	ldr	r0, [pc, #312]	@ (800a4e0 <_svfiprintf_r+0x1e4>)
 800a3a6:	f7f5 ffa3 	bl	80002f0 <memchr>
 800a3aa:	9a04      	ldr	r2, [sp, #16]
 800a3ac:	b9d8      	cbnz	r0, 800a3e6 <_svfiprintf_r+0xea>
 800a3ae:	06d0      	lsls	r0, r2, #27
 800a3b0:	bf44      	itt	mi
 800a3b2:	2320      	movmi	r3, #32
 800a3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3b8:	0711      	lsls	r1, r2, #28
 800a3ba:	bf44      	itt	mi
 800a3bc:	232b      	movmi	r3, #43	@ 0x2b
 800a3be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a3c2:	f89a 3000 	ldrb.w	r3, [sl]
 800a3c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3c8:	d015      	beq.n	800a3f6 <_svfiprintf_r+0xfa>
 800a3ca:	9a07      	ldr	r2, [sp, #28]
 800a3cc:	4654      	mov	r4, sl
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	f04f 0c0a 	mov.w	ip, #10
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a3da:	3b30      	subs	r3, #48	@ 0x30
 800a3dc:	2b09      	cmp	r3, #9
 800a3de:	d94b      	bls.n	800a478 <_svfiprintf_r+0x17c>
 800a3e0:	b1b0      	cbz	r0, 800a410 <_svfiprintf_r+0x114>
 800a3e2:	9207      	str	r2, [sp, #28]
 800a3e4:	e014      	b.n	800a410 <_svfiprintf_r+0x114>
 800a3e6:	eba0 0308 	sub.w	r3, r0, r8
 800a3ea:	fa09 f303 	lsl.w	r3, r9, r3
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	9304      	str	r3, [sp, #16]
 800a3f2:	46a2      	mov	sl, r4
 800a3f4:	e7d2      	b.n	800a39c <_svfiprintf_r+0xa0>
 800a3f6:	9b03      	ldr	r3, [sp, #12]
 800a3f8:	1d19      	adds	r1, r3, #4
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	9103      	str	r1, [sp, #12]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	bfbb      	ittet	lt
 800a402:	425b      	neglt	r3, r3
 800a404:	f042 0202 	orrlt.w	r2, r2, #2
 800a408:	9307      	strge	r3, [sp, #28]
 800a40a:	9307      	strlt	r3, [sp, #28]
 800a40c:	bfb8      	it	lt
 800a40e:	9204      	strlt	r2, [sp, #16]
 800a410:	7823      	ldrb	r3, [r4, #0]
 800a412:	2b2e      	cmp	r3, #46	@ 0x2e
 800a414:	d10a      	bne.n	800a42c <_svfiprintf_r+0x130>
 800a416:	7863      	ldrb	r3, [r4, #1]
 800a418:	2b2a      	cmp	r3, #42	@ 0x2a
 800a41a:	d132      	bne.n	800a482 <_svfiprintf_r+0x186>
 800a41c:	9b03      	ldr	r3, [sp, #12]
 800a41e:	1d1a      	adds	r2, r3, #4
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	9203      	str	r2, [sp, #12]
 800a424:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a428:	3402      	adds	r4, #2
 800a42a:	9305      	str	r3, [sp, #20]
 800a42c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a4f0 <_svfiprintf_r+0x1f4>
 800a430:	7821      	ldrb	r1, [r4, #0]
 800a432:	2203      	movs	r2, #3
 800a434:	4650      	mov	r0, sl
 800a436:	f7f5 ff5b 	bl	80002f0 <memchr>
 800a43a:	b138      	cbz	r0, 800a44c <_svfiprintf_r+0x150>
 800a43c:	9b04      	ldr	r3, [sp, #16]
 800a43e:	eba0 000a 	sub.w	r0, r0, sl
 800a442:	2240      	movs	r2, #64	@ 0x40
 800a444:	4082      	lsls	r2, r0
 800a446:	4313      	orrs	r3, r2
 800a448:	3401      	adds	r4, #1
 800a44a:	9304      	str	r3, [sp, #16]
 800a44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a450:	4824      	ldr	r0, [pc, #144]	@ (800a4e4 <_svfiprintf_r+0x1e8>)
 800a452:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a456:	2206      	movs	r2, #6
 800a458:	f7f5 ff4a 	bl	80002f0 <memchr>
 800a45c:	2800      	cmp	r0, #0
 800a45e:	d036      	beq.n	800a4ce <_svfiprintf_r+0x1d2>
 800a460:	4b21      	ldr	r3, [pc, #132]	@ (800a4e8 <_svfiprintf_r+0x1ec>)
 800a462:	bb1b      	cbnz	r3, 800a4ac <_svfiprintf_r+0x1b0>
 800a464:	9b03      	ldr	r3, [sp, #12]
 800a466:	3307      	adds	r3, #7
 800a468:	f023 0307 	bic.w	r3, r3, #7
 800a46c:	3308      	adds	r3, #8
 800a46e:	9303      	str	r3, [sp, #12]
 800a470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a472:	4433      	add	r3, r6
 800a474:	9309      	str	r3, [sp, #36]	@ 0x24
 800a476:	e76a      	b.n	800a34e <_svfiprintf_r+0x52>
 800a478:	fb0c 3202 	mla	r2, ip, r2, r3
 800a47c:	460c      	mov	r4, r1
 800a47e:	2001      	movs	r0, #1
 800a480:	e7a8      	b.n	800a3d4 <_svfiprintf_r+0xd8>
 800a482:	2300      	movs	r3, #0
 800a484:	3401      	adds	r4, #1
 800a486:	9305      	str	r3, [sp, #20]
 800a488:	4619      	mov	r1, r3
 800a48a:	f04f 0c0a 	mov.w	ip, #10
 800a48e:	4620      	mov	r0, r4
 800a490:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a494:	3a30      	subs	r2, #48	@ 0x30
 800a496:	2a09      	cmp	r2, #9
 800a498:	d903      	bls.n	800a4a2 <_svfiprintf_r+0x1a6>
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d0c6      	beq.n	800a42c <_svfiprintf_r+0x130>
 800a49e:	9105      	str	r1, [sp, #20]
 800a4a0:	e7c4      	b.n	800a42c <_svfiprintf_r+0x130>
 800a4a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4a6:	4604      	mov	r4, r0
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e7f0      	b.n	800a48e <_svfiprintf_r+0x192>
 800a4ac:	ab03      	add	r3, sp, #12
 800a4ae:	9300      	str	r3, [sp, #0]
 800a4b0:	462a      	mov	r2, r5
 800a4b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a4ec <_svfiprintf_r+0x1f0>)
 800a4b4:	a904      	add	r1, sp, #16
 800a4b6:	4638      	mov	r0, r7
 800a4b8:	f3af 8000 	nop.w
 800a4bc:	1c42      	adds	r2, r0, #1
 800a4be:	4606      	mov	r6, r0
 800a4c0:	d1d6      	bne.n	800a470 <_svfiprintf_r+0x174>
 800a4c2:	89ab      	ldrh	r3, [r5, #12]
 800a4c4:	065b      	lsls	r3, r3, #25
 800a4c6:	f53f af2d 	bmi.w	800a324 <_svfiprintf_r+0x28>
 800a4ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a4cc:	e72c      	b.n	800a328 <_svfiprintf_r+0x2c>
 800a4ce:	ab03      	add	r3, sp, #12
 800a4d0:	9300      	str	r3, [sp, #0]
 800a4d2:	462a      	mov	r2, r5
 800a4d4:	4b05      	ldr	r3, [pc, #20]	@ (800a4ec <_svfiprintf_r+0x1f0>)
 800a4d6:	a904      	add	r1, sp, #16
 800a4d8:	4638      	mov	r0, r7
 800a4da:	f000 f879 	bl	800a5d0 <_printf_i>
 800a4de:	e7ed      	b.n	800a4bc <_svfiprintf_r+0x1c0>
 800a4e0:	0800a9c8 	.word	0x0800a9c8
 800a4e4:	0800a9d2 	.word	0x0800a9d2
 800a4e8:	00000000 	.word	0x00000000
 800a4ec:	0800a245 	.word	0x0800a245
 800a4f0:	0800a9ce 	.word	0x0800a9ce

0800a4f4 <_printf_common>:
 800a4f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4f8:	4616      	mov	r6, r2
 800a4fa:	4698      	mov	r8, r3
 800a4fc:	688a      	ldr	r2, [r1, #8]
 800a4fe:	690b      	ldr	r3, [r1, #16]
 800a500:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a504:	4293      	cmp	r3, r2
 800a506:	bfb8      	it	lt
 800a508:	4613      	movlt	r3, r2
 800a50a:	6033      	str	r3, [r6, #0]
 800a50c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a510:	4607      	mov	r7, r0
 800a512:	460c      	mov	r4, r1
 800a514:	b10a      	cbz	r2, 800a51a <_printf_common+0x26>
 800a516:	3301      	adds	r3, #1
 800a518:	6033      	str	r3, [r6, #0]
 800a51a:	6823      	ldr	r3, [r4, #0]
 800a51c:	0699      	lsls	r1, r3, #26
 800a51e:	bf42      	ittt	mi
 800a520:	6833      	ldrmi	r3, [r6, #0]
 800a522:	3302      	addmi	r3, #2
 800a524:	6033      	strmi	r3, [r6, #0]
 800a526:	6825      	ldr	r5, [r4, #0]
 800a528:	f015 0506 	ands.w	r5, r5, #6
 800a52c:	d106      	bne.n	800a53c <_printf_common+0x48>
 800a52e:	f104 0a19 	add.w	sl, r4, #25
 800a532:	68e3      	ldr	r3, [r4, #12]
 800a534:	6832      	ldr	r2, [r6, #0]
 800a536:	1a9b      	subs	r3, r3, r2
 800a538:	42ab      	cmp	r3, r5
 800a53a:	dc26      	bgt.n	800a58a <_printf_common+0x96>
 800a53c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a540:	6822      	ldr	r2, [r4, #0]
 800a542:	3b00      	subs	r3, #0
 800a544:	bf18      	it	ne
 800a546:	2301      	movne	r3, #1
 800a548:	0692      	lsls	r2, r2, #26
 800a54a:	d42b      	bmi.n	800a5a4 <_printf_common+0xb0>
 800a54c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a550:	4641      	mov	r1, r8
 800a552:	4638      	mov	r0, r7
 800a554:	47c8      	blx	r9
 800a556:	3001      	adds	r0, #1
 800a558:	d01e      	beq.n	800a598 <_printf_common+0xa4>
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	6922      	ldr	r2, [r4, #16]
 800a55e:	f003 0306 	and.w	r3, r3, #6
 800a562:	2b04      	cmp	r3, #4
 800a564:	bf02      	ittt	eq
 800a566:	68e5      	ldreq	r5, [r4, #12]
 800a568:	6833      	ldreq	r3, [r6, #0]
 800a56a:	1aed      	subeq	r5, r5, r3
 800a56c:	68a3      	ldr	r3, [r4, #8]
 800a56e:	bf0c      	ite	eq
 800a570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a574:	2500      	movne	r5, #0
 800a576:	4293      	cmp	r3, r2
 800a578:	bfc4      	itt	gt
 800a57a:	1a9b      	subgt	r3, r3, r2
 800a57c:	18ed      	addgt	r5, r5, r3
 800a57e:	2600      	movs	r6, #0
 800a580:	341a      	adds	r4, #26
 800a582:	42b5      	cmp	r5, r6
 800a584:	d11a      	bne.n	800a5bc <_printf_common+0xc8>
 800a586:	2000      	movs	r0, #0
 800a588:	e008      	b.n	800a59c <_printf_common+0xa8>
 800a58a:	2301      	movs	r3, #1
 800a58c:	4652      	mov	r2, sl
 800a58e:	4641      	mov	r1, r8
 800a590:	4638      	mov	r0, r7
 800a592:	47c8      	blx	r9
 800a594:	3001      	adds	r0, #1
 800a596:	d103      	bne.n	800a5a0 <_printf_common+0xac>
 800a598:	f04f 30ff 	mov.w	r0, #4294967295
 800a59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a0:	3501      	adds	r5, #1
 800a5a2:	e7c6      	b.n	800a532 <_printf_common+0x3e>
 800a5a4:	18e1      	adds	r1, r4, r3
 800a5a6:	1c5a      	adds	r2, r3, #1
 800a5a8:	2030      	movs	r0, #48	@ 0x30
 800a5aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a5ae:	4422      	add	r2, r4
 800a5b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a5b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a5b8:	3302      	adds	r3, #2
 800a5ba:	e7c7      	b.n	800a54c <_printf_common+0x58>
 800a5bc:	2301      	movs	r3, #1
 800a5be:	4622      	mov	r2, r4
 800a5c0:	4641      	mov	r1, r8
 800a5c2:	4638      	mov	r0, r7
 800a5c4:	47c8      	blx	r9
 800a5c6:	3001      	adds	r0, #1
 800a5c8:	d0e6      	beq.n	800a598 <_printf_common+0xa4>
 800a5ca:	3601      	adds	r6, #1
 800a5cc:	e7d9      	b.n	800a582 <_printf_common+0x8e>
	...

0800a5d0 <_printf_i>:
 800a5d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5d4:	7e0f      	ldrb	r7, [r1, #24]
 800a5d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5d8:	2f78      	cmp	r7, #120	@ 0x78
 800a5da:	4691      	mov	r9, r2
 800a5dc:	4680      	mov	r8, r0
 800a5de:	460c      	mov	r4, r1
 800a5e0:	469a      	mov	sl, r3
 800a5e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5e6:	d807      	bhi.n	800a5f8 <_printf_i+0x28>
 800a5e8:	2f62      	cmp	r7, #98	@ 0x62
 800a5ea:	d80a      	bhi.n	800a602 <_printf_i+0x32>
 800a5ec:	2f00      	cmp	r7, #0
 800a5ee:	f000 80d2 	beq.w	800a796 <_printf_i+0x1c6>
 800a5f2:	2f58      	cmp	r7, #88	@ 0x58
 800a5f4:	f000 80b9 	beq.w	800a76a <_printf_i+0x19a>
 800a5f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a600:	e03a      	b.n	800a678 <_printf_i+0xa8>
 800a602:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a606:	2b15      	cmp	r3, #21
 800a608:	d8f6      	bhi.n	800a5f8 <_printf_i+0x28>
 800a60a:	a101      	add	r1, pc, #4	@ (adr r1, 800a610 <_printf_i+0x40>)
 800a60c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a610:	0800a669 	.word	0x0800a669
 800a614:	0800a67d 	.word	0x0800a67d
 800a618:	0800a5f9 	.word	0x0800a5f9
 800a61c:	0800a5f9 	.word	0x0800a5f9
 800a620:	0800a5f9 	.word	0x0800a5f9
 800a624:	0800a5f9 	.word	0x0800a5f9
 800a628:	0800a67d 	.word	0x0800a67d
 800a62c:	0800a5f9 	.word	0x0800a5f9
 800a630:	0800a5f9 	.word	0x0800a5f9
 800a634:	0800a5f9 	.word	0x0800a5f9
 800a638:	0800a5f9 	.word	0x0800a5f9
 800a63c:	0800a77d 	.word	0x0800a77d
 800a640:	0800a6a7 	.word	0x0800a6a7
 800a644:	0800a737 	.word	0x0800a737
 800a648:	0800a5f9 	.word	0x0800a5f9
 800a64c:	0800a5f9 	.word	0x0800a5f9
 800a650:	0800a79f 	.word	0x0800a79f
 800a654:	0800a5f9 	.word	0x0800a5f9
 800a658:	0800a6a7 	.word	0x0800a6a7
 800a65c:	0800a5f9 	.word	0x0800a5f9
 800a660:	0800a5f9 	.word	0x0800a5f9
 800a664:	0800a73f 	.word	0x0800a73f
 800a668:	6833      	ldr	r3, [r6, #0]
 800a66a:	1d1a      	adds	r2, r3, #4
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	6032      	str	r2, [r6, #0]
 800a670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a674:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a678:	2301      	movs	r3, #1
 800a67a:	e09d      	b.n	800a7b8 <_printf_i+0x1e8>
 800a67c:	6833      	ldr	r3, [r6, #0]
 800a67e:	6820      	ldr	r0, [r4, #0]
 800a680:	1d19      	adds	r1, r3, #4
 800a682:	6031      	str	r1, [r6, #0]
 800a684:	0606      	lsls	r6, r0, #24
 800a686:	d501      	bpl.n	800a68c <_printf_i+0xbc>
 800a688:	681d      	ldr	r5, [r3, #0]
 800a68a:	e003      	b.n	800a694 <_printf_i+0xc4>
 800a68c:	0645      	lsls	r5, r0, #25
 800a68e:	d5fb      	bpl.n	800a688 <_printf_i+0xb8>
 800a690:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a694:	2d00      	cmp	r5, #0
 800a696:	da03      	bge.n	800a6a0 <_printf_i+0xd0>
 800a698:	232d      	movs	r3, #45	@ 0x2d
 800a69a:	426d      	negs	r5, r5
 800a69c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a6a0:	4859      	ldr	r0, [pc, #356]	@ (800a808 <_printf_i+0x238>)
 800a6a2:	230a      	movs	r3, #10
 800a6a4:	e011      	b.n	800a6ca <_printf_i+0xfa>
 800a6a6:	6821      	ldr	r1, [r4, #0]
 800a6a8:	6833      	ldr	r3, [r6, #0]
 800a6aa:	0608      	lsls	r0, r1, #24
 800a6ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800a6b0:	d402      	bmi.n	800a6b8 <_printf_i+0xe8>
 800a6b2:	0649      	lsls	r1, r1, #25
 800a6b4:	bf48      	it	mi
 800a6b6:	b2ad      	uxthmi	r5, r5
 800a6b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a6ba:	4853      	ldr	r0, [pc, #332]	@ (800a808 <_printf_i+0x238>)
 800a6bc:	6033      	str	r3, [r6, #0]
 800a6be:	bf14      	ite	ne
 800a6c0:	230a      	movne	r3, #10
 800a6c2:	2308      	moveq	r3, #8
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a6ca:	6866      	ldr	r6, [r4, #4]
 800a6cc:	60a6      	str	r6, [r4, #8]
 800a6ce:	2e00      	cmp	r6, #0
 800a6d0:	bfa2      	ittt	ge
 800a6d2:	6821      	ldrge	r1, [r4, #0]
 800a6d4:	f021 0104 	bicge.w	r1, r1, #4
 800a6d8:	6021      	strge	r1, [r4, #0]
 800a6da:	b90d      	cbnz	r5, 800a6e0 <_printf_i+0x110>
 800a6dc:	2e00      	cmp	r6, #0
 800a6de:	d04b      	beq.n	800a778 <_printf_i+0x1a8>
 800a6e0:	4616      	mov	r6, r2
 800a6e2:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6e6:	fb03 5711 	mls	r7, r3, r1, r5
 800a6ea:	5dc7      	ldrb	r7, [r0, r7]
 800a6ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6f0:	462f      	mov	r7, r5
 800a6f2:	42bb      	cmp	r3, r7
 800a6f4:	460d      	mov	r5, r1
 800a6f6:	d9f4      	bls.n	800a6e2 <_printf_i+0x112>
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d10b      	bne.n	800a714 <_printf_i+0x144>
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	07df      	lsls	r7, r3, #31
 800a700:	d508      	bpl.n	800a714 <_printf_i+0x144>
 800a702:	6923      	ldr	r3, [r4, #16]
 800a704:	6861      	ldr	r1, [r4, #4]
 800a706:	4299      	cmp	r1, r3
 800a708:	bfde      	ittt	le
 800a70a:	2330      	movle	r3, #48	@ 0x30
 800a70c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a710:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a714:	1b92      	subs	r2, r2, r6
 800a716:	6122      	str	r2, [r4, #16]
 800a718:	f8cd a000 	str.w	sl, [sp]
 800a71c:	464b      	mov	r3, r9
 800a71e:	aa03      	add	r2, sp, #12
 800a720:	4621      	mov	r1, r4
 800a722:	4640      	mov	r0, r8
 800a724:	f7ff fee6 	bl	800a4f4 <_printf_common>
 800a728:	3001      	adds	r0, #1
 800a72a:	d14a      	bne.n	800a7c2 <_printf_i+0x1f2>
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295
 800a730:	b004      	add	sp, #16
 800a732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	f043 0320 	orr.w	r3, r3, #32
 800a73c:	6023      	str	r3, [r4, #0]
 800a73e:	4833      	ldr	r0, [pc, #204]	@ (800a80c <_printf_i+0x23c>)
 800a740:	2778      	movs	r7, #120	@ 0x78
 800a742:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	6831      	ldr	r1, [r6, #0]
 800a74a:	061f      	lsls	r7, r3, #24
 800a74c:	f851 5b04 	ldr.w	r5, [r1], #4
 800a750:	d402      	bmi.n	800a758 <_printf_i+0x188>
 800a752:	065f      	lsls	r7, r3, #25
 800a754:	bf48      	it	mi
 800a756:	b2ad      	uxthmi	r5, r5
 800a758:	6031      	str	r1, [r6, #0]
 800a75a:	07d9      	lsls	r1, r3, #31
 800a75c:	bf44      	itt	mi
 800a75e:	f043 0320 	orrmi.w	r3, r3, #32
 800a762:	6023      	strmi	r3, [r4, #0]
 800a764:	b11d      	cbz	r5, 800a76e <_printf_i+0x19e>
 800a766:	2310      	movs	r3, #16
 800a768:	e7ac      	b.n	800a6c4 <_printf_i+0xf4>
 800a76a:	4827      	ldr	r0, [pc, #156]	@ (800a808 <_printf_i+0x238>)
 800a76c:	e7e9      	b.n	800a742 <_printf_i+0x172>
 800a76e:	6823      	ldr	r3, [r4, #0]
 800a770:	f023 0320 	bic.w	r3, r3, #32
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	e7f6      	b.n	800a766 <_printf_i+0x196>
 800a778:	4616      	mov	r6, r2
 800a77a:	e7bd      	b.n	800a6f8 <_printf_i+0x128>
 800a77c:	6833      	ldr	r3, [r6, #0]
 800a77e:	6825      	ldr	r5, [r4, #0]
 800a780:	6961      	ldr	r1, [r4, #20]
 800a782:	1d18      	adds	r0, r3, #4
 800a784:	6030      	str	r0, [r6, #0]
 800a786:	062e      	lsls	r6, r5, #24
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	d501      	bpl.n	800a790 <_printf_i+0x1c0>
 800a78c:	6019      	str	r1, [r3, #0]
 800a78e:	e002      	b.n	800a796 <_printf_i+0x1c6>
 800a790:	0668      	lsls	r0, r5, #25
 800a792:	d5fb      	bpl.n	800a78c <_printf_i+0x1bc>
 800a794:	8019      	strh	r1, [r3, #0]
 800a796:	2300      	movs	r3, #0
 800a798:	6123      	str	r3, [r4, #16]
 800a79a:	4616      	mov	r6, r2
 800a79c:	e7bc      	b.n	800a718 <_printf_i+0x148>
 800a79e:	6833      	ldr	r3, [r6, #0]
 800a7a0:	1d1a      	adds	r2, r3, #4
 800a7a2:	6032      	str	r2, [r6, #0]
 800a7a4:	681e      	ldr	r6, [r3, #0]
 800a7a6:	6862      	ldr	r2, [r4, #4]
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f7f5 fda0 	bl	80002f0 <memchr>
 800a7b0:	b108      	cbz	r0, 800a7b6 <_printf_i+0x1e6>
 800a7b2:	1b80      	subs	r0, r0, r6
 800a7b4:	6060      	str	r0, [r4, #4]
 800a7b6:	6863      	ldr	r3, [r4, #4]
 800a7b8:	6123      	str	r3, [r4, #16]
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a7c0:	e7aa      	b.n	800a718 <_printf_i+0x148>
 800a7c2:	6923      	ldr	r3, [r4, #16]
 800a7c4:	4632      	mov	r2, r6
 800a7c6:	4649      	mov	r1, r9
 800a7c8:	4640      	mov	r0, r8
 800a7ca:	47d0      	blx	sl
 800a7cc:	3001      	adds	r0, #1
 800a7ce:	d0ad      	beq.n	800a72c <_printf_i+0x15c>
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	079b      	lsls	r3, r3, #30
 800a7d4:	d413      	bmi.n	800a7fe <_printf_i+0x22e>
 800a7d6:	68e0      	ldr	r0, [r4, #12]
 800a7d8:	9b03      	ldr	r3, [sp, #12]
 800a7da:	4298      	cmp	r0, r3
 800a7dc:	bfb8      	it	lt
 800a7de:	4618      	movlt	r0, r3
 800a7e0:	e7a6      	b.n	800a730 <_printf_i+0x160>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	4632      	mov	r2, r6
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	4640      	mov	r0, r8
 800a7ea:	47d0      	blx	sl
 800a7ec:	3001      	adds	r0, #1
 800a7ee:	d09d      	beq.n	800a72c <_printf_i+0x15c>
 800a7f0:	3501      	adds	r5, #1
 800a7f2:	68e3      	ldr	r3, [r4, #12]
 800a7f4:	9903      	ldr	r1, [sp, #12]
 800a7f6:	1a5b      	subs	r3, r3, r1
 800a7f8:	42ab      	cmp	r3, r5
 800a7fa:	dcf2      	bgt.n	800a7e2 <_printf_i+0x212>
 800a7fc:	e7eb      	b.n	800a7d6 <_printf_i+0x206>
 800a7fe:	2500      	movs	r5, #0
 800a800:	f104 0619 	add.w	r6, r4, #25
 800a804:	e7f5      	b.n	800a7f2 <_printf_i+0x222>
 800a806:	bf00      	nop
 800a808:	0800a9d9 	.word	0x0800a9d9
 800a80c:	0800a9ea 	.word	0x0800a9ea

0800a810 <memmove>:
 800a810:	4288      	cmp	r0, r1
 800a812:	b510      	push	{r4, lr}
 800a814:	eb01 0402 	add.w	r4, r1, r2
 800a818:	d902      	bls.n	800a820 <memmove+0x10>
 800a81a:	4284      	cmp	r4, r0
 800a81c:	4623      	mov	r3, r4
 800a81e:	d807      	bhi.n	800a830 <memmove+0x20>
 800a820:	1e43      	subs	r3, r0, #1
 800a822:	42a1      	cmp	r1, r4
 800a824:	d008      	beq.n	800a838 <memmove+0x28>
 800a826:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a82a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a82e:	e7f8      	b.n	800a822 <memmove+0x12>
 800a830:	4402      	add	r2, r0
 800a832:	4601      	mov	r1, r0
 800a834:	428a      	cmp	r2, r1
 800a836:	d100      	bne.n	800a83a <memmove+0x2a>
 800a838:	bd10      	pop	{r4, pc}
 800a83a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a83e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a842:	e7f7      	b.n	800a834 <memmove+0x24>

0800a844 <_sbrk_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4d06      	ldr	r5, [pc, #24]	@ (800a860 <_sbrk_r+0x1c>)
 800a848:	2300      	movs	r3, #0
 800a84a:	4604      	mov	r4, r0
 800a84c:	4608      	mov	r0, r1
 800a84e:	602b      	str	r3, [r5, #0]
 800a850:	f7f6 ff58 	bl	8001704 <_sbrk>
 800a854:	1c43      	adds	r3, r0, #1
 800a856:	d102      	bne.n	800a85e <_sbrk_r+0x1a>
 800a858:	682b      	ldr	r3, [r5, #0]
 800a85a:	b103      	cbz	r3, 800a85e <_sbrk_r+0x1a>
 800a85c:	6023      	str	r3, [r4, #0]
 800a85e:	bd38      	pop	{r3, r4, r5, pc}
 800a860:	24000ab0 	.word	0x24000ab0

0800a864 <memcpy>:
 800a864:	440a      	add	r2, r1
 800a866:	4291      	cmp	r1, r2
 800a868:	f100 33ff 	add.w	r3, r0, #4294967295
 800a86c:	d100      	bne.n	800a870 <memcpy+0xc>
 800a86e:	4770      	bx	lr
 800a870:	b510      	push	{r4, lr}
 800a872:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a87a:	4291      	cmp	r1, r2
 800a87c:	d1f9      	bne.n	800a872 <memcpy+0xe>
 800a87e:	bd10      	pop	{r4, pc}

0800a880 <_realloc_r>:
 800a880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a884:	4680      	mov	r8, r0
 800a886:	4615      	mov	r5, r2
 800a888:	460c      	mov	r4, r1
 800a88a:	b921      	cbnz	r1, 800a896 <_realloc_r+0x16>
 800a88c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a890:	4611      	mov	r1, r2
 800a892:	f7ff bc4b 	b.w	800a12c <_malloc_r>
 800a896:	b92a      	cbnz	r2, 800a8a4 <_realloc_r+0x24>
 800a898:	f7ff fbdc 	bl	800a054 <_free_r>
 800a89c:	2400      	movs	r4, #0
 800a89e:	4620      	mov	r0, r4
 800a8a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a4:	f000 f81a 	bl	800a8dc <_malloc_usable_size_r>
 800a8a8:	4285      	cmp	r5, r0
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	d802      	bhi.n	800a8b4 <_realloc_r+0x34>
 800a8ae:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8b2:	d8f4      	bhi.n	800a89e <_realloc_r+0x1e>
 800a8b4:	4629      	mov	r1, r5
 800a8b6:	4640      	mov	r0, r8
 800a8b8:	f7ff fc38 	bl	800a12c <_malloc_r>
 800a8bc:	4607      	mov	r7, r0
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d0ec      	beq.n	800a89c <_realloc_r+0x1c>
 800a8c2:	42b5      	cmp	r5, r6
 800a8c4:	462a      	mov	r2, r5
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	bf28      	it	cs
 800a8ca:	4632      	movcs	r2, r6
 800a8cc:	f7ff ffca 	bl	800a864 <memcpy>
 800a8d0:	4621      	mov	r1, r4
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	f7ff fbbe 	bl	800a054 <_free_r>
 800a8d8:	463c      	mov	r4, r7
 800a8da:	e7e0      	b.n	800a89e <_realloc_r+0x1e>

0800a8dc <_malloc_usable_size_r>:
 800a8dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e0:	1f18      	subs	r0, r3, #4
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	bfbc      	itt	lt
 800a8e6:	580b      	ldrlt	r3, [r1, r0]
 800a8e8:	18c0      	addlt	r0, r0, r3
 800a8ea:	4770      	bx	lr

0800a8ec <_init>:
 800a8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ee:	bf00      	nop
 800a8f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8f2:	bc08      	pop	{r3}
 800a8f4:	469e      	mov	lr, r3
 800a8f6:	4770      	bx	lr

0800a8f8 <_fini>:
 800a8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8fa:	bf00      	nop
 800a8fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fe:	bc08      	pop	{r3}
 800a900:	469e      	mov	lr, r3
 800a902:	4770      	bx	lr
