
Camera2LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb88  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000260  0800ee28  0800ee28  0000fe28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f088  0800f088  00010088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f090  0800f090  00010090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800f094  0800f094  00010094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800f098  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDescripSection 00000060  24000064  0800f0fc  00011064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  240000c4  0800f15c  000110c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a8c  24000124  0800f1bc  00011124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000bb0  0800f1bc  00011bb0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00011124  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b3e7  00000000  00000000  00011152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050c3  00000000  00000000  0003c539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d48  00000000  00000000  00041600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016cd  00000000  00000000  00043348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d4e4  00000000  00000000  00044a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cdf5  00000000  00000000  00081ef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001757e2  00000000  00000000  000aecee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002244d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081a4  00000000  00000000  00224514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0022c6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ee10 	.word	0x0800ee10

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800ee10 	.word	0x0800ee10

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <OV5640_WriteReg>:
		OV5640_FORMAT_RGB565
};

OV5640_CameraConfig* activeCameraConfigPtr = &activeCameraConfig;

HAL_StatusTypeDef OV5640_WriteReg(uint16_t regAddr, uint8_t data) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af04      	add	r7, sp, #16
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	80fb      	strh	r3, [r7, #6]
 80006c8:	4613      	mov	r3, r2
 80006ca:	717b      	strb	r3, [r7, #5]
	HAL_Delay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f002 f94f 	bl	8002970 <HAL_Delay>


	return HAL_I2C_Mem_Write(&hi2c1, OV5640_I2C_ADDR_W, regAddr,
 80006d2:	88fa      	ldrh	r2, [r7, #6]
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	9302      	str	r3, [sp, #8]
 80006da:	2301      	movs	r3, #1
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	1d7b      	adds	r3, r7, #5
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2302      	movs	r3, #2
 80006e4:	2178      	movs	r1, #120	@ 0x78
 80006e6:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <OV5640_WriteReg+0x3c>)
 80006e8:	f006 fbaa 	bl	8006e40 <HAL_I2C_Mem_Write>
 80006ec:	4603      	mov	r3, r0
			I2C_MEMADD_SIZE_16BIT,&data,1,HAL_MAX_DELAY);

}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	240002fc 	.word	0x240002fc

080006fc <OV5640_ReadReg>:

HAL_StatusTypeDef OV5640_ReadReg(uint16_t regAddr, uint8_t *dataPtr) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	@ 0x38
 8000700:	af04      	add	r7, sp, #16
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	80fb      	strh	r3, [r7, #6]
	char buff[25] = "readStart\r\n";
 8000708:	4a13      	ldr	r2, [pc, #76]	@ (8000758 <OV5640_ReadReg+0x5c>)
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000710:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000714:	f107 0318 	add.w	r3, r7, #24
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	731a      	strb	r2, [r3, #12]
	HAL_UART_Transmit(&huart3, &buff, sizeof(buff), HAL_MAX_DELAY);
 8000722:	f107 010c 	add.w	r1, r7, #12
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	2219      	movs	r2, #25
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <OV5640_ReadReg+0x60>)
 800072e:	f00c faad 	bl	800cc8c <HAL_UART_Transmit>
	return HAL_I2C_Mem_Read(&hi2c1, OV5640_I2C_ADDR_R, regAddr,
 8000732:	88fa      	ldrh	r2, [r7, #6]
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	9302      	str	r3, [sp, #8]
 800073a:	2301      	movs	r3, #1
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2302      	movs	r3, #2
 8000744:	2179      	movs	r1, #121	@ 0x79
 8000746:	4806      	ldr	r0, [pc, #24]	@ (8000760 <OV5640_ReadReg+0x64>)
 8000748:	f006 fc8e 	bl	8007068 <HAL_I2C_Mem_Read>
 800074c:	4603      	mov	r3, r0
			I2C_MEMADD_SIZE_16BIT, dataPtr, 1, HAL_MAX_DELAY);
}
 800074e:	4618      	mov	r0, r3
 8000750:	3728      	adds	r7, #40	@ 0x28
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	0800ee28 	.word	0x0800ee28
 800075c:	240004ec 	.word	0x240004ec
 8000760:	240002fc 	.word	0x240002fc

08000764 <OV5640_PowerUpSequence>:
		return HAL_ERROR;
	}

	return HAL_OK;
}
HAL_StatusTypeDef OV5640_PowerUpSequence(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 800076a:	200a      	movs	r0, #10
 800076c:	f002 f900 	bl	8002970 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2101      	movs	r1, #1
 8000774:	480f      	ldr	r0, [pc, #60]	@ (80007b4 <OV5640_PowerUpSequence+0x50>)
 8000776:	f006 faad 	bl	8006cd4 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800077a:	2005      	movs	r0, #5
 800077c:	f002 f8f8 	bl	8002970 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port, CAMERA_RST_Pin, GPIO_PIN_SET);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000786:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <OV5640_PowerUpSequence+0x54>)
 8000788:	f006 faa4 	bl	8006cd4 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800078c:	2014      	movs	r0, #20
 800078e:	f002 f8ef 	bl	8002970 <HAL_Delay>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000792:	2100      	movs	r1, #0
 8000794:	4809      	ldr	r0, [pc, #36]	@ (80007bc <OV5640_PowerUpSequence+0x58>)
 8000796:	f00a ffc3 	bl	800b720 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 800079a:	2005      	movs	r0, #5
 800079c:	f002 f8e8 	bl	8002970 <HAL_Delay>
	HAL_StatusTypeDef status = OV5640_ConfigureCamera();
 80007a0:	f000 f884 	bl	80008ac <OV5640_ConfigureCamera>
 80007a4:	4603      	mov	r3, r0
 80007a6:	71fb      	strb	r3, [r7, #7]
	return status;
 80007a8:	79fb      	ldrb	r3, [r7, #7]

}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	58020000 	.word	0x58020000
 80007b8:	58021800 	.word	0x58021800
 80007bc:	240004a0 	.word	0x240004a0

080007c0 <OV5640_SetResolution>:
HAL_StatusTypeDef OV5640_SetResolution(void){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	71fb      	strb	r3, [r7, #7]
	const uint16_t selectedWidth =OV5640_Resolutions[activeCameraConfigPtr->resolution].width;
 80007ca:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <OV5640_SetResolution+0xa0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <OV5640_SetResolution+0xa4>)
 80007d4:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80007d8:	80bb      	strh	r3, [r7, #4]
	const uint16_t selectedHeight = OV5640_Resolutions[activeCameraConfigPtr->resolution].height;
 80007da:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <OV5640_SetResolution+0xa0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4a20      	ldr	r2, [pc, #128]	@ (8000864 <OV5640_SetResolution+0xa4>)
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	885b      	ldrh	r3, [r3, #2]
 80007e8:	807b      	strh	r3, [r7, #2]
	const uint8_t heightBit_H = selectedHeight>>8;
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	707b      	strb	r3, [r7, #1]
	status |= OV5640_WriteReg(OV5640_REG_OUT_WIDTH_H, (uint8_t)selectedWidth>>8);
 80007f2:	88bb      	ldrh	r3, [r7, #4]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	121b      	asrs	r3, r3, #8
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	f643 0008 	movw	r0, #14344	@ 0x3808
 8000800:	f7ff ff5c 	bl	80006bc <OV5640_WriteReg>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	4313      	orrs	r3, r2
 800080c:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_WIDTH_L, (uint8_t)selectedWidth&0xFF);
 800080e:	88bb      	ldrh	r3, [r7, #4]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	f643 0009 	movw	r0, #14345	@ 0x3809
 8000818:	f7ff ff50 	bl	80006bc <OV5640_WriteReg>
 800081c:	4603      	mov	r3, r0
 800081e:	461a      	mov	r2, r3
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4313      	orrs	r3, r2
 8000824:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_HEIGHT_H, heightBit_H);
 8000826:	787b      	ldrb	r3, [r7, #1]
 8000828:	4619      	mov	r1, r3
 800082a:	f643 000a 	movw	r0, #14346	@ 0x380a
 800082e:	f7ff ff45 	bl	80006bc <OV5640_WriteReg>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4313      	orrs	r3, r2
 800083a:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_HEIGHT_L, (uint8_t)selectedHeight&0xFF);
 800083c:	887b      	ldrh	r3, [r7, #2]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	f643 000b 	movw	r0, #14347	@ 0x380b
 8000846:	f7ff ff39 	bl	80006bc <OV5640_WriteReg>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4313      	orrs	r3, r2
 8000852:	71fb      	strb	r3, [r7, #7]
	return status;
 8000854:	79fb      	ldrb	r3, [r7, #7]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	24000000 	.word	0x24000000
 8000864:	0800eff8 	.word	0x0800eff8

08000868 <OV5640_SetFormat>:
HAL_StatusTypeDef OV5640_SetFormat(void){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
	uint8_t formatData= OV5640_Formats[activeCameraConfigPtr->pixelFormat].formatValue;
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <OV5640_SetFormat+0x3c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	785b      	ldrb	r3, [r3, #1]
 8000878:	461a      	mov	r2, r3
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <OV5640_SetFormat+0x40>)
 800087c:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000880:	71bb      	strb	r3, [r7, #6]
	status |= OV5640_WriteReg(OV5640_REG_FORMAT_CTRL, formatData);
 8000882:	79bb      	ldrb	r3, [r7, #6]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 800088a:	f7ff ff17 	bl	80006bc <OV5640_WriteReg>
 800088e:	4603      	mov	r3, r0
 8000890:	461a      	mov	r2, r3
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4313      	orrs	r3, r2
 8000896:	71fb      	strb	r3, [r7, #7]
	return status;
 8000898:	79fb      	ldrb	r3, [r7, #7]


}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	24000000 	.word	0x24000000
 80008a8:	0800f004 	.word	0x0800f004

080008ac <OV5640_ConfigureCamera>:
HAL_StatusTypeDef OV5640_ConfigureCamera(void){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	@ 0x70
 80008b0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t resetValue = 0x0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	OV5640_ReadReg(OV5640_SOFTWARE_RESET, &resetValue);
 80008be:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 80008c2:	4619      	mov	r1, r3
 80008c4:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008c8:	f7ff ff18 	bl	80006fc <OV5640_ReadReg>
	resetValue |=0x80;
 80008cc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80008d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	OV5640_WriteReg(OV5640_SOFTWARE_RESET, resetValue);
 80008da:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80008de:	4619      	mov	r1, r3
 80008e0:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008e4:	f7ff feea 	bl	80006bc <OV5640_WriteReg>
	HAL_Delay(10);
 80008e8:	200a      	movs	r0, #10
 80008ea:	f002 f841 	bl	8002970 <HAL_Delay>
	resetValue &= ~0x80;
 80008ee:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80008f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	OV5640_WriteReg(OV5640_SOFTWARE_RESET, resetValue);
 80008fc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000900:	4619      	mov	r1, r3
 8000902:	f243 0008 	movw	r0, #12296	@ 0x3008
 8000906:	f7ff fed9 	bl	80006bc <OV5640_WriteReg>
	HAL_Delay(100);
 800090a:	2064      	movs	r0, #100	@ 0x64
 800090c:	f002 f830 	bl	8002970 <HAL_Delay>

	status |= OV5640_SetResolution();
 8000910:	f7ff ff56 	bl	80007c0 <OV5640_SetResolution>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800091c:	4313      	orrs	r3, r2
 800091e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	status |= OV5640_SetFormat();
 8000922:	f7ff ffa1 	bl	8000868 <OV5640_SetFormat>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800092e:	4313      	orrs	r3, r2
 8000930:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	status |= OV5640_WriteReg(OV5640_POLARITY_CTRL, OV5640_POLARITY);
 8000934:	2122      	movs	r1, #34	@ 0x22
 8000936:	f244 7040 	movw	r0, #18240	@ 0x4740
 800093a:	f7ff febf 	bl	80006bc <OV5640_WriteReg>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000946:	4313      	orrs	r3, r2
 8000948:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	status |= OV5640_WriteReg(0x3017, 0xFF);
 800094c:	21ff      	movs	r1, #255	@ 0xff
 800094e:	f243 0017 	movw	r0, #12311	@ 0x3017
 8000952:	f7ff feb3 	bl	80006bc <OV5640_WriteReg>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800095e:	4313      	orrs	r3, r2
 8000960:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t heightH = 0, heightL = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 800096a:	2300      	movs	r3, #0
 800096c:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
	OV5640_ReadReg(OV5640_REG_OUT_HEIGHT_H, &heightH);
 8000970:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 8000974:	4619      	mov	r1, r3
 8000976:	f643 000a 	movw	r0, #14346	@ 0x380a
 800097a:	f7ff febf 	bl	80006fc <OV5640_ReadReg>
	OV5640_ReadReg(OV5640_REG_OUT_HEIGHT_L, &heightL);
 800097e:	f107 0369 	add.w	r3, r7, #105	@ 0x69
 8000982:	4619      	mov	r1, r3
 8000984:	f643 000b 	movw	r0, #14347	@ 0x380b
 8000988:	f7ff feb8 	bl	80006fc <OV5640_ReadReg>
	char buff3[30];
	sprintf(buff3, "Height H: %d, L: %d\n\r", heightH, heightL);
 800098c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000990:	461a      	mov	r2, r3
 8000992:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000996:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800099a:	4947      	ldr	r1, [pc, #284]	@ (8000ab8 <OV5640_ConfigureCamera+0x20c>)
 800099c:	f00d fd98 	bl	800e4d0 <siprintf>
	HAL_UART_Transmit(&huart3, buff3, strlen(buff3), HAL_MAX_DELAY);
 80009a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fc9b 	bl	80002e0 <strlen>
 80009aa:	4603      	mov	r3, r0
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	4841      	ldr	r0, [pc, #260]	@ (8000abc <OV5640_ConfigureCamera+0x210>)
 80009b8:	f00c f968 	bl	800cc8c <HAL_UART_Transmit>
	uint8_t pol1;
	OV5640_ReadReg(OV5640_REG_FORMAT_CTRL, &pol1);
 80009bc:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 80009c6:	f7ff fe99 	bl	80006fc <OV5640_ReadReg>
	char buff2[20];
	sprintf(buff2, "format: : %d\n\r", pol1);
 80009ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80009ce:	461a      	mov	r2, r3
 80009d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009d4:	493a      	ldr	r1, [pc, #232]	@ (8000ac0 <OV5640_ConfigureCamera+0x214>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	f00d fd7a 	bl	800e4d0 <siprintf>
	HAL_UART_Transmit(&huart3, buff2, strlen(buff2), HAL_MAX_DELAY);
 80009dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fc7d 	bl	80002e0 <strlen>
 80009e6:	4603      	mov	r3, r0
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	4832      	ldr	r0, [pc, #200]	@ (8000abc <OV5640_ConfigureCamera+0x210>)
 80009f4:	f00c f94a 	bl	800cc8c <HAL_UART_Transmit>
	OV5640_WriteReg(0x503D, 0x00);
 80009f8:	2100      	movs	r1, #0
 80009fa:	f245 003d 	movw	r0, #20541	@ 0x503d
 80009fe:	f7ff fe5d 	bl	80006bc <OV5640_WriteReg>
	HAL_Delay(10);
 8000a02:	200a      	movs	r0, #10
 8000a04:	f001 ffb4 	bl	8002970 <HAL_Delay>
	uint16_t result = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	uint8_t resultL = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t resultH = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	//write format for format control register to make format rgb565
	char buff5[20];
	OV5640_ReadReg(OV5640_REG_OUT_HEIGHT_L, &resultL);
 8000a1a:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f643 000b 	movw	r0, #14347	@ 0x380b
 8000a24:	f7ff fe6a 	bl	80006fc <OV5640_ReadReg>
	OV5640_ReadReg(OV5640_REG_OUT_HEIGHT_H, &resultH);
 8000a28:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f643 000a 	movw	r0, #14346	@ 0x380a
 8000a32:	f7ff fe63 	bl	80006fc <OV5640_ReadReg>
	result = (resultH<<8)+resultL;
 8000a36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000a42:	4413      	add	r3, r2
 8000a44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

	sprintf(buff5, "result height: %d\n\r", result);
 8000a48:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	491c      	ldr	r1, [pc, #112]	@ (8000ac4 <OV5640_ConfigureCamera+0x218>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f00d fd3c 	bl	800e4d0 <siprintf>
	HAL_UART_Transmit(&huart3, buff5, strlen(buff5), HAL_MAX_DELAY);
 8000a58:	f107 0318 	add.w	r3, r7, #24
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fc3f 	bl	80002e0 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	f107 0118 	add.w	r1, r7, #24
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	4813      	ldr	r0, [pc, #76]	@ (8000abc <OV5640_ConfigureCamera+0x210>)
 8000a70:	f00c f90c 	bl	800cc8c <HAL_UART_Transmit>
	uint8_t result1 = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	75fb      	strb	r3, [r7, #23]
	OV5640_ReadReg(OV5640_REG_OUT_WIDTH_L, &result1);
 8000a78:	f107 0317 	add.w	r3, r7, #23
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f643 0009 	movw	r0, #14345	@ 0x3809
 8000a82:	f7ff fe3b 	bl	80006fc <OV5640_ReadReg>
	char buff4[20];
	sprintf(buff4, "width: %d\n\r", result1);
 8000a86:	7dfb      	ldrb	r3, [r7, #23]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	490e      	ldr	r1, [pc, #56]	@ (8000ac8 <OV5640_ConfigureCamera+0x21c>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f00d fd1e 	bl	800e4d0 <siprintf>

	HAL_UART_Transmit(&huart3, buff4, strlen(buff4), HAL_MAX_DELAY);
 8000a94:	463b      	mov	r3, r7
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fc22 	bl	80002e0 <strlen>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4639      	mov	r1, r7
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <OV5640_ConfigureCamera+0x210>)
 8000aa8:	f00c f8f0 	bl	800cc8c <HAL_UART_Transmit>
	return status;
 8000aac:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f



}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3770      	adds	r7, #112	@ 0x70
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	0800ee44 	.word	0x0800ee44
 8000abc:	240004ec 	.word	0x240004ec
 8000ac0:	0800ee5c 	.word	0x0800ee5c
 8000ac4:	0800ee6c 	.word	0x0800ee6c
 8000ac8:	0800ee80 	.word	0x0800ee80

08000acc <frameCapture>:
void frameCapture(void){
 8000acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ace:	b093      	sub	sp, #76	@ 0x4c
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	466b      	mov	r3, sp
 8000ad4:	461e      	mov	r6, r3
	__HAL_RCC_DCMI_CLK_ENABLE();
 8000ad6:	4b72      	ldr	r3, [pc, #456]	@ (8000ca0 <frameCapture+0x1d4>)
 8000ad8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000adc:	4a70      	ldr	r2, [pc, #448]	@ (8000ca0 <frameCapture+0x1d4>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000ae6:	4b6e      	ldr	r3, [pc, #440]	@ (8000ca0 <frameCapture+0x1d4>)
 8000ae8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

	const uint16_t width = OV5640_Resolutions[activeCameraConfigPtr->resolution].width;
 8000af4:	4b6b      	ldr	r3, [pc, #428]	@ (8000ca4 <frameCapture+0x1d8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	4b6a      	ldr	r3, [pc, #424]	@ (8000ca8 <frameCapture+0x1dc>)
 8000afe:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000b02:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	const uint16_t height = OV5640_Resolutions[activeCameraConfigPtr->resolution].height;
 8000b06:	4b67      	ldr	r3, [pc, #412]	@ (8000ca4 <frameCapture+0x1d8>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	4a66      	ldr	r2, [pc, #408]	@ (8000ca8 <frameCapture+0x1dc>)
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	4413      	add	r3, r2
 8000b12:	885b      	ldrh	r3, [r3, #2]
 8000b14:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	const uint8_t pixelSize = OV5640_Formats[activeCameraConfigPtr->pixelFormat].bytesPerPixel;
 8000b18:	4b62      	ldr	r3, [pc, #392]	@ (8000ca4 <frameCapture+0x1d8>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	785b      	ldrb	r3, [r3, #1]
 8000b1e:	4a63      	ldr	r2, [pc, #396]	@ (8000cac <frameCapture+0x1e0>)
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	885b      	ldrh	r3, [r3, #2]
 8000b26:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f


	uint32_t frameBuffer[width*height/2];
 8000b2a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000b2e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000b32:	fb02 f303 	mul.w	r3, r2, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	da00      	bge.n	8000b3c <frameCapture+0x70>
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	105b      	asrs	r3, r3, #1
 8000b3e:	3b01      	subs	r3, #1
 8000b40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000b46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000b4a:	fb02 f303 	mul.w	r3, r2, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	da00      	bge.n	8000b54 <frameCapture+0x88>
 8000b52:	3301      	adds	r3, #1
 8000b54:	105b      	asrs	r3, r3, #1
 8000b56:	461a      	mov	r2, r3
 8000b58:	2300      	movs	r3, #0
 8000b5a:	4614      	mov	r4, r2
 8000b5c:	461d      	mov	r5, r3
 8000b5e:	f04f 0200 	mov.w	r2, #0
 8000b62:	f04f 0300 	mov.w	r3, #0
 8000b66:	016b      	lsls	r3, r5, #5
 8000b68:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000b6c:	0162      	lsls	r2, r4, #5
 8000b6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000b72:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000b76:	fb02 f303 	mul.w	r3, r2, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000b80:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000b84:	fb02 f303 	mul.w	r3, r2, r3
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	da00      	bge.n	8000b8e <frameCapture+0xc2>
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	105b      	asrs	r3, r3, #1
 8000b90:	461a      	mov	r2, r3
 8000b92:	2300      	movs	r3, #0
 8000b94:	4610      	mov	r0, r2
 8000b96:	4619      	mov	r1, r3
 8000b98:	f04f 0200 	mov.w	r2, #0
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	014b      	lsls	r3, r1, #5
 8000ba2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000ba6:	0142      	lsls	r2, r0, #5
 8000ba8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000bac:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000bb0:	fb02 f303 	mul.w	r3, r2, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	da00      	bge.n	8000bba <frameCapture+0xee>
 8000bb8:	3301      	adds	r3, #1
 8000bba:	105b      	asrs	r3, r3, #1
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	3307      	adds	r3, #7
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	00db      	lsls	r3, r3, #3
 8000bc4:	ebad 0d03 	sub.w	sp, sp, r3
 8000bc8:	466b      	mov	r3, sp
 8000bca:	3303      	adds	r3, #3
 8000bcc:	089b      	lsrs	r3, r3, #2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	637b      	str	r3, [r7, #52]	@ 0x34




	HAL_UART_Transmit(&huart3, "STARTING DMA Capture\r\n", 25, HAL_MAX_DELAY);
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	2219      	movs	r2, #25
 8000bd8:	4935      	ldr	r1, [pc, #212]	@ (8000cb0 <frameCapture+0x1e4>)
 8000bda:	4836      	ldr	r0, [pc, #216]	@ (8000cb4 <frameCapture+0x1e8>)
 8000bdc:	f00c f856 	bl	800cc8c <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t) frameBuffer, (width*height)/2);
 8000be0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000be2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000be6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000bea:	fb02 f303 	mul.w	r3, r2, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	da00      	bge.n	8000bf4 <frameCapture+0x128>
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	105b      	asrs	r3, r3, #1
 8000bf6:	460a      	mov	r2, r1
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	482f      	ldr	r0, [pc, #188]	@ (8000cb8 <frameCapture+0x1ec>)
 8000bfc:	f002 f89c 	bl	8002d38 <HAL_DCMI_Start_DMA>
 8000c00:	4603      	mov	r3, r0
 8000c02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	if (status!=HAL_OK){
 8000c06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d014      	beq.n	8000c38 <frameCapture+0x16c>
		char errorBuff[40];
		sprintf(errorBuff, "DMA START ERROR: %d\r\n", status);
 8000c0e:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	4929      	ldr	r1, [pc, #164]	@ (8000cbc <frameCapture+0x1f0>)
 8000c16:	4618      	mov	r0, r3
 8000c18:	f00d fc5a 	bl	800e4d0 <siprintf>
		HAL_UART_Transmit(&huart3, errorBuff, strlen(errorBuff), HAL_MAX_DELAY);
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fb5e 	bl	80002e0 <strlen>
 8000c24:	4603      	mov	r3, r0
 8000c26:	b29a      	uxth	r2, r3
 8000c28:	1d39      	adds	r1, r7, #4
 8000c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2e:	4821      	ldr	r0, [pc, #132]	@ (8000cb4 <frameCapture+0x1e8>)
 8000c30:	f00c f82c 	bl	800cc8c <HAL_UART_Transmit>
 8000c34:	46b5      	mov	sp, r6
 8000c36:	e02f      	b.n	8000c98 <frameCapture+0x1cc>
		return;
	}
	HAL_Delay(500);
 8000c38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c3c:	f001 fe98 	bl	8002970 <HAL_Delay>

	for (int i= 0; i<10 && sizeof(frameBuffer); i++){
 8000c40:	2300      	movs	r3, #0
 8000c42:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c44:	e017      	b.n	8000c76 <frameCapture+0x1aa>
		char pixelBuff[40];
		sprintf(pixelBuff, "DMA Pixel %d 0x%lX\r\n", i, frameBuffer[i]);
 8000c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c4e:	1d38      	adds	r0, r7, #4
 8000c50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000c52:	491b      	ldr	r1, [pc, #108]	@ (8000cc0 <frameCapture+0x1f4>)
 8000c54:	f00d fc3c 	bl	800e4d0 <siprintf>
		HAL_UART_Transmit(&huart3, pixelBuff, strlen(pixelBuff), HAL_MAX_DELAY);
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fb40 	bl	80002e0 <strlen>
 8000c60:	4603      	mov	r3, r0
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	1d39      	adds	r1, r7, #4
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	4812      	ldr	r0, [pc, #72]	@ (8000cb4 <frameCapture+0x1e8>)
 8000c6c:	f00c f80e 	bl	800cc8c <HAL_UART_Transmit>
	for (int i= 0; i<10 && sizeof(frameBuffer); i++){
 8000c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c72:	3301      	adds	r3, #1
 8000c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000c78:	2b09      	cmp	r3, #9
 8000c7a:	dc0c      	bgt.n	8000c96 <frameCapture+0x1ca>
	uint32_t frameBuffer[width*height/2];
 8000c7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8000c80:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000c84:	fb02 f303 	mul.w	r3, r2, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	da00      	bge.n	8000c8e <frameCapture+0x1c2>
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	105b      	asrs	r3, r3, #1
	for (int i= 0; i<10 && sizeof(frameBuffer); i++){
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d1d7      	bne.n	8000c46 <frameCapture+0x17a>
 8000c96:	46b5      	mov	sp, r6

	}

}
 8000c98:	374c      	adds	r7, #76	@ 0x4c
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	58024400 	.word	0x58024400
 8000ca4:	24000000 	.word	0x24000000
 8000ca8:	0800eff8 	.word	0x0800eff8
 8000cac:	0800f004 	.word	0x0800f004
 8000cb0:	0800ee8c 	.word	0x0800ee8c
 8000cb4:	240004ec 	.word	0x240004ec
 8000cb8:	24000144 	.word	0x24000144
 8000cbc:	0800eea4 	.word	0x0800eea4
 8000cc0:	0800eebc 	.word	0x0800eebc

08000cc4 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	@ (8000d24 <MX_DCMI_Init+0x60>)
 8000cca:	4a17      	ldr	r2, [pc, #92]	@ (8000d28 <MX_DCMI_Init+0x64>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <MX_DCMI_Init+0x60>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000cd4:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <MX_DCMI_Init+0x60>)
 8000cd6:	2220      	movs	r2, #32
 8000cd8:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000cda:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <MX_DCMI_Init+0x60>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000ce0:	4b10      	ldr	r3, [pc, #64]	@ (8000d24 <MX_DCMI_Init+0x60>)
 8000ce2:	2240      	movs	r2, #64	@ 0x40
 8000ce4:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <MX_DCMI_Init+0x60>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000cec:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <MX_DCMI_Init+0x60>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <MX_DCMI_Init+0x60>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <MX_DCMI_Init+0x60>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	@ (8000d24 <MX_DCMI_Init+0x60>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d04:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <MX_DCMI_Init+0x60>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <MX_DCMI_Init+0x60>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	@ (8000d24 <MX_DCMI_Init+0x60>)
 8000d12:	f001 ff97 	bl	8002c44 <HAL_DCMI_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000d1c:	f001 f846 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	24000144 	.word	0x24000144
 8000d28:	48020000 	.word	0x48020000

08000d2c <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08e      	sub	sp, #56	@ 0x38
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a81      	ldr	r2, [pc, #516]	@ (8000f50 <HAL_DCMI_MspInit+0x224>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	f040 80fc 	bne.w	8000f48 <HAL_DCMI_MspInit+0x21c>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000d50:	4b80      	ldr	r3, [pc, #512]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000d52:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000d56:	4a7f      	ldr	r2, [pc, #508]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000d60:	4b7c      	ldr	r3, [pc, #496]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000d62:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	623b      	str	r3, [r7, #32]
 8000d6c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d6e:	4b79      	ldr	r3, [pc, #484]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d74:	4a77      	ldr	r2, [pc, #476]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000d76:	f043 0310 	orr.w	r3, r3, #16
 8000d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d7e:	4b75      	ldr	r3, [pc, #468]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d84:	f003 0310 	and.w	r3, r3, #16
 8000d88:	61fb      	str	r3, [r7, #28]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8c:	4b71      	ldr	r3, [pc, #452]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d92:	4a70      	ldr	r2, [pc, #448]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d9c:	4b6d      	ldr	r3, [pc, #436]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
 8000da8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000daa:	4b6a      	ldr	r3, [pc, #424]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db0:	4a68      	ldr	r2, [pc, #416]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dba:	4b66      	ldr	r3, [pc, #408]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc8:	4b62      	ldr	r3, [pc, #392]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dce:	4a61      	ldr	r2, [pc, #388]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd8:	4b5e      	ldr	r3, [pc, #376]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000dda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	4b5b      	ldr	r3, [pc, #364]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dec:	4a59      	ldr	r2, [pc, #356]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000dee:	f043 0302 	orr.w	r3, r3, #2
 8000df2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000df6:	4b57      	ldr	r3, [pc, #348]	@ (8000f54 <HAL_DCMI_MspInit+0x228>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000e04:	2370      	movs	r3, #112	@ 0x70
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e14:	230d      	movs	r3, #13
 8000e16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	484e      	ldr	r0, [pc, #312]	@ (8000f58 <HAL_DCMI_MspInit+0x22c>)
 8000e20:	f005 fda8 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e24:	2310      	movs	r3, #16
 8000e26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e34:	230d      	movs	r3, #13
 8000e36:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4847      	ldr	r0, [pc, #284]	@ (8000f5c <HAL_DCMI_MspInit+0x230>)
 8000e40:	f005 fd98 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e44:	2340      	movs	r3, #64	@ 0x40
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e54:	230d      	movs	r3, #13
 8000e56:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	483f      	ldr	r0, [pc, #252]	@ (8000f5c <HAL_DCMI_MspInit+0x230>)
 8000e60:	f005 fd88 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000e64:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e76:	230d      	movs	r3, #13
 8000e78:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4837      	ldr	r0, [pc, #220]	@ (8000f60 <HAL_DCMI_MspInit+0x234>)
 8000e82:	f005 fd77 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e86:	2308      	movs	r3, #8
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000e96:	230d      	movs	r3, #13
 8000e98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4830      	ldr	r0, [pc, #192]	@ (8000f64 <HAL_DCMI_MspInit+0x238>)
 8000ea2:	f005 fd67 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000eb6:	230d      	movs	r3, #13
 8000eb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4829      	ldr	r0, [pc, #164]	@ (8000f68 <HAL_DCMI_MspInit+0x23c>)
 8000ec2:	f005 fd57 	bl	8006974 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8000ec6:	4b29      	ldr	r3, [pc, #164]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000ec8:	4a29      	ldr	r2, [pc, #164]	@ (8000f70 <HAL_DCMI_MspInit+0x244>)
 8000eca:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000ecc:	4b27      	ldr	r3, [pc, #156]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000ece:	224b      	movs	r2, #75	@ 0x4b
 8000ed0:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ed2:	4b26      	ldr	r3, [pc, #152]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed8:	4b24      	ldr	r3, [pc, #144]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000ede:	4b23      	ldr	r3, [pc, #140]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000ee0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ee4:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ee6:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000ee8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000eec:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000eee:	4b1f      	ldr	r3, [pc, #124]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000ef0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ef4:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000efc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000efe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f02:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000f06:	2204      	movs	r2, #4
 8000f08:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f0a:	4b18      	ldr	r3, [pc, #96]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f10:	4b16      	ldr	r3, [pc, #88]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f16:	4b15      	ldr	r3, [pc, #84]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000f1c:	4813      	ldr	r0, [pc, #76]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000f1e:	f002 f927 	bl	8003170 <HAL_DMA_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_DCMI_MspInit+0x200>
    {
      Error_Handler();
 8000f28:	f000 ff40 	bl	8001dac <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000f30:	649a      	str	r2, [r3, #72]	@ 0x48
 8000f32:	4a0e      	ldr	r2, [pc, #56]	@ (8000f6c <HAL_DCMI_MspInit+0x240>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	204e      	movs	r0, #78	@ 0x4e
 8000f3e:	f001 fe4c 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000f42:	204e      	movs	r0, #78	@ 0x4e
 8000f44:	f001 fe63 	bl	8002c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000f48:	bf00      	nop
 8000f4a:	3738      	adds	r7, #56	@ 0x38
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	48020000 	.word	0x48020000
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58021000 	.word	0x58021000
 8000f5c:	58020000 	.word	0x58020000
 8000f60:	58020800 	.word	0x58020800
 8000f64:	58020c00 	.word	0x58020c00
 8000f68:	58020400 	.word	0x58020400
 8000f6c:	24000194 	.word	0x24000194
 8000f70:	40020010 	.word	0x40020010

08000f74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <MX_DMA_Init+0x4c>)
 8000f7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f80:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc0 <MX_DMA_Init+0x4c>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <MX_DMA_Init+0x4c>)
 8000f8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	200b      	movs	r0, #11
 8000f9e:	f001 fe1c 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fa2:	200b      	movs	r0, #11
 8000fa4:	f001 fe33 	bl	8002c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2100      	movs	r1, #0
 8000fac:	200c      	movs	r0, #12
 8000fae:	f001 fe14 	bl	8002bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fb2:	200c      	movs	r0, #12
 8000fb4:	f001 fe2b 	bl	8002c0e <HAL_NVIC_EnableIRQ>

}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	58024400 	.word	0x58024400

08000fc4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <MX_ETH_Init+0x80>)
 8000fca:	4a1f      	ldr	r2, [pc, #124]	@ (8001048 <MX_ETH_Init+0x84>)
 8000fcc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000fce:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <MX_ETH_Init+0x88>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800104c <MX_ETH_Init+0x88>)
 8000fd6:	2280      	movs	r2, #128	@ 0x80
 8000fd8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <MX_ETH_Init+0x88>)
 8000fdc:	22e1      	movs	r2, #225	@ 0xe1
 8000fde:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <MX_ETH_Init+0x88>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000fe6:	4b19      	ldr	r3, [pc, #100]	@ (800104c <MX_ETH_Init+0x88>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <MX_ETH_Init+0x88>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ff2:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <MX_ETH_Init+0x80>)
 8000ff4:	4a15      	ldr	r2, [pc, #84]	@ (800104c <MX_ETH_Init+0x88>)
 8000ff6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000ff8:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <MX_ETH_Init+0x80>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <MX_ETH_Init+0x80>)
 8001000:	4a13      	ldr	r2, [pc, #76]	@ (8001050 <MX_ETH_Init+0x8c>)
 8001002:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <MX_ETH_Init+0x80>)
 8001006:	4a13      	ldr	r2, [pc, #76]	@ (8001054 <MX_ETH_Init+0x90>)
 8001008:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <MX_ETH_Init+0x80>)
 800100c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001010:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001012:	480c      	ldr	r0, [pc, #48]	@ (8001044 <MX_ETH_Init+0x80>)
 8001014:	f005 f87a 	bl	800610c <HAL_ETH_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800101e:	f000 fec5 	bl	8001dac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001022:	2238      	movs	r2, #56	@ 0x38
 8001024:	2100      	movs	r1, #0
 8001026:	480c      	ldr	r0, [pc, #48]	@ (8001058 <MX_ETH_Init+0x94>)
 8001028:	f00d fa74 	bl	800e514 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800102c:	4b0a      	ldr	r3, [pc, #40]	@ (8001058 <MX_ETH_Init+0x94>)
 800102e:	2221      	movs	r2, #33	@ 0x21
 8001030:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001032:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <MX_ETH_Init+0x94>)
 8001034:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001038:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800103a:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <MX_ETH_Init+0x94>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001040:	bf00      	nop
 8001042:	bd80      	pop	{r7, pc}
 8001044:	24000244 	.word	0x24000244
 8001048:	40028000 	.word	0x40028000
 800104c:	240002f4 	.word	0x240002f4
 8001050:	240000c4 	.word	0x240000c4
 8001054:	24000064 	.word	0x24000064
 8001058:	2400020c 	.word	0x2400020c

0800105c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08e      	sub	sp, #56	@ 0x38
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a59      	ldr	r2, [pc, #356]	@ (80011e0 <HAL_ETH_MspInit+0x184>)
 800107a:	4293      	cmp	r3, r2
 800107c:	f040 80ab 	bne.w	80011d6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001080:	4b58      	ldr	r3, [pc, #352]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 8001082:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001086:	4a57      	ldr	r2, [pc, #348]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 8001088:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800108c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001090:	4b54      	ldr	r3, [pc, #336]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 8001092:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800109a:	623b      	str	r3, [r7, #32]
 800109c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800109e:	4b51      	ldr	r3, [pc, #324]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 80010a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010a4:	4a4f      	ldr	r2, [pc, #316]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 80010a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010aa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010ae:	4b4d      	ldr	r3, [pc, #308]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 80010b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010b8:	61fb      	str	r3, [r7, #28]
 80010ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80010bc:	4b49      	ldr	r3, [pc, #292]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 80010be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010c2:	4a48      	ldr	r2, [pc, #288]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010c8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80010cc:	4b45      	ldr	r3, [pc, #276]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 80010ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80010d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b42      	ldr	r3, [pc, #264]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 80010dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e0:	4a40      	ldr	r2, [pc, #256]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 80010e2:	f043 0304 	orr.w	r3, r3, #4
 80010e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010ea:	4b3e      	ldr	r3, [pc, #248]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 80010ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f0:	f003 0304 	and.w	r3, r3, #4
 80010f4:	617b      	str	r3, [r7, #20]
 80010f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b3a      	ldr	r3, [pc, #232]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010fe:	4a39      	ldr	r2, [pc, #228]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 8001100:	f043 0301 	orr.w	r3, r3, #1
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001108:	4b36      	ldr	r3, [pc, #216]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110e:	f003 0301 	and.w	r3, r3, #1
 8001112:	613b      	str	r3, [r7, #16]
 8001114:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001116:	4b33      	ldr	r3, [pc, #204]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111c:	4a31      	ldr	r2, [pc, #196]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 800111e:	f043 0302 	orr.w	r3, r3, #2
 8001122:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001126:	4b2f      	ldr	r3, [pc, #188]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 8001128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112c:	f003 0302 	and.w	r3, r3, #2
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001134:	4b2b      	ldr	r3, [pc, #172]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113a:	4a2a      	ldr	r2, [pc, #168]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 800113c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001140:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001144:	4b27      	ldr	r3, [pc, #156]	@ (80011e4 <HAL_ETH_MspInit+0x188>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001152:	2332      	movs	r3, #50	@ 0x32
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115e:	2300      	movs	r3, #0
 8001160:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001162:	230b      	movs	r3, #11
 8001164:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001166:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800116a:	4619      	mov	r1, r3
 800116c:	481e      	ldr	r0, [pc, #120]	@ (80011e8 <HAL_ETH_MspInit+0x18c>)
 800116e:	f005 fc01 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001172:	2386      	movs	r3, #134	@ 0x86
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117e:	2300      	movs	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001182:	230b      	movs	r3, #11
 8001184:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118a:	4619      	mov	r1, r3
 800118c:	4817      	ldr	r0, [pc, #92]	@ (80011ec <HAL_ETH_MspInit+0x190>)
 800118e:	f005 fbf1 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001192:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001196:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011a4:	230b      	movs	r3, #11
 80011a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4810      	ldr	r0, [pc, #64]	@ (80011f0 <HAL_ETH_MspInit+0x194>)
 80011b0:	f005 fbe0 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80011b4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80011b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011c6:	230b      	movs	r3, #11
 80011c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ce:	4619      	mov	r1, r3
 80011d0:	4808      	ldr	r0, [pc, #32]	@ (80011f4 <HAL_ETH_MspInit+0x198>)
 80011d2:	f005 fbcf 	bl	8006974 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80011d6:	bf00      	nop
 80011d8:	3738      	adds	r7, #56	@ 0x38
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40028000 	.word	0x40028000
 80011e4:	58024400 	.word	0x58024400
 80011e8:	58020800 	.word	0x58020800
 80011ec:	58020000 	.word	0x58020000
 80011f0:	58020400 	.word	0x58020400
 80011f4:	58021800 	.word	0x58021800

080011f8 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08c      	sub	sp, #48	@ 0x30
 80011fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
 800120c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800120e:	4b9a      	ldr	r3, [pc, #616]	@ (8001478 <MX_GPIO_Init+0x280>)
 8001210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001214:	4a98      	ldr	r2, [pc, #608]	@ (8001478 <MX_GPIO_Init+0x280>)
 8001216:	f043 0310 	orr.w	r3, r3, #16
 800121a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800121e:	4b96      	ldr	r3, [pc, #600]	@ (8001478 <MX_GPIO_Init+0x280>)
 8001220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001224:	f003 0310 	and.w	r3, r3, #16
 8001228:	61bb      	str	r3, [r7, #24]
 800122a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122c:	4b92      	ldr	r3, [pc, #584]	@ (8001478 <MX_GPIO_Init+0x280>)
 800122e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001232:	4a91      	ldr	r2, [pc, #580]	@ (8001478 <MX_GPIO_Init+0x280>)
 8001234:	f043 0304 	orr.w	r3, r3, #4
 8001238:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800123c:	4b8e      	ldr	r3, [pc, #568]	@ (8001478 <MX_GPIO_Init+0x280>)
 800123e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	617b      	str	r3, [r7, #20]
 8001248:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800124a:	4b8b      	ldr	r3, [pc, #556]	@ (8001478 <MX_GPIO_Init+0x280>)
 800124c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001250:	4a89      	ldr	r2, [pc, #548]	@ (8001478 <MX_GPIO_Init+0x280>)
 8001252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001256:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800125a:	4b87      	ldr	r3, [pc, #540]	@ (8001478 <MX_GPIO_Init+0x280>)
 800125c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001268:	4b83      	ldr	r3, [pc, #524]	@ (8001478 <MX_GPIO_Init+0x280>)
 800126a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800126e:	4a82      	ldr	r2, [pc, #520]	@ (8001478 <MX_GPIO_Init+0x280>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001278:	4b7f      	ldr	r3, [pc, #508]	@ (8001478 <MX_GPIO_Init+0x280>)
 800127a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	4b7c      	ldr	r3, [pc, #496]	@ (8001478 <MX_GPIO_Init+0x280>)
 8001288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800128c:	4a7a      	ldr	r2, [pc, #488]	@ (8001478 <MX_GPIO_Init+0x280>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001296:	4b78      	ldr	r3, [pc, #480]	@ (8001478 <MX_GPIO_Init+0x280>)
 8001298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a4:	4b74      	ldr	r3, [pc, #464]	@ (8001478 <MX_GPIO_Init+0x280>)
 80012a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012aa:	4a73      	ldr	r2, [pc, #460]	@ (8001478 <MX_GPIO_Init+0x280>)
 80012ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012b4:	4b70      	ldr	r3, [pc, #448]	@ (8001478 <MX_GPIO_Init+0x280>)
 80012b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001478 <MX_GPIO_Init+0x280>)
 80012c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c8:	4a6b      	ldr	r2, [pc, #428]	@ (8001478 <MX_GPIO_Init+0x280>)
 80012ca:	f043 0308 	orr.w	r3, r3, #8
 80012ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012d2:	4b69      	ldr	r3, [pc, #420]	@ (8001478 <MX_GPIO_Init+0x280>)
 80012d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	603b      	str	r3, [r7, #0]
 80012de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_SET);
 80012e0:	2201      	movs	r2, #1
 80012e2:	2101      	movs	r1, #1
 80012e4:	4865      	ldr	r0, [pc, #404]	@ (800147c <MX_GPIO_Init+0x284>)
 80012e6:	f005 fcf5 	bl	8006cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	f245 0101 	movw	r1, #20481	@ 0x5001
 80012f0:	4863      	ldr	r0, [pc, #396]	@ (8001480 <MX_GPIO_Init+0x288>)
 80012f2:	f005 fcef 	bl	8006cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_DC_Pin|CAMERA_RST_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f240 4102 	movw	r1, #1026	@ 0x402
 80012fc:	4861      	ldr	r0, [pc, #388]	@ (8001484 <MX_GPIO_Init+0x28c>)
 80012fe:	f005 fce9 	bl	8006cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001308:	485f      	ldr	r0, [pc, #380]	@ (8001488 <MX_GPIO_Init+0x290>)
 800130a:	f005 fce3 	bl	8006cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_SET);
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 4110 	mov.w	r1, #36864	@ 0x9000
 8001314:	485b      	ldr	r0, [pc, #364]	@ (8001484 <MX_GPIO_Init+0x28c>)
 8001316:	f005 fcdd 	bl	8006cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	2102      	movs	r1, #2
 800131e:	485b      	ldr	r0, [pc, #364]	@ (800148c <MX_GPIO_Init+0x294>)
 8001320:	f005 fcd8 	bl	8006cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001324:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4619      	mov	r1, r3
 8001338:	4855      	ldr	r0, [pc, #340]	@ (8001490 <MX_GPIO_Init+0x298>)
 800133a:	f005 fb1b 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_PWDN_Pin */
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin;
 800133e:	2301      	movs	r3, #1
 8001340:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001342:	2301      	movs	r3, #1
 8001344:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CAMERA_PWDN_GPIO_Port, &GPIO_InitStruct);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	4619      	mov	r1, r3
 8001354:	4849      	ldr	r0, [pc, #292]	@ (800147c <MX_GPIO_Init+0x284>)
 8001356:	f005 fb0d 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin I2C_SUCCESS_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin;
 800135a:	f245 0301 	movw	r3, #20481	@ 0x5001
 800135e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001360:	2301      	movs	r3, #1
 8001362:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001368:	2300      	movs	r3, #0
 800136a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	4619      	mov	r1, r3
 8001372:	4843      	ldr	r0, [pc, #268]	@ (8001480 <MX_GPIO_Init+0x288>)
 8001374:	f005 fafe 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001378:	2302      	movs	r3, #2
 800137a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001384:	2302      	movs	r3, #2
 8001386:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001388:	f107 031c 	add.w	r3, r7, #28
 800138c:	4619      	mov	r1, r3
 800138e:	483d      	ldr	r0, [pc, #244]	@ (8001484 <MX_GPIO_Init+0x28c>)
 8001390:	f005 faf0 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001394:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001398:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	2301      	movs	r3, #1
 800139c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4836      	ldr	r0, [pc, #216]	@ (8001488 <MX_GPIO_Init+0x290>)
 80013ae:	f005 fae1 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80013b2:	2380      	movs	r3, #128	@ 0x80
 80013b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	482f      	ldr	r0, [pc, #188]	@ (8001484 <MX_GPIO_Init+0x28c>)
 80013c8:	f005 fad4 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d2:	2302      	movs	r3, #2
 80013d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013da:	2303      	movs	r3, #3
 80013dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013de:	2300      	movs	r3, #0
 80013e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4824      	ldr	r0, [pc, #144]	@ (800147c <MX_GPIO_Init+0x284>)
 80013ea:	f005 fac3 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_RST_Pin */
  GPIO_InitStruct.Pin = CAMERA_RST_Pin;
 80013ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CAMERA_RST_GPIO_Port, &GPIO_InitStruct);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	481f      	ldr	r0, [pc, #124]	@ (8001484 <MX_GPIO_Init+0x28c>)
 8001408:	f005 fab4 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RESET_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 800140c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001416:	2301      	movs	r3, #1
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	4619      	mov	r1, r3
 8001424:	4817      	ldr	r0, [pc, #92]	@ (8001484 <MX_GPIO_Init+0x28c>)
 8001426:	f005 faa5 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 800142a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800142e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001430:	2301      	movs	r3, #1
 8001432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001434:	2301      	movs	r3, #1
 8001436:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001438:	2302      	movs	r3, #2
 800143a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800143c:	f107 031c 	add.w	r3, r7, #28
 8001440:	4619      	mov	r1, r3
 8001442:	4810      	ldr	r0, [pc, #64]	@ (8001484 <MX_GPIO_Init+0x28c>)
 8001444:	f005 fa96 	bl	8006974 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001448:	2302      	movs	r3, #2
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	4619      	mov	r1, r3
 800145e:	480b      	ldr	r0, [pc, #44]	@ (800148c <MX_GPIO_Init+0x294>)
 8001460:	f005 fa88 	bl	8006974 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_CLOSE);
 8001464:	2100      	movs	r1, #0
 8001466:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 800146a:	f001 fac5 	bl	80029f8 <HAL_SYSCFG_AnalogSwitchConfig>

}
 800146e:	bf00      	nop
 8001470:	3730      	adds	r7, #48	@ 0x30
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	58024400 	.word	0x58024400
 800147c:	58020000 	.word	0x58020000
 8001480:	58020400 	.word	0x58020400
 8001484:	58021800 	.word	0x58021800
 8001488:	58020c00 	.word	0x58020c00
 800148c:	58021000 	.word	0x58021000
 8001490:	58020800 	.word	0x58020800

08001494 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001498:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <MX_I2C1_Init+0x74>)
 800149a:	4a1c      	ldr	r2, [pc, #112]	@ (800150c <MX_I2C1_Init+0x78>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60000008;
 800149e:	4b1a      	ldr	r3, [pc, #104]	@ (8001508 <MX_I2C1_Init+0x74>)
 80014a0:	4a1b      	ldr	r2, [pc, #108]	@ (8001510 <MX_I2C1_Init+0x7c>)
 80014a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014a4:	4b18      	ldr	r3, [pc, #96]	@ (8001508 <MX_I2C1_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014aa:	4b17      	ldr	r3, [pc, #92]	@ (8001508 <MX_I2C1_Init+0x74>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b0:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <MX_I2C1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014b6:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <MX_I2C1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014bc:	4b12      	ldr	r3, [pc, #72]	@ (8001508 <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <MX_I2C1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001508 <MX_I2C1_Init+0x74>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ce:	480e      	ldr	r0, [pc, #56]	@ (8001508 <MX_I2C1_Init+0x74>)
 80014d0:	f005 fc1a 	bl	8006d08 <HAL_I2C_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014da:	f000 fc67 	bl	8001dac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014de:	2100      	movs	r1, #0
 80014e0:	4809      	ldr	r0, [pc, #36]	@ (8001508 <MX_I2C1_Init+0x74>)
 80014e2:	f006 f99d 	bl	8007820 <HAL_I2CEx_ConfigAnalogFilter>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014ec:	f000 fc5e 	bl	8001dac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014f0:	2100      	movs	r1, #0
 80014f2:	4805      	ldr	r0, [pc, #20]	@ (8001508 <MX_I2C1_Init+0x74>)
 80014f4:	f006 f9df 	bl	80078b6 <HAL_I2CEx_ConfigDigitalFilter>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014fe:	f000 fc55 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	240002fc 	.word	0x240002fc
 800150c:	40005400 	.word	0x40005400
 8001510:	60000008 	.word	0x60000008

08001514 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b0ba      	sub	sp, #232	@ 0xe8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	22c0      	movs	r2, #192	@ 0xc0
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f00c ffed 	bl	800e514 <memset>
  if(i2cHandle->Instance==I2C1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a30      	ldr	r2, [pc, #192]	@ (8001600 <HAL_I2C_MspInit+0xec>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d158      	bne.n	80015f6 <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001544:	f04f 0208 	mov.w	r2, #8
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 8;
 8001550:	2308      	movs	r3, #8
 8001552:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 150;
 8001554:	2396      	movs	r3, #150	@ 0x96
 8001556:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 10;
 8001558:	230a      	movs	r3, #10
 800155a:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 800155c:	230a      	movs	r3, #10
 800155e:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 10;
 8001560:	230a      	movs	r3, #10
 8001562:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 8001564:	2300      	movs	r3, #0
 8001566:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001568:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800156c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 8001572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001576:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800157a:	f107 0310 	add.w	r3, r7, #16
 800157e:	4618      	mov	r0, r3
 8001580:	f007 fbd4 	bl	8008d2c <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 800158a:	f000 fc0f 	bl	8001dac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	4b1d      	ldr	r3, [pc, #116]	@ (8001604 <HAL_I2C_MspInit+0xf0>)
 8001590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001594:	4a1b      	ldr	r2, [pc, #108]	@ (8001604 <HAL_I2C_MspInit+0xf0>)
 8001596:	f043 0302 	orr.w	r3, r3, #2
 800159a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_I2C_MspInit+0xf0>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	60fb      	str	r3, [r7, #12]
 80015aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b4:	2312      	movs	r3, #18
 80015b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015c6:	2304      	movs	r3, #4
 80015c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015cc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015d0:	4619      	mov	r1, r3
 80015d2:	480d      	ldr	r0, [pc, #52]	@ (8001608 <HAL_I2C_MspInit+0xf4>)
 80015d4:	f005 f9ce 	bl	8006974 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001604 <HAL_I2C_MspInit+0xf0>)
 80015da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015de:	4a09      	ldr	r2, [pc, #36]	@ (8001604 <HAL_I2C_MspInit+0xf0>)
 80015e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015e4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015e8:	4b06      	ldr	r3, [pc, #24]	@ (8001604 <HAL_I2C_MspInit+0xf0>)
 80015ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015f6:	bf00      	nop
 80015f8:	37e8      	adds	r7, #232	@ 0xe8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40005400 	.word	0x40005400
 8001604:	58024400 	.word	0x58024400
 8001608:	58020400 	.word	0x58020400

0800160c <ILI9341_SendCommand>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ILI9341_SendCommand(uint8_t cmd){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port,LCD_DC_Pin,GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	2102      	movs	r1, #2
 800161a:	480d      	ldr	r0, [pc, #52]	@ (8001650 <ILI9341_SendCommand+0x44>)
 800161c:	f005 fb5a 	bl	8006cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001626:	480a      	ldr	r0, [pc, #40]	@ (8001650 <ILI9341_SendCommand+0x44>)
 8001628:	f005 fb54 	bl	8006cd4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &cmd, 1, HAL_MAX_DELAY);
 800162c:	1df9      	adds	r1, r7, #7
 800162e:	f04f 33ff 	mov.w	r3, #4294967295
 8001632:	2201      	movs	r2, #1
 8001634:	4807      	ldr	r0, [pc, #28]	@ (8001654 <ILI9341_SendCommand+0x48>)
 8001636:	f009 fac9 	bl	800abcc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin,GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001640:	4803      	ldr	r0, [pc, #12]	@ (8001650 <ILI9341_SendCommand+0x44>)
 8001642:	f005 fb47 	bl	8006cd4 <HAL_GPIO_WritePin>

}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	58021800 	.word	0x58021800
 8001654:	24000350 	.word	0x24000350

08001658 <ILI9341_SendData>:

void ILI9341_SendData(uint8_t *data, uint16_t length){
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port,LCD_DC_Pin,GPIO_PIN_SET);
 8001664:	2201      	movs	r2, #1
 8001666:	2102      	movs	r1, #2
 8001668:	480c      	ldr	r0, [pc, #48]	@ (800169c <ILI9341_SendData+0x44>)
 800166a:	f005 fb33 	bl	8006cd4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001674:	4809      	ldr	r0, [pc, #36]	@ (800169c <ILI9341_SendData+0x44>)
 8001676:	f005 fb2d 	bl	8006cd4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, length, HAL_MAX_DELAY);
 800167a:	887a      	ldrh	r2, [r7, #2]
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4807      	ldr	r0, [pc, #28]	@ (80016a0 <ILI9341_SendData+0x48>)
 8001684:	f009 faa2 	bl	800abcc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin,GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800168e:	4803      	ldr	r0, [pc, #12]	@ (800169c <ILI9341_SendData+0x44>)
 8001690:	f005 fb20 	bl	8006cd4 <HAL_GPIO_WritePin>
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	58021800 	.word	0x58021800
 80016a0:	24000350 	.word	0x24000350

080016a4 <ILI9341_FillScreen>:
    HAL_Delay(120);

    ILI9341_SendCommand(0x29);  // Display on
    HAL_Delay(10);
}
void ILI9341_FillScreen(uint16_t color) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	80fb      	strh	r3, [r7, #6]
    // Set column address (0 to 239)
    uint8_t col_cmd = 0x2A;
 80016ae:	232a      	movs	r3, #42	@ 0x2a
 80016b0:	76fb      	strb	r3, [r7, #27]
    uint8_t col_data[4] = {0x00, 0x00, 0x00, 0xEF};
 80016b2:	f04f 436f 	mov.w	r3, #4009754624	@ 0xef000000
 80016b6:	617b      	str	r3, [r7, #20]
    uint8_t page_cmd = 0x2B;
 80016b8:	232b      	movs	r3, #43	@ 0x2b
 80016ba:	76bb      	strb	r3, [r7, #26]
    uint8_t page_data[4] = {0x00, 0x00, 0x01, 0x3F};
 80016bc:	4b25      	ldr	r3, [pc, #148]	@ (8001754 <ILI9341_FillScreen+0xb0>)
 80016be:	613b      	str	r3, [r7, #16]
    uint8_t mem_cmd = 0x2C;
 80016c0:	232c      	movs	r3, #44	@ 0x2c
 80016c2:	767b      	strb	r3, [r7, #25]
    ILI9341_SendCommand(col_cmd);
 80016c4:	7efb      	ldrb	r3, [r7, #27]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ffa0 	bl	800160c <ILI9341_SendCommand>
    ILI9341_SendData(&col_data, 4);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	2104      	movs	r1, #4
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff ffc0 	bl	8001658 <ILI9341_SendData>
    ILI9341_SendCommand(page_cmd);
 80016d8:	7ebb      	ldrb	r3, [r7, #26]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ff96 	bl	800160c <ILI9341_SendCommand>
    ILI9341_SendData(&page_data, 4);
 80016e0:	f107 0310 	add.w	r3, r7, #16
 80016e4:	2104      	movs	r1, #4
 80016e6:	4618      	mov	r0, r3
 80016e8:	f7ff ffb6 	bl	8001658 <ILI9341_SendData>
    ILI9341_SendCommand(mem_cmd);
 80016ec:	7e7b      	ldrb	r3, [r7, #25]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff ff8c 	bl	800160c <ILI9341_SendCommand>
    uint8_t pixel_data[2] = {color >> 8, color & 0xFF};
 80016f4:	88fb      	ldrh	r3, [r7, #6]
 80016f6:	0a1b      	lsrs	r3, r3, #8
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	733b      	strb	r3, [r7, #12]
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);     // Data mode
 8001704:	2201      	movs	r2, #1
 8001706:	2102      	movs	r1, #2
 8001708:	4813      	ldr	r0, [pc, #76]	@ (8001758 <ILI9341_FillScreen+0xb4>)
 800170a:	f005 fae3 	bl	8006cd4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);   // Select
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001714:	4810      	ldr	r0, [pc, #64]	@ (8001758 <ILI9341_FillScreen+0xb4>)
 8001716:	f005 fadd 	bl	8006cd4 <HAL_GPIO_WritePin>

    for(uint32_t i = 0; i < 240 * 320; i++) {
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
 800171e:	e00a      	b.n	8001736 <ILI9341_FillScreen+0x92>
        HAL_SPI_Transmit(&hspi1, pixel_data, 2, HAL_MAX_DELAY);
 8001720:	f107 010c 	add.w	r1, r7, #12
 8001724:	f04f 33ff 	mov.w	r3, #4294967295
 8001728:	2202      	movs	r2, #2
 800172a:	480c      	ldr	r0, [pc, #48]	@ (800175c <ILI9341_FillScreen+0xb8>)
 800172c:	f009 fa4e 	bl	800abcc <HAL_SPI_Transmit>
    for(uint32_t i = 0; i < 240 * 320; i++) {
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	3301      	adds	r3, #1
 8001734:	61fb      	str	r3, [r7, #28]
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800173c:	d3f0      	bcc.n	8001720 <ILI9341_FillScreen+0x7c>
    }

    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800173e:	2201      	movs	r2, #1
 8001740:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001744:	4804      	ldr	r0, [pc, #16]	@ (8001758 <ILI9341_FillScreen+0xb4>)
 8001746:	f005 fac5 	bl	8006cd4 <HAL_GPIO_WritePin>




// Deselect
}
 800174a:	bf00      	nop
 800174c:	3720      	adds	r7, #32
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	3f010000 	.word	0x3f010000
 8001758:	58021800 	.word	0x58021800
 800175c:	24000350 	.word	0x24000350

08001760 <ILI9341_Init_Complete>:
void ILI9341_Init_Complete(void) {
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b09b      	sub	sp, #108	@ 0x6c
 8001764:	af00      	add	r7, sp, #0
    // Hardware reset
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800176c:	4893      	ldr	r0, [pc, #588]	@ (80019bc <ILI9341_Init_Complete+0x25c>)
 800176e:	f005 fab1 	bl	8006cd4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8001772:	200a      	movs	r0, #10
 8001774:	f001 f8fc 	bl	8002970 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 8001778:	2201      	movs	r2, #1
 800177a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800177e:	488f      	ldr	r0, [pc, #572]	@ (80019bc <ILI9341_Init_Complete+0x25c>)
 8001780:	f005 faa8 	bl	8006cd4 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 8001784:	2078      	movs	r0, #120	@ 0x78
 8001786:	f001 f8f3 	bl	8002970 <HAL_Delay>

    // Software reset
    ILI9341_SendCommand(0x01);  // SWRESET
 800178a:	2001      	movs	r0, #1
 800178c:	f7ff ff3e 	bl	800160c <ILI9341_SendCommand>
    HAL_Delay(150);
 8001790:	2096      	movs	r0, #150	@ 0x96
 8001792:	f001 f8ed 	bl	8002970 <HAL_Delay>

    // Display off during initialization
    ILI9341_SendCommand(0x28);  // Display OFF
 8001796:	2028      	movs	r0, #40	@ 0x28
 8001798:	f7ff ff38 	bl	800160c <ILI9341_SendCommand>

    // Power control sequence (from Adafruit library)
    ILI9341_SendCommand(0xCB);  // Power control B
 800179c:	20cb      	movs	r0, #203	@ 0xcb
 800179e:	f7ff ff35 	bl	800160c <ILI9341_SendCommand>
    uint8_t pwctrlb[] = {0x39, 0x2C, 0x00, 0x34, 0x02};
 80017a2:	4a87      	ldr	r2, [pc, #540]	@ (80019c0 <ILI9341_Init_Complete+0x260>)
 80017a4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017ac:	6018      	str	r0, [r3, #0]
 80017ae:	3304      	adds	r3, #4
 80017b0:	7019      	strb	r1, [r3, #0]
    ILI9341_SendData(pwctrlb, 5);
 80017b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017b6:	2105      	movs	r1, #5
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff4d 	bl	8001658 <ILI9341_SendData>

    ILI9341_SendCommand(0xCF);  // Power control A
 80017be:	20cf      	movs	r0, #207	@ 0xcf
 80017c0:	f7ff ff24 	bl	800160c <ILI9341_SendCommand>
    uint8_t pwctrla[] = {0x00, 0xC1, 0x30};
 80017c4:	4a7f      	ldr	r2, [pc, #508]	@ (80019c4 <ILI9341_Init_Complete+0x264>)
 80017c6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	4611      	mov	r1, r2
 80017ce:	8019      	strh	r1, [r3, #0]
 80017d0:	3302      	adds	r3, #2
 80017d2:	0c12      	lsrs	r2, r2, #16
 80017d4:	701a      	strb	r2, [r3, #0]
    ILI9341_SendData(pwctrla, 3);
 80017d6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80017da:	2103      	movs	r1, #3
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff3b 	bl	8001658 <ILI9341_SendData>

    ILI9341_SendCommand(0xE8);  // Driver timing control A
 80017e2:	20e8      	movs	r0, #232	@ 0xe8
 80017e4:	f7ff ff12 	bl	800160c <ILI9341_SendCommand>
    uint8_t dtca[] = {0x85, 0x00, 0x78};
 80017e8:	4a77      	ldr	r2, [pc, #476]	@ (80019c8 <ILI9341_Init_Complete+0x268>)
 80017ea:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	4611      	mov	r1, r2
 80017f2:	8019      	strh	r1, [r3, #0]
 80017f4:	3302      	adds	r3, #2
 80017f6:	0c12      	lsrs	r2, r2, #16
 80017f8:	701a      	strb	r2, [r3, #0]
    ILI9341_SendData(dtca, 3);
 80017fa:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80017fe:	2103      	movs	r1, #3
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff29 	bl	8001658 <ILI9341_SendData>

    ILI9341_SendCommand(0xEA);  // Driver timing control B
 8001806:	20ea      	movs	r0, #234	@ 0xea
 8001808:	f7ff ff00 	bl	800160c <ILI9341_SendCommand>
    uint8_t dtcb[] = {0x00, 0x00};
 800180c:	2300      	movs	r3, #0
 800180e:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    ILI9341_SendData(dtcb, 2);
 8001812:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001816:	2102      	movs	r1, #2
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff1d 	bl	8001658 <ILI9341_SendData>

    ILI9341_SendCommand(0xED);  // Power on sequence control
 800181e:	20ed      	movs	r0, #237	@ 0xed
 8001820:	f7ff fef4 	bl	800160c <ILI9341_SendCommand>
    uint8_t pwseq[] = {0x64, 0x03, 0x12, 0x81};
 8001824:	4b69      	ldr	r3, [pc, #420]	@ (80019cc <ILI9341_Init_Complete+0x26c>)
 8001826:	653b      	str	r3, [r7, #80]	@ 0x50
    ILI9341_SendData(pwseq, 4);
 8001828:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800182c:	2104      	movs	r1, #4
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff12 	bl	8001658 <ILI9341_SendData>

    ILI9341_SendCommand(0xF7);  // Pump ratio control
 8001834:	20f7      	movs	r0, #247	@ 0xf7
 8001836:	f7ff fee9 	bl	800160c <ILI9341_SendCommand>
    uint8_t pumprc[] = {0x20};
 800183a:	2320      	movs	r3, #32
 800183c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
    ILI9341_SendData(pumprc, 1);
 8001840:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001844:	2101      	movs	r1, #1
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff06 	bl	8001658 <ILI9341_SendData>

    // Main power control registers
    ILI9341_SendCommand(0xC0);  // Power control 1
 800184c:	20c0      	movs	r0, #192	@ 0xc0
 800184e:	f7ff fedd 	bl	800160c <ILI9341_SendCommand>
    uint8_t pwctrl1[] = {0x23};  // VRH[5:0]
 8001852:	2323      	movs	r3, #35	@ 0x23
 8001854:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    ILI9341_SendData(pwctrl1, 1);
 8001858:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800185c:	2101      	movs	r1, #1
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff fefa 	bl	8001658 <ILI9341_SendData>

    ILI9341_SendCommand(0xC1);  // Power control 2
 8001864:	20c1      	movs	r0, #193	@ 0xc1
 8001866:	f7ff fed1 	bl	800160c <ILI9341_SendCommand>
    uint8_t pwctrl2[] = {0x10};  // SAP[2:0];BT[3:0]
 800186a:	2310      	movs	r3, #16
 800186c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    ILI9341_SendData(pwctrl2, 1);
 8001870:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001874:	2101      	movs	r1, #1
 8001876:	4618      	mov	r0, r3
 8001878:	f7ff feee 	bl	8001658 <ILI9341_SendData>

    ILI9341_SendCommand(0xC5);  // VCOM control 1
 800187c:	20c5      	movs	r0, #197	@ 0xc5
 800187e:	f7ff fec5 	bl	800160c <ILI9341_SendCommand>
    uint8_t vmctrl1[] = {0x3E, 0x28};
 8001882:	f642 033e 	movw	r3, #10302	@ 0x283e
 8001886:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    ILI9341_SendData(vmctrl1, 2);
 800188a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800188e:	2102      	movs	r1, #2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fee1 	bl	8001658 <ILI9341_SendData>

    ILI9341_SendCommand(0xC7);  // VCOM control 2
 8001896:	20c7      	movs	r0, #199	@ 0xc7
 8001898:	f7ff feb8 	bl	800160c <ILI9341_SendCommand>
    uint8_t vmctrl2[] = {0x86};
 800189c:	2386      	movs	r3, #134	@ 0x86
 800189e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
    ILI9341_SendData(vmctrl2, 1);
 80018a2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018a6:	2101      	movs	r1, #1
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fed5 	bl	8001658 <ILI9341_SendData>

    // Memory and display settings
    ILI9341_SendCommand(0x36);  // Memory Access Control
 80018ae:	2036      	movs	r0, #54	@ 0x36
 80018b0:	f7ff feac 	bl	800160c <ILI9341_SendCommand>
    uint8_t madctl[] = {0x48};   // BGR color order, normal orientation
 80018b4:	2348      	movs	r3, #72	@ 0x48
 80018b6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
    ILI9341_SendData(madctl, 1);
 80018ba:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018be:	2101      	movs	r1, #1
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff fec9 	bl	8001658 <ILI9341_SendData>

    ILI9341_SendCommand(0x3A);  // Pixel format
 80018c6:	203a      	movs	r0, #58	@ 0x3a
 80018c8:	f7ff fea0 	bl	800160c <ILI9341_SendCommand>
    uint8_t pixfmt[] = {0x55};   // 16 bits per pixel (RGB565)
 80018cc:	2355      	movs	r3, #85	@ 0x55
 80018ce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    ILI9341_SendData(pixfmt, 1);
 80018d2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018d6:	2101      	movs	r1, #1
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff febd 	bl	8001658 <ILI9341_SendData>

    ILI9341_SendCommand(0xB1);  // Frame rate control
 80018de:	20b1      	movs	r0, #177	@ 0xb1
 80018e0:	f7ff fe94 	bl	800160c <ILI9341_SendCommand>
    uint8_t frmctrl[] = {0x00, 0x18};
 80018e4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80018e8:	863b      	strh	r3, [r7, #48]	@ 0x30
    ILI9341_SendData(frmctrl, 2);
 80018ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018ee:	2102      	movs	r1, #2
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff feb1 	bl	8001658 <ILI9341_SendData>

    ILI9341_SendCommand(0xB6);  // Display function control
 80018f6:	20b6      	movs	r0, #182	@ 0xb6
 80018f8:	f7ff fe88 	bl	800160c <ILI9341_SendCommand>
    uint8_t dfunctr[] = {0x08, 0x82, 0x27};
 80018fc:	4a34      	ldr	r2, [pc, #208]	@ (80019d0 <ILI9341_Init_Complete+0x270>)
 80018fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	4611      	mov	r1, r2
 8001906:	8019      	strh	r1, [r3, #0]
 8001908:	3302      	adds	r3, #2
 800190a:	0c12      	lsrs	r2, r2, #16
 800190c:	701a      	strb	r2, [r3, #0]
    ILI9341_SendData(dfunctr, 3);
 800190e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001912:	2103      	movs	r1, #3
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fe9f 	bl	8001658 <ILI9341_SendData>

    ILI9341_SendCommand(0xF2);  // 3Gamma function disable
 800191a:	20f2      	movs	r0, #242	@ 0xf2
 800191c:	f7ff fe76 	bl	800160c <ILI9341_SendCommand>
    uint8_t gamma3g[] = {0x00};
 8001920:	2300      	movs	r3, #0
 8001922:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    ILI9341_SendData(gamma3g, 1);
 8001926:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800192a:	2101      	movs	r1, #1
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fe93 	bl	8001658 <ILI9341_SendData>

    ILI9341_SendCommand(0x26);  // Gamma curve selected
 8001932:	2026      	movs	r0, #38	@ 0x26
 8001934:	f7ff fe6a 	bl	800160c <ILI9341_SendCommand>
    uint8_t gamset[] = {0x01};
 8001938:	2301      	movs	r3, #1
 800193a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    ILI9341_SendData(gamset, 1);
 800193e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001942:	2101      	movs	r1, #1
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fe87 	bl	8001658 <ILI9341_SendData>

    // Positive gamma correction
    ILI9341_SendCommand(0xE0);
 800194a:	20e0      	movs	r0, #224	@ 0xe0
 800194c:	f7ff fe5e 	bl	800160c <ILI9341_SendCommand>
    uint8_t pgamma[] = {0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8001950:	4b20      	ldr	r3, [pc, #128]	@ (80019d4 <ILI9341_Init_Complete+0x274>)
 8001952:	f107 0414 	add.w	r4, r7, #20
 8001956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001958:	c407      	stmia	r4!, {r0, r1, r2}
 800195a:	8023      	strh	r3, [r4, #0]
 800195c:	3402      	adds	r4, #2
 800195e:	0c1b      	lsrs	r3, r3, #16
 8001960:	7023      	strb	r3, [r4, #0]
                        0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00};
    ILI9341_SendData(pgamma, 15);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	210f      	movs	r1, #15
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fe75 	bl	8001658 <ILI9341_SendData>

    // Negative gamma correction
    ILI9341_SendCommand(0xE1);
 800196e:	20e1      	movs	r0, #225	@ 0xe1
 8001970:	f7ff fe4c 	bl	800160c <ILI9341_SendCommand>
    uint8_t ngamma[] = {0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8001974:	4b18      	ldr	r3, [pc, #96]	@ (80019d8 <ILI9341_Init_Complete+0x278>)
 8001976:	1d3c      	adds	r4, r7, #4
 8001978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800197a:	c407      	stmia	r4!, {r0, r1, r2}
 800197c:	8023      	strh	r3, [r4, #0]
 800197e:	3402      	adds	r4, #2
 8001980:	0c1b      	lsrs	r3, r3, #16
 8001982:	7023      	strb	r3, [r4, #0]
                        0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F};
    ILI9341_SendData(ngamma, 15);
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	210f      	movs	r1, #15
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff fe65 	bl	8001658 <ILI9341_SendData>

    // Exit sleep mode
    ILI9341_SendCommand(0x11);  // SLPOUT
 800198e:	2011      	movs	r0, #17
 8001990:	f7ff fe3c 	bl	800160c <ILI9341_SendCommand>
    HAL_Delay(120);
 8001994:	2078      	movs	r0, #120	@ 0x78
 8001996:	f000 ffeb 	bl	8002970 <HAL_Delay>

    // Display on
    ILI9341_SendCommand(0x29);  // DISPON
 800199a:	2029      	movs	r0, #41	@ 0x29
 800199c:	f7ff fe36 	bl	800160c <ILI9341_SendCommand>
    HAL_Delay(100);
 80019a0:	2064      	movs	r0, #100	@ 0x64
 80019a2:	f000 ffe5 	bl	8002970 <HAL_Delay>

    HAL_UART_Transmit(&huart3, "ILI9341 Init Complete!\r\n", 24, HAL_MAX_DELAY);
 80019a6:	f04f 33ff 	mov.w	r3, #4294967295
 80019aa:	2218      	movs	r2, #24
 80019ac:	490b      	ldr	r1, [pc, #44]	@ (80019dc <ILI9341_Init_Complete+0x27c>)
 80019ae:	480c      	ldr	r0, [pc, #48]	@ (80019e0 <ILI9341_Init_Complete+0x280>)
 80019b0:	f00b f96c 	bl	800cc8c <HAL_UART_Transmit>
}
 80019b4:	bf00      	nop
 80019b6:	376c      	adds	r7, #108	@ 0x6c
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd90      	pop	{r4, r7, pc}
 80019bc:	58021800 	.word	0x58021800
 80019c0:	0800ef14 	.word	0x0800ef14
 80019c4:	0800eef4 	.word	0x0800eef4
 80019c8:	0800ef1c 	.word	0x0800ef1c
 80019cc:	81120364 	.word	0x81120364
 80019d0:	0800ef20 	.word	0x0800ef20
 80019d4:	0800ef24 	.word	0x0800ef24
 80019d8:	0800ef34 	.word	0x0800ef34
 80019dc:	0800eef8 	.word	0x0800eef8
 80019e0:	240004ec 	.word	0x240004ec

080019e4 <ILI9341_TestDisplay>:

// Basic test function to verify initialization
void ILI9341_TestDisplay(void) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
    // Fill screen with different colors to test
    ILI9341_FillScreen(0xF800);  // Red
 80019e8:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80019ec:	f7ff fe5a 	bl	80016a4 <ILI9341_FillScreen>
    HAL_Delay(1000);
 80019f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019f4:	f000 ffbc 	bl	8002970 <HAL_Delay>
    ILI9341_FillScreen(0x07E0);  // Green
 80019f8:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 80019fc:	f7ff fe52 	bl	80016a4 <ILI9341_FillScreen>
    HAL_Delay(1000);
 8001a00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a04:	f000 ffb4 	bl	8002970 <HAL_Delay>
    ILI9341_FillScreen(0x001F);  // Blue
 8001a08:	201f      	movs	r0, #31
 8001a0a:	f7ff fe4b 	bl	80016a4 <ILI9341_FillScreen>
    HAL_Delay(1000);
 8001a0e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a12:	f000 ffad 	bl	8002970 <HAL_Delay>
    ILI9341_FillScreen(0xFFFF);  // White
 8001a16:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a1a:	f7ff fe43 	bl	80016a4 <ILI9341_FillScreen>
    HAL_Delay(1000);
 8001a1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001a22:	f000 ffa5 	bl	8002970 <HAL_Delay>
    ILI9341_FillScreen(0x0000);  // Black
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff fe3c 	bl	80016a4 <ILI9341_FillScreen>
}
 8001a2c:	bf00      	nop
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <TestSPIBasic>:
void TestSPIBasic(void) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08e      	sub	sp, #56	@ 0x38
 8001a34:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, "Testing basic SPI...\r\n", 22, HAL_MAX_DELAY);
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	2216      	movs	r2, #22
 8001a3c:	491a      	ldr	r1, [pc, #104]	@ (8001aa8 <TestSPIBasic+0x78>)
 8001a3e:	481b      	ldr	r0, [pc, #108]	@ (8001aac <TestSPIBasic+0x7c>)
 8001a40:	f00b f924 	bl	800cc8c <HAL_UART_Transmit>

    uint8_t testByte = 0xAA;
 8001a44:	23aa      	movs	r3, #170	@ 0xaa
 8001a46:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    HAL_StatusTypeDef status;

    // Test SPI transmission
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);  // Select
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a50:	4817      	ldr	r0, [pc, #92]	@ (8001ab0 <TestSPIBasic+0x80>)
 8001a52:	f005 f93f 	bl	8006cd4 <HAL_GPIO_WritePin>
    status = HAL_SPI_Transmit(&hspi1, &testByte, 1, HAL_MAX_DELAY);
 8001a56:	f107 0136 	add.w	r1, r7, #54	@ 0x36
 8001a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4814      	ldr	r0, [pc, #80]	@ (8001ab4 <TestSPIBasic+0x84>)
 8001a62:	f009 f8b3 	bl	800abcc <HAL_SPI_Transmit>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);    // Deselect
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001a72:	480f      	ldr	r0, [pc, #60]	@ (8001ab0 <TestSPIBasic+0x80>)
 8001a74:	f005 f92e 	bl	8006cd4 <HAL_GPIO_WritePin>

    char spiMsg[50];
    sprintf(spiMsg, "SPI Status: %d (0=OK)\r\n", status);
 8001a78:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8001a7c:	1d3b      	adds	r3, r7, #4
 8001a7e:	490e      	ldr	r1, [pc, #56]	@ (8001ab8 <TestSPIBasic+0x88>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f00c fd25 	bl	800e4d0 <siprintf>
    HAL_UART_Transmit(&huart3, spiMsg, strlen(spiMsg), HAL_MAX_DELAY);
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fc29 	bl	80002e0 <strlen>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	1d39      	adds	r1, r7, #4
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	4804      	ldr	r0, [pc, #16]	@ (8001aac <TestSPIBasic+0x7c>)
 8001a9a:	f00b f8f7 	bl	800cc8c <HAL_UART_Transmit>
}
 8001a9e:	bf00      	nop
 8001aa0:	3738      	adds	r7, #56	@ 0x38
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	0800ef44 	.word	0x0800ef44
 8001aac:	240004ec 	.word	0x240004ec
 8001ab0:	58021800 	.word	0x58021800
 8001ab4:	24000350 	.word	0x24000350
 8001ab8:	0800ef5c 	.word	0x0800ef5c

08001abc <TestGPIOPins>:
void TestGPIOPins(void) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08a      	sub	sp, #40	@ 0x28
 8001ac0:	af00      	add	r7, sp, #0
    HAL_UART_Transmit(&huart3, "Testing GPIO pins...\r\n", 22, HAL_MAX_DELAY);
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	2216      	movs	r2, #22
 8001ac8:	492c      	ldr	r1, [pc, #176]	@ (8001b7c <TestGPIOPins+0xc0>)
 8001aca:	482d      	ldr	r0, [pc, #180]	@ (8001b80 <TestGPIOPins+0xc4>)
 8001acc:	f00b f8de 	bl	800cc8c <HAL_UART_Transmit>

    // Test CS pin - should control chip select
    for(int i = 0; i < 5; i++) {
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ad4:	e028      	b.n	8001b28 <TestGPIOPins+0x6c>
        HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);  // LOW
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001adc:	4829      	ldr	r0, [pc, #164]	@ (8001b84 <TestGPIOPins+0xc8>)
 8001ade:	f005 f8f9 	bl	8006cd4 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8001ae2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ae6:	f000 ff43 	bl	8002970 <HAL_Delay>
        HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);    // HIGH
 8001aea:	2201      	movs	r2, #1
 8001aec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001af0:	4824      	ldr	r0, [pc, #144]	@ (8001b84 <TestGPIOPins+0xc8>)
 8001af2:	f005 f8ef 	bl	8006cd4 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8001af6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001afa:	f000 ff39 	bl	8002970 <HAL_Delay>
        char msg[30];
        sprintf(msg, "CS Toggle %d\r\n", i);
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b02:	4921      	ldr	r1, [pc, #132]	@ (8001b88 <TestGPIOPins+0xcc>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f00c fce3 	bl	800e4d0 <siprintf>
        HAL_UART_Transmit(&huart3, msg, strlen(msg), HAL_MAX_DELAY);
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fbe7 	bl	80002e0 <strlen>
 8001b12:	4603      	mov	r3, r0
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	1d39      	adds	r1, r7, #4
 8001b18:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1c:	4818      	ldr	r0, [pc, #96]	@ (8001b80 <TestGPIOPins+0xc4>)
 8001b1e:	f00b f8b5 	bl	800cc8c <HAL_UART_Transmit>
    for(int i = 0; i < 5; i++) {
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	3301      	adds	r3, #1
 8001b26:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	ddd3      	ble.n	8001ad6 <TestGPIOPins+0x1a>
    }

    // Test RESET pin - this should cause visible display reset
    HAL_UART_Transmit(&huart3, "Testing RESET pin...\r\n", 22, HAL_MAX_DELAY);
 8001b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b32:	2216      	movs	r2, #22
 8001b34:	4915      	ldr	r1, [pc, #84]	@ (8001b8c <TestGPIOPins+0xd0>)
 8001b36:	4812      	ldr	r0, [pc, #72]	@ (8001b80 <TestGPIOPins+0xc4>)
 8001b38:	f00b f8a8 	bl	800cc8c <HAL_UART_Transmit>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);  // Should reset display
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b42:	4810      	ldr	r0, [pc, #64]	@ (8001b84 <TestGPIOPins+0xc8>)
 8001b44:	f005 f8c6 	bl	8006cd4 <HAL_GPIO_WritePin>
    HAL_Delay(2000);  // Display should go off/change
 8001b48:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b4c:	f000 ff10 	bl	8002970 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);    // Should restore display
 8001b50:	2201      	movs	r2, #1
 8001b52:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b56:	480b      	ldr	r0, [pc, #44]	@ (8001b84 <TestGPIOPins+0xc8>)
 8001b58:	f005 f8bc 	bl	8006cd4 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 8001b5c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b60:	f000 ff06 	bl	8002970 <HAL_Delay>

    HAL_UART_Transmit(&huart3, "GPIO test complete\r\n", 21, HAL_MAX_DELAY);
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	2215      	movs	r2, #21
 8001b6a:	4909      	ldr	r1, [pc, #36]	@ (8001b90 <TestGPIOPins+0xd4>)
 8001b6c:	4804      	ldr	r0, [pc, #16]	@ (8001b80 <TestGPIOPins+0xc4>)
 8001b6e:	f00b f88d 	bl	800cc8c <HAL_UART_Transmit>
}
 8001b72:	bf00      	nop
 8001b74:	3728      	adds	r7, #40	@ 0x28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	0800ef74 	.word	0x0800ef74
 8001b80:	240004ec 	.word	0x240004ec
 8001b84:	58021800 	.word	0x58021800
 8001b88:	0800ef8c 	.word	0x0800ef8c
 8001b8c:	0800ef9c 	.word	0x0800ef9c
 8001b90:	0800efb4 	.word	0x0800efb4

08001b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08c      	sub	sp, #48	@ 0x30
 8001b98:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b9a:	f000 fe57 	bl	800284c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b9e:	f000 f87b 	bl	8001c98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba2:	f7ff fb29 	bl	80011f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ba6:	f7ff f9e5 	bl	8000f74 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001baa:	f000 fd77 	bl	800269c <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 8001bae:	f7ff f889 	bl	8000cc4 <MX_DCMI_Init>
  MX_I2C1_Init();
 8001bb2:	f7ff fc6f 	bl	8001494 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001bb6:	f000 f8ff 	bl	8001db8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001bba:	f000 fb5f 	bl	800227c <MX_TIM1_Init>
  MX_TIM4_Init();
 8001bbe:	f000 fbb3 	bl	8002328 <MX_TIM4_Init>
  MX_ETH_Init();
 8001bc2:	f7ff f9ff 	bl	8000fc4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001bc6:	f000 fca3 	bl	8002510 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  extern DCMI_HandleTypeDef hdcmi;
  HAL_StatusTypeDef cameraConfigStatus = OV5640_PowerUpSequence();
 8001bca:	f7fe fdcb 	bl	8000764 <OV5640_PowerUpSequence>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t reg1 = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  OV5640_ReadReg(OV5640_POLARITY_CTRL,&reg1);
 8001bda:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8001bde:	4619      	mov	r1, r3
 8001be0:	f244 7040 	movw	r0, #18240	@ 0x4740
 8001be4:	f7fe fd8a 	bl	80006fc <OV5640_ReadReg>
  char buffReg1[20];
  sprintf(buffReg1, "Polarity: %d\r\n", reg1);
 8001be8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001bec:	461a      	mov	r2, r3
 8001bee:	f107 0318 	add.w	r3, r7, #24
 8001bf2:	4924      	ldr	r1, [pc, #144]	@ (8001c84 <main+0xf0>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00c fc6b 	bl	800e4d0 <siprintf>
  HAL_UART_Transmit(&huart3, buffReg1, strlen(buffReg1), HAL_MAX_DELAY);
 8001bfa:	f107 0318 	add.w	r3, r7, #24
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe fb6e 	bl	80002e0 <strlen>
 8001c04:	4603      	mov	r3, r0
 8001c06:	b29a      	uxth	r2, r3
 8001c08:	f107 0118 	add.w	r1, r7, #24
 8001c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c10:	481d      	ldr	r0, [pc, #116]	@ (8001c88 <main+0xf4>)
 8001c12:	f00b f83b 	bl	800cc8c <HAL_UART_Transmit>
	if (cameraConfigStatus == HAL_OK){
 8001c16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d113      	bne.n	8001c46 <main+0xb2>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin, GPIO_PIN_SET);
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c24:	4819      	ldr	r0, [pc, #100]	@ (8001c8c <main+0xf8>)
 8001c26:	f005 f855 	bl	8006cd4 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001c2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c2e:	f000 fe9f 	bl	8002970 <HAL_Delay>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin,GPIO_PIN_RESET);
 8001c32:	2200      	movs	r2, #0
 8001c34:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c38:	4814      	ldr	r0, [pc, #80]	@ (8001c8c <main+0xf8>)
 8001c3a:	f005 f84b 	bl	8006cd4 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 8001c3e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001c42:	f000 fe95 	bl	8002970 <HAL_Delay>
	}

	frameCapture();
 8001c46:	f7fe ff41 	bl	8000acc <frameCapture>
	char buffFrame[20];
	sprintf(buffFrame, "Start of image: 0x%08lX,\n\r", DCMI->DR);
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <main+0xfc>)
 8001c4c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	4910      	ldr	r1, [pc, #64]	@ (8001c94 <main+0x100>)
 8001c52:	4618      	mov	r0, r3
 8001c54:	f00c fc3c 	bl	800e4d0 <siprintf>
	HAL_UART_Transmit(&huart3, buffFrame, strlen(buffFrame),HAL_MAX_DELAY);
 8001c58:	1d3b      	adds	r3, r7, #4
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe fb40 	bl	80002e0 <strlen>
 8001c60:	4603      	mov	r3, r0
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	1d39      	adds	r1, r7, #4
 8001c66:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6a:	4807      	ldr	r0, [pc, #28]	@ (8001c88 <main+0xf4>)
 8001c6c:	f00b f80e 	bl	800cc8c <HAL_UART_Transmit>
	ILI9341_Init_Complete();
 8001c70:	f7ff fd76 	bl	8001760 <ILI9341_Init_Complete>
	ILI9341_TestDisplay();
 8001c74:	f7ff feb6 	bl	80019e4 <ILI9341_TestDisplay>
	TestSPIBasic();
 8001c78:	f7ff feda 	bl	8001a30 <TestSPIBasic>
	TestGPIOPins();
 8001c7c:	f7ff ff1e 	bl	8001abc <TestGPIOPins>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001c80:	bf00      	nop
 8001c82:	e7fd      	b.n	8001c80 <main+0xec>
 8001c84:	0800efcc 	.word	0x0800efcc
 8001c88:	240004ec 	.word	0x240004ec
 8001c8c:	58020400 	.word	0x58020400
 8001c90:	48020000 	.word	0x48020000
 8001c94:	0800efdc 	.word	0x0800efdc

08001c98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b09c      	sub	sp, #112	@ 0x70
 8001c9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ca2:	224c      	movs	r2, #76	@ 0x4c
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f00c fc34 	bl	800e514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	2220      	movs	r2, #32
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f00c fc2e 	bl	800e514 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001cb8:	2002      	movs	r0, #2
 8001cba:	f005 ff9d 	bl	8007bf8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	603b      	str	r3, [r7, #0]
 8001cc2:	4b37      	ldr	r3, [pc, #220]	@ (8001da0 <SystemClock_Config+0x108>)
 8001cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc6:	4a36      	ldr	r2, [pc, #216]	@ (8001da0 <SystemClock_Config+0x108>)
 8001cc8:	f023 0301 	bic.w	r3, r3, #1
 8001ccc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001cce:	4b34      	ldr	r3, [pc, #208]	@ (8001da0 <SystemClock_Config+0x108>)
 8001cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	603b      	str	r3, [r7, #0]
 8001cd8:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <SystemClock_Config+0x10c>)
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	4a31      	ldr	r2, [pc, #196]	@ (8001da4 <SystemClock_Config+0x10c>)
 8001cde:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <SystemClock_Config+0x10c>)
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001cf0:	bf00      	nop
 8001cf2:	4b2c      	ldr	r3, [pc, #176]	@ (8001da4 <SystemClock_Config+0x10c>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cfe:	d1f8      	bne.n	8001cf2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001d00:	2321      	movs	r3, #33	@ 0x21
 8001d02:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d08:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d12:	2302      	movs	r3, #2
 8001d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001d16:	2302      	movs	r3, #2
 8001d18:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001d1a:	2360      	movs	r3, #96	@ 0x60
 8001d1c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8001d22:	2318      	movs	r3, #24
 8001d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d26:	2302      	movs	r3, #2
 8001d28:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001d2a:	2308      	movs	r3, #8
 8001d2c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f005 ffa6 	bl	8007c8c <HAL_RCC_OscConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001d46:	f000 f831 	bl	8001dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4a:	233f      	movs	r3, #63	@ 0x3f
 8001d4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f006 fbe6 	bl	8008540 <HAL_RCC_ClockConfig>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d001      	beq.n	8001d7e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001d7a:	f000 f817 	bl	8001dac <Error_Handler>
  }
  __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <SystemClock_Config+0x110>)
 8001d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d82:	4a09      	ldr	r2, [pc, #36]	@ (8001da8 <SystemClock_Config+0x110>)
 8001d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d88:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8001d8a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001d8e:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 8001d92:	2000      	movs	r0, #0
 8001d94:	f006 fd8a 	bl	80088ac <HAL_RCC_MCOConfig>
}
 8001d98:	bf00      	nop
 8001d9a:	3770      	adds	r7, #112	@ 0x70
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	58000400 	.word	0x58000400
 8001da4:	58024800 	.word	0x58024800
 8001da8:	58024400 	.word	0x58024400

08001dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db0:	b672      	cpsid	i
}
 8001db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001db4:	bf00      	nop
 8001db6:	e7fd      	b.n	8001db4 <Error_Handler+0x8>

08001db8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001dbc:	4b27      	ldr	r3, [pc, #156]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dbe:	4a28      	ldr	r2, [pc, #160]	@ (8001e60 <MX_SPI1_Init+0xa8>)
 8001dc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001dc2:	4b26      	ldr	r3, [pc, #152]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dc4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001dc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001dca:	4b24      	ldr	r3, [pc, #144]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dcc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001dd0:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dd2:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dd8:	4b20      	ldr	r3, [pc, #128]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dde:	4b1f      	ldr	r3, [pc, #124]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001de4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001de6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001dea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001dec:	4b1b      	ldr	r3, [pc, #108]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001df2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001df8:	4b18      	ldr	r3, [pc, #96]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dfe:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001e04:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e0c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e10:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e12:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e24:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e30:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e36:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e48:	4804      	ldr	r0, [pc, #16]	@ (8001e5c <MX_SPI1_Init+0xa4>)
 8001e4a:	f008 fd9b 	bl	800a984 <HAL_SPI_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001e54:	f7ff ffaa 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	24000350 	.word	0x24000350
 8001e60:	40013000 	.word	0x40013000

08001e64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b0bc      	sub	sp, #240	@ 0xf0
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e7c:	f107 0318 	add.w	r3, r7, #24
 8001e80:	22c0      	movs	r2, #192	@ 0xc0
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00c fb45 	bl	800e514 <memset>
  if(spiHandle->Instance==SPI1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a58      	ldr	r2, [pc, #352]	@ (8001ff0 <HAL_SPI_MspInit+0x18c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	f040 80a8 	bne.w	8001fe6 <HAL_SPI_MspInit+0x182>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001e96:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ea6:	f107 0318 	add.w	r3, r7, #24
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f006 ff3e 	bl	8008d2c <HAL_RCCEx_PeriphCLKConfig>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8001eb6:	f7ff ff79 	bl	8001dac <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001eba:	4b4e      	ldr	r3, [pc, #312]	@ (8001ff4 <HAL_SPI_MspInit+0x190>)
 8001ebc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ec0:	4a4c      	ldr	r2, [pc, #304]	@ (8001ff4 <HAL_SPI_MspInit+0x190>)
 8001ec2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ec6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001eca:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff4 <HAL_SPI_MspInit+0x190>)
 8001ecc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ed0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed8:	4b46      	ldr	r3, [pc, #280]	@ (8001ff4 <HAL_SPI_MspInit+0x190>)
 8001eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ede:	4a45      	ldr	r2, [pc, #276]	@ (8001ff4 <HAL_SPI_MspInit+0x190>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ee8:	4b42      	ldr	r3, [pc, #264]	@ (8001ff4 <HAL_SPI_MspInit+0x190>)
 8001eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ef6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff4 <HAL_SPI_MspInit+0x190>)
 8001ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001efc:	4a3d      	ldr	r2, [pc, #244]	@ (8001ff4 <HAL_SPI_MspInit+0x190>)
 8001efe:	f043 0308 	orr.w	r3, r3, #8
 8001f02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f06:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff4 <HAL_SPI_MspInit+0x190>)
 8001f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f0c:	f003 0308 	and.w	r3, r3, #8
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f14:	2320      	movs	r3, #32
 8001f16:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f20:	2302      	movs	r3, #2
 8001f22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f2c:	2305      	movs	r3, #5
 8001f2e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f32:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f36:	4619      	mov	r1, r3
 8001f38:	482f      	ldr	r0, [pc, #188]	@ (8001ff8 <HAL_SPI_MspInit+0x194>)
 8001f3a:	f004 fd1b 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f3e:	2380      	movs	r3, #128	@ 0x80
 8001f40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f44:	2302      	movs	r3, #2
 8001f46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f50:	2303      	movs	r3, #3
 8001f52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001f56:	2305      	movs	r3, #5
 8001f58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f5c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f60:	4619      	mov	r1, r3
 8001f62:	4826      	ldr	r0, [pc, #152]	@ (8001ffc <HAL_SPI_MspInit+0x198>)
 8001f64:	f004 fd06 	bl	8006974 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Stream1;
 8001f68:	4b25      	ldr	r3, [pc, #148]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001f6a:	4a26      	ldr	r2, [pc, #152]	@ (8002004 <HAL_SPI_MspInit+0x1a0>)
 8001f6c:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8001f6e:	4b24      	ldr	r3, [pc, #144]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001f70:	2226      	movs	r2, #38	@ 0x26
 8001f72:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f74:	4b22      	ldr	r3, [pc, #136]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001f76:	2240      	movs	r2, #64	@ 0x40
 8001f78:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f7a:	4b21      	ldr	r3, [pc, #132]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f80:	4b1f      	ldr	r3, [pc, #124]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001f82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f86:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f88:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001f94:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001f9a:	4b19      	ldr	r3, [pc, #100]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001f9c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fa0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001fa2:	4b17      	ldr	r3, [pc, #92]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001fa8:	4b15      	ldr	r3, [pc, #84]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001faa:	2203      	movs	r2, #3
 8001fac:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001fae:	4b14      	ldr	r3, [pc, #80]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001fb4:	4b12      	ldr	r3, [pc, #72]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001fba:	4811      	ldr	r0, [pc, #68]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001fbc:	f001 f8d8 	bl	8003170 <HAL_DMA_Init>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_SPI_MspInit+0x166>
    {
      Error_Handler();
 8001fc6:	f7ff fef1 	bl	8001dac <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a0c      	ldr	r2, [pc, #48]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001fce:	679a      	str	r2, [r3, #120]	@ 0x78
 8001fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8002000 <HAL_SPI_MspInit+0x19c>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2023      	movs	r0, #35	@ 0x23
 8001fdc:	f000 fdfd 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fe0:	2023      	movs	r0, #35	@ 0x23
 8001fe2:	f000 fe14 	bl	8002c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	37f0      	adds	r7, #240	@ 0xf0
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40013000 	.word	0x40013000
 8001ff4:	58024400 	.word	0x58024400
 8001ff8:	58020000 	.word	0x58020000
 8001ffc:	58020c00 	.word	0x58020c00
 8002000:	240003d8 	.word	0x240003d8
 8002004:	40020028 	.word	0x40020028

08002008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200e:	4b0a      	ldr	r3, [pc, #40]	@ (8002038 <HAL_MspInit+0x30>)
 8002010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002014:	4a08      	ldr	r2, [pc, #32]	@ (8002038 <HAL_MspInit+0x30>)
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800201e:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <HAL_MspInit+0x30>)
 8002020:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	58024400 	.word	0x58024400

0800203c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <NMI_Handler+0x4>

08002044 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <HardFault_Handler+0x4>

0800204c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <MemManage_Handler+0x4>

08002054 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <BusFault_Handler+0x4>

0800205c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <UsageFault_Handler+0x4>

08002064 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr

08002072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002092:	f000 fc4d 	bl	8002930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
	...

0800209c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80020a0:	4802      	ldr	r0, [pc, #8]	@ (80020ac <DMA1_Stream0_IRQHandler+0x10>)
 80020a2:	f002 f871 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	24000194 	.word	0x24000194

080020b0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80020b4:	4802      	ldr	r0, [pc, #8]	@ (80020c0 <DMA1_Stream1_IRQHandler+0x10>)
 80020b6:	f002 f867 	bl	8004188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	240003d8 	.word	0x240003d8

080020c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80020c8:	4802      	ldr	r0, [pc, #8]	@ (80020d4 <TIM4_IRQHandler+0x10>)
 80020ca:	f009 fc37 	bl	800b93c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80020ce:	bf00      	nop
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	240004a0 	.word	0x240004a0

080020d8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80020dc:	4802      	ldr	r0, [pc, #8]	@ (80020e8 <SPI1_IRQHandler+0x10>)
 80020de:	f008 ff63 	bl	800afa8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	24000350 	.word	0x24000350

080020ec <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80020f0:	4802      	ldr	r0, [pc, #8]	@ (80020fc <DCMI_IRQHandler+0x10>)
 80020f2:	f000 fee3 	bl	8002ebc <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	24000144 	.word	0x24000144

08002100 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8002108:	4a14      	ldr	r2, [pc, #80]	@ (800215c <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800210a:	4b15      	ldr	r3, [pc, #84]	@ (8002160 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8002114:	4b13      	ldr	r3, [pc, #76]	@ (8002164 <_sbrk+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 800211c:	4b11      	ldr	r3, [pc, #68]	@ (8002164 <_sbrk+0x64>)
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <_sbrk+0x68>)
 8002120:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8002122:	4b10      	ldr	r3, [pc, #64]	@ (8002164 <_sbrk+0x64>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4413      	add	r3, r2
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	429a      	cmp	r2, r3
 800212e:	d207      	bcs.n	8002140 <_sbrk+0x40>
		errno = ENOMEM;
 8002130:	f00c f9f8 	bl	800e524 <__errno>
 8002134:	4603      	mov	r3, r0
 8002136:	220c      	movs	r2, #12
 8002138:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	e009      	b.n	8002154 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 8002140:	4b08      	ldr	r3, [pc, #32]	@ (8002164 <_sbrk+0x64>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8002146:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <_sbrk+0x64>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4413      	add	r3, r2
 800214e:	4a05      	ldr	r2, [pc, #20]	@ (8002164 <_sbrk+0x64>)
 8002150:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 8002152:	68fb      	ldr	r3, [r7, #12]
}
 8002154:	4618      	mov	r0, r3
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	24080000 	.word	0x24080000
 8002160:	00000400 	.word	0x00000400
 8002164:	24000450 	.word	0x24000450
 8002168:	24000bb0 	.word	0x24000bb0

0800216c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8002170:	4b37      	ldr	r3, [pc, #220]	@ (8002250 <SystemInit+0xe4>)
 8002172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002176:	4a36      	ldr	r2, [pc, #216]	@ (8002250 <SystemInit+0xe4>)
 8002178:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800217c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8002180:	4b34      	ldr	r3, [pc, #208]	@ (8002254 <SystemInit+0xe8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	2b06      	cmp	r3, #6
 800218a:	d807      	bhi.n	800219c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800218c:	4b31      	ldr	r3, [pc, #196]	@ (8002254 <SystemInit+0xe8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 030f 	bic.w	r3, r3, #15
 8002194:	4a2f      	ldr	r2, [pc, #188]	@ (8002254 <SystemInit+0xe8>)
 8002196:	f043 0307 	orr.w	r3, r3, #7
 800219a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 800219c:	4b2e      	ldr	r3, [pc, #184]	@ (8002258 <SystemInit+0xec>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002258 <SystemInit+0xec>)
 80021a2:	f043 0301 	orr.w	r3, r3, #1
 80021a6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80021a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002258 <SystemInit+0xec>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80021ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002258 <SystemInit+0xec>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4929      	ldr	r1, [pc, #164]	@ (8002258 <SystemInit+0xec>)
 80021b4:	4b29      	ldr	r3, [pc, #164]	@ (800225c <SystemInit+0xf0>)
 80021b6:	4013      	ands	r3, r2
 80021b8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80021ba:	4b26      	ldr	r3, [pc, #152]	@ (8002254 <SystemInit+0xe8>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80021c6:	4b23      	ldr	r3, [pc, #140]	@ (8002254 <SystemInit+0xe8>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f023 030f 	bic.w	r3, r3, #15
 80021ce:	4a21      	ldr	r2, [pc, #132]	@ (8002254 <SystemInit+0xe8>)
 80021d0:	f043 0307 	orr.w	r3, r3, #7
 80021d4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80021d6:	4b20      	ldr	r3, [pc, #128]	@ (8002258 <SystemInit+0xec>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80021dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002258 <SystemInit+0xec>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80021e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002258 <SystemInit+0xec>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80021e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002258 <SystemInit+0xec>)
 80021ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002260 <SystemInit+0xf4>)
 80021ec:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80021ee:	4b1a      	ldr	r3, [pc, #104]	@ (8002258 <SystemInit+0xec>)
 80021f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002264 <SystemInit+0xf8>)
 80021f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80021f4:	4b18      	ldr	r3, [pc, #96]	@ (8002258 <SystemInit+0xec>)
 80021f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002268 <SystemInit+0xfc>)
 80021f8:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80021fa:	4b17      	ldr	r3, [pc, #92]	@ (8002258 <SystemInit+0xec>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8002200:	4b15      	ldr	r3, [pc, #84]	@ (8002258 <SystemInit+0xec>)
 8002202:	4a19      	ldr	r2, [pc, #100]	@ (8002268 <SystemInit+0xfc>)
 8002204:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8002206:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <SystemInit+0xec>)
 8002208:	2200      	movs	r2, #0
 800220a:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <SystemInit+0xec>)
 800220e:	4a16      	ldr	r2, [pc, #88]	@ (8002268 <SystemInit+0xfc>)
 8002210:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <SystemInit+0xec>)
 8002214:	2200      	movs	r2, #0
 8002216:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8002218:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <SystemInit+0xec>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a0e      	ldr	r2, [pc, #56]	@ (8002258 <SystemInit+0xec>)
 800221e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002222:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <SystemInit+0xec>)
 8002226:	2200      	movs	r2, #0
 8002228:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800222a:	4b10      	ldr	r3, [pc, #64]	@ (800226c <SystemInit+0x100>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <SystemInit+0x104>)
 8002230:	4013      	ands	r3, r2
 8002232:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002236:	d202      	bcs.n	800223e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <SystemInit+0x108>)
 800223a:	2201      	movs	r2, #1
 800223c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800223e:	4b0e      	ldr	r3, [pc, #56]	@ (8002278 <SystemInit+0x10c>)
 8002240:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002244:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00
 8002254:	52002000 	.word	0x52002000
 8002258:	58024400 	.word	0x58024400
 800225c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002260:	02020200 	.word	0x02020200
 8002264:	01ff0000 	.word	0x01ff0000
 8002268:	01010280 	.word	0x01010280
 800226c:	5c001000 	.word	0x5c001000
 8002270:	ffff0000 	.word	0xffff0000
 8002274:	51008108 	.word	0x51008108
 8002278:	52004000 	.word	0x52004000

0800227c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	60da      	str	r2, [r3, #12]
 8002290:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002292:	463b      	mov	r3, r7
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800229c:	4b20      	ldr	r3, [pc, #128]	@ (8002320 <MX_TIM1_Init+0xa4>)
 800229e:	4a21      	ldr	r2, [pc, #132]	@ (8002324 <MX_TIM1_Init+0xa8>)
 80022a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002320 <MX_TIM1_Init+0xa4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002320 <MX_TIM1_Init+0xa4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002320 <MX_TIM1_Init+0xa4>)
 80022b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <MX_TIM1_Init+0xa4>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022bc:	4b18      	ldr	r3, [pc, #96]	@ (8002320 <MX_TIM1_Init+0xa4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <MX_TIM1_Init+0xa4>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022c8:	4815      	ldr	r0, [pc, #84]	@ (8002320 <MX_TIM1_Init+0xa4>)
 80022ca:	f009 f970 	bl	800b5ae <HAL_TIM_Base_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80022d4:	f7ff fd6a 	bl	8001dac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	4619      	mov	r1, r3
 80022e6:	480e      	ldr	r0, [pc, #56]	@ (8002320 <MX_TIM1_Init+0xa4>)
 80022e8:	f009 fe3c 	bl	800bf64 <HAL_TIM_SlaveConfigSynchro>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80022f2:	f7ff fd5b 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f6:	2300      	movs	r3, #0
 80022f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002302:	463b      	mov	r3, r7
 8002304:	4619      	mov	r1, r3
 8002306:	4806      	ldr	r0, [pc, #24]	@ (8002320 <MX_TIM1_Init+0xa4>)
 8002308:	f00a fbc4 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002312:	f7ff fd4b 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	3720      	adds	r7, #32
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	24000454 	.word	0x24000454
 8002324:	40010000 	.word	0x40010000

08002328 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08e      	sub	sp, #56	@ 0x38
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
 8002336:	605a      	str	r2, [r3, #4]
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233c:	f107 031c 	add.w	r3, r7, #28
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002348:	463b      	mov	r3, r7
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	611a      	str	r2, [r3, #16]
 8002356:	615a      	str	r2, [r3, #20]
 8002358:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800235a:	4b2c      	ldr	r3, [pc, #176]	@ (800240c <MX_TIM4_Init+0xe4>)
 800235c:	4a2c      	ldr	r2, [pc, #176]	@ (8002410 <MX_TIM4_Init+0xe8>)
 800235e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8002360:	4b2a      	ldr	r3, [pc, #168]	@ (800240c <MX_TIM4_Init+0xe4>)
 8002362:	2201      	movs	r2, #1
 8002364:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002366:	4b29      	ldr	r3, [pc, #164]	@ (800240c <MX_TIM4_Init+0xe4>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3;
 800236c:	4b27      	ldr	r3, [pc, #156]	@ (800240c <MX_TIM4_Init+0xe4>)
 800236e:	2203      	movs	r2, #3
 8002370:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002372:	4b26      	ldr	r3, [pc, #152]	@ (800240c <MX_TIM4_Init+0xe4>)
 8002374:	2200      	movs	r2, #0
 8002376:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002378:	4b24      	ldr	r3, [pc, #144]	@ (800240c <MX_TIM4_Init+0xe4>)
 800237a:	2200      	movs	r2, #0
 800237c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800237e:	4823      	ldr	r0, [pc, #140]	@ (800240c <MX_TIM4_Init+0xe4>)
 8002380:	f009 f915 	bl	800b5ae <HAL_TIM_Base_Init>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800238a:	f7ff fd0f 	bl	8001dac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800238e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002392:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002394:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002398:	4619      	mov	r1, r3
 800239a:	481c      	ldr	r0, [pc, #112]	@ (800240c <MX_TIM4_Init+0xe4>)
 800239c:	f009 fcea 	bl	800bd74 <HAL_TIM_ConfigClockSource>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80023a6:	f7ff fd01 	bl	8001dac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80023aa:	4818      	ldr	r0, [pc, #96]	@ (800240c <MX_TIM4_Init+0xe4>)
 80023ac:	f009 f956 	bl	800b65c <HAL_TIM_PWM_Init>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80023b6:	f7ff fcf9 	bl	8001dac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023c2:	f107 031c 	add.w	r3, r7, #28
 80023c6:	4619      	mov	r1, r3
 80023c8:	4810      	ldr	r0, [pc, #64]	@ (800240c <MX_TIM4_Init+0xe4>)
 80023ca:	f00a fb63 	bl	800ca94 <HAL_TIMEx_MasterConfigSynchronization>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80023d4:	f7ff fcea 	bl	8001dac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d8:	2360      	movs	r3, #96	@ 0x60
 80023da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2;
 80023dc:	2302      	movs	r3, #2
 80023de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80023e4:	2304      	movs	r3, #4
 80023e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023e8:	463b      	mov	r3, r7
 80023ea:	2200      	movs	r2, #0
 80023ec:	4619      	mov	r1, r3
 80023ee:	4807      	ldr	r0, [pc, #28]	@ (800240c <MX_TIM4_Init+0xe4>)
 80023f0:	f009 fbac 	bl	800bb4c <HAL_TIM_PWM_ConfigChannel>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80023fa:	f7ff fcd7 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80023fe:	4803      	ldr	r0, [pc, #12]	@ (800240c <MX_TIM4_Init+0xe4>)
 8002400:	f000 f848 	bl	8002494 <HAL_TIM_MspPostInit>

}
 8002404:	bf00      	nop
 8002406:	3738      	adds	r7, #56	@ 0x38
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	240004a0 	.word	0x240004a0
 8002410:	40000800 	.word	0x40000800

08002414 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a19      	ldr	r2, [pc, #100]	@ (8002488 <HAL_TIM_Base_MspInit+0x74>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d10f      	bne.n	8002446 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002426:	4b19      	ldr	r3, [pc, #100]	@ (800248c <HAL_TIM_Base_MspInit+0x78>)
 8002428:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800242c:	4a17      	ldr	r2, [pc, #92]	@ (800248c <HAL_TIM_Base_MspInit+0x78>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002436:	4b15      	ldr	r3, [pc, #84]	@ (800248c <HAL_TIM_Base_MspInit+0x78>)
 8002438:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002444:	e01b      	b.n	800247e <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM4)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a11      	ldr	r2, [pc, #68]	@ (8002490 <HAL_TIM_Base_MspInit+0x7c>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d116      	bne.n	800247e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002450:	4b0e      	ldr	r3, [pc, #56]	@ (800248c <HAL_TIM_Base_MspInit+0x78>)
 8002452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002456:	4a0d      	ldr	r2, [pc, #52]	@ (800248c <HAL_TIM_Base_MspInit+0x78>)
 8002458:	f043 0304 	orr.w	r3, r3, #4
 800245c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002460:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <HAL_TIM_Base_MspInit+0x78>)
 8002462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	2100      	movs	r1, #0
 8002472:	201e      	movs	r0, #30
 8002474:	f000 fbb1 	bl	8002bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002478:	201e      	movs	r0, #30
 800247a:	f000 fbc8 	bl	8002c0e <HAL_NVIC_EnableIRQ>
}
 800247e:	bf00      	nop
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	40010000 	.word	0x40010000
 800248c:	58024400 	.word	0x58024400
 8002490:	40000800 	.word	0x40000800

08002494 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 030c 	add.w	r3, r7, #12
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
 80024aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a14      	ldr	r2, [pc, #80]	@ (8002504 <HAL_TIM_MspPostInit+0x70>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d121      	bne.n	80024fa <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <HAL_TIM_MspPostInit+0x74>)
 80024b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024bc:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <HAL_TIM_MspPostInit+0x74>)
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024c6:	4b10      	ldr	r3, [pc, #64]	@ (8002508 <HAL_TIM_MspPostInit+0x74>)
 80024c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024d4:	2340      	movs	r3, #64	@ 0x40
 80024d6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e0:	2303      	movs	r3, #3
 80024e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80024e4:	2302      	movs	r3, #2
 80024e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e8:	f107 030c 	add.w	r3, r7, #12
 80024ec:	4619      	mov	r1, r3
 80024ee:	4807      	ldr	r0, [pc, #28]	@ (800250c <HAL_TIM_MspPostInit+0x78>)
 80024f0:	f004 fa40 	bl	8006974 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB6_FMP);
 80024f4:	2010      	movs	r0, #16
 80024f6:	f005 fa2b 	bl	8007950 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80024fa:	bf00      	nop
 80024fc:	3720      	adds	r7, #32
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40000800 	.word	0x40000800
 8002508:	58024400 	.word	0x58024400
 800250c:	58020400 	.word	0x58020400

08002510 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002514:	4b22      	ldr	r3, [pc, #136]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 8002516:	4a23      	ldr	r2, [pc, #140]	@ (80025a4 <MX_USART3_UART_Init+0x94>)
 8002518:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800251a:	4b21      	ldr	r3, [pc, #132]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 800251c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002520:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002522:	4b1f      	ldr	r3, [pc, #124]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 8002524:	2200      	movs	r2, #0
 8002526:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002528:	4b1d      	ldr	r3, [pc, #116]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 800252a:	2200      	movs	r2, #0
 800252c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800252e:	4b1c      	ldr	r3, [pc, #112]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 8002530:	2200      	movs	r2, #0
 8002532:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002534:	4b1a      	ldr	r3, [pc, #104]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 8002536:	220c      	movs	r2, #12
 8002538:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253a:	4b19      	ldr	r3, [pc, #100]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 800253c:	2200      	movs	r2, #0
 800253e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	4b17      	ldr	r3, [pc, #92]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 8002542:	2200      	movs	r2, #0
 8002544:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002546:	4b16      	ldr	r3, [pc, #88]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800254c:	4b14      	ldr	r3, [pc, #80]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 800254e:	2200      	movs	r2, #0
 8002550:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002552:	4b13      	ldr	r3, [pc, #76]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 8002554:	2200      	movs	r2, #0
 8002556:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002558:	4811      	ldr	r0, [pc, #68]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 800255a:	f00a fb47 	bl	800cbec <HAL_UART_Init>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002564:	f7ff fc22 	bl	8001dac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002568:	2100      	movs	r1, #0
 800256a:	480d      	ldr	r0, [pc, #52]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 800256c:	f00b fbdd 	bl	800dd2a <HAL_UARTEx_SetTxFifoThreshold>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002576:	f7ff fc19 	bl	8001dac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800257a:	2100      	movs	r1, #0
 800257c:	4808      	ldr	r0, [pc, #32]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 800257e:	f00b fc12 	bl	800dda6 <HAL_UARTEx_SetRxFifoThreshold>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002588:	f7ff fc10 	bl	8001dac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800258c:	4804      	ldr	r0, [pc, #16]	@ (80025a0 <MX_USART3_UART_Init+0x90>)
 800258e:	f00b fb93 	bl	800dcb8 <HAL_UARTEx_DisableFifoMode>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002598:	f7ff fc08 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	240004ec 	.word	0x240004ec
 80025a4:	40004800 	.word	0x40004800

080025a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b0ba      	sub	sp, #232	@ 0xe8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80025b4:	2200      	movs	r2, #0
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	605a      	str	r2, [r3, #4]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	60da      	str	r2, [r3, #12]
 80025be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025c0:	f107 0310 	add.w	r3, r7, #16
 80025c4:	22c0      	movs	r2, #192	@ 0xc0
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f00b ffa3 	bl	800e514 <memset>
  if(uartHandle->Instance==USART3)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002690 <HAL_UART_MspInit+0xe8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d156      	bne.n	8002686 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025d8:	f04f 0202 	mov.w	r2, #2
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80025e4:	2304      	movs	r3, #4
 80025e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 240;
 80025e8:	23f0      	movs	r3, #240	@ 0xf0
 80025ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 80025ec:	2308      	movs	r3, #8
 80025ee:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 80025f0:	2308      	movs	r3, #8
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80025f4:	2302      	movs	r3, #2
 80025f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80025f8:	2340      	movs	r3, #64	@ 0x40
 80025fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80025fc:	2300      	movs	r3, #0
 80025fe:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002600:	2300      	movs	r3, #0
 8002602:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8002604:	2301      	movs	r3, #1
 8002606:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800260a:	f107 0310 	add.w	r3, r7, #16
 800260e:	4618      	mov	r0, r3
 8002610:	f006 fb8c 	bl	8008d2c <HAL_RCCEx_PeriphCLKConfig>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 800261a:	f7ff fbc7 	bl	8001dac <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800261e:	4b1d      	ldr	r3, [pc, #116]	@ (8002694 <HAL_UART_MspInit+0xec>)
 8002620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002624:	4a1b      	ldr	r2, [pc, #108]	@ (8002694 <HAL_UART_MspInit+0xec>)
 8002626:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800262a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800262e:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <HAL_UART_MspInit+0xec>)
 8002630:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002634:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002638:	60fb      	str	r3, [r7, #12]
 800263a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800263c:	4b15      	ldr	r3, [pc, #84]	@ (8002694 <HAL_UART_MspInit+0xec>)
 800263e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002642:	4a14      	ldr	r2, [pc, #80]	@ (8002694 <HAL_UART_MspInit+0xec>)
 8002644:	f043 0308 	orr.w	r3, r3, #8
 8002648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800264c:	4b11      	ldr	r3, [pc, #68]	@ (8002694 <HAL_UART_MspInit+0xec>)
 800264e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002652:	f003 0308 	and.w	r3, r3, #8
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800265a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800265e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002662:	2302      	movs	r3, #2
 8002664:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266e:	2300      	movs	r3, #0
 8002670:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002674:	2307      	movs	r3, #7
 8002676:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800267a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800267e:	4619      	mov	r1, r3
 8002680:	4805      	ldr	r0, [pc, #20]	@ (8002698 <HAL_UART_MspInit+0xf0>)
 8002682:	f004 f977 	bl	8006974 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002686:	bf00      	nop
 8002688:	37e8      	adds	r7, #232	@ 0xe8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40004800 	.word	0x40004800
 8002694:	58024400 	.word	0x58024400
 8002698:	58020c00 	.word	0x58020c00

0800269c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80026a0:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026a2:	4a16      	ldr	r2, [pc, #88]	@ (80026fc <MX_USB_OTG_FS_PCD_Init+0x60>)
 80026a4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80026a6:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026a8:	2209      	movs	r2, #9
 80026aa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80026ac:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026ae:	2202      	movs	r2, #2
 80026b0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80026b2:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80026b8:	4b0f      	ldr	r3, [pc, #60]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026ba:	2202      	movs	r2, #2
 80026bc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80026be:	4b0e      	ldr	r3, [pc, #56]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80026c4:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80026ca:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80026d0:	4b09      	ldr	r3, [pc, #36]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80026d6:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026d8:	2201      	movs	r2, #1
 80026da:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80026dc:	4b06      	ldr	r3, [pc, #24]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80026e2:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80026e4:	f005 f958 	bl	8007998 <HAL_PCD_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80026ee:	f7ff fb5d 	bl	8001dac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	24000580 	.word	0x24000580
 80026fc:	40080000 	.word	0x40080000

08002700 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b0ba      	sub	sp, #232	@ 0xe8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002718:	f107 0310 	add.w	r3, r7, #16
 800271c:	22c0      	movs	r2, #192	@ 0xc0
 800271e:	2100      	movs	r1, #0
 8002720:	4618      	mov	r0, r3
 8002722:	f00b fef7 	bl	800e514 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a30      	ldr	r2, [pc, #192]	@ (80027ec <HAL_PCD_MspInit+0xec>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d159      	bne.n	80027e4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002730:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002734:	f04f 0300 	mov.w	r3, #0
 8002738:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800273c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8002740:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002744:	f107 0310 	add.w	r3, r7, #16
 8002748:	4618      	mov	r0, r3
 800274a:	f006 faef 	bl	8008d2c <HAL_RCCEx_PeriphCLKConfig>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002754:	f7ff fb2a 	bl	8001dac <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002758:	f005 fa88 	bl	8007c6c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275c:	4b24      	ldr	r3, [pc, #144]	@ (80027f0 <HAL_PCD_MspInit+0xf0>)
 800275e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002762:	4a23      	ldr	r2, [pc, #140]	@ (80027f0 <HAL_PCD_MspInit+0xf0>)
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800276c:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <HAL_PCD_MspInit+0xf0>)
 800276e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800277a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800277e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002782:	2300      	movs	r3, #0
 8002784:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002788:	2300      	movs	r3, #0
 800278a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800278e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002792:	4619      	mov	r1, r3
 8002794:	4817      	ldr	r0, [pc, #92]	@ (80027f4 <HAL_PCD_MspInit+0xf4>)
 8002796:	f004 f8ed 	bl	8006974 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800279a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800279e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ae:	2300      	movs	r3, #0
 80027b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80027b4:	230a      	movs	r3, #10
 80027b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80027be:	4619      	mov	r1, r3
 80027c0:	480c      	ldr	r0, [pc, #48]	@ (80027f4 <HAL_PCD_MspInit+0xf4>)
 80027c2:	f004 f8d7 	bl	8006974 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80027c6:	4b0a      	ldr	r3, [pc, #40]	@ (80027f0 <HAL_PCD_MspInit+0xf0>)
 80027c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027cc:	4a08      	ldr	r2, [pc, #32]	@ (80027f0 <HAL_PCD_MspInit+0xf0>)
 80027ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80027d2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <HAL_PCD_MspInit+0xf0>)
 80027d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80027e4:	bf00      	nop
 80027e6:	37e8      	adds	r7, #232	@ 0xe8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40080000 	.word	0x40080000
 80027f0:	58024400 	.word	0x58024400
 80027f4:	58020000 	.word	0x58020000

080027f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80027f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002830 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027fc:	f7ff fcb6 	bl	800216c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002800:	480c      	ldr	r0, [pc, #48]	@ (8002834 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002802:	490d      	ldr	r1, [pc, #52]	@ (8002838 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002804:	4a0d      	ldr	r2, [pc, #52]	@ (800283c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002808:	e002      	b.n	8002810 <LoopCopyDataInit>

0800280a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800280a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800280c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800280e:	3304      	adds	r3, #4

08002810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002814:	d3f9      	bcc.n	800280a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002816:	4a0a      	ldr	r2, [pc, #40]	@ (8002840 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002818:	4c0a      	ldr	r4, [pc, #40]	@ (8002844 <LoopFillZerobss+0x22>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800281c:	e001      	b.n	8002822 <LoopFillZerobss>

0800281e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800281e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002820:	3204      	adds	r2, #4

08002822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002824:	d3fb      	bcc.n	800281e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002826:	f00b fe83 	bl	800e530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282a:	f7ff f9b3 	bl	8001b94 <main>
  bx  lr
 800282e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002830:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002834:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002838:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 800283c:	0800f098 	.word	0x0800f098
  ldr r2, =_sbss
 8002840:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8002844:	24000bb0 	.word	0x24000bb0

08002848 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <ADC3_IRQHandler>
	...

0800284c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002852:	2003      	movs	r0, #3
 8002854:	f000 f9b6 	bl	8002bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002858:	f006 f892 	bl	8008980 <HAL_RCC_GetSysClockFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b15      	ldr	r3, [pc, #84]	@ (80028b4 <HAL_Init+0x68>)
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	0a1b      	lsrs	r3, r3, #8
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	4913      	ldr	r1, [pc, #76]	@ (80028b8 <HAL_Init+0x6c>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	f003 031f 	and.w	r3, r3, #31
 8002870:	fa22 f303 	lsr.w	r3, r2, r3
 8002874:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002876:	4b0f      	ldr	r3, [pc, #60]	@ (80028b4 <HAL_Init+0x68>)
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	4a0e      	ldr	r2, [pc, #56]	@ (80028b8 <HAL_Init+0x6c>)
 8002880:	5cd3      	ldrb	r3, [r2, r3]
 8002882:	f003 031f 	and.w	r3, r3, #31
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
 800288c:	4a0b      	ldr	r2, [pc, #44]	@ (80028bc <HAL_Init+0x70>)
 800288e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002890:	4a0b      	ldr	r2, [pc, #44]	@ (80028c0 <HAL_Init+0x74>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002896:	2000      	movs	r0, #0
 8002898:	f000 f814 	bl	80028c4 <HAL_InitTick>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e002      	b.n	80028ac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028a6:	f7ff fbaf 	bl	8002008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	58024400 	.word	0x58024400
 80028b8:	0800f014 	.word	0x0800f014
 80028bc:	24000008 	.word	0x24000008
 80028c0:	24000004 	.word	0x24000004

080028c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028cc:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <HAL_InitTick+0x60>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e021      	b.n	800291c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028d8:	4b13      	ldr	r3, [pc, #76]	@ (8002928 <HAL_InitTick+0x64>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b11      	ldr	r3, [pc, #68]	@ (8002924 <HAL_InitTick+0x60>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 f99b 	bl	8002c2a <HAL_SYSTICK_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e00e      	b.n	800291c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b0f      	cmp	r3, #15
 8002902:	d80a      	bhi.n	800291a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002904:	2200      	movs	r2, #0
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	f000 f965 	bl	8002bda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002910:	4a06      	ldr	r2, [pc, #24]	@ (800292c <HAL_InitTick+0x68>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	e000      	b.n	800291c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
}
 800291c:	4618      	mov	r0, r3
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	24000010 	.word	0x24000010
 8002928:	24000004 	.word	0x24000004
 800292c:	2400000c 	.word	0x2400000c

08002930 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002934:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_IncTick+0x20>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_IncTick+0x24>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4413      	add	r3, r2
 8002940:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <HAL_IncTick+0x24>)
 8002942:	6013      	str	r3, [r2, #0]
}
 8002944:	bf00      	nop
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	24000010 	.word	0x24000010
 8002954:	24000a64 	.word	0x24000a64

08002958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return uwTick;
 800295c:	4b03      	ldr	r3, [pc, #12]	@ (800296c <HAL_GetTick+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	24000a64 	.word	0x24000a64

08002970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff ffee 	bl	8002958 <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d005      	beq.n	8002996 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800298a:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <HAL_Delay+0x44>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4413      	add	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002996:	bf00      	nop
 8002998:	f7ff ffde 	bl	8002958 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d8f7      	bhi.n	8002998 <HAL_Delay+0x28>
  {
  }
}
 80029a8:	bf00      	nop
 80029aa:	bf00      	nop
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	24000010 	.word	0x24000010

080029b8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029bc:	4b03      	ldr	r3, [pc, #12]	@ (80029cc <HAL_GetREVID+0x14>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	0c1b      	lsrs	r3, r3, #16
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	5c001000 	.word	0x5c001000

080029d0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80029d8:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80029e0:	4904      	ldr	r1, [pc, #16]	@ (80029f4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	604b      	str	r3, [r1, #4]
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	58000400 	.word	0x58000400

080029f8 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002a02:	4b07      	ldr	r3, [pc, #28]	@ (8002a20 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	4904      	ldr	r1, [pc, #16]	@ (8002a20 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
}
 8002a14:	bf00      	nop
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr
 8002a20:	58000400 	.word	0x58000400

08002a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a34:	4b0b      	ldr	r3, [pc, #44]	@ (8002a64 <__NVIC_SetPriorityGrouping+0x40>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a40:	4013      	ands	r3, r2
 8002a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a4c:	4b06      	ldr	r3, [pc, #24]	@ (8002a68 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a52:	4a04      	ldr	r2, [pc, #16]	@ (8002a64 <__NVIC_SetPriorityGrouping+0x40>)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	60d3      	str	r3, [r2, #12]
}
 8002a58:	bf00      	nop
 8002a5a:	3714      	adds	r7, #20
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	e000ed00 	.word	0xe000ed00
 8002a68:	05fa0000 	.word	0x05fa0000

08002a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a70:	4b04      	ldr	r3, [pc, #16]	@ (8002a84 <__NVIC_GetPriorityGrouping+0x18>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	0a1b      	lsrs	r3, r3, #8
 8002a76:	f003 0307 	and.w	r3, r3, #7
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	db0b      	blt.n	8002ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	f003 021f 	and.w	r2, r3, #31
 8002aa0:	4907      	ldr	r1, [pc, #28]	@ (8002ac0 <__NVIC_EnableIRQ+0x38>)
 8002aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	2001      	movs	r0, #1
 8002aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8002aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000e100 	.word	0xe000e100

08002ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	6039      	str	r1, [r7, #0]
 8002ace:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	db0a      	blt.n	8002aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	490c      	ldr	r1, [pc, #48]	@ (8002b10 <__NVIC_SetPriority+0x4c>)
 8002ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ae2:	0112      	lsls	r2, r2, #4
 8002ae4:	b2d2      	uxtb	r2, r2
 8002ae6:	440b      	add	r3, r1
 8002ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aec:	e00a      	b.n	8002b04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4908      	ldr	r1, [pc, #32]	@ (8002b14 <__NVIC_SetPriority+0x50>)
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	3b04      	subs	r3, #4
 8002afc:	0112      	lsls	r2, r2, #4
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	440b      	add	r3, r1
 8002b02:	761a      	strb	r2, [r3, #24]
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr
 8002b10:	e000e100 	.word	0xe000e100
 8002b14:	e000ed00 	.word	0xe000ed00

08002b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b089      	sub	sp, #36	@ 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 0307 	and.w	r3, r3, #7
 8002b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	f1c3 0307 	rsb	r3, r3, #7
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	bf28      	it	cs
 8002b36:	2304      	movcs	r3, #4
 8002b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2b06      	cmp	r3, #6
 8002b40:	d902      	bls.n	8002b48 <NVIC_EncodePriority+0x30>
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3b03      	subs	r3, #3
 8002b46:	e000      	b.n	8002b4a <NVIC_EncodePriority+0x32>
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	401a      	ands	r2, r3
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b60:	f04f 31ff 	mov.w	r1, #4294967295
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6a:	43d9      	mvns	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	4313      	orrs	r3, r2
         );
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3724      	adds	r7, #36	@ 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b90:	d301      	bcc.n	8002b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00f      	b.n	8002bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b96:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc0 <SysTick_Config+0x40>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b9e:	210f      	movs	r1, #15
 8002ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba4:	f7ff ff8e 	bl	8002ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba8:	4b05      	ldr	r3, [pc, #20]	@ (8002bc0 <SysTick_Config+0x40>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bae:	4b04      	ldr	r3, [pc, #16]	@ (8002bc0 <SysTick_Config+0x40>)
 8002bb0:	2207      	movs	r2, #7
 8002bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	e000e010 	.word	0xe000e010

08002bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ff29 	bl	8002a24 <__NVIC_SetPriorityGrouping>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002be8:	f7ff ff40 	bl	8002a6c <__NVIC_GetPriorityGrouping>
 8002bec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	68b9      	ldr	r1, [r7, #8]
 8002bf2:	6978      	ldr	r0, [r7, #20]
 8002bf4:	f7ff ff90 	bl	8002b18 <NVIC_EncodePriority>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff ff5f 	bl	8002ac4 <__NVIC_SetPriority>
}
 8002c06:	bf00      	nop
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b082      	sub	sp, #8
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	4603      	mov	r3, r0
 8002c16:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff ff33 	bl	8002a88 <__NVIC_EnableIRQ>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b082      	sub	sp, #8
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f7ff ffa4 	bl	8002b80 <SysTick_Config>
 8002c38:	4603      	mov	r3, r0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e069      	b.n	8002d2a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe f862 	bl	8000d2c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	6819      	ldr	r1, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	4b2a      	ldr	r3, [pc, #168]	@ (8002d34 <HAL_DCMI_Init+0xf0>)
 8002c8a:	400b      	ands	r3, r1
 8002c8c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002ca2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002cae:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	699b      	ldr	r3, [r3, #24]
 8002cb4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002cba:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002cc6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ccc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002cd2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b10      	cmp	r3, #16
 8002ce2:	d112      	bne.n	8002d0a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	7f1b      	ldrb	r3, [r3, #28]
 8002ce8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7f5b      	ldrb	r3, [r3, #29]
 8002cee:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002cf0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	7f9b      	ldrb	r3, [r3, #30]
 8002cf6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002cf8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	7fdb      	ldrb	r3, [r3, #31]
 8002d00:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002d06:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002d08:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f042 021e 	orr.w	r2, r2, #30
 8002d18:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	ffe0f007 	.word	0xffe0f007

08002d38 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af02      	add	r7, sp, #8
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d101      	bne.n	8002d54 <HAL_DCMI_Start_DMA+0x1c>
 8002d50:	2302      	movs	r3, #2
 8002d52:	e0ab      	b.n	8002eac <HAL_DCMI_Start_DMA+0x174>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002d72:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0202 	bic.w	r2, r2, #2
 8002d82:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6819      	ldr	r1, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d98:	4a46      	ldr	r2, [pc, #280]	@ (8002eb4 <HAL_DCMI_Start_DMA+0x17c>)
 8002d9a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da0:	4a45      	ldr	r2, [pc, #276]	@ (8002eb8 <HAL_DCMI_Start_DMA+0x180>)
 8002da2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da8:	2200      	movs	r2, #0
 8002daa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dca:	d219      	bcs.n	8002e00 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3328      	adds	r3, #40	@ 0x28
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	f000 fd24 	bl	8003828 <HAL_DMA_Start_IT>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d055      	beq.n	8002e92 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2240      	movs	r2, #64	@ 0x40
 8002dea:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e055      	b.n	8002eac <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e04:	4a2b      	ldr	r2, [pc, #172]	@ (8002eb4 <HAL_DCMI_Start_DMA+0x17c>)
 8002e06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8002e1a:	e009      	b.n	8002e30 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e20:	085a      	lsrs	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2a:	005a      	lsls	r2, r3, #1
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e38:	d2f0      	bcs.n	8002e1c <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3e:	1e9a      	subs	r2, r3, #2
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	3328      	adds	r3, #40	@ 0x28
 8002e62:	4619      	mov	r1, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	f002 fc9d 	bl	80057ac <HAL_DMAEx_MultiBufferStart_IT>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00c      	beq.n	8002e92 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2240      	movs	r2, #64	@ 0x40
 8002e7c:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e00c      	b.n	8002eac <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0201 	orr.w	r2, r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	08003011 	.word	0x08003011
 8002eb8:	08003137 	.word	0x08003137

08002ebc <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0304 	and.w	r3, r3, #4
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d016      	beq.n	8002f04 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2204      	movs	r2, #4
 8002edc:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee2:	f043 0202 	orr.w	r2, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2204      	movs	r2, #4
 8002eee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef6:	4a31      	ldr	r2, [pc, #196]	@ (8002fbc <HAL_DCMI_IRQHandler+0x100>)
 8002ef8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fefc 	bl	8003cfc <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d016      	beq.n	8002f3c <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2202      	movs	r2, #2
 8002f14:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1a:	f043 0201 	orr.w	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2204      	movs	r2, #4
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f2e:	4a23      	ldr	r2, [pc, #140]	@ (8002fbc <HAL_DCMI_IRQHandler+0x100>)
 8002f30:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fee0 	bl	8003cfc <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d006      	beq.n	8002f54 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f840 	bl	8002fd4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d006      	beq.n	8002f6c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2208      	movs	r2, #8
 8002f64:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f83e 	bl	8002fe8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d01d      	beq.n	8002fb2 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d107      	bne.n	8002f94 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 021e 	bic.w	r2, r2, #30
 8002f92:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0201 	bic.w	r2, r2, #1
 8002fa2:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f000 f825 	bl	8002ffc <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	08003137 	.word	0x08003137

08002fc0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003022:	2b00      	cmp	r3, #0
 8003024:	d043      	beq.n	80030ae <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003032:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003038:	f003 0301 	and.w	r3, r3, #1
 800303c:	2b00      	cmp	r3, #0
 800303e:	d118      	bne.n	8003072 <DCMI_DMAXferCplt+0x62>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d015      	beq.n	8003072 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003058:	00da      	lsls	r2, r3, #3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	4413      	add	r3, r2
 800305e:	2200      	movs	r2, #0
 8003060:	4619      	mov	r1, r3
 8003062:	f002 ff01 	bl	8005e68 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306a:	1e5a      	subs	r2, r3, #1
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003070:	e044      	b.n	80030fc <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d13c      	bne.n	80030fc <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003094:	00da      	lsls	r2, r3, #3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4413      	add	r3, r2
 800309a:	2201      	movs	r2, #1
 800309c:	4619      	mov	r1, r3
 800309e:	f002 fee3 	bl	8005e68 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a6:	1e5a      	subs	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80030ac:	e026      	b.n	80030fc <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d006      	beq.n	80030cc <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	e017      	b.n	80030fc <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10f      	bne.n	80030fc <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030e0:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e6:	0099      	lsls	r1, r3, #2
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	440a      	add	r2, r1
 80030f2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	429a      	cmp	r2, r3
 8003106:	d112      	bne.n	800312e <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0201 	orr.w	r2, r2, #1
 8003116:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b02      	cmp	r3, #2
 8003124:	d103      	bne.n	800312e <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b084      	sub	sp, #16
 800313a:	af00      	add	r7, sp, #0
 800313c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003142:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314a:	2b02      	cmp	r3, #2
 800314c:	d009      	beq.n	8003162 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800315a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff ff2c 	bl	8002fc0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003178:	f7ff fbee 	bl	8002958 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e316      	b.n	80037b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a66      	ldr	r2, [pc, #408]	@ (8003328 <HAL_DMA_Init+0x1b8>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d04a      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a65      	ldr	r2, [pc, #404]	@ (800332c <HAL_DMA_Init+0x1bc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d045      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a63      	ldr	r2, [pc, #396]	@ (8003330 <HAL_DMA_Init+0x1c0>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d040      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a62      	ldr	r2, [pc, #392]	@ (8003334 <HAL_DMA_Init+0x1c4>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d03b      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a60      	ldr	r2, [pc, #384]	@ (8003338 <HAL_DMA_Init+0x1c8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d036      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a5f      	ldr	r2, [pc, #380]	@ (800333c <HAL_DMA_Init+0x1cc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d031      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a5d      	ldr	r2, [pc, #372]	@ (8003340 <HAL_DMA_Init+0x1d0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d02c      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a5c      	ldr	r2, [pc, #368]	@ (8003344 <HAL_DMA_Init+0x1d4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d027      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a5a      	ldr	r2, [pc, #360]	@ (8003348 <HAL_DMA_Init+0x1d8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d022      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a59      	ldr	r2, [pc, #356]	@ (800334c <HAL_DMA_Init+0x1dc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d01d      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a57      	ldr	r2, [pc, #348]	@ (8003350 <HAL_DMA_Init+0x1e0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d018      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a56      	ldr	r2, [pc, #344]	@ (8003354 <HAL_DMA_Init+0x1e4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d013      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a54      	ldr	r2, [pc, #336]	@ (8003358 <HAL_DMA_Init+0x1e8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00e      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a53      	ldr	r2, [pc, #332]	@ (800335c <HAL_DMA_Init+0x1ec>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d009      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a51      	ldr	r2, [pc, #324]	@ (8003360 <HAL_DMA_Init+0x1f0>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d004      	beq.n	8003228 <HAL_DMA_Init+0xb8>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a50      	ldr	r2, [pc, #320]	@ (8003364 <HAL_DMA_Init+0x1f4>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d101      	bne.n	800322c <HAL_DMA_Init+0xbc>
 8003228:	2301      	movs	r3, #1
 800322a:	e000      	b.n	800322e <HAL_DMA_Init+0xbe>
 800322c:	2300      	movs	r3, #0
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 813b 	beq.w	80034aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a37      	ldr	r2, [pc, #220]	@ (8003328 <HAL_DMA_Init+0x1b8>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d04a      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a36      	ldr	r2, [pc, #216]	@ (800332c <HAL_DMA_Init+0x1bc>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d045      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a34      	ldr	r2, [pc, #208]	@ (8003330 <HAL_DMA_Init+0x1c0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d040      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a33      	ldr	r2, [pc, #204]	@ (8003334 <HAL_DMA_Init+0x1c4>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d03b      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a31      	ldr	r2, [pc, #196]	@ (8003338 <HAL_DMA_Init+0x1c8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d036      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a30      	ldr	r2, [pc, #192]	@ (800333c <HAL_DMA_Init+0x1cc>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d031      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a2e      	ldr	r2, [pc, #184]	@ (8003340 <HAL_DMA_Init+0x1d0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d02c      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2d      	ldr	r2, [pc, #180]	@ (8003344 <HAL_DMA_Init+0x1d4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d027      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a2b      	ldr	r2, [pc, #172]	@ (8003348 <HAL_DMA_Init+0x1d8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d022      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a2a      	ldr	r2, [pc, #168]	@ (800334c <HAL_DMA_Init+0x1dc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d01d      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a28      	ldr	r2, [pc, #160]	@ (8003350 <HAL_DMA_Init+0x1e0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d018      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a27      	ldr	r2, [pc, #156]	@ (8003354 <HAL_DMA_Init+0x1e4>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d013      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a25      	ldr	r2, [pc, #148]	@ (8003358 <HAL_DMA_Init+0x1e8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00e      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a24      	ldr	r2, [pc, #144]	@ (800335c <HAL_DMA_Init+0x1ec>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d009      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a22      	ldr	r2, [pc, #136]	@ (8003360 <HAL_DMA_Init+0x1f0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d004      	beq.n	80032e4 <HAL_DMA_Init+0x174>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a21      	ldr	r2, [pc, #132]	@ (8003364 <HAL_DMA_Init+0x1f4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d108      	bne.n	80032f6 <HAL_DMA_Init+0x186>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f022 0201 	bic.w	r2, r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	e007      	b.n	8003306 <HAL_DMA_Init+0x196>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003306:	e02f      	b.n	8003368 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003308:	f7ff fb26 	bl	8002958 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b05      	cmp	r3, #5
 8003314:	d928      	bls.n	8003368 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2203      	movs	r2, #3
 8003320:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e246      	b.n	80037b6 <HAL_DMA_Init+0x646>
 8003328:	40020010 	.word	0x40020010
 800332c:	40020028 	.word	0x40020028
 8003330:	40020040 	.word	0x40020040
 8003334:	40020058 	.word	0x40020058
 8003338:	40020070 	.word	0x40020070
 800333c:	40020088 	.word	0x40020088
 8003340:	400200a0 	.word	0x400200a0
 8003344:	400200b8 	.word	0x400200b8
 8003348:	40020410 	.word	0x40020410
 800334c:	40020428 	.word	0x40020428
 8003350:	40020440 	.word	0x40020440
 8003354:	40020458 	.word	0x40020458
 8003358:	40020470 	.word	0x40020470
 800335c:	40020488 	.word	0x40020488
 8003360:	400204a0 	.word	0x400204a0
 8003364:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1c8      	bne.n	8003308 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	4b83      	ldr	r3, [pc, #524]	@ (8003590 <HAL_DMA_Init+0x420>)
 8003382:	4013      	ands	r3, r2
 8003384:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800338e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d107      	bne.n	80033cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c4:	4313      	orrs	r3, r2
 80033c6:	697a      	ldr	r2, [r7, #20]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80033cc:	4b71      	ldr	r3, [pc, #452]	@ (8003594 <HAL_DMA_Init+0x424>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	4b71      	ldr	r3, [pc, #452]	@ (8003598 <HAL_DMA_Init+0x428>)
 80033d2:	4013      	ands	r3, r2
 80033d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033d8:	d328      	bcc.n	800342c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b28      	cmp	r3, #40	@ 0x28
 80033e0:	d903      	bls.n	80033ea <HAL_DMA_Init+0x27a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80033e8:	d917      	bls.n	800341a <HAL_DMA_Init+0x2aa>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80033f0:	d903      	bls.n	80033fa <HAL_DMA_Init+0x28a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b42      	cmp	r3, #66	@ 0x42
 80033f8:	d90f      	bls.n	800341a <HAL_DMA_Init+0x2aa>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b46      	cmp	r3, #70	@ 0x46
 8003400:	d903      	bls.n	800340a <HAL_DMA_Init+0x29a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b48      	cmp	r3, #72	@ 0x48
 8003408:	d907      	bls.n	800341a <HAL_DMA_Init+0x2aa>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003410:	d905      	bls.n	800341e <HAL_DMA_Init+0x2ae>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b52      	cmp	r3, #82	@ 0x52
 8003418:	d801      	bhi.n	800341e <HAL_DMA_Init+0x2ae>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_DMA_Init+0x2b0>
 800341e:	2300      	movs	r3, #0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800342a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 0307 	bic.w	r3, r3, #7
 8003442:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	2b04      	cmp	r3, #4
 8003454:	d117      	bne.n	8003486 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00e      	beq.n	8003486 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f002 f815 	bl	8005498 <DMA_CheckFifoParam>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2240      	movs	r2, #64	@ 0x40
 8003478:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e197      	b.n	80037b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f001 ff50 	bl	8005334 <DMA_CalcBaseAndBitshift>
 8003494:	4603      	mov	r3, r0
 8003496:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349c:	f003 031f 	and.w	r3, r3, #31
 80034a0:	223f      	movs	r2, #63	@ 0x3f
 80034a2:	409a      	lsls	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	e0cd      	b.n	8003646 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a3b      	ldr	r2, [pc, #236]	@ (800359c <HAL_DMA_Init+0x42c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d022      	beq.n	80034fa <HAL_DMA_Init+0x38a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a39      	ldr	r2, [pc, #228]	@ (80035a0 <HAL_DMA_Init+0x430>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01d      	beq.n	80034fa <HAL_DMA_Init+0x38a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a38      	ldr	r2, [pc, #224]	@ (80035a4 <HAL_DMA_Init+0x434>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d018      	beq.n	80034fa <HAL_DMA_Init+0x38a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a36      	ldr	r2, [pc, #216]	@ (80035a8 <HAL_DMA_Init+0x438>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_DMA_Init+0x38a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a35      	ldr	r2, [pc, #212]	@ (80035ac <HAL_DMA_Init+0x43c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_DMA_Init+0x38a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a33      	ldr	r2, [pc, #204]	@ (80035b0 <HAL_DMA_Init+0x440>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_DMA_Init+0x38a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a32      	ldr	r2, [pc, #200]	@ (80035b4 <HAL_DMA_Init+0x444>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_DMA_Init+0x38a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a30      	ldr	r2, [pc, #192]	@ (80035b8 <HAL_DMA_Init+0x448>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_DMA_Init+0x38e>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_DMA_Init+0x390>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8097 	beq.w	8003634 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a24      	ldr	r2, [pc, #144]	@ (800359c <HAL_DMA_Init+0x42c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d021      	beq.n	8003554 <HAL_DMA_Init+0x3e4>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a22      	ldr	r2, [pc, #136]	@ (80035a0 <HAL_DMA_Init+0x430>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d01c      	beq.n	8003554 <HAL_DMA_Init+0x3e4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a21      	ldr	r2, [pc, #132]	@ (80035a4 <HAL_DMA_Init+0x434>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d017      	beq.n	8003554 <HAL_DMA_Init+0x3e4>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a1f      	ldr	r2, [pc, #124]	@ (80035a8 <HAL_DMA_Init+0x438>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d012      	beq.n	8003554 <HAL_DMA_Init+0x3e4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1e      	ldr	r2, [pc, #120]	@ (80035ac <HAL_DMA_Init+0x43c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d00d      	beq.n	8003554 <HAL_DMA_Init+0x3e4>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1c      	ldr	r2, [pc, #112]	@ (80035b0 <HAL_DMA_Init+0x440>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d008      	beq.n	8003554 <HAL_DMA_Init+0x3e4>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a1b      	ldr	r2, [pc, #108]	@ (80035b4 <HAL_DMA_Init+0x444>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d003      	beq.n	8003554 <HAL_DMA_Init+0x3e4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a19      	ldr	r2, [pc, #100]	@ (80035b8 <HAL_DMA_Init+0x448>)
 8003552:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4b13      	ldr	r3, [pc, #76]	@ (80035bc <HAL_DMA_Init+0x44c>)
 8003570:	4013      	ands	r3, r2
 8003572:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	2b40      	cmp	r3, #64	@ 0x40
 800357a:	d021      	beq.n	80035c0 <HAL_DMA_Init+0x450>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b80      	cmp	r3, #128	@ 0x80
 8003582:	d102      	bne.n	800358a <HAL_DMA_Init+0x41a>
 8003584:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003588:	e01b      	b.n	80035c2 <HAL_DMA_Init+0x452>
 800358a:	2300      	movs	r3, #0
 800358c:	e019      	b.n	80035c2 <HAL_DMA_Init+0x452>
 800358e:	bf00      	nop
 8003590:	fe10803f 	.word	0xfe10803f
 8003594:	5c001000 	.word	0x5c001000
 8003598:	ffff0000 	.word	0xffff0000
 800359c:	58025408 	.word	0x58025408
 80035a0:	5802541c 	.word	0x5802541c
 80035a4:	58025430 	.word	0x58025430
 80035a8:	58025444 	.word	0x58025444
 80035ac:	58025458 	.word	0x58025458
 80035b0:	5802546c 	.word	0x5802546c
 80035b4:	58025480 	.word	0x58025480
 80035b8:	58025494 	.word	0x58025494
 80035bc:	fffe000f 	.word	0xfffe000f
 80035c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68d2      	ldr	r2, [r2, #12]
 80035c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80035d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80035d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80035e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80035e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80035f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80035f2:	697a      	ldr	r2, [r7, #20]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	697a      	ldr	r2, [r7, #20]
 80035fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	4b6e      	ldr	r3, [pc, #440]	@ (80037c0 <HAL_DMA_Init+0x650>)
 8003608:	4413      	add	r3, r2
 800360a:	4a6e      	ldr	r2, [pc, #440]	@ (80037c4 <HAL_DMA_Init+0x654>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	091b      	lsrs	r3, r3, #4
 8003612:	009a      	lsls	r2, r3, #2
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f001 fe8b 	bl	8005334 <DMA_CalcBaseAndBitshift>
 800361e:	4603      	mov	r3, r0
 8003620:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	2201      	movs	r2, #1
 800362c:	409a      	lsls	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	e008      	b.n	8003646 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2240      	movs	r2, #64	@ 0x40
 8003638:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2203      	movs	r2, #3
 800363e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e0b7      	b.n	80037b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a5f      	ldr	r2, [pc, #380]	@ (80037c8 <HAL_DMA_Init+0x658>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d072      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a5d      	ldr	r2, [pc, #372]	@ (80037cc <HAL_DMA_Init+0x65c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d06d      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a5c      	ldr	r2, [pc, #368]	@ (80037d0 <HAL_DMA_Init+0x660>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d068      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a5a      	ldr	r2, [pc, #360]	@ (80037d4 <HAL_DMA_Init+0x664>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d063      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a59      	ldr	r2, [pc, #356]	@ (80037d8 <HAL_DMA_Init+0x668>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d05e      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a57      	ldr	r2, [pc, #348]	@ (80037dc <HAL_DMA_Init+0x66c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d059      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a56      	ldr	r2, [pc, #344]	@ (80037e0 <HAL_DMA_Init+0x670>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d054      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a54      	ldr	r2, [pc, #336]	@ (80037e4 <HAL_DMA_Init+0x674>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d04f      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a53      	ldr	r2, [pc, #332]	@ (80037e8 <HAL_DMA_Init+0x678>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d04a      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a51      	ldr	r2, [pc, #324]	@ (80037ec <HAL_DMA_Init+0x67c>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d045      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a50      	ldr	r2, [pc, #320]	@ (80037f0 <HAL_DMA_Init+0x680>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d040      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a4e      	ldr	r2, [pc, #312]	@ (80037f4 <HAL_DMA_Init+0x684>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d03b      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a4d      	ldr	r2, [pc, #308]	@ (80037f8 <HAL_DMA_Init+0x688>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d036      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a4b      	ldr	r2, [pc, #300]	@ (80037fc <HAL_DMA_Init+0x68c>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d031      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a4a      	ldr	r2, [pc, #296]	@ (8003800 <HAL_DMA_Init+0x690>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d02c      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a48      	ldr	r2, [pc, #288]	@ (8003804 <HAL_DMA_Init+0x694>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d027      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a47      	ldr	r2, [pc, #284]	@ (8003808 <HAL_DMA_Init+0x698>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d022      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a45      	ldr	r2, [pc, #276]	@ (800380c <HAL_DMA_Init+0x69c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d01d      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a44      	ldr	r2, [pc, #272]	@ (8003810 <HAL_DMA_Init+0x6a0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d018      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a42      	ldr	r2, [pc, #264]	@ (8003814 <HAL_DMA_Init+0x6a4>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a41      	ldr	r2, [pc, #260]	@ (8003818 <HAL_DMA_Init+0x6a8>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d00e      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a3f      	ldr	r2, [pc, #252]	@ (800381c <HAL_DMA_Init+0x6ac>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d009      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a3e      	ldr	r2, [pc, #248]	@ (8003820 <HAL_DMA_Init+0x6b0>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d004      	beq.n	8003736 <HAL_DMA_Init+0x5c6>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a3c      	ldr	r2, [pc, #240]	@ (8003824 <HAL_DMA_Init+0x6b4>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d101      	bne.n	800373a <HAL_DMA_Init+0x5ca>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <HAL_DMA_Init+0x5cc>
 800373a:	2300      	movs	r3, #0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d032      	beq.n	80037a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f001 ff25 	bl	8005590 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b80      	cmp	r3, #128	@ 0x80
 800374c:	d102      	bne.n	8003754 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375c:	b2d2      	uxtb	r2, r2
 800375e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003768:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d010      	beq.n	8003794 <HAL_DMA_Init+0x624>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b08      	cmp	r3, #8
 8003778:	d80c      	bhi.n	8003794 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f001 ffa2 	bl	80056c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	e008      	b.n	80037a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3718      	adds	r7, #24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	a7fdabf8 	.word	0xa7fdabf8
 80037c4:	cccccccd 	.word	0xcccccccd
 80037c8:	40020010 	.word	0x40020010
 80037cc:	40020028 	.word	0x40020028
 80037d0:	40020040 	.word	0x40020040
 80037d4:	40020058 	.word	0x40020058
 80037d8:	40020070 	.word	0x40020070
 80037dc:	40020088 	.word	0x40020088
 80037e0:	400200a0 	.word	0x400200a0
 80037e4:	400200b8 	.word	0x400200b8
 80037e8:	40020410 	.word	0x40020410
 80037ec:	40020428 	.word	0x40020428
 80037f0:	40020440 	.word	0x40020440
 80037f4:	40020458 	.word	0x40020458
 80037f8:	40020470 	.word	0x40020470
 80037fc:	40020488 	.word	0x40020488
 8003800:	400204a0 	.word	0x400204a0
 8003804:	400204b8 	.word	0x400204b8
 8003808:	58025408 	.word	0x58025408
 800380c:	5802541c 	.word	0x5802541c
 8003810:	58025430 	.word	0x58025430
 8003814:	58025444 	.word	0x58025444
 8003818:	58025458 	.word	0x58025458
 800381c:	5802546c 	.word	0x5802546c
 8003820:	58025480 	.word	0x58025480
 8003824:	58025494 	.word	0x58025494

08003828 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e226      	b.n	8003c92 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_DMA_Start_IT+0x2a>
 800384e:	2302      	movs	r3, #2
 8003850:	e21f      	b.n	8003c92 <HAL_DMA_Start_IT+0x46a>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	f040 820a 	bne.w	8003c7c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2202      	movs	r2, #2
 800386c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a68      	ldr	r2, [pc, #416]	@ (8003a1c <HAL_DMA_Start_IT+0x1f4>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d04a      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a66      	ldr	r2, [pc, #408]	@ (8003a20 <HAL_DMA_Start_IT+0x1f8>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d045      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a65      	ldr	r2, [pc, #404]	@ (8003a24 <HAL_DMA_Start_IT+0x1fc>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d040      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a63      	ldr	r2, [pc, #396]	@ (8003a28 <HAL_DMA_Start_IT+0x200>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d03b      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a62      	ldr	r2, [pc, #392]	@ (8003a2c <HAL_DMA_Start_IT+0x204>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d036      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a60      	ldr	r2, [pc, #384]	@ (8003a30 <HAL_DMA_Start_IT+0x208>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d031      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a5f      	ldr	r2, [pc, #380]	@ (8003a34 <HAL_DMA_Start_IT+0x20c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d02c      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a5d      	ldr	r2, [pc, #372]	@ (8003a38 <HAL_DMA_Start_IT+0x210>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d027      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a5c      	ldr	r2, [pc, #368]	@ (8003a3c <HAL_DMA_Start_IT+0x214>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d022      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a5a      	ldr	r2, [pc, #360]	@ (8003a40 <HAL_DMA_Start_IT+0x218>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01d      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a59      	ldr	r2, [pc, #356]	@ (8003a44 <HAL_DMA_Start_IT+0x21c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d018      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a57      	ldr	r2, [pc, #348]	@ (8003a48 <HAL_DMA_Start_IT+0x220>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d013      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a56      	ldr	r2, [pc, #344]	@ (8003a4c <HAL_DMA_Start_IT+0x224>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d00e      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a54      	ldr	r2, [pc, #336]	@ (8003a50 <HAL_DMA_Start_IT+0x228>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d009      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a53      	ldr	r2, [pc, #332]	@ (8003a54 <HAL_DMA_Start_IT+0x22c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d004      	beq.n	8003916 <HAL_DMA_Start_IT+0xee>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a51      	ldr	r2, [pc, #324]	@ (8003a58 <HAL_DMA_Start_IT+0x230>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d108      	bne.n	8003928 <HAL_DMA_Start_IT+0x100>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0201 	bic.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	e007      	b.n	8003938 <HAL_DMA_Start_IT+0x110>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f001 fb4c 	bl	8004fdc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a34      	ldr	r2, [pc, #208]	@ (8003a1c <HAL_DMA_Start_IT+0x1f4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d04a      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a33      	ldr	r2, [pc, #204]	@ (8003a20 <HAL_DMA_Start_IT+0x1f8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d045      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a31      	ldr	r2, [pc, #196]	@ (8003a24 <HAL_DMA_Start_IT+0x1fc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d040      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a30      	ldr	r2, [pc, #192]	@ (8003a28 <HAL_DMA_Start_IT+0x200>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d03b      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a2e      	ldr	r2, [pc, #184]	@ (8003a2c <HAL_DMA_Start_IT+0x204>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d036      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a2d      	ldr	r2, [pc, #180]	@ (8003a30 <HAL_DMA_Start_IT+0x208>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d031      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a2b      	ldr	r2, [pc, #172]	@ (8003a34 <HAL_DMA_Start_IT+0x20c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d02c      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a2a      	ldr	r2, [pc, #168]	@ (8003a38 <HAL_DMA_Start_IT+0x210>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d027      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a28      	ldr	r2, [pc, #160]	@ (8003a3c <HAL_DMA_Start_IT+0x214>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d022      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a27      	ldr	r2, [pc, #156]	@ (8003a40 <HAL_DMA_Start_IT+0x218>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d01d      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a25      	ldr	r2, [pc, #148]	@ (8003a44 <HAL_DMA_Start_IT+0x21c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d018      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a24      	ldr	r2, [pc, #144]	@ (8003a48 <HAL_DMA_Start_IT+0x220>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d013      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a22      	ldr	r2, [pc, #136]	@ (8003a4c <HAL_DMA_Start_IT+0x224>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00e      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a21      	ldr	r2, [pc, #132]	@ (8003a50 <HAL_DMA_Start_IT+0x228>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d009      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003a54 <HAL_DMA_Start_IT+0x22c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d004      	beq.n	80039e4 <HAL_DMA_Start_IT+0x1bc>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1e      	ldr	r2, [pc, #120]	@ (8003a58 <HAL_DMA_Start_IT+0x230>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d101      	bne.n	80039e8 <HAL_DMA_Start_IT+0x1c0>
 80039e4:	2301      	movs	r3, #1
 80039e6:	e000      	b.n	80039ea <HAL_DMA_Start_IT+0x1c2>
 80039e8:	2300      	movs	r3, #0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d036      	beq.n	8003a5c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f023 021e 	bic.w	r2, r3, #30
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0216 	orr.w	r2, r2, #22
 8003a00:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d03e      	beq.n	8003a88 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0208 	orr.w	r2, r2, #8
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e035      	b.n	8003a88 <HAL_DMA_Start_IT+0x260>
 8003a1c:	40020010 	.word	0x40020010
 8003a20:	40020028 	.word	0x40020028
 8003a24:	40020040 	.word	0x40020040
 8003a28:	40020058 	.word	0x40020058
 8003a2c:	40020070 	.word	0x40020070
 8003a30:	40020088 	.word	0x40020088
 8003a34:	400200a0 	.word	0x400200a0
 8003a38:	400200b8 	.word	0x400200b8
 8003a3c:	40020410 	.word	0x40020410
 8003a40:	40020428 	.word	0x40020428
 8003a44:	40020440 	.word	0x40020440
 8003a48:	40020458 	.word	0x40020458
 8003a4c:	40020470 	.word	0x40020470
 8003a50:	40020488 	.word	0x40020488
 8003a54:	400204a0 	.word	0x400204a0
 8003a58:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 020e 	bic.w	r2, r3, #14
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 020a 	orr.w	r2, r2, #10
 8003a6e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0204 	orr.w	r2, r2, #4
 8003a86:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a83      	ldr	r2, [pc, #524]	@ (8003c9c <HAL_DMA_Start_IT+0x474>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d072      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a82      	ldr	r2, [pc, #520]	@ (8003ca0 <HAL_DMA_Start_IT+0x478>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d06d      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a80      	ldr	r2, [pc, #512]	@ (8003ca4 <HAL_DMA_Start_IT+0x47c>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d068      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a7f      	ldr	r2, [pc, #508]	@ (8003ca8 <HAL_DMA_Start_IT+0x480>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d063      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a7d      	ldr	r2, [pc, #500]	@ (8003cac <HAL_DMA_Start_IT+0x484>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d05e      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a7c      	ldr	r2, [pc, #496]	@ (8003cb0 <HAL_DMA_Start_IT+0x488>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d059      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a7a      	ldr	r2, [pc, #488]	@ (8003cb4 <HAL_DMA_Start_IT+0x48c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d054      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a79      	ldr	r2, [pc, #484]	@ (8003cb8 <HAL_DMA_Start_IT+0x490>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d04f      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a77      	ldr	r2, [pc, #476]	@ (8003cbc <HAL_DMA_Start_IT+0x494>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d04a      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a76      	ldr	r2, [pc, #472]	@ (8003cc0 <HAL_DMA_Start_IT+0x498>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d045      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a74      	ldr	r2, [pc, #464]	@ (8003cc4 <HAL_DMA_Start_IT+0x49c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d040      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a73      	ldr	r2, [pc, #460]	@ (8003cc8 <HAL_DMA_Start_IT+0x4a0>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d03b      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a71      	ldr	r2, [pc, #452]	@ (8003ccc <HAL_DMA_Start_IT+0x4a4>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d036      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a70      	ldr	r2, [pc, #448]	@ (8003cd0 <HAL_DMA_Start_IT+0x4a8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d031      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a6e      	ldr	r2, [pc, #440]	@ (8003cd4 <HAL_DMA_Start_IT+0x4ac>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d02c      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a6d      	ldr	r2, [pc, #436]	@ (8003cd8 <HAL_DMA_Start_IT+0x4b0>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d027      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a6b      	ldr	r2, [pc, #428]	@ (8003cdc <HAL_DMA_Start_IT+0x4b4>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d022      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a6a      	ldr	r2, [pc, #424]	@ (8003ce0 <HAL_DMA_Start_IT+0x4b8>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d01d      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a68      	ldr	r2, [pc, #416]	@ (8003ce4 <HAL_DMA_Start_IT+0x4bc>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d018      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a67      	ldr	r2, [pc, #412]	@ (8003ce8 <HAL_DMA_Start_IT+0x4c0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d013      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a65      	ldr	r2, [pc, #404]	@ (8003cec <HAL_DMA_Start_IT+0x4c4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00e      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a64      	ldr	r2, [pc, #400]	@ (8003cf0 <HAL_DMA_Start_IT+0x4c8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d009      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a62      	ldr	r2, [pc, #392]	@ (8003cf4 <HAL_DMA_Start_IT+0x4cc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <HAL_DMA_Start_IT+0x350>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a61      	ldr	r2, [pc, #388]	@ (8003cf8 <HAL_DMA_Start_IT+0x4d0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <HAL_DMA_Start_IT+0x354>
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e000      	b.n	8003b7e <HAL_DMA_Start_IT+0x356>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d01a      	beq.n	8003bb8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d007      	beq.n	8003ba0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b9a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003b9e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d007      	beq.n	8003bb8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bb6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a37      	ldr	r2, [pc, #220]	@ (8003c9c <HAL_DMA_Start_IT+0x474>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d04a      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a36      	ldr	r2, [pc, #216]	@ (8003ca0 <HAL_DMA_Start_IT+0x478>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d045      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a34      	ldr	r2, [pc, #208]	@ (8003ca4 <HAL_DMA_Start_IT+0x47c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d040      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a33      	ldr	r2, [pc, #204]	@ (8003ca8 <HAL_DMA_Start_IT+0x480>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d03b      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a31      	ldr	r2, [pc, #196]	@ (8003cac <HAL_DMA_Start_IT+0x484>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d036      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a30      	ldr	r2, [pc, #192]	@ (8003cb0 <HAL_DMA_Start_IT+0x488>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d031      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8003cb4 <HAL_DMA_Start_IT+0x48c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d02c      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb8 <HAL_DMA_Start_IT+0x490>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d027      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003cbc <HAL_DMA_Start_IT+0x494>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d022      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc0 <HAL_DMA_Start_IT+0x498>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d01d      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a28      	ldr	r2, [pc, #160]	@ (8003cc4 <HAL_DMA_Start_IT+0x49c>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d018      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a27      	ldr	r2, [pc, #156]	@ (8003cc8 <HAL_DMA_Start_IT+0x4a0>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d013      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a25      	ldr	r2, [pc, #148]	@ (8003ccc <HAL_DMA_Start_IT+0x4a4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00e      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a24      	ldr	r2, [pc, #144]	@ (8003cd0 <HAL_DMA_Start_IT+0x4a8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d009      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a22      	ldr	r2, [pc, #136]	@ (8003cd4 <HAL_DMA_Start_IT+0x4ac>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d004      	beq.n	8003c58 <HAL_DMA_Start_IT+0x430>
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a21      	ldr	r2, [pc, #132]	@ (8003cd8 <HAL_DMA_Start_IT+0x4b0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d108      	bne.n	8003c6a <HAL_DMA_Start_IT+0x442>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	e012      	b.n	8003c90 <HAL_DMA_Start_IT+0x468>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0201 	orr.w	r2, r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e009      	b.n	8003c90 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c82:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40020010 	.word	0x40020010
 8003ca0:	40020028 	.word	0x40020028
 8003ca4:	40020040 	.word	0x40020040
 8003ca8:	40020058 	.word	0x40020058
 8003cac:	40020070 	.word	0x40020070
 8003cb0:	40020088 	.word	0x40020088
 8003cb4:	400200a0 	.word	0x400200a0
 8003cb8:	400200b8 	.word	0x400200b8
 8003cbc:	40020410 	.word	0x40020410
 8003cc0:	40020428 	.word	0x40020428
 8003cc4:	40020440 	.word	0x40020440
 8003cc8:	40020458 	.word	0x40020458
 8003ccc:	40020470 	.word	0x40020470
 8003cd0:	40020488 	.word	0x40020488
 8003cd4:	400204a0 	.word	0x400204a0
 8003cd8:	400204b8 	.word	0x400204b8
 8003cdc:	58025408 	.word	0x58025408
 8003ce0:	5802541c 	.word	0x5802541c
 8003ce4:	58025430 	.word	0x58025430
 8003ce8:	58025444 	.word	0x58025444
 8003cec:	58025458 	.word	0x58025458
 8003cf0:	5802546c 	.word	0x5802546c
 8003cf4:	58025480 	.word	0x58025480
 8003cf8:	58025494 	.word	0x58025494

08003cfc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d101      	bne.n	8003d0e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e237      	b.n	800417e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d004      	beq.n	8003d24 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2280      	movs	r2, #128	@ 0x80
 8003d1e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e22c      	b.n	800417e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a5c      	ldr	r2, [pc, #368]	@ (8003e9c <HAL_DMA_Abort_IT+0x1a0>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d04a      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a5b      	ldr	r2, [pc, #364]	@ (8003ea0 <HAL_DMA_Abort_IT+0x1a4>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d045      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a59      	ldr	r2, [pc, #356]	@ (8003ea4 <HAL_DMA_Abort_IT+0x1a8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d040      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a58      	ldr	r2, [pc, #352]	@ (8003ea8 <HAL_DMA_Abort_IT+0x1ac>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d03b      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a56      	ldr	r2, [pc, #344]	@ (8003eac <HAL_DMA_Abort_IT+0x1b0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d036      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a55      	ldr	r2, [pc, #340]	@ (8003eb0 <HAL_DMA_Abort_IT+0x1b4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d031      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a53      	ldr	r2, [pc, #332]	@ (8003eb4 <HAL_DMA_Abort_IT+0x1b8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d02c      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a52      	ldr	r2, [pc, #328]	@ (8003eb8 <HAL_DMA_Abort_IT+0x1bc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d027      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a50      	ldr	r2, [pc, #320]	@ (8003ebc <HAL_DMA_Abort_IT+0x1c0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d022      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a4f      	ldr	r2, [pc, #316]	@ (8003ec0 <HAL_DMA_Abort_IT+0x1c4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d01d      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a4d      	ldr	r2, [pc, #308]	@ (8003ec4 <HAL_DMA_Abort_IT+0x1c8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d018      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a4c      	ldr	r2, [pc, #304]	@ (8003ec8 <HAL_DMA_Abort_IT+0x1cc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d013      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a4a      	ldr	r2, [pc, #296]	@ (8003ecc <HAL_DMA_Abort_IT+0x1d0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d00e      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a49      	ldr	r2, [pc, #292]	@ (8003ed0 <HAL_DMA_Abort_IT+0x1d4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a47      	ldr	r2, [pc, #284]	@ (8003ed4 <HAL_DMA_Abort_IT+0x1d8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d004      	beq.n	8003dc4 <HAL_DMA_Abort_IT+0xc8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a46      	ldr	r2, [pc, #280]	@ (8003ed8 <HAL_DMA_Abort_IT+0x1dc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_DMA_Abort_IT+0xcc>
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e000      	b.n	8003dca <HAL_DMA_Abort_IT+0xce>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 8086 	beq.w	8003edc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a2f      	ldr	r2, [pc, #188]	@ (8003e9c <HAL_DMA_Abort_IT+0x1a0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d04a      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a2e      	ldr	r2, [pc, #184]	@ (8003ea0 <HAL_DMA_Abort_IT+0x1a4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d045      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea4 <HAL_DMA_Abort_IT+0x1a8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d040      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2b      	ldr	r2, [pc, #172]	@ (8003ea8 <HAL_DMA_Abort_IT+0x1ac>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d03b      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a29      	ldr	r2, [pc, #164]	@ (8003eac <HAL_DMA_Abort_IT+0x1b0>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d036      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a28      	ldr	r2, [pc, #160]	@ (8003eb0 <HAL_DMA_Abort_IT+0x1b4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d031      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a26      	ldr	r2, [pc, #152]	@ (8003eb4 <HAL_DMA_Abort_IT+0x1b8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d02c      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a25      	ldr	r2, [pc, #148]	@ (8003eb8 <HAL_DMA_Abort_IT+0x1bc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d027      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a23      	ldr	r2, [pc, #140]	@ (8003ebc <HAL_DMA_Abort_IT+0x1c0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d022      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a22      	ldr	r2, [pc, #136]	@ (8003ec0 <HAL_DMA_Abort_IT+0x1c4>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d01d      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a20      	ldr	r2, [pc, #128]	@ (8003ec4 <HAL_DMA_Abort_IT+0x1c8>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d018      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8003ec8 <HAL_DMA_Abort_IT+0x1cc>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d013      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a1d      	ldr	r2, [pc, #116]	@ (8003ecc <HAL_DMA_Abort_IT+0x1d0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d00e      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ed0 <HAL_DMA_Abort_IT+0x1d4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d009      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1a      	ldr	r2, [pc, #104]	@ (8003ed4 <HAL_DMA_Abort_IT+0x1d8>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <HAL_DMA_Abort_IT+0x17c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a19      	ldr	r2, [pc, #100]	@ (8003ed8 <HAL_DMA_Abort_IT+0x1dc>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d108      	bne.n	8003e8a <HAL_DMA_Abort_IT+0x18e>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
 8003e88:	e178      	b.n	800417c <HAL_DMA_Abort_IT+0x480>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f022 0201 	bic.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
 8003e9a:	e16f      	b.n	800417c <HAL_DMA_Abort_IT+0x480>
 8003e9c:	40020010 	.word	0x40020010
 8003ea0:	40020028 	.word	0x40020028
 8003ea4:	40020040 	.word	0x40020040
 8003ea8:	40020058 	.word	0x40020058
 8003eac:	40020070 	.word	0x40020070
 8003eb0:	40020088 	.word	0x40020088
 8003eb4:	400200a0 	.word	0x400200a0
 8003eb8:	400200b8 	.word	0x400200b8
 8003ebc:	40020410 	.word	0x40020410
 8003ec0:	40020428 	.word	0x40020428
 8003ec4:	40020440 	.word	0x40020440
 8003ec8:	40020458 	.word	0x40020458
 8003ecc:	40020470 	.word	0x40020470
 8003ed0:	40020488 	.word	0x40020488
 8003ed4:	400204a0 	.word	0x400204a0
 8003ed8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 020e 	bic.w	r2, r2, #14
 8003eea:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a6c      	ldr	r2, [pc, #432]	@ (80040a4 <HAL_DMA_Abort_IT+0x3a8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d04a      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a6b      	ldr	r2, [pc, #428]	@ (80040a8 <HAL_DMA_Abort_IT+0x3ac>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d045      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a69      	ldr	r2, [pc, #420]	@ (80040ac <HAL_DMA_Abort_IT+0x3b0>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d040      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a68      	ldr	r2, [pc, #416]	@ (80040b0 <HAL_DMA_Abort_IT+0x3b4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d03b      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a66      	ldr	r2, [pc, #408]	@ (80040b4 <HAL_DMA_Abort_IT+0x3b8>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d036      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a65      	ldr	r2, [pc, #404]	@ (80040b8 <HAL_DMA_Abort_IT+0x3bc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d031      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a63      	ldr	r2, [pc, #396]	@ (80040bc <HAL_DMA_Abort_IT+0x3c0>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d02c      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a62      	ldr	r2, [pc, #392]	@ (80040c0 <HAL_DMA_Abort_IT+0x3c4>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d027      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a60      	ldr	r2, [pc, #384]	@ (80040c4 <HAL_DMA_Abort_IT+0x3c8>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d022      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a5f      	ldr	r2, [pc, #380]	@ (80040c8 <HAL_DMA_Abort_IT+0x3cc>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d01d      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a5d      	ldr	r2, [pc, #372]	@ (80040cc <HAL_DMA_Abort_IT+0x3d0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d018      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a5c      	ldr	r2, [pc, #368]	@ (80040d0 <HAL_DMA_Abort_IT+0x3d4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a5a      	ldr	r2, [pc, #360]	@ (80040d4 <HAL_DMA_Abort_IT+0x3d8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00e      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a59      	ldr	r2, [pc, #356]	@ (80040d8 <HAL_DMA_Abort_IT+0x3dc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d009      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a57      	ldr	r2, [pc, #348]	@ (80040dc <HAL_DMA_Abort_IT+0x3e0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_DMA_Abort_IT+0x290>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a56      	ldr	r2, [pc, #344]	@ (80040e0 <HAL_DMA_Abort_IT+0x3e4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d108      	bne.n	8003f9e <HAL_DMA_Abort_IT+0x2a2>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 0201 	bic.w	r2, r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]
 8003f9c:	e007      	b.n	8003fae <HAL_DMA_Abort_IT+0x2b2>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0201 	bic.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a3c      	ldr	r2, [pc, #240]	@ (80040a4 <HAL_DMA_Abort_IT+0x3a8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d072      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a3a      	ldr	r2, [pc, #232]	@ (80040a8 <HAL_DMA_Abort_IT+0x3ac>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d06d      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a39      	ldr	r2, [pc, #228]	@ (80040ac <HAL_DMA_Abort_IT+0x3b0>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d068      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a37      	ldr	r2, [pc, #220]	@ (80040b0 <HAL_DMA_Abort_IT+0x3b4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d063      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a36      	ldr	r2, [pc, #216]	@ (80040b4 <HAL_DMA_Abort_IT+0x3b8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d05e      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a34      	ldr	r2, [pc, #208]	@ (80040b8 <HAL_DMA_Abort_IT+0x3bc>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d059      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a33      	ldr	r2, [pc, #204]	@ (80040bc <HAL_DMA_Abort_IT+0x3c0>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d054      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a31      	ldr	r2, [pc, #196]	@ (80040c0 <HAL_DMA_Abort_IT+0x3c4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d04f      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a30      	ldr	r2, [pc, #192]	@ (80040c4 <HAL_DMA_Abort_IT+0x3c8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d04a      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a2e      	ldr	r2, [pc, #184]	@ (80040c8 <HAL_DMA_Abort_IT+0x3cc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d045      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a2d      	ldr	r2, [pc, #180]	@ (80040cc <HAL_DMA_Abort_IT+0x3d0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d040      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a2b      	ldr	r2, [pc, #172]	@ (80040d0 <HAL_DMA_Abort_IT+0x3d4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d03b      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a2a      	ldr	r2, [pc, #168]	@ (80040d4 <HAL_DMA_Abort_IT+0x3d8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d036      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a28      	ldr	r2, [pc, #160]	@ (80040d8 <HAL_DMA_Abort_IT+0x3dc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d031      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a27      	ldr	r2, [pc, #156]	@ (80040dc <HAL_DMA_Abort_IT+0x3e0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d02c      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a25      	ldr	r2, [pc, #148]	@ (80040e0 <HAL_DMA_Abort_IT+0x3e4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d027      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a24      	ldr	r2, [pc, #144]	@ (80040e4 <HAL_DMA_Abort_IT+0x3e8>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d022      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a22      	ldr	r2, [pc, #136]	@ (80040e8 <HAL_DMA_Abort_IT+0x3ec>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01d      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a21      	ldr	r2, [pc, #132]	@ (80040ec <HAL_DMA_Abort_IT+0x3f0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d018      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1f      	ldr	r2, [pc, #124]	@ (80040f0 <HAL_DMA_Abort_IT+0x3f4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d013      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a1e      	ldr	r2, [pc, #120]	@ (80040f4 <HAL_DMA_Abort_IT+0x3f8>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00e      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a1c      	ldr	r2, [pc, #112]	@ (80040f8 <HAL_DMA_Abort_IT+0x3fc>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d009      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1b      	ldr	r2, [pc, #108]	@ (80040fc <HAL_DMA_Abort_IT+0x400>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <HAL_DMA_Abort_IT+0x3a2>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a19      	ldr	r2, [pc, #100]	@ (8004100 <HAL_DMA_Abort_IT+0x404>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d132      	bne.n	8004104 <HAL_DMA_Abort_IT+0x408>
 800409e:	2301      	movs	r3, #1
 80040a0:	e031      	b.n	8004106 <HAL_DMA_Abort_IT+0x40a>
 80040a2:	bf00      	nop
 80040a4:	40020010 	.word	0x40020010
 80040a8:	40020028 	.word	0x40020028
 80040ac:	40020040 	.word	0x40020040
 80040b0:	40020058 	.word	0x40020058
 80040b4:	40020070 	.word	0x40020070
 80040b8:	40020088 	.word	0x40020088
 80040bc:	400200a0 	.word	0x400200a0
 80040c0:	400200b8 	.word	0x400200b8
 80040c4:	40020410 	.word	0x40020410
 80040c8:	40020428 	.word	0x40020428
 80040cc:	40020440 	.word	0x40020440
 80040d0:	40020458 	.word	0x40020458
 80040d4:	40020470 	.word	0x40020470
 80040d8:	40020488 	.word	0x40020488
 80040dc:	400204a0 	.word	0x400204a0
 80040e0:	400204b8 	.word	0x400204b8
 80040e4:	58025408 	.word	0x58025408
 80040e8:	5802541c 	.word	0x5802541c
 80040ec:	58025430 	.word	0x58025430
 80040f0:	58025444 	.word	0x58025444
 80040f4:	58025458 	.word	0x58025458
 80040f8:	5802546c 	.word	0x5802546c
 80040fc:	58025480 	.word	0x58025480
 8004100:	58025494 	.word	0x58025494
 8004104:	2300      	movs	r3, #0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d028      	beq.n	800415c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004114:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004118:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004124:	f003 031f 	and.w	r3, r3, #31
 8004128:	2201      	movs	r2, #1
 800412a:	409a      	lsls	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004138:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00c      	beq.n	800415c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800414c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004150:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800415a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop

08004188 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	@ 0x28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004194:	4b67      	ldr	r3, [pc, #412]	@ (8004334 <HAL_DMA_IRQHandler+0x1ac>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a67      	ldr	r2, [pc, #412]	@ (8004338 <HAL_DMA_IRQHandler+0x1b0>)
 800419a:	fba2 2303 	umull	r2, r3, r2, r3
 800419e:	0a9b      	lsrs	r3, r3, #10
 80041a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a5f      	ldr	r2, [pc, #380]	@ (800433c <HAL_DMA_IRQHandler+0x1b4>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d04a      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a5d      	ldr	r2, [pc, #372]	@ (8004340 <HAL_DMA_IRQHandler+0x1b8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d045      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a5c      	ldr	r2, [pc, #368]	@ (8004344 <HAL_DMA_IRQHandler+0x1bc>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d040      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004348 <HAL_DMA_IRQHandler+0x1c0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d03b      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a59      	ldr	r2, [pc, #356]	@ (800434c <HAL_DMA_IRQHandler+0x1c4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d036      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a57      	ldr	r2, [pc, #348]	@ (8004350 <HAL_DMA_IRQHandler+0x1c8>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d031      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a56      	ldr	r2, [pc, #344]	@ (8004354 <HAL_DMA_IRQHandler+0x1cc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d02c      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a54      	ldr	r2, [pc, #336]	@ (8004358 <HAL_DMA_IRQHandler+0x1d0>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d027      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a53      	ldr	r2, [pc, #332]	@ (800435c <HAL_DMA_IRQHandler+0x1d4>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d022      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a51      	ldr	r2, [pc, #324]	@ (8004360 <HAL_DMA_IRQHandler+0x1d8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01d      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a50      	ldr	r2, [pc, #320]	@ (8004364 <HAL_DMA_IRQHandler+0x1dc>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d018      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a4e      	ldr	r2, [pc, #312]	@ (8004368 <HAL_DMA_IRQHandler+0x1e0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d013      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a4d      	ldr	r2, [pc, #308]	@ (800436c <HAL_DMA_IRQHandler+0x1e4>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00e      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a4b      	ldr	r2, [pc, #300]	@ (8004370 <HAL_DMA_IRQHandler+0x1e8>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d009      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a4a      	ldr	r2, [pc, #296]	@ (8004374 <HAL_DMA_IRQHandler+0x1ec>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_DMA_IRQHandler+0xd2>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a48      	ldr	r2, [pc, #288]	@ (8004378 <HAL_DMA_IRQHandler+0x1f0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d101      	bne.n	800425e <HAL_DMA_IRQHandler+0xd6>
 800425a:	2301      	movs	r3, #1
 800425c:	e000      	b.n	8004260 <HAL_DMA_IRQHandler+0xd8>
 800425e:	2300      	movs	r3, #0
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 842b 	beq.w	8004abc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800426a:	f003 031f 	and.w	r3, r3, #31
 800426e:	2208      	movs	r2, #8
 8004270:	409a      	lsls	r2, r3
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 80a2 	beq.w	80043c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2e      	ldr	r2, [pc, #184]	@ (800433c <HAL_DMA_IRQHandler+0x1b4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d04a      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2d      	ldr	r2, [pc, #180]	@ (8004340 <HAL_DMA_IRQHandler+0x1b8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d045      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a2b      	ldr	r2, [pc, #172]	@ (8004344 <HAL_DMA_IRQHandler+0x1bc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d040      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2a      	ldr	r2, [pc, #168]	@ (8004348 <HAL_DMA_IRQHandler+0x1c0>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d03b      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a28      	ldr	r2, [pc, #160]	@ (800434c <HAL_DMA_IRQHandler+0x1c4>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d036      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a27      	ldr	r2, [pc, #156]	@ (8004350 <HAL_DMA_IRQHandler+0x1c8>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d031      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a25      	ldr	r2, [pc, #148]	@ (8004354 <HAL_DMA_IRQHandler+0x1cc>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d02c      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a24      	ldr	r2, [pc, #144]	@ (8004358 <HAL_DMA_IRQHandler+0x1d0>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d027      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a22      	ldr	r2, [pc, #136]	@ (800435c <HAL_DMA_IRQHandler+0x1d4>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d022      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a21      	ldr	r2, [pc, #132]	@ (8004360 <HAL_DMA_IRQHandler+0x1d8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d01d      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004364 <HAL_DMA_IRQHandler+0x1dc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d018      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004368 <HAL_DMA_IRQHandler+0x1e0>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d013      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1c      	ldr	r2, [pc, #112]	@ (800436c <HAL_DMA_IRQHandler+0x1e4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00e      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1b      	ldr	r2, [pc, #108]	@ (8004370 <HAL_DMA_IRQHandler+0x1e8>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d009      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a19      	ldr	r2, [pc, #100]	@ (8004374 <HAL_DMA_IRQHandler+0x1ec>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <HAL_DMA_IRQHandler+0x194>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a18      	ldr	r2, [pc, #96]	@ (8004378 <HAL_DMA_IRQHandler+0x1f0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d12f      	bne.n	800437c <HAL_DMA_IRQHandler+0x1f4>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	2b00      	cmp	r3, #0
 8004328:	bf14      	ite	ne
 800432a:	2301      	movne	r3, #1
 800432c:	2300      	moveq	r3, #0
 800432e:	b2db      	uxtb	r3, r3
 8004330:	e02e      	b.n	8004390 <HAL_DMA_IRQHandler+0x208>
 8004332:	bf00      	nop
 8004334:	24000004 	.word	0x24000004
 8004338:	1b4e81b5 	.word	0x1b4e81b5
 800433c:	40020010 	.word	0x40020010
 8004340:	40020028 	.word	0x40020028
 8004344:	40020040 	.word	0x40020040
 8004348:	40020058 	.word	0x40020058
 800434c:	40020070 	.word	0x40020070
 8004350:	40020088 	.word	0x40020088
 8004354:	400200a0 	.word	0x400200a0
 8004358:	400200b8 	.word	0x400200b8
 800435c:	40020410 	.word	0x40020410
 8004360:	40020428 	.word	0x40020428
 8004364:	40020440 	.word	0x40020440
 8004368:	40020458 	.word	0x40020458
 800436c:	40020470 	.word	0x40020470
 8004370:	40020488 	.word	0x40020488
 8004374:	400204a0 	.word	0x400204a0
 8004378:	400204b8 	.word	0x400204b8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	bf14      	ite	ne
 800438a:	2301      	movne	r3, #1
 800438c:	2300      	moveq	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d015      	beq.n	80043c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0204 	bic.w	r2, r2, #4
 80043a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	2208      	movs	r2, #8
 80043ae:	409a      	lsls	r2, r3
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b8:	f043 0201 	orr.w	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	fa22 f303 	lsr.w	r3, r2, r3
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d06e      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a69      	ldr	r2, [pc, #420]	@ (8004580 <HAL_DMA_IRQHandler+0x3f8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d04a      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a67      	ldr	r2, [pc, #412]	@ (8004584 <HAL_DMA_IRQHandler+0x3fc>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d045      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a66      	ldr	r2, [pc, #408]	@ (8004588 <HAL_DMA_IRQHandler+0x400>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d040      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a64      	ldr	r2, [pc, #400]	@ (800458c <HAL_DMA_IRQHandler+0x404>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d03b      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a63      	ldr	r2, [pc, #396]	@ (8004590 <HAL_DMA_IRQHandler+0x408>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d036      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a61      	ldr	r2, [pc, #388]	@ (8004594 <HAL_DMA_IRQHandler+0x40c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d031      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a60      	ldr	r2, [pc, #384]	@ (8004598 <HAL_DMA_IRQHandler+0x410>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d02c      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a5e      	ldr	r2, [pc, #376]	@ (800459c <HAL_DMA_IRQHandler+0x414>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d027      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a5d      	ldr	r2, [pc, #372]	@ (80045a0 <HAL_DMA_IRQHandler+0x418>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d022      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a5b      	ldr	r2, [pc, #364]	@ (80045a4 <HAL_DMA_IRQHandler+0x41c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d01d      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a5a      	ldr	r2, [pc, #360]	@ (80045a8 <HAL_DMA_IRQHandler+0x420>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d018      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a58      	ldr	r2, [pc, #352]	@ (80045ac <HAL_DMA_IRQHandler+0x424>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d013      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a57      	ldr	r2, [pc, #348]	@ (80045b0 <HAL_DMA_IRQHandler+0x428>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d00e      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a55      	ldr	r2, [pc, #340]	@ (80045b4 <HAL_DMA_IRQHandler+0x42c>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d009      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a54      	ldr	r2, [pc, #336]	@ (80045b8 <HAL_DMA_IRQHandler+0x430>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d004      	beq.n	8004476 <HAL_DMA_IRQHandler+0x2ee>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a52      	ldr	r2, [pc, #328]	@ (80045bc <HAL_DMA_IRQHandler+0x434>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d10a      	bne.n	800448c <HAL_DMA_IRQHandler+0x304>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004480:	2b00      	cmp	r3, #0
 8004482:	bf14      	ite	ne
 8004484:	2301      	movne	r3, #1
 8004486:	2300      	moveq	r3, #0
 8004488:	b2db      	uxtb	r3, r3
 800448a:	e003      	b.n	8004494 <HAL_DMA_IRQHandler+0x30c>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00d      	beq.n	80044b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2201      	movs	r2, #1
 80044a2:	409a      	lsls	r2, r3
 80044a4:	6a3b      	ldr	r3, [r7, #32]
 80044a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ac:	f043 0202 	orr.w	r2, r3, #2
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	2204      	movs	r2, #4
 80044be:	409a      	lsls	r2, r3
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	4013      	ands	r3, r2
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f000 808f 	beq.w	80045e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004580 <HAL_DMA_IRQHandler+0x3f8>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d04a      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004584 <HAL_DMA_IRQHandler+0x3fc>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d045      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a29      	ldr	r2, [pc, #164]	@ (8004588 <HAL_DMA_IRQHandler+0x400>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d040      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a27      	ldr	r2, [pc, #156]	@ (800458c <HAL_DMA_IRQHandler+0x404>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d03b      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a26      	ldr	r2, [pc, #152]	@ (8004590 <HAL_DMA_IRQHandler+0x408>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d036      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a24      	ldr	r2, [pc, #144]	@ (8004594 <HAL_DMA_IRQHandler+0x40c>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d031      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a23      	ldr	r2, [pc, #140]	@ (8004598 <HAL_DMA_IRQHandler+0x410>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d02c      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a21      	ldr	r2, [pc, #132]	@ (800459c <HAL_DMA_IRQHandler+0x414>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d027      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a20      	ldr	r2, [pc, #128]	@ (80045a0 <HAL_DMA_IRQHandler+0x418>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d022      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1e      	ldr	r2, [pc, #120]	@ (80045a4 <HAL_DMA_IRQHandler+0x41c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d01d      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1d      	ldr	r2, [pc, #116]	@ (80045a8 <HAL_DMA_IRQHandler+0x420>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d018      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1b      	ldr	r2, [pc, #108]	@ (80045ac <HAL_DMA_IRQHandler+0x424>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1a      	ldr	r2, [pc, #104]	@ (80045b0 <HAL_DMA_IRQHandler+0x428>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00e      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a18      	ldr	r2, [pc, #96]	@ (80045b4 <HAL_DMA_IRQHandler+0x42c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d009      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a17      	ldr	r2, [pc, #92]	@ (80045b8 <HAL_DMA_IRQHandler+0x430>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d004      	beq.n	800456a <HAL_DMA_IRQHandler+0x3e2>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a15      	ldr	r2, [pc, #84]	@ (80045bc <HAL_DMA_IRQHandler+0x434>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d12a      	bne.n	80045c0 <HAL_DMA_IRQHandler+0x438>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	e023      	b.n	80045c8 <HAL_DMA_IRQHandler+0x440>
 8004580:	40020010 	.word	0x40020010
 8004584:	40020028 	.word	0x40020028
 8004588:	40020040 	.word	0x40020040
 800458c:	40020058 	.word	0x40020058
 8004590:	40020070 	.word	0x40020070
 8004594:	40020088 	.word	0x40020088
 8004598:	400200a0 	.word	0x400200a0
 800459c:	400200b8 	.word	0x400200b8
 80045a0:	40020410 	.word	0x40020410
 80045a4:	40020428 	.word	0x40020428
 80045a8:	40020440 	.word	0x40020440
 80045ac:	40020458 	.word	0x40020458
 80045b0:	40020470 	.word	0x40020470
 80045b4:	40020488 	.word	0x40020488
 80045b8:	400204a0 	.word	0x400204a0
 80045bc:	400204b8 	.word	0x400204b8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2300      	movs	r3, #0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00d      	beq.n	80045e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	2204      	movs	r2, #4
 80045d6:	409a      	lsls	r2, r3
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045e0:	f043 0204 	orr.w	r2, r3, #4
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	2210      	movs	r2, #16
 80045f2:	409a      	lsls	r2, r3
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	4013      	ands	r3, r2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 80a6 	beq.w	800474a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a85      	ldr	r2, [pc, #532]	@ (8004818 <HAL_DMA_IRQHandler+0x690>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d04a      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a83      	ldr	r2, [pc, #524]	@ (800481c <HAL_DMA_IRQHandler+0x694>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d045      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a82      	ldr	r2, [pc, #520]	@ (8004820 <HAL_DMA_IRQHandler+0x698>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d040      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a80      	ldr	r2, [pc, #512]	@ (8004824 <HAL_DMA_IRQHandler+0x69c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d03b      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a7f      	ldr	r2, [pc, #508]	@ (8004828 <HAL_DMA_IRQHandler+0x6a0>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d036      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a7d      	ldr	r2, [pc, #500]	@ (800482c <HAL_DMA_IRQHandler+0x6a4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d031      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a7c      	ldr	r2, [pc, #496]	@ (8004830 <HAL_DMA_IRQHandler+0x6a8>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d02c      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a7a      	ldr	r2, [pc, #488]	@ (8004834 <HAL_DMA_IRQHandler+0x6ac>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d027      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a79      	ldr	r2, [pc, #484]	@ (8004838 <HAL_DMA_IRQHandler+0x6b0>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d022      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a77      	ldr	r2, [pc, #476]	@ (800483c <HAL_DMA_IRQHandler+0x6b4>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d01d      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a76      	ldr	r2, [pc, #472]	@ (8004840 <HAL_DMA_IRQHandler+0x6b8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d018      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a74      	ldr	r2, [pc, #464]	@ (8004844 <HAL_DMA_IRQHandler+0x6bc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d013      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a73      	ldr	r2, [pc, #460]	@ (8004848 <HAL_DMA_IRQHandler+0x6c0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00e      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a71      	ldr	r2, [pc, #452]	@ (800484c <HAL_DMA_IRQHandler+0x6c4>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d009      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a70      	ldr	r2, [pc, #448]	@ (8004850 <HAL_DMA_IRQHandler+0x6c8>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d004      	beq.n	800469e <HAL_DMA_IRQHandler+0x516>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a6e      	ldr	r2, [pc, #440]	@ (8004854 <HAL_DMA_IRQHandler+0x6cc>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d10a      	bne.n	80046b4 <HAL_DMA_IRQHandler+0x52c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0308 	and.w	r3, r3, #8
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e009      	b.n	80046c8 <HAL_DMA_IRQHandler+0x540>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0304 	and.w	r3, r3, #4
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bf14      	ite	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	2300      	moveq	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d03e      	beq.n	800474a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	2210      	movs	r2, #16
 80046d6:	409a      	lsls	r2, r3
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d018      	beq.n	800471c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d108      	bne.n	800470a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d024      	beq.n	800474a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	4798      	blx	r3
 8004708:	e01f      	b.n	800474a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800470e:	2b00      	cmp	r3, #0
 8004710:	d01b      	beq.n	800474a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	4798      	blx	r3
 800471a:	e016      	b.n	800474a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004726:	2b00      	cmp	r3, #0
 8004728:	d107      	bne.n	800473a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0208 	bic.w	r2, r2, #8
 8004738:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2220      	movs	r2, #32
 8004754:	409a      	lsls	r2, r3
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8110 	beq.w	8004980 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a2c      	ldr	r2, [pc, #176]	@ (8004818 <HAL_DMA_IRQHandler+0x690>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d04a      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a2b      	ldr	r2, [pc, #172]	@ (800481c <HAL_DMA_IRQHandler+0x694>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d045      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a29      	ldr	r2, [pc, #164]	@ (8004820 <HAL_DMA_IRQHandler+0x698>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d040      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a28      	ldr	r2, [pc, #160]	@ (8004824 <HAL_DMA_IRQHandler+0x69c>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d03b      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a26      	ldr	r2, [pc, #152]	@ (8004828 <HAL_DMA_IRQHandler+0x6a0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d036      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a25      	ldr	r2, [pc, #148]	@ (800482c <HAL_DMA_IRQHandler+0x6a4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d031      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a23      	ldr	r2, [pc, #140]	@ (8004830 <HAL_DMA_IRQHandler+0x6a8>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d02c      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a22      	ldr	r2, [pc, #136]	@ (8004834 <HAL_DMA_IRQHandler+0x6ac>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d027      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a20      	ldr	r2, [pc, #128]	@ (8004838 <HAL_DMA_IRQHandler+0x6b0>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d022      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a1f      	ldr	r2, [pc, #124]	@ (800483c <HAL_DMA_IRQHandler+0x6b4>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d01d      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004840 <HAL_DMA_IRQHandler+0x6b8>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d018      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004844 <HAL_DMA_IRQHandler+0x6bc>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d013      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a1a      	ldr	r2, [pc, #104]	@ (8004848 <HAL_DMA_IRQHandler+0x6c0>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00e      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a19      	ldr	r2, [pc, #100]	@ (800484c <HAL_DMA_IRQHandler+0x6c4>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d009      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a17      	ldr	r2, [pc, #92]	@ (8004850 <HAL_DMA_IRQHandler+0x6c8>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d004      	beq.n	8004800 <HAL_DMA_IRQHandler+0x678>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a16      	ldr	r2, [pc, #88]	@ (8004854 <HAL_DMA_IRQHandler+0x6cc>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d12b      	bne.n	8004858 <HAL_DMA_IRQHandler+0x6d0>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0310 	and.w	r3, r3, #16
 800480a:	2b00      	cmp	r3, #0
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	e02a      	b.n	800486c <HAL_DMA_IRQHandler+0x6e4>
 8004816:	bf00      	nop
 8004818:	40020010 	.word	0x40020010
 800481c:	40020028 	.word	0x40020028
 8004820:	40020040 	.word	0x40020040
 8004824:	40020058 	.word	0x40020058
 8004828:	40020070 	.word	0x40020070
 800482c:	40020088 	.word	0x40020088
 8004830:	400200a0 	.word	0x400200a0
 8004834:	400200b8 	.word	0x400200b8
 8004838:	40020410 	.word	0x40020410
 800483c:	40020428 	.word	0x40020428
 8004840:	40020440 	.word	0x40020440
 8004844:	40020458 	.word	0x40020458
 8004848:	40020470 	.word	0x40020470
 800484c:	40020488 	.word	0x40020488
 8004850:	400204a0 	.word	0x400204a0
 8004854:	400204b8 	.word	0x400204b8
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	bf14      	ite	ne
 8004866:	2301      	movne	r3, #1
 8004868:	2300      	moveq	r3, #0
 800486a:	b2db      	uxtb	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	f000 8087 	beq.w	8004980 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004876:	f003 031f 	and.w	r3, r3, #31
 800487a:	2220      	movs	r2, #32
 800487c:	409a      	lsls	r2, r3
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b04      	cmp	r3, #4
 800488c:	d139      	bne.n	8004902 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0216 	bic.w	r2, r2, #22
 800489c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695a      	ldr	r2, [r3, #20]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d103      	bne.n	80048be <HAL_DMA_IRQHandler+0x736>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d007      	beq.n	80048ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0208 	bic.w	r2, r2, #8
 80048cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d2:	f003 031f 	and.w	r3, r3, #31
 80048d6:	223f      	movs	r2, #63	@ 0x3f
 80048d8:	409a      	lsls	r2, r3
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2201      	movs	r2, #1
 80048e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	f000 834a 	beq.w	8004f8c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	4798      	blx	r3
          }
          return;
 8004900:	e344      	b.n	8004f8c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d018      	beq.n	8004942 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d108      	bne.n	8004930 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	2b00      	cmp	r3, #0
 8004924:	d02c      	beq.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
 800492e:	e027      	b.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004934:	2b00      	cmp	r3, #0
 8004936:	d023      	beq.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	4798      	blx	r3
 8004940:	e01e      	b.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10f      	bne.n	8004970 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0210 	bic.w	r2, r2, #16
 800495e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8306 	beq.w	8004f96 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498e:	f003 0301 	and.w	r3, r3, #1
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 8088 	beq.w	8004aa8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2204      	movs	r2, #4
 800499c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a7a      	ldr	r2, [pc, #488]	@ (8004b90 <HAL_DMA_IRQHandler+0xa08>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d04a      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a79      	ldr	r2, [pc, #484]	@ (8004b94 <HAL_DMA_IRQHandler+0xa0c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d045      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a77      	ldr	r2, [pc, #476]	@ (8004b98 <HAL_DMA_IRQHandler+0xa10>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d040      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a76      	ldr	r2, [pc, #472]	@ (8004b9c <HAL_DMA_IRQHandler+0xa14>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d03b      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a74      	ldr	r2, [pc, #464]	@ (8004ba0 <HAL_DMA_IRQHandler+0xa18>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d036      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a73      	ldr	r2, [pc, #460]	@ (8004ba4 <HAL_DMA_IRQHandler+0xa1c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d031      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a71      	ldr	r2, [pc, #452]	@ (8004ba8 <HAL_DMA_IRQHandler+0xa20>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d02c      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a70      	ldr	r2, [pc, #448]	@ (8004bac <HAL_DMA_IRQHandler+0xa24>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d027      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a6e      	ldr	r2, [pc, #440]	@ (8004bb0 <HAL_DMA_IRQHandler+0xa28>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d022      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a6d      	ldr	r2, [pc, #436]	@ (8004bb4 <HAL_DMA_IRQHandler+0xa2c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d01d      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a6b      	ldr	r2, [pc, #428]	@ (8004bb8 <HAL_DMA_IRQHandler+0xa30>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d018      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a6a      	ldr	r2, [pc, #424]	@ (8004bbc <HAL_DMA_IRQHandler+0xa34>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d013      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a68      	ldr	r2, [pc, #416]	@ (8004bc0 <HAL_DMA_IRQHandler+0xa38>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00e      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a67      	ldr	r2, [pc, #412]	@ (8004bc4 <HAL_DMA_IRQHandler+0xa3c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a65      	ldr	r2, [pc, #404]	@ (8004bc8 <HAL_DMA_IRQHandler+0xa40>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_DMA_IRQHandler+0x8b8>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a64      	ldr	r2, [pc, #400]	@ (8004bcc <HAL_DMA_IRQHandler+0xa44>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d108      	bne.n	8004a52 <HAL_DMA_IRQHandler+0x8ca>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	e007      	b.n	8004a62 <HAL_DMA_IRQHandler+0x8da>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f022 0201 	bic.w	r2, r2, #1
 8004a60:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3301      	adds	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d307      	bcc.n	8004a7e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0301 	and.w	r3, r3, #1
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1f2      	bne.n	8004a62 <HAL_DMA_IRQHandler+0x8da>
 8004a7c:	e000      	b.n	8004a80 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004a7e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d004      	beq.n	8004a98 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2203      	movs	r2, #3
 8004a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004a96:	e003      	b.n	8004aa0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 8272 	beq.w	8004f96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	4798      	blx	r3
 8004aba:	e26c      	b.n	8004f96 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a43      	ldr	r2, [pc, #268]	@ (8004bd0 <HAL_DMA_IRQHandler+0xa48>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d022      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a42      	ldr	r2, [pc, #264]	@ (8004bd4 <HAL_DMA_IRQHandler+0xa4c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d01d      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a40      	ldr	r2, [pc, #256]	@ (8004bd8 <HAL_DMA_IRQHandler+0xa50>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d018      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a3f      	ldr	r2, [pc, #252]	@ (8004bdc <HAL_DMA_IRQHandler+0xa54>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a3d      	ldr	r2, [pc, #244]	@ (8004be0 <HAL_DMA_IRQHandler+0xa58>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a3c      	ldr	r2, [pc, #240]	@ (8004be4 <HAL_DMA_IRQHandler+0xa5c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d009      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a3a      	ldr	r2, [pc, #232]	@ (8004be8 <HAL_DMA_IRQHandler+0xa60>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_DMA_IRQHandler+0x984>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a39      	ldr	r2, [pc, #228]	@ (8004bec <HAL_DMA_IRQHandler+0xa64>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d101      	bne.n	8004b10 <HAL_DMA_IRQHandler+0x988>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <HAL_DMA_IRQHandler+0x98a>
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 823f 	beq.w	8004f96 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	2204      	movs	r2, #4
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80cd 	beq.w	8004cd0 <HAL_DMA_IRQHandler+0xb48>
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f000 80c7 	beq.w	8004cd0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	2204      	movs	r2, #4
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d049      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d109      	bne.n	8004b7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 8210 	beq.w	8004f90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b78:	e20a      	b.n	8004f90 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f000 8206 	beq.w	8004f90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b8c:	e200      	b.n	8004f90 <HAL_DMA_IRQHandler+0xe08>
 8004b8e:	bf00      	nop
 8004b90:	40020010 	.word	0x40020010
 8004b94:	40020028 	.word	0x40020028
 8004b98:	40020040 	.word	0x40020040
 8004b9c:	40020058 	.word	0x40020058
 8004ba0:	40020070 	.word	0x40020070
 8004ba4:	40020088 	.word	0x40020088
 8004ba8:	400200a0 	.word	0x400200a0
 8004bac:	400200b8 	.word	0x400200b8
 8004bb0:	40020410 	.word	0x40020410
 8004bb4:	40020428 	.word	0x40020428
 8004bb8:	40020440 	.word	0x40020440
 8004bbc:	40020458 	.word	0x40020458
 8004bc0:	40020470 	.word	0x40020470
 8004bc4:	40020488 	.word	0x40020488
 8004bc8:	400204a0 	.word	0x400204a0
 8004bcc:	400204b8 	.word	0x400204b8
 8004bd0:	58025408 	.word	0x58025408
 8004bd4:	5802541c 	.word	0x5802541c
 8004bd8:	58025430 	.word	0x58025430
 8004bdc:	58025444 	.word	0x58025444
 8004be0:	58025458 	.word	0x58025458
 8004be4:	5802546c 	.word	0x5802546c
 8004be8:	58025480 	.word	0x58025480
 8004bec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d160      	bne.n	8004cbc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a7f      	ldr	r2, [pc, #508]	@ (8004dfc <HAL_DMA_IRQHandler+0xc74>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d04a      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a7d      	ldr	r2, [pc, #500]	@ (8004e00 <HAL_DMA_IRQHandler+0xc78>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d045      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a7c      	ldr	r2, [pc, #496]	@ (8004e04 <HAL_DMA_IRQHandler+0xc7c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d040      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a7a      	ldr	r2, [pc, #488]	@ (8004e08 <HAL_DMA_IRQHandler+0xc80>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d03b      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a79      	ldr	r2, [pc, #484]	@ (8004e0c <HAL_DMA_IRQHandler+0xc84>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d036      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a77      	ldr	r2, [pc, #476]	@ (8004e10 <HAL_DMA_IRQHandler+0xc88>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d031      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a76      	ldr	r2, [pc, #472]	@ (8004e14 <HAL_DMA_IRQHandler+0xc8c>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d02c      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a74      	ldr	r2, [pc, #464]	@ (8004e18 <HAL_DMA_IRQHandler+0xc90>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d027      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a73      	ldr	r2, [pc, #460]	@ (8004e1c <HAL_DMA_IRQHandler+0xc94>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d022      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a71      	ldr	r2, [pc, #452]	@ (8004e20 <HAL_DMA_IRQHandler+0xc98>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d01d      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a70      	ldr	r2, [pc, #448]	@ (8004e24 <HAL_DMA_IRQHandler+0xc9c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d018      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e28 <HAL_DMA_IRQHandler+0xca0>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d013      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a6d      	ldr	r2, [pc, #436]	@ (8004e2c <HAL_DMA_IRQHandler+0xca4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d00e      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a6b      	ldr	r2, [pc, #428]	@ (8004e30 <HAL_DMA_IRQHandler+0xca8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d009      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a6a      	ldr	r2, [pc, #424]	@ (8004e34 <HAL_DMA_IRQHandler+0xcac>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d004      	beq.n	8004c9a <HAL_DMA_IRQHandler+0xb12>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a68      	ldr	r2, [pc, #416]	@ (8004e38 <HAL_DMA_IRQHandler+0xcb0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d108      	bne.n	8004cac <HAL_DMA_IRQHandler+0xb24>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0208 	bic.w	r2, r2, #8
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e007      	b.n	8004cbc <HAL_DMA_IRQHandler+0xb34>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0204 	bic.w	r2, r2, #4
 8004cba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 8165 	beq.w	8004f90 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004cce:	e15f      	b.n	8004f90 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	2202      	movs	r2, #2
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 80c5 	beq.w	8004e70 <HAL_DMA_IRQHandler+0xce8>
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 80bf 	beq.w	8004e70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	409a      	lsls	r2, r3
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d018      	beq.n	8004d3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 813a 	beq.w	8004f94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d28:	e134      	b.n	8004f94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 8130 	beq.w	8004f94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d3c:	e12a      	b.n	8004f94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	f003 0320 	and.w	r3, r3, #32
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f040 8089 	bne.w	8004e5c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a2b      	ldr	r2, [pc, #172]	@ (8004dfc <HAL_DMA_IRQHandler+0xc74>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d04a      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a29      	ldr	r2, [pc, #164]	@ (8004e00 <HAL_DMA_IRQHandler+0xc78>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d045      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a28      	ldr	r2, [pc, #160]	@ (8004e04 <HAL_DMA_IRQHandler+0xc7c>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d040      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a26      	ldr	r2, [pc, #152]	@ (8004e08 <HAL_DMA_IRQHandler+0xc80>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d03b      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a25      	ldr	r2, [pc, #148]	@ (8004e0c <HAL_DMA_IRQHandler+0xc84>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d036      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a23      	ldr	r2, [pc, #140]	@ (8004e10 <HAL_DMA_IRQHandler+0xc88>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d031      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a22      	ldr	r2, [pc, #136]	@ (8004e14 <HAL_DMA_IRQHandler+0xc8c>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d02c      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a20      	ldr	r2, [pc, #128]	@ (8004e18 <HAL_DMA_IRQHandler+0xc90>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d027      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004e1c <HAL_DMA_IRQHandler+0xc94>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d022      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a1d      	ldr	r2, [pc, #116]	@ (8004e20 <HAL_DMA_IRQHandler+0xc98>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d01d      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a1c      	ldr	r2, [pc, #112]	@ (8004e24 <HAL_DMA_IRQHandler+0xc9c>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d018      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8004e28 <HAL_DMA_IRQHandler+0xca0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d013      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a19      	ldr	r2, [pc, #100]	@ (8004e2c <HAL_DMA_IRQHandler+0xca4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d00e      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	@ (8004e30 <HAL_DMA_IRQHandler+0xca8>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d009      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a16      	ldr	r2, [pc, #88]	@ (8004e34 <HAL_DMA_IRQHandler+0xcac>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d004      	beq.n	8004dea <HAL_DMA_IRQHandler+0xc62>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a14      	ldr	r2, [pc, #80]	@ (8004e38 <HAL_DMA_IRQHandler+0xcb0>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d128      	bne.n	8004e3c <HAL_DMA_IRQHandler+0xcb4>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0214 	bic.w	r2, r2, #20
 8004df8:	601a      	str	r2, [r3, #0]
 8004dfa:	e027      	b.n	8004e4c <HAL_DMA_IRQHandler+0xcc4>
 8004dfc:	40020010 	.word	0x40020010
 8004e00:	40020028 	.word	0x40020028
 8004e04:	40020040 	.word	0x40020040
 8004e08:	40020058 	.word	0x40020058
 8004e0c:	40020070 	.word	0x40020070
 8004e10:	40020088 	.word	0x40020088
 8004e14:	400200a0 	.word	0x400200a0
 8004e18:	400200b8 	.word	0x400200b8
 8004e1c:	40020410 	.word	0x40020410
 8004e20:	40020428 	.word	0x40020428
 8004e24:	40020440 	.word	0x40020440
 8004e28:	40020458 	.word	0x40020458
 8004e2c:	40020470 	.word	0x40020470
 8004e30:	40020488 	.word	0x40020488
 8004e34:	400204a0 	.word	0x400204a0
 8004e38:	400204b8 	.word	0x400204b8
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 020a 	bic.w	r2, r2, #10
 8004e4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	f000 8097 	beq.w	8004f94 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e6e:	e091      	b.n	8004f94 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	2208      	movs	r2, #8
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8088 	beq.w	8004f96 <HAL_DMA_IRQHandler+0xe0e>
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8082 	beq.w	8004f96 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a41      	ldr	r2, [pc, #260]	@ (8004f9c <HAL_DMA_IRQHandler+0xe14>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d04a      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a3f      	ldr	r2, [pc, #252]	@ (8004fa0 <HAL_DMA_IRQHandler+0xe18>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d045      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a3e      	ldr	r2, [pc, #248]	@ (8004fa4 <HAL_DMA_IRQHandler+0xe1c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d040      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8004fa8 <HAL_DMA_IRQHandler+0xe20>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d03b      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a3b      	ldr	r2, [pc, #236]	@ (8004fac <HAL_DMA_IRQHandler+0xe24>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d036      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a39      	ldr	r2, [pc, #228]	@ (8004fb0 <HAL_DMA_IRQHandler+0xe28>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d031      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a38      	ldr	r2, [pc, #224]	@ (8004fb4 <HAL_DMA_IRQHandler+0xe2c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d02c      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a36      	ldr	r2, [pc, #216]	@ (8004fb8 <HAL_DMA_IRQHandler+0xe30>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d027      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a35      	ldr	r2, [pc, #212]	@ (8004fbc <HAL_DMA_IRQHandler+0xe34>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d022      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a33      	ldr	r2, [pc, #204]	@ (8004fc0 <HAL_DMA_IRQHandler+0xe38>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d01d      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4a32      	ldr	r2, [pc, #200]	@ (8004fc4 <HAL_DMA_IRQHandler+0xe3c>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d018      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a30      	ldr	r2, [pc, #192]	@ (8004fc8 <HAL_DMA_IRQHandler+0xe40>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d013      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a2f      	ldr	r2, [pc, #188]	@ (8004fcc <HAL_DMA_IRQHandler+0xe44>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d00e      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2d      	ldr	r2, [pc, #180]	@ (8004fd0 <HAL_DMA_IRQHandler+0xe48>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d009      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2c      	ldr	r2, [pc, #176]	@ (8004fd4 <HAL_DMA_IRQHandler+0xe4c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d004      	beq.n	8004f32 <HAL_DMA_IRQHandler+0xdaa>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004fd8 <HAL_DMA_IRQHandler+0xe50>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d108      	bne.n	8004f44 <HAL_DMA_IRQHandler+0xdbc>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 021c 	bic.w	r2, r2, #28
 8004f40:	601a      	str	r2, [r3, #0]
 8004f42:	e007      	b.n	8004f54 <HAL_DMA_IRQHandler+0xdcc>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f022 020e 	bic.w	r2, r2, #14
 8004f52:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	409a      	lsls	r2, r3
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	4798      	blx	r3
 8004f8a:	e004      	b.n	8004f96 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004f8c:	bf00      	nop
 8004f8e:	e002      	b.n	8004f96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f90:	bf00      	nop
 8004f92:	e000      	b.n	8004f96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f94:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004f96:	3728      	adds	r7, #40	@ 0x28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40020010 	.word	0x40020010
 8004fa0:	40020028 	.word	0x40020028
 8004fa4:	40020040 	.word	0x40020040
 8004fa8:	40020058 	.word	0x40020058
 8004fac:	40020070 	.word	0x40020070
 8004fb0:	40020088 	.word	0x40020088
 8004fb4:	400200a0 	.word	0x400200a0
 8004fb8:	400200b8 	.word	0x400200b8
 8004fbc:	40020410 	.word	0x40020410
 8004fc0:	40020428 	.word	0x40020428
 8004fc4:	40020440 	.word	0x40020440
 8004fc8:	40020458 	.word	0x40020458
 8004fcc:	40020470 	.word	0x40020470
 8004fd0:	40020488 	.word	0x40020488
 8004fd4:	400204a0 	.word	0x400204a0
 8004fd8:	400204b8 	.word	0x400204b8

08004fdc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ff4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a7f      	ldr	r2, [pc, #508]	@ (80051f8 <DMA_SetConfig+0x21c>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d072      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a7d      	ldr	r2, [pc, #500]	@ (80051fc <DMA_SetConfig+0x220>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d06d      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a7c      	ldr	r2, [pc, #496]	@ (8005200 <DMA_SetConfig+0x224>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d068      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a7a      	ldr	r2, [pc, #488]	@ (8005204 <DMA_SetConfig+0x228>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d063      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a79      	ldr	r2, [pc, #484]	@ (8005208 <DMA_SetConfig+0x22c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d05e      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a77      	ldr	r2, [pc, #476]	@ (800520c <DMA_SetConfig+0x230>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d059      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a76      	ldr	r2, [pc, #472]	@ (8005210 <DMA_SetConfig+0x234>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d054      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a74      	ldr	r2, [pc, #464]	@ (8005214 <DMA_SetConfig+0x238>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d04f      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a73      	ldr	r2, [pc, #460]	@ (8005218 <DMA_SetConfig+0x23c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d04a      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a71      	ldr	r2, [pc, #452]	@ (800521c <DMA_SetConfig+0x240>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d045      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a70      	ldr	r2, [pc, #448]	@ (8005220 <DMA_SetConfig+0x244>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d040      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a6e      	ldr	r2, [pc, #440]	@ (8005224 <DMA_SetConfig+0x248>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d03b      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a6d      	ldr	r2, [pc, #436]	@ (8005228 <DMA_SetConfig+0x24c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d036      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a6b      	ldr	r2, [pc, #428]	@ (800522c <DMA_SetConfig+0x250>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d031      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a6a      	ldr	r2, [pc, #424]	@ (8005230 <DMA_SetConfig+0x254>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d02c      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a68      	ldr	r2, [pc, #416]	@ (8005234 <DMA_SetConfig+0x258>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d027      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a67      	ldr	r2, [pc, #412]	@ (8005238 <DMA_SetConfig+0x25c>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d022      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a65      	ldr	r2, [pc, #404]	@ (800523c <DMA_SetConfig+0x260>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d01d      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a64      	ldr	r2, [pc, #400]	@ (8005240 <DMA_SetConfig+0x264>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d018      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a62      	ldr	r2, [pc, #392]	@ (8005244 <DMA_SetConfig+0x268>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d013      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a61      	ldr	r2, [pc, #388]	@ (8005248 <DMA_SetConfig+0x26c>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00e      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a5f      	ldr	r2, [pc, #380]	@ (800524c <DMA_SetConfig+0x270>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d009      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a5e      	ldr	r2, [pc, #376]	@ (8005250 <DMA_SetConfig+0x274>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d004      	beq.n	80050e6 <DMA_SetConfig+0x10a>
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a5c      	ldr	r2, [pc, #368]	@ (8005254 <DMA_SetConfig+0x278>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d101      	bne.n	80050ea <DMA_SetConfig+0x10e>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <DMA_SetConfig+0x110>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00d      	beq.n	800510c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80050f8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d004      	beq.n	800510c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800510a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a39      	ldr	r2, [pc, #228]	@ (80051f8 <DMA_SetConfig+0x21c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d04a      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a38      	ldr	r2, [pc, #224]	@ (80051fc <DMA_SetConfig+0x220>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d045      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a36      	ldr	r2, [pc, #216]	@ (8005200 <DMA_SetConfig+0x224>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d040      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a35      	ldr	r2, [pc, #212]	@ (8005204 <DMA_SetConfig+0x228>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d03b      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a33      	ldr	r2, [pc, #204]	@ (8005208 <DMA_SetConfig+0x22c>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d036      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a32      	ldr	r2, [pc, #200]	@ (800520c <DMA_SetConfig+0x230>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d031      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a30      	ldr	r2, [pc, #192]	@ (8005210 <DMA_SetConfig+0x234>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d02c      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a2f      	ldr	r2, [pc, #188]	@ (8005214 <DMA_SetConfig+0x238>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d027      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a2d      	ldr	r2, [pc, #180]	@ (8005218 <DMA_SetConfig+0x23c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a2c      	ldr	r2, [pc, #176]	@ (800521c <DMA_SetConfig+0x240>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d01d      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a2a      	ldr	r2, [pc, #168]	@ (8005220 <DMA_SetConfig+0x244>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a29      	ldr	r2, [pc, #164]	@ (8005224 <DMA_SetConfig+0x248>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a27      	ldr	r2, [pc, #156]	@ (8005228 <DMA_SetConfig+0x24c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a26      	ldr	r2, [pc, #152]	@ (800522c <DMA_SetConfig+0x250>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a24      	ldr	r2, [pc, #144]	@ (8005230 <DMA_SetConfig+0x254>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <DMA_SetConfig+0x1d0>
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a23      	ldr	r2, [pc, #140]	@ (8005234 <DMA_SetConfig+0x258>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <DMA_SetConfig+0x1d4>
 80051ac:	2301      	movs	r3, #1
 80051ae:	e000      	b.n	80051b2 <DMA_SetConfig+0x1d6>
 80051b0:	2300      	movs	r3, #0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d059      	beq.n	800526a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ba:	f003 031f 	and.w	r3, r3, #31
 80051be:	223f      	movs	r2, #63	@ 0x3f
 80051c0:	409a      	lsls	r2, r3
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80051d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	683a      	ldr	r2, [r7, #0]
 80051dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b40      	cmp	r3, #64	@ 0x40
 80051e4:	d138      	bne.n	8005258 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051f6:	e086      	b.n	8005306 <DMA_SetConfig+0x32a>
 80051f8:	40020010 	.word	0x40020010
 80051fc:	40020028 	.word	0x40020028
 8005200:	40020040 	.word	0x40020040
 8005204:	40020058 	.word	0x40020058
 8005208:	40020070 	.word	0x40020070
 800520c:	40020088 	.word	0x40020088
 8005210:	400200a0 	.word	0x400200a0
 8005214:	400200b8 	.word	0x400200b8
 8005218:	40020410 	.word	0x40020410
 800521c:	40020428 	.word	0x40020428
 8005220:	40020440 	.word	0x40020440
 8005224:	40020458 	.word	0x40020458
 8005228:	40020470 	.word	0x40020470
 800522c:	40020488 	.word	0x40020488
 8005230:	400204a0 	.word	0x400204a0
 8005234:	400204b8 	.word	0x400204b8
 8005238:	58025408 	.word	0x58025408
 800523c:	5802541c 	.word	0x5802541c
 8005240:	58025430 	.word	0x58025430
 8005244:	58025444 	.word	0x58025444
 8005248:	58025458 	.word	0x58025458
 800524c:	5802546c 	.word	0x5802546c
 8005250:	58025480 	.word	0x58025480
 8005254:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	60da      	str	r2, [r3, #12]
}
 8005268:	e04d      	b.n	8005306 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a29      	ldr	r2, [pc, #164]	@ (8005314 <DMA_SetConfig+0x338>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d022      	beq.n	80052ba <DMA_SetConfig+0x2de>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a27      	ldr	r2, [pc, #156]	@ (8005318 <DMA_SetConfig+0x33c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01d      	beq.n	80052ba <DMA_SetConfig+0x2de>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a26      	ldr	r2, [pc, #152]	@ (800531c <DMA_SetConfig+0x340>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d018      	beq.n	80052ba <DMA_SetConfig+0x2de>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a24      	ldr	r2, [pc, #144]	@ (8005320 <DMA_SetConfig+0x344>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d013      	beq.n	80052ba <DMA_SetConfig+0x2de>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a23      	ldr	r2, [pc, #140]	@ (8005324 <DMA_SetConfig+0x348>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d00e      	beq.n	80052ba <DMA_SetConfig+0x2de>
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a21      	ldr	r2, [pc, #132]	@ (8005328 <DMA_SetConfig+0x34c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d009      	beq.n	80052ba <DMA_SetConfig+0x2de>
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a20      	ldr	r2, [pc, #128]	@ (800532c <DMA_SetConfig+0x350>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d004      	beq.n	80052ba <DMA_SetConfig+0x2de>
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1e      	ldr	r2, [pc, #120]	@ (8005330 <DMA_SetConfig+0x354>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d101      	bne.n	80052be <DMA_SetConfig+0x2e2>
 80052ba:	2301      	movs	r3, #1
 80052bc:	e000      	b.n	80052c0 <DMA_SetConfig+0x2e4>
 80052be:	2300      	movs	r3, #0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d020      	beq.n	8005306 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	2201      	movs	r2, #1
 80052ce:	409a      	lsls	r2, r3
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2b40      	cmp	r3, #64	@ 0x40
 80052e2:	d108      	bne.n	80052f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	60da      	str	r2, [r3, #12]
}
 80052f4:	e007      	b.n	8005306 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	687a      	ldr	r2, [r7, #4]
 8005304:	60da      	str	r2, [r3, #12]
}
 8005306:	bf00      	nop
 8005308:	371c      	adds	r7, #28
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	58025408 	.word	0x58025408
 8005318:	5802541c 	.word	0x5802541c
 800531c:	58025430 	.word	0x58025430
 8005320:	58025444 	.word	0x58025444
 8005324:	58025458 	.word	0x58025458
 8005328:	5802546c 	.word	0x5802546c
 800532c:	58025480 	.word	0x58025480
 8005330:	58025494 	.word	0x58025494

08005334 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a42      	ldr	r2, [pc, #264]	@ (800544c <DMA_CalcBaseAndBitshift+0x118>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d04a      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a41      	ldr	r2, [pc, #260]	@ (8005450 <DMA_CalcBaseAndBitshift+0x11c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d045      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a3f      	ldr	r2, [pc, #252]	@ (8005454 <DMA_CalcBaseAndBitshift+0x120>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d040      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a3e      	ldr	r2, [pc, #248]	@ (8005458 <DMA_CalcBaseAndBitshift+0x124>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d03b      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a3c      	ldr	r2, [pc, #240]	@ (800545c <DMA_CalcBaseAndBitshift+0x128>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d036      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a3b      	ldr	r2, [pc, #236]	@ (8005460 <DMA_CalcBaseAndBitshift+0x12c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d031      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a39      	ldr	r2, [pc, #228]	@ (8005464 <DMA_CalcBaseAndBitshift+0x130>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d02c      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a38      	ldr	r2, [pc, #224]	@ (8005468 <DMA_CalcBaseAndBitshift+0x134>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d027      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a36      	ldr	r2, [pc, #216]	@ (800546c <DMA_CalcBaseAndBitshift+0x138>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d022      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a35      	ldr	r2, [pc, #212]	@ (8005470 <DMA_CalcBaseAndBitshift+0x13c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d01d      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a33      	ldr	r2, [pc, #204]	@ (8005474 <DMA_CalcBaseAndBitshift+0x140>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d018      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a32      	ldr	r2, [pc, #200]	@ (8005478 <DMA_CalcBaseAndBitshift+0x144>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d013      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a30      	ldr	r2, [pc, #192]	@ (800547c <DMA_CalcBaseAndBitshift+0x148>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00e      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a2f      	ldr	r2, [pc, #188]	@ (8005480 <DMA_CalcBaseAndBitshift+0x14c>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d009      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005484 <DMA_CalcBaseAndBitshift+0x150>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d004      	beq.n	80053dc <DMA_CalcBaseAndBitshift+0xa8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005488 <DMA_CalcBaseAndBitshift+0x154>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d101      	bne.n	80053e0 <DMA_CalcBaseAndBitshift+0xac>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <DMA_CalcBaseAndBitshift+0xae>
 80053e0:	2300      	movs	r3, #0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d024      	beq.n	8005430 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	3b10      	subs	r3, #16
 80053ee:	4a27      	ldr	r2, [pc, #156]	@ (800548c <DMA_CalcBaseAndBitshift+0x158>)
 80053f0:	fba2 2303 	umull	r2, r3, r2, r3
 80053f4:	091b      	lsrs	r3, r3, #4
 80053f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	4a24      	ldr	r2, [pc, #144]	@ (8005490 <DMA_CalcBaseAndBitshift+0x15c>)
 8005400:	5cd3      	ldrb	r3, [r2, r3]
 8005402:	461a      	mov	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2b03      	cmp	r3, #3
 800540c:	d908      	bls.n	8005420 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	4b1f      	ldr	r3, [pc, #124]	@ (8005494 <DMA_CalcBaseAndBitshift+0x160>)
 8005416:	4013      	ands	r3, r2
 8005418:	1d1a      	adds	r2, r3, #4
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	659a      	str	r2, [r3, #88]	@ 0x58
 800541e:	e00d      	b.n	800543c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	4b1b      	ldr	r3, [pc, #108]	@ (8005494 <DMA_CalcBaseAndBitshift+0x160>)
 8005428:	4013      	ands	r3, r2
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	6593      	str	r3, [r2, #88]	@ 0x58
 800542e:	e005      	b.n	800543c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005440:	4618      	mov	r0, r3
 8005442:	3714      	adds	r7, #20
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	40020010 	.word	0x40020010
 8005450:	40020028 	.word	0x40020028
 8005454:	40020040 	.word	0x40020040
 8005458:	40020058 	.word	0x40020058
 800545c:	40020070 	.word	0x40020070
 8005460:	40020088 	.word	0x40020088
 8005464:	400200a0 	.word	0x400200a0
 8005468:	400200b8 	.word	0x400200b8
 800546c:	40020410 	.word	0x40020410
 8005470:	40020428 	.word	0x40020428
 8005474:	40020440 	.word	0x40020440
 8005478:	40020458 	.word	0x40020458
 800547c:	40020470 	.word	0x40020470
 8005480:	40020488 	.word	0x40020488
 8005484:	400204a0 	.word	0x400204a0
 8005488:	400204b8 	.word	0x400204b8
 800548c:	aaaaaaab 	.word	0xaaaaaaab
 8005490:	0800f024 	.word	0x0800f024
 8005494:	fffffc00 	.word	0xfffffc00

08005498 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005498:	b480      	push	{r7}
 800549a:	b085      	sub	sp, #20
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054a0:	2300      	movs	r3, #0
 80054a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d120      	bne.n	80054ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	2b03      	cmp	r3, #3
 80054b2:	d858      	bhi.n	8005566 <DMA_CheckFifoParam+0xce>
 80054b4:	a201      	add	r2, pc, #4	@ (adr r2, 80054bc <DMA_CheckFifoParam+0x24>)
 80054b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ba:	bf00      	nop
 80054bc:	080054cd 	.word	0x080054cd
 80054c0:	080054df 	.word	0x080054df
 80054c4:	080054cd 	.word	0x080054cd
 80054c8:	08005567 	.word	0x08005567
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d048      	beq.n	800556a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054dc:	e045      	b.n	800556a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80054e6:	d142      	bne.n	800556e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054ec:	e03f      	b.n	800556e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054f6:	d123      	bne.n	8005540 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d838      	bhi.n	8005572 <DMA_CheckFifoParam+0xda>
 8005500:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <DMA_CheckFifoParam+0x70>)
 8005502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005506:	bf00      	nop
 8005508:	08005519 	.word	0x08005519
 800550c:	0800551f 	.word	0x0800551f
 8005510:	08005519 	.word	0x08005519
 8005514:	08005531 	.word	0x08005531
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
        break;
 800551c:	e030      	b.n	8005580 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005522:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d025      	beq.n	8005576 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800552e:	e022      	b.n	8005576 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005534:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005538:	d11f      	bne.n	800557a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800553e:	e01c      	b.n	800557a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005544:	2b02      	cmp	r3, #2
 8005546:	d902      	bls.n	800554e <DMA_CheckFifoParam+0xb6>
 8005548:	2b03      	cmp	r3, #3
 800554a:	d003      	beq.n	8005554 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800554c:	e018      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	73fb      	strb	r3, [r7, #15]
        break;
 8005552:	e015      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005558:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00e      	beq.n	800557e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	73fb      	strb	r3, [r7, #15]
    break;
 8005564:	e00b      	b.n	800557e <DMA_CheckFifoParam+0xe6>
        break;
 8005566:	bf00      	nop
 8005568:	e00a      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        break;
 800556a:	bf00      	nop
 800556c:	e008      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        break;
 800556e:	bf00      	nop
 8005570:	e006      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        break;
 8005572:	bf00      	nop
 8005574:	e004      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        break;
 8005576:	bf00      	nop
 8005578:	e002      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
        break;
 800557a:	bf00      	nop
 800557c:	e000      	b.n	8005580 <DMA_CheckFifoParam+0xe8>
    break;
 800557e:	bf00      	nop
    }
  }

  return status;
 8005580:	7bfb      	ldrb	r3, [r7, #15]
}
 8005582:	4618      	mov	r0, r3
 8005584:	3714      	adds	r7, #20
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop

08005590 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a38      	ldr	r2, [pc, #224]	@ (8005684 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d022      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a36      	ldr	r2, [pc, #216]	@ (8005688 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d01d      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a35      	ldr	r2, [pc, #212]	@ (800568c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d018      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a33      	ldr	r2, [pc, #204]	@ (8005690 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a32      	ldr	r2, [pc, #200]	@ (8005694 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00e      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a30      	ldr	r2, [pc, #192]	@ (8005698 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d009      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a2f      	ldr	r2, [pc, #188]	@ (800569c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d004      	beq.n	80055ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a2d      	ldr	r2, [pc, #180]	@ (80056a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d101      	bne.n	80055f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80055f2:	2300      	movs	r3, #0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d01a      	beq.n	800562e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	3b08      	subs	r3, #8
 8005600:	4a28      	ldr	r2, [pc, #160]	@ (80056a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	091b      	lsrs	r3, r3, #4
 8005608:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4b26      	ldr	r3, [pc, #152]	@ (80056a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800560e:	4413      	add	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	461a      	mov	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a24      	ldr	r2, [pc, #144]	@ (80056ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800561c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	2201      	movs	r2, #1
 8005626:	409a      	lsls	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800562c:	e024      	b.n	8005678 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	b2db      	uxtb	r3, r3
 8005634:	3b10      	subs	r3, #16
 8005636:	4a1e      	ldr	r2, [pc, #120]	@ (80056b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005638:	fba2 2303 	umull	r2, r3, r2, r3
 800563c:	091b      	lsrs	r3, r3, #4
 800563e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	4a1c      	ldr	r2, [pc, #112]	@ (80056b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d806      	bhi.n	8005656 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4a1b      	ldr	r2, [pc, #108]	@ (80056b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d902      	bls.n	8005656 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3308      	adds	r3, #8
 8005654:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	4b18      	ldr	r3, [pc, #96]	@ (80056bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800565a:	4413      	add	r3, r2
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	461a      	mov	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a16      	ldr	r2, [pc, #88]	@ (80056c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005668:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f003 031f 	and.w	r3, r3, #31
 8005670:	2201      	movs	r2, #1
 8005672:	409a      	lsls	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005678:	bf00      	nop
 800567a:	3714      	adds	r7, #20
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	58025408 	.word	0x58025408
 8005688:	5802541c 	.word	0x5802541c
 800568c:	58025430 	.word	0x58025430
 8005690:	58025444 	.word	0x58025444
 8005694:	58025458 	.word	0x58025458
 8005698:	5802546c 	.word	0x5802546c
 800569c:	58025480 	.word	0x58025480
 80056a0:	58025494 	.word	0x58025494
 80056a4:	cccccccd 	.word	0xcccccccd
 80056a8:	16009600 	.word	0x16009600
 80056ac:	58025880 	.word	0x58025880
 80056b0:	aaaaaaab 	.word	0xaaaaaaab
 80056b4:	400204b8 	.word	0x400204b8
 80056b8:	4002040f 	.word	0x4002040f
 80056bc:	10008200 	.word	0x10008200
 80056c0:	40020880 	.word	0x40020880

080056c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d04a      	beq.n	8005770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d847      	bhi.n	8005770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a25      	ldr	r2, [pc, #148]	@ (800577c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d022      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a24      	ldr	r2, [pc, #144]	@ (8005780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d01d      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a22      	ldr	r2, [pc, #136]	@ (8005784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d018      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a21      	ldr	r2, [pc, #132]	@ (8005788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d013      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a1f      	ldr	r2, [pc, #124]	@ (800578c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d00e      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a1e      	ldr	r2, [pc, #120]	@ (8005790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d009      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a1c      	ldr	r2, [pc, #112]	@ (8005794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a1b      	ldr	r2, [pc, #108]	@ (8005798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d101      	bne.n	8005734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005734:	2300      	movs	r3, #0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4b17      	ldr	r3, [pc, #92]	@ (800579c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800573e:	4413      	add	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	461a      	mov	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a15      	ldr	r2, [pc, #84]	@ (80057a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800574c:	671a      	str	r2, [r3, #112]	@ 0x70
 800574e:	e009      	b.n	8005764 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	4b14      	ldr	r3, [pc, #80]	@ (80057a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	461a      	mov	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a11      	ldr	r2, [pc, #68]	@ (80057a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005762:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	3b01      	subs	r3, #1
 8005768:	2201      	movs	r2, #1
 800576a:	409a      	lsls	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	58025408 	.word	0x58025408
 8005780:	5802541c 	.word	0x5802541c
 8005784:	58025430 	.word	0x58025430
 8005788:	58025444 	.word	0x58025444
 800578c:	58025458 	.word	0x58025458
 8005790:	5802546c 	.word	0x5802546c
 8005794:	58025480 	.word	0x58025480
 8005798:	58025494 	.word	0x58025494
 800579c:	1600963f 	.word	0x1600963f
 80057a0:	58025940 	.word	0x58025940
 80057a4:	1000823f 	.word	0x1000823f
 80057a8:	40020940 	.word	0x40020940

080057ac <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
 80057b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057ba:	2300      	movs	r3, #0
 80057bc:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	2b80      	cmp	r3, #128	@ 0x80
 80057c4:	d105      	bne.n	80057d2 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e315      	b.n	8005dfe <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d101      	bne.n	80057e0 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80057dc:	2302      	movs	r3, #2
 80057de:	e30e      	b.n	8005dfe <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	f040 82fd 	bne.w	8005df0 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2202      	movs	r2, #2
 80057fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a82      	ldr	r2, [pc, #520]	@ (8005a14 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d04a      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a81      	ldr	r2, [pc, #516]	@ (8005a18 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d045      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a7f      	ldr	r2, [pc, #508]	@ (8005a1c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d040      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a7e      	ldr	r2, [pc, #504]	@ (8005a20 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d03b      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a7c      	ldr	r2, [pc, #496]	@ (8005a24 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d036      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a7b      	ldr	r2, [pc, #492]	@ (8005a28 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d031      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a79      	ldr	r2, [pc, #484]	@ (8005a2c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d02c      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a78      	ldr	r2, [pc, #480]	@ (8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d027      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a76      	ldr	r2, [pc, #472]	@ (8005a34 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d022      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a75      	ldr	r2, [pc, #468]	@ (8005a38 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d01d      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a73      	ldr	r2, [pc, #460]	@ (8005a3c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d018      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a72      	ldr	r2, [pc, #456]	@ (8005a40 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d013      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a70      	ldr	r2, [pc, #448]	@ (8005a44 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00e      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a6f      	ldr	r2, [pc, #444]	@ (8005a48 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d009      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a6d      	ldr	r2, [pc, #436]	@ (8005a4c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d004      	beq.n	80058a4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a6c      	ldr	r2, [pc, #432]	@ (8005a50 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d101      	bne.n	80058a8 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80058a8:	2300      	movs	r3, #0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d018      	beq.n	80058e0 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681a      	ldr	r2, [r3, #0]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80058bc:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ca:	3308      	adds	r3, #8
 80058cc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	223f      	movs	r2, #63	@ 0x3f
 80058d8:	409a      	lsls	r2, r3
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	e018      	b.n	8005912 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6819      	ldr	r1, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	f248 0320 	movw	r3, #32800	@ 0x8020
 80058ee:	430b      	orrs	r3, r1
 80058f0:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fe:	3304      	adds	r3, #4
 8005900:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005906:	f003 031f 	and.w	r3, r3, #31
 800590a:	2201      	movs	r2, #1
 800590c:	409a      	lsls	r2, r3
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	68b9      	ldr	r1, [r7, #8]
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 fb41 	bl	8005fa0 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a3c      	ldr	r2, [pc, #240]	@ (8005a14 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d072      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a3a      	ldr	r2, [pc, #232]	@ (8005a18 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d06d      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a39      	ldr	r2, [pc, #228]	@ (8005a1c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d068      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4a37      	ldr	r2, [pc, #220]	@ (8005a20 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d063      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a36      	ldr	r2, [pc, #216]	@ (8005a24 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d05e      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a34      	ldr	r2, [pc, #208]	@ (8005a28 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d059      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a33      	ldr	r2, [pc, #204]	@ (8005a2c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d054      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a31      	ldr	r2, [pc, #196]	@ (8005a30 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d04f      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a30      	ldr	r2, [pc, #192]	@ (8005a34 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d04a      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a2e      	ldr	r2, [pc, #184]	@ (8005a38 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d045      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a2d      	ldr	r2, [pc, #180]	@ (8005a3c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d040      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a2b      	ldr	r2, [pc, #172]	@ (8005a40 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d03b      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a2a      	ldr	r2, [pc, #168]	@ (8005a44 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d036      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a28      	ldr	r2, [pc, #160]	@ (8005a48 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d031      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a27      	ldr	r2, [pc, #156]	@ (8005a4c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d02c      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a25      	ldr	r2, [pc, #148]	@ (8005a50 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d027      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a24      	ldr	r2, [pc, #144]	@ (8005a54 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d022      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a22      	ldr	r2, [pc, #136]	@ (8005a58 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01d      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a21      	ldr	r2, [pc, #132]	@ (8005a5c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d018      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1f      	ldr	r2, [pc, #124]	@ (8005a60 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d013      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005a64 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d00e      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a68 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d009      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a1b      	ldr	r2, [pc, #108]	@ (8005a6c <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d004      	beq.n	8005a0e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a19      	ldr	r2, [pc, #100]	@ (8005a70 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d132      	bne.n	8005a74 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e031      	b.n	8005a76 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8005a12:	bf00      	nop
 8005a14:	40020010 	.word	0x40020010
 8005a18:	40020028 	.word	0x40020028
 8005a1c:	40020040 	.word	0x40020040
 8005a20:	40020058 	.word	0x40020058
 8005a24:	40020070 	.word	0x40020070
 8005a28:	40020088 	.word	0x40020088
 8005a2c:	400200a0 	.word	0x400200a0
 8005a30:	400200b8 	.word	0x400200b8
 8005a34:	40020410 	.word	0x40020410
 8005a38:	40020428 	.word	0x40020428
 8005a3c:	40020440 	.word	0x40020440
 8005a40:	40020458 	.word	0x40020458
 8005a44:	40020470 	.word	0x40020470
 8005a48:	40020488 	.word	0x40020488
 8005a4c:	400204a0 	.word	0x400204a0
 8005a50:	400204b8 	.word	0x400204b8
 8005a54:	58025408 	.word	0x58025408
 8005a58:	5802541c 	.word	0x5802541c
 8005a5c:	58025430 	.word	0x58025430
 8005a60:	58025444 	.word	0x58025444
 8005a64:	58025458 	.word	0x58025458
 8005a68:	5802546c 	.word	0x5802546c
 8005a6c:	58025480 	.word	0x58025480
 8005a70:	58025494 	.word	0x58025494
 8005a74:	2300      	movs	r3, #0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00d      	beq.n	8005a96 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005a82:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d004      	beq.n	8005a96 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005a94:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a3b      	ldr	r2, [pc, #236]	@ (8005b88 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d04a      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a39      	ldr	r2, [pc, #228]	@ (8005b8c <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d045      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a38      	ldr	r2, [pc, #224]	@ (8005b90 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d040      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a36      	ldr	r2, [pc, #216]	@ (8005b94 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d03b      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a35      	ldr	r2, [pc, #212]	@ (8005b98 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d036      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a33      	ldr	r2, [pc, #204]	@ (8005b9c <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d031      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a32      	ldr	r2, [pc, #200]	@ (8005ba0 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d02c      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a30      	ldr	r2, [pc, #192]	@ (8005ba4 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d027      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a2f      	ldr	r2, [pc, #188]	@ (8005ba8 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d022      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a2d      	ldr	r2, [pc, #180]	@ (8005bac <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d01d      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a2c      	ldr	r2, [pc, #176]	@ (8005bb0 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d018      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a2a      	ldr	r2, [pc, #168]	@ (8005bb4 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d013      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a29      	ldr	r2, [pc, #164]	@ (8005bb8 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00e      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a27      	ldr	r2, [pc, #156]	@ (8005bbc <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d009      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a26      	ldr	r2, [pc, #152]	@ (8005bc0 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d004      	beq.n	8005b36 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a24      	ldr	r2, [pc, #144]	@ (8005bc4 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d101      	bne.n	8005b3a <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d043      	beq.n	8005bc8 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f023 021e 	bic.w	r2, r3, #30
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f042 0216 	orr.w	r2, r2, #22
 8005b52:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	695a      	ldr	r2, [r3, #20]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b62:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d103      	bne.n	8005b74 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d043      	beq.n	8005bfc <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0208 	orr.w	r2, r2, #8
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e03a      	b.n	8005bfc <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8005b86:	bf00      	nop
 8005b88:	40020010 	.word	0x40020010
 8005b8c:	40020028 	.word	0x40020028
 8005b90:	40020040 	.word	0x40020040
 8005b94:	40020058 	.word	0x40020058
 8005b98:	40020070 	.word	0x40020070
 8005b9c:	40020088 	.word	0x40020088
 8005ba0:	400200a0 	.word	0x400200a0
 8005ba4:	400200b8 	.word	0x400200b8
 8005ba8:	40020410 	.word	0x40020410
 8005bac:	40020428 	.word	0x40020428
 8005bb0:	40020440 	.word	0x40020440
 8005bb4:	40020458 	.word	0x40020458
 8005bb8:	40020470 	.word	0x40020470
 8005bbc:	40020488 	.word	0x40020488
 8005bc0:	400204a0 	.word	0x400204a0
 8005bc4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f023 020e 	bic.w	r2, r3, #14
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 020a 	orr.w	r2, r2, #10
 8005bda:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d103      	bne.n	8005bec <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0204 	orr.w	r2, r2, #4
 8005bfa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a81      	ldr	r2, [pc, #516]	@ (8005e08 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d072      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a80      	ldr	r2, [pc, #512]	@ (8005e0c <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d06d      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a7e      	ldr	r2, [pc, #504]	@ (8005e10 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d068      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a7d      	ldr	r2, [pc, #500]	@ (8005e14 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d063      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a7b      	ldr	r2, [pc, #492]	@ (8005e18 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d05e      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a7a      	ldr	r2, [pc, #488]	@ (8005e1c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d059      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a78      	ldr	r2, [pc, #480]	@ (8005e20 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d054      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a77      	ldr	r2, [pc, #476]	@ (8005e24 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d04f      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a75      	ldr	r2, [pc, #468]	@ (8005e28 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d04a      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a74      	ldr	r2, [pc, #464]	@ (8005e2c <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d045      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a72      	ldr	r2, [pc, #456]	@ (8005e30 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d040      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a71      	ldr	r2, [pc, #452]	@ (8005e34 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d03b      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a6f      	ldr	r2, [pc, #444]	@ (8005e38 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d036      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a6e      	ldr	r2, [pc, #440]	@ (8005e3c <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d031      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a6c      	ldr	r2, [pc, #432]	@ (8005e40 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d02c      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a6b      	ldr	r2, [pc, #428]	@ (8005e44 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d027      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a69      	ldr	r2, [pc, #420]	@ (8005e48 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d022      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a68      	ldr	r2, [pc, #416]	@ (8005e4c <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d01d      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a66      	ldr	r2, [pc, #408]	@ (8005e50 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d018      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a65      	ldr	r2, [pc, #404]	@ (8005e54 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d013      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a63      	ldr	r2, [pc, #396]	@ (8005e58 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00e      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a62      	ldr	r2, [pc, #392]	@ (8005e5c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d009      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a60      	ldr	r2, [pc, #384]	@ (8005e60 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d004      	beq.n	8005cec <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a5f      	ldr	r2, [pc, #380]	@ (8005e64 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d101      	bne.n	8005cf0 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8005cec:	2301      	movs	r3, #1
 8005cee:	e000      	b.n	8005cf2 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d01a      	beq.n	8005d2c <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d007      	beq.n	8005d14 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d12:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d007      	beq.n	8005d2c <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d2a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a35      	ldr	r2, [pc, #212]	@ (8005e08 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d04a      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a34      	ldr	r2, [pc, #208]	@ (8005e0c <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d045      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a32      	ldr	r2, [pc, #200]	@ (8005e10 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d040      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a31      	ldr	r2, [pc, #196]	@ (8005e14 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d03b      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a2f      	ldr	r2, [pc, #188]	@ (8005e18 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d036      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a2e      	ldr	r2, [pc, #184]	@ (8005e1c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d031      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e20 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d02c      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a2b      	ldr	r2, [pc, #172]	@ (8005e24 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d027      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a29      	ldr	r2, [pc, #164]	@ (8005e28 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d022      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a28      	ldr	r2, [pc, #160]	@ (8005e2c <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d01d      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a26      	ldr	r2, [pc, #152]	@ (8005e30 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d018      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a25      	ldr	r2, [pc, #148]	@ (8005e34 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d013      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a23      	ldr	r2, [pc, #140]	@ (8005e38 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00e      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a22      	ldr	r2, [pc, #136]	@ (8005e3c <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d009      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a20      	ldr	r2, [pc, #128]	@ (8005e40 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d004      	beq.n	8005dcc <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a1f      	ldr	r2, [pc, #124]	@ (8005e44 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d108      	bne.n	8005dde <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f042 0201 	orr.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	e00e      	b.n	8005dfc <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0201 	orr.w	r2, r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e005      	b.n	8005dfc <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005df6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	40020010 	.word	0x40020010
 8005e0c:	40020028 	.word	0x40020028
 8005e10:	40020040 	.word	0x40020040
 8005e14:	40020058 	.word	0x40020058
 8005e18:	40020070 	.word	0x40020070
 8005e1c:	40020088 	.word	0x40020088
 8005e20:	400200a0 	.word	0x400200a0
 8005e24:	400200b8 	.word	0x400200b8
 8005e28:	40020410 	.word	0x40020410
 8005e2c:	40020428 	.word	0x40020428
 8005e30:	40020440 	.word	0x40020440
 8005e34:	40020458 	.word	0x40020458
 8005e38:	40020470 	.word	0x40020470
 8005e3c:	40020488 	.word	0x40020488
 8005e40:	400204a0 	.word	0x400204a0
 8005e44:	400204b8 	.word	0x400204b8
 8005e48:	58025408 	.word	0x58025408
 8005e4c:	5802541c 	.word	0x5802541c
 8005e50:	58025430 	.word	0x58025430
 8005e54:	58025444 	.word	0x58025444
 8005e58:	58025458 	.word	0x58025458
 8005e5c:	5802546c 	.word	0x5802546c
 8005e60:	58025480 	.word	0x58025480
 8005e64:	58025494 	.word	0x58025494

08005e68 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	4613      	mov	r3, r2
 8005e74:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a39      	ldr	r2, [pc, #228]	@ (8005f60 <HAL_DMAEx_ChangeMemory+0xf8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d04a      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a37      	ldr	r2, [pc, #220]	@ (8005f64 <HAL_DMAEx_ChangeMemory+0xfc>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d045      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a36      	ldr	r2, [pc, #216]	@ (8005f68 <HAL_DMAEx_ChangeMemory+0x100>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d040      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a34      	ldr	r2, [pc, #208]	@ (8005f6c <HAL_DMAEx_ChangeMemory+0x104>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d03b      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a33      	ldr	r2, [pc, #204]	@ (8005f70 <HAL_DMAEx_ChangeMemory+0x108>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d036      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a31      	ldr	r2, [pc, #196]	@ (8005f74 <HAL_DMAEx_ChangeMemory+0x10c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d031      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a30      	ldr	r2, [pc, #192]	@ (8005f78 <HAL_DMAEx_ChangeMemory+0x110>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d02c      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a2e      	ldr	r2, [pc, #184]	@ (8005f7c <HAL_DMAEx_ChangeMemory+0x114>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d027      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a2d      	ldr	r2, [pc, #180]	@ (8005f80 <HAL_DMAEx_ChangeMemory+0x118>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d022      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a2b      	ldr	r2, [pc, #172]	@ (8005f84 <HAL_DMAEx_ChangeMemory+0x11c>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01d      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a2a      	ldr	r2, [pc, #168]	@ (8005f88 <HAL_DMAEx_ChangeMemory+0x120>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d018      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a28      	ldr	r2, [pc, #160]	@ (8005f8c <HAL_DMAEx_ChangeMemory+0x124>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d013      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a27      	ldr	r2, [pc, #156]	@ (8005f90 <HAL_DMAEx_ChangeMemory+0x128>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d00e      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a25      	ldr	r2, [pc, #148]	@ (8005f94 <HAL_DMAEx_ChangeMemory+0x12c>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d009      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a24      	ldr	r2, [pc, #144]	@ (8005f98 <HAL_DMAEx_ChangeMemory+0x130>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d004      	beq.n	8005f16 <HAL_DMAEx_ChangeMemory+0xae>
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a22      	ldr	r2, [pc, #136]	@ (8005f9c <HAL_DMAEx_ChangeMemory+0x134>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d101      	bne.n	8005f1a <HAL_DMAEx_ChangeMemory+0xb2>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <HAL_DMAEx_ChangeMemory+0xb4>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00c      	beq.n	8005f3a <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8005f20:	79fb      	ldrb	r3, [r7, #7]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d104      	bne.n	8005f30 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	60da      	str	r2, [r3, #12]
 8005f2e:	e010      	b.n	8005f52 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	611a      	str	r2, [r3, #16]
 8005f38:	e00b      	b.n	8005f52 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8005f3a:	79fb      	ldrb	r3, [r7, #7]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	60da      	str	r2, [r3, #12]
 8005f48:	e003      	b.n	8005f52 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3714      	adds	r7, #20
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr
 8005f60:	40020010 	.word	0x40020010
 8005f64:	40020028 	.word	0x40020028
 8005f68:	40020040 	.word	0x40020040
 8005f6c:	40020058 	.word	0x40020058
 8005f70:	40020070 	.word	0x40020070
 8005f74:	40020088 	.word	0x40020088
 8005f78:	400200a0 	.word	0x400200a0
 8005f7c:	400200b8 	.word	0x400200b8
 8005f80:	40020410 	.word	0x40020410
 8005f84:	40020428 	.word	0x40020428
 8005f88:	40020440 	.word	0x40020440
 8005f8c:	40020458 	.word	0x40020458
 8005f90:	40020470 	.word	0x40020470
 8005f94:	40020488 	.word	0x40020488
 8005f98:	400204a0 	.word	0x400204a0
 8005f9c:	400204b8 	.word	0x400204b8

08005fa0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a46      	ldr	r2, [pc, #280]	@ (80060cc <DMA_MultiBufferSetConfig+0x12c>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d04a      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a44      	ldr	r2, [pc, #272]	@ (80060d0 <DMA_MultiBufferSetConfig+0x130>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d045      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a43      	ldr	r2, [pc, #268]	@ (80060d4 <DMA_MultiBufferSetConfig+0x134>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d040      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a41      	ldr	r2, [pc, #260]	@ (80060d8 <DMA_MultiBufferSetConfig+0x138>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d03b      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a40      	ldr	r2, [pc, #256]	@ (80060dc <DMA_MultiBufferSetConfig+0x13c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d036      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a3e      	ldr	r2, [pc, #248]	@ (80060e0 <DMA_MultiBufferSetConfig+0x140>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d031      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a3d      	ldr	r2, [pc, #244]	@ (80060e4 <DMA_MultiBufferSetConfig+0x144>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d02c      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a3b      	ldr	r2, [pc, #236]	@ (80060e8 <DMA_MultiBufferSetConfig+0x148>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d027      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a3a      	ldr	r2, [pc, #232]	@ (80060ec <DMA_MultiBufferSetConfig+0x14c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d022      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a38      	ldr	r2, [pc, #224]	@ (80060f0 <DMA_MultiBufferSetConfig+0x150>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d01d      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a37      	ldr	r2, [pc, #220]	@ (80060f4 <DMA_MultiBufferSetConfig+0x154>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d018      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a35      	ldr	r2, [pc, #212]	@ (80060f8 <DMA_MultiBufferSetConfig+0x158>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d013      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a34      	ldr	r2, [pc, #208]	@ (80060fc <DMA_MultiBufferSetConfig+0x15c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00e      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a32      	ldr	r2, [pc, #200]	@ (8006100 <DMA_MultiBufferSetConfig+0x160>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d009      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a31      	ldr	r2, [pc, #196]	@ (8006104 <DMA_MultiBufferSetConfig+0x164>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d004      	beq.n	800604e <DMA_MultiBufferSetConfig+0xae>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a2f      	ldr	r2, [pc, #188]	@ (8006108 <DMA_MultiBufferSetConfig+0x168>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d101      	bne.n	8006052 <DMA_MultiBufferSetConfig+0xb2>
 800604e:	2301      	movs	r3, #1
 8006050:	e000      	b.n	8006054 <DMA_MultiBufferSetConfig+0xb4>
 8006052:	2300      	movs	r3, #0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d019      	beq.n	800608c <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	2b40      	cmp	r3, #64	@ 0x40
 8006066:	d108      	bne.n	800607a <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68ba      	ldr	r2, [r7, #8]
 8006076:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8006078:	e021      	b.n	80060be <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	60da      	str	r2, [r3, #12]
}
 800608a:	e018      	b.n	80060be <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	683a      	ldr	r2, [r7, #0]
 8006092:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	2b40      	cmp	r3, #64	@ 0x40
 800609a:	d108      	bne.n	80060ae <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	60da      	str	r2, [r3, #12]
}
 80060ac:	e007      	b.n	80060be <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	60da      	str	r2, [r3, #12]
}
 80060be:	bf00      	nop
 80060c0:	3714      	adds	r7, #20
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr
 80060ca:	bf00      	nop
 80060cc:	40020010 	.word	0x40020010
 80060d0:	40020028 	.word	0x40020028
 80060d4:	40020040 	.word	0x40020040
 80060d8:	40020058 	.word	0x40020058
 80060dc:	40020070 	.word	0x40020070
 80060e0:	40020088 	.word	0x40020088
 80060e4:	400200a0 	.word	0x400200a0
 80060e8:	400200b8 	.word	0x400200b8
 80060ec:	40020410 	.word	0x40020410
 80060f0:	40020428 	.word	0x40020428
 80060f4:	40020440 	.word	0x40020440
 80060f8:	40020458 	.word	0x40020458
 80060fc:	40020470 	.word	0x40020470
 8006100:	40020488 	.word	0x40020488
 8006104:	400204a0 	.word	0x400204a0
 8006108:	400204b8 	.word	0x400204b8

0800610c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e0e3      	b.n	80062e6 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006124:	2b00      	cmp	r3, #0
 8006126:	d106      	bne.n	8006136 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2220      	movs	r2, #32
 800612c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f7fa ff93 	bl	800105c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006136:	4b6e      	ldr	r3, [pc, #440]	@ (80062f0 <HAL_ETH_Init+0x1e4>)
 8006138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800613c:	4a6c      	ldr	r2, [pc, #432]	@ (80062f0 <HAL_ETH_Init+0x1e4>)
 800613e:	f043 0302 	orr.w	r3, r3, #2
 8006142:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006146:	4b6a      	ldr	r3, [pc, #424]	@ (80062f0 <HAL_ETH_Init+0x1e4>)
 8006148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	60bb      	str	r3, [r7, #8]
 8006152:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	7a1b      	ldrb	r3, [r3, #8]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d103      	bne.n	8006164 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800615c:	2000      	movs	r0, #0
 800615e:	f7fc fc37 	bl	80029d0 <HAL_SYSCFG_ETHInterfaceSelect>
 8006162:	e003      	b.n	800616c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006164:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8006168:	f7fc fc32 	bl	80029d0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800616c:	4b61      	ldr	r3, [pc, #388]	@ (80062f4 <HAL_ETH_Init+0x1e8>)
 800616e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	6812      	ldr	r2, [r2, #0]
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006186:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006188:	f7fc fbe6 	bl	8002958 <HAL_GetTick>
 800618c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800618e:	e011      	b.n	80061b4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006190:	f7fc fbe2 	bl	8002958 <HAL_GetTick>
 8006194:	4602      	mov	r2, r0
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800619e:	d909      	bls.n	80061b4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2204      	movs	r2, #4
 80061a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	22e0      	movs	r2, #224	@ 0xe0
 80061ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e098      	b.n	80062e6 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1e4      	bne.n	8006190 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f89e 	bl	8006308 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80061cc:	f002 fd52 	bl	8008c74 <HAL_RCC_GetHCLKFreq>
 80061d0:	4603      	mov	r3, r0
 80061d2:	4a49      	ldr	r2, [pc, #292]	@ (80062f8 <HAL_ETH_Init+0x1ec>)
 80061d4:	fba2 2303 	umull	r2, r3, r2, r3
 80061d8:	0c9a      	lsrs	r2, r3, #18
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	3a01      	subs	r2, #1
 80061e0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fa81 	bl	80066ec <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80061f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80061f6:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	6812      	ldr	r2, [r2, #0]
 80061fe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006202:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006206:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	695b      	ldr	r3, [r3, #20]
 800620e:	f003 0303 	and.w	r3, r3, #3
 8006212:	2b00      	cmp	r3, #0
 8006214:	d009      	beq.n	800622a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2201      	movs	r2, #1
 800621a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	22e0      	movs	r2, #224	@ 0xe0
 8006222:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e05d      	b.n	80062e6 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006232:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006236:	4b31      	ldr	r3, [pc, #196]	@ (80062fc <HAL_ETH_Init+0x1f0>)
 8006238:	4013      	ands	r3, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6952      	ldr	r2, [r2, #20]
 800623e:	0051      	lsls	r1, r2, #1
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	430b      	orrs	r3, r1
 8006246:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800624a:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fae9 	bl	8006826 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fb2f 	bl	80068b8 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	3305      	adds	r3, #5
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	021a      	lsls	r2, r3, #8
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	3304      	adds	r3, #4
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	4619      	mov	r1, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	3303      	adds	r3, #3
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	061a      	lsls	r2, r3, #24
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	3302      	adds	r3, #2
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	041b      	lsls	r3, r3, #16
 800628c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	3301      	adds	r3, #1
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006298:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80062a6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80062a8:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	4b11      	ldr	r3, [pc, #68]	@ (8006300 <HAL_ETH_Init+0x1f4>)
 80062ba:	430b      	orrs	r3, r1
 80062bc:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006304 <HAL_ETH_Init+0x1f8>)
 80062ce:	430b      	orrs	r3, r1
 80062d0:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2210      	movs	r2, #16
 80062e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062e4:	2300      	movs	r3, #0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	58024400 	.word	0x58024400
 80062f4:	58000400 	.word	0x58000400
 80062f8:	431bde83 	.word	0x431bde83
 80062fc:	ffff8001 	.word	0xffff8001
 8006300:	0c020060 	.word	0x0c020060
 8006304:	0c20c000 	.word	0x0c20c000

08006308 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006318:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006320:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006322:	f002 fca7 	bl	8008c74 <HAL_RCC_GetHCLKFreq>
 8006326:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	4a1a      	ldr	r2, [pc, #104]	@ (8006394 <HAL_ETH_SetMDIOClockRange+0x8c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d804      	bhi.n	800633a <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006336:	60fb      	str	r3, [r7, #12]
 8006338:	e022      	b.n	8006380 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	4a16      	ldr	r2, [pc, #88]	@ (8006398 <HAL_ETH_SetMDIOClockRange+0x90>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d204      	bcs.n	800634c <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e019      	b.n	8006380 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	4a13      	ldr	r2, [pc, #76]	@ (800639c <HAL_ETH_SetMDIOClockRange+0x94>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d915      	bls.n	8006380 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	4a12      	ldr	r2, [pc, #72]	@ (80063a0 <HAL_ETH_SetMDIOClockRange+0x98>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d804      	bhi.n	8006366 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006362:	60fb      	str	r3, [r7, #12]
 8006364:	e00c      	b.n	8006380 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	4a0e      	ldr	r2, [pc, #56]	@ (80063a4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d804      	bhi.n	8006378 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006374:	60fb      	str	r3, [r7, #12]
 8006376:	e003      	b.n	8006380 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800637e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800638a:	bf00      	nop
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	02160ebf 	.word	0x02160ebf
 8006398:	03938700 	.word	0x03938700
 800639c:	05f5e0ff 	.word	0x05f5e0ff
 80063a0:	08f0d17f 	.word	0x08f0d17f
 80063a4:	0ee6b27f 	.word	0x0ee6b27f

080063a8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80063ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	791b      	ldrb	r3, [r3, #4]
 80063c0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80063c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	7b1b      	ldrb	r3, [r3, #12]
 80063c8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80063ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	7b5b      	ldrb	r3, [r3, #13]
 80063d0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80063d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	7b9b      	ldrb	r3, [r3, #14]
 80063d8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80063da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	7bdb      	ldrb	r3, [r3, #15]
 80063e0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80063e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	7c12      	ldrb	r2, [r2, #16]
 80063e8:	2a00      	cmp	r2, #0
 80063ea:	d102      	bne.n	80063f2 <ETH_SetMACConfig+0x4a>
 80063ec:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80063f0:	e000      	b.n	80063f4 <ETH_SetMACConfig+0x4c>
 80063f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80063f4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	7c52      	ldrb	r2, [r2, #17]
 80063fa:	2a00      	cmp	r2, #0
 80063fc:	d102      	bne.n	8006404 <ETH_SetMACConfig+0x5c>
 80063fe:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006402:	e000      	b.n	8006406 <ETH_SetMACConfig+0x5e>
 8006404:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006406:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	7c9b      	ldrb	r3, [r3, #18]
 800640c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800640e:	431a      	orrs	r2, r3
               macconf->Speed |
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006414:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800641a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	7f1b      	ldrb	r3, [r3, #28]
 8006420:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006422:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	7f5b      	ldrb	r3, [r3, #29]
 8006428:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800642a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	7f92      	ldrb	r2, [r2, #30]
 8006430:	2a00      	cmp	r2, #0
 8006432:	d102      	bne.n	800643a <ETH_SetMACConfig+0x92>
 8006434:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006438:	e000      	b.n	800643c <ETH_SetMACConfig+0x94>
 800643a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800643c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	7fdb      	ldrb	r3, [r3, #31]
 8006442:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006444:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	f892 2020 	ldrb.w	r2, [r2, #32]
 800644c:	2a00      	cmp	r2, #0
 800644e:	d102      	bne.n	8006456 <ETH_SetMACConfig+0xae>
 8006450:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006454:	e000      	b.n	8006458 <ETH_SetMACConfig+0xb0>
 8006456:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006458:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800645e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006466:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006468:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	4b56      	ldr	r3, [pc, #344]	@ (80065d4 <ETH_SetMACConfig+0x22c>)
 800647a:	4013      	ands	r3, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	6812      	ldr	r2, [r2, #0]
 8006480:	68f9      	ldr	r1, [r7, #12]
 8006482:	430b      	orrs	r3, r1
 8006484:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006492:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006494:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800649c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800649e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80064a6:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80064a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80064b0:	2a00      	cmp	r2, #0
 80064b2:	d102      	bne.n	80064ba <ETH_SetMACConfig+0x112>
 80064b4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80064b8:	e000      	b.n	80064bc <ETH_SetMACConfig+0x114>
 80064ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80064bc:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	4b42      	ldr	r3, [pc, #264]	@ (80065d8 <ETH_SetMACConfig+0x230>)
 80064ce:	4013      	ands	r3, r2
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	6812      	ldr	r2, [r2, #0]
 80064d4:	68f9      	ldr	r1, [r7, #12]
 80064d6:	430b      	orrs	r3, r1
 80064d8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064e0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	4b3a      	ldr	r3, [pc, #232]	@ (80065dc <ETH_SetMACConfig+0x234>)
 80064f2:	4013      	ands	r3, r2
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6812      	ldr	r2, [r2, #0]
 80064f8:	68f9      	ldr	r1, [r7, #12]
 80064fa:	430b      	orrs	r3, r1
 80064fc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8006504:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800650a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8006512:	2a00      	cmp	r2, #0
 8006514:	d101      	bne.n	800651a <ETH_SetMACConfig+0x172>
 8006516:	2280      	movs	r2, #128	@ 0x80
 8006518:	e000      	b.n	800651c <ETH_SetMACConfig+0x174>
 800651a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800651c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006522:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800652e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8006532:	4013      	ands	r3, r2
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	6812      	ldr	r2, [r2, #0]
 8006538:	68f9      	ldr	r1, [r7, #12]
 800653a:	430b      	orrs	r3, r1
 800653c:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8006544:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800654c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800654e:	4313      	orrs	r3, r2
 8006550:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800655a:	f023 0103 	bic.w	r1, r3, #3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68fa      	ldr	r2, [r7, #12]
 8006564:	430a      	orrs	r2, r1
 8006566:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8006572:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800658e:	2a00      	cmp	r2, #0
 8006590:	d101      	bne.n	8006596 <ETH_SetMACConfig+0x1ee>
 8006592:	2240      	movs	r2, #64	@ 0x40
 8006594:	e000      	b.n	8006598 <ETH_SetMACConfig+0x1f0>
 8006596:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006598:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80065a0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80065a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80065aa:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80065b8:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80065c8:	bf00      	nop
 80065ca:	3714      	adds	r7, #20
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	00048083 	.word	0x00048083
 80065d8:	c0f88000 	.word	0xc0f88000
 80065dc:	fffffef0 	.word	0xfffffef0

080065e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	4b38      	ldr	r3, [pc, #224]	@ (80066d8 <ETH_SetDMAConfig+0xf8>)
 80065f6:	4013      	ands	r3, r2
 80065f8:	683a      	ldr	r2, [r7, #0]
 80065fa:	6811      	ldr	r1, [r2, #0]
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6812      	ldr	r2, [r2, #0]
 8006600:	430b      	orrs	r3, r1
 8006602:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006606:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	791b      	ldrb	r3, [r3, #4]
 800660c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006612:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	7b1b      	ldrb	r3, [r3, #12]
 8006618:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	4b2c      	ldr	r3, [pc, #176]	@ (80066dc <ETH_SetDMAConfig+0xfc>)
 800662a:	4013      	ands	r3, r2
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	68f9      	ldr	r1, [r7, #12]
 8006632:	430b      	orrs	r3, r1
 8006634:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006638:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	7b5b      	ldrb	r3, [r3, #13]
 800663e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006650:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8006654:	4b22      	ldr	r3, [pc, #136]	@ (80066e0 <ETH_SetDMAConfig+0x100>)
 8006656:	4013      	ands	r3, r2
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	6812      	ldr	r2, [r2, #0]
 800665c:	68f9      	ldr	r1, [r7, #12]
 800665e:	430b      	orrs	r3, r1
 8006660:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8006664:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	7d1b      	ldrb	r3, [r3, #20]
 8006670:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006672:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	7f5b      	ldrb	r3, [r3, #29]
 8006678:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800667a:	4313      	orrs	r3, r2
 800667c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006686:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800668a:	4b16      	ldr	r3, [pc, #88]	@ (80066e4 <ETH_SetDMAConfig+0x104>)
 800668c:	4013      	ands	r3, r2
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	6812      	ldr	r2, [r2, #0]
 8006692:	68f9      	ldr	r1, [r7, #12]
 8006694:	430b      	orrs	r3, r1
 8006696:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800669a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	7f1b      	ldrb	r3, [r3, #28]
 80066a2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80066a8:	4313      	orrs	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066b4:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80066b8:	4b0b      	ldr	r3, [pc, #44]	@ (80066e8 <ETH_SetDMAConfig+0x108>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	687a      	ldr	r2, [r7, #4]
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	68f9      	ldr	r1, [r7, #12]
 80066c2:	430b      	orrs	r3, r1
 80066c4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80066c8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80066cc:	bf00      	nop
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	ffff87fd 	.word	0xffff87fd
 80066dc:	ffff2ffe 	.word	0xffff2ffe
 80066e0:	fffec000 	.word	0xfffec000
 80066e4:	ffc0efef 	.word	0xffc0efef
 80066e8:	7fc0ffff 	.word	0x7fc0ffff

080066ec <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b0a4      	sub	sp, #144	@ 0x90
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80066f4:	2301      	movs	r3, #1
 80066f6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80066fa:	2300      	movs	r3, #0
 80066fc:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80066fe:	2300      	movs	r3, #0
 8006700:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006704:	2300      	movs	r3, #0
 8006706:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006710:	2301      	movs	r3, #1
 8006712:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006716:	2301      	movs	r3, #1
 8006718:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800671c:	2300      	movs	r3, #0
 800671e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006722:	2301      	movs	r3, #1
 8006724:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006728:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800672c:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800672e:	2300      	movs	r3, #0
 8006730:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8006734:	2300      	movs	r3, #0
 8006736:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006738:	2300      	movs	r3, #0
 800673a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800673e:	2300      	movs	r3, #0
 8006740:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8006744:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8006748:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800674a:	2300      	movs	r3, #0
 800674c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006750:	2300      	movs	r3, #0
 8006752:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8006754:	2301      	movs	r3, #1
 8006756:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800675a:	2300      	movs	r3, #0
 800675c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006760:	2300      	movs	r3, #0
 8006762:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006766:	2300      	movs	r3, #0
 8006768:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800676a:	2300      	movs	r3, #0
 800676c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800676e:	2300      	movs	r3, #0
 8006770:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006772:	2300      	movs	r3, #0
 8006774:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006778:	2300      	movs	r3, #0
 800677a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800677e:	2301      	movs	r3, #1
 8006780:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006784:	2320      	movs	r3, #32
 8006786:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800678a:	2301      	movs	r3, #1
 800678c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006790:	2300      	movs	r3, #0
 8006792:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006796:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 800679a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800679c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80067a0:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80067a8:	2302      	movs	r3, #2
 80067aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80067ae:	2300      	movs	r3, #0
 80067b0:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80067b4:	2300      	movs	r3, #0
 80067b6:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80067ba:	2300      	movs	r3, #0
 80067bc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80067c0:	2301      	movs	r3, #1
 80067c2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80067c6:	2300      	movs	r3, #0
 80067c8:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80067ca:	2301      	movs	r3, #1
 80067cc:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80067d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80067d4:	4619      	mov	r1, r3
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7ff fde6 	bl	80063a8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80067dc:	2301      	movs	r3, #1
 80067de:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80067e0:	2301      	movs	r3, #1
 80067e2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80067ee:	2300      	movs	r3, #0
 80067f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80067f2:	2300      	movs	r3, #0
 80067f4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80067f6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80067fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80067fc:	2300      	movs	r3, #0
 80067fe:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006800:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006804:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006806:	2300      	movs	r3, #0
 8006808:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800680c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8006810:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006812:	f107 0308 	add.w	r3, r7, #8
 8006816:	4619      	mov	r1, r3
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f7ff fee1 	bl	80065e0 <ETH_SetDMAConfig>
}
 800681e:	bf00      	nop
 8006820:	3790      	adds	r7, #144	@ 0x90
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800682e:	2300      	movs	r3, #0
 8006830:	60fb      	str	r3, [r7, #12]
 8006832:	e01d      	b.n	8006870 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68d9      	ldr	r1, [r3, #12]
 8006838:	68fa      	ldr	r2, [r7, #12]
 800683a:	4613      	mov	r3, r2
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	4413      	add	r3, r2
 8006840:	00db      	lsls	r3, r3, #3
 8006842:	440b      	add	r3, r1
 8006844:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2200      	movs	r2, #0
 8006850:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2200      	movs	r2, #0
 8006856:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	2200      	movs	r2, #0
 800685c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	3206      	adds	r2, #6
 8006866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2b03      	cmp	r3, #3
 8006874:	d9de      	bls.n	8006834 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006884:	461a      	mov	r2, r3
 8006886:	2303      	movs	r3, #3
 8006888:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68da      	ldr	r2, [r3, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006898:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68da      	ldr	r2, [r3, #12]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80068a8:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80068ac:	bf00      	nop
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80068c0:	2300      	movs	r3, #0
 80068c2:	60fb      	str	r3, [r7, #12]
 80068c4:	e023      	b.n	800690e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6919      	ldr	r1, [r3, #16]
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4613      	mov	r3, r2
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	4413      	add	r3, r2
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	440b      	add	r3, r1
 80068d6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	2200      	movs	r2, #0
 80068dc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2200      	movs	r2, #0
 80068e2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	2200      	movs	r2, #0
 80068e8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	2200      	movs	r2, #0
 80068ee:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	2200      	movs	r2, #0
 80068f4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2200      	movs	r2, #0
 80068fa:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	3212      	adds	r2, #18
 8006904:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3301      	adds	r3, #1
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2b03      	cmp	r3, #3
 8006912:	d9d8      	bls.n	80068c6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800693a:	461a      	mov	r2, r3
 800693c:	2303      	movs	r3, #3
 800693e:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691a      	ldr	r2, [r3, #16]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800694e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006962:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8006966:	bf00      	nop
 8006968:	3714      	adds	r7, #20
 800696a:	46bd      	mov	sp, r7
 800696c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006970:	4770      	bx	lr
	...

08006974 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006974:	b480      	push	{r7}
 8006976:	b089      	sub	sp, #36	@ 0x24
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800697e:	2300      	movs	r3, #0
 8006980:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006982:	4b89      	ldr	r3, [pc, #548]	@ (8006ba8 <HAL_GPIO_Init+0x234>)
 8006984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006986:	e194      	b.n	8006cb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	2101      	movs	r1, #1
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	fa01 f303 	lsl.w	r3, r1, r3
 8006994:	4013      	ands	r3, r2
 8006996:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	f000 8186 	beq.w	8006cac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d005      	beq.n	80069b8 <HAL_GPIO_Init+0x44>
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f003 0303 	and.w	r3, r3, #3
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d130      	bne.n	8006a1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	2203      	movs	r2, #3
 80069c4:	fa02 f303 	lsl.w	r3, r2, r3
 80069c8:	43db      	mvns	r3, r3
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	4013      	ands	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	4313      	orrs	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069ee:	2201      	movs	r2, #1
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	fa02 f303 	lsl.w	r3, r2, r3
 80069f6:	43db      	mvns	r3, r3
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	4013      	ands	r3, r2
 80069fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	091b      	lsrs	r3, r3, #4
 8006a04:	f003 0201 	and.w	r2, r3, #1
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	2b03      	cmp	r3, #3
 8006a24:	d017      	beq.n	8006a56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	2203      	movs	r2, #3
 8006a32:	fa02 f303 	lsl.w	r3, r2, r3
 8006a36:	43db      	mvns	r3, r3
 8006a38:	69ba      	ldr	r2, [r7, #24]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	689a      	ldr	r2, [r3, #8]
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	f003 0303 	and.w	r3, r3, #3
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	d123      	bne.n	8006aaa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	08da      	lsrs	r2, r3, #3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	3208      	adds	r2, #8
 8006a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	f003 0307 	and.w	r3, r3, #7
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	220f      	movs	r2, #15
 8006a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7e:	43db      	mvns	r3, r3
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	4013      	ands	r3, r2
 8006a84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	691a      	ldr	r2, [r3, #16]
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	fa02 f303 	lsl.w	r3, r2, r3
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	08da      	lsrs	r2, r3, #3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3208      	adds	r2, #8
 8006aa4:	69b9      	ldr	r1, [r7, #24]
 8006aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	2203      	movs	r2, #3
 8006ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aba:	43db      	mvns	r3, r3
 8006abc:	69ba      	ldr	r2, [r7, #24]
 8006abe:	4013      	ands	r3, r2
 8006ac0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f003 0203 	and.w	r2, r3, #3
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	005b      	lsls	r3, r3, #1
 8006ace:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 80e0 	beq.w	8006cac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aec:	4b2f      	ldr	r3, [pc, #188]	@ (8006bac <HAL_GPIO_Init+0x238>)
 8006aee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006af2:	4a2e      	ldr	r2, [pc, #184]	@ (8006bac <HAL_GPIO_Init+0x238>)
 8006af4:	f043 0302 	orr.w	r3, r3, #2
 8006af8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006afc:	4b2b      	ldr	r3, [pc, #172]	@ (8006bac <HAL_GPIO_Init+0x238>)
 8006afe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b0a:	4a29      	ldr	r2, [pc, #164]	@ (8006bb0 <HAL_GPIO_Init+0x23c>)
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	089b      	lsrs	r3, r3, #2
 8006b10:	3302      	adds	r3, #2
 8006b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	220f      	movs	r2, #15
 8006b22:	fa02 f303 	lsl.w	r3, r2, r3
 8006b26:	43db      	mvns	r3, r3
 8006b28:	69ba      	ldr	r2, [r7, #24]
 8006b2a:	4013      	ands	r3, r2
 8006b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a20      	ldr	r2, [pc, #128]	@ (8006bb4 <HAL_GPIO_Init+0x240>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d052      	beq.n	8006bdc <HAL_GPIO_Init+0x268>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a1f      	ldr	r2, [pc, #124]	@ (8006bb8 <HAL_GPIO_Init+0x244>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d031      	beq.n	8006ba2 <HAL_GPIO_Init+0x22e>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a1e      	ldr	r2, [pc, #120]	@ (8006bbc <HAL_GPIO_Init+0x248>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d02b      	beq.n	8006b9e <HAL_GPIO_Init+0x22a>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a1d      	ldr	r2, [pc, #116]	@ (8006bc0 <HAL_GPIO_Init+0x24c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d025      	beq.n	8006b9a <HAL_GPIO_Init+0x226>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a1c      	ldr	r2, [pc, #112]	@ (8006bc4 <HAL_GPIO_Init+0x250>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d01f      	beq.n	8006b96 <HAL_GPIO_Init+0x222>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc8 <HAL_GPIO_Init+0x254>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d019      	beq.n	8006b92 <HAL_GPIO_Init+0x21e>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	4a1a      	ldr	r2, [pc, #104]	@ (8006bcc <HAL_GPIO_Init+0x258>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d013      	beq.n	8006b8e <HAL_GPIO_Init+0x21a>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a19      	ldr	r2, [pc, #100]	@ (8006bd0 <HAL_GPIO_Init+0x25c>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d00d      	beq.n	8006b8a <HAL_GPIO_Init+0x216>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a18      	ldr	r2, [pc, #96]	@ (8006bd4 <HAL_GPIO_Init+0x260>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d007      	beq.n	8006b86 <HAL_GPIO_Init+0x212>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a17      	ldr	r2, [pc, #92]	@ (8006bd8 <HAL_GPIO_Init+0x264>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d101      	bne.n	8006b82 <HAL_GPIO_Init+0x20e>
 8006b7e:	2309      	movs	r3, #9
 8006b80:	e02d      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b82:	230a      	movs	r3, #10
 8006b84:	e02b      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b86:	2308      	movs	r3, #8
 8006b88:	e029      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b8a:	2307      	movs	r3, #7
 8006b8c:	e027      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b8e:	2306      	movs	r3, #6
 8006b90:	e025      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b92:	2305      	movs	r3, #5
 8006b94:	e023      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b96:	2304      	movs	r3, #4
 8006b98:	e021      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e01f      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e01d      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e01b      	b.n	8006bde <HAL_GPIO_Init+0x26a>
 8006ba6:	bf00      	nop
 8006ba8:	58000080 	.word	0x58000080
 8006bac:	58024400 	.word	0x58024400
 8006bb0:	58000400 	.word	0x58000400
 8006bb4:	58020000 	.word	0x58020000
 8006bb8:	58020400 	.word	0x58020400
 8006bbc:	58020800 	.word	0x58020800
 8006bc0:	58020c00 	.word	0x58020c00
 8006bc4:	58021000 	.word	0x58021000
 8006bc8:	58021400 	.word	0x58021400
 8006bcc:	58021800 	.word	0x58021800
 8006bd0:	58021c00 	.word	0x58021c00
 8006bd4:	58022000 	.word	0x58022000
 8006bd8:	58022400 	.word	0x58022400
 8006bdc:	2300      	movs	r3, #0
 8006bde:	69fa      	ldr	r2, [r7, #28]
 8006be0:	f002 0203 	and.w	r2, r2, #3
 8006be4:	0092      	lsls	r2, r2, #2
 8006be6:	4093      	lsls	r3, r2
 8006be8:	69ba      	ldr	r2, [r7, #24]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006bee:	4938      	ldr	r1, [pc, #224]	@ (8006cd0 <HAL_GPIO_Init+0x35c>)
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	089b      	lsrs	r3, r3, #2
 8006bf4:	3302      	adds	r3, #2
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	43db      	mvns	r3, r3
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006c22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c26:	69bb      	ldr	r3, [r7, #24]
 8006c28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006c2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	43db      	mvns	r3, r3
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006c50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c54:	69bb      	ldr	r3, [r7, #24]
 8006c56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	43db      	mvns	r3, r3
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	4013      	ands	r3, r2
 8006c66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d003      	beq.n	8006c7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d003      	beq.n	8006ca6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f47f ae63 	bne.w	8006988 <HAL_GPIO_Init+0x14>
  }
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	3724      	adds	r7, #36	@ 0x24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	58000400 	.word	0x58000400

08006cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	807b      	strh	r3, [r7, #2]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ce4:	787b      	ldrb	r3, [r7, #1]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d003      	beq.n	8006cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006cea:	887a      	ldrh	r2, [r7, #2]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006cf0:	e003      	b.n	8006cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006cf2:	887b      	ldrh	r3, [r7, #2]
 8006cf4:	041a      	lsls	r2, r3, #16
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	619a      	str	r2, [r3, #24]
}
 8006cfa:	bf00      	nop
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
	...

08006d08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e08b      	b.n	8006e32 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d106      	bne.n	8006d34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fa fbf0 	bl	8001514 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2224      	movs	r2, #36	@ 0x24
 8006d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 0201 	bic.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685a      	ldr	r2, [r3, #4]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006d58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	689a      	ldr	r2, [r3, #8]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006d68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d107      	bne.n	8006d82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689a      	ldr	r2, [r3, #8]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d7e:	609a      	str	r2, [r3, #8]
 8006d80:	e006      	b.n	8006d90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689a      	ldr	r2, [r3, #8]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006d8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	2b02      	cmp	r3, #2
 8006d96:	d108      	bne.n	8006daa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006da6:	605a      	str	r2, [r3, #4]
 8006da8:	e007      	b.n	8006dba <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006db8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6859      	ldr	r1, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	4b1d      	ldr	r3, [pc, #116]	@ (8006e3c <HAL_I2C_Init+0x134>)
 8006dc6:	430b      	orrs	r3, r1
 8006dc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dd8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	691a      	ldr	r2, [r3, #16]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	695b      	ldr	r3, [r3, #20]
 8006de2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	699b      	ldr	r3, [r3, #24]
 8006dea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	430a      	orrs	r2, r1
 8006df2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	69d9      	ldr	r1, [r3, #28]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6a1a      	ldr	r2, [r3, #32]
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	430a      	orrs	r2, r1
 8006e02:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0201 	orr.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3708      	adds	r7, #8
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	02008000 	.word	0x02008000

08006e40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	4608      	mov	r0, r1
 8006e4a:	4611      	mov	r1, r2
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4603      	mov	r3, r0
 8006e50:	817b      	strh	r3, [r7, #10]
 8006e52:	460b      	mov	r3, r1
 8006e54:	813b      	strh	r3, [r7, #8]
 8006e56:	4613      	mov	r3, r2
 8006e58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	f040 80f9 	bne.w	800705a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d002      	beq.n	8006e74 <HAL_I2C_Mem_Write+0x34>
 8006e6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d105      	bne.n	8006e80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006e7a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e0ed      	b.n	800705c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d101      	bne.n	8006e8e <HAL_I2C_Mem_Write+0x4e>
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	e0e6      	b.n	800705c <HAL_I2C_Mem_Write+0x21c>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006e96:	f7fb fd5f 	bl	8002958 <HAL_GetTick>
 8006e9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	2319      	movs	r3, #25
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 fac3 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e0d1      	b.n	800705c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2221      	movs	r2, #33	@ 0x21
 8006ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2240      	movs	r2, #64	@ 0x40
 8006ec4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6a3a      	ldr	r2, [r7, #32]
 8006ed2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ee0:	88f8      	ldrh	r0, [r7, #6]
 8006ee2:	893a      	ldrh	r2, [r7, #8]
 8006ee4:	8979      	ldrh	r1, [r7, #10]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	9301      	str	r3, [sp, #4]
 8006eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	4603      	mov	r3, r0
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 f9d3 	bl	800729c <I2C_RequestMemoryWrite>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e0a9      	b.n	800705c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	2bff      	cmp	r3, #255	@ 0xff
 8006f10:	d90e      	bls.n	8006f30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	22ff      	movs	r2, #255	@ 0xff
 8006f16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	8979      	ldrh	r1, [r7, #10]
 8006f20:	2300      	movs	r3, #0
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 fc47 	bl	80077bc <I2C_TransferConfig>
 8006f2e:	e00f      	b.n	8006f50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f3e:	b2da      	uxtb	r2, r3
 8006f40:	8979      	ldrh	r1, [r7, #10]
 8006f42:	2300      	movs	r3, #0
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f4a:	68f8      	ldr	r0, [r7, #12]
 8006f4c:	f000 fc36 	bl	80077bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 fac6 	bl	80074e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e07b      	b.n	800705c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f68:	781a      	ldrb	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	3b01      	subs	r3, #1
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d034      	beq.n	8007008 <HAL_I2C_Mem_Write+0x1c8>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d130      	bne.n	8007008 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fac:	2200      	movs	r2, #0
 8006fae:	2180      	movs	r1, #128	@ 0x80
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 fa3f 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d001      	beq.n	8006fc0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e04d      	b.n	800705c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc4:	b29b      	uxth	r3, r3
 8006fc6:	2bff      	cmp	r3, #255	@ 0xff
 8006fc8:	d90e      	bls.n	8006fe8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	22ff      	movs	r2, #255	@ 0xff
 8006fce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	8979      	ldrh	r1, [r7, #10]
 8006fd8:	2300      	movs	r3, #0
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 fbeb 	bl	80077bc <I2C_TransferConfig>
 8006fe6:	e00f      	b.n	8007008 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ff6:	b2da      	uxtb	r2, r3
 8006ff8:	8979      	ldrh	r1, [r7, #10]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007002:	68f8      	ldr	r0, [r7, #12]
 8007004:	f000 fbda 	bl	80077bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800700c:	b29b      	uxth	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d19e      	bne.n	8006f50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007012:	697a      	ldr	r2, [r7, #20]
 8007014:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007016:	68f8      	ldr	r0, [r7, #12]
 8007018:	f000 faac 	bl	8007574 <I2C_WaitOnSTOPFlagUntilTimeout>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d001      	beq.n	8007026 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007022:	2301      	movs	r3, #1
 8007024:	e01a      	b.n	800705c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2220      	movs	r2, #32
 800702c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6859      	ldr	r1, [r3, #4]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	4b0a      	ldr	r3, [pc, #40]	@ (8007064 <HAL_I2C_Mem_Write+0x224>)
 800703a:	400b      	ands	r3, r1
 800703c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	e000      	b.n	800705c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800705a:	2302      	movs	r3, #2
  }
}
 800705c:	4618      	mov	r0, r3
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	fe00e800 	.word	0xfe00e800

08007068 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b088      	sub	sp, #32
 800706c:	af02      	add	r7, sp, #8
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	4608      	mov	r0, r1
 8007072:	4611      	mov	r1, r2
 8007074:	461a      	mov	r2, r3
 8007076:	4603      	mov	r3, r0
 8007078:	817b      	strh	r3, [r7, #10]
 800707a:	460b      	mov	r3, r1
 800707c:	813b      	strh	r3, [r7, #8]
 800707e:	4613      	mov	r3, r2
 8007080:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b20      	cmp	r3, #32
 800708c:	f040 80fd 	bne.w	800728a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d002      	beq.n	800709c <HAL_I2C_Mem_Read+0x34>
 8007096:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007098:	2b00      	cmp	r3, #0
 800709a:	d105      	bne.n	80070a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070a2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	e0f1      	b.n	800728c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d101      	bne.n	80070b6 <HAL_I2C_Mem_Read+0x4e>
 80070b2:	2302      	movs	r3, #2
 80070b4:	e0ea      	b.n	800728c <HAL_I2C_Mem_Read+0x224>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80070be:	f7fb fc4b 	bl	8002958 <HAL_GetTick>
 80070c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	2319      	movs	r3, #25
 80070ca:	2201      	movs	r2, #1
 80070cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 f9af 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 80070d6:	4603      	mov	r3, r0
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e0d5      	b.n	800728c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2222      	movs	r2, #34	@ 0x22
 80070e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2240      	movs	r2, #64	@ 0x40
 80070ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6a3a      	ldr	r2, [r7, #32]
 80070fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007100:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007108:	88f8      	ldrh	r0, [r7, #6]
 800710a:	893a      	ldrh	r2, [r7, #8]
 800710c:	8979      	ldrh	r1, [r7, #10]
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	4603      	mov	r3, r0
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 f913 	bl	8007344 <I2C_RequestMemoryRead>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e0ad      	b.n	800728c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007134:	b29b      	uxth	r3, r3
 8007136:	2bff      	cmp	r3, #255	@ 0xff
 8007138:	d90e      	bls.n	8007158 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	22ff      	movs	r2, #255	@ 0xff
 800713e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007144:	b2da      	uxtb	r2, r3
 8007146:	8979      	ldrh	r1, [r7, #10]
 8007148:	4b52      	ldr	r3, [pc, #328]	@ (8007294 <HAL_I2C_Mem_Read+0x22c>)
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fb33 	bl	80077bc <I2C_TransferConfig>
 8007156:	e00f      	b.n	8007178 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800715c:	b29a      	uxth	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007166:	b2da      	uxtb	r2, r3
 8007168:	8979      	ldrh	r1, [r7, #10]
 800716a:	4b4a      	ldr	r3, [pc, #296]	@ (8007294 <HAL_I2C_Mem_Read+0x22c>)
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 fb22 	bl	80077bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	9300      	str	r3, [sp, #0]
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	2200      	movs	r2, #0
 8007180:	2104      	movs	r1, #4
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f000 f956 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 8007188:	4603      	mov	r3, r0
 800718a:	2b00      	cmp	r3, #0
 800718c:	d001      	beq.n	8007192 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e07c      	b.n	800728c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800719c:	b2d2      	uxtb	r2, r2
 800719e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a4:	1c5a      	adds	r2, r3, #1
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071ae:	3b01      	subs	r3, #1
 80071b0:	b29a      	uxth	r2, r3
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	3b01      	subs	r3, #1
 80071be:	b29a      	uxth	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d034      	beq.n	8007238 <HAL_I2C_Mem_Read+0x1d0>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d130      	bne.n	8007238 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071dc:	2200      	movs	r2, #0
 80071de:	2180      	movs	r1, #128	@ 0x80
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 f927 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e04d      	b.n	800728c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	2bff      	cmp	r3, #255	@ 0xff
 80071f8:	d90e      	bls.n	8007218 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	22ff      	movs	r2, #255	@ 0xff
 80071fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007204:	b2da      	uxtb	r2, r3
 8007206:	8979      	ldrh	r1, [r7, #10]
 8007208:	2300      	movs	r3, #0
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 fad3 	bl	80077bc <I2C_TransferConfig>
 8007216:	e00f      	b.n	8007238 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800721c:	b29a      	uxth	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007226:	b2da      	uxtb	r2, r3
 8007228:	8979      	ldrh	r1, [r7, #10]
 800722a:	2300      	movs	r3, #0
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007232:	68f8      	ldr	r0, [r7, #12]
 8007234:	f000 fac2 	bl	80077bc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d19a      	bne.n	8007178 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f000 f994 	bl	8007574 <I2C_WaitOnSTOPFlagUntilTimeout>
 800724c:	4603      	mov	r3, r0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d001      	beq.n	8007256 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e01a      	b.n	800728c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2220      	movs	r2, #32
 800725c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6859      	ldr	r1, [r3, #4]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	4b0b      	ldr	r3, [pc, #44]	@ (8007298 <HAL_I2C_Mem_Read+0x230>)
 800726a:	400b      	ands	r3, r1
 800726c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2220      	movs	r2, #32
 8007272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	e000      	b.n	800728c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800728a:	2302      	movs	r3, #2
  }
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	80002400 	.word	0x80002400
 8007298:	fe00e800 	.word	0xfe00e800

0800729c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	4608      	mov	r0, r1
 80072a6:	4611      	mov	r1, r2
 80072a8:	461a      	mov	r2, r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	817b      	strh	r3, [r7, #10]
 80072ae:	460b      	mov	r3, r1
 80072b0:	813b      	strh	r3, [r7, #8]
 80072b2:	4613      	mov	r3, r2
 80072b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80072b6:	88fb      	ldrh	r3, [r7, #6]
 80072b8:	b2da      	uxtb	r2, r3
 80072ba:	8979      	ldrh	r1, [r7, #10]
 80072bc:	4b20      	ldr	r3, [pc, #128]	@ (8007340 <I2C_RequestMemoryWrite+0xa4>)
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80072c4:	68f8      	ldr	r0, [r7, #12]
 80072c6:	f000 fa79 	bl	80077bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	69b9      	ldr	r1, [r7, #24]
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f000 f909 	bl	80074e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e02c      	b.n	8007338 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d105      	bne.n	80072f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80072e4:	893b      	ldrh	r3, [r7, #8]
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80072ee:	e015      	b.n	800731c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80072f0:	893b      	ldrh	r3, [r7, #8]
 80072f2:	0a1b      	lsrs	r3, r3, #8
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	69b9      	ldr	r1, [r7, #24]
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 f8ef 	bl	80074e6 <I2C_WaitOnTXISFlagUntilTimeout>
 8007308:	4603      	mov	r3, r0
 800730a:	2b00      	cmp	r3, #0
 800730c:	d001      	beq.n	8007312 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e012      	b.n	8007338 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007312:	893b      	ldrh	r3, [r7, #8]
 8007314:	b2da      	uxtb	r2, r3
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	9300      	str	r3, [sp, #0]
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	2200      	movs	r2, #0
 8007324:	2180      	movs	r1, #128	@ 0x80
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 f884 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3710      	adds	r7, #16
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	80002000 	.word	0x80002000

08007344 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b086      	sub	sp, #24
 8007348:	af02      	add	r7, sp, #8
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	4608      	mov	r0, r1
 800734e:	4611      	mov	r1, r2
 8007350:	461a      	mov	r2, r3
 8007352:	4603      	mov	r3, r0
 8007354:	817b      	strh	r3, [r7, #10]
 8007356:	460b      	mov	r3, r1
 8007358:	813b      	strh	r3, [r7, #8]
 800735a:	4613      	mov	r3, r2
 800735c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800735e:	88fb      	ldrh	r3, [r7, #6]
 8007360:	b2da      	uxtb	r2, r3
 8007362:	8979      	ldrh	r1, [r7, #10]
 8007364:	4b20      	ldr	r3, [pc, #128]	@ (80073e8 <I2C_RequestMemoryRead+0xa4>)
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	2300      	movs	r3, #0
 800736a:	68f8      	ldr	r0, [r7, #12]
 800736c:	f000 fa26 	bl	80077bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	69b9      	ldr	r1, [r7, #24]
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f000 f8b6 	bl	80074e6 <I2C_WaitOnTXISFlagUntilTimeout>
 800737a:	4603      	mov	r3, r0
 800737c:	2b00      	cmp	r3, #0
 800737e:	d001      	beq.n	8007384 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007380:	2301      	movs	r3, #1
 8007382:	e02c      	b.n	80073de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007384:	88fb      	ldrh	r3, [r7, #6]
 8007386:	2b01      	cmp	r3, #1
 8007388:	d105      	bne.n	8007396 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800738a:	893b      	ldrh	r3, [r7, #8]
 800738c:	b2da      	uxtb	r2, r3
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	629a      	str	r2, [r3, #40]	@ 0x28
 8007394:	e015      	b.n	80073c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007396:	893b      	ldrh	r3, [r7, #8]
 8007398:	0a1b      	lsrs	r3, r3, #8
 800739a:	b29b      	uxth	r3, r3
 800739c:	b2da      	uxtb	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073a4:	69fa      	ldr	r2, [r7, #28]
 80073a6:	69b9      	ldr	r1, [r7, #24]
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f89c 	bl	80074e6 <I2C_WaitOnTXISFlagUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e012      	b.n	80073de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073b8:	893b      	ldrh	r3, [r7, #8]
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2200      	movs	r2, #0
 80073ca:	2140      	movs	r1, #64	@ 0x40
 80073cc:	68f8      	ldr	r0, [r7, #12]
 80073ce:	f000 f831 	bl	8007434 <I2C_WaitOnFlagUntilTimeout>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	e000      	b.n	80073de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	80002000 	.word	0x80002000

080073ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	699b      	ldr	r3, [r3, #24]
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d103      	bne.n	800740a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2200      	movs	r2, #0
 8007408:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	f003 0301 	and.w	r3, r3, #1
 8007414:	2b01      	cmp	r3, #1
 8007416:	d007      	beq.n	8007428 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699a      	ldr	r2, [r3, #24]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0201 	orr.w	r2, r2, #1
 8007426:	619a      	str	r2, [r3, #24]
  }
}
 8007428:	bf00      	nop
 800742a:	370c      	adds	r7, #12
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	603b      	str	r3, [r7, #0]
 8007440:	4613      	mov	r3, r2
 8007442:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007444:	e03b      	b.n	80074be <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	6839      	ldr	r1, [r7, #0]
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f000 f8d6 	bl	80075fc <I2C_IsErrorOccurred>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d001      	beq.n	800745a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e041      	b.n	80074de <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007460:	d02d      	beq.n	80074be <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007462:	f7fb fa79 	bl	8002958 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	683a      	ldr	r2, [r7, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d302      	bcc.n	8007478 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d122      	bne.n	80074be <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699a      	ldr	r2, [r3, #24]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	4013      	ands	r3, r2
 8007482:	68ba      	ldr	r2, [r7, #8]
 8007484:	429a      	cmp	r2, r3
 8007486:	bf0c      	ite	eq
 8007488:	2301      	moveq	r3, #1
 800748a:	2300      	movne	r3, #0
 800748c:	b2db      	uxtb	r3, r3
 800748e:	461a      	mov	r2, r3
 8007490:	79fb      	ldrb	r3, [r7, #7]
 8007492:	429a      	cmp	r2, r3
 8007494:	d113      	bne.n	80074be <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800749a:	f043 0220 	orr.w	r2, r3, #32
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2220      	movs	r2, #32
 80074a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	e00f      	b.n	80074de <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	699a      	ldr	r2, [r3, #24]
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	4013      	ands	r3, r2
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	bf0c      	ite	eq
 80074ce:	2301      	moveq	r3, #1
 80074d0:	2300      	movne	r3, #0
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	461a      	mov	r2, r3
 80074d6:	79fb      	ldrb	r3, [r7, #7]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d0b4      	beq.n	8007446 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	60f8      	str	r0, [r7, #12]
 80074ee:	60b9      	str	r1, [r7, #8]
 80074f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80074f2:	e033      	b.n	800755c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	68b9      	ldr	r1, [r7, #8]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f000 f87f 	bl	80075fc <I2C_IsErrorOccurred>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d001      	beq.n	8007508 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e031      	b.n	800756c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800750e:	d025      	beq.n	800755c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007510:	f7fb fa22 	bl	8002958 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	429a      	cmp	r2, r3
 800751e:	d302      	bcc.n	8007526 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d11a      	bne.n	800755c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	699b      	ldr	r3, [r3, #24]
 800752c:	f003 0302 	and.w	r3, r3, #2
 8007530:	2b02      	cmp	r3, #2
 8007532:	d013      	beq.n	800755c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007538:	f043 0220 	orr.w	r2, r3, #32
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2220      	movs	r2, #32
 8007544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2200      	movs	r2, #0
 8007554:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e007      	b.n	800756c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	f003 0302 	and.w	r3, r3, #2
 8007566:	2b02      	cmp	r3, #2
 8007568:	d1c4      	bne.n	80074f4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800756a:	2300      	movs	r3, #0
}
 800756c:	4618      	mov	r0, r3
 800756e:	3710      	adds	r7, #16
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007580:	e02f      	b.n	80075e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	68b9      	ldr	r1, [r7, #8]
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f000 f838 	bl	80075fc <I2C_IsErrorOccurred>
 800758c:	4603      	mov	r3, r0
 800758e:	2b00      	cmp	r3, #0
 8007590:	d001      	beq.n	8007596 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e02d      	b.n	80075f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007596:	f7fb f9df 	bl	8002958 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	68ba      	ldr	r2, [r7, #8]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d302      	bcc.n	80075ac <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d11a      	bne.n	80075e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b20      	cmp	r3, #32
 80075b8:	d013      	beq.n	80075e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075be:	f043 0220 	orr.w	r2, r3, #32
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2220      	movs	r2, #32
 80075ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e007      	b.n	80075f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	699b      	ldr	r3, [r3, #24]
 80075e8:	f003 0320 	and.w	r3, r3, #32
 80075ec:	2b20      	cmp	r3, #32
 80075ee:	d1c8      	bne.n	8007582 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
	...

080075fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b08a      	sub	sp, #40	@ 0x28
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	60b9      	str	r1, [r7, #8]
 8007606:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	f003 0310 	and.w	r3, r3, #16
 8007624:	2b00      	cmp	r3, #0
 8007626:	d068      	beq.n	80076fa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2210      	movs	r2, #16
 800762e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007630:	e049      	b.n	80076c6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007638:	d045      	beq.n	80076c6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800763a:	f7fb f98d 	bl	8002958 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	68ba      	ldr	r2, [r7, #8]
 8007646:	429a      	cmp	r2, r3
 8007648:	d302      	bcc.n	8007650 <I2C_IsErrorOccurred+0x54>
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d13a      	bne.n	80076c6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800765a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007662:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800766e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007672:	d121      	bne.n	80076b8 <I2C_IsErrorOccurred+0xbc>
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800767a:	d01d      	beq.n	80076b8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800767c:	7cfb      	ldrb	r3, [r7, #19]
 800767e:	2b20      	cmp	r3, #32
 8007680:	d01a      	beq.n	80076b8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007690:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007692:	f7fb f961 	bl	8002958 <HAL_GetTick>
 8007696:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007698:	e00e      	b.n	80076b8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800769a:	f7fb f95d 	bl	8002958 <HAL_GetTick>
 800769e:	4602      	mov	r2, r0
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	2b19      	cmp	r3, #25
 80076a6:	d907      	bls.n	80076b8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	f043 0320 	orr.w	r3, r3, #32
 80076ae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80076b6:	e006      	b.n	80076c6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	f003 0320 	and.w	r3, r3, #32
 80076c2:	2b20      	cmp	r3, #32
 80076c4:	d1e9      	bne.n	800769a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	699b      	ldr	r3, [r3, #24]
 80076cc:	f003 0320 	and.w	r3, r3, #32
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	d003      	beq.n	80076dc <I2C_IsErrorOccurred+0xe0>
 80076d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d0aa      	beq.n	8007632 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80076dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d103      	bne.n	80076ec <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2220      	movs	r2, #32
 80076ea:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	f043 0304 	orr.w	r3, r3, #4
 80076f2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	699b      	ldr	r3, [r3, #24]
 8007700:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00b      	beq.n	8007724 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	f043 0301 	orr.w	r3, r3, #1
 8007712:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800771c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007724:	69bb      	ldr	r3, [r7, #24]
 8007726:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800772e:	6a3b      	ldr	r3, [r7, #32]
 8007730:	f043 0308 	orr.w	r3, r3, #8
 8007734:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800773e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00b      	beq.n	8007768 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007750:	6a3b      	ldr	r3, [r7, #32]
 8007752:	f043 0302 	orr.w	r3, r3, #2
 8007756:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007760:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007762:	2301      	movs	r3, #1
 8007764:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800776c:	2b00      	cmp	r3, #0
 800776e:	d01c      	beq.n	80077aa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f7ff fe3b 	bl	80073ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6859      	ldr	r1, [r3, #4]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	4b0d      	ldr	r3, [pc, #52]	@ (80077b8 <I2C_IsErrorOccurred+0x1bc>)
 8007782:	400b      	ands	r3, r1
 8007784:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	431a      	orrs	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2220      	movs	r2, #32
 8007796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80077aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3728      	adds	r7, #40	@ 0x28
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	fe00e800 	.word	0xfe00e800

080077bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	607b      	str	r3, [r7, #4]
 80077c6:	460b      	mov	r3, r1
 80077c8:	817b      	strh	r3, [r7, #10]
 80077ca:	4613      	mov	r3, r2
 80077cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077ce:	897b      	ldrh	r3, [r7, #10]
 80077d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80077d4:	7a7b      	ldrb	r3, [r7, #9]
 80077d6:	041b      	lsls	r3, r3, #16
 80077d8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077dc:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	4313      	orrs	r3, r2
 80077e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80077ea:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	0d5b      	lsrs	r3, r3, #21
 80077f6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80077fa:	4b08      	ldr	r3, [pc, #32]	@ (800781c <I2C_TransferConfig+0x60>)
 80077fc:	430b      	orrs	r3, r1
 80077fe:	43db      	mvns	r3, r3
 8007800:	ea02 0103 	and.w	r1, r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	430a      	orrs	r2, r1
 800780c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800780e:	bf00      	nop
 8007810:	371c      	adds	r7, #28
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	03ff63ff 	.word	0x03ff63ff

08007820 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b20      	cmp	r3, #32
 8007834:	d138      	bne.n	80078a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007840:	2302      	movs	r3, #2
 8007842:	e032      	b.n	80078aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2224      	movs	r2, #36	@ 0x24
 8007850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0201 	bic.w	r2, r2, #1
 8007862:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007872:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6819      	ldr	r1, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	430a      	orrs	r2, r1
 8007882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0201 	orr.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2220      	movs	r2, #32
 8007898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	e000      	b.n	80078aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80078a8:	2302      	movs	r3, #2
  }
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b20      	cmp	r3, #32
 80078ca:	d139      	bne.n	8007940 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80078d2:	2b01      	cmp	r3, #1
 80078d4:	d101      	bne.n	80078da <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80078d6:	2302      	movs	r3, #2
 80078d8:	e033      	b.n	8007942 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2224      	movs	r2, #36	@ 0x24
 80078e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f022 0201 	bic.w	r2, r2, #1
 80078f8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007908:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	021b      	lsls	r3, r3, #8
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0201 	orr.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2220      	movs	r2, #32
 8007930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800793c:	2300      	movs	r3, #0
 800793e:	e000      	b.n	8007942 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007940:	2302      	movs	r3, #2
  }
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
	...

08007950 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007958:	4b0d      	ldr	r3, [pc, #52]	@ (8007990 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800795a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800795e:	4a0c      	ldr	r2, [pc, #48]	@ (8007990 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8007960:	f043 0302 	orr.w	r3, r3, #2
 8007964:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8007968:	4b09      	ldr	r3, [pc, #36]	@ (8007990 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800796a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8007976:	4b07      	ldr	r3, [pc, #28]	@ (8007994 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8007978:	685a      	ldr	r2, [r3, #4]
 800797a:	4906      	ldr	r1, [pc, #24]	@ (8007994 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	4313      	orrs	r3, r2
 8007980:	604b      	str	r3, [r1, #4]
}
 8007982:	bf00      	nop
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	58024400 	.word	0x58024400
 8007994:	58000400 	.word	0x58000400

08007998 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af02      	add	r7, sp, #8
 800799e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e0fe      	b.n	8007ba8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fa fe9e 	bl	8002700 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2203      	movs	r2, #3
 80079c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f006 fae7 	bl	800dfa4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	7c1a      	ldrb	r2, [r3, #16]
 80079de:	f88d 2000 	strb.w	r2, [sp]
 80079e2:	3304      	adds	r3, #4
 80079e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079e6:	f006 fa6b 	bl	800dec0 <USB_CoreInit>
 80079ea:	4603      	mov	r3, r0
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d005      	beq.n	80079fc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e0d5      	b.n	8007ba8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2100      	movs	r1, #0
 8007a02:	4618      	mov	r0, r3
 8007a04:	f006 fadf 	bl	800dfc6 <USB_SetCurrentMode>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2202      	movs	r2, #2
 8007a12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e0c6      	b.n	8007ba8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	73fb      	strb	r3, [r7, #15]
 8007a1e:	e04a      	b.n	8007ab6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007a20:	7bfa      	ldrb	r2, [r7, #15]
 8007a22:	6879      	ldr	r1, [r7, #4]
 8007a24:	4613      	mov	r3, r2
 8007a26:	00db      	lsls	r3, r3, #3
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	440b      	add	r3, r1
 8007a2e:	3315      	adds	r3, #21
 8007a30:	2201      	movs	r2, #1
 8007a32:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007a34:	7bfa      	ldrb	r2, [r7, #15]
 8007a36:	6879      	ldr	r1, [r7, #4]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	440b      	add	r3, r1
 8007a42:	3314      	adds	r3, #20
 8007a44:	7bfa      	ldrb	r2, [r7, #15]
 8007a46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007a48:	7bfa      	ldrb	r2, [r7, #15]
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
 8007a4c:	b298      	uxth	r0, r3
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4613      	mov	r3, r2
 8007a52:	00db      	lsls	r3, r3, #3
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	332e      	adds	r3, #46	@ 0x2e
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007a60:	7bfa      	ldrb	r2, [r7, #15]
 8007a62:	6879      	ldr	r1, [r7, #4]
 8007a64:	4613      	mov	r3, r2
 8007a66:	00db      	lsls	r3, r3, #3
 8007a68:	4413      	add	r3, r2
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	440b      	add	r3, r1
 8007a6e:	3318      	adds	r3, #24
 8007a70:	2200      	movs	r2, #0
 8007a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007a74:	7bfa      	ldrb	r2, [r7, #15]
 8007a76:	6879      	ldr	r1, [r7, #4]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	440b      	add	r3, r1
 8007a82:	331c      	adds	r3, #28
 8007a84:	2200      	movs	r2, #0
 8007a86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007a88:	7bfa      	ldrb	r2, [r7, #15]
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	00db      	lsls	r3, r3, #3
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	440b      	add	r3, r1
 8007a96:	3320      	adds	r3, #32
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007a9c:	7bfa      	ldrb	r2, [r7, #15]
 8007a9e:	6879      	ldr	r1, [r7, #4]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	440b      	add	r3, r1
 8007aaa:	3324      	adds	r3, #36	@ 0x24
 8007aac:	2200      	movs	r2, #0
 8007aae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	73fb      	strb	r3, [r7, #15]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	791b      	ldrb	r3, [r3, #4]
 8007aba:	7bfa      	ldrb	r2, [r7, #15]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d3af      	bcc.n	8007a20 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	73fb      	strb	r3, [r7, #15]
 8007ac4:	e044      	b.n	8007b50 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007ac6:	7bfa      	ldrb	r2, [r7, #15]
 8007ac8:	6879      	ldr	r1, [r7, #4]
 8007aca:	4613      	mov	r3, r2
 8007acc:	00db      	lsls	r3, r3, #3
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	440b      	add	r3, r1
 8007ad4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007ad8:	2200      	movs	r2, #0
 8007ada:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007adc:	7bfa      	ldrb	r2, [r7, #15]
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	00db      	lsls	r3, r3, #3
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	440b      	add	r3, r1
 8007aea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007aee:	7bfa      	ldrb	r2, [r7, #15]
 8007af0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007af2:	7bfa      	ldrb	r2, [r7, #15]
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	4613      	mov	r3, r2
 8007af8:	00db      	lsls	r3, r3, #3
 8007afa:	4413      	add	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	440b      	add	r3, r1
 8007b00:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007b04:	2200      	movs	r2, #0
 8007b06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007b08:	7bfa      	ldrb	r2, [r7, #15]
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	4413      	add	r3, r2
 8007b12:	009b      	lsls	r3, r3, #2
 8007b14:	440b      	add	r3, r1
 8007b16:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007b1e:	7bfa      	ldrb	r2, [r7, #15]
 8007b20:	6879      	ldr	r1, [r7, #4]
 8007b22:	4613      	mov	r3, r2
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007b30:	2200      	movs	r2, #0
 8007b32:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007b34:	7bfa      	ldrb	r2, [r7, #15]
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	440b      	add	r3, r1
 8007b42:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007b46:	2200      	movs	r2, #0
 8007b48:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	73fb      	strb	r3, [r7, #15]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	791b      	ldrb	r3, [r3, #4]
 8007b54:	7bfa      	ldrb	r2, [r7, #15]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d3b5      	bcc.n	8007ac6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6818      	ldr	r0, [r3, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	7c1a      	ldrb	r2, [r3, #16]
 8007b62:	f88d 2000 	strb.w	r2, [sp]
 8007b66:	3304      	adds	r3, #4
 8007b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b6a:	f006 fa79 	bl	800e060 <USB_DevInit>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d005      	beq.n	8007b80 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2202      	movs	r2, #2
 8007b78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e013      	b.n	8007ba8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	7b1b      	ldrb	r3, [r3, #12]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d102      	bne.n	8007b9c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f80a 	bl	8007bb0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f006 fc34 	bl	800e40e <USB_DevDisconnect>

  return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3710      	adds	r7, #16
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b085      	sub	sp, #20
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	699b      	ldr	r3, [r3, #24]
 8007bd2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007bde:	4b05      	ldr	r3, [pc, #20]	@ (8007bf4 <HAL_PCDEx_ActivateLPM+0x44>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3714      	adds	r7, #20
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr
 8007bf4:	10000003 	.word	0x10000003

08007bf8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007c00:	4b19      	ldr	r3, [pc, #100]	@ (8007c68 <HAL_PWREx_ConfigSupply+0x70>)
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d00a      	beq.n	8007c22 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007c0c:	4b16      	ldr	r3, [pc, #88]	@ (8007c68 <HAL_PWREx_ConfigSupply+0x70>)
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d001      	beq.n	8007c1e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e01f      	b.n	8007c5e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	e01d      	b.n	8007c5e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007c22:	4b11      	ldr	r3, [pc, #68]	@ (8007c68 <HAL_PWREx_ConfigSupply+0x70>)
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f023 0207 	bic.w	r2, r3, #7
 8007c2a:	490f      	ldr	r1, [pc, #60]	@ (8007c68 <HAL_PWREx_ConfigSupply+0x70>)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007c32:	f7fa fe91 	bl	8002958 <HAL_GetTick>
 8007c36:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c38:	e009      	b.n	8007c4e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007c3a:	f7fa fe8d 	bl	8002958 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c48:	d901      	bls.n	8007c4e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e007      	b.n	8007c5e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007c4e:	4b06      	ldr	r3, [pc, #24]	@ (8007c68 <HAL_PWREx_ConfigSupply+0x70>)
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c5a:	d1ee      	bne.n	8007c3a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	58024800 	.word	0x58024800

08007c6c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007c70:	4b05      	ldr	r3, [pc, #20]	@ (8007c88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	4a04      	ldr	r2, [pc, #16]	@ (8007c88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007c7a:	60d3      	str	r3, [r2, #12]
}
 8007c7c:	bf00      	nop
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	58024800 	.word	0x58024800

08007c8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b08c      	sub	sp, #48	@ 0x30
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d102      	bne.n	8007ca0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	f000 bc48 	b.w	8008530 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 0301 	and.w	r3, r3, #1
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	f000 8088 	beq.w	8007dbe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cae:	4b99      	ldr	r3, [pc, #612]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007cb8:	4b96      	ldr	r3, [pc, #600]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc0:	2b10      	cmp	r3, #16
 8007cc2:	d007      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x48>
 8007cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc6:	2b18      	cmp	r3, #24
 8007cc8:	d111      	bne.n	8007cee <HAL_RCC_OscConfig+0x62>
 8007cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ccc:	f003 0303 	and.w	r3, r3, #3
 8007cd0:	2b02      	cmp	r3, #2
 8007cd2:	d10c      	bne.n	8007cee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cd4:	4b8f      	ldr	r3, [pc, #572]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d06d      	beq.n	8007dbc <HAL_RCC_OscConfig+0x130>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d169      	bne.n	8007dbc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	f000 bc21 	b.w	8008530 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cf6:	d106      	bne.n	8007d06 <HAL_RCC_OscConfig+0x7a>
 8007cf8:	4b86      	ldr	r3, [pc, #536]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a85      	ldr	r2, [pc, #532]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007cfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d02:	6013      	str	r3, [r2, #0]
 8007d04:	e02e      	b.n	8007d64 <HAL_RCC_OscConfig+0xd8>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10c      	bne.n	8007d28 <HAL_RCC_OscConfig+0x9c>
 8007d0e:	4b81      	ldr	r3, [pc, #516]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a80      	ldr	r2, [pc, #512]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d18:	6013      	str	r3, [r2, #0]
 8007d1a:	4b7e      	ldr	r3, [pc, #504]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a7d      	ldr	r2, [pc, #500]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007d20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	e01d      	b.n	8007d64 <HAL_RCC_OscConfig+0xd8>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d30:	d10c      	bne.n	8007d4c <HAL_RCC_OscConfig+0xc0>
 8007d32:	4b78      	ldr	r3, [pc, #480]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a77      	ldr	r2, [pc, #476]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007d38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d3c:	6013      	str	r3, [r2, #0]
 8007d3e:	4b75      	ldr	r3, [pc, #468]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a74      	ldr	r2, [pc, #464]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d48:	6013      	str	r3, [r2, #0]
 8007d4a:	e00b      	b.n	8007d64 <HAL_RCC_OscConfig+0xd8>
 8007d4c:	4b71      	ldr	r3, [pc, #452]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a70      	ldr	r2, [pc, #448]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007d52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d56:	6013      	str	r3, [r2, #0]
 8007d58:	4b6e      	ldr	r3, [pc, #440]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a6d      	ldr	r2, [pc, #436]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007d5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d013      	beq.n	8007d94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d6c:	f7fa fdf4 	bl	8002958 <HAL_GetTick>
 8007d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d72:	e008      	b.n	8007d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d74:	f7fa fdf0 	bl	8002958 <HAL_GetTick>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7c:	1ad3      	subs	r3, r2, r3
 8007d7e:	2b64      	cmp	r3, #100	@ 0x64
 8007d80:	d901      	bls.n	8007d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007d82:	2303      	movs	r3, #3
 8007d84:	e3d4      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007d86:	4b63      	ldr	r3, [pc, #396]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d0f0      	beq.n	8007d74 <HAL_RCC_OscConfig+0xe8>
 8007d92:	e014      	b.n	8007dbe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d94:	f7fa fde0 	bl	8002958 <HAL_GetTick>
 8007d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007d9a:	e008      	b.n	8007dae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d9c:	f7fa fddc 	bl	8002958 <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	2b64      	cmp	r3, #100	@ 0x64
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e3c0      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007dae:	4b59      	ldr	r3, [pc, #356]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1f0      	bne.n	8007d9c <HAL_RCC_OscConfig+0x110>
 8007dba:	e000      	b.n	8007dbe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 80ca 	beq.w	8007f60 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dcc:	4b51      	ldr	r3, [pc, #324]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007dce:	691b      	ldr	r3, [r3, #16]
 8007dd0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007dd4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dda:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d007      	beq.n	8007df2 <HAL_RCC_OscConfig+0x166>
 8007de2:	6a3b      	ldr	r3, [r7, #32]
 8007de4:	2b18      	cmp	r3, #24
 8007de6:	d156      	bne.n	8007e96 <HAL_RCC_OscConfig+0x20a>
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	f003 0303 	and.w	r3, r3, #3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d151      	bne.n	8007e96 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007df2:	4b48      	ldr	r3, [pc, #288]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0304 	and.w	r3, r3, #4
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d005      	beq.n	8007e0a <HAL_RCC_OscConfig+0x17e>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e392      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e0a:	4b42      	ldr	r3, [pc, #264]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f023 0219 	bic.w	r2, r3, #25
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	493f      	ldr	r1, [pc, #252]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1c:	f7fa fd9c 	bl	8002958 <HAL_GetTick>
 8007e20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e22:	e008      	b.n	8007e36 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e24:	f7fa fd98 	bl	8002958 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d901      	bls.n	8007e36 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e37c      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007e36:	4b37      	ldr	r3, [pc, #220]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0304 	and.w	r3, r3, #4
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0f0      	beq.n	8007e24 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e42:	f7fa fdb9 	bl	80029b8 <HAL_GetREVID>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d817      	bhi.n	8007e80 <HAL_RCC_OscConfig+0x1f4>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	2b40      	cmp	r3, #64	@ 0x40
 8007e56:	d108      	bne.n	8007e6a <HAL_RCC_OscConfig+0x1de>
 8007e58:	4b2e      	ldr	r3, [pc, #184]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007e60:	4a2c      	ldr	r2, [pc, #176]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e66:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e68:	e07a      	b.n	8007f60 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e6a:	4b2a      	ldr	r3, [pc, #168]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	031b      	lsls	r3, r3, #12
 8007e78:	4926      	ldr	r1, [pc, #152]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e7e:	e06f      	b.n	8007f60 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e80:	4b24      	ldr	r3, [pc, #144]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	061b      	lsls	r3, r3, #24
 8007e8e:	4921      	ldr	r1, [pc, #132]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007e90:	4313      	orrs	r3, r2
 8007e92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007e94:	e064      	b.n	8007f60 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d047      	beq.n	8007f2e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f023 0219 	bic.w	r2, r3, #25
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	491a      	ldr	r1, [pc, #104]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb0:	f7fa fd52 	bl	8002958 <HAL_GetTick>
 8007eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eb6:	e008      	b.n	8007eca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007eb8:	f7fa fd4e 	bl	8002958 <HAL_GetTick>
 8007ebc:	4602      	mov	r2, r0
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d901      	bls.n	8007eca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e332      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007eca:	4b12      	ldr	r3, [pc, #72]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0304 	and.w	r3, r3, #4
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f0      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ed6:	f7fa fd6f 	bl	80029b8 <HAL_GetREVID>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d819      	bhi.n	8007f18 <HAL_RCC_OscConfig+0x28c>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	691b      	ldr	r3, [r3, #16]
 8007ee8:	2b40      	cmp	r3, #64	@ 0x40
 8007eea:	d108      	bne.n	8007efe <HAL_RCC_OscConfig+0x272>
 8007eec:	4b09      	ldr	r3, [pc, #36]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007ef4:	4a07      	ldr	r2, [pc, #28]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007efa:	6053      	str	r3, [r2, #4]
 8007efc:	e030      	b.n	8007f60 <HAL_RCC_OscConfig+0x2d4>
 8007efe:	4b05      	ldr	r3, [pc, #20]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	031b      	lsls	r3, r3, #12
 8007f0c:	4901      	ldr	r1, [pc, #4]	@ (8007f14 <HAL_RCC_OscConfig+0x288>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	604b      	str	r3, [r1, #4]
 8007f12:	e025      	b.n	8007f60 <HAL_RCC_OscConfig+0x2d4>
 8007f14:	58024400 	.word	0x58024400
 8007f18:	4b9a      	ldr	r3, [pc, #616]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	061b      	lsls	r3, r3, #24
 8007f26:	4997      	ldr	r1, [pc, #604]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	604b      	str	r3, [r1, #4]
 8007f2c:	e018      	b.n	8007f60 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007f2e:	4b95      	ldr	r3, [pc, #596]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a94      	ldr	r2, [pc, #592]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007f34:	f023 0301 	bic.w	r3, r3, #1
 8007f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f3a:	f7fa fd0d 	bl	8002958 <HAL_GetTick>
 8007f3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f40:	e008      	b.n	8007f54 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f42:	f7fa fd09 	bl	8002958 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d901      	bls.n	8007f54 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e2ed      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007f54:	4b8b      	ldr	r3, [pc, #556]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0304 	and.w	r3, r3, #4
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1f0      	bne.n	8007f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 0310 	and.w	r3, r3, #16
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f000 80a9 	beq.w	80080c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f6e:	4b85      	ldr	r3, [pc, #532]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f76:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f78:	4b82      	ldr	r3, [pc, #520]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f7c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	2b08      	cmp	r3, #8
 8007f82:	d007      	beq.n	8007f94 <HAL_RCC_OscConfig+0x308>
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	2b18      	cmp	r3, #24
 8007f88:	d13a      	bne.n	8008000 <HAL_RCC_OscConfig+0x374>
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	f003 0303 	and.w	r3, r3, #3
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d135      	bne.n	8008000 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007f94:	4b7b      	ldr	r3, [pc, #492]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d005      	beq.n	8007fac <HAL_RCC_OscConfig+0x320>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	2b80      	cmp	r3, #128	@ 0x80
 8007fa6:	d001      	beq.n	8007fac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e2c1      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fac:	f7fa fd04 	bl	80029b8 <HAL_GetREVID>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d817      	bhi.n	8007fea <HAL_RCC_OscConfig+0x35e>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	2b20      	cmp	r3, #32
 8007fc0:	d108      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x348>
 8007fc2:	4b70      	ldr	r3, [pc, #448]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007fc4:	685b      	ldr	r3, [r3, #4]
 8007fc6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007fca:	4a6e      	ldr	r2, [pc, #440]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007fcc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fd0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fd2:	e075      	b.n	80080c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fd4:	4b6b      	ldr	r3, [pc, #428]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	069b      	lsls	r3, r3, #26
 8007fe2:	4968      	ldr	r1, [pc, #416]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007fe8:	e06a      	b.n	80080c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007fea:	4b66      	ldr	r3, [pc, #408]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007fec:	68db      	ldr	r3, [r3, #12]
 8007fee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	061b      	lsls	r3, r3, #24
 8007ff8:	4962      	ldr	r1, [pc, #392]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ffe:	e05f      	b.n	80080c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d042      	beq.n	800808e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008008:	4b5e      	ldr	r3, [pc, #376]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a5d      	ldr	r2, [pc, #372]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 800800e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008014:	f7fa fca0 	bl	8002958 <HAL_GetTick>
 8008018:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800801a:	e008      	b.n	800802e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800801c:	f7fa fc9c 	bl	8002958 <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	2b02      	cmp	r3, #2
 8008028:	d901      	bls.n	800802e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e280      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800802e:	4b55      	ldr	r3, [pc, #340]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008036:	2b00      	cmp	r3, #0
 8008038:	d0f0      	beq.n	800801c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800803a:	f7fa fcbd 	bl	80029b8 <HAL_GetREVID>
 800803e:	4603      	mov	r3, r0
 8008040:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008044:	4293      	cmp	r3, r2
 8008046:	d817      	bhi.n	8008078 <HAL_RCC_OscConfig+0x3ec>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a1b      	ldr	r3, [r3, #32]
 800804c:	2b20      	cmp	r3, #32
 800804e:	d108      	bne.n	8008062 <HAL_RCC_OscConfig+0x3d6>
 8008050:	4b4c      	ldr	r3, [pc, #304]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008058:	4a4a      	ldr	r2, [pc, #296]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 800805a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800805e:	6053      	str	r3, [r2, #4]
 8008060:	e02e      	b.n	80080c0 <HAL_RCC_OscConfig+0x434>
 8008062:	4b48      	ldr	r3, [pc, #288]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	069b      	lsls	r3, r3, #26
 8008070:	4944      	ldr	r1, [pc, #272]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8008072:	4313      	orrs	r3, r2
 8008074:	604b      	str	r3, [r1, #4]
 8008076:	e023      	b.n	80080c0 <HAL_RCC_OscConfig+0x434>
 8008078:	4b42      	ldr	r3, [pc, #264]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 800807a:	68db      	ldr	r3, [r3, #12]
 800807c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	061b      	lsls	r3, r3, #24
 8008086:	493f      	ldr	r1, [pc, #252]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8008088:	4313      	orrs	r3, r2
 800808a:	60cb      	str	r3, [r1, #12]
 800808c:	e018      	b.n	80080c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800808e:	4b3d      	ldr	r3, [pc, #244]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a3c      	ldr	r2, [pc, #240]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8008094:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800809a:	f7fa fc5d 	bl	8002958 <HAL_GetTick>
 800809e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080a0:	e008      	b.n	80080b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80080a2:	f7fa fc59 	bl	8002958 <HAL_GetTick>
 80080a6:	4602      	mov	r2, r0
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	1ad3      	subs	r3, r2, r3
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d901      	bls.n	80080b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e23d      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80080b4:	4b33      	ldr	r3, [pc, #204]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d1f0      	bne.n	80080a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0308 	and.w	r3, r3, #8
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d036      	beq.n	800813a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d019      	beq.n	8008108 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080d4:	4b2b      	ldr	r3, [pc, #172]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 80080d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080d8:	4a2a      	ldr	r2, [pc, #168]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 80080da:	f043 0301 	orr.w	r3, r3, #1
 80080de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080e0:	f7fa fc3a 	bl	8002958 <HAL_GetTick>
 80080e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080e6:	e008      	b.n	80080fa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080e8:	f7fa fc36 	bl	8002958 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d901      	bls.n	80080fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e21a      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80080fa:	4b22      	ldr	r3, [pc, #136]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 80080fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080fe:	f003 0302 	and.w	r3, r3, #2
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0f0      	beq.n	80080e8 <HAL_RCC_OscConfig+0x45c>
 8008106:	e018      	b.n	800813a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008108:	4b1e      	ldr	r3, [pc, #120]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 800810a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800810c:	4a1d      	ldr	r2, [pc, #116]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 800810e:	f023 0301 	bic.w	r3, r3, #1
 8008112:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008114:	f7fa fc20 	bl	8002958 <HAL_GetTick>
 8008118:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800811a:	e008      	b.n	800812e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800811c:	f7fa fc1c 	bl	8002958 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	2b02      	cmp	r3, #2
 8008128:	d901      	bls.n	800812e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e200      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800812e:	4b15      	ldr	r3, [pc, #84]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8008130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1f0      	bne.n	800811c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0320 	and.w	r3, r3, #32
 8008142:	2b00      	cmp	r3, #0
 8008144:	d039      	beq.n	80081ba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	699b      	ldr	r3, [r3, #24]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d01c      	beq.n	8008188 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800814e:	4b0d      	ldr	r3, [pc, #52]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a0c      	ldr	r2, [pc, #48]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8008154:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008158:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800815a:	f7fa fbfd 	bl	8002958 <HAL_GetTick>
 800815e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008160:	e008      	b.n	8008174 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008162:	f7fa fbf9 	bl	8002958 <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	2b02      	cmp	r3, #2
 800816e:	d901      	bls.n	8008174 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008170:	2303      	movs	r3, #3
 8008172:	e1dd      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008174:	4b03      	ldr	r3, [pc, #12]	@ (8008184 <HAL_RCC_OscConfig+0x4f8>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0f0      	beq.n	8008162 <HAL_RCC_OscConfig+0x4d6>
 8008180:	e01b      	b.n	80081ba <HAL_RCC_OscConfig+0x52e>
 8008182:	bf00      	nop
 8008184:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008188:	4b9b      	ldr	r3, [pc, #620]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a9a      	ldr	r2, [pc, #616]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 800818e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008192:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008194:	f7fa fbe0 	bl	8002958 <HAL_GetTick>
 8008198:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800819a:	e008      	b.n	80081ae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800819c:	f7fa fbdc 	bl	8002958 <HAL_GetTick>
 80081a0:	4602      	mov	r2, r0
 80081a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a4:	1ad3      	subs	r3, r2, r3
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d901      	bls.n	80081ae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80081aa:	2303      	movs	r3, #3
 80081ac:	e1c0      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80081ae:	4b92      	ldr	r3, [pc, #584]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d1f0      	bne.n	800819c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0304 	and.w	r3, r3, #4
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	f000 8081 	beq.w	80082ca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80081c8:	4b8c      	ldr	r3, [pc, #560]	@ (80083fc <HAL_RCC_OscConfig+0x770>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a8b      	ldr	r2, [pc, #556]	@ (80083fc <HAL_RCC_OscConfig+0x770>)
 80081ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80081d4:	f7fa fbc0 	bl	8002958 <HAL_GetTick>
 80081d8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081da:	e008      	b.n	80081ee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081dc:	f7fa fbbc 	bl	8002958 <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b64      	cmp	r3, #100	@ 0x64
 80081e8:	d901      	bls.n	80081ee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e1a0      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80081ee:	4b83      	ldr	r3, [pc, #524]	@ (80083fc <HAL_RCC_OscConfig+0x770>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d0f0      	beq.n	80081dc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d106      	bne.n	8008210 <HAL_RCC_OscConfig+0x584>
 8008202:	4b7d      	ldr	r3, [pc, #500]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008206:	4a7c      	ldr	r2, [pc, #496]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008208:	f043 0301 	orr.w	r3, r3, #1
 800820c:	6713      	str	r3, [r2, #112]	@ 0x70
 800820e:	e02d      	b.n	800826c <HAL_RCC_OscConfig+0x5e0>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10c      	bne.n	8008232 <HAL_RCC_OscConfig+0x5a6>
 8008218:	4b77      	ldr	r3, [pc, #476]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 800821a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800821c:	4a76      	ldr	r2, [pc, #472]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 800821e:	f023 0301 	bic.w	r3, r3, #1
 8008222:	6713      	str	r3, [r2, #112]	@ 0x70
 8008224:	4b74      	ldr	r3, [pc, #464]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008228:	4a73      	ldr	r2, [pc, #460]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 800822a:	f023 0304 	bic.w	r3, r3, #4
 800822e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008230:	e01c      	b.n	800826c <HAL_RCC_OscConfig+0x5e0>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	2b05      	cmp	r3, #5
 8008238:	d10c      	bne.n	8008254 <HAL_RCC_OscConfig+0x5c8>
 800823a:	4b6f      	ldr	r3, [pc, #444]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 800823c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800823e:	4a6e      	ldr	r2, [pc, #440]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008240:	f043 0304 	orr.w	r3, r3, #4
 8008244:	6713      	str	r3, [r2, #112]	@ 0x70
 8008246:	4b6c      	ldr	r3, [pc, #432]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800824a:	4a6b      	ldr	r2, [pc, #428]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 800824c:	f043 0301 	orr.w	r3, r3, #1
 8008250:	6713      	str	r3, [r2, #112]	@ 0x70
 8008252:	e00b      	b.n	800826c <HAL_RCC_OscConfig+0x5e0>
 8008254:	4b68      	ldr	r3, [pc, #416]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008258:	4a67      	ldr	r2, [pc, #412]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 800825a:	f023 0301 	bic.w	r3, r3, #1
 800825e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008260:	4b65      	ldr	r3, [pc, #404]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008264:	4a64      	ldr	r2, [pc, #400]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008266:	f023 0304 	bic.w	r3, r3, #4
 800826a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d015      	beq.n	80082a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008274:	f7fa fb70 	bl	8002958 <HAL_GetTick>
 8008278:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800827a:	e00a      	b.n	8008292 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800827c:	f7fa fb6c 	bl	8002958 <HAL_GetTick>
 8008280:	4602      	mov	r2, r0
 8008282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008284:	1ad3      	subs	r3, r2, r3
 8008286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800828a:	4293      	cmp	r3, r2
 800828c:	d901      	bls.n	8008292 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800828e:	2303      	movs	r3, #3
 8008290:	e14e      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008292:	4b59      	ldr	r3, [pc, #356]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b00      	cmp	r3, #0
 800829c:	d0ee      	beq.n	800827c <HAL_RCC_OscConfig+0x5f0>
 800829e:	e014      	b.n	80082ca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082a0:	f7fa fb5a 	bl	8002958 <HAL_GetTick>
 80082a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082a6:	e00a      	b.n	80082be <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082a8:	f7fa fb56 	bl	8002958 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d901      	bls.n	80082be <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80082ba:	2303      	movs	r3, #3
 80082bc:	e138      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80082be:	4b4e      	ldr	r3, [pc, #312]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80082c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082c2:	f003 0302 	and.w	r3, r3, #2
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d1ee      	bne.n	80082a8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	f000 812d 	beq.w	800852e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80082d4:	4b48      	ldr	r3, [pc, #288]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082dc:	2b18      	cmp	r3, #24
 80082de:	f000 80bd 	beq.w	800845c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e6:	2b02      	cmp	r3, #2
 80082e8:	f040 809e 	bne.w	8008428 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ec:	4b42      	ldr	r3, [pc, #264]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a41      	ldr	r2, [pc, #260]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80082f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082f8:	f7fa fb2e 	bl	8002958 <HAL_GetTick>
 80082fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80082fe:	e008      	b.n	8008312 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008300:	f7fa fb2a 	bl	8002958 <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	2b02      	cmp	r3, #2
 800830c:	d901      	bls.n	8008312 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e10e      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008312:	4b39      	ldr	r3, [pc, #228]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1f0      	bne.n	8008300 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800831e:	4b36      	ldr	r3, [pc, #216]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008320:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008322:	4b37      	ldr	r3, [pc, #220]	@ (8008400 <HAL_RCC_OscConfig+0x774>)
 8008324:	4013      	ands	r3, r2
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800832e:	0112      	lsls	r2, r2, #4
 8008330:	430a      	orrs	r2, r1
 8008332:	4931      	ldr	r1, [pc, #196]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008334:	4313      	orrs	r3, r2
 8008336:	628b      	str	r3, [r1, #40]	@ 0x28
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800833c:	3b01      	subs	r3, #1
 800833e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008346:	3b01      	subs	r3, #1
 8008348:	025b      	lsls	r3, r3, #9
 800834a:	b29b      	uxth	r3, r3
 800834c:	431a      	orrs	r2, r3
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008352:	3b01      	subs	r3, #1
 8008354:	041b      	lsls	r3, r3, #16
 8008356:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800835a:	431a      	orrs	r2, r3
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008360:	3b01      	subs	r3, #1
 8008362:	061b      	lsls	r3, r3, #24
 8008364:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008368:	4923      	ldr	r1, [pc, #140]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 800836a:	4313      	orrs	r3, r2
 800836c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800836e:	4b22      	ldr	r3, [pc, #136]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008372:	4a21      	ldr	r2, [pc, #132]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008374:	f023 0301 	bic.w	r3, r3, #1
 8008378:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800837a:	4b1f      	ldr	r3, [pc, #124]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 800837c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800837e:	4b21      	ldr	r3, [pc, #132]	@ (8008404 <HAL_RCC_OscConfig+0x778>)
 8008380:	4013      	ands	r3, r2
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008386:	00d2      	lsls	r2, r2, #3
 8008388:	491b      	ldr	r1, [pc, #108]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 800838a:	4313      	orrs	r3, r2
 800838c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800838e:	4b1a      	ldr	r3, [pc, #104]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 8008390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008392:	f023 020c 	bic.w	r2, r3, #12
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800839a:	4917      	ldr	r1, [pc, #92]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 800839c:	4313      	orrs	r3, r2
 800839e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80083a0:	4b15      	ldr	r3, [pc, #84]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80083a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a4:	f023 0202 	bic.w	r2, r3, #2
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ac:	4912      	ldr	r1, [pc, #72]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80083ae:	4313      	orrs	r3, r2
 80083b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80083b2:	4b11      	ldr	r3, [pc, #68]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80083b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b6:	4a10      	ldr	r2, [pc, #64]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80083b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083be:	4b0e      	ldr	r3, [pc, #56]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80083c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083c2:	4a0d      	ldr	r2, [pc, #52]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80083c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80083ca:	4b0b      	ldr	r3, [pc, #44]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80083cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ce:	4a0a      	ldr	r2, [pc, #40]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80083d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80083d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80083d6:	4b08      	ldr	r3, [pc, #32]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80083d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083da:	4a07      	ldr	r2, [pc, #28]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80083dc:	f043 0301 	orr.w	r3, r3, #1
 80083e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083e2:	4b05      	ldr	r3, [pc, #20]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a04      	ldr	r2, [pc, #16]	@ (80083f8 <HAL_RCC_OscConfig+0x76c>)
 80083e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80083ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083ee:	f7fa fab3 	bl	8002958 <HAL_GetTick>
 80083f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80083f4:	e011      	b.n	800841a <HAL_RCC_OscConfig+0x78e>
 80083f6:	bf00      	nop
 80083f8:	58024400 	.word	0x58024400
 80083fc:	58024800 	.word	0x58024800
 8008400:	fffffc0c 	.word	0xfffffc0c
 8008404:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008408:	f7fa faa6 	bl	8002958 <HAL_GetTick>
 800840c:	4602      	mov	r2, r0
 800840e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d901      	bls.n	800841a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008416:	2303      	movs	r3, #3
 8008418:	e08a      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800841a:	4b47      	ldr	r3, [pc, #284]	@ (8008538 <HAL_RCC_OscConfig+0x8ac>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d0f0      	beq.n	8008408 <HAL_RCC_OscConfig+0x77c>
 8008426:	e082      	b.n	800852e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008428:	4b43      	ldr	r3, [pc, #268]	@ (8008538 <HAL_RCC_OscConfig+0x8ac>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a42      	ldr	r2, [pc, #264]	@ (8008538 <HAL_RCC_OscConfig+0x8ac>)
 800842e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008432:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008434:	f7fa fa90 	bl	8002958 <HAL_GetTick>
 8008438:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800843a:	e008      	b.n	800844e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800843c:	f7fa fa8c 	bl	8002958 <HAL_GetTick>
 8008440:	4602      	mov	r2, r0
 8008442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008444:	1ad3      	subs	r3, r2, r3
 8008446:	2b02      	cmp	r3, #2
 8008448:	d901      	bls.n	800844e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e070      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800844e:	4b3a      	ldr	r3, [pc, #232]	@ (8008538 <HAL_RCC_OscConfig+0x8ac>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1f0      	bne.n	800843c <HAL_RCC_OscConfig+0x7b0>
 800845a:	e068      	b.n	800852e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800845c:	4b36      	ldr	r3, [pc, #216]	@ (8008538 <HAL_RCC_OscConfig+0x8ac>)
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008460:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008462:	4b35      	ldr	r3, [pc, #212]	@ (8008538 <HAL_RCC_OscConfig+0x8ac>)
 8008464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008466:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846c:	2b01      	cmp	r3, #1
 800846e:	d031      	beq.n	80084d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	f003 0203 	and.w	r2, r3, #3
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800847a:	429a      	cmp	r2, r3
 800847c:	d12a      	bne.n	80084d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	091b      	lsrs	r3, r3, #4
 8008482:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800848a:	429a      	cmp	r2, r3
 800848c:	d122      	bne.n	80084d4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008498:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800849a:	429a      	cmp	r2, r3
 800849c:	d11a      	bne.n	80084d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	0a5b      	lsrs	r3, r3, #9
 80084a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084aa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d111      	bne.n	80084d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	0c1b      	lsrs	r3, r3, #16
 80084b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80084be:	429a      	cmp	r2, r3
 80084c0:	d108      	bne.n	80084d4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	0e1b      	lsrs	r3, r3, #24
 80084c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084ce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d001      	beq.n	80084d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e02b      	b.n	8008530 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80084d8:	4b17      	ldr	r3, [pc, #92]	@ (8008538 <HAL_RCC_OscConfig+0x8ac>)
 80084da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084dc:	08db      	lsrs	r3, r3, #3
 80084de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084e2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d01f      	beq.n	800852e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80084ee:	4b12      	ldr	r3, [pc, #72]	@ (8008538 <HAL_RCC_OscConfig+0x8ac>)
 80084f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084f2:	4a11      	ldr	r2, [pc, #68]	@ (8008538 <HAL_RCC_OscConfig+0x8ac>)
 80084f4:	f023 0301 	bic.w	r3, r3, #1
 80084f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80084fa:	f7fa fa2d 	bl	8002958 <HAL_GetTick>
 80084fe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8008500:	bf00      	nop
 8008502:	f7fa fa29 	bl	8002958 <HAL_GetTick>
 8008506:	4602      	mov	r2, r0
 8008508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850a:	4293      	cmp	r3, r2
 800850c:	d0f9      	beq.n	8008502 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800850e:	4b0a      	ldr	r3, [pc, #40]	@ (8008538 <HAL_RCC_OscConfig+0x8ac>)
 8008510:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008512:	4b0a      	ldr	r3, [pc, #40]	@ (800853c <HAL_RCC_OscConfig+0x8b0>)
 8008514:	4013      	ands	r3, r2
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800851a:	00d2      	lsls	r2, r2, #3
 800851c:	4906      	ldr	r1, [pc, #24]	@ (8008538 <HAL_RCC_OscConfig+0x8ac>)
 800851e:	4313      	orrs	r3, r2
 8008520:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8008522:	4b05      	ldr	r3, [pc, #20]	@ (8008538 <HAL_RCC_OscConfig+0x8ac>)
 8008524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008526:	4a04      	ldr	r2, [pc, #16]	@ (8008538 <HAL_RCC_OscConfig+0x8ac>)
 8008528:	f043 0301 	orr.w	r3, r3, #1
 800852c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3730      	adds	r7, #48	@ 0x30
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}
 8008538:	58024400 	.word	0x58024400
 800853c:	ffff0007 	.word	0xffff0007

08008540 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e19c      	b.n	800888e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008554:	4b8a      	ldr	r3, [pc, #552]	@ (8008780 <HAL_RCC_ClockConfig+0x240>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f003 030f 	and.w	r3, r3, #15
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	429a      	cmp	r2, r3
 8008560:	d910      	bls.n	8008584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008562:	4b87      	ldr	r3, [pc, #540]	@ (8008780 <HAL_RCC_ClockConfig+0x240>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f023 020f 	bic.w	r2, r3, #15
 800856a:	4985      	ldr	r1, [pc, #532]	@ (8008780 <HAL_RCC_ClockConfig+0x240>)
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	4313      	orrs	r3, r2
 8008570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008572:	4b83      	ldr	r3, [pc, #524]	@ (8008780 <HAL_RCC_ClockConfig+0x240>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f003 030f 	and.w	r3, r3, #15
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	429a      	cmp	r2, r3
 800857e:	d001      	beq.n	8008584 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e184      	b.n	800888e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0304 	and.w	r3, r3, #4
 800858c:	2b00      	cmp	r3, #0
 800858e:	d010      	beq.n	80085b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	691a      	ldr	r2, [r3, #16]
 8008594:	4b7b      	ldr	r3, [pc, #492]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800859c:	429a      	cmp	r2, r3
 800859e:	d908      	bls.n	80085b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085a0:	4b78      	ldr	r3, [pc, #480]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	4975      	ldr	r1, [pc, #468]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 80085ae:	4313      	orrs	r3, r2
 80085b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0308 	and.w	r3, r3, #8
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d010      	beq.n	80085e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	695a      	ldr	r2, [r3, #20]
 80085c2:	4b70      	ldr	r3, [pc, #448]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 80085c4:	69db      	ldr	r3, [r3, #28]
 80085c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d908      	bls.n	80085e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085ce:	4b6d      	ldr	r3, [pc, #436]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 80085d0:	69db      	ldr	r3, [r3, #28]
 80085d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	695b      	ldr	r3, [r3, #20]
 80085da:	496a      	ldr	r1, [pc, #424]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 0310 	and.w	r3, r3, #16
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d010      	beq.n	800860e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	699a      	ldr	r2, [r3, #24]
 80085f0:	4b64      	ldr	r3, [pc, #400]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d908      	bls.n	800860e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085fc:	4b61      	ldr	r3, [pc, #388]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 80085fe:	69db      	ldr	r3, [r3, #28]
 8008600:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	699b      	ldr	r3, [r3, #24]
 8008608:	495e      	ldr	r1, [pc, #376]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 800860a:	4313      	orrs	r3, r2
 800860c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b00      	cmp	r3, #0
 8008618:	d010      	beq.n	800863c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	69da      	ldr	r2, [r3, #28]
 800861e:	4b59      	ldr	r3, [pc, #356]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 8008620:	6a1b      	ldr	r3, [r3, #32]
 8008622:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008626:	429a      	cmp	r2, r3
 8008628:	d908      	bls.n	800863c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800862a:	4b56      	ldr	r3, [pc, #344]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 800862c:	6a1b      	ldr	r3, [r3, #32]
 800862e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	4953      	ldr	r1, [pc, #332]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 8008638:	4313      	orrs	r3, r2
 800863a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b00      	cmp	r3, #0
 8008646:	d010      	beq.n	800866a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68da      	ldr	r2, [r3, #12]
 800864c:	4b4d      	ldr	r3, [pc, #308]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 800864e:	699b      	ldr	r3, [r3, #24]
 8008650:	f003 030f 	and.w	r3, r3, #15
 8008654:	429a      	cmp	r2, r3
 8008656:	d908      	bls.n	800866a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008658:	4b4a      	ldr	r3, [pc, #296]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 800865a:	699b      	ldr	r3, [r3, #24]
 800865c:	f023 020f 	bic.w	r2, r3, #15
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	4947      	ldr	r1, [pc, #284]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 8008666:	4313      	orrs	r3, r2
 8008668:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d055      	beq.n	8008722 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008676:	4b43      	ldr	r3, [pc, #268]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 8008678:	699b      	ldr	r3, [r3, #24]
 800867a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	689b      	ldr	r3, [r3, #8]
 8008682:	4940      	ldr	r1, [pc, #256]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 8008684:	4313      	orrs	r3, r2
 8008686:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	2b02      	cmp	r3, #2
 800868e:	d107      	bne.n	80086a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008690:	4b3c      	ldr	r3, [pc, #240]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008698:	2b00      	cmp	r3, #0
 800869a:	d121      	bne.n	80086e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e0f6      	b.n	800888e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d107      	bne.n	80086b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086a8:	4b36      	ldr	r3, [pc, #216]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d115      	bne.n	80086e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	e0ea      	b.n	800888e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	2b01      	cmp	r3, #1
 80086be:	d107      	bne.n	80086d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80086c0:	4b30      	ldr	r3, [pc, #192]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d109      	bne.n	80086e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	e0de      	b.n	800888e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80086d0:	4b2c      	ldr	r3, [pc, #176]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0304 	and.w	r3, r3, #4
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d101      	bne.n	80086e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80086dc:	2301      	movs	r3, #1
 80086de:	e0d6      	b.n	800888e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086e0:	4b28      	ldr	r3, [pc, #160]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 80086e2:	691b      	ldr	r3, [r3, #16]
 80086e4:	f023 0207 	bic.w	r2, r3, #7
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	4925      	ldr	r1, [pc, #148]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086f2:	f7fa f931 	bl	8002958 <HAL_GetTick>
 80086f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086f8:	e00a      	b.n	8008710 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086fa:	f7fa f92d 	bl	8002958 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008708:	4293      	cmp	r3, r2
 800870a:	d901      	bls.n	8008710 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e0be      	b.n	800888e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008710:	4b1c      	ldr	r3, [pc, #112]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	00db      	lsls	r3, r3, #3
 800871e:	429a      	cmp	r2, r3
 8008720:	d1eb      	bne.n	80086fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0302 	and.w	r3, r3, #2
 800872a:	2b00      	cmp	r3, #0
 800872c:	d010      	beq.n	8008750 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	4b14      	ldr	r3, [pc, #80]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	f003 030f 	and.w	r3, r3, #15
 800873a:	429a      	cmp	r2, r3
 800873c:	d208      	bcs.n	8008750 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800873e:	4b11      	ldr	r3, [pc, #68]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	f023 020f 	bic.w	r2, r3, #15
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	490e      	ldr	r1, [pc, #56]	@ (8008784 <HAL_RCC_ClockConfig+0x244>)
 800874c:	4313      	orrs	r3, r2
 800874e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008750:	4b0b      	ldr	r3, [pc, #44]	@ (8008780 <HAL_RCC_ClockConfig+0x240>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 030f 	and.w	r3, r3, #15
 8008758:	683a      	ldr	r2, [r7, #0]
 800875a:	429a      	cmp	r2, r3
 800875c:	d214      	bcs.n	8008788 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800875e:	4b08      	ldr	r3, [pc, #32]	@ (8008780 <HAL_RCC_ClockConfig+0x240>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f023 020f 	bic.w	r2, r3, #15
 8008766:	4906      	ldr	r1, [pc, #24]	@ (8008780 <HAL_RCC_ClockConfig+0x240>)
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	4313      	orrs	r3, r2
 800876c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800876e:	4b04      	ldr	r3, [pc, #16]	@ (8008780 <HAL_RCC_ClockConfig+0x240>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f003 030f 	and.w	r3, r3, #15
 8008776:	683a      	ldr	r2, [r7, #0]
 8008778:	429a      	cmp	r2, r3
 800877a:	d005      	beq.n	8008788 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e086      	b.n	800888e <HAL_RCC_ClockConfig+0x34e>
 8008780:	52002000 	.word	0x52002000
 8008784:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f003 0304 	and.w	r3, r3, #4
 8008790:	2b00      	cmp	r3, #0
 8008792:	d010      	beq.n	80087b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	691a      	ldr	r2, [r3, #16]
 8008798:	4b3f      	ldr	r3, [pc, #252]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d208      	bcs.n	80087b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80087a4:	4b3c      	ldr	r3, [pc, #240]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 80087a6:	699b      	ldr	r3, [r3, #24]
 80087a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	691b      	ldr	r3, [r3, #16]
 80087b0:	4939      	ldr	r1, [pc, #228]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f003 0308 	and.w	r3, r3, #8
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d010      	beq.n	80087e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	695a      	ldr	r2, [r3, #20]
 80087c6:	4b34      	ldr	r3, [pc, #208]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 80087c8:	69db      	ldr	r3, [r3, #28]
 80087ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d208      	bcs.n	80087e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80087d2:	4b31      	ldr	r3, [pc, #196]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 80087d4:	69db      	ldr	r3, [r3, #28]
 80087d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	695b      	ldr	r3, [r3, #20]
 80087de:	492e      	ldr	r1, [pc, #184]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 80087e0:	4313      	orrs	r3, r2
 80087e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0310 	and.w	r3, r3, #16
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d010      	beq.n	8008812 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699a      	ldr	r2, [r3, #24]
 80087f4:	4b28      	ldr	r3, [pc, #160]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 80087f6:	69db      	ldr	r3, [r3, #28]
 80087f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d208      	bcs.n	8008812 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008800:	4b25      	ldr	r3, [pc, #148]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 8008802:	69db      	ldr	r3, [r3, #28]
 8008804:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	4922      	ldr	r1, [pc, #136]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 800880e:	4313      	orrs	r3, r2
 8008810:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f003 0320 	and.w	r3, r3, #32
 800881a:	2b00      	cmp	r3, #0
 800881c:	d010      	beq.n	8008840 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	69da      	ldr	r2, [r3, #28]
 8008822:	4b1d      	ldr	r3, [pc, #116]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 8008824:	6a1b      	ldr	r3, [r3, #32]
 8008826:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800882a:	429a      	cmp	r2, r3
 800882c:	d208      	bcs.n	8008840 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800882e:	4b1a      	ldr	r3, [pc, #104]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 8008830:	6a1b      	ldr	r3, [r3, #32]
 8008832:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	4917      	ldr	r1, [pc, #92]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 800883c:	4313      	orrs	r3, r2
 800883e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008840:	f000 f89e 	bl	8008980 <HAL_RCC_GetSysClockFreq>
 8008844:	4602      	mov	r2, r0
 8008846:	4b14      	ldr	r3, [pc, #80]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	0a1b      	lsrs	r3, r3, #8
 800884c:	f003 030f 	and.w	r3, r3, #15
 8008850:	4912      	ldr	r1, [pc, #72]	@ (800889c <HAL_RCC_ClockConfig+0x35c>)
 8008852:	5ccb      	ldrb	r3, [r1, r3]
 8008854:	f003 031f 	and.w	r3, r3, #31
 8008858:	fa22 f303 	lsr.w	r3, r2, r3
 800885c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800885e:	4b0e      	ldr	r3, [pc, #56]	@ (8008898 <HAL_RCC_ClockConfig+0x358>)
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	f003 030f 	and.w	r3, r3, #15
 8008866:	4a0d      	ldr	r2, [pc, #52]	@ (800889c <HAL_RCC_ClockConfig+0x35c>)
 8008868:	5cd3      	ldrb	r3, [r2, r3]
 800886a:	f003 031f 	and.w	r3, r3, #31
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	fa22 f303 	lsr.w	r3, r2, r3
 8008874:	4a0a      	ldr	r2, [pc, #40]	@ (80088a0 <HAL_RCC_ClockConfig+0x360>)
 8008876:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008878:	4a0a      	ldr	r2, [pc, #40]	@ (80088a4 <HAL_RCC_ClockConfig+0x364>)
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800887e:	4b0a      	ldr	r3, [pc, #40]	@ (80088a8 <HAL_RCC_ClockConfig+0x368>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4618      	mov	r0, r3
 8008884:	f7fa f81e 	bl	80028c4 <HAL_InitTick>
 8008888:	4603      	mov	r3, r0
 800888a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800888c:	7bfb      	ldrb	r3, [r7, #15]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3718      	adds	r7, #24
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	58024400 	.word	0x58024400
 800889c:	0800f014 	.word	0x0800f014
 80088a0:	24000008 	.word	0x24000008
 80088a4:	24000004 	.word	0x24000004
 80088a8:	2400000c 	.word	0x2400000c

080088ac <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08c      	sub	sp, #48	@ 0x30
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d12a      	bne.n	8008914 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80088be:	4b2d      	ldr	r3, [pc, #180]	@ (8008974 <HAL_RCC_MCOConfig+0xc8>)
 80088c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088c4:	4a2b      	ldr	r2, [pc, #172]	@ (8008974 <HAL_RCC_MCOConfig+0xc8>)
 80088c6:	f043 0301 	orr.w	r3, r3, #1
 80088ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80088ce:	4b29      	ldr	r3, [pc, #164]	@ (8008974 <HAL_RCC_MCOConfig+0xc8>)
 80088d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80088d4:	f003 0301 	and.w	r3, r3, #1
 80088d8:	61bb      	str	r3, [r7, #24]
 80088da:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80088dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80088e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088e2:	2302      	movs	r3, #2
 80088e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088e6:	2303      	movs	r3, #3
 80088e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088ea:	2300      	movs	r3, #0
 80088ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80088ee:	2300      	movs	r3, #0
 80088f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80088f2:	f107 031c 	add.w	r3, r7, #28
 80088f6:	4619      	mov	r1, r3
 80088f8:	481f      	ldr	r0, [pc, #124]	@ (8008978 <HAL_RCC_MCOConfig+0xcc>)
 80088fa:	f7fe f83b 	bl	8006974 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80088fe:	4b1d      	ldr	r3, [pc, #116]	@ (8008974 <HAL_RCC_MCOConfig+0xc8>)
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	430b      	orrs	r3, r1
 800890c:	4919      	ldr	r1, [pc, #100]	@ (8008974 <HAL_RCC_MCOConfig+0xc8>)
 800890e:	4313      	orrs	r3, r2
 8008910:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8008912:	e02a      	b.n	800896a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8008914:	4b17      	ldr	r3, [pc, #92]	@ (8008974 <HAL_RCC_MCOConfig+0xc8>)
 8008916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800891a:	4a16      	ldr	r2, [pc, #88]	@ (8008974 <HAL_RCC_MCOConfig+0xc8>)
 800891c:	f043 0304 	orr.w	r3, r3, #4
 8008920:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008924:	4b13      	ldr	r3, [pc, #76]	@ (8008974 <HAL_RCC_MCOConfig+0xc8>)
 8008926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800892a:	f003 0304 	and.w	r3, r3, #4
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008932:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008938:	2302      	movs	r3, #2
 800893a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800893c:	2303      	movs	r3, #3
 800893e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008940:	2300      	movs	r3, #0
 8008942:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008944:	2300      	movs	r3, #0
 8008946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008948:	f107 031c 	add.w	r3, r7, #28
 800894c:	4619      	mov	r1, r3
 800894e:	480b      	ldr	r0, [pc, #44]	@ (800897c <HAL_RCC_MCOConfig+0xd0>)
 8008950:	f7fe f810 	bl	8006974 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8008954:	4b07      	ldr	r3, [pc, #28]	@ (8008974 <HAL_RCC_MCOConfig+0xc8>)
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	01d9      	lsls	r1, r3, #7
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	430b      	orrs	r3, r1
 8008964:	4903      	ldr	r1, [pc, #12]	@ (8008974 <HAL_RCC_MCOConfig+0xc8>)
 8008966:	4313      	orrs	r3, r2
 8008968:	610b      	str	r3, [r1, #16]
}
 800896a:	bf00      	nop
 800896c:	3730      	adds	r7, #48	@ 0x30
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	58024400 	.word	0x58024400
 8008978:	58020000 	.word	0x58020000
 800897c:	58020800 	.word	0x58020800

08008980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008980:	b480      	push	{r7}
 8008982:	b089      	sub	sp, #36	@ 0x24
 8008984:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008986:	4bb3      	ldr	r3, [pc, #716]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008988:	691b      	ldr	r3, [r3, #16]
 800898a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800898e:	2b18      	cmp	r3, #24
 8008990:	f200 8155 	bhi.w	8008c3e <HAL_RCC_GetSysClockFreq+0x2be>
 8008994:	a201      	add	r2, pc, #4	@ (adr r2, 800899c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800899a:	bf00      	nop
 800899c:	08008a01 	.word	0x08008a01
 80089a0:	08008c3f 	.word	0x08008c3f
 80089a4:	08008c3f 	.word	0x08008c3f
 80089a8:	08008c3f 	.word	0x08008c3f
 80089ac:	08008c3f 	.word	0x08008c3f
 80089b0:	08008c3f 	.word	0x08008c3f
 80089b4:	08008c3f 	.word	0x08008c3f
 80089b8:	08008c3f 	.word	0x08008c3f
 80089bc:	08008a27 	.word	0x08008a27
 80089c0:	08008c3f 	.word	0x08008c3f
 80089c4:	08008c3f 	.word	0x08008c3f
 80089c8:	08008c3f 	.word	0x08008c3f
 80089cc:	08008c3f 	.word	0x08008c3f
 80089d0:	08008c3f 	.word	0x08008c3f
 80089d4:	08008c3f 	.word	0x08008c3f
 80089d8:	08008c3f 	.word	0x08008c3f
 80089dc:	08008a2d 	.word	0x08008a2d
 80089e0:	08008c3f 	.word	0x08008c3f
 80089e4:	08008c3f 	.word	0x08008c3f
 80089e8:	08008c3f 	.word	0x08008c3f
 80089ec:	08008c3f 	.word	0x08008c3f
 80089f0:	08008c3f 	.word	0x08008c3f
 80089f4:	08008c3f 	.word	0x08008c3f
 80089f8:	08008c3f 	.word	0x08008c3f
 80089fc:	08008a33 	.word	0x08008a33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a00:	4b94      	ldr	r3, [pc, #592]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0320 	and.w	r3, r3, #32
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d009      	beq.n	8008a20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a0c:	4b91      	ldr	r3, [pc, #580]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	08db      	lsrs	r3, r3, #3
 8008a12:	f003 0303 	and.w	r3, r3, #3
 8008a16:	4a90      	ldr	r2, [pc, #576]	@ (8008c58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a18:	fa22 f303 	lsr.w	r3, r2, r3
 8008a1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008a1e:	e111      	b.n	8008c44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008a20:	4b8d      	ldr	r3, [pc, #564]	@ (8008c58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a22:	61bb      	str	r3, [r7, #24]
      break;
 8008a24:	e10e      	b.n	8008c44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008a26:	4b8d      	ldr	r3, [pc, #564]	@ (8008c5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a28:	61bb      	str	r3, [r7, #24]
      break;
 8008a2a:	e10b      	b.n	8008c44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008a2c:	4b8c      	ldr	r3, [pc, #560]	@ (8008c60 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008a2e:	61bb      	str	r3, [r7, #24]
      break;
 8008a30:	e108      	b.n	8008c44 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a32:	4b88      	ldr	r3, [pc, #544]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a36:	f003 0303 	and.w	r3, r3, #3
 8008a3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008a3c:	4b85      	ldr	r3, [pc, #532]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a40:	091b      	lsrs	r3, r3, #4
 8008a42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008a46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a48:	4b82      	ldr	r3, [pc, #520]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008a52:	4b80      	ldr	r3, [pc, #512]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a56:	08db      	lsrs	r3, r3, #3
 8008a58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	fb02 f303 	mul.w	r3, r2, r3
 8008a62:	ee07 3a90 	vmov	s15, r3
 8008a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	f000 80e1 	beq.w	8008c38 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	f000 8083 	beq.w	8008b84 <HAL_RCC_GetSysClockFreq+0x204>
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	f200 80a1 	bhi.w	8008bc8 <HAL_RCC_GetSysClockFreq+0x248>
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <HAL_RCC_GetSysClockFreq+0x114>
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	2b01      	cmp	r3, #1
 8008a90:	d056      	beq.n	8008b40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a92:	e099      	b.n	8008bc8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a94:	4b6f      	ldr	r3, [pc, #444]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 0320 	and.w	r3, r3, #32
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d02d      	beq.n	8008afc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008aa0:	4b6c      	ldr	r3, [pc, #432]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	08db      	lsrs	r3, r3, #3
 8008aa6:	f003 0303 	and.w	r3, r3, #3
 8008aaa:	4a6b      	ldr	r2, [pc, #428]	@ (8008c58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008aac:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	ee07 3a90 	vmov	s15, r3
 8008ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	ee07 3a90 	vmov	s15, r3
 8008ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b62      	ldr	r3, [pc, #392]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ade:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008c64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008afa:	e087      	b.n	8008c0c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008c68 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0e:	4b51      	ldr	r3, [pc, #324]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b22:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008c64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b3e:	e065      	b.n	8008c0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008c6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b52:	4b40      	ldr	r3, [pc, #256]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b66:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008c64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008b82:	e043      	b.n	8008c0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	ee07 3a90 	vmov	s15, r3
 8008b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b8e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008c70 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b96:	4b2f      	ldr	r3, [pc, #188]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b9e:	ee07 3a90 	vmov	s15, r3
 8008ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008baa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008c64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008bc6:	e021      	b.n	8008c0c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	ee07 3a90 	vmov	s15, r3
 8008bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bd2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008c6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8008bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bda:	4b1e      	ldr	r3, [pc, #120]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008be2:	ee07 3a90 	vmov	s15, r3
 8008be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bea:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008c64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008c0a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008c0c:	4b11      	ldr	r3, [pc, #68]	@ (8008c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c10:	0a5b      	lsrs	r3, r3, #9
 8008c12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c16:	3301      	adds	r3, #1
 8008c18:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	ee07 3a90 	vmov	s15, r3
 8008c20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c24:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c30:	ee17 3a90 	vmov	r3, s15
 8008c34:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008c36:	e005      	b.n	8008c44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	61bb      	str	r3, [r7, #24]
      break;
 8008c3c:	e002      	b.n	8008c44 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008c3e:	4b07      	ldr	r3, [pc, #28]	@ (8008c5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c40:	61bb      	str	r3, [r7, #24]
      break;
 8008c42:	bf00      	nop
  }

  return sysclockfreq;
 8008c44:	69bb      	ldr	r3, [r7, #24]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3724      	adds	r7, #36	@ 0x24
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	58024400 	.word	0x58024400
 8008c58:	03d09000 	.word	0x03d09000
 8008c5c:	003d0900 	.word	0x003d0900
 8008c60:	007a1200 	.word	0x007a1200
 8008c64:	46000000 	.word	0x46000000
 8008c68:	4c742400 	.word	0x4c742400
 8008c6c:	4a742400 	.word	0x4a742400
 8008c70:	4af42400 	.word	0x4af42400

08008c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c7a:	f7ff fe81 	bl	8008980 <HAL_RCC_GetSysClockFreq>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	4b10      	ldr	r3, [pc, #64]	@ (8008cc4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	0a1b      	lsrs	r3, r3, #8
 8008c86:	f003 030f 	and.w	r3, r3, #15
 8008c8a:	490f      	ldr	r1, [pc, #60]	@ (8008cc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c8c:	5ccb      	ldrb	r3, [r1, r3]
 8008c8e:	f003 031f 	and.w	r3, r3, #31
 8008c92:	fa22 f303 	lsr.w	r3, r2, r3
 8008c96:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008c98:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	f003 030f 	and.w	r3, r3, #15
 8008ca0:	4a09      	ldr	r2, [pc, #36]	@ (8008cc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008ca2:	5cd3      	ldrb	r3, [r2, r3]
 8008ca4:	f003 031f 	and.w	r3, r3, #31
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	fa22 f303 	lsr.w	r3, r2, r3
 8008cae:	4a07      	ldr	r2, [pc, #28]	@ (8008ccc <HAL_RCC_GetHCLKFreq+0x58>)
 8008cb0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008cb2:	4a07      	ldr	r2, [pc, #28]	@ (8008cd0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008cb8:	4b04      	ldr	r3, [pc, #16]	@ (8008ccc <HAL_RCC_GetHCLKFreq+0x58>)
 8008cba:	681b      	ldr	r3, [r3, #0]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3708      	adds	r7, #8
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}
 8008cc4:	58024400 	.word	0x58024400
 8008cc8:	0800f014 	.word	0x0800f014
 8008ccc:	24000008 	.word	0x24000008
 8008cd0:	24000004 	.word	0x24000004

08008cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008cd8:	f7ff ffcc 	bl	8008c74 <HAL_RCC_GetHCLKFreq>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	4b06      	ldr	r3, [pc, #24]	@ (8008cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	091b      	lsrs	r3, r3, #4
 8008ce4:	f003 0307 	and.w	r3, r3, #7
 8008ce8:	4904      	ldr	r1, [pc, #16]	@ (8008cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8008cea:	5ccb      	ldrb	r3, [r1, r3]
 8008cec:	f003 031f 	and.w	r3, r3, #31
 8008cf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	bd80      	pop	{r7, pc}
 8008cf8:	58024400 	.word	0x58024400
 8008cfc:	0800f014 	.word	0x0800f014

08008d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008d04:	f7ff ffb6 	bl	8008c74 <HAL_RCC_GetHCLKFreq>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	4b06      	ldr	r3, [pc, #24]	@ (8008d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	0a1b      	lsrs	r3, r3, #8
 8008d10:	f003 0307 	and.w	r3, r3, #7
 8008d14:	4904      	ldr	r1, [pc, #16]	@ (8008d28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d16:	5ccb      	ldrb	r3, [r1, r3]
 8008d18:	f003 031f 	and.w	r3, r3, #31
 8008d1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	58024400 	.word	0x58024400
 8008d28:	0800f014 	.word	0x0800f014

08008d2c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d30:	b0ca      	sub	sp, #296	@ 0x128
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d38:	2300      	movs	r3, #0
 8008d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008d50:	2500      	movs	r5, #0
 8008d52:	ea54 0305 	orrs.w	r3, r4, r5
 8008d56:	d049      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008d5e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d62:	d02f      	beq.n	8008dc4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008d64:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008d68:	d828      	bhi.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d6e:	d01a      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008d70:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d74:	d822      	bhi.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d003      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008d7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d7e:	d007      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d80:	e01c      	b.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d82:	4bb8      	ldr	r3, [pc, #736]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d86:	4ab7      	ldr	r2, [pc, #732]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008d8e:	e01a      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d94:	3308      	adds	r3, #8
 8008d96:	2102      	movs	r1, #2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f001 fc8f 	bl	800a6bc <RCCEx_PLL2_Config>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008da4:	e00f      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008daa:	3328      	adds	r3, #40	@ 0x28
 8008dac:	2102      	movs	r1, #2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f001 fd36 	bl	800a820 <RCCEx_PLL3_Config>
 8008db4:	4603      	mov	r3, r0
 8008db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008dba:	e004      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008dc2:	e000      	b.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008dc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10a      	bne.n	8008de4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008dce:	4ba5      	ldr	r3, [pc, #660]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ddc:	4aa1      	ldr	r2, [pc, #644]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008dde:	430b      	orrs	r3, r1
 8008de0:	6513      	str	r3, [r2, #80]	@ 0x50
 8008de2:	e003      	b.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008de8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008df8:	f04f 0900 	mov.w	r9, #0
 8008dfc:	ea58 0309 	orrs.w	r3, r8, r9
 8008e00:	d047      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d82a      	bhi.n	8008e62 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e14 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e12:	bf00      	nop
 8008e14:	08008e29 	.word	0x08008e29
 8008e18:	08008e37 	.word	0x08008e37
 8008e1c:	08008e4d 	.word	0x08008e4d
 8008e20:	08008e6b 	.word	0x08008e6b
 8008e24:	08008e6b 	.word	0x08008e6b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e28:	4b8e      	ldr	r3, [pc, #568]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2c:	4a8d      	ldr	r2, [pc, #564]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e34:	e01a      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e3a:	3308      	adds	r3, #8
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f001 fc3c 	bl	800a6bc <RCCEx_PLL2_Config>
 8008e44:	4603      	mov	r3, r0
 8008e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e4a:	e00f      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e50:	3328      	adds	r3, #40	@ 0x28
 8008e52:	2100      	movs	r1, #0
 8008e54:	4618      	mov	r0, r3
 8008e56:	f001 fce3 	bl	800a820 <RCCEx_PLL3_Config>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e60:	e004      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e68:	e000      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10a      	bne.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e74:	4b7b      	ldr	r3, [pc, #492]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e78:	f023 0107 	bic.w	r1, r3, #7
 8008e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e82:	4a78      	ldr	r2, [pc, #480]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008e84:	430b      	orrs	r3, r1
 8008e86:	6513      	str	r3, [r2, #80]	@ 0x50
 8008e88:	e003      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e8e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008e9e:	f04f 0b00 	mov.w	fp, #0
 8008ea2:	ea5a 030b 	orrs.w	r3, sl, fp
 8008ea6:	d04c      	beq.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008eae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eb2:	d030      	beq.n	8008f16 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008eb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008eb8:	d829      	bhi.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008eba:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ebc:	d02d      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008ebe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008ec0:	d825      	bhi.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008ec2:	2b80      	cmp	r3, #128	@ 0x80
 8008ec4:	d018      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008ec6:	2b80      	cmp	r3, #128	@ 0x80
 8008ec8:	d821      	bhi.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d002      	beq.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008ece:	2b40      	cmp	r3, #64	@ 0x40
 8008ed0:	d007      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008ed2:	e01c      	b.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ed4:	4b63      	ldr	r3, [pc, #396]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed8:	4a62      	ldr	r2, [pc, #392]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008eda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ede:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ee0:	e01c      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ee6:	3308      	adds	r3, #8
 8008ee8:	2100      	movs	r1, #0
 8008eea:	4618      	mov	r0, r3
 8008eec:	f001 fbe6 	bl	800a6bc <RCCEx_PLL2_Config>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008ef6:	e011      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008efc:	3328      	adds	r3, #40	@ 0x28
 8008efe:	2100      	movs	r1, #0
 8008f00:	4618      	mov	r0, r3
 8008f02:	f001 fc8d 	bl	800a820 <RCCEx_PLL3_Config>
 8008f06:	4603      	mov	r3, r0
 8008f08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008f0c:	e006      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f14:	e002      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008f16:	bf00      	nop
 8008f18:	e000      	b.n	8008f1c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008f1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10a      	bne.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008f24:	4b4f      	ldr	r3, [pc, #316]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f28:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008f32:	4a4c      	ldr	r2, [pc, #304]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f34:	430b      	orrs	r3, r1
 8008f36:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f38:	e003      	b.n	8008f42 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f4a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008f4e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008f52:	2300      	movs	r3, #0
 8008f54:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008f58:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	d053      	beq.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f66:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008f6a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f6e:	d035      	beq.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008f70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008f74:	d82e      	bhi.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f7a:	d031      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008f7c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008f80:	d828      	bhi.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f86:	d01a      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008f88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008f8c:	d822      	bhi.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d003      	beq.n	8008f9a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008f92:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f96:	d007      	beq.n	8008fa8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008f98:	e01c      	b.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f9a:	4b32      	ldr	r3, [pc, #200]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f9e:	4a31      	ldr	r2, [pc, #196]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fa6:	e01c      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fac:	3308      	adds	r3, #8
 8008fae:	2100      	movs	r1, #0
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f001 fb83 	bl	800a6bc <RCCEx_PLL2_Config>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008fbc:	e011      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc2:	3328      	adds	r3, #40	@ 0x28
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f001 fc2a 	bl	800a820 <RCCEx_PLL3_Config>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008fd2:	e006      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fda:	e002      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008fdc:	bf00      	nop
 8008fde:	e000      	b.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10b      	bne.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008fea:	4b1e      	ldr	r3, [pc, #120]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fee:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ffa:	4a1a      	ldr	r2, [pc, #104]	@ (8009064 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ffc:	430b      	orrs	r3, r1
 8008ffe:	6593      	str	r3, [r2, #88]	@ 0x58
 8009000:	e003      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009002:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009006:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800900a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009012:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8009016:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800901a:	2300      	movs	r3, #0
 800901c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009020:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009024:	460b      	mov	r3, r1
 8009026:	4313      	orrs	r3, r2
 8009028:	d056      	beq.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800902a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800902e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8009032:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009036:	d038      	beq.n	80090aa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009038:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800903c:	d831      	bhi.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800903e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009042:	d034      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009044:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009048:	d82b      	bhi.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800904a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800904e:	d01d      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009050:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009054:	d825      	bhi.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009056:	2b00      	cmp	r3, #0
 8009058:	d006      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800905a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800905e:	d00a      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009060:	e01f      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009062:	bf00      	nop
 8009064:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009068:	4ba2      	ldr	r3, [pc, #648]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800906a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906c:	4aa1      	ldr	r2, [pc, #644]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800906e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009072:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009074:	e01c      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800907a:	3308      	adds	r3, #8
 800907c:	2100      	movs	r1, #0
 800907e:	4618      	mov	r0, r3
 8009080:	f001 fb1c 	bl	800a6bc <RCCEx_PLL2_Config>
 8009084:	4603      	mov	r3, r0
 8009086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800908a:	e011      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800908c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009090:	3328      	adds	r3, #40	@ 0x28
 8009092:	2100      	movs	r1, #0
 8009094:	4618      	mov	r0, r3
 8009096:	f001 fbc3 	bl	800a820 <RCCEx_PLL3_Config>
 800909a:	4603      	mov	r3, r0
 800909c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80090a0:	e006      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090a8:	e002      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80090aa:	bf00      	nop
 80090ac:	e000      	b.n	80090b0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80090ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10b      	bne.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80090b8:	4b8e      	ldr	r3, [pc, #568]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090bc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80090c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80090c8:	4a8a      	ldr	r2, [pc, #552]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80090ca:	430b      	orrs	r3, r1
 80090cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80090ce:	e003      	b.n	80090d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80090d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80090e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80090e8:	2300      	movs	r3, #0
 80090ea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80090ee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80090f2:	460b      	mov	r3, r1
 80090f4:	4313      	orrs	r3, r2
 80090f6:	d03a      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80090f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80090fe:	2b30      	cmp	r3, #48	@ 0x30
 8009100:	d01f      	beq.n	8009142 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009102:	2b30      	cmp	r3, #48	@ 0x30
 8009104:	d819      	bhi.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009106:	2b20      	cmp	r3, #32
 8009108:	d00c      	beq.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800910a:	2b20      	cmp	r3, #32
 800910c:	d815      	bhi.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800910e:	2b00      	cmp	r3, #0
 8009110:	d019      	beq.n	8009146 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009112:	2b10      	cmp	r3, #16
 8009114:	d111      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009116:	4b77      	ldr	r3, [pc, #476]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800911a:	4a76      	ldr	r2, [pc, #472]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800911c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009120:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009122:	e011      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009128:	3308      	adds	r3, #8
 800912a:	2102      	movs	r1, #2
 800912c:	4618      	mov	r0, r3
 800912e:	f001 fac5 	bl	800a6bc <RCCEx_PLL2_Config>
 8009132:	4603      	mov	r3, r0
 8009134:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009138:	e006      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009140:	e002      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009142:	bf00      	nop
 8009144:	e000      	b.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009146:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009148:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10a      	bne.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009150:	4b68      	ldr	r3, [pc, #416]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009154:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800915c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800915e:	4a65      	ldr	r2, [pc, #404]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009160:	430b      	orrs	r3, r1
 8009162:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009164:	e003      	b.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800916a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800916e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009176:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800917a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800917e:	2300      	movs	r3, #0
 8009180:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8009184:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009188:	460b      	mov	r3, r1
 800918a:	4313      	orrs	r3, r2
 800918c:	d051      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800918e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009194:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009198:	d035      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800919a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800919e:	d82e      	bhi.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80091a0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091a4:	d031      	beq.n	800920a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80091a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80091aa:	d828      	bhi.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80091ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091b0:	d01a      	beq.n	80091e8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80091b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80091b6:	d822      	bhi.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80091bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091c0:	d007      	beq.n	80091d2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80091c2:	e01c      	b.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091c4:	4b4b      	ldr	r3, [pc, #300]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091c8:	4a4a      	ldr	r2, [pc, #296]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80091ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091d0:	e01c      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80091d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d6:	3308      	adds	r3, #8
 80091d8:	2100      	movs	r1, #0
 80091da:	4618      	mov	r0, r3
 80091dc:	f001 fa6e 	bl	800a6bc <RCCEx_PLL2_Config>
 80091e0:	4603      	mov	r3, r0
 80091e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091e6:	e011      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80091e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ec:	3328      	adds	r3, #40	@ 0x28
 80091ee:	2100      	movs	r1, #0
 80091f0:	4618      	mov	r0, r3
 80091f2:	f001 fb15 	bl	800a820 <RCCEx_PLL3_Config>
 80091f6:	4603      	mov	r3, r0
 80091f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80091fc:	e006      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009204:	e002      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009206:	bf00      	nop
 8009208:	e000      	b.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800920a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800920c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009210:	2b00      	cmp	r3, #0
 8009212:	d10a      	bne.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009214:	4b37      	ldr	r3, [pc, #220]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009218:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800921c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009220:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009222:	4a34      	ldr	r2, [pc, #208]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009224:	430b      	orrs	r3, r1
 8009226:	6513      	str	r3, [r2, #80]	@ 0x50
 8009228:	e003      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800922a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800922e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800923a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800923e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009242:	2300      	movs	r3, #0
 8009244:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009248:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800924c:	460b      	mov	r3, r1
 800924e:	4313      	orrs	r3, r2
 8009250:	d056      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009258:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800925c:	d033      	beq.n	80092c6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800925e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009262:	d82c      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009264:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009268:	d02f      	beq.n	80092ca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800926a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800926e:	d826      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009270:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009274:	d02b      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009276:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800927a:	d820      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x592>
 800927c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009280:	d012      	beq.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009282:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009286:	d81a      	bhi.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009288:	2b00      	cmp	r3, #0
 800928a:	d022      	beq.n	80092d2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800928c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009290:	d115      	bne.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009296:	3308      	adds	r3, #8
 8009298:	2101      	movs	r1, #1
 800929a:	4618      	mov	r0, r3
 800929c:	f001 fa0e 	bl	800a6bc <RCCEx_PLL2_Config>
 80092a0:	4603      	mov	r3, r0
 80092a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80092a6:	e015      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ac:	3328      	adds	r3, #40	@ 0x28
 80092ae:	2101      	movs	r1, #1
 80092b0:	4618      	mov	r0, r3
 80092b2:	f001 fab5 	bl	800a820 <RCCEx_PLL3_Config>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80092bc:	e00a      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092be:	2301      	movs	r3, #1
 80092c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092c4:	e006      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80092c6:	bf00      	nop
 80092c8:	e004      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80092ca:	bf00      	nop
 80092cc:	e002      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80092ce:	bf00      	nop
 80092d0:	e000      	b.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80092d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d10d      	bne.n	80092f8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80092dc:	4b05      	ldr	r3, [pc, #20]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80092e0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80092e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80092ea:	4a02      	ldr	r2, [pc, #8]	@ (80092f4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092ec:	430b      	orrs	r3, r1
 80092ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80092f0:	e006      	b.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80092f2:	bf00      	nop
 80092f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009308:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800930c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009310:	2300      	movs	r3, #0
 8009312:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009316:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800931a:	460b      	mov	r3, r1
 800931c:	4313      	orrs	r3, r2
 800931e:	d055      	beq.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009324:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009328:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800932c:	d033      	beq.n	8009396 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800932e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009332:	d82c      	bhi.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009338:	d02f      	beq.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800933a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800933e:	d826      	bhi.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009340:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009344:	d02b      	beq.n	800939e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009346:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800934a:	d820      	bhi.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800934c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009350:	d012      	beq.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009352:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009356:	d81a      	bhi.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009358:	2b00      	cmp	r3, #0
 800935a:	d022      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800935c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009360:	d115      	bne.n	800938e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009366:	3308      	adds	r3, #8
 8009368:	2101      	movs	r1, #1
 800936a:	4618      	mov	r0, r3
 800936c:	f001 f9a6 	bl	800a6bc <RCCEx_PLL2_Config>
 8009370:	4603      	mov	r3, r0
 8009372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009376:	e015      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937c:	3328      	adds	r3, #40	@ 0x28
 800937e:	2101      	movs	r1, #1
 8009380:	4618      	mov	r0, r3
 8009382:	f001 fa4d 	bl	800a820 <RCCEx_PLL3_Config>
 8009386:	4603      	mov	r3, r0
 8009388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800938c:	e00a      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009394:	e006      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009396:	bf00      	nop
 8009398:	e004      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800939a:	bf00      	nop
 800939c:	e002      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800939e:	bf00      	nop
 80093a0:	e000      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80093a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d10b      	bne.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80093ac:	4ba3      	ldr	r3, [pc, #652]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093b0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80093b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80093bc:	4a9f      	ldr	r2, [pc, #636]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093be:	430b      	orrs	r3, r1
 80093c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80093c2:	e003      	b.n	80093cc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80093cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80093d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80093dc:	2300      	movs	r3, #0
 80093de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80093e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80093e6:	460b      	mov	r3, r1
 80093e8:	4313      	orrs	r3, r2
 80093ea:	d037      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80093ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093f6:	d00e      	beq.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80093f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093fc:	d816      	bhi.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d018      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009402:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009406:	d111      	bne.n	800942c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009408:	4b8c      	ldr	r3, [pc, #560]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800940a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940c:	4a8b      	ldr	r2, [pc, #556]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800940e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009414:	e00f      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800941a:	3308      	adds	r3, #8
 800941c:	2101      	movs	r1, #1
 800941e:	4618      	mov	r0, r3
 8009420:	f001 f94c 	bl	800a6bc <RCCEx_PLL2_Config>
 8009424:	4603      	mov	r3, r0
 8009426:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800942a:	e004      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009432:	e000      	b.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009436:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800943a:	2b00      	cmp	r3, #0
 800943c:	d10a      	bne.n	8009454 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800943e:	4b7f      	ldr	r3, [pc, #508]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009442:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800944a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800944c:	4a7b      	ldr	r2, [pc, #492]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800944e:	430b      	orrs	r3, r1
 8009450:	6513      	str	r3, [r2, #80]	@ 0x50
 8009452:	e003      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009458:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800945c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009464:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800946c:	2300      	movs	r3, #0
 800946e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009472:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8009476:	460b      	mov	r3, r1
 8009478:	4313      	orrs	r3, r2
 800947a:	d039      	beq.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800947c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009482:	2b03      	cmp	r3, #3
 8009484:	d81c      	bhi.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009486:	a201      	add	r2, pc, #4	@ (adr r2, 800948c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948c:	080094c9 	.word	0x080094c9
 8009490:	0800949d 	.word	0x0800949d
 8009494:	080094ab 	.word	0x080094ab
 8009498:	080094c9 	.word	0x080094c9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800949c:	4b67      	ldr	r3, [pc, #412]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800949e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094a0:	4a66      	ldr	r2, [pc, #408]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80094a8:	e00f      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80094aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ae:	3308      	adds	r3, #8
 80094b0:	2102      	movs	r1, #2
 80094b2:	4618      	mov	r0, r3
 80094b4:	f001 f902 	bl	800a6bc <RCCEx_PLL2_Config>
 80094b8:	4603      	mov	r3, r0
 80094ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80094be:	e004      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094c6:	e000      	b.n	80094ca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80094c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d10a      	bne.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80094d2:	4b5a      	ldr	r3, [pc, #360]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094d6:	f023 0103 	bic.w	r1, r3, #3
 80094da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094e0:	4a56      	ldr	r2, [pc, #344]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80094e2:	430b      	orrs	r3, r1
 80094e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80094e6:	e003      	b.n	80094f0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80094f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80094fc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009500:	2300      	movs	r3, #0
 8009502:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009506:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800950a:	460b      	mov	r3, r1
 800950c:	4313      	orrs	r3, r2
 800950e:	f000 809f 	beq.w	8009650 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009512:	4b4b      	ldr	r3, [pc, #300]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a4a      	ldr	r2, [pc, #296]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800951c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800951e:	f7f9 fa1b 	bl	8002958 <HAL_GetTick>
 8009522:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009526:	e00b      	b.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009528:	f7f9 fa16 	bl	8002958 <HAL_GetTick>
 800952c:	4602      	mov	r2, r0
 800952e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009532:	1ad3      	subs	r3, r2, r3
 8009534:	2b64      	cmp	r3, #100	@ 0x64
 8009536:	d903      	bls.n	8009540 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009538:	2303      	movs	r3, #3
 800953a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800953e:	e005      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009540:	4b3f      	ldr	r3, [pc, #252]	@ (8009640 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009548:	2b00      	cmp	r3, #0
 800954a:	d0ed      	beq.n	8009528 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800954c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009550:	2b00      	cmp	r3, #0
 8009552:	d179      	bne.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009554:	4b39      	ldr	r3, [pc, #228]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009556:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009560:	4053      	eors	r3, r2
 8009562:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009566:	2b00      	cmp	r3, #0
 8009568:	d015      	beq.n	8009596 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800956a:	4b34      	ldr	r3, [pc, #208]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800956c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800956e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009572:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009576:	4b31      	ldr	r3, [pc, #196]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800957a:	4a30      	ldr	r2, [pc, #192]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800957c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009580:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009582:	4b2e      	ldr	r3, [pc, #184]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009584:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009586:	4a2d      	ldr	r2, [pc, #180]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800958c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800958e:	4a2b      	ldr	r2, [pc, #172]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009590:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009594:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800959a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800959e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095a2:	d118      	bne.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a4:	f7f9 f9d8 	bl	8002958 <HAL_GetTick>
 80095a8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095ac:	e00d      	b.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095ae:	f7f9 f9d3 	bl	8002958 <HAL_GetTick>
 80095b2:	4602      	mov	r2, r0
 80095b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80095b8:	1ad2      	subs	r2, r2, r3
 80095ba:	f241 3388 	movw	r3, #5000	@ 0x1388
 80095be:	429a      	cmp	r2, r3
 80095c0:	d903      	bls.n	80095ca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80095c8:	e005      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80095ca:	4b1c      	ldr	r3, [pc, #112]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d0eb      	beq.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80095d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d129      	bne.n	8009632 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80095de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80095e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80095ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095ee:	d10e      	bne.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80095f0:	4b12      	ldr	r3, [pc, #72]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80095f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009600:	091a      	lsrs	r2, r3, #4
 8009602:	4b10      	ldr	r3, [pc, #64]	@ (8009644 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009604:	4013      	ands	r3, r2
 8009606:	4a0d      	ldr	r2, [pc, #52]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009608:	430b      	orrs	r3, r1
 800960a:	6113      	str	r3, [r2, #16]
 800960c:	e005      	b.n	800961a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800960e:	4b0b      	ldr	r3, [pc, #44]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	4a0a      	ldr	r2, [pc, #40]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009614:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009618:	6113      	str	r3, [r2, #16]
 800961a:	4b08      	ldr	r3, [pc, #32]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800961c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800961e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009622:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800962a:	4a04      	ldr	r2, [pc, #16]	@ (800963c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800962c:	430b      	orrs	r3, r1
 800962e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009630:	e00e      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800963a:	e009      	b.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800963c:	58024400 	.word	0x58024400
 8009640:	58024800 	.word	0x58024800
 8009644:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009648:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800964c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009658:	f002 0301 	and.w	r3, r2, #1
 800965c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009660:	2300      	movs	r3, #0
 8009662:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009666:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800966a:	460b      	mov	r3, r1
 800966c:	4313      	orrs	r3, r2
 800966e:	f000 8089 	beq.w	8009784 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009676:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009678:	2b28      	cmp	r3, #40	@ 0x28
 800967a:	d86b      	bhi.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800967c:	a201      	add	r2, pc, #4	@ (adr r2, 8009684 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800967e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009682:	bf00      	nop
 8009684:	0800975d 	.word	0x0800975d
 8009688:	08009755 	.word	0x08009755
 800968c:	08009755 	.word	0x08009755
 8009690:	08009755 	.word	0x08009755
 8009694:	08009755 	.word	0x08009755
 8009698:	08009755 	.word	0x08009755
 800969c:	08009755 	.word	0x08009755
 80096a0:	08009755 	.word	0x08009755
 80096a4:	08009729 	.word	0x08009729
 80096a8:	08009755 	.word	0x08009755
 80096ac:	08009755 	.word	0x08009755
 80096b0:	08009755 	.word	0x08009755
 80096b4:	08009755 	.word	0x08009755
 80096b8:	08009755 	.word	0x08009755
 80096bc:	08009755 	.word	0x08009755
 80096c0:	08009755 	.word	0x08009755
 80096c4:	0800973f 	.word	0x0800973f
 80096c8:	08009755 	.word	0x08009755
 80096cc:	08009755 	.word	0x08009755
 80096d0:	08009755 	.word	0x08009755
 80096d4:	08009755 	.word	0x08009755
 80096d8:	08009755 	.word	0x08009755
 80096dc:	08009755 	.word	0x08009755
 80096e0:	08009755 	.word	0x08009755
 80096e4:	0800975d 	.word	0x0800975d
 80096e8:	08009755 	.word	0x08009755
 80096ec:	08009755 	.word	0x08009755
 80096f0:	08009755 	.word	0x08009755
 80096f4:	08009755 	.word	0x08009755
 80096f8:	08009755 	.word	0x08009755
 80096fc:	08009755 	.word	0x08009755
 8009700:	08009755 	.word	0x08009755
 8009704:	0800975d 	.word	0x0800975d
 8009708:	08009755 	.word	0x08009755
 800970c:	08009755 	.word	0x08009755
 8009710:	08009755 	.word	0x08009755
 8009714:	08009755 	.word	0x08009755
 8009718:	08009755 	.word	0x08009755
 800971c:	08009755 	.word	0x08009755
 8009720:	08009755 	.word	0x08009755
 8009724:	0800975d 	.word	0x0800975d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800972c:	3308      	adds	r3, #8
 800972e:	2101      	movs	r1, #1
 8009730:	4618      	mov	r0, r3
 8009732:	f000 ffc3 	bl	800a6bc <RCCEx_PLL2_Config>
 8009736:	4603      	mov	r3, r0
 8009738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800973c:	e00f      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800973e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009742:	3328      	adds	r3, #40	@ 0x28
 8009744:	2101      	movs	r1, #1
 8009746:	4618      	mov	r0, r3
 8009748:	f001 f86a 	bl	800a820 <RCCEx_PLL3_Config>
 800974c:	4603      	mov	r3, r0
 800974e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009752:	e004      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800975a:	e000      	b.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800975c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800975e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009762:	2b00      	cmp	r3, #0
 8009764:	d10a      	bne.n	800977c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009766:	4bbf      	ldr	r3, [pc, #764]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800976a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800976e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009772:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009774:	4abb      	ldr	r2, [pc, #748]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009776:	430b      	orrs	r3, r1
 8009778:	6553      	str	r3, [r2, #84]	@ 0x54
 800977a:	e003      	b.n	8009784 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800977c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009780:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	f002 0302 	and.w	r3, r2, #2
 8009790:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009794:	2300      	movs	r3, #0
 8009796:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800979a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800979e:	460b      	mov	r3, r1
 80097a0:	4313      	orrs	r3, r2
 80097a2:	d041      	beq.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80097a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80097aa:	2b05      	cmp	r3, #5
 80097ac:	d824      	bhi.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80097ae:	a201      	add	r2, pc, #4	@ (adr r2, 80097b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80097b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097b4:	08009801 	.word	0x08009801
 80097b8:	080097cd 	.word	0x080097cd
 80097bc:	080097e3 	.word	0x080097e3
 80097c0:	08009801 	.word	0x08009801
 80097c4:	08009801 	.word	0x08009801
 80097c8:	08009801 	.word	0x08009801
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d0:	3308      	adds	r3, #8
 80097d2:	2101      	movs	r1, #1
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 ff71 	bl	800a6bc <RCCEx_PLL2_Config>
 80097da:	4603      	mov	r3, r0
 80097dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80097e0:	e00f      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097e6:	3328      	adds	r3, #40	@ 0x28
 80097e8:	2101      	movs	r1, #1
 80097ea:	4618      	mov	r0, r3
 80097ec:	f001 f818 	bl	800a820 <RCCEx_PLL3_Config>
 80097f0:	4603      	mov	r3, r0
 80097f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80097f6:	e004      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097fe:	e000      	b.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10a      	bne.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800980a:	4b96      	ldr	r3, [pc, #600]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800980c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800980e:	f023 0107 	bic.w	r1, r3, #7
 8009812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009816:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009818:	4a92      	ldr	r2, [pc, #584]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800981a:	430b      	orrs	r3, r1
 800981c:	6553      	str	r3, [r2, #84]	@ 0x54
 800981e:	e003      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009824:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800982c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009830:	f002 0304 	and.w	r3, r2, #4
 8009834:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009838:	2300      	movs	r3, #0
 800983a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800983e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009842:	460b      	mov	r3, r1
 8009844:	4313      	orrs	r3, r2
 8009846:	d044      	beq.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800984c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009850:	2b05      	cmp	r3, #5
 8009852:	d825      	bhi.n	80098a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009854:	a201      	add	r2, pc, #4	@ (adr r2, 800985c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985a:	bf00      	nop
 800985c:	080098a9 	.word	0x080098a9
 8009860:	08009875 	.word	0x08009875
 8009864:	0800988b 	.word	0x0800988b
 8009868:	080098a9 	.word	0x080098a9
 800986c:	080098a9 	.word	0x080098a9
 8009870:	080098a9 	.word	0x080098a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009878:	3308      	adds	r3, #8
 800987a:	2101      	movs	r1, #1
 800987c:	4618      	mov	r0, r3
 800987e:	f000 ff1d 	bl	800a6bc <RCCEx_PLL2_Config>
 8009882:	4603      	mov	r3, r0
 8009884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009888:	e00f      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800988a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800988e:	3328      	adds	r3, #40	@ 0x28
 8009890:	2101      	movs	r1, #1
 8009892:	4618      	mov	r0, r3
 8009894:	f000 ffc4 	bl	800a820 <RCCEx_PLL3_Config>
 8009898:	4603      	mov	r3, r0
 800989a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800989e:	e004      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80098a6:	e000      	b.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80098a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10b      	bne.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80098b2:	4b6c      	ldr	r3, [pc, #432]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098b6:	f023 0107 	bic.w	r1, r3, #7
 80098ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098c2:	4a68      	ldr	r2, [pc, #416]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80098c4:	430b      	orrs	r3, r1
 80098c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80098c8:	e003      	b.n	80098d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80098d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	f002 0320 	and.w	r3, r2, #32
 80098de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80098e2:	2300      	movs	r3, #0
 80098e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80098e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80098ec:	460b      	mov	r3, r1
 80098ee:	4313      	orrs	r3, r2
 80098f0:	d055      	beq.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80098f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80098fe:	d033      	beq.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009900:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009904:	d82c      	bhi.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009906:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990a:	d02f      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800990c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009910:	d826      	bhi.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009912:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009916:	d02b      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009918:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800991c:	d820      	bhi.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800991e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009922:	d012      	beq.n	800994a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009928:	d81a      	bhi.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800992a:	2b00      	cmp	r3, #0
 800992c:	d022      	beq.n	8009974 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800992e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009932:	d115      	bne.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009938:	3308      	adds	r3, #8
 800993a:	2100      	movs	r1, #0
 800993c:	4618      	mov	r0, r3
 800993e:	f000 febd 	bl	800a6bc <RCCEx_PLL2_Config>
 8009942:	4603      	mov	r3, r0
 8009944:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009948:	e015      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800994a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800994e:	3328      	adds	r3, #40	@ 0x28
 8009950:	2102      	movs	r1, #2
 8009952:	4618      	mov	r0, r3
 8009954:	f000 ff64 	bl	800a820 <RCCEx_PLL3_Config>
 8009958:	4603      	mov	r3, r0
 800995a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800995e:	e00a      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009960:	2301      	movs	r3, #1
 8009962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009966:	e006      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009968:	bf00      	nop
 800996a:	e004      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800996c:	bf00      	nop
 800996e:	e002      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009970:	bf00      	nop
 8009972:	e000      	b.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10b      	bne.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800997e:	4b39      	ldr	r3, [pc, #228]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009980:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009982:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800998a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800998e:	4a35      	ldr	r2, [pc, #212]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009990:	430b      	orrs	r3, r1
 8009992:	6553      	str	r3, [r2, #84]	@ 0x54
 8009994:	e003      	b.n	800999e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800999a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800999e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80099aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80099ae:	2300      	movs	r3, #0
 80099b0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80099b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4313      	orrs	r3, r2
 80099bc:	d058      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80099be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099c6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80099ca:	d033      	beq.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80099cc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80099d0:	d82c      	bhi.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099d6:	d02f      	beq.n	8009a38 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80099d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80099dc:	d826      	bhi.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099e2:	d02b      	beq.n	8009a3c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80099e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80099e8:	d820      	bhi.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099ee:	d012      	beq.n	8009a16 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80099f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80099f4:	d81a      	bhi.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d022      	beq.n	8009a40 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80099fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099fe:	d115      	bne.n	8009a2c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a04:	3308      	adds	r3, #8
 8009a06:	2100      	movs	r1, #0
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f000 fe57 	bl	800a6bc <RCCEx_PLL2_Config>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009a14:	e015      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1a:	3328      	adds	r3, #40	@ 0x28
 8009a1c:	2102      	movs	r1, #2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 fefe 	bl	800a820 <RCCEx_PLL3_Config>
 8009a24:	4603      	mov	r3, r0
 8009a26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009a2a:	e00a      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a32:	e006      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009a34:	bf00      	nop
 8009a36:	e004      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009a38:	bf00      	nop
 8009a3a:	e002      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009a3c:	bf00      	nop
 8009a3e:	e000      	b.n	8009a42 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d10e      	bne.n	8009a68 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009a4a:	4b06      	ldr	r3, [pc, #24]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a4e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a56:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a5a:	4a02      	ldr	r2, [pc, #8]	@ (8009a64 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a5c:	430b      	orrs	r3, r1
 8009a5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a60:	e006      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009a62:	bf00      	nop
 8009a64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a78:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a80:	2300      	movs	r3, #0
 8009a82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a86:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009a8a:	460b      	mov	r3, r1
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	d055      	beq.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009a90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009a98:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009a9c:	d033      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009a9e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009aa2:	d82c      	bhi.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009aa4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aa8:	d02f      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009aaa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aae:	d826      	bhi.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009ab0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009ab4:	d02b      	beq.n	8009b0e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009ab6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009aba:	d820      	bhi.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009abc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ac0:	d012      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009ac2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ac6:	d81a      	bhi.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d022      	beq.n	8009b12 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009acc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ad0:	d115      	bne.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad6:	3308      	adds	r3, #8
 8009ad8:	2100      	movs	r1, #0
 8009ada:	4618      	mov	r0, r3
 8009adc:	f000 fdee 	bl	800a6bc <RCCEx_PLL2_Config>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009ae6:	e015      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aec:	3328      	adds	r3, #40	@ 0x28
 8009aee:	2102      	movs	r1, #2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f000 fe95 	bl	800a820 <RCCEx_PLL3_Config>
 8009af6:	4603      	mov	r3, r0
 8009af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009afc:	e00a      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b04:	e006      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009b06:	bf00      	nop
 8009b08:	e004      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009b0a:	bf00      	nop
 8009b0c:	e002      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009b0e:	bf00      	nop
 8009b10:	e000      	b.n	8009b14 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009b12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10b      	bne.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009b1c:	4ba1      	ldr	r3, [pc, #644]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b20:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009b2c:	4a9d      	ldr	r2, [pc, #628]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b2e:	430b      	orrs	r3, r1
 8009b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8009b32:	e003      	b.n	8009b3c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009b3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b44:	f002 0308 	and.w	r3, r2, #8
 8009b48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b52:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009b56:	460b      	mov	r3, r1
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	d01e      	beq.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b68:	d10c      	bne.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b6e:	3328      	adds	r3, #40	@ 0x28
 8009b70:	2102      	movs	r1, #2
 8009b72:	4618      	mov	r0, r3
 8009b74:	f000 fe54 	bl	800a820 <RCCEx_PLL3_Config>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009b7e:	2301      	movs	r3, #1
 8009b80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009b84:	4b87      	ldr	r3, [pc, #540]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b88:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009b94:	4a83      	ldr	r2, [pc, #524]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b96:	430b      	orrs	r3, r1
 8009b98:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba2:	f002 0310 	and.w	r3, r2, #16
 8009ba6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009baa:	2300      	movs	r3, #0
 8009bac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009bb0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	d01e      	beq.n	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009bc6:	d10c      	bne.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bcc:	3328      	adds	r3, #40	@ 0x28
 8009bce:	2102      	movs	r1, #2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 fe25 	bl	800a820 <RCCEx_PLL3_Config>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009be2:	4b70      	ldr	r3, [pc, #448]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009be6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009bf2:	4a6c      	ldr	r2, [pc, #432]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009bf4:	430b      	orrs	r3, r1
 8009bf6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c00:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009c04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c08:	2300      	movs	r3, #0
 8009c0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009c0e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009c12:	460b      	mov	r3, r1
 8009c14:	4313      	orrs	r3, r2
 8009c16:	d03e      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c24:	d022      	beq.n	8009c6c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009c26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009c2a:	d81b      	bhi.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d003      	beq.n	8009c38 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c34:	d00b      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009c36:	e015      	b.n	8009c64 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	2100      	movs	r1, #0
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 fd3b 	bl	800a6bc <RCCEx_PLL2_Config>
 8009c46:	4603      	mov	r3, r0
 8009c48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c4c:	e00f      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c52:	3328      	adds	r3, #40	@ 0x28
 8009c54:	2102      	movs	r1, #2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f000 fde2 	bl	800a820 <RCCEx_PLL3_Config>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009c62:	e004      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c64:	2301      	movs	r3, #1
 8009c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c6a:	e000      	b.n	8009c6e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10b      	bne.n	8009c8e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009c76:	4b4b      	ldr	r3, [pc, #300]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c7a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009c86:	4a47      	ldr	r2, [pc, #284]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009c88:	430b      	orrs	r3, r1
 8009c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c8c:	e003      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009ca2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009ca8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009cac:	460b      	mov	r3, r1
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	d03b      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009cbe:	d01f      	beq.n	8009d00 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009cc0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009cc4:	d818      	bhi.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cca:	d003      	beq.n	8009cd4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009ccc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009cd0:	d007      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009cd2:	e011      	b.n	8009cf8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cd4:	4b33      	ldr	r3, [pc, #204]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd8:	4a32      	ldr	r2, [pc, #200]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ce0:	e00f      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce6:	3328      	adds	r3, #40	@ 0x28
 8009ce8:	2101      	movs	r1, #1
 8009cea:	4618      	mov	r0, r3
 8009cec:	f000 fd98 	bl	800a820 <RCCEx_PLL3_Config>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009cf6:	e004      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cfe:	e000      	b.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009d00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10b      	bne.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d0a:	4b26      	ldr	r3, [pc, #152]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d0e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d1a:	4a22      	ldr	r2, [pc, #136]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d1c:	430b      	orrs	r3, r1
 8009d1e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009d20:	e003      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009d36:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d38:	2300      	movs	r3, #0
 8009d3a:	677b      	str	r3, [r7, #116]	@ 0x74
 8009d3c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009d40:	460b      	mov	r3, r1
 8009d42:	4313      	orrs	r3, r2
 8009d44:	d034      	beq.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d003      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009d54:	d007      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009d56:	e011      	b.n	8009d7c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d58:	4b12      	ldr	r3, [pc, #72]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5c:	4a11      	ldr	r2, [pc, #68]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d64:	e00e      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d6a:	3308      	adds	r3, #8
 8009d6c:	2102      	movs	r1, #2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f000 fca4 	bl	800a6bc <RCCEx_PLL2_Config>
 8009d74:	4603      	mov	r3, r0
 8009d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009d7a:	e003      	b.n	8009d84 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d10d      	bne.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009d8c:	4b05      	ldr	r3, [pc, #20]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d90:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d9a:	4a02      	ldr	r2, [pc, #8]	@ (8009da4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d9c:	430b      	orrs	r3, r1
 8009d9e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009da0:	e006      	b.n	8009db0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009da2:	bf00      	nop
 8009da4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009dbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009dc2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	d00c      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd0:	3328      	adds	r3, #40	@ 0x28
 8009dd2:	2102      	movs	r1, #2
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 fd23 	bl	800a820 <RCCEx_PLL3_Config>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d002      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009df2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009df4:	2300      	movs	r3, #0
 8009df6:	667b      	str	r3, [r7, #100]	@ 0x64
 8009df8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	d038      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e0e:	d018      	beq.n	8009e42 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009e10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e14:	d811      	bhi.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009e16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e1a:	d014      	beq.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e20:	d80b      	bhi.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d011      	beq.n	8009e4a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009e26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e2a:	d106      	bne.n	8009e3a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e2c:	4bc3      	ldr	r3, [pc, #780]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e30:	4ac2      	ldr	r2, [pc, #776]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009e38:	e008      	b.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e40:	e004      	b.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009e42:	bf00      	nop
 8009e44:	e002      	b.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009e46:	bf00      	nop
 8009e48:	e000      	b.n	8009e4c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d10b      	bne.n	8009e6c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009e54:	4bb9      	ldr	r3, [pc, #740]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009e64:	4ab5      	ldr	r2, [pc, #724]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e66:	430b      	orrs	r3, r1
 8009e68:	6553      	str	r3, [r2, #84]	@ 0x54
 8009e6a:	e003      	b.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e7c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009e80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e82:	2300      	movs	r3, #0
 8009e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e86:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009e8a:	460b      	mov	r3, r1
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	d009      	beq.n	8009ea4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009e90:	4baa      	ldr	r3, [pc, #680]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e9e:	4aa7      	ldr	r2, [pc, #668]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ea0:	430b      	orrs	r3, r1
 8009ea2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eac:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009eb0:	653b      	str	r3, [r7, #80]	@ 0x50
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8009eb6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	d00a      	beq.n	8009ed6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009ec0:	4b9e      	ldr	r3, [pc, #632]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ec2:	691b      	ldr	r3, [r3, #16]
 8009ec4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ecc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009ed0:	4a9a      	ldr	r2, [pc, #616]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ed2:	430b      	orrs	r3, r1
 8009ed4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ede:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ee8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009eec:	460b      	mov	r3, r1
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	d009      	beq.n	8009f06 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009ef2:	4b92      	ldr	r3, [pc, #584]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ef6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f00:	4a8e      	ldr	r2, [pc, #568]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f02:	430b      	orrs	r3, r1
 8009f04:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009f12:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f14:	2300      	movs	r3, #0
 8009f16:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f18:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	d00e      	beq.n	8009f40 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009f22:	4b86      	ldr	r3, [pc, #536]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f24:	691b      	ldr	r3, [r3, #16]
 8009f26:	4a85      	ldr	r2, [pc, #532]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f28:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009f2c:	6113      	str	r3, [r2, #16]
 8009f2e:	4b83      	ldr	r3, [pc, #524]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f30:	6919      	ldr	r1, [r3, #16]
 8009f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009f3a:	4a80      	ldr	r2, [pc, #512]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f3c:	430b      	orrs	r3, r1
 8009f3e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f48:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009f4c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009f4e:	2300      	movs	r3, #0
 8009f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f52:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009f56:	460b      	mov	r3, r1
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	d009      	beq.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009f5c:	4b77      	ldr	r3, [pc, #476]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f60:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f6a:	4a74      	ldr	r2, [pc, #464]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f6c:	430b      	orrs	r3, r1
 8009f6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f78:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009f7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f7e:	2300      	movs	r3, #0
 8009f80:	637b      	str	r3, [r7, #52]	@ 0x34
 8009f82:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009f86:	460b      	mov	r3, r1
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	d00a      	beq.n	8009fa2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009f8c:	4b6b      	ldr	r3, [pc, #428]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f90:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009f9c:	4a67      	ldr	r2, [pc, #412]	@ (800a13c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009f9e:	430b      	orrs	r3, r1
 8009fa0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009faa:	2100      	movs	r1, #0
 8009fac:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009fb4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009fb8:	460b      	mov	r3, r1
 8009fba:	4313      	orrs	r3, r2
 8009fbc:	d011      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc2:	3308      	adds	r3, #8
 8009fc4:	2100      	movs	r1, #0
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	f000 fb78 	bl	800a6bc <RCCEx_PLL2_Config>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d003      	beq.n	8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fea:	2100      	movs	r1, #0
 8009fec:	6239      	str	r1, [r7, #32]
 8009fee:	f003 0302 	and.w	r3, r3, #2
 8009ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ff4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	d011      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a002:	3308      	adds	r3, #8
 800a004:	2101      	movs	r1, #1
 800a006:	4618      	mov	r0, r3
 800a008:	f000 fb58 	bl	800a6bc <RCCEx_PLL2_Config>
 800a00c:	4603      	mov	r3, r0
 800a00e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a016:	2b00      	cmp	r3, #0
 800a018:	d003      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a01a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a01e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02a:	2100      	movs	r1, #0
 800a02c:	61b9      	str	r1, [r7, #24]
 800a02e:	f003 0304 	and.w	r3, r3, #4
 800a032:	61fb      	str	r3, [r7, #28]
 800a034:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a038:	460b      	mov	r3, r1
 800a03a:	4313      	orrs	r3, r2
 800a03c:	d011      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a042:	3308      	adds	r3, #8
 800a044:	2102      	movs	r1, #2
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fb38 	bl	800a6bc <RCCEx_PLL2_Config>
 800a04c:	4603      	mov	r3, r0
 800a04e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a056:	2b00      	cmp	r3, #0
 800a058:	d003      	beq.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a05a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a05e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06a:	2100      	movs	r1, #0
 800a06c:	6139      	str	r1, [r7, #16]
 800a06e:	f003 0308 	and.w	r3, r3, #8
 800a072:	617b      	str	r3, [r7, #20]
 800a074:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a078:	460b      	mov	r3, r1
 800a07a:	4313      	orrs	r3, r2
 800a07c:	d011      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a082:	3328      	adds	r3, #40	@ 0x28
 800a084:	2100      	movs	r1, #0
 800a086:	4618      	mov	r0, r3
 800a088:	f000 fbca 	bl	800a820 <RCCEx_PLL3_Config>
 800a08c:	4603      	mov	r3, r0
 800a08e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a09a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a09e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a0a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	f003 0310 	and.w	r3, r3, #16
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	d011      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0c2:	3328      	adds	r3, #40	@ 0x28
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fbaa 	bl	800a820 <RCCEx_PLL3_Config>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a0d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d003      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a0da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a0de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a0e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ea:	2100      	movs	r1, #0
 800a0ec:	6039      	str	r1, [r7, #0]
 800a0ee:	f003 0320 	and.w	r3, r3, #32
 800a0f2:	607b      	str	r3, [r7, #4]
 800a0f4:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	d011      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a102:	3328      	adds	r3, #40	@ 0x28
 800a104:	2102      	movs	r1, #2
 800a106:	4618      	mov	r0, r3
 800a108:	f000 fb8a 	bl	800a820 <RCCEx_PLL3_Config>
 800a10c:	4603      	mov	r3, r0
 800a10e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a11a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a11e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a122:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a126:	2b00      	cmp	r3, #0
 800a128:	d101      	bne.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	e000      	b.n	800a130 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
}
 800a130:	4618      	mov	r0, r3
 800a132:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a136:	46bd      	mov	sp, r7
 800a138:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a13c:	58024400 	.word	0x58024400

0800a140 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a144:	f7fe fd96 	bl	8008c74 <HAL_RCC_GetHCLKFreq>
 800a148:	4602      	mov	r2, r0
 800a14a:	4b06      	ldr	r3, [pc, #24]	@ (800a164 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a14c:	6a1b      	ldr	r3, [r3, #32]
 800a14e:	091b      	lsrs	r3, r3, #4
 800a150:	f003 0307 	and.w	r3, r3, #7
 800a154:	4904      	ldr	r1, [pc, #16]	@ (800a168 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a156:	5ccb      	ldrb	r3, [r1, r3]
 800a158:	f003 031f 	and.w	r3, r3, #31
 800a15c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a160:	4618      	mov	r0, r3
 800a162:	bd80      	pop	{r7, pc}
 800a164:	58024400 	.word	0x58024400
 800a168:	0800f014 	.word	0x0800f014

0800a16c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b089      	sub	sp, #36	@ 0x24
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a174:	4ba1      	ldr	r3, [pc, #644]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a178:	f003 0303 	and.w	r3, r3, #3
 800a17c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a17e:	4b9f      	ldr	r3, [pc, #636]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a182:	0b1b      	lsrs	r3, r3, #12
 800a184:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a188:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a18a:	4b9c      	ldr	r3, [pc, #624]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a18c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a18e:	091b      	lsrs	r3, r3, #4
 800a190:	f003 0301 	and.w	r3, r3, #1
 800a194:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a196:	4b99      	ldr	r3, [pc, #612]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a198:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a19a:	08db      	lsrs	r3, r3, #3
 800a19c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	fb02 f303 	mul.w	r3, r2, r3
 800a1a6:	ee07 3a90 	vmov	s15, r3
 800a1aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a1ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 8111 	beq.w	800a3dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	f000 8083 	beq.w	800a2c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	f200 80a1 	bhi.w	800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d003      	beq.n	800a1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d056      	beq.n	800a284 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a1d6:	e099      	b.n	800a30c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a1d8:	4b88      	ldr	r3, [pc, #544]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f003 0320 	and.w	r3, r3, #32
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d02d      	beq.n	800a240 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1e4:	4b85      	ldr	r3, [pc, #532]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	08db      	lsrs	r3, r3, #3
 800a1ea:	f003 0303 	and.w	r3, r3, #3
 800a1ee:	4a84      	ldr	r2, [pc, #528]	@ (800a400 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a1f0:	fa22 f303 	lsr.w	r3, r2, r3
 800a1f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	ee07 3a90 	vmov	s15, r3
 800a1fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	ee07 3a90 	vmov	s15, r3
 800a206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a20a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a20e:	4b7b      	ldr	r3, [pc, #492]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a212:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a216:	ee07 3a90 	vmov	s15, r3
 800a21a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a21e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a222:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a226:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a22a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a22e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a232:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a23a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a23e:	e087      	b.n	800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	ee07 3a90 	vmov	s15, r3
 800a246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a24a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a408 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a24e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a252:	4b6a      	ldr	r3, [pc, #424]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25a:	ee07 3a90 	vmov	s15, r3
 800a25e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a262:	ed97 6a03 	vldr	s12, [r7, #12]
 800a266:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a26a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a26e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a272:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a276:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a27e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a282:	e065      	b.n	800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	ee07 3a90 	vmov	s15, r3
 800a28a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a28e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a292:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a296:	4b59      	ldr	r3, [pc, #356]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a29a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a29e:	ee07 3a90 	vmov	s15, r3
 800a2a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a2be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a2c6:	e043      	b.n	800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	ee07 3a90 	vmov	s15, r3
 800a2ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a410 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a2d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a2da:	4b48      	ldr	r3, [pc, #288]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a2dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a2e2:	ee07 3a90 	vmov	s15, r3
 800a2e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a2ea:	ed97 6a03 	vldr	s12, [r7, #12]
 800a2ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a2f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a2f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a2fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a2fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a302:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a306:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a30a:	e021      	b.n	800a350 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	ee07 3a90 	vmov	s15, r3
 800a312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a316:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a40c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a31a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a31e:	4b37      	ldr	r3, [pc, #220]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a326:	ee07 3a90 	vmov	s15, r3
 800a32a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a32e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a332:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a404 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a33a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a33e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a34a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a34e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a350:	4b2a      	ldr	r3, [pc, #168]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a354:	0a5b      	lsrs	r3, r3, #9
 800a356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a35a:	ee07 3a90 	vmov	s15, r3
 800a35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a362:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a36a:	edd7 6a07 	vldr	s13, [r7, #28]
 800a36e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a376:	ee17 2a90 	vmov	r2, s15
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a37e:	4b1f      	ldr	r3, [pc, #124]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a382:	0c1b      	lsrs	r3, r3, #16
 800a384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a388:	ee07 3a90 	vmov	s15, r3
 800a38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a390:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a394:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a398:	edd7 6a07 	vldr	s13, [r7, #28]
 800a39c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3a4:	ee17 2a90 	vmov	r2, s15
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a3ac:	4b13      	ldr	r3, [pc, #76]	@ (800a3fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a3ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3b0:	0e1b      	lsrs	r3, r3, #24
 800a3b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a3b6:	ee07 3a90 	vmov	s15, r3
 800a3ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a3c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a3c6:	edd7 6a07 	vldr	s13, [r7, #28]
 800a3ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a3ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a3d2:	ee17 2a90 	vmov	r2, s15
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a3da:	e008      	b.n	800a3ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	609a      	str	r2, [r3, #8]
}
 800a3ee:	bf00      	nop
 800a3f0:	3724      	adds	r7, #36	@ 0x24
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	58024400 	.word	0x58024400
 800a400:	03d09000 	.word	0x03d09000
 800a404:	46000000 	.word	0x46000000
 800a408:	4c742400 	.word	0x4c742400
 800a40c:	4a742400 	.word	0x4a742400
 800a410:	4af42400 	.word	0x4af42400

0800a414 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a414:	b480      	push	{r7}
 800a416:	b089      	sub	sp, #36	@ 0x24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a41c:	4ba1      	ldr	r3, [pc, #644]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a41e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a420:	f003 0303 	and.w	r3, r3, #3
 800a424:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800a426:	4b9f      	ldr	r3, [pc, #636]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a428:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a42a:	0d1b      	lsrs	r3, r3, #20
 800a42c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a430:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800a432:	4b9c      	ldr	r3, [pc, #624]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a436:	0a1b      	lsrs	r3, r3, #8
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800a43e:	4b99      	ldr	r3, [pc, #612]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a442:	08db      	lsrs	r3, r3, #3
 800a444:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a448:	693a      	ldr	r2, [r7, #16]
 800a44a:	fb02 f303 	mul.w	r3, r2, r3
 800a44e:	ee07 3a90 	vmov	s15, r3
 800a452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a456:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	f000 8111 	beq.w	800a684 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	2b02      	cmp	r3, #2
 800a466:	f000 8083 	beq.w	800a570 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	2b02      	cmp	r3, #2
 800a46e:	f200 80a1 	bhi.w	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d003      	beq.n	800a480 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d056      	beq.n	800a52c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800a47e:	e099      	b.n	800a5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a480:	4b88      	ldr	r3, [pc, #544]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 0320 	and.w	r3, r3, #32
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d02d      	beq.n	800a4e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a48c:	4b85      	ldr	r3, [pc, #532]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	08db      	lsrs	r3, r3, #3
 800a492:	f003 0303 	and.w	r3, r3, #3
 800a496:	4a84      	ldr	r2, [pc, #528]	@ (800a6a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800a498:	fa22 f303 	lsr.w	r3, r2, r3
 800a49c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	ee07 3a90 	vmov	s15, r3
 800a4a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	ee07 3a90 	vmov	s15, r3
 800a4ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4b6:	4b7b      	ldr	r3, [pc, #492]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4be:	ee07 3a90 	vmov	s15, r3
 800a4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a4ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a6ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a4ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a4da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a4e6:	e087      	b.n	800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a4e8:	697b      	ldr	r3, [r7, #20]
 800a4ea:	ee07 3a90 	vmov	s15, r3
 800a4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a6b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800a4f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4fa:	4b6a      	ldr	r3, [pc, #424]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a4fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a502:	ee07 3a90 	vmov	s15, r3
 800a506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a50a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a50e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a6ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a51a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a51e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a522:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a526:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a52a:	e065      	b.n	800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	ee07 3a90 	vmov	s15, r3
 800a532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a536:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a53a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a53e:	4b59      	ldr	r3, [pc, #356]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a546:	ee07 3a90 	vmov	s15, r3
 800a54a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a54e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a552:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a6ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a55a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a55e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a56a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a56e:	e043      	b.n	800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	ee07 3a90 	vmov	s15, r3
 800a576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a57a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a6b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800a57e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a582:	4b48      	ldr	r3, [pc, #288]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a58a:	ee07 3a90 	vmov	s15, r3
 800a58e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a592:	ed97 6a03 	vldr	s12, [r7, #12]
 800a596:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a6ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a59a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5b2:	e021      	b.n	800a5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	ee07 3a90 	vmov	s15, r3
 800a5ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a6b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a5c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5c6:	4b37      	ldr	r3, [pc, #220]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5ce:	ee07 3a90 	vmov	s15, r3
 800a5d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a5da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a6ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a5de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a5ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800a5f8:	4b2a      	ldr	r3, [pc, #168]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a5fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5fc:	0a5b      	lsrs	r3, r3, #9
 800a5fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a602:	ee07 3a90 	vmov	s15, r3
 800a606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a60a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a60e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a612:	edd7 6a07 	vldr	s13, [r7, #28]
 800a616:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a61a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a61e:	ee17 2a90 	vmov	r2, s15
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800a626:	4b1f      	ldr	r3, [pc, #124]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a62a:	0c1b      	lsrs	r3, r3, #16
 800a62c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a630:	ee07 3a90 	vmov	s15, r3
 800a634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a638:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a63c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a640:	edd7 6a07 	vldr	s13, [r7, #28]
 800a644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a64c:	ee17 2a90 	vmov	r2, s15
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800a654:	4b13      	ldr	r3, [pc, #76]	@ (800a6a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a658:	0e1b      	lsrs	r3, r3, #24
 800a65a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a65e:	ee07 3a90 	vmov	s15, r3
 800a662:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a666:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a66a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a66e:	edd7 6a07 	vldr	s13, [r7, #28]
 800a672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a676:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a67a:	ee17 2a90 	vmov	r2, s15
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a682:	e008      	b.n	800a696 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	609a      	str	r2, [r3, #8]
}
 800a696:	bf00      	nop
 800a698:	3724      	adds	r7, #36	@ 0x24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
 800a6a2:	bf00      	nop
 800a6a4:	58024400 	.word	0x58024400
 800a6a8:	03d09000 	.word	0x03d09000
 800a6ac:	46000000 	.word	0x46000000
 800a6b0:	4c742400 	.word	0x4c742400
 800a6b4:	4a742400 	.word	0x4a742400
 800a6b8:	4af42400 	.word	0x4af42400

0800a6bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a6ca:	4b53      	ldr	r3, [pc, #332]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ce:	f003 0303 	and.w	r3, r3, #3
 800a6d2:	2b03      	cmp	r3, #3
 800a6d4:	d101      	bne.n	800a6da <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	e099      	b.n	800a80e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a6da:	4b4f      	ldr	r3, [pc, #316]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a4e      	ldr	r2, [pc, #312]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a6e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a6e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a6e6:	f7f8 f937 	bl	8002958 <HAL_GetTick>
 800a6ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a6ec:	e008      	b.n	800a700 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a6ee:	f7f8 f933 	bl	8002958 <HAL_GetTick>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	1ad3      	subs	r3, r2, r3
 800a6f8:	2b02      	cmp	r3, #2
 800a6fa:	d901      	bls.n	800a700 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a6fc:	2303      	movs	r3, #3
 800a6fe:	e086      	b.n	800a80e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a700:	4b45      	ldr	r3, [pc, #276]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1f0      	bne.n	800a6ee <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a70c:	4b42      	ldr	r3, [pc, #264]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a70e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a710:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	031b      	lsls	r3, r3, #12
 800a71a:	493f      	ldr	r1, [pc, #252]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a71c:	4313      	orrs	r3, r2
 800a71e:	628b      	str	r3, [r1, #40]	@ 0x28
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	3b01      	subs	r3, #1
 800a726:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	3b01      	subs	r3, #1
 800a730:	025b      	lsls	r3, r3, #9
 800a732:	b29b      	uxth	r3, r3
 800a734:	431a      	orrs	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	3b01      	subs	r3, #1
 800a73c:	041b      	lsls	r3, r3, #16
 800a73e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a742:	431a      	orrs	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	3b01      	subs	r3, #1
 800a74a:	061b      	lsls	r3, r3, #24
 800a74c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a750:	4931      	ldr	r1, [pc, #196]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a752:	4313      	orrs	r3, r2
 800a754:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a756:	4b30      	ldr	r3, [pc, #192]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a75a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	695b      	ldr	r3, [r3, #20]
 800a762:	492d      	ldr	r1, [pc, #180]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a764:	4313      	orrs	r3, r2
 800a766:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a768:	4b2b      	ldr	r3, [pc, #172]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a76a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a76c:	f023 0220 	bic.w	r2, r3, #32
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	699b      	ldr	r3, [r3, #24]
 800a774:	4928      	ldr	r1, [pc, #160]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a776:	4313      	orrs	r3, r2
 800a778:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a77a:	4b27      	ldr	r3, [pc, #156]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a77c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a77e:	4a26      	ldr	r2, [pc, #152]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a780:	f023 0310 	bic.w	r3, r3, #16
 800a784:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a786:	4b24      	ldr	r3, [pc, #144]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a788:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a78a:	4b24      	ldr	r3, [pc, #144]	@ (800a81c <RCCEx_PLL2_Config+0x160>)
 800a78c:	4013      	ands	r3, r2
 800a78e:	687a      	ldr	r2, [r7, #4]
 800a790:	69d2      	ldr	r2, [r2, #28]
 800a792:	00d2      	lsls	r2, r2, #3
 800a794:	4920      	ldr	r1, [pc, #128]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a796:	4313      	orrs	r3, r2
 800a798:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a79a:	4b1f      	ldr	r3, [pc, #124]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a79c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a79e:	4a1e      	ldr	r2, [pc, #120]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a7a0:	f043 0310 	orr.w	r3, r3, #16
 800a7a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d106      	bne.n	800a7ba <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a7ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a7ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7b0:	4a19      	ldr	r2, [pc, #100]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a7b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a7b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a7b8:	e00f      	b.n	800a7da <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d106      	bne.n	800a7ce <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a7c0:	4b15      	ldr	r3, [pc, #84]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a7c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7c4:	4a14      	ldr	r2, [pc, #80]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a7c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a7cc:	e005      	b.n	800a7da <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a7ce:	4b12      	ldr	r3, [pc, #72]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a7d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7d2:	4a11      	ldr	r2, [pc, #68]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a7d4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a7d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a7da:	4b0f      	ldr	r3, [pc, #60]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a0e      	ldr	r2, [pc, #56]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a7e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a7e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7e6:	f7f8 f8b7 	bl	8002958 <HAL_GetTick>
 800a7ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a7ec:	e008      	b.n	800a800 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a7ee:	f7f8 f8b3 	bl	8002958 <HAL_GetTick>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d901      	bls.n	800a800 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e006      	b.n	800a80e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a800:	4b05      	ldr	r3, [pc, #20]	@ (800a818 <RCCEx_PLL2_Config+0x15c>)
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d0f0      	beq.n	800a7ee <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	58024400 	.word	0x58024400
 800a81c:	ffff0007 	.word	0xffff0007

0800a820 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b084      	sub	sp, #16
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a82a:	2300      	movs	r3, #0
 800a82c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a82e:	4b53      	ldr	r3, [pc, #332]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a832:	f003 0303 	and.w	r3, r3, #3
 800a836:	2b03      	cmp	r3, #3
 800a838:	d101      	bne.n	800a83e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e099      	b.n	800a972 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a83e:	4b4f      	ldr	r3, [pc, #316]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	4a4e      	ldr	r2, [pc, #312]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a84a:	f7f8 f885 	bl	8002958 <HAL_GetTick>
 800a84e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a850:	e008      	b.n	800a864 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a852:	f7f8 f881 	bl	8002958 <HAL_GetTick>
 800a856:	4602      	mov	r2, r0
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	1ad3      	subs	r3, r2, r3
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d901      	bls.n	800a864 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a860:	2303      	movs	r3, #3
 800a862:	e086      	b.n	800a972 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a864:	4b45      	ldr	r3, [pc, #276]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d1f0      	bne.n	800a852 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a870:	4b42      	ldr	r3, [pc, #264]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a874:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	051b      	lsls	r3, r3, #20
 800a87e:	493f      	ldr	r1, [pc, #252]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a880:	4313      	orrs	r3, r2
 800a882:	628b      	str	r3, [r1, #40]	@ 0x28
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	3b01      	subs	r3, #1
 800a88a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	689b      	ldr	r3, [r3, #8]
 800a892:	3b01      	subs	r3, #1
 800a894:	025b      	lsls	r3, r3, #9
 800a896:	b29b      	uxth	r3, r3
 800a898:	431a      	orrs	r2, r3
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68db      	ldr	r3, [r3, #12]
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	041b      	lsls	r3, r3, #16
 800a8a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800a8a6:	431a      	orrs	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	691b      	ldr	r3, [r3, #16]
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	061b      	lsls	r3, r3, #24
 800a8b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800a8b4:	4931      	ldr	r1, [pc, #196]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a8ba:	4b30      	ldr	r3, [pc, #192]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a8bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	695b      	ldr	r3, [r3, #20]
 800a8c6:	492d      	ldr	r1, [pc, #180]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a8cc:	4b2b      	ldr	r3, [pc, #172]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a8ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8d0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	4928      	ldr	r1, [pc, #160]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a8de:	4b27      	ldr	r3, [pc, #156]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8e2:	4a26      	ldr	r2, [pc, #152]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a8e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a8e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a8ea:	4b24      	ldr	r3, [pc, #144]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a8ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8ee:	4b24      	ldr	r3, [pc, #144]	@ (800a980 <RCCEx_PLL3_Config+0x160>)
 800a8f0:	4013      	ands	r3, r2
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	69d2      	ldr	r2, [r2, #28]
 800a8f6:	00d2      	lsls	r2, r2, #3
 800a8f8:	4920      	ldr	r1, [pc, #128]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a8fe:	4b1f      	ldr	r3, [pc, #124]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a902:	4a1e      	ldr	r2, [pc, #120]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a904:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a908:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d106      	bne.n	800a91e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a910:	4b1a      	ldr	r3, [pc, #104]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a914:	4a19      	ldr	r2, [pc, #100]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a916:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a91a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a91c:	e00f      	b.n	800a93e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d106      	bne.n	800a932 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a924:	4b15      	ldr	r3, [pc, #84]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a928:	4a14      	ldr	r2, [pc, #80]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a92a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a92e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800a930:	e005      	b.n	800a93e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a932:	4b12      	ldr	r3, [pc, #72]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a936:	4a11      	ldr	r2, [pc, #68]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a938:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a93c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a93e:	4b0f      	ldr	r3, [pc, #60]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a0e      	ldr	r2, [pc, #56]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a94a:	f7f8 f805 	bl	8002958 <HAL_GetTick>
 800a94e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a950:	e008      	b.n	800a964 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a952:	f7f8 f801 	bl	8002958 <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d901      	bls.n	800a964 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a960:	2303      	movs	r3, #3
 800a962:	e006      	b.n	800a972 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a964:	4b05      	ldr	r3, [pc, #20]	@ (800a97c <RCCEx_PLL3_Config+0x15c>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d0f0      	beq.n	800a952 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a970:	7bfb      	ldrb	r3, [r7, #15]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}
 800a97a:	bf00      	nop
 800a97c:	58024400 	.word	0x58024400
 800a980:	ffff0007 	.word	0xffff0007

0800a984 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b084      	sub	sp, #16
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d101      	bne.n	800a996 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a992:	2301      	movs	r3, #1
 800a994:	e10f      	b.n	800abb6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	4a87      	ldr	r2, [pc, #540]	@ (800abc0 <HAL_SPI_Init+0x23c>)
 800a9a2:	4293      	cmp	r3, r2
 800a9a4:	d00f      	beq.n	800a9c6 <HAL_SPI_Init+0x42>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	4a86      	ldr	r2, [pc, #536]	@ (800abc4 <HAL_SPI_Init+0x240>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d00a      	beq.n	800a9c6 <HAL_SPI_Init+0x42>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a84      	ldr	r2, [pc, #528]	@ (800abc8 <HAL_SPI_Init+0x244>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d005      	beq.n	800a9c6 <HAL_SPI_Init+0x42>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	2b0f      	cmp	r3, #15
 800a9c0:	d901      	bls.n	800a9c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e0f7      	b.n	800abb6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 fdd6 	bl	800b578 <SPI_GetPacketSize>
 800a9cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a7b      	ldr	r2, [pc, #492]	@ (800abc0 <HAL_SPI_Init+0x23c>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d00c      	beq.n	800a9f2 <HAL_SPI_Init+0x6e>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a79      	ldr	r2, [pc, #484]	@ (800abc4 <HAL_SPI_Init+0x240>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d007      	beq.n	800a9f2 <HAL_SPI_Init+0x6e>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a78      	ldr	r2, [pc, #480]	@ (800abc8 <HAL_SPI_Init+0x244>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d002      	beq.n	800a9f2 <HAL_SPI_Init+0x6e>
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2b08      	cmp	r3, #8
 800a9f0:	d811      	bhi.n	800aa16 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a9f6:	4a72      	ldr	r2, [pc, #456]	@ (800abc0 <HAL_SPI_Init+0x23c>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d009      	beq.n	800aa10 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a70      	ldr	r2, [pc, #448]	@ (800abc4 <HAL_SPI_Init+0x240>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d004      	beq.n	800aa10 <HAL_SPI_Init+0x8c>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a6f      	ldr	r2, [pc, #444]	@ (800abc8 <HAL_SPI_Init+0x244>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d104      	bne.n	800aa1a <HAL_SPI_Init+0x96>
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	2b10      	cmp	r3, #16
 800aa14:	d901      	bls.n	800aa1a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	e0cd      	b.n	800abb6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d106      	bne.n	800aa34 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2200      	movs	r2, #0
 800aa2a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f7f7 fa18 	bl	8001e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2202      	movs	r2, #2
 800aa38:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	681a      	ldr	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f022 0201 	bic.w	r2, r2, #1
 800aa4a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800aa56:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	699b      	ldr	r3, [r3, #24]
 800aa5c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800aa60:	d119      	bne.n	800aa96 <HAL_SPI_Init+0x112>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800aa6a:	d103      	bne.n	800aa74 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d008      	beq.n	800aa86 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d10c      	bne.n	800aa96 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa84:	d107      	bne.n	800aa96 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aa94:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d00f      	beq.n	800aac2 <HAL_SPI_Init+0x13e>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	68db      	ldr	r3, [r3, #12]
 800aaa6:	2b06      	cmp	r3, #6
 800aaa8:	d90b      	bls.n	800aac2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	430a      	orrs	r2, r1
 800aabe:	601a      	str	r2, [r3, #0]
 800aac0:	e007      	b.n	800aad2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aad0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	69da      	ldr	r2, [r3, #28]
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aada:	431a      	orrs	r2, r3
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	431a      	orrs	r2, r3
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aae4:	ea42 0103 	orr.w	r1, r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	68da      	ldr	r2, [r3, #12]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	430a      	orrs	r2, r1
 800aaf2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aafc:	431a      	orrs	r2, r3
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab02:	431a      	orrs	r2, r3
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	699b      	ldr	r3, [r3, #24]
 800ab08:	431a      	orrs	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	691b      	ldr	r3, [r3, #16]
 800ab0e:	431a      	orrs	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	431a      	orrs	r2, r3
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a1b      	ldr	r3, [r3, #32]
 800ab1a:	431a      	orrs	r2, r3
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	685b      	ldr	r3, [r3, #4]
 800ab20:	431a      	orrs	r2, r3
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab26:	431a      	orrs	r2, r3
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab32:	ea42 0103 	orr.w	r1, r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	430a      	orrs	r2, r1
 800ab40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	685b      	ldr	r3, [r3, #4]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d113      	bne.n	800ab72 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab5c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ab70:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f022 0201 	bic.w	r2, r2, #1
 800ab80:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00a      	beq.n	800aba4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	430a      	orrs	r2, r1
 800aba2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	40013000 	.word	0x40013000
 800abc4:	40003800 	.word	0x40003800
 800abc8:	40003c00 	.word	0x40003c00

0800abcc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b088      	sub	sp, #32
 800abd0:	af02      	add	r7, sp, #8
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	603b      	str	r3, [r7, #0]
 800abd8:	4613      	mov	r3, r2
 800abda:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3320      	adds	r3, #32
 800abe2:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800abe4:	f7f7 feb8 	bl	8002958 <HAL_GetTick>
 800abe8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d001      	beq.n	800abfa <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800abf6:	2302      	movs	r3, #2
 800abf8:	e1d1      	b.n	800af9e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d002      	beq.n	800ac06 <HAL_SPI_Transmit+0x3a>
 800ac00:	88fb      	ldrh	r3, [r7, #6]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d101      	bne.n	800ac0a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800ac06:	2301      	movs	r3, #1
 800ac08:	e1c9      	b.n	800af9e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d101      	bne.n	800ac18 <HAL_SPI_Transmit+0x4c>
 800ac14:	2302      	movs	r3, #2
 800ac16:	e1c2      	b.n	800af9e <HAL_SPI_Transmit+0x3d2>
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2203      	movs	r2, #3
 800ac24:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	88fa      	ldrh	r2, [r7, #6]
 800ac3a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	88fa      	ldrh	r2, [r7, #6]
 800ac42:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2200      	movs	r2, #0
 800ac66:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800ac70:	d108      	bne.n	800ac84 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac80:	601a      	str	r2, [r3, #0]
 800ac82:	e009      	b.n	800ac98 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	68db      	ldr	r3, [r3, #12]
 800ac8a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800ac96:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	685a      	ldr	r2, [r3, #4]
 800ac9e:	4b96      	ldr	r3, [pc, #600]	@ (800aef8 <HAL_SPI_Transmit+0x32c>)
 800aca0:	4013      	ands	r3, r2
 800aca2:	88f9      	ldrh	r1, [r7, #6]
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	6812      	ldr	r2, [r2, #0]
 800aca8:	430b      	orrs	r3, r1
 800acaa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f042 0201 	orr.w	r2, r2, #1
 800acba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800acc4:	d107      	bne.n	800acd6 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681a      	ldr	r2, [r3, #0]
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800acd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	2b0f      	cmp	r3, #15
 800acdc:	d947      	bls.n	800ad6e <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800acde:	e03f      	b.n	800ad60 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	695b      	ldr	r3, [r3, #20]
 800ace6:	f003 0302 	and.w	r3, r3, #2
 800acea:	2b02      	cmp	r3, #2
 800acec:	d114      	bne.n	800ad18 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6812      	ldr	r2, [r2, #0]
 800acf8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acfe:	1d1a      	adds	r2, r3, #4
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ad16:	e023      	b.n	800ad60 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ad18:	f7f7 fe1e 	bl	8002958 <HAL_GetTick>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	1ad3      	subs	r3, r2, r3
 800ad22:	683a      	ldr	r2, [r7, #0]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d803      	bhi.n	800ad30 <HAL_SPI_Transmit+0x164>
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad2e:	d102      	bne.n	800ad36 <HAL_SPI_Transmit+0x16a>
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d114      	bne.n	800ad60 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f000 fb50 	bl	800b3dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ad42:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2201      	movs	r2, #1
 800ad50:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ad5c:	2303      	movs	r3, #3
 800ad5e:	e11e      	b.n	800af9e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ad66:	b29b      	uxth	r3, r3
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d1b9      	bne.n	800ace0 <HAL_SPI_Transmit+0x114>
 800ad6c:	e0f1      	b.n	800af52 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	68db      	ldr	r3, [r3, #12]
 800ad72:	2b07      	cmp	r3, #7
 800ad74:	f240 80e6 	bls.w	800af44 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ad78:	e05d      	b.n	800ae36 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	695b      	ldr	r3, [r3, #20]
 800ad80:	f003 0302 	and.w	r3, r3, #2
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d132      	bne.n	800adee <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	2b01      	cmp	r3, #1
 800ad92:	d918      	bls.n	800adc6 <HAL_SPI_Transmit+0x1fa>
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d014      	beq.n	800adc6 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	6812      	ldr	r2, [r2, #0]
 800ada6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adac:	1d1a      	adds	r2, r3, #4
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800adb8:	b29b      	uxth	r3, r3
 800adba:	3b02      	subs	r3, #2
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800adc4:	e037      	b.n	800ae36 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adca:	881a      	ldrh	r2, [r3, #0]
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800add4:	1c9a      	adds	r2, r3, #2
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	3b01      	subs	r3, #1
 800ade4:	b29a      	uxth	r2, r3
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800adec:	e023      	b.n	800ae36 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800adee:	f7f7 fdb3 	bl	8002958 <HAL_GetTick>
 800adf2:	4602      	mov	r2, r0
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	683a      	ldr	r2, [r7, #0]
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d803      	bhi.n	800ae06 <HAL_SPI_Transmit+0x23a>
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae04:	d102      	bne.n	800ae0c <HAL_SPI_Transmit+0x240>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d114      	bne.n	800ae36 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ae0c:	68f8      	ldr	r0, [r7, #12]
 800ae0e:	f000 fae5 	bl	800b3dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ae18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2201      	movs	r2, #1
 800ae26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	e0b3      	b.n	800af9e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d19b      	bne.n	800ad7a <HAL_SPI_Transmit+0x1ae>
 800ae42:	e086      	b.n	800af52 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d154      	bne.n	800aefc <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	2b03      	cmp	r3, #3
 800ae5c:	d918      	bls.n	800ae90 <HAL_SPI_Transmit+0x2c4>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae62:	2b40      	cmp	r3, #64	@ 0x40
 800ae64:	d914      	bls.n	800ae90 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	6812      	ldr	r2, [r2, #0]
 800ae70:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae76:	1d1a      	adds	r2, r3, #4
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	3b04      	subs	r3, #4
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800ae8e:	e059      	b.n	800af44 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d917      	bls.n	800aecc <HAL_SPI_Transmit+0x300>
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d013      	beq.n	800aecc <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aea8:	881a      	ldrh	r2, [r3, #0]
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aeb2:	1c9a      	adds	r2, r3, #2
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	3b02      	subs	r3, #2
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aeca:	e03b      	b.n	800af44 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3320      	adds	r3, #32
 800aed6:	7812      	ldrb	r2, [r2, #0]
 800aed8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aede:	1c5a      	adds	r2, r3, #1
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	3b01      	subs	r3, #1
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800aef6:	e025      	b.n	800af44 <HAL_SPI_Transmit+0x378>
 800aef8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aefc:	f7f7 fd2c 	bl	8002958 <HAL_GetTick>
 800af00:	4602      	mov	r2, r0
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	1ad3      	subs	r3, r2, r3
 800af06:	683a      	ldr	r2, [r7, #0]
 800af08:	429a      	cmp	r2, r3
 800af0a:	d803      	bhi.n	800af14 <HAL_SPI_Transmit+0x348>
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af12:	d102      	bne.n	800af1a <HAL_SPI_Transmit+0x34e>
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d114      	bne.n	800af44 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800af1a:	68f8      	ldr	r0, [r7, #12]
 800af1c:	f000 fa5e 	bl	800b3dc <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af26:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2201      	movs	r2, #1
 800af34:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	2200      	movs	r2, #0
 800af3c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800af40:	2303      	movs	r3, #3
 800af42:	e02c      	b.n	800af9e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	f47f af79 	bne.w	800ae44 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2200      	movs	r2, #0
 800af5a:	2108      	movs	r1, #8
 800af5c:	68f8      	ldr	r0, [r7, #12]
 800af5e:	f000 fadd 	bl	800b51c <SPI_WaitOnFlagUntilTimeout>
 800af62:	4603      	mov	r3, r0
 800af64:	2b00      	cmp	r3, #0
 800af66:	d007      	beq.n	800af78 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af6e:	f043 0220 	orr.w	r2, r3, #32
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f000 fa2f 	bl	800b3dc <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2201      	movs	r2, #1
 800af82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2200      	movs	r2, #0
 800af8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af94:	2b00      	cmp	r3, #0
 800af96:	d001      	beq.n	800af9c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800af98:	2301      	movs	r3, #1
 800af9a:	e000      	b.n	800af9e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800af9c:	2300      	movs	r3, #0
  }
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3718      	adds	r7, #24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop

0800afa8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b08a      	sub	sp, #40	@ 0x28
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	695b      	ldr	r3, [r3, #20]
 800afbe:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800afc0:	6a3a      	ldr	r2, [r7, #32]
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	4013      	ands	r3, r2
 800afc6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	689b      	ldr	r3, [r3, #8]
 800afce:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800afd0:	2300      	movs	r3, #0
 800afd2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800afda:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	3330      	adds	r3, #48	@ 0x30
 800afe2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800afe4:	69fb      	ldr	r3, [r7, #28]
 800afe6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800afea:	2b00      	cmp	r3, #0
 800afec:	d010      	beq.n	800b010 <HAL_SPI_IRQHandler+0x68>
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	f003 0308 	and.w	r3, r3, #8
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00b      	beq.n	800b010 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	699a      	ldr	r2, [r3, #24]
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b006:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 f9c3 	bl	800b394 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800b00e:	e192      	b.n	800b336 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b016:	2b00      	cmp	r3, #0
 800b018:	d113      	bne.n	800b042 <HAL_SPI_IRQHandler+0x9a>
 800b01a:	69bb      	ldr	r3, [r7, #24]
 800b01c:	f003 0320 	and.w	r3, r3, #32
 800b020:	2b00      	cmp	r3, #0
 800b022:	d10e      	bne.n	800b042 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d009      	beq.n	800b042 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	4798      	blx	r3
    handled = 1UL;
 800b03e:	2301      	movs	r3, #1
 800b040:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10f      	bne.n	800b06c <HAL_SPI_IRQHandler+0xc4>
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	f003 0301 	and.w	r3, r3, #1
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00a      	beq.n	800b06c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d105      	bne.n	800b06c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	4798      	blx	r3
    handled = 1UL;
 800b068:	2301      	movs	r3, #1
 800b06a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	f003 0320 	and.w	r3, r3, #32
 800b072:	2b00      	cmp	r3, #0
 800b074:	d10f      	bne.n	800b096 <HAL_SPI_IRQHandler+0xee>
 800b076:	69bb      	ldr	r3, [r7, #24]
 800b078:	f003 0302 	and.w	r3, r3, #2
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00a      	beq.n	800b096 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800b080:	69bb      	ldr	r3, [r7, #24]
 800b082:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b086:	2b00      	cmp	r3, #0
 800b088:	d105      	bne.n	800b096 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	4798      	blx	r3
    handled = 1UL;
 800b092:	2301      	movs	r3, #1
 800b094:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800b096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f040 8147 	bne.w	800b32c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	f003 0308 	and.w	r3, r3, #8
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 808b 	beq.w	800b1c0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	699a      	ldr	r2, [r3, #24]
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	f042 0208 	orr.w	r2, r2, #8
 800b0b8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	699a      	ldr	r2, [r3, #24]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f042 0210 	orr.w	r2, r2, #16
 800b0c8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	699a      	ldr	r2, [r3, #24]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b0d8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	691a      	ldr	r2, [r3, #16]
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f022 0208 	bic.w	r2, r2, #8
 800b0e8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d13d      	bne.n	800b174 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800b0f8:	e036      	b.n	800b168 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	2b0f      	cmp	r3, #15
 800b100:	d90b      	bls.n	800b11a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681a      	ldr	r2, [r3, #0]
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b10a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800b10c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b112:	1d1a      	adds	r2, r3, #4
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	665a      	str	r2, [r3, #100]	@ 0x64
 800b118:	e01d      	b.n	800b156 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	2b07      	cmp	r3, #7
 800b120:	d90b      	bls.n	800b13a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	8812      	ldrh	r2, [r2, #0]
 800b12a:	b292      	uxth	r2, r2
 800b12c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b132:	1c9a      	adds	r2, r3, #2
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	665a      	str	r2, [r3, #100]	@ 0x64
 800b138:	e00d      	b.n	800b156 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b146:	7812      	ldrb	r2, [r2, #0]
 800b148:	b2d2      	uxtb	r2, r2
 800b14a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b150:	1c5a      	adds	r2, r3, #1
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b15c:	b29b      	uxth	r3, r3
 800b15e:	3b01      	subs	r3, #1
 800b160:	b29a      	uxth	r2, r3
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800b16e:	b29b      	uxth	r3, r3
 800b170:	2b00      	cmp	r3, #0
 800b172:	d1c2      	bne.n	800b0fa <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f000 f931 	bl	800b3dc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2201      	movs	r2, #1
 800b17e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d003      	beq.n	800b194 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 f8f7 	bl	800b380 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b192:	e0d0      	b.n	800b336 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b194:	7cfb      	ldrb	r3, [r7, #19]
 800b196:	2b05      	cmp	r3, #5
 800b198:	d103      	bne.n	800b1a2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f8e6 	bl	800b36c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800b1a0:	e0c6      	b.n	800b330 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b1a2:	7cfb      	ldrb	r3, [r7, #19]
 800b1a4:	2b04      	cmp	r3, #4
 800b1a6:	d103      	bne.n	800b1b0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 f8d5 	bl	800b358 <HAL_SPI_RxCpltCallback>
    return;
 800b1ae:	e0bf      	b.n	800b330 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b1b0:	7cfb      	ldrb	r3, [r7, #19]
 800b1b2:	2b03      	cmp	r3, #3
 800b1b4:	f040 80bc 	bne.w	800b330 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800b1b8:	6878      	ldr	r0, [r7, #4]
 800b1ba:	f000 f8c3 	bl	800b344 <HAL_SPI_TxCpltCallback>
    return;
 800b1be:	e0b7      	b.n	800b330 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b1c0:	69bb      	ldr	r3, [r7, #24]
 800b1c2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f000 80b5 	beq.w	800b336 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b1cc:	69bb      	ldr	r3, [r7, #24]
 800b1ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00f      	beq.n	800b1f6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b1dc:	f043 0204 	orr.w	r2, r3, #4
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	699a      	ldr	r2, [r3, #24]
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1f4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00f      	beq.n	800b220 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b206:	f043 0201 	orr.w	r2, r3, #1
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	699a      	ldr	r2, [r3, #24]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b21e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00f      	beq.n	800b24a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b230:	f043 0208 	orr.w	r2, r3, #8
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	699a      	ldr	r2, [r3, #24]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b248:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	f003 0320 	and.w	r3, r3, #32
 800b250:	2b00      	cmp	r3, #0
 800b252:	d00f      	beq.n	800b274 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b25a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	699a      	ldr	r2, [r3, #24]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f042 0220 	orr.w	r2, r2, #32
 800b272:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d05a      	beq.n	800b334 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f022 0201 	bic.w	r2, r2, #1
 800b28c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	6919      	ldr	r1, [r3, #16]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	4b28      	ldr	r3, [pc, #160]	@ (800b33c <HAL_SPI_IRQHandler+0x394>)
 800b29a:	400b      	ands	r3, r1
 800b29c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b2a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b2a8:	d138      	bne.n	800b31c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	689a      	ldr	r2, [r3, #8]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b2b8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d013      	beq.n	800b2ea <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2c6:	4a1e      	ldr	r2, [pc, #120]	@ (800b340 <HAL_SPI_IRQHandler+0x398>)
 800b2c8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f7f8 fd14 	bl	8003cfc <HAL_DMA_Abort_IT>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d007      	beq.n	800b2ea <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b2e0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d020      	beq.n	800b334 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2f6:	4a12      	ldr	r2, [pc, #72]	@ (800b340 <HAL_SPI_IRQHandler+0x398>)
 800b2f8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800b2fe:	4618      	mov	r0, r3
 800b300:	f7f8 fcfc 	bl	8003cfc <HAL_DMA_Abort_IT>
 800b304:	4603      	mov	r3, r0
 800b306:	2b00      	cmp	r3, #0
 800b308:	d014      	beq.n	800b334 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b310:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b31a:	e00b      	b.n	800b334 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2201      	movs	r2, #1
 800b320:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 f82b 	bl	800b380 <HAL_SPI_ErrorCallback>
    return;
 800b32a:	e003      	b.n	800b334 <HAL_SPI_IRQHandler+0x38c>
    return;
 800b32c:	bf00      	nop
 800b32e:	e002      	b.n	800b336 <HAL_SPI_IRQHandler+0x38e>
    return;
 800b330:	bf00      	nop
 800b332:	e000      	b.n	800b336 <HAL_SPI_IRQHandler+0x38e>
    return;
 800b334:	bf00      	nop
  }
}
 800b336:	3728      	adds	r7, #40	@ 0x28
 800b338:	46bd      	mov	sp, r7
 800b33a:	bd80      	pop	{r7, pc}
 800b33c:	fffffc94 	.word	0xfffffc94
 800b340:	0800b3a9 	.word	0x0800b3a9

0800b344 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800b34c:	bf00      	nop
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800b360:	bf00      	nop
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr

0800b36c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800b39c:	bf00      	nop
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3b4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f7ff ffd6 	bl	800b380 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b3d4:	bf00      	nop
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b085      	sub	sp, #20
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	695b      	ldr	r3, [r3, #20]
 800b3ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	699a      	ldr	r2, [r3, #24]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f042 0208 	orr.w	r2, r2, #8
 800b3fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	699a      	ldr	r2, [r3, #24]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f042 0210 	orr.w	r2, r2, #16
 800b40a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f022 0201 	bic.w	r2, r2, #1
 800b41a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	6919      	ldr	r1, [r3, #16]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	4b3c      	ldr	r3, [pc, #240]	@ (800b518 <SPI_CloseTransfer+0x13c>)
 800b428:	400b      	ands	r3, r1
 800b42a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	689a      	ldr	r2, [r3, #8]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800b43a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b442:	b2db      	uxtb	r3, r3
 800b444:	2b04      	cmp	r3, #4
 800b446:	d014      	beq.n	800b472 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f003 0320 	and.w	r3, r3, #32
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00f      	beq.n	800b472 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b458:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	699a      	ldr	r2, [r3, #24]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f042 0220 	orr.w	r2, r2, #32
 800b470:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800b478:	b2db      	uxtb	r3, r3
 800b47a:	2b03      	cmp	r3, #3
 800b47c:	d014      	beq.n	800b4a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00f      	beq.n	800b4a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b48e:	f043 0204 	orr.w	r2, r3, #4
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	699a      	ldr	r2, [r3, #24]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b4a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00f      	beq.n	800b4d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4b8:	f043 0201 	orr.w	r2, r3, #1
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	699a      	ldr	r2, [r3, #24]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b4d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d00f      	beq.n	800b4fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b4e2:	f043 0208 	orr.w	r2, r3, #8
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	699a      	ldr	r2, [r3, #24]
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b4fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2200      	movs	r2, #0
 800b500:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2200      	movs	r2, #0
 800b508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800b50c:	bf00      	nop
 800b50e:	3714      	adds	r7, #20
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr
 800b518:	fffffc90 	.word	0xfffffc90

0800b51c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	603b      	str	r3, [r7, #0]
 800b528:	4613      	mov	r3, r2
 800b52a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b52c:	e010      	b.n	800b550 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b52e:	f7f7 fa13 	bl	8002958 <HAL_GetTick>
 800b532:	4602      	mov	r2, r0
 800b534:	69bb      	ldr	r3, [r7, #24]
 800b536:	1ad3      	subs	r3, r2, r3
 800b538:	683a      	ldr	r2, [r7, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d803      	bhi.n	800b546 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b544:	d102      	bne.n	800b54c <SPI_WaitOnFlagUntilTimeout+0x30>
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d101      	bne.n	800b550 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800b54c:	2303      	movs	r3, #3
 800b54e:	e00f      	b.n	800b570 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	695a      	ldr	r2, [r3, #20]
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	4013      	ands	r3, r2
 800b55a:	68ba      	ldr	r2, [r7, #8]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	bf0c      	ite	eq
 800b560:	2301      	moveq	r3, #1
 800b562:	2300      	movne	r3, #0
 800b564:	b2db      	uxtb	r3, r3
 800b566:	461a      	mov	r2, r3
 800b568:	79fb      	ldrb	r3, [r7, #7]
 800b56a:	429a      	cmp	r2, r3
 800b56c:	d0df      	beq.n	800b52e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800b56e:	2300      	movs	r3, #0
}
 800b570:	4618      	mov	r0, r3
 800b572:	3710      	adds	r7, #16
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b584:	095b      	lsrs	r3, r3, #5
 800b586:	3301      	adds	r3, #1
 800b588:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	3301      	adds	r3, #1
 800b590:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	3307      	adds	r3, #7
 800b596:	08db      	lsrs	r3, r3, #3
 800b598:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	fb02 f303 	mul.w	r3, r2, r3
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3714      	adds	r7, #20
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ac:	4770      	bx	lr

0800b5ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b5ae:	b580      	push	{r7, lr}
 800b5b0:	b082      	sub	sp, #8
 800b5b2:	af00      	add	r7, sp, #0
 800b5b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e049      	b.n	800b654 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d106      	bne.n	800b5da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7f6 ff1d 	bl	8002414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2202      	movs	r2, #2
 800b5de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	3304      	adds	r3, #4
 800b5ea:	4619      	mov	r1, r3
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	f000 fd2d 	bl	800c04c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2201      	movs	r2, #1
 800b5fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2201      	movs	r2, #1
 800b606:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2201      	movs	r2, #1
 800b626:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2201      	movs	r2, #1
 800b64e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b652:	2300      	movs	r3, #0
}
 800b654:	4618      	mov	r0, r3
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b082      	sub	sp, #8
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d101      	bne.n	800b66e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e049      	b.n	800b702 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b674:	b2db      	uxtb	r3, r3
 800b676:	2b00      	cmp	r3, #0
 800b678:	d106      	bne.n	800b688 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 f841 	bl	800b70a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2202      	movs	r2, #2
 800b68c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681a      	ldr	r2, [r3, #0]
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	3304      	adds	r3, #4
 800b698:	4619      	mov	r1, r3
 800b69a:	4610      	mov	r0, r2
 800b69c:	f000 fcd6 	bl	800c04c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2201      	movs	r2, #1
 800b6bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b70a:	b480      	push	{r7}
 800b70c:	b083      	sub	sp, #12
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b712:	bf00      	nop
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
	...

0800b720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b084      	sub	sp, #16
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d109      	bne.n	800b744 <HAL_TIM_PWM_Start+0x24>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b736:	b2db      	uxtb	r3, r3
 800b738:	2b01      	cmp	r3, #1
 800b73a:	bf14      	ite	ne
 800b73c:	2301      	movne	r3, #1
 800b73e:	2300      	moveq	r3, #0
 800b740:	b2db      	uxtb	r3, r3
 800b742:	e03c      	b.n	800b7be <HAL_TIM_PWM_Start+0x9e>
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	2b04      	cmp	r3, #4
 800b748:	d109      	bne.n	800b75e <HAL_TIM_PWM_Start+0x3e>
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b750:	b2db      	uxtb	r3, r3
 800b752:	2b01      	cmp	r3, #1
 800b754:	bf14      	ite	ne
 800b756:	2301      	movne	r3, #1
 800b758:	2300      	moveq	r3, #0
 800b75a:	b2db      	uxtb	r3, r3
 800b75c:	e02f      	b.n	800b7be <HAL_TIM_PWM_Start+0x9e>
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	2b08      	cmp	r3, #8
 800b762:	d109      	bne.n	800b778 <HAL_TIM_PWM_Start+0x58>
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b76a:	b2db      	uxtb	r3, r3
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	bf14      	ite	ne
 800b770:	2301      	movne	r3, #1
 800b772:	2300      	moveq	r3, #0
 800b774:	b2db      	uxtb	r3, r3
 800b776:	e022      	b.n	800b7be <HAL_TIM_PWM_Start+0x9e>
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	2b0c      	cmp	r3, #12
 800b77c:	d109      	bne.n	800b792 <HAL_TIM_PWM_Start+0x72>
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b784:	b2db      	uxtb	r3, r3
 800b786:	2b01      	cmp	r3, #1
 800b788:	bf14      	ite	ne
 800b78a:	2301      	movne	r3, #1
 800b78c:	2300      	moveq	r3, #0
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	e015      	b.n	800b7be <HAL_TIM_PWM_Start+0x9e>
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b10      	cmp	r3, #16
 800b796:	d109      	bne.n	800b7ac <HAL_TIM_PWM_Start+0x8c>
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b79e:	b2db      	uxtb	r3, r3
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	bf14      	ite	ne
 800b7a4:	2301      	movne	r3, #1
 800b7a6:	2300      	moveq	r3, #0
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	e008      	b.n	800b7be <HAL_TIM_PWM_Start+0x9e>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b7b2:	b2db      	uxtb	r3, r3
 800b7b4:	2b01      	cmp	r3, #1
 800b7b6:	bf14      	ite	ne
 800b7b8:	2301      	movne	r3, #1
 800b7ba:	2300      	moveq	r3, #0
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e0a1      	b.n	800b90a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d104      	bne.n	800b7d6 <HAL_TIM_PWM_Start+0xb6>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2202      	movs	r2, #2
 800b7d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b7d4:	e023      	b.n	800b81e <HAL_TIM_PWM_Start+0xfe>
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	2b04      	cmp	r3, #4
 800b7da:	d104      	bne.n	800b7e6 <HAL_TIM_PWM_Start+0xc6>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2202      	movs	r2, #2
 800b7e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b7e4:	e01b      	b.n	800b81e <HAL_TIM_PWM_Start+0xfe>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	2b08      	cmp	r3, #8
 800b7ea:	d104      	bne.n	800b7f6 <HAL_TIM_PWM_Start+0xd6>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7f4:	e013      	b.n	800b81e <HAL_TIM_PWM_Start+0xfe>
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	2b0c      	cmp	r3, #12
 800b7fa:	d104      	bne.n	800b806 <HAL_TIM_PWM_Start+0xe6>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2202      	movs	r2, #2
 800b800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b804:	e00b      	b.n	800b81e <HAL_TIM_PWM_Start+0xfe>
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	2b10      	cmp	r3, #16
 800b80a:	d104      	bne.n	800b816 <HAL_TIM_PWM_Start+0xf6>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2202      	movs	r2, #2
 800b810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b814:	e003      	b.n	800b81e <HAL_TIM_PWM_Start+0xfe>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2202      	movs	r2, #2
 800b81a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2201      	movs	r2, #1
 800b824:	6839      	ldr	r1, [r7, #0]
 800b826:	4618      	mov	r0, r3
 800b828:	f001 f90e 	bl	800ca48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a38      	ldr	r2, [pc, #224]	@ (800b914 <HAL_TIM_PWM_Start+0x1f4>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d013      	beq.n	800b85e <HAL_TIM_PWM_Start+0x13e>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	4a37      	ldr	r2, [pc, #220]	@ (800b918 <HAL_TIM_PWM_Start+0x1f8>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d00e      	beq.n	800b85e <HAL_TIM_PWM_Start+0x13e>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a35      	ldr	r2, [pc, #212]	@ (800b91c <HAL_TIM_PWM_Start+0x1fc>)
 800b846:	4293      	cmp	r3, r2
 800b848:	d009      	beq.n	800b85e <HAL_TIM_PWM_Start+0x13e>
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	4a34      	ldr	r2, [pc, #208]	@ (800b920 <HAL_TIM_PWM_Start+0x200>)
 800b850:	4293      	cmp	r3, r2
 800b852:	d004      	beq.n	800b85e <HAL_TIM_PWM_Start+0x13e>
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	4a32      	ldr	r2, [pc, #200]	@ (800b924 <HAL_TIM_PWM_Start+0x204>)
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d101      	bne.n	800b862 <HAL_TIM_PWM_Start+0x142>
 800b85e:	2301      	movs	r3, #1
 800b860:	e000      	b.n	800b864 <HAL_TIM_PWM_Start+0x144>
 800b862:	2300      	movs	r3, #0
 800b864:	2b00      	cmp	r3, #0
 800b866:	d007      	beq.n	800b878 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b876:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	4a25      	ldr	r2, [pc, #148]	@ (800b914 <HAL_TIM_PWM_Start+0x1f4>)
 800b87e:	4293      	cmp	r3, r2
 800b880:	d022      	beq.n	800b8c8 <HAL_TIM_PWM_Start+0x1a8>
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b88a:	d01d      	beq.n	800b8c8 <HAL_TIM_PWM_Start+0x1a8>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a25      	ldr	r2, [pc, #148]	@ (800b928 <HAL_TIM_PWM_Start+0x208>)
 800b892:	4293      	cmp	r3, r2
 800b894:	d018      	beq.n	800b8c8 <HAL_TIM_PWM_Start+0x1a8>
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4a24      	ldr	r2, [pc, #144]	@ (800b92c <HAL_TIM_PWM_Start+0x20c>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d013      	beq.n	800b8c8 <HAL_TIM_PWM_Start+0x1a8>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a22      	ldr	r2, [pc, #136]	@ (800b930 <HAL_TIM_PWM_Start+0x210>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d00e      	beq.n	800b8c8 <HAL_TIM_PWM_Start+0x1a8>
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	4a1a      	ldr	r2, [pc, #104]	@ (800b918 <HAL_TIM_PWM_Start+0x1f8>)
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d009      	beq.n	800b8c8 <HAL_TIM_PWM_Start+0x1a8>
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	4a1e      	ldr	r2, [pc, #120]	@ (800b934 <HAL_TIM_PWM_Start+0x214>)
 800b8ba:	4293      	cmp	r3, r2
 800b8bc:	d004      	beq.n	800b8c8 <HAL_TIM_PWM_Start+0x1a8>
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4a16      	ldr	r2, [pc, #88]	@ (800b91c <HAL_TIM_PWM_Start+0x1fc>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d115      	bne.n	800b8f4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	689a      	ldr	r2, [r3, #8]
 800b8ce:	4b1a      	ldr	r3, [pc, #104]	@ (800b938 <HAL_TIM_PWM_Start+0x218>)
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2b06      	cmp	r3, #6
 800b8d8:	d015      	beq.n	800b906 <HAL_TIM_PWM_Start+0x1e6>
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8e0:	d011      	beq.n	800b906 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f042 0201 	orr.w	r2, r2, #1
 800b8f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8f2:	e008      	b.n	800b906 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f042 0201 	orr.w	r2, r2, #1
 800b902:	601a      	str	r2, [r3, #0]
 800b904:	e000      	b.n	800b908 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b906:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3710      	adds	r7, #16
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	40010000 	.word	0x40010000
 800b918:	40010400 	.word	0x40010400
 800b91c:	40014000 	.word	0x40014000
 800b920:	40014400 	.word	0x40014400
 800b924:	40014800 	.word	0x40014800
 800b928:	40000400 	.word	0x40000400
 800b92c:	40000800 	.word	0x40000800
 800b930:	40000c00 	.word	0x40000c00
 800b934:	40001800 	.word	0x40001800
 800b938:	00010007 	.word	0x00010007

0800b93c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	68db      	ldr	r3, [r3, #12]
 800b94a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	f003 0302 	and.w	r3, r3, #2
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d020      	beq.n	800b9a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f003 0302 	and.w	r3, r3, #2
 800b964:	2b00      	cmp	r3, #0
 800b966:	d01b      	beq.n	800b9a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f06f 0202 	mvn.w	r2, #2
 800b970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2201      	movs	r2, #1
 800b976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	699b      	ldr	r3, [r3, #24]
 800b97e:	f003 0303 	and.w	r3, r3, #3
 800b982:	2b00      	cmp	r3, #0
 800b984:	d003      	beq.n	800b98e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fb42 	bl	800c010 <HAL_TIM_IC_CaptureCallback>
 800b98c:	e005      	b.n	800b99a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f000 fb34 	bl	800bffc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 fb45 	bl	800c024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2200      	movs	r2, #0
 800b99e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	f003 0304 	and.w	r3, r3, #4
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d020      	beq.n	800b9ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f003 0304 	and.w	r3, r3, #4
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d01b      	beq.n	800b9ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f06f 0204 	mvn.w	r2, #4
 800b9bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2202      	movs	r2, #2
 800b9c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d003      	beq.n	800b9da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 fb1c 	bl	800c010 <HAL_TIM_IC_CaptureCallback>
 800b9d8:	e005      	b.n	800b9e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 fb0e 	bl	800bffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fb1f 	bl	800c024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	f003 0308 	and.w	r3, r3, #8
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d020      	beq.n	800ba38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	f003 0308 	and.w	r3, r3, #8
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d01b      	beq.n	800ba38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f06f 0208 	mvn.w	r2, #8
 800ba08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2204      	movs	r2, #4
 800ba0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	69db      	ldr	r3, [r3, #28]
 800ba16:	f003 0303 	and.w	r3, r3, #3
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d003      	beq.n	800ba26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f000 faf6 	bl	800c010 <HAL_TIM_IC_CaptureCallback>
 800ba24:	e005      	b.n	800ba32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 fae8 	bl	800bffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 faf9 	bl	800c024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	f003 0310 	and.w	r3, r3, #16
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d020      	beq.n	800ba84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f003 0310 	and.w	r3, r3, #16
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d01b      	beq.n	800ba84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	f06f 0210 	mvn.w	r2, #16
 800ba54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2208      	movs	r2, #8
 800ba5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	69db      	ldr	r3, [r3, #28]
 800ba62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d003      	beq.n	800ba72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fad0 	bl	800c010 <HAL_TIM_IC_CaptureCallback>
 800ba70:	e005      	b.n	800ba7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba72:	6878      	ldr	r0, [r7, #4]
 800ba74:	f000 fac2 	bl	800bffc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 fad3 	bl	800c024 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2200      	movs	r2, #0
 800ba82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	f003 0301 	and.w	r3, r3, #1
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00c      	beq.n	800baa8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f003 0301 	and.w	r3, r3, #1
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d007      	beq.n	800baa8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	f06f 0201 	mvn.w	r2, #1
 800baa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 faa0 	bl	800bfe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d104      	bne.n	800babc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d00c      	beq.n	800bad6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d007      	beq.n	800bad6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bad0:	6878      	ldr	r0, [r7, #4]
 800bad2:	f001 f877 	bl	800cbc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00c      	beq.n	800bafa <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d007      	beq.n	800bafa <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800baf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f001 f86f 	bl	800cbd8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d00c      	beq.n	800bb1e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d007      	beq.n	800bb1e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bb16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fa8d 	bl	800c038 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	f003 0320 	and.w	r3, r3, #32
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d00c      	beq.n	800bb42 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f003 0320 	and.w	r3, r3, #32
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d007      	beq.n	800bb42 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f06f 0220 	mvn.w	r2, #32
 800bb3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f001 f837 	bl	800cbb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb42:	bf00      	nop
 800bb44:	3710      	adds	r7, #16
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bd80      	pop	{r7, pc}
	...

0800bb4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d101      	bne.n	800bb6a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bb66:	2302      	movs	r3, #2
 800bb68:	e0ff      	b.n	800bd6a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2201      	movs	r2, #1
 800bb6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b14      	cmp	r3, #20
 800bb76:	f200 80f0 	bhi.w	800bd5a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bb7a:	a201      	add	r2, pc, #4	@ (adr r2, 800bb80 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bb7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb80:	0800bbd5 	.word	0x0800bbd5
 800bb84:	0800bd5b 	.word	0x0800bd5b
 800bb88:	0800bd5b 	.word	0x0800bd5b
 800bb8c:	0800bd5b 	.word	0x0800bd5b
 800bb90:	0800bc15 	.word	0x0800bc15
 800bb94:	0800bd5b 	.word	0x0800bd5b
 800bb98:	0800bd5b 	.word	0x0800bd5b
 800bb9c:	0800bd5b 	.word	0x0800bd5b
 800bba0:	0800bc57 	.word	0x0800bc57
 800bba4:	0800bd5b 	.word	0x0800bd5b
 800bba8:	0800bd5b 	.word	0x0800bd5b
 800bbac:	0800bd5b 	.word	0x0800bd5b
 800bbb0:	0800bc97 	.word	0x0800bc97
 800bbb4:	0800bd5b 	.word	0x0800bd5b
 800bbb8:	0800bd5b 	.word	0x0800bd5b
 800bbbc:	0800bd5b 	.word	0x0800bd5b
 800bbc0:	0800bcd9 	.word	0x0800bcd9
 800bbc4:	0800bd5b 	.word	0x0800bd5b
 800bbc8:	0800bd5b 	.word	0x0800bd5b
 800bbcc:	0800bd5b 	.word	0x0800bd5b
 800bbd0:	0800bd19 	.word	0x0800bd19
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	68b9      	ldr	r1, [r7, #8]
 800bbda:	4618      	mov	r0, r3
 800bbdc:	f000 fad6 	bl	800c18c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	699a      	ldr	r2, [r3, #24]
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f042 0208 	orr.w	r2, r2, #8
 800bbee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	699a      	ldr	r2, [r3, #24]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f022 0204 	bic.w	r2, r2, #4
 800bbfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	6999      	ldr	r1, [r3, #24]
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	691a      	ldr	r2, [r3, #16]
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	430a      	orrs	r2, r1
 800bc10:	619a      	str	r2, [r3, #24]
      break;
 800bc12:	e0a5      	b.n	800bd60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68b9      	ldr	r1, [r7, #8]
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 fb46 	bl	800c2ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	699a      	ldr	r2, [r3, #24]
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bc2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	699a      	ldr	r2, [r3, #24]
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	6999      	ldr	r1, [r3, #24]
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	691b      	ldr	r3, [r3, #16]
 800bc4a:	021a      	lsls	r2, r3, #8
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	430a      	orrs	r2, r1
 800bc52:	619a      	str	r2, [r3, #24]
      break;
 800bc54:	e084      	b.n	800bd60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68b9      	ldr	r1, [r7, #8]
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f000 fbaf 	bl	800c3c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	69da      	ldr	r2, [r3, #28]
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f042 0208 	orr.w	r2, r2, #8
 800bc70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	69da      	ldr	r2, [r3, #28]
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f022 0204 	bic.w	r2, r2, #4
 800bc80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	69d9      	ldr	r1, [r3, #28]
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	691a      	ldr	r2, [r3, #16]
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	430a      	orrs	r2, r1
 800bc92:	61da      	str	r2, [r3, #28]
      break;
 800bc94:	e064      	b.n	800bd60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	68b9      	ldr	r1, [r7, #8]
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f000 fc17 	bl	800c4d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	69da      	ldr	r2, [r3, #28]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bcb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	69da      	ldr	r2, [r3, #28]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bcc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	69d9      	ldr	r1, [r3, #28]
 800bcc8:	68bb      	ldr	r3, [r7, #8]
 800bcca:	691b      	ldr	r3, [r3, #16]
 800bccc:	021a      	lsls	r2, r3, #8
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	430a      	orrs	r2, r1
 800bcd4:	61da      	str	r2, [r3, #28]
      break;
 800bcd6:	e043      	b.n	800bd60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68b9      	ldr	r1, [r7, #8]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 fc60 	bl	800c5a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f042 0208 	orr.w	r2, r2, #8
 800bcf2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f022 0204 	bic.w	r2, r2, #4
 800bd02:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	691a      	ldr	r2, [r3, #16]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	430a      	orrs	r2, r1
 800bd14:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bd16:	e023      	b.n	800bd60 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	68b9      	ldr	r1, [r7, #8]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f000 fca4 	bl	800c66c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bd32:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bd42:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	691b      	ldr	r3, [r3, #16]
 800bd4e:	021a      	lsls	r2, r3, #8
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	430a      	orrs	r2, r1
 800bd56:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bd58:	e002      	b.n	800bd60 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	75fb      	strb	r3, [r7, #23]
      break;
 800bd5e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	2200      	movs	r2, #0
 800bd64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bd68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3718      	adds	r7, #24
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop

0800bd74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	b084      	sub	sp, #16
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
 800bd7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d101      	bne.n	800bd90 <HAL_TIM_ConfigClockSource+0x1c>
 800bd8c:	2302      	movs	r3, #2
 800bd8e:	e0dc      	b.n	800bf4a <HAL_TIM_ConfigClockSource+0x1d6>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2202      	movs	r2, #2
 800bd9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bda8:	68ba      	ldr	r2, [r7, #8]
 800bdaa:	4b6a      	ldr	r3, [pc, #424]	@ (800bf54 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bdac:	4013      	ands	r3, r2
 800bdae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bdb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a64      	ldr	r2, [pc, #400]	@ (800bf58 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	f000 80a9 	beq.w	800bf1e <HAL_TIM_ConfigClockSource+0x1aa>
 800bdcc:	4a62      	ldr	r2, [pc, #392]	@ (800bf58 <HAL_TIM_ConfigClockSource+0x1e4>)
 800bdce:	4293      	cmp	r3, r2
 800bdd0:	f200 80ae 	bhi.w	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdd4:	4a61      	ldr	r2, [pc, #388]	@ (800bf5c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	f000 80a1 	beq.w	800bf1e <HAL_TIM_ConfigClockSource+0x1aa>
 800bddc:	4a5f      	ldr	r2, [pc, #380]	@ (800bf5c <HAL_TIM_ConfigClockSource+0x1e8>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	f200 80a6 	bhi.w	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
 800bde4:	4a5e      	ldr	r2, [pc, #376]	@ (800bf60 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	f000 8099 	beq.w	800bf1e <HAL_TIM_ConfigClockSource+0x1aa>
 800bdec:	4a5c      	ldr	r2, [pc, #368]	@ (800bf60 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	f200 809e 	bhi.w	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
 800bdf4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bdf8:	f000 8091 	beq.w	800bf1e <HAL_TIM_ConfigClockSource+0x1aa>
 800bdfc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800be00:	f200 8096 	bhi.w	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
 800be04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be08:	f000 8089 	beq.w	800bf1e <HAL_TIM_ConfigClockSource+0x1aa>
 800be0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be10:	f200 808e 	bhi.w	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
 800be14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be18:	d03e      	beq.n	800be98 <HAL_TIM_ConfigClockSource+0x124>
 800be1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800be1e:	f200 8087 	bhi.w	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
 800be22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be26:	f000 8086 	beq.w	800bf36 <HAL_TIM_ConfigClockSource+0x1c2>
 800be2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800be2e:	d87f      	bhi.n	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
 800be30:	2b70      	cmp	r3, #112	@ 0x70
 800be32:	d01a      	beq.n	800be6a <HAL_TIM_ConfigClockSource+0xf6>
 800be34:	2b70      	cmp	r3, #112	@ 0x70
 800be36:	d87b      	bhi.n	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
 800be38:	2b60      	cmp	r3, #96	@ 0x60
 800be3a:	d050      	beq.n	800bede <HAL_TIM_ConfigClockSource+0x16a>
 800be3c:	2b60      	cmp	r3, #96	@ 0x60
 800be3e:	d877      	bhi.n	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
 800be40:	2b50      	cmp	r3, #80	@ 0x50
 800be42:	d03c      	beq.n	800bebe <HAL_TIM_ConfigClockSource+0x14a>
 800be44:	2b50      	cmp	r3, #80	@ 0x50
 800be46:	d873      	bhi.n	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
 800be48:	2b40      	cmp	r3, #64	@ 0x40
 800be4a:	d058      	beq.n	800befe <HAL_TIM_ConfigClockSource+0x18a>
 800be4c:	2b40      	cmp	r3, #64	@ 0x40
 800be4e:	d86f      	bhi.n	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
 800be50:	2b30      	cmp	r3, #48	@ 0x30
 800be52:	d064      	beq.n	800bf1e <HAL_TIM_ConfigClockSource+0x1aa>
 800be54:	2b30      	cmp	r3, #48	@ 0x30
 800be56:	d86b      	bhi.n	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
 800be58:	2b20      	cmp	r3, #32
 800be5a:	d060      	beq.n	800bf1e <HAL_TIM_ConfigClockSource+0x1aa>
 800be5c:	2b20      	cmp	r3, #32
 800be5e:	d867      	bhi.n	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
 800be60:	2b00      	cmp	r3, #0
 800be62:	d05c      	beq.n	800bf1e <HAL_TIM_ConfigClockSource+0x1aa>
 800be64:	2b10      	cmp	r3, #16
 800be66:	d05a      	beq.n	800bf1e <HAL_TIM_ConfigClockSource+0x1aa>
 800be68:	e062      	b.n	800bf30 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800be6e:	683b      	ldr	r3, [r7, #0]
 800be70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800be7a:	f000 fdc5 	bl	800ca08 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800be8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	68ba      	ldr	r2, [r7, #8]
 800be94:	609a      	str	r2, [r3, #8]
      break;
 800be96:	e04f      	b.n	800bf38 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bea4:	683b      	ldr	r3, [r7, #0]
 800bea6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bea8:	f000 fdae 	bl	800ca08 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	689a      	ldr	r2, [r3, #8]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800beba:	609a      	str	r2, [r3, #8]
      break;
 800bebc:	e03c      	b.n	800bf38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800beca:	461a      	mov	r2, r3
 800becc:	f000 fd1e 	bl	800c90c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	2150      	movs	r1, #80	@ 0x50
 800bed6:	4618      	mov	r0, r3
 800bed8:	f000 fd78 	bl	800c9cc <TIM_ITRx_SetConfig>
      break;
 800bedc:	e02c      	b.n	800bf38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800beea:	461a      	mov	r2, r3
 800beec:	f000 fd3d 	bl	800c96a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2160      	movs	r1, #96	@ 0x60
 800bef6:	4618      	mov	r0, r3
 800bef8:	f000 fd68 	bl	800c9cc <TIM_ITRx_SetConfig>
      break;
 800befc:	e01c      	b.n	800bf38 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf0a:	461a      	mov	r2, r3
 800bf0c:	f000 fcfe 	bl	800c90c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2140      	movs	r1, #64	@ 0x40
 800bf16:	4618      	mov	r0, r3
 800bf18:	f000 fd58 	bl	800c9cc <TIM_ITRx_SetConfig>
      break;
 800bf1c:	e00c      	b.n	800bf38 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681a      	ldr	r2, [r3, #0]
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	4619      	mov	r1, r3
 800bf28:	4610      	mov	r0, r2
 800bf2a:	f000 fd4f 	bl	800c9cc <TIM_ITRx_SetConfig>
      break;
 800bf2e:	e003      	b.n	800bf38 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800bf30:	2301      	movs	r3, #1
 800bf32:	73fb      	strb	r3, [r7, #15]
      break;
 800bf34:	e000      	b.n	800bf38 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800bf36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2200      	movs	r2, #0
 800bf44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bf48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	ffceff88 	.word	0xffceff88
 800bf58:	00100040 	.word	0x00100040
 800bf5c:	00100030 	.word	0x00100030
 800bf60:	00100020 	.word	0x00100020

0800bf64 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d101      	bne.n	800bf7c <HAL_TIM_SlaveConfigSynchro+0x18>
 800bf78:	2302      	movs	r3, #2
 800bf7a:	e031      	b.n	800bfe0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2202      	movs	r2, #2
 800bf88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800bf8c:	6839      	ldr	r1, [r7, #0]
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f000 fbd2 	bl	800c738 <TIM_SlaveTimer_SetConfig>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d009      	beq.n	800bfae <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e018      	b.n	800bfe0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68da      	ldr	r2, [r3, #12]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800bfbc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	68da      	ldr	r2, [r3, #12]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800bfcc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	2200      	movs	r2, #0
 800bfda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bff0:	bf00      	nop
 800bff2:	370c      	adds	r7, #12
 800bff4:	46bd      	mov	sp, r7
 800bff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bffa:	4770      	bx	lr

0800bffc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bffc:	b480      	push	{r7}
 800bffe:	b083      	sub	sp, #12
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c004:	bf00      	nop
 800c006:	370c      	adds	r7, #12
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c018:	bf00      	nop
 800c01a:	370c      	adds	r7, #12
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c024:	b480      	push	{r7}
 800c026:	b083      	sub	sp, #12
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c02c:	bf00      	nop
 800c02e:	370c      	adds	r7, #12
 800c030:	46bd      	mov	sp, r7
 800c032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c036:	4770      	bx	lr

0800c038 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
 800c054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a43      	ldr	r2, [pc, #268]	@ (800c16c <TIM_Base_SetConfig+0x120>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d013      	beq.n	800c08c <TIM_Base_SetConfig+0x40>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c06a:	d00f      	beq.n	800c08c <TIM_Base_SetConfig+0x40>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a40      	ldr	r2, [pc, #256]	@ (800c170 <TIM_Base_SetConfig+0x124>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d00b      	beq.n	800c08c <TIM_Base_SetConfig+0x40>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4a3f      	ldr	r2, [pc, #252]	@ (800c174 <TIM_Base_SetConfig+0x128>)
 800c078:	4293      	cmp	r3, r2
 800c07a:	d007      	beq.n	800c08c <TIM_Base_SetConfig+0x40>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a3e      	ldr	r2, [pc, #248]	@ (800c178 <TIM_Base_SetConfig+0x12c>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d003      	beq.n	800c08c <TIM_Base_SetConfig+0x40>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4a3d      	ldr	r2, [pc, #244]	@ (800c17c <TIM_Base_SetConfig+0x130>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d108      	bne.n	800c09e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	4313      	orrs	r3, r2
 800c09c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a32      	ldr	r2, [pc, #200]	@ (800c16c <TIM_Base_SetConfig+0x120>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d01f      	beq.n	800c0e6 <TIM_Base_SetConfig+0x9a>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0ac:	d01b      	beq.n	800c0e6 <TIM_Base_SetConfig+0x9a>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a2f      	ldr	r2, [pc, #188]	@ (800c170 <TIM_Base_SetConfig+0x124>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d017      	beq.n	800c0e6 <TIM_Base_SetConfig+0x9a>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a2e      	ldr	r2, [pc, #184]	@ (800c174 <TIM_Base_SetConfig+0x128>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d013      	beq.n	800c0e6 <TIM_Base_SetConfig+0x9a>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a2d      	ldr	r2, [pc, #180]	@ (800c178 <TIM_Base_SetConfig+0x12c>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d00f      	beq.n	800c0e6 <TIM_Base_SetConfig+0x9a>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a2c      	ldr	r2, [pc, #176]	@ (800c17c <TIM_Base_SetConfig+0x130>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d00b      	beq.n	800c0e6 <TIM_Base_SetConfig+0x9a>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a2b      	ldr	r2, [pc, #172]	@ (800c180 <TIM_Base_SetConfig+0x134>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d007      	beq.n	800c0e6 <TIM_Base_SetConfig+0x9a>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a2a      	ldr	r2, [pc, #168]	@ (800c184 <TIM_Base_SetConfig+0x138>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d003      	beq.n	800c0e6 <TIM_Base_SetConfig+0x9a>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a29      	ldr	r2, [pc, #164]	@ (800c188 <TIM_Base_SetConfig+0x13c>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d108      	bne.n	800c0f8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	4313      	orrs	r3, r2
 800c104:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	689a      	ldr	r2, [r3, #8]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4a14      	ldr	r2, [pc, #80]	@ (800c16c <TIM_Base_SetConfig+0x120>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d00f      	beq.n	800c13e <TIM_Base_SetConfig+0xf2>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	4a16      	ldr	r2, [pc, #88]	@ (800c17c <TIM_Base_SetConfig+0x130>)
 800c122:	4293      	cmp	r3, r2
 800c124:	d00b      	beq.n	800c13e <TIM_Base_SetConfig+0xf2>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	4a15      	ldr	r2, [pc, #84]	@ (800c180 <TIM_Base_SetConfig+0x134>)
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d007      	beq.n	800c13e <TIM_Base_SetConfig+0xf2>
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	4a14      	ldr	r2, [pc, #80]	@ (800c184 <TIM_Base_SetConfig+0x138>)
 800c132:	4293      	cmp	r3, r2
 800c134:	d003      	beq.n	800c13e <TIM_Base_SetConfig+0xf2>
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	4a13      	ldr	r2, [pc, #76]	@ (800c188 <TIM_Base_SetConfig+0x13c>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d103      	bne.n	800c146 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	691a      	ldr	r2, [r3, #16]
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f043 0204 	orr.w	r2, r3, #4
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2201      	movs	r2, #1
 800c156:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	601a      	str	r2, [r3, #0]
}
 800c15e:	bf00      	nop
 800c160:	3714      	adds	r7, #20
 800c162:	46bd      	mov	sp, r7
 800c164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c168:	4770      	bx	lr
 800c16a:	bf00      	nop
 800c16c:	40010000 	.word	0x40010000
 800c170:	40000400 	.word	0x40000400
 800c174:	40000800 	.word	0x40000800
 800c178:	40000c00 	.word	0x40000c00
 800c17c:	40010400 	.word	0x40010400
 800c180:	40014000 	.word	0x40014000
 800c184:	40014400 	.word	0x40014400
 800c188:	40014800 	.word	0x40014800

0800c18c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b087      	sub	sp, #28
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6a1b      	ldr	r3, [r3, #32]
 800c1a0:	f023 0201 	bic.w	r2, r3, #1
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	699b      	ldr	r3, [r3, #24]
 800c1b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	4b37      	ldr	r3, [pc, #220]	@ (800c294 <TIM_OC1_SetConfig+0x108>)
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	f023 0303 	bic.w	r3, r3, #3
 800c1c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c1c4:	683b      	ldr	r3, [r7, #0]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f023 0302 	bic.w	r3, r3, #2
 800c1d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	697a      	ldr	r2, [r7, #20]
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4a2d      	ldr	r2, [pc, #180]	@ (800c298 <TIM_OC1_SetConfig+0x10c>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d00f      	beq.n	800c208 <TIM_OC1_SetConfig+0x7c>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a2c      	ldr	r2, [pc, #176]	@ (800c29c <TIM_OC1_SetConfig+0x110>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d00b      	beq.n	800c208 <TIM_OC1_SetConfig+0x7c>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4a2b      	ldr	r2, [pc, #172]	@ (800c2a0 <TIM_OC1_SetConfig+0x114>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d007      	beq.n	800c208 <TIM_OC1_SetConfig+0x7c>
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a2a      	ldr	r2, [pc, #168]	@ (800c2a4 <TIM_OC1_SetConfig+0x118>)
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d003      	beq.n	800c208 <TIM_OC1_SetConfig+0x7c>
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	4a29      	ldr	r2, [pc, #164]	@ (800c2a8 <TIM_OC1_SetConfig+0x11c>)
 800c204:	4293      	cmp	r3, r2
 800c206:	d10c      	bne.n	800c222 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	f023 0308 	bic.w	r3, r3, #8
 800c20e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	697a      	ldr	r2, [r7, #20]
 800c216:	4313      	orrs	r3, r2
 800c218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	f023 0304 	bic.w	r3, r3, #4
 800c220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4a1c      	ldr	r2, [pc, #112]	@ (800c298 <TIM_OC1_SetConfig+0x10c>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d00f      	beq.n	800c24a <TIM_OC1_SetConfig+0xbe>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	4a1b      	ldr	r2, [pc, #108]	@ (800c29c <TIM_OC1_SetConfig+0x110>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d00b      	beq.n	800c24a <TIM_OC1_SetConfig+0xbe>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4a1a      	ldr	r2, [pc, #104]	@ (800c2a0 <TIM_OC1_SetConfig+0x114>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d007      	beq.n	800c24a <TIM_OC1_SetConfig+0xbe>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4a19      	ldr	r2, [pc, #100]	@ (800c2a4 <TIM_OC1_SetConfig+0x118>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d003      	beq.n	800c24a <TIM_OC1_SetConfig+0xbe>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	4a18      	ldr	r2, [pc, #96]	@ (800c2a8 <TIM_OC1_SetConfig+0x11c>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d111      	bne.n	800c26e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c252:	693b      	ldr	r3, [r7, #16]
 800c254:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	695b      	ldr	r3, [r3, #20]
 800c25e:	693a      	ldr	r2, [r7, #16]
 800c260:	4313      	orrs	r3, r2
 800c262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	699b      	ldr	r3, [r3, #24]
 800c268:	693a      	ldr	r2, [r7, #16]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	693a      	ldr	r2, [r7, #16]
 800c272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	68fa      	ldr	r2, [r7, #12]
 800c278:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	685a      	ldr	r2, [r3, #4]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	697a      	ldr	r2, [r7, #20]
 800c286:	621a      	str	r2, [r3, #32]
}
 800c288:	bf00      	nop
 800c28a:	371c      	adds	r7, #28
 800c28c:	46bd      	mov	sp, r7
 800c28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c292:	4770      	bx	lr
 800c294:	fffeff8f 	.word	0xfffeff8f
 800c298:	40010000 	.word	0x40010000
 800c29c:	40010400 	.word	0x40010400
 800c2a0:	40014000 	.word	0x40014000
 800c2a4:	40014400 	.word	0x40014400
 800c2a8:	40014800 	.word	0x40014800

0800c2ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	b087      	sub	sp, #28
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a1b      	ldr	r3, [r3, #32]
 800c2ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a1b      	ldr	r3, [r3, #32]
 800c2c0:	f023 0210 	bic.w	r2, r3, #16
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	699b      	ldr	r3, [r3, #24]
 800c2d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	4b34      	ldr	r3, [pc, #208]	@ (800c3a8 <TIM_OC2_SetConfig+0xfc>)
 800c2d8:	4013      	ands	r3, r2
 800c2da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c2e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	021b      	lsls	r3, r3, #8
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f023 0320 	bic.w	r3, r3, #32
 800c2f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	689b      	ldr	r3, [r3, #8]
 800c2fc:	011b      	lsls	r3, r3, #4
 800c2fe:	697a      	ldr	r2, [r7, #20]
 800c300:	4313      	orrs	r3, r2
 800c302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a29      	ldr	r2, [pc, #164]	@ (800c3ac <TIM_OC2_SetConfig+0x100>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d003      	beq.n	800c314 <TIM_OC2_SetConfig+0x68>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4a28      	ldr	r2, [pc, #160]	@ (800c3b0 <TIM_OC2_SetConfig+0x104>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d10d      	bne.n	800c330 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c31a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	68db      	ldr	r3, [r3, #12]
 800c320:	011b      	lsls	r3, r3, #4
 800c322:	697a      	ldr	r2, [r7, #20]
 800c324:	4313      	orrs	r3, r2
 800c326:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c32e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4a1e      	ldr	r2, [pc, #120]	@ (800c3ac <TIM_OC2_SetConfig+0x100>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d00f      	beq.n	800c358 <TIM_OC2_SetConfig+0xac>
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	4a1d      	ldr	r2, [pc, #116]	@ (800c3b0 <TIM_OC2_SetConfig+0x104>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d00b      	beq.n	800c358 <TIM_OC2_SetConfig+0xac>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	4a1c      	ldr	r2, [pc, #112]	@ (800c3b4 <TIM_OC2_SetConfig+0x108>)
 800c344:	4293      	cmp	r3, r2
 800c346:	d007      	beq.n	800c358 <TIM_OC2_SetConfig+0xac>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	4a1b      	ldr	r2, [pc, #108]	@ (800c3b8 <TIM_OC2_SetConfig+0x10c>)
 800c34c:	4293      	cmp	r3, r2
 800c34e:	d003      	beq.n	800c358 <TIM_OC2_SetConfig+0xac>
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	4a1a      	ldr	r2, [pc, #104]	@ (800c3bc <TIM_OC2_SetConfig+0x110>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d113      	bne.n	800c380 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c35e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c366:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c368:	683b      	ldr	r3, [r7, #0]
 800c36a:	695b      	ldr	r3, [r3, #20]
 800c36c:	009b      	lsls	r3, r3, #2
 800c36e:	693a      	ldr	r2, [r7, #16]
 800c370:	4313      	orrs	r3, r2
 800c372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	699b      	ldr	r3, [r3, #24]
 800c378:	009b      	lsls	r3, r3, #2
 800c37a:	693a      	ldr	r2, [r7, #16]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	693a      	ldr	r2, [r7, #16]
 800c384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	685a      	ldr	r2, [r3, #4]
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	697a      	ldr	r2, [r7, #20]
 800c398:	621a      	str	r2, [r3, #32]
}
 800c39a:	bf00      	nop
 800c39c:	371c      	adds	r7, #28
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	feff8fff 	.word	0xfeff8fff
 800c3ac:	40010000 	.word	0x40010000
 800c3b0:	40010400 	.word	0x40010400
 800c3b4:	40014000 	.word	0x40014000
 800c3b8:	40014400 	.word	0x40014400
 800c3bc:	40014800 	.word	0x40014800

0800c3c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b087      	sub	sp, #28
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6a1b      	ldr	r3, [r3, #32]
 800c3ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6a1b      	ldr	r3, [r3, #32]
 800c3d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	69db      	ldr	r3, [r3, #28]
 800c3e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	4b33      	ldr	r3, [pc, #204]	@ (800c4b8 <TIM_OC3_SetConfig+0xf8>)
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f023 0303 	bic.w	r3, r3, #3
 800c3f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c402:	697b      	ldr	r3, [r7, #20]
 800c404:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	021b      	lsls	r3, r3, #8
 800c410:	697a      	ldr	r2, [r7, #20]
 800c412:	4313      	orrs	r3, r2
 800c414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	4a28      	ldr	r2, [pc, #160]	@ (800c4bc <TIM_OC3_SetConfig+0xfc>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d003      	beq.n	800c426 <TIM_OC3_SetConfig+0x66>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4a27      	ldr	r2, [pc, #156]	@ (800c4c0 <TIM_OC3_SetConfig+0x100>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d10d      	bne.n	800c442 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c42c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	68db      	ldr	r3, [r3, #12]
 800c432:	021b      	lsls	r3, r3, #8
 800c434:	697a      	ldr	r2, [r7, #20]
 800c436:	4313      	orrs	r3, r2
 800c438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c43a:	697b      	ldr	r3, [r7, #20]
 800c43c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a1d      	ldr	r2, [pc, #116]	@ (800c4bc <TIM_OC3_SetConfig+0xfc>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d00f      	beq.n	800c46a <TIM_OC3_SetConfig+0xaa>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4a1c      	ldr	r2, [pc, #112]	@ (800c4c0 <TIM_OC3_SetConfig+0x100>)
 800c44e:	4293      	cmp	r3, r2
 800c450:	d00b      	beq.n	800c46a <TIM_OC3_SetConfig+0xaa>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	4a1b      	ldr	r2, [pc, #108]	@ (800c4c4 <TIM_OC3_SetConfig+0x104>)
 800c456:	4293      	cmp	r3, r2
 800c458:	d007      	beq.n	800c46a <TIM_OC3_SetConfig+0xaa>
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	4a1a      	ldr	r2, [pc, #104]	@ (800c4c8 <TIM_OC3_SetConfig+0x108>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d003      	beq.n	800c46a <TIM_OC3_SetConfig+0xaa>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	4a19      	ldr	r2, [pc, #100]	@ (800c4cc <TIM_OC3_SetConfig+0x10c>)
 800c466:	4293      	cmp	r3, r2
 800c468:	d113      	bne.n	800c492 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	695b      	ldr	r3, [r3, #20]
 800c47e:	011b      	lsls	r3, r3, #4
 800c480:	693a      	ldr	r2, [r7, #16]
 800c482:	4313      	orrs	r3, r2
 800c484:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c486:	683b      	ldr	r3, [r7, #0]
 800c488:	699b      	ldr	r3, [r3, #24]
 800c48a:	011b      	lsls	r3, r3, #4
 800c48c:	693a      	ldr	r2, [r7, #16]
 800c48e:	4313      	orrs	r3, r2
 800c490:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	693a      	ldr	r2, [r7, #16]
 800c496:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	68fa      	ldr	r2, [r7, #12]
 800c49c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c49e:	683b      	ldr	r3, [r7, #0]
 800c4a0:	685a      	ldr	r2, [r3, #4]
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	697a      	ldr	r2, [r7, #20]
 800c4aa:	621a      	str	r2, [r3, #32]
}
 800c4ac:	bf00      	nop
 800c4ae:	371c      	adds	r7, #28
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr
 800c4b8:	fffeff8f 	.word	0xfffeff8f
 800c4bc:	40010000 	.word	0x40010000
 800c4c0:	40010400 	.word	0x40010400
 800c4c4:	40014000 	.word	0x40014000
 800c4c8:	40014400 	.word	0x40014400
 800c4cc:	40014800 	.word	0x40014800

0800c4d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b087      	sub	sp, #28
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	6a1b      	ldr	r3, [r3, #32]
 800c4de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	6a1b      	ldr	r3, [r3, #32]
 800c4e4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	69db      	ldr	r3, [r3, #28]
 800c4f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c4f8:	68fa      	ldr	r2, [r7, #12]
 800c4fa:	4b24      	ldr	r3, [pc, #144]	@ (800c58c <TIM_OC4_SetConfig+0xbc>)
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c506:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	021b      	lsls	r3, r3, #8
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	4313      	orrs	r3, r2
 800c512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c51a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	689b      	ldr	r3, [r3, #8]
 800c520:	031b      	lsls	r3, r3, #12
 800c522:	693a      	ldr	r2, [r7, #16]
 800c524:	4313      	orrs	r3, r2
 800c526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a19      	ldr	r2, [pc, #100]	@ (800c590 <TIM_OC4_SetConfig+0xc0>)
 800c52c:	4293      	cmp	r3, r2
 800c52e:	d00f      	beq.n	800c550 <TIM_OC4_SetConfig+0x80>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	4a18      	ldr	r2, [pc, #96]	@ (800c594 <TIM_OC4_SetConfig+0xc4>)
 800c534:	4293      	cmp	r3, r2
 800c536:	d00b      	beq.n	800c550 <TIM_OC4_SetConfig+0x80>
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	4a17      	ldr	r2, [pc, #92]	@ (800c598 <TIM_OC4_SetConfig+0xc8>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d007      	beq.n	800c550 <TIM_OC4_SetConfig+0x80>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	4a16      	ldr	r2, [pc, #88]	@ (800c59c <TIM_OC4_SetConfig+0xcc>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d003      	beq.n	800c550 <TIM_OC4_SetConfig+0x80>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	4a15      	ldr	r2, [pc, #84]	@ (800c5a0 <TIM_OC4_SetConfig+0xd0>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d109      	bne.n	800c564 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c556:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	695b      	ldr	r3, [r3, #20]
 800c55c:	019b      	lsls	r3, r3, #6
 800c55e:	697a      	ldr	r2, [r7, #20]
 800c560:	4313      	orrs	r3, r2
 800c562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	697a      	ldr	r2, [r7, #20]
 800c568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	68fa      	ldr	r2, [r7, #12]
 800c56e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	685a      	ldr	r2, [r3, #4]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	693a      	ldr	r2, [r7, #16]
 800c57c:	621a      	str	r2, [r3, #32]
}
 800c57e:	bf00      	nop
 800c580:	371c      	adds	r7, #28
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	feff8fff 	.word	0xfeff8fff
 800c590:	40010000 	.word	0x40010000
 800c594:	40010400 	.word	0x40010400
 800c598:	40014000 	.word	0x40014000
 800c59c:	40014400 	.word	0x40014400
 800c5a0:	40014800 	.word	0x40014800

0800c5a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c5a4:	b480      	push	{r7}
 800c5a6:	b087      	sub	sp, #28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a1b      	ldr	r3, [r3, #32]
 800c5b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a1b      	ldr	r3, [r3, #32]
 800c5b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	685b      	ldr	r3, [r3, #4]
 800c5c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c5cc:	68fa      	ldr	r2, [r7, #12]
 800c5ce:	4b21      	ldr	r3, [pc, #132]	@ (800c654 <TIM_OC5_SetConfig+0xb0>)
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	4313      	orrs	r3, r2
 800c5dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c5e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	041b      	lsls	r3, r3, #16
 800c5ec:	693a      	ldr	r2, [r7, #16]
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	4a18      	ldr	r2, [pc, #96]	@ (800c658 <TIM_OC5_SetConfig+0xb4>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d00f      	beq.n	800c61a <TIM_OC5_SetConfig+0x76>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	4a17      	ldr	r2, [pc, #92]	@ (800c65c <TIM_OC5_SetConfig+0xb8>)
 800c5fe:	4293      	cmp	r3, r2
 800c600:	d00b      	beq.n	800c61a <TIM_OC5_SetConfig+0x76>
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4a16      	ldr	r2, [pc, #88]	@ (800c660 <TIM_OC5_SetConfig+0xbc>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d007      	beq.n	800c61a <TIM_OC5_SetConfig+0x76>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4a15      	ldr	r2, [pc, #84]	@ (800c664 <TIM_OC5_SetConfig+0xc0>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d003      	beq.n	800c61a <TIM_OC5_SetConfig+0x76>
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	4a14      	ldr	r2, [pc, #80]	@ (800c668 <TIM_OC5_SetConfig+0xc4>)
 800c616:	4293      	cmp	r3, r2
 800c618:	d109      	bne.n	800c62e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c620:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	695b      	ldr	r3, [r3, #20]
 800c626:	021b      	lsls	r3, r3, #8
 800c628:	697a      	ldr	r2, [r7, #20]
 800c62a:	4313      	orrs	r3, r2
 800c62c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	697a      	ldr	r2, [r7, #20]
 800c632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	68fa      	ldr	r2, [r7, #12]
 800c638:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	685a      	ldr	r2, [r3, #4]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	693a      	ldr	r2, [r7, #16]
 800c646:	621a      	str	r2, [r3, #32]
}
 800c648:	bf00      	nop
 800c64a:	371c      	adds	r7, #28
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr
 800c654:	fffeff8f 	.word	0xfffeff8f
 800c658:	40010000 	.word	0x40010000
 800c65c:	40010400 	.word	0x40010400
 800c660:	40014000 	.word	0x40014000
 800c664:	40014400 	.word	0x40014400
 800c668:	40014800 	.word	0x40014800

0800c66c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b087      	sub	sp, #28
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
 800c674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6a1b      	ldr	r3, [r3, #32]
 800c67a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6a1b      	ldr	r3, [r3, #32]
 800c680:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	4b22      	ldr	r3, [pc, #136]	@ (800c720 <TIM_OC6_SetConfig+0xb4>)
 800c698:	4013      	ands	r3, r2
 800c69a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	021b      	lsls	r3, r3, #8
 800c6a2:	68fa      	ldr	r2, [r7, #12]
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c6ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	689b      	ldr	r3, [r3, #8]
 800c6b4:	051b      	lsls	r3, r3, #20
 800c6b6:	693a      	ldr	r2, [r7, #16]
 800c6b8:	4313      	orrs	r3, r2
 800c6ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a19      	ldr	r2, [pc, #100]	@ (800c724 <TIM_OC6_SetConfig+0xb8>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d00f      	beq.n	800c6e4 <TIM_OC6_SetConfig+0x78>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4a18      	ldr	r2, [pc, #96]	@ (800c728 <TIM_OC6_SetConfig+0xbc>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d00b      	beq.n	800c6e4 <TIM_OC6_SetConfig+0x78>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	4a17      	ldr	r2, [pc, #92]	@ (800c72c <TIM_OC6_SetConfig+0xc0>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d007      	beq.n	800c6e4 <TIM_OC6_SetConfig+0x78>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	4a16      	ldr	r2, [pc, #88]	@ (800c730 <TIM_OC6_SetConfig+0xc4>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d003      	beq.n	800c6e4 <TIM_OC6_SetConfig+0x78>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	4a15      	ldr	r2, [pc, #84]	@ (800c734 <TIM_OC6_SetConfig+0xc8>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d109      	bne.n	800c6f8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c6e4:	697b      	ldr	r3, [r7, #20]
 800c6e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c6ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	695b      	ldr	r3, [r3, #20]
 800c6f0:	029b      	lsls	r3, r3, #10
 800c6f2:	697a      	ldr	r2, [r7, #20]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	685a      	ldr	r2, [r3, #4]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	693a      	ldr	r2, [r7, #16]
 800c710:	621a      	str	r2, [r3, #32]
}
 800c712:	bf00      	nop
 800c714:	371c      	adds	r7, #28
 800c716:	46bd      	mov	sp, r7
 800c718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71c:	4770      	bx	lr
 800c71e:	bf00      	nop
 800c720:	feff8fff 	.word	0xfeff8fff
 800c724:	40010000 	.word	0x40010000
 800c728:	40010400 	.word	0x40010400
 800c72c:	40014000 	.word	0x40014000
 800c730:	40014400 	.word	0x40014400
 800c734:	40014800 	.word	0x40014800

0800c738 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b086      	sub	sp, #24
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
 800c740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c742:	2300      	movs	r3, #0
 800c744:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	689b      	ldr	r3, [r3, #8]
 800c74c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	4b65      	ldr	r3, [pc, #404]	@ (800c8e8 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800c752:	4013      	ands	r3, r2
 800c754:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	693a      	ldr	r2, [r7, #16]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800c760:	693a      	ldr	r2, [r7, #16]
 800c762:	4b62      	ldr	r3, [pc, #392]	@ (800c8ec <TIM_SlaveTimer_SetConfig+0x1b4>)
 800c764:	4013      	ands	r3, r2
 800c766:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	693a      	ldr	r2, [r7, #16]
 800c76e:	4313      	orrs	r3, r2
 800c770:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	693a      	ldr	r2, [r7, #16]
 800c778:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	4a5c      	ldr	r2, [pc, #368]	@ (800c8f0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800c780:	4293      	cmp	r3, r2
 800c782:	f000 80ab 	beq.w	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c786:	4a5a      	ldr	r2, [pc, #360]	@ (800c8f0 <TIM_SlaveTimer_SetConfig+0x1b8>)
 800c788:	4293      	cmp	r3, r2
 800c78a:	f200 80a4 	bhi.w	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c78e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c792:	f000 80a3 	beq.w	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c796:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c79a:	f200 809c 	bhi.w	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c79e:	4a55      	ldr	r2, [pc, #340]	@ (800c8f4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800c7a0:	4293      	cmp	r3, r2
 800c7a2:	f000 809b 	beq.w	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c7a6:	4a53      	ldr	r2, [pc, #332]	@ (800c8f4 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800c7a8:	4293      	cmp	r3, r2
 800c7aa:	f200 8094 	bhi.w	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c7ae:	4a52      	ldr	r2, [pc, #328]	@ (800c8f8 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800c7b0:	4293      	cmp	r3, r2
 800c7b2:	f000 8093 	beq.w	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c7b6:	4a50      	ldr	r2, [pc, #320]	@ (800c8f8 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800c7b8:	4293      	cmp	r3, r2
 800c7ba:	f200 808c 	bhi.w	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c7be:	4a4f      	ldr	r2, [pc, #316]	@ (800c8fc <TIM_SlaveTimer_SetConfig+0x1c4>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	f000 808b 	beq.w	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c7c6:	4a4d      	ldr	r2, [pc, #308]	@ (800c8fc <TIM_SlaveTimer_SetConfig+0x1c4>)
 800c7c8:	4293      	cmp	r3, r2
 800c7ca:	f200 8084 	bhi.w	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c7ce:	4a4c      	ldr	r2, [pc, #304]	@ (800c900 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	f000 8083 	beq.w	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c7d6:	4a4a      	ldr	r2, [pc, #296]	@ (800c900 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d87c      	bhi.n	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c7dc:	4a49      	ldr	r2, [pc, #292]	@ (800c904 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d07c      	beq.n	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c7e2:	4a48      	ldr	r2, [pc, #288]	@ (800c904 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d876      	bhi.n	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c7e8:	4a47      	ldr	r2, [pc, #284]	@ (800c908 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d076      	beq.n	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c7ee:	4a46      	ldr	r2, [pc, #280]	@ (800c908 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d870      	bhi.n	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c7f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c7f8:	d070      	beq.n	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c7fa:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c7fe:	d86a      	bhi.n	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c800:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c804:	d06a      	beq.n	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c806:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c80a:	d864      	bhi.n	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c80c:	2b70      	cmp	r3, #112	@ 0x70
 800c80e:	d01a      	beq.n	800c846 <TIM_SlaveTimer_SetConfig+0x10e>
 800c810:	2b70      	cmp	r3, #112	@ 0x70
 800c812:	d860      	bhi.n	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c814:	2b60      	cmp	r3, #96	@ 0x60
 800c816:	d054      	beq.n	800c8c2 <TIM_SlaveTimer_SetConfig+0x18a>
 800c818:	2b60      	cmp	r3, #96	@ 0x60
 800c81a:	d85c      	bhi.n	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c81c:	2b50      	cmp	r3, #80	@ 0x50
 800c81e:	d046      	beq.n	800c8ae <TIM_SlaveTimer_SetConfig+0x176>
 800c820:	2b50      	cmp	r3, #80	@ 0x50
 800c822:	d858      	bhi.n	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c824:	2b40      	cmp	r3, #64	@ 0x40
 800c826:	d019      	beq.n	800c85c <TIM_SlaveTimer_SetConfig+0x124>
 800c828:	2b40      	cmp	r3, #64	@ 0x40
 800c82a:	d854      	bhi.n	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c82c:	2b30      	cmp	r3, #48	@ 0x30
 800c82e:	d055      	beq.n	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c830:	2b30      	cmp	r3, #48	@ 0x30
 800c832:	d850      	bhi.n	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c834:	2b20      	cmp	r3, #32
 800c836:	d051      	beq.n	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c838:	2b20      	cmp	r3, #32
 800c83a:	d84c      	bhi.n	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d04d      	beq.n	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c840:	2b10      	cmp	r3, #16
 800c842:	d04b      	beq.n	800c8dc <TIM_SlaveTimer_SetConfig+0x1a4>
 800c844:	e047      	b.n	800c8d6 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800c84a:	683b      	ldr	r3, [r7, #0]
 800c84c:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800c856:	f000 f8d7 	bl	800ca08 <TIM_ETR_SetConfig>
      break;
 800c85a:	e040      	b.n	800c8de <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	2b05      	cmp	r3, #5
 800c862:	d101      	bne.n	800c868 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800c864:	2301      	movs	r3, #1
 800c866:	e03b      	b.n	800c8e0 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	6a1b      	ldr	r3, [r3, #32]
 800c86e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	6a1a      	ldr	r2, [r3, #32]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f022 0201 	bic.w	r2, r2, #1
 800c87e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	699b      	ldr	r3, [r3, #24]
 800c886:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c88e:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	011b      	lsls	r3, r3, #4
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	4313      	orrs	r3, r2
 800c89a:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	68ba      	ldr	r2, [r7, #8]
 800c8a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	621a      	str	r2, [r3, #32]
      break;
 800c8ac:	e017      	b.n	800c8de <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	f000 f826 	bl	800c90c <TIM_TI1_ConfigInputStage>
      break;
 800c8c0:	e00d      	b.n	800c8de <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	f000 f84b 	bl	800c96a <TIM_TI2_ConfigInputStage>
      break;
 800c8d4:	e003      	b.n	800c8de <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	75fb      	strb	r3, [r7, #23]
      break;
 800c8da:	e000      	b.n	800c8de <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 800c8dc:	bf00      	nop
  }

  return status;
 800c8de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3718      	adds	r7, #24
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	ffcfff8f 	.word	0xffcfff8f
 800c8ec:	fffefff8 	.word	0xfffefff8
 800c8f0:	00200010 	.word	0x00200010
 800c8f4:	00100070 	.word	0x00100070
 800c8f8:	00100060 	.word	0x00100060
 800c8fc:	00100050 	.word	0x00100050
 800c900:	00100040 	.word	0x00100040
 800c904:	00100030 	.word	0x00100030
 800c908:	00100020 	.word	0x00100020

0800c90c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b087      	sub	sp, #28
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6a1b      	ldr	r3, [r3, #32]
 800c91c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6a1b      	ldr	r3, [r3, #32]
 800c922:	f023 0201 	bic.w	r2, r3, #1
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	699b      	ldr	r3, [r3, #24]
 800c92e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	011b      	lsls	r3, r3, #4
 800c93c:	693a      	ldr	r2, [r7, #16]
 800c93e:	4313      	orrs	r3, r2
 800c940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f023 030a 	bic.w	r3, r3, #10
 800c948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c94a:	697a      	ldr	r2, [r7, #20]
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	4313      	orrs	r3, r2
 800c950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	693a      	ldr	r2, [r7, #16]
 800c956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	697a      	ldr	r2, [r7, #20]
 800c95c:	621a      	str	r2, [r3, #32]
}
 800c95e:	bf00      	nop
 800c960:	371c      	adds	r7, #28
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr

0800c96a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c96a:	b480      	push	{r7}
 800c96c:	b087      	sub	sp, #28
 800c96e:	af00      	add	r7, sp, #0
 800c970:	60f8      	str	r0, [r7, #12]
 800c972:	60b9      	str	r1, [r7, #8]
 800c974:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6a1b      	ldr	r3, [r3, #32]
 800c97a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6a1b      	ldr	r3, [r3, #32]
 800c980:	f023 0210 	bic.w	r2, r3, #16
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	699b      	ldr	r3, [r3, #24]
 800c98c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c994:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	031b      	lsls	r3, r3, #12
 800c99a:	693a      	ldr	r2, [r7, #16]
 800c99c:	4313      	orrs	r3, r2
 800c99e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9a0:	697b      	ldr	r3, [r7, #20]
 800c9a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c9a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9a8:	68bb      	ldr	r3, [r7, #8]
 800c9aa:	011b      	lsls	r3, r3, #4
 800c9ac:	697a      	ldr	r2, [r7, #20]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	693a      	ldr	r2, [r7, #16]
 800c9b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	621a      	str	r2, [r3, #32]
}
 800c9be:	bf00      	nop
 800c9c0:	371c      	adds	r7, #28
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
	...

0800c9cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	689b      	ldr	r3, [r3, #8]
 800c9da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9dc:	68fa      	ldr	r2, [r7, #12]
 800c9de:	4b09      	ldr	r3, [pc, #36]	@ (800ca04 <TIM_ITRx_SetConfig+0x38>)
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9e4:	683a      	ldr	r2, [r7, #0]
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	f043 0307 	orr.w	r3, r3, #7
 800c9ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	68fa      	ldr	r2, [r7, #12]
 800c9f4:	609a      	str	r2, [r3, #8]
}
 800c9f6:	bf00      	nop
 800c9f8:	3714      	adds	r7, #20
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	ffcfff8f 	.word	0xffcfff8f

0800ca08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b087      	sub	sp, #28
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	60f8      	str	r0, [r7, #12]
 800ca10:	60b9      	str	r1, [r7, #8]
 800ca12:	607a      	str	r2, [r7, #4]
 800ca14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	021a      	lsls	r2, r3, #8
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	431a      	orrs	r2, r3
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	697a      	ldr	r2, [r7, #20]
 800ca32:	4313      	orrs	r3, r2
 800ca34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	697a      	ldr	r2, [r7, #20]
 800ca3a:	609a      	str	r2, [r3, #8]
}
 800ca3c:	bf00      	nop
 800ca3e:	371c      	adds	r7, #28
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca48:	b480      	push	{r7}
 800ca4a:	b087      	sub	sp, #28
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	60f8      	str	r0, [r7, #12]
 800ca50:	60b9      	str	r1, [r7, #8]
 800ca52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	f003 031f 	and.w	r3, r3, #31
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	6a1a      	ldr	r2, [r3, #32]
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	43db      	mvns	r3, r3
 800ca6a:	401a      	ands	r2, r3
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	6a1a      	ldr	r2, [r3, #32]
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	f003 031f 	and.w	r3, r3, #31
 800ca7a:	6879      	ldr	r1, [r7, #4]
 800ca7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ca80:	431a      	orrs	r2, r3
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	621a      	str	r2, [r3, #32]
}
 800ca86:	bf00      	nop
 800ca88:	371c      	adds	r7, #28
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca90:	4770      	bx	lr
	...

0800ca94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d101      	bne.n	800caac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800caa8:	2302      	movs	r3, #2
 800caaa:	e06d      	b.n	800cb88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2202      	movs	r2, #2
 800cab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	689b      	ldr	r3, [r3, #8]
 800caca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a30      	ldr	r2, [pc, #192]	@ (800cb94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d004      	beq.n	800cae0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	4a2f      	ldr	r2, [pc, #188]	@ (800cb98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d108      	bne.n	800caf2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cae6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	4313      	orrs	r3, r2
 800caf0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800caf8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	68fa      	ldr	r2, [r7, #12]
 800cb00:	4313      	orrs	r3, r2
 800cb02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68fa      	ldr	r2, [r7, #12]
 800cb0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a20      	ldr	r2, [pc, #128]	@ (800cb94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d022      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb1e:	d01d      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a1d      	ldr	r2, [pc, #116]	@ (800cb9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d018      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a1c      	ldr	r2, [pc, #112]	@ (800cba0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d013      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a1a      	ldr	r2, [pc, #104]	@ (800cba4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d00e      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a15      	ldr	r2, [pc, #84]	@ (800cb98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d009      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	4a16      	ldr	r2, [pc, #88]	@ (800cba8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb4e:	4293      	cmp	r3, r2
 800cb50:	d004      	beq.n	800cb5c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	4a15      	ldr	r2, [pc, #84]	@ (800cbac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d10c      	bne.n	800cb76 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb62:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	4313      	orrs	r3, r2
 800cb6c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	68ba      	ldr	r2, [r7, #8]
 800cb74:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	2201      	movs	r2, #1
 800cb7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb86:	2300      	movs	r3, #0
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3714      	adds	r7, #20
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr
 800cb94:	40010000 	.word	0x40010000
 800cb98:	40010400 	.word	0x40010400
 800cb9c:	40000400 	.word	0x40000400
 800cba0:	40000800 	.word	0x40000800
 800cba4:	40000c00 	.word	0x40000c00
 800cba8:	40001800 	.word	0x40001800
 800cbac:	40014000 	.word	0x40014000

0800cbb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b083      	sub	sp, #12
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cbb8:	bf00      	nop
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cbcc:	bf00      	nop
 800cbce:	370c      	adds	r7, #12
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b083      	sub	sp, #12
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cbe0:	bf00      	nop
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d101      	bne.n	800cbfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e042      	b.n	800cc84 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d106      	bne.n	800cc16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f7f5 fcc9 	bl	80025a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2224      	movs	r2, #36	@ 0x24
 800cc1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f022 0201 	bic.w	r2, r2, #1
 800cc2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d002      	beq.n	800cc3c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 fe1e 	bl	800d878 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f000 f8b3 	bl	800cda8 <UART_SetConfig>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b01      	cmp	r3, #1
 800cc46:	d101      	bne.n	800cc4c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e01b      	b.n	800cc84 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	685a      	ldr	r2, [r3, #4]
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cc5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	689a      	ldr	r2, [r3, #8]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cc6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f042 0201 	orr.w	r2, r2, #1
 800cc7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f000 fe9d 	bl	800d9bc <UART_CheckIdleState>
 800cc82:	4603      	mov	r3, r0
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b08a      	sub	sp, #40	@ 0x28
 800cc90:	af02      	add	r7, sp, #8
 800cc92:	60f8      	str	r0, [r7, #12]
 800cc94:	60b9      	str	r1, [r7, #8]
 800cc96:	603b      	str	r3, [r7, #0]
 800cc98:	4613      	mov	r3, r2
 800cc9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cca2:	2b20      	cmp	r3, #32
 800cca4:	d17b      	bne.n	800cd9e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d002      	beq.n	800ccb2 <HAL_UART_Transmit+0x26>
 800ccac:	88fb      	ldrh	r3, [r7, #6]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e074      	b.n	800cda0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2200      	movs	r2, #0
 800ccba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2221      	movs	r2, #33	@ 0x21
 800ccc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ccc6:	f7f5 fe47 	bl	8002958 <HAL_GetTick>
 800ccca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	88fa      	ldrh	r2, [r7, #6]
 800ccd0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	88fa      	ldrh	r2, [r7, #6]
 800ccd8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cce4:	d108      	bne.n	800ccf8 <HAL_UART_Transmit+0x6c>
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	691b      	ldr	r3, [r3, #16]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d104      	bne.n	800ccf8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	61bb      	str	r3, [r7, #24]
 800ccf6:	e003      	b.n	800cd00 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cd00:	e030      	b.n	800cd64 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	9300      	str	r3, [sp, #0]
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	2180      	movs	r1, #128	@ 0x80
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f000 feff 	bl	800db10 <UART_WaitOnFlagUntilTimeout>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d005      	beq.n	800cd24 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2220      	movs	r2, #32
 800cd1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cd20:	2303      	movs	r3, #3
 800cd22:	e03d      	b.n	800cda0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d10b      	bne.n	800cd42 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	881b      	ldrh	r3, [r3, #0]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd38:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cd3a:	69bb      	ldr	r3, [r7, #24]
 800cd3c:	3302      	adds	r3, #2
 800cd3e:	61bb      	str	r3, [r7, #24]
 800cd40:	e007      	b.n	800cd52 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	781a      	ldrb	r2, [r3, #0]
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cd4c:	69fb      	ldr	r3, [r7, #28]
 800cd4e:	3301      	adds	r3, #1
 800cd50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1c8      	bne.n	800cd02 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	9300      	str	r3, [sp, #0]
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	2200      	movs	r2, #0
 800cd78:	2140      	movs	r1, #64	@ 0x40
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	f000 fec8 	bl	800db10 <UART_WaitOnFlagUntilTimeout>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d005      	beq.n	800cd92 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2220      	movs	r2, #32
 800cd8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cd8e:	2303      	movs	r3, #3
 800cd90:	e006      	b.n	800cda0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	2220      	movs	r2, #32
 800cd96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	e000      	b.n	800cda0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cd9e:	2302      	movs	r3, #2
  }
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3720      	adds	r7, #32
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}

0800cda8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cda8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdac:	b092      	sub	sp, #72	@ 0x48
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	689a      	ldr	r2, [r3, #8]
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	691b      	ldr	r3, [r3, #16]
 800cdc0:	431a      	orrs	r2, r3
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	695b      	ldr	r3, [r3, #20]
 800cdc6:	431a      	orrs	r2, r3
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	69db      	ldr	r3, [r3, #28]
 800cdcc:	4313      	orrs	r3, r2
 800cdce:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	4bbe      	ldr	r3, [pc, #760]	@ (800d0d0 <UART_SetConfig+0x328>)
 800cdd8:	4013      	ands	r3, r2
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	6812      	ldr	r2, [r2, #0]
 800cdde:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cde0:	430b      	orrs	r3, r1
 800cde2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	68da      	ldr	r2, [r3, #12]
 800cdf2:	697b      	ldr	r3, [r7, #20]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	430a      	orrs	r2, r1
 800cdf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	699b      	ldr	r3, [r3, #24]
 800cdfe:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ce00:	697b      	ldr	r3, [r7, #20]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4ab3      	ldr	r2, [pc, #716]	@ (800d0d4 <UART_SetConfig+0x32c>)
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d004      	beq.n	800ce14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ce0a:	697b      	ldr	r3, [r7, #20]
 800ce0c:	6a1b      	ldr	r3, [r3, #32]
 800ce0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce10:	4313      	orrs	r3, r2
 800ce12:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	689a      	ldr	r2, [r3, #8]
 800ce1a:	4baf      	ldr	r3, [pc, #700]	@ (800d0d8 <UART_SetConfig+0x330>)
 800ce1c:	4013      	ands	r3, r2
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	6812      	ldr	r2, [r2, #0]
 800ce22:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ce24:	430b      	orrs	r3, r1
 800ce26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce2e:	f023 010f 	bic.w	r1, r3, #15
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	430a      	orrs	r2, r1
 800ce3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	4aa6      	ldr	r2, [pc, #664]	@ (800d0dc <UART_SetConfig+0x334>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d177      	bne.n	800cf38 <UART_SetConfig+0x190>
 800ce48:	4ba5      	ldr	r3, [pc, #660]	@ (800d0e0 <UART_SetConfig+0x338>)
 800ce4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce50:	2b28      	cmp	r3, #40	@ 0x28
 800ce52:	d86d      	bhi.n	800cf30 <UART_SetConfig+0x188>
 800ce54:	a201      	add	r2, pc, #4	@ (adr r2, 800ce5c <UART_SetConfig+0xb4>)
 800ce56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce5a:	bf00      	nop
 800ce5c:	0800cf01 	.word	0x0800cf01
 800ce60:	0800cf31 	.word	0x0800cf31
 800ce64:	0800cf31 	.word	0x0800cf31
 800ce68:	0800cf31 	.word	0x0800cf31
 800ce6c:	0800cf31 	.word	0x0800cf31
 800ce70:	0800cf31 	.word	0x0800cf31
 800ce74:	0800cf31 	.word	0x0800cf31
 800ce78:	0800cf31 	.word	0x0800cf31
 800ce7c:	0800cf09 	.word	0x0800cf09
 800ce80:	0800cf31 	.word	0x0800cf31
 800ce84:	0800cf31 	.word	0x0800cf31
 800ce88:	0800cf31 	.word	0x0800cf31
 800ce8c:	0800cf31 	.word	0x0800cf31
 800ce90:	0800cf31 	.word	0x0800cf31
 800ce94:	0800cf31 	.word	0x0800cf31
 800ce98:	0800cf31 	.word	0x0800cf31
 800ce9c:	0800cf11 	.word	0x0800cf11
 800cea0:	0800cf31 	.word	0x0800cf31
 800cea4:	0800cf31 	.word	0x0800cf31
 800cea8:	0800cf31 	.word	0x0800cf31
 800ceac:	0800cf31 	.word	0x0800cf31
 800ceb0:	0800cf31 	.word	0x0800cf31
 800ceb4:	0800cf31 	.word	0x0800cf31
 800ceb8:	0800cf31 	.word	0x0800cf31
 800cebc:	0800cf19 	.word	0x0800cf19
 800cec0:	0800cf31 	.word	0x0800cf31
 800cec4:	0800cf31 	.word	0x0800cf31
 800cec8:	0800cf31 	.word	0x0800cf31
 800cecc:	0800cf31 	.word	0x0800cf31
 800ced0:	0800cf31 	.word	0x0800cf31
 800ced4:	0800cf31 	.word	0x0800cf31
 800ced8:	0800cf31 	.word	0x0800cf31
 800cedc:	0800cf21 	.word	0x0800cf21
 800cee0:	0800cf31 	.word	0x0800cf31
 800cee4:	0800cf31 	.word	0x0800cf31
 800cee8:	0800cf31 	.word	0x0800cf31
 800ceec:	0800cf31 	.word	0x0800cf31
 800cef0:	0800cf31 	.word	0x0800cf31
 800cef4:	0800cf31 	.word	0x0800cf31
 800cef8:	0800cf31 	.word	0x0800cf31
 800cefc:	0800cf29 	.word	0x0800cf29
 800cf00:	2301      	movs	r3, #1
 800cf02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf06:	e222      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cf08:	2304      	movs	r3, #4
 800cf0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf0e:	e21e      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cf10:	2308      	movs	r3, #8
 800cf12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf16:	e21a      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cf18:	2310      	movs	r3, #16
 800cf1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf1e:	e216      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cf20:	2320      	movs	r3, #32
 800cf22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf26:	e212      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cf28:	2340      	movs	r3, #64	@ 0x40
 800cf2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf2e:	e20e      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cf30:	2380      	movs	r3, #128	@ 0x80
 800cf32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf36:	e20a      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cf38:	697b      	ldr	r3, [r7, #20]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	4a69      	ldr	r2, [pc, #420]	@ (800d0e4 <UART_SetConfig+0x33c>)
 800cf3e:	4293      	cmp	r3, r2
 800cf40:	d130      	bne.n	800cfa4 <UART_SetConfig+0x1fc>
 800cf42:	4b67      	ldr	r3, [pc, #412]	@ (800d0e0 <UART_SetConfig+0x338>)
 800cf44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf46:	f003 0307 	and.w	r3, r3, #7
 800cf4a:	2b05      	cmp	r3, #5
 800cf4c:	d826      	bhi.n	800cf9c <UART_SetConfig+0x1f4>
 800cf4e:	a201      	add	r2, pc, #4	@ (adr r2, 800cf54 <UART_SetConfig+0x1ac>)
 800cf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf54:	0800cf6d 	.word	0x0800cf6d
 800cf58:	0800cf75 	.word	0x0800cf75
 800cf5c:	0800cf7d 	.word	0x0800cf7d
 800cf60:	0800cf85 	.word	0x0800cf85
 800cf64:	0800cf8d 	.word	0x0800cf8d
 800cf68:	0800cf95 	.word	0x0800cf95
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf72:	e1ec      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cf74:	2304      	movs	r3, #4
 800cf76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf7a:	e1e8      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cf7c:	2308      	movs	r3, #8
 800cf7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf82:	e1e4      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cf84:	2310      	movs	r3, #16
 800cf86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf8a:	e1e0      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cf8c:	2320      	movs	r3, #32
 800cf8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf92:	e1dc      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cf94:	2340      	movs	r3, #64	@ 0x40
 800cf96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf9a:	e1d8      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cf9c:	2380      	movs	r3, #128	@ 0x80
 800cf9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfa2:	e1d4      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	4a4f      	ldr	r2, [pc, #316]	@ (800d0e8 <UART_SetConfig+0x340>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d130      	bne.n	800d010 <UART_SetConfig+0x268>
 800cfae:	4b4c      	ldr	r3, [pc, #304]	@ (800d0e0 <UART_SetConfig+0x338>)
 800cfb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfb2:	f003 0307 	and.w	r3, r3, #7
 800cfb6:	2b05      	cmp	r3, #5
 800cfb8:	d826      	bhi.n	800d008 <UART_SetConfig+0x260>
 800cfba:	a201      	add	r2, pc, #4	@ (adr r2, 800cfc0 <UART_SetConfig+0x218>)
 800cfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc0:	0800cfd9 	.word	0x0800cfd9
 800cfc4:	0800cfe1 	.word	0x0800cfe1
 800cfc8:	0800cfe9 	.word	0x0800cfe9
 800cfcc:	0800cff1 	.word	0x0800cff1
 800cfd0:	0800cff9 	.word	0x0800cff9
 800cfd4:	0800d001 	.word	0x0800d001
 800cfd8:	2300      	movs	r3, #0
 800cfda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfde:	e1b6      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cfe0:	2304      	movs	r3, #4
 800cfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfe6:	e1b2      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cfe8:	2308      	movs	r3, #8
 800cfea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfee:	e1ae      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cff0:	2310      	movs	r3, #16
 800cff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cff6:	e1aa      	b.n	800d34e <UART_SetConfig+0x5a6>
 800cff8:	2320      	movs	r3, #32
 800cffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cffe:	e1a6      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d000:	2340      	movs	r3, #64	@ 0x40
 800d002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d006:	e1a2      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d008:	2380      	movs	r3, #128	@ 0x80
 800d00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00e:	e19e      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	4a35      	ldr	r2, [pc, #212]	@ (800d0ec <UART_SetConfig+0x344>)
 800d016:	4293      	cmp	r3, r2
 800d018:	d130      	bne.n	800d07c <UART_SetConfig+0x2d4>
 800d01a:	4b31      	ldr	r3, [pc, #196]	@ (800d0e0 <UART_SetConfig+0x338>)
 800d01c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d01e:	f003 0307 	and.w	r3, r3, #7
 800d022:	2b05      	cmp	r3, #5
 800d024:	d826      	bhi.n	800d074 <UART_SetConfig+0x2cc>
 800d026:	a201      	add	r2, pc, #4	@ (adr r2, 800d02c <UART_SetConfig+0x284>)
 800d028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d02c:	0800d045 	.word	0x0800d045
 800d030:	0800d04d 	.word	0x0800d04d
 800d034:	0800d055 	.word	0x0800d055
 800d038:	0800d05d 	.word	0x0800d05d
 800d03c:	0800d065 	.word	0x0800d065
 800d040:	0800d06d 	.word	0x0800d06d
 800d044:	2300      	movs	r3, #0
 800d046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d04a:	e180      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d04c:	2304      	movs	r3, #4
 800d04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d052:	e17c      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d054:	2308      	movs	r3, #8
 800d056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d05a:	e178      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d05c:	2310      	movs	r3, #16
 800d05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d062:	e174      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d064:	2320      	movs	r3, #32
 800d066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d06a:	e170      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d06c:	2340      	movs	r3, #64	@ 0x40
 800d06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d072:	e16c      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d074:	2380      	movs	r3, #128	@ 0x80
 800d076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07a:	e168      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	4a1b      	ldr	r2, [pc, #108]	@ (800d0f0 <UART_SetConfig+0x348>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d142      	bne.n	800d10c <UART_SetConfig+0x364>
 800d086:	4b16      	ldr	r3, [pc, #88]	@ (800d0e0 <UART_SetConfig+0x338>)
 800d088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d08a:	f003 0307 	and.w	r3, r3, #7
 800d08e:	2b05      	cmp	r3, #5
 800d090:	d838      	bhi.n	800d104 <UART_SetConfig+0x35c>
 800d092:	a201      	add	r2, pc, #4	@ (adr r2, 800d098 <UART_SetConfig+0x2f0>)
 800d094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d098:	0800d0b1 	.word	0x0800d0b1
 800d09c:	0800d0b9 	.word	0x0800d0b9
 800d0a0:	0800d0c1 	.word	0x0800d0c1
 800d0a4:	0800d0c9 	.word	0x0800d0c9
 800d0a8:	0800d0f5 	.word	0x0800d0f5
 800d0ac:	0800d0fd 	.word	0x0800d0fd
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0b6:	e14a      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d0b8:	2304      	movs	r3, #4
 800d0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0be:	e146      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d0c0:	2308      	movs	r3, #8
 800d0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0c6:	e142      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d0c8:	2310      	movs	r3, #16
 800d0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ce:	e13e      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d0d0:	cfff69f3 	.word	0xcfff69f3
 800d0d4:	58000c00 	.word	0x58000c00
 800d0d8:	11fff4ff 	.word	0x11fff4ff
 800d0dc:	40011000 	.word	0x40011000
 800d0e0:	58024400 	.word	0x58024400
 800d0e4:	40004400 	.word	0x40004400
 800d0e8:	40004800 	.word	0x40004800
 800d0ec:	40004c00 	.word	0x40004c00
 800d0f0:	40005000 	.word	0x40005000
 800d0f4:	2320      	movs	r3, #32
 800d0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0fa:	e128      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d0fc:	2340      	movs	r3, #64	@ 0x40
 800d0fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d102:	e124      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d104:	2380      	movs	r3, #128	@ 0x80
 800d106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d10a:	e120      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	4acb      	ldr	r2, [pc, #812]	@ (800d440 <UART_SetConfig+0x698>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d176      	bne.n	800d204 <UART_SetConfig+0x45c>
 800d116:	4bcb      	ldr	r3, [pc, #812]	@ (800d444 <UART_SetConfig+0x69c>)
 800d118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d11a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d11e:	2b28      	cmp	r3, #40	@ 0x28
 800d120:	d86c      	bhi.n	800d1fc <UART_SetConfig+0x454>
 800d122:	a201      	add	r2, pc, #4	@ (adr r2, 800d128 <UART_SetConfig+0x380>)
 800d124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d128:	0800d1cd 	.word	0x0800d1cd
 800d12c:	0800d1fd 	.word	0x0800d1fd
 800d130:	0800d1fd 	.word	0x0800d1fd
 800d134:	0800d1fd 	.word	0x0800d1fd
 800d138:	0800d1fd 	.word	0x0800d1fd
 800d13c:	0800d1fd 	.word	0x0800d1fd
 800d140:	0800d1fd 	.word	0x0800d1fd
 800d144:	0800d1fd 	.word	0x0800d1fd
 800d148:	0800d1d5 	.word	0x0800d1d5
 800d14c:	0800d1fd 	.word	0x0800d1fd
 800d150:	0800d1fd 	.word	0x0800d1fd
 800d154:	0800d1fd 	.word	0x0800d1fd
 800d158:	0800d1fd 	.word	0x0800d1fd
 800d15c:	0800d1fd 	.word	0x0800d1fd
 800d160:	0800d1fd 	.word	0x0800d1fd
 800d164:	0800d1fd 	.word	0x0800d1fd
 800d168:	0800d1dd 	.word	0x0800d1dd
 800d16c:	0800d1fd 	.word	0x0800d1fd
 800d170:	0800d1fd 	.word	0x0800d1fd
 800d174:	0800d1fd 	.word	0x0800d1fd
 800d178:	0800d1fd 	.word	0x0800d1fd
 800d17c:	0800d1fd 	.word	0x0800d1fd
 800d180:	0800d1fd 	.word	0x0800d1fd
 800d184:	0800d1fd 	.word	0x0800d1fd
 800d188:	0800d1e5 	.word	0x0800d1e5
 800d18c:	0800d1fd 	.word	0x0800d1fd
 800d190:	0800d1fd 	.word	0x0800d1fd
 800d194:	0800d1fd 	.word	0x0800d1fd
 800d198:	0800d1fd 	.word	0x0800d1fd
 800d19c:	0800d1fd 	.word	0x0800d1fd
 800d1a0:	0800d1fd 	.word	0x0800d1fd
 800d1a4:	0800d1fd 	.word	0x0800d1fd
 800d1a8:	0800d1ed 	.word	0x0800d1ed
 800d1ac:	0800d1fd 	.word	0x0800d1fd
 800d1b0:	0800d1fd 	.word	0x0800d1fd
 800d1b4:	0800d1fd 	.word	0x0800d1fd
 800d1b8:	0800d1fd 	.word	0x0800d1fd
 800d1bc:	0800d1fd 	.word	0x0800d1fd
 800d1c0:	0800d1fd 	.word	0x0800d1fd
 800d1c4:	0800d1fd 	.word	0x0800d1fd
 800d1c8:	0800d1f5 	.word	0x0800d1f5
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1d2:	e0bc      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d1d4:	2304      	movs	r3, #4
 800d1d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1da:	e0b8      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d1dc:	2308      	movs	r3, #8
 800d1de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1e2:	e0b4      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d1e4:	2310      	movs	r3, #16
 800d1e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ea:	e0b0      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d1ec:	2320      	movs	r3, #32
 800d1ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1f2:	e0ac      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d1f4:	2340      	movs	r3, #64	@ 0x40
 800d1f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1fa:	e0a8      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d1fc:	2380      	movs	r3, #128	@ 0x80
 800d1fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d202:	e0a4      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d204:	697b      	ldr	r3, [r7, #20]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a8f      	ldr	r2, [pc, #572]	@ (800d448 <UART_SetConfig+0x6a0>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d130      	bne.n	800d270 <UART_SetConfig+0x4c8>
 800d20e:	4b8d      	ldr	r3, [pc, #564]	@ (800d444 <UART_SetConfig+0x69c>)
 800d210:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d212:	f003 0307 	and.w	r3, r3, #7
 800d216:	2b05      	cmp	r3, #5
 800d218:	d826      	bhi.n	800d268 <UART_SetConfig+0x4c0>
 800d21a:	a201      	add	r2, pc, #4	@ (adr r2, 800d220 <UART_SetConfig+0x478>)
 800d21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d220:	0800d239 	.word	0x0800d239
 800d224:	0800d241 	.word	0x0800d241
 800d228:	0800d249 	.word	0x0800d249
 800d22c:	0800d251 	.word	0x0800d251
 800d230:	0800d259 	.word	0x0800d259
 800d234:	0800d261 	.word	0x0800d261
 800d238:	2300      	movs	r3, #0
 800d23a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d23e:	e086      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d240:	2304      	movs	r3, #4
 800d242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d246:	e082      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d248:	2308      	movs	r3, #8
 800d24a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d24e:	e07e      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d250:	2310      	movs	r3, #16
 800d252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d256:	e07a      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d258:	2320      	movs	r3, #32
 800d25a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d25e:	e076      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d260:	2340      	movs	r3, #64	@ 0x40
 800d262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d266:	e072      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d268:	2380      	movs	r3, #128	@ 0x80
 800d26a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26e:	e06e      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4a75      	ldr	r2, [pc, #468]	@ (800d44c <UART_SetConfig+0x6a4>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d130      	bne.n	800d2dc <UART_SetConfig+0x534>
 800d27a:	4b72      	ldr	r3, [pc, #456]	@ (800d444 <UART_SetConfig+0x69c>)
 800d27c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d27e:	f003 0307 	and.w	r3, r3, #7
 800d282:	2b05      	cmp	r3, #5
 800d284:	d826      	bhi.n	800d2d4 <UART_SetConfig+0x52c>
 800d286:	a201      	add	r2, pc, #4	@ (adr r2, 800d28c <UART_SetConfig+0x4e4>)
 800d288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d28c:	0800d2a5 	.word	0x0800d2a5
 800d290:	0800d2ad 	.word	0x0800d2ad
 800d294:	0800d2b5 	.word	0x0800d2b5
 800d298:	0800d2bd 	.word	0x0800d2bd
 800d29c:	0800d2c5 	.word	0x0800d2c5
 800d2a0:	0800d2cd 	.word	0x0800d2cd
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2aa:	e050      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d2ac:	2304      	movs	r3, #4
 800d2ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2b2:	e04c      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d2b4:	2308      	movs	r3, #8
 800d2b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ba:	e048      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d2bc:	2310      	movs	r3, #16
 800d2be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2c2:	e044      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d2c4:	2320      	movs	r3, #32
 800d2c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ca:	e040      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d2cc:	2340      	movs	r3, #64	@ 0x40
 800d2ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2d2:	e03c      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d2d4:	2380      	movs	r3, #128	@ 0x80
 800d2d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2da:	e038      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	4a5b      	ldr	r2, [pc, #364]	@ (800d450 <UART_SetConfig+0x6a8>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d130      	bne.n	800d348 <UART_SetConfig+0x5a0>
 800d2e6:	4b57      	ldr	r3, [pc, #348]	@ (800d444 <UART_SetConfig+0x69c>)
 800d2e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2ea:	f003 0307 	and.w	r3, r3, #7
 800d2ee:	2b05      	cmp	r3, #5
 800d2f0:	d826      	bhi.n	800d340 <UART_SetConfig+0x598>
 800d2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d2f8 <UART_SetConfig+0x550>)
 800d2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2f8:	0800d311 	.word	0x0800d311
 800d2fc:	0800d319 	.word	0x0800d319
 800d300:	0800d321 	.word	0x0800d321
 800d304:	0800d329 	.word	0x0800d329
 800d308:	0800d331 	.word	0x0800d331
 800d30c:	0800d339 	.word	0x0800d339
 800d310:	2302      	movs	r3, #2
 800d312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d316:	e01a      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d318:	2304      	movs	r3, #4
 800d31a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d31e:	e016      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d320:	2308      	movs	r3, #8
 800d322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d326:	e012      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d328:	2310      	movs	r3, #16
 800d32a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d32e:	e00e      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d330:	2320      	movs	r3, #32
 800d332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d336:	e00a      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d338:	2340      	movs	r3, #64	@ 0x40
 800d33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d33e:	e006      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d340:	2380      	movs	r3, #128	@ 0x80
 800d342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d346:	e002      	b.n	800d34e <UART_SetConfig+0x5a6>
 800d348:	2380      	movs	r3, #128	@ 0x80
 800d34a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	4a3f      	ldr	r2, [pc, #252]	@ (800d450 <UART_SetConfig+0x6a8>)
 800d354:	4293      	cmp	r3, r2
 800d356:	f040 80f8 	bne.w	800d54a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d35a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d35e:	2b20      	cmp	r3, #32
 800d360:	dc46      	bgt.n	800d3f0 <UART_SetConfig+0x648>
 800d362:	2b02      	cmp	r3, #2
 800d364:	f2c0 8082 	blt.w	800d46c <UART_SetConfig+0x6c4>
 800d368:	3b02      	subs	r3, #2
 800d36a:	2b1e      	cmp	r3, #30
 800d36c:	d87e      	bhi.n	800d46c <UART_SetConfig+0x6c4>
 800d36e:	a201      	add	r2, pc, #4	@ (adr r2, 800d374 <UART_SetConfig+0x5cc>)
 800d370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d374:	0800d3f7 	.word	0x0800d3f7
 800d378:	0800d46d 	.word	0x0800d46d
 800d37c:	0800d3ff 	.word	0x0800d3ff
 800d380:	0800d46d 	.word	0x0800d46d
 800d384:	0800d46d 	.word	0x0800d46d
 800d388:	0800d46d 	.word	0x0800d46d
 800d38c:	0800d40f 	.word	0x0800d40f
 800d390:	0800d46d 	.word	0x0800d46d
 800d394:	0800d46d 	.word	0x0800d46d
 800d398:	0800d46d 	.word	0x0800d46d
 800d39c:	0800d46d 	.word	0x0800d46d
 800d3a0:	0800d46d 	.word	0x0800d46d
 800d3a4:	0800d46d 	.word	0x0800d46d
 800d3a8:	0800d46d 	.word	0x0800d46d
 800d3ac:	0800d41f 	.word	0x0800d41f
 800d3b0:	0800d46d 	.word	0x0800d46d
 800d3b4:	0800d46d 	.word	0x0800d46d
 800d3b8:	0800d46d 	.word	0x0800d46d
 800d3bc:	0800d46d 	.word	0x0800d46d
 800d3c0:	0800d46d 	.word	0x0800d46d
 800d3c4:	0800d46d 	.word	0x0800d46d
 800d3c8:	0800d46d 	.word	0x0800d46d
 800d3cc:	0800d46d 	.word	0x0800d46d
 800d3d0:	0800d46d 	.word	0x0800d46d
 800d3d4:	0800d46d 	.word	0x0800d46d
 800d3d8:	0800d46d 	.word	0x0800d46d
 800d3dc:	0800d46d 	.word	0x0800d46d
 800d3e0:	0800d46d 	.word	0x0800d46d
 800d3e4:	0800d46d 	.word	0x0800d46d
 800d3e8:	0800d46d 	.word	0x0800d46d
 800d3ec:	0800d45f 	.word	0x0800d45f
 800d3f0:	2b40      	cmp	r3, #64	@ 0x40
 800d3f2:	d037      	beq.n	800d464 <UART_SetConfig+0x6bc>
 800d3f4:	e03a      	b.n	800d46c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d3f6:	f7fc fea3 	bl	800a140 <HAL_RCCEx_GetD3PCLK1Freq>
 800d3fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d3fc:	e03c      	b.n	800d478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d402:	4618      	mov	r0, r3
 800d404:	f7fc feb2 	bl	800a16c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d40c:	e034      	b.n	800d478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d40e:	f107 0318 	add.w	r3, r7, #24
 800d412:	4618      	mov	r0, r3
 800d414:	f7fc fffe 	bl	800a414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d41c:	e02c      	b.n	800d478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d41e:	4b09      	ldr	r3, [pc, #36]	@ (800d444 <UART_SetConfig+0x69c>)
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	f003 0320 	and.w	r3, r3, #32
 800d426:	2b00      	cmp	r3, #0
 800d428:	d016      	beq.n	800d458 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d42a:	4b06      	ldr	r3, [pc, #24]	@ (800d444 <UART_SetConfig+0x69c>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	08db      	lsrs	r3, r3, #3
 800d430:	f003 0303 	and.w	r3, r3, #3
 800d434:	4a07      	ldr	r2, [pc, #28]	@ (800d454 <UART_SetConfig+0x6ac>)
 800d436:	fa22 f303 	lsr.w	r3, r2, r3
 800d43a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d43c:	e01c      	b.n	800d478 <UART_SetConfig+0x6d0>
 800d43e:	bf00      	nop
 800d440:	40011400 	.word	0x40011400
 800d444:	58024400 	.word	0x58024400
 800d448:	40007800 	.word	0x40007800
 800d44c:	40007c00 	.word	0x40007c00
 800d450:	58000c00 	.word	0x58000c00
 800d454:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d458:	4b9d      	ldr	r3, [pc, #628]	@ (800d6d0 <UART_SetConfig+0x928>)
 800d45a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d45c:	e00c      	b.n	800d478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d45e:	4b9d      	ldr	r3, [pc, #628]	@ (800d6d4 <UART_SetConfig+0x92c>)
 800d460:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d462:	e009      	b.n	800d478 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d464:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d46a:	e005      	b.n	800d478 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d46c:	2300      	movs	r3, #0
 800d46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d470:	2301      	movs	r3, #1
 800d472:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d476:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f000 81de 	beq.w	800d83c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d484:	4a94      	ldr	r2, [pc, #592]	@ (800d6d8 <UART_SetConfig+0x930>)
 800d486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d48a:	461a      	mov	r2, r3
 800d48c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d48e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d492:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	685a      	ldr	r2, [r3, #4]
 800d498:	4613      	mov	r3, r2
 800d49a:	005b      	lsls	r3, r3, #1
 800d49c:	4413      	add	r3, r2
 800d49e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d305      	bcc.n	800d4b0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d903      	bls.n	800d4b8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d4b6:	e1c1      	b.n	800d83c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	60bb      	str	r3, [r7, #8]
 800d4be:	60fa      	str	r2, [r7, #12]
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4c4:	4a84      	ldr	r2, [pc, #528]	@ (800d6d8 <UART_SetConfig+0x930>)
 800d4c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4ca:	b29b      	uxth	r3, r3
 800d4cc:	2200      	movs	r2, #0
 800d4ce:	603b      	str	r3, [r7, #0]
 800d4d0:	607a      	str	r2, [r7, #4]
 800d4d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d4da:	f7f2 ff59 	bl	8000390 <__aeabi_uldivmod>
 800d4de:	4602      	mov	r2, r0
 800d4e0:	460b      	mov	r3, r1
 800d4e2:	4610      	mov	r0, r2
 800d4e4:	4619      	mov	r1, r3
 800d4e6:	f04f 0200 	mov.w	r2, #0
 800d4ea:	f04f 0300 	mov.w	r3, #0
 800d4ee:	020b      	lsls	r3, r1, #8
 800d4f0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d4f4:	0202      	lsls	r2, r0, #8
 800d4f6:	6979      	ldr	r1, [r7, #20]
 800d4f8:	6849      	ldr	r1, [r1, #4]
 800d4fa:	0849      	lsrs	r1, r1, #1
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	460c      	mov	r4, r1
 800d500:	4605      	mov	r5, r0
 800d502:	eb12 0804 	adds.w	r8, r2, r4
 800d506:	eb43 0905 	adc.w	r9, r3, r5
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	685b      	ldr	r3, [r3, #4]
 800d50e:	2200      	movs	r2, #0
 800d510:	469a      	mov	sl, r3
 800d512:	4693      	mov	fp, r2
 800d514:	4652      	mov	r2, sl
 800d516:	465b      	mov	r3, fp
 800d518:	4640      	mov	r0, r8
 800d51a:	4649      	mov	r1, r9
 800d51c:	f7f2 ff38 	bl	8000390 <__aeabi_uldivmod>
 800d520:	4602      	mov	r2, r0
 800d522:	460b      	mov	r3, r1
 800d524:	4613      	mov	r3, r2
 800d526:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d52a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d52e:	d308      	bcc.n	800d542 <UART_SetConfig+0x79a>
 800d530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d532:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d536:	d204      	bcs.n	800d542 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d53e:	60da      	str	r2, [r3, #12]
 800d540:	e17c      	b.n	800d83c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d548:	e178      	b.n	800d83c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	69db      	ldr	r3, [r3, #28]
 800d54e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d552:	f040 80c5 	bne.w	800d6e0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d556:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d55a:	2b20      	cmp	r3, #32
 800d55c:	dc48      	bgt.n	800d5f0 <UART_SetConfig+0x848>
 800d55e:	2b00      	cmp	r3, #0
 800d560:	db7b      	blt.n	800d65a <UART_SetConfig+0x8b2>
 800d562:	2b20      	cmp	r3, #32
 800d564:	d879      	bhi.n	800d65a <UART_SetConfig+0x8b2>
 800d566:	a201      	add	r2, pc, #4	@ (adr r2, 800d56c <UART_SetConfig+0x7c4>)
 800d568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d56c:	0800d5f7 	.word	0x0800d5f7
 800d570:	0800d5ff 	.word	0x0800d5ff
 800d574:	0800d65b 	.word	0x0800d65b
 800d578:	0800d65b 	.word	0x0800d65b
 800d57c:	0800d607 	.word	0x0800d607
 800d580:	0800d65b 	.word	0x0800d65b
 800d584:	0800d65b 	.word	0x0800d65b
 800d588:	0800d65b 	.word	0x0800d65b
 800d58c:	0800d617 	.word	0x0800d617
 800d590:	0800d65b 	.word	0x0800d65b
 800d594:	0800d65b 	.word	0x0800d65b
 800d598:	0800d65b 	.word	0x0800d65b
 800d59c:	0800d65b 	.word	0x0800d65b
 800d5a0:	0800d65b 	.word	0x0800d65b
 800d5a4:	0800d65b 	.word	0x0800d65b
 800d5a8:	0800d65b 	.word	0x0800d65b
 800d5ac:	0800d627 	.word	0x0800d627
 800d5b0:	0800d65b 	.word	0x0800d65b
 800d5b4:	0800d65b 	.word	0x0800d65b
 800d5b8:	0800d65b 	.word	0x0800d65b
 800d5bc:	0800d65b 	.word	0x0800d65b
 800d5c0:	0800d65b 	.word	0x0800d65b
 800d5c4:	0800d65b 	.word	0x0800d65b
 800d5c8:	0800d65b 	.word	0x0800d65b
 800d5cc:	0800d65b 	.word	0x0800d65b
 800d5d0:	0800d65b 	.word	0x0800d65b
 800d5d4:	0800d65b 	.word	0x0800d65b
 800d5d8:	0800d65b 	.word	0x0800d65b
 800d5dc:	0800d65b 	.word	0x0800d65b
 800d5e0:	0800d65b 	.word	0x0800d65b
 800d5e4:	0800d65b 	.word	0x0800d65b
 800d5e8:	0800d65b 	.word	0x0800d65b
 800d5ec:	0800d64d 	.word	0x0800d64d
 800d5f0:	2b40      	cmp	r3, #64	@ 0x40
 800d5f2:	d02e      	beq.n	800d652 <UART_SetConfig+0x8aa>
 800d5f4:	e031      	b.n	800d65a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5f6:	f7fb fb6d 	bl	8008cd4 <HAL_RCC_GetPCLK1Freq>
 800d5fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5fc:	e033      	b.n	800d666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5fe:	f7fb fb7f 	bl	8008d00 <HAL_RCC_GetPCLK2Freq>
 800d602:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d604:	e02f      	b.n	800d666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d60a:	4618      	mov	r0, r3
 800d60c:	f7fc fdae 	bl	800a16c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d614:	e027      	b.n	800d666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d616:	f107 0318 	add.w	r3, r7, #24
 800d61a:	4618      	mov	r0, r3
 800d61c:	f7fc fefa 	bl	800a414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d624:	e01f      	b.n	800d666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d626:	4b2d      	ldr	r3, [pc, #180]	@ (800d6dc <UART_SetConfig+0x934>)
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	f003 0320 	and.w	r3, r3, #32
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d009      	beq.n	800d646 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d632:	4b2a      	ldr	r3, [pc, #168]	@ (800d6dc <UART_SetConfig+0x934>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	08db      	lsrs	r3, r3, #3
 800d638:	f003 0303 	and.w	r3, r3, #3
 800d63c:	4a24      	ldr	r2, [pc, #144]	@ (800d6d0 <UART_SetConfig+0x928>)
 800d63e:	fa22 f303 	lsr.w	r3, r2, r3
 800d642:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d644:	e00f      	b.n	800d666 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d646:	4b22      	ldr	r3, [pc, #136]	@ (800d6d0 <UART_SetConfig+0x928>)
 800d648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d64a:	e00c      	b.n	800d666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d64c:	4b21      	ldr	r3, [pc, #132]	@ (800d6d4 <UART_SetConfig+0x92c>)
 800d64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d650:	e009      	b.n	800d666 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d652:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d658:	e005      	b.n	800d666 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d65a:	2300      	movs	r3, #0
 800d65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d65e:	2301      	movs	r3, #1
 800d660:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d664:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d668:	2b00      	cmp	r3, #0
 800d66a:	f000 80e7 	beq.w	800d83c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d672:	4a19      	ldr	r2, [pc, #100]	@ (800d6d8 <UART_SetConfig+0x930>)
 800d674:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d678:	461a      	mov	r2, r3
 800d67a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d67c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d680:	005a      	lsls	r2, r3, #1
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	085b      	lsrs	r3, r3, #1
 800d688:	441a      	add	r2, r3
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	685b      	ldr	r3, [r3, #4]
 800d68e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d692:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d696:	2b0f      	cmp	r3, #15
 800d698:	d916      	bls.n	800d6c8 <UART_SetConfig+0x920>
 800d69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6a0:	d212      	bcs.n	800d6c8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	f023 030f 	bic.w	r3, r3, #15
 800d6aa:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ae:	085b      	lsrs	r3, r3, #1
 800d6b0:	b29b      	uxth	r3, r3
 800d6b2:	f003 0307 	and.w	r3, r3, #7
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d6ba:	4313      	orrs	r3, r2
 800d6bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d6c4:	60da      	str	r2, [r3, #12]
 800d6c6:	e0b9      	b.n	800d83c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d6ce:	e0b5      	b.n	800d83c <UART_SetConfig+0xa94>
 800d6d0:	03d09000 	.word	0x03d09000
 800d6d4:	003d0900 	.word	0x003d0900
 800d6d8:	0800f02c 	.word	0x0800f02c
 800d6dc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d6e0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d6e4:	2b20      	cmp	r3, #32
 800d6e6:	dc49      	bgt.n	800d77c <UART_SetConfig+0x9d4>
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	db7c      	blt.n	800d7e6 <UART_SetConfig+0xa3e>
 800d6ec:	2b20      	cmp	r3, #32
 800d6ee:	d87a      	bhi.n	800d7e6 <UART_SetConfig+0xa3e>
 800d6f0:	a201      	add	r2, pc, #4	@ (adr r2, 800d6f8 <UART_SetConfig+0x950>)
 800d6f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f6:	bf00      	nop
 800d6f8:	0800d783 	.word	0x0800d783
 800d6fc:	0800d78b 	.word	0x0800d78b
 800d700:	0800d7e7 	.word	0x0800d7e7
 800d704:	0800d7e7 	.word	0x0800d7e7
 800d708:	0800d793 	.word	0x0800d793
 800d70c:	0800d7e7 	.word	0x0800d7e7
 800d710:	0800d7e7 	.word	0x0800d7e7
 800d714:	0800d7e7 	.word	0x0800d7e7
 800d718:	0800d7a3 	.word	0x0800d7a3
 800d71c:	0800d7e7 	.word	0x0800d7e7
 800d720:	0800d7e7 	.word	0x0800d7e7
 800d724:	0800d7e7 	.word	0x0800d7e7
 800d728:	0800d7e7 	.word	0x0800d7e7
 800d72c:	0800d7e7 	.word	0x0800d7e7
 800d730:	0800d7e7 	.word	0x0800d7e7
 800d734:	0800d7e7 	.word	0x0800d7e7
 800d738:	0800d7b3 	.word	0x0800d7b3
 800d73c:	0800d7e7 	.word	0x0800d7e7
 800d740:	0800d7e7 	.word	0x0800d7e7
 800d744:	0800d7e7 	.word	0x0800d7e7
 800d748:	0800d7e7 	.word	0x0800d7e7
 800d74c:	0800d7e7 	.word	0x0800d7e7
 800d750:	0800d7e7 	.word	0x0800d7e7
 800d754:	0800d7e7 	.word	0x0800d7e7
 800d758:	0800d7e7 	.word	0x0800d7e7
 800d75c:	0800d7e7 	.word	0x0800d7e7
 800d760:	0800d7e7 	.word	0x0800d7e7
 800d764:	0800d7e7 	.word	0x0800d7e7
 800d768:	0800d7e7 	.word	0x0800d7e7
 800d76c:	0800d7e7 	.word	0x0800d7e7
 800d770:	0800d7e7 	.word	0x0800d7e7
 800d774:	0800d7e7 	.word	0x0800d7e7
 800d778:	0800d7d9 	.word	0x0800d7d9
 800d77c:	2b40      	cmp	r3, #64	@ 0x40
 800d77e:	d02e      	beq.n	800d7de <UART_SetConfig+0xa36>
 800d780:	e031      	b.n	800d7e6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d782:	f7fb faa7 	bl	8008cd4 <HAL_RCC_GetPCLK1Freq>
 800d786:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d788:	e033      	b.n	800d7f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d78a:	f7fb fab9 	bl	8008d00 <HAL_RCC_GetPCLK2Freq>
 800d78e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d790:	e02f      	b.n	800d7f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d792:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d796:	4618      	mov	r0, r3
 800d798:	f7fc fce8 	bl	800a16c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d79c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7a0:	e027      	b.n	800d7f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7a2:	f107 0318 	add.w	r3, r7, #24
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fc fe34 	bl	800a414 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7b0:	e01f      	b.n	800d7f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7b2:	4b2d      	ldr	r3, [pc, #180]	@ (800d868 <UART_SetConfig+0xac0>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f003 0320 	and.w	r3, r3, #32
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d009      	beq.n	800d7d2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7be:	4b2a      	ldr	r3, [pc, #168]	@ (800d868 <UART_SetConfig+0xac0>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	08db      	lsrs	r3, r3, #3
 800d7c4:	f003 0303 	and.w	r3, r3, #3
 800d7c8:	4a28      	ldr	r2, [pc, #160]	@ (800d86c <UART_SetConfig+0xac4>)
 800d7ca:	fa22 f303 	lsr.w	r3, r2, r3
 800d7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7d0:	e00f      	b.n	800d7f2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d7d2:	4b26      	ldr	r3, [pc, #152]	@ (800d86c <UART_SetConfig+0xac4>)
 800d7d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7d6:	e00c      	b.n	800d7f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d7d8:	4b25      	ldr	r3, [pc, #148]	@ (800d870 <UART_SetConfig+0xac8>)
 800d7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7dc:	e009      	b.n	800d7f2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d7de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7e4:	e005      	b.n	800d7f2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d7f0:	bf00      	nop
    }

    if (pclk != 0U)
 800d7f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d021      	beq.n	800d83c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7fc:	4a1d      	ldr	r2, [pc, #116]	@ (800d874 <UART_SetConfig+0xacc>)
 800d7fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d802:	461a      	mov	r2, r3
 800d804:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d806:	fbb3 f2f2 	udiv	r2, r3, r2
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	085b      	lsrs	r3, r3, #1
 800d810:	441a      	add	r2, r3
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	fbb2 f3f3 	udiv	r3, r2, r3
 800d81a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d81e:	2b0f      	cmp	r3, #15
 800d820:	d909      	bls.n	800d836 <UART_SetConfig+0xa8e>
 800d822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d828:	d205      	bcs.n	800d836 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d82c:	b29a      	uxth	r2, r3
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	60da      	str	r2, [r3, #12]
 800d834:	e002      	b.n	800d83c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d836:	2301      	movs	r3, #1
 800d838:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	2201      	movs	r2, #1
 800d840:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d844:	697b      	ldr	r3, [r7, #20]
 800d846:	2201      	movs	r2, #1
 800d848:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d84c:	697b      	ldr	r3, [r7, #20]
 800d84e:	2200      	movs	r2, #0
 800d850:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	2200      	movs	r2, #0
 800d856:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d858:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3748      	adds	r7, #72	@ 0x48
 800d860:	46bd      	mov	sp, r7
 800d862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d866:	bf00      	nop
 800d868:	58024400 	.word	0x58024400
 800d86c:	03d09000 	.word	0x03d09000
 800d870:	003d0900 	.word	0x003d0900
 800d874:	0800f02c 	.word	0x0800f02c

0800d878 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d878:	b480      	push	{r7}
 800d87a:	b083      	sub	sp, #12
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d884:	f003 0308 	and.w	r3, r3, #8
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d00a      	beq.n	800d8a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	685b      	ldr	r3, [r3, #4]
 800d892:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	430a      	orrs	r2, r1
 800d8a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8a6:	f003 0301 	and.w	r3, r3, #1
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d00a      	beq.n	800d8c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	685b      	ldr	r3, [r3, #4]
 800d8b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	430a      	orrs	r2, r1
 800d8c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8c8:	f003 0302 	and.w	r3, r3, #2
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d00a      	beq.n	800d8e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	685b      	ldr	r3, [r3, #4]
 800d8d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	430a      	orrs	r2, r1
 800d8e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8ea:	f003 0304 	and.w	r3, r3, #4
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d00a      	beq.n	800d908 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	430a      	orrs	r2, r1
 800d906:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d90c:	f003 0310 	and.w	r3, r3, #16
 800d910:	2b00      	cmp	r3, #0
 800d912:	d00a      	beq.n	800d92a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	430a      	orrs	r2, r1
 800d928:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d92e:	f003 0320 	and.w	r3, r3, #32
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00a      	beq.n	800d94c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	689b      	ldr	r3, [r3, #8]
 800d93c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	430a      	orrs	r2, r1
 800d94a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d954:	2b00      	cmp	r3, #0
 800d956:	d01a      	beq.n	800d98e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	685b      	ldr	r3, [r3, #4]
 800d95e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	430a      	orrs	r2, r1
 800d96c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d972:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d976:	d10a      	bne.n	800d98e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	685b      	ldr	r3, [r3, #4]
 800d97e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	430a      	orrs	r2, r1
 800d98c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d996:	2b00      	cmp	r3, #0
 800d998:	d00a      	beq.n	800d9b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	685b      	ldr	r3, [r3, #4]
 800d9a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	430a      	orrs	r2, r1
 800d9ae:	605a      	str	r2, [r3, #4]
  }
}
 800d9b0:	bf00      	nop
 800d9b2:	370c      	adds	r7, #12
 800d9b4:	46bd      	mov	sp, r7
 800d9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ba:	4770      	bx	lr

0800d9bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b098      	sub	sp, #96	@ 0x60
 800d9c0:	af02      	add	r7, sp, #8
 800d9c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d9cc:	f7f4 ffc4 	bl	8002958 <HAL_GetTick>
 800d9d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	f003 0308 	and.w	r3, r3, #8
 800d9dc:	2b08      	cmp	r3, #8
 800d9de:	d12f      	bne.n	800da40 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d9e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d9e4:	9300      	str	r3, [sp, #0]
 800d9e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 f88e 	bl	800db10 <UART_WaitOnFlagUntilTimeout>
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d022      	beq.n	800da40 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da02:	e853 3f00 	ldrex	r3, [r3]
 800da06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da0e:	653b      	str	r3, [r7, #80]	@ 0x50
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	461a      	mov	r2, r3
 800da16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da18:	647b      	str	r3, [r7, #68]	@ 0x44
 800da1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da20:	e841 2300 	strex	r3, r2, [r1]
 800da24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d1e6      	bne.n	800d9fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2220      	movs	r2, #32
 800da30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	2200      	movs	r2, #0
 800da38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da3c:	2303      	movs	r3, #3
 800da3e:	e063      	b.n	800db08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f003 0304 	and.w	r3, r3, #4
 800da4a:	2b04      	cmp	r3, #4
 800da4c:	d149      	bne.n	800dae2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da4e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da52:	9300      	str	r3, [sp, #0]
 800da54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da56:	2200      	movs	r2, #0
 800da58:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800da5c:	6878      	ldr	r0, [r7, #4]
 800da5e:	f000 f857 	bl	800db10 <UART_WaitOnFlagUntilTimeout>
 800da62:	4603      	mov	r3, r0
 800da64:	2b00      	cmp	r3, #0
 800da66:	d03c      	beq.n	800dae2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da70:	e853 3f00 	ldrex	r3, [r3]
 800da74:	623b      	str	r3, [r7, #32]
   return(result);
 800da76:	6a3b      	ldr	r3, [r7, #32]
 800da78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	461a      	mov	r2, r3
 800da84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da86:	633b      	str	r3, [r7, #48]	@ 0x30
 800da88:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da8e:	e841 2300 	strex	r3, r2, [r1]
 800da92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da96:	2b00      	cmp	r3, #0
 800da98:	d1e6      	bne.n	800da68 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	3308      	adds	r3, #8
 800daa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daa2:	693b      	ldr	r3, [r7, #16]
 800daa4:	e853 3f00 	ldrex	r3, [r3]
 800daa8:	60fb      	str	r3, [r7, #12]
   return(result);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	f023 0301 	bic.w	r3, r3, #1
 800dab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	3308      	adds	r3, #8
 800dab8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800daba:	61fa      	str	r2, [r7, #28]
 800dabc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dabe:	69b9      	ldr	r1, [r7, #24]
 800dac0:	69fa      	ldr	r2, [r7, #28]
 800dac2:	e841 2300 	strex	r3, r2, [r1]
 800dac6:	617b      	str	r3, [r7, #20]
   return(result);
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d1e5      	bne.n	800da9a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2220      	movs	r2, #32
 800dad2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dade:	2303      	movs	r3, #3
 800dae0:	e012      	b.n	800db08 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2220      	movs	r2, #32
 800dae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2220      	movs	r2, #32
 800daee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2200      	movs	r2, #0
 800dafc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db06:	2300      	movs	r3, #0
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3758      	adds	r7, #88	@ 0x58
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b084      	sub	sp, #16
 800db14:	af00      	add	r7, sp, #0
 800db16:	60f8      	str	r0, [r7, #12]
 800db18:	60b9      	str	r1, [r7, #8]
 800db1a:	603b      	str	r3, [r7, #0]
 800db1c:	4613      	mov	r3, r2
 800db1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db20:	e04f      	b.n	800dbc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db28:	d04b      	beq.n	800dbc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db2a:	f7f4 ff15 	bl	8002958 <HAL_GetTick>
 800db2e:	4602      	mov	r2, r0
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	69ba      	ldr	r2, [r7, #24]
 800db36:	429a      	cmp	r2, r3
 800db38:	d302      	bcc.n	800db40 <UART_WaitOnFlagUntilTimeout+0x30>
 800db3a:	69bb      	ldr	r3, [r7, #24]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d101      	bne.n	800db44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800db40:	2303      	movs	r3, #3
 800db42:	e04e      	b.n	800dbe2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f003 0304 	and.w	r3, r3, #4
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d037      	beq.n	800dbc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	2b80      	cmp	r3, #128	@ 0x80
 800db56:	d034      	beq.n	800dbc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	2b40      	cmp	r3, #64	@ 0x40
 800db5c:	d031      	beq.n	800dbc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	69db      	ldr	r3, [r3, #28]
 800db64:	f003 0308 	and.w	r3, r3, #8
 800db68:	2b08      	cmp	r3, #8
 800db6a:	d110      	bne.n	800db8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	2208      	movs	r2, #8
 800db72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f000 f839 	bl	800dbec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2208      	movs	r2, #8
 800db7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2200      	movs	r2, #0
 800db86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800db8a:	2301      	movs	r3, #1
 800db8c:	e029      	b.n	800dbe2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	69db      	ldr	r3, [r3, #28]
 800db94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800db98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800db9c:	d111      	bne.n	800dbc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dba8:	68f8      	ldr	r0, [r7, #12]
 800dbaa:	f000 f81f 	bl	800dbec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2220      	movs	r2, #32
 800dbb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dbbe:	2303      	movs	r3, #3
 800dbc0:	e00f      	b.n	800dbe2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	69da      	ldr	r2, [r3, #28]
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	4013      	ands	r3, r2
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	bf0c      	ite	eq
 800dbd2:	2301      	moveq	r3, #1
 800dbd4:	2300      	movne	r3, #0
 800dbd6:	b2db      	uxtb	r3, r3
 800dbd8:	461a      	mov	r2, r3
 800dbda:	79fb      	ldrb	r3, [r7, #7]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d0a0      	beq.n	800db22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dbe0:	2300      	movs	r3, #0
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
	...

0800dbec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b095      	sub	sp, #84	@ 0x54
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbfc:	e853 3f00 	ldrex	r3, [r3]
 800dc00:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dc02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dc08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	461a      	mov	r2, r3
 800dc10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc12:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc14:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc16:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc18:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc1a:	e841 2300 	strex	r3, r2, [r1]
 800dc1e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d1e6      	bne.n	800dbf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	3308      	adds	r3, #8
 800dc2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc2e:	6a3b      	ldr	r3, [r7, #32]
 800dc30:	e853 3f00 	ldrex	r3, [r3]
 800dc34:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc36:	69fa      	ldr	r2, [r7, #28]
 800dc38:	4b1e      	ldr	r3, [pc, #120]	@ (800dcb4 <UART_EndRxTransfer+0xc8>)
 800dc3a:	4013      	ands	r3, r2
 800dc3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	3308      	adds	r3, #8
 800dc44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc48:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc4e:	e841 2300 	strex	r3, r2, [r1]
 800dc52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d1e5      	bne.n	800dc26 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d118      	bne.n	800dc94 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	e853 3f00 	ldrex	r3, [r3]
 800dc6e:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc70:	68bb      	ldr	r3, [r7, #8]
 800dc72:	f023 0310 	bic.w	r3, r3, #16
 800dc76:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc80:	61bb      	str	r3, [r7, #24]
 800dc82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc84:	6979      	ldr	r1, [r7, #20]
 800dc86:	69ba      	ldr	r2, [r7, #24]
 800dc88:	e841 2300 	strex	r3, r2, [r1]
 800dc8c:	613b      	str	r3, [r7, #16]
   return(result);
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d1e6      	bne.n	800dc62 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	2220      	movs	r2, #32
 800dc98:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2200      	movs	r2, #0
 800dca0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2200      	movs	r2, #0
 800dca6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dca8:	bf00      	nop
 800dcaa:	3754      	adds	r7, #84	@ 0x54
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr
 800dcb4:	effffffe 	.word	0xeffffffe

0800dcb8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	d101      	bne.n	800dcce <HAL_UARTEx_DisableFifoMode+0x16>
 800dcca:	2302      	movs	r3, #2
 800dccc:	e027      	b.n	800dd1e <HAL_UARTEx_DisableFifoMode+0x66>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2224      	movs	r2, #36	@ 0x24
 800dcda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	f022 0201 	bic.w	r2, r2, #1
 800dcf4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dcfc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2200      	movs	r2, #0
 800dd02:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	68fa      	ldr	r2, [r7, #12]
 800dd0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2220      	movs	r2, #32
 800dd10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	2200      	movs	r2, #0
 800dd18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd1c:	2300      	movs	r3, #0
}
 800dd1e:	4618      	mov	r0, r3
 800dd20:	3714      	adds	r7, #20
 800dd22:	46bd      	mov	sp, r7
 800dd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd28:	4770      	bx	lr

0800dd2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd2a:	b580      	push	{r7, lr}
 800dd2c:	b084      	sub	sp, #16
 800dd2e:	af00      	add	r7, sp, #0
 800dd30:	6078      	str	r0, [r7, #4]
 800dd32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800dd3a:	2b01      	cmp	r3, #1
 800dd3c:	d101      	bne.n	800dd42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd3e:	2302      	movs	r3, #2
 800dd40:	e02d      	b.n	800dd9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2201      	movs	r2, #1
 800dd46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2224      	movs	r2, #36	@ 0x24
 800dd4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	681a      	ldr	r2, [r3, #0]
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	f022 0201 	bic.w	r2, r2, #1
 800dd68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	689b      	ldr	r3, [r3, #8]
 800dd70:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	683a      	ldr	r2, [r7, #0]
 800dd7a:	430a      	orrs	r2, r1
 800dd7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f000 f850 	bl	800de24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	68fa      	ldr	r2, [r7, #12]
 800dd8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	2220      	movs	r2, #32
 800dd90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd9c:	2300      	movs	r3, #0
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3710      	adds	r7, #16
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bd80      	pop	{r7, pc}

0800dda6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dda6:	b580      	push	{r7, lr}
 800dda8:	b084      	sub	sp, #16
 800ddaa:	af00      	add	r7, sp, #0
 800ddac:	6078      	str	r0, [r7, #4]
 800ddae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d101      	bne.n	800ddbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ddba:	2302      	movs	r3, #2
 800ddbc:	e02d      	b.n	800de1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2224      	movs	r2, #36	@ 0x24
 800ddca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	f022 0201 	bic.w	r2, r2, #1
 800dde4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	689b      	ldr	r3, [r3, #8]
 800ddec:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	683a      	ldr	r2, [r7, #0]
 800ddf6:	430a      	orrs	r2, r1
 800ddf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 f812 	bl	800de24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	68fa      	ldr	r2, [r7, #12]
 800de06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2220      	movs	r2, #32
 800de0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2200      	movs	r2, #0
 800de14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de18:	2300      	movs	r3, #0
}
 800de1a:	4618      	mov	r0, r3
 800de1c:	3710      	adds	r7, #16
 800de1e:	46bd      	mov	sp, r7
 800de20:	bd80      	pop	{r7, pc}
	...

0800de24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800de30:	2b00      	cmp	r3, #0
 800de32:	d108      	bne.n	800de46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	2201      	movs	r2, #1
 800de38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800de44:	e031      	b.n	800deaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800de46:	2310      	movs	r3, #16
 800de48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800de4a:	2310      	movs	r3, #16
 800de4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	689b      	ldr	r3, [r3, #8]
 800de54:	0e5b      	lsrs	r3, r3, #25
 800de56:	b2db      	uxtb	r3, r3
 800de58:	f003 0307 	and.w	r3, r3, #7
 800de5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	0f5b      	lsrs	r3, r3, #29
 800de66:	b2db      	uxtb	r3, r3
 800de68:	f003 0307 	and.w	r3, r3, #7
 800de6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de6e:	7bbb      	ldrb	r3, [r7, #14]
 800de70:	7b3a      	ldrb	r2, [r7, #12]
 800de72:	4911      	ldr	r1, [pc, #68]	@ (800deb8 <UARTEx_SetNbDataToProcess+0x94>)
 800de74:	5c8a      	ldrb	r2, [r1, r2]
 800de76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800de7a:	7b3a      	ldrb	r2, [r7, #12]
 800de7c:	490f      	ldr	r1, [pc, #60]	@ (800debc <UARTEx_SetNbDataToProcess+0x98>)
 800de7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800de80:	fb93 f3f2 	sdiv	r3, r3, r2
 800de84:	b29a      	uxth	r2, r3
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
 800de8e:	7b7a      	ldrb	r2, [r7, #13]
 800de90:	4909      	ldr	r1, [pc, #36]	@ (800deb8 <UARTEx_SetNbDataToProcess+0x94>)
 800de92:	5c8a      	ldrb	r2, [r1, r2]
 800de94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800de98:	7b7a      	ldrb	r2, [r7, #13]
 800de9a:	4908      	ldr	r1, [pc, #32]	@ (800debc <UARTEx_SetNbDataToProcess+0x98>)
 800de9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800de9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800dea2:	b29a      	uxth	r2, r3
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800deaa:	bf00      	nop
 800deac:	3714      	adds	r7, #20
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr
 800deb6:	bf00      	nop
 800deb8:	0800f044 	.word	0x0800f044
 800debc:	0800f04c 	.word	0x0800f04c

0800dec0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dec0:	b084      	sub	sp, #16
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b084      	sub	sp, #16
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
 800deca:	f107 001c 	add.w	r0, r7, #28
 800dece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ded2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d121      	bne.n	800df1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dede:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	68da      	ldr	r2, [r3, #12]
 800deea:	4b2c      	ldr	r3, [pc, #176]	@ (800df9c <USB_CoreInit+0xdc>)
 800deec:	4013      	ands	r3, r2
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	68db      	ldr	r3, [r3, #12]
 800def6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800defe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800df02:	2b01      	cmp	r3, #1
 800df04:	d105      	bne.n	800df12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	68db      	ldr	r3, [r3, #12]
 800df0a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 faaa 	bl	800e46c <USB_CoreReset>
 800df18:	4603      	mov	r3, r0
 800df1a:	73fb      	strb	r3, [r7, #15]
 800df1c:	e01b      	b.n	800df56 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 fa9e 	bl	800e46c <USB_CoreReset>
 800df30:	4603      	mov	r3, r0
 800df32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800df34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d106      	bne.n	800df4a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df40:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	639a      	str	r2, [r3, #56]	@ 0x38
 800df48:	e005      	b.n	800df56 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800df4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800df56:	7fbb      	ldrb	r3, [r7, #30]
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d116      	bne.n	800df8a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800df60:	b29a      	uxth	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800df6a:	4b0d      	ldr	r3, [pc, #52]	@ (800dfa0 <USB_CoreInit+0xe0>)
 800df6c:	4313      	orrs	r3, r2
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	f043 0206 	orr.w	r2, r3, #6
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	f043 0220 	orr.w	r2, r3, #32
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800df8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3710      	adds	r7, #16
 800df90:	46bd      	mov	sp, r7
 800df92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800df96:	b004      	add	sp, #16
 800df98:	4770      	bx	lr
 800df9a:	bf00      	nop
 800df9c:	ffbdffbf 	.word	0xffbdffbf
 800dfa0:	03ee0000 	.word	0x03ee0000

0800dfa4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b083      	sub	sp, #12
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	689b      	ldr	r3, [r3, #8]
 800dfb0:	f023 0201 	bic.w	r2, r3, #1
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dfb8:	2300      	movs	r3, #0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	370c      	adds	r7, #12
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc4:	4770      	bx	lr

0800dfc6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dfc6:	b580      	push	{r7, lr}
 800dfc8:	b084      	sub	sp, #16
 800dfca:	af00      	add	r7, sp, #0
 800dfcc:	6078      	str	r0, [r7, #4]
 800dfce:	460b      	mov	r3, r1
 800dfd0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	68db      	ldr	r3, [r3, #12]
 800dfda:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dfe2:	78fb      	ldrb	r3, [r7, #3]
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d115      	bne.n	800e014 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dff4:	200a      	movs	r0, #10
 800dff6:	f7f4 fcbb 	bl	8002970 <HAL_Delay>
      ms += 10U;
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	330a      	adds	r3, #10
 800dffe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e000:	6878      	ldr	r0, [r7, #4]
 800e002:	f000 fa25 	bl	800e450 <USB_GetMode>
 800e006:	4603      	mov	r3, r0
 800e008:	2b01      	cmp	r3, #1
 800e00a:	d01e      	beq.n	800e04a <USB_SetCurrentMode+0x84>
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	2bc7      	cmp	r3, #199	@ 0xc7
 800e010:	d9f0      	bls.n	800dff4 <USB_SetCurrentMode+0x2e>
 800e012:	e01a      	b.n	800e04a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e014:	78fb      	ldrb	r3, [r7, #3]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d115      	bne.n	800e046 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e026:	200a      	movs	r0, #10
 800e028:	f7f4 fca2 	bl	8002970 <HAL_Delay>
      ms += 10U;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	330a      	adds	r3, #10
 800e030:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 fa0c 	bl	800e450 <USB_GetMode>
 800e038:	4603      	mov	r3, r0
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d005      	beq.n	800e04a <USB_SetCurrentMode+0x84>
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2bc7      	cmp	r3, #199	@ 0xc7
 800e042:	d9f0      	bls.n	800e026 <USB_SetCurrentMode+0x60>
 800e044:	e001      	b.n	800e04a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e046:	2301      	movs	r3, #1
 800e048:	e005      	b.n	800e056 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2bc8      	cmp	r3, #200	@ 0xc8
 800e04e:	d101      	bne.n	800e054 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e050:	2301      	movs	r3, #1
 800e052:	e000      	b.n	800e056 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e054:	2300      	movs	r3, #0
}
 800e056:	4618      	mov	r0, r3
 800e058:	3710      	adds	r7, #16
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
	...

0800e060 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e060:	b084      	sub	sp, #16
 800e062:	b580      	push	{r7, lr}
 800e064:	b086      	sub	sp, #24
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
 800e06a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e06e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e072:	2300      	movs	r3, #0
 800e074:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e07a:	2300      	movs	r3, #0
 800e07c:	613b      	str	r3, [r7, #16]
 800e07e:	e009      	b.n	800e094 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	3340      	adds	r3, #64	@ 0x40
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	4413      	add	r3, r2
 800e08a:	2200      	movs	r2, #0
 800e08c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	3301      	adds	r3, #1
 800e092:	613b      	str	r3, [r7, #16]
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	2b0e      	cmp	r3, #14
 800e098:	d9f2      	bls.n	800e080 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e09a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d11c      	bne.n	800e0dc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	68fa      	ldr	r2, [r7, #12]
 800e0ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e0b0:	f043 0302 	orr.w	r3, r3, #2
 800e0b4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0ba:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	601a      	str	r2, [r3, #0]
 800e0da:	e005      	b.n	800e0e8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e0f4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e0f8:	2b01      	cmp	r3, #1
 800e0fa:	d10d      	bne.n	800e118 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e0fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e100:	2b00      	cmp	r3, #0
 800e102:	d104      	bne.n	800e10e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e104:	2100      	movs	r1, #0
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f000 f968 	bl	800e3dc <USB_SetDevSpeed>
 800e10c:	e008      	b.n	800e120 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e10e:	2101      	movs	r1, #1
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f000 f963 	bl	800e3dc <USB_SetDevSpeed>
 800e116:	e003      	b.n	800e120 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e118:	2103      	movs	r1, #3
 800e11a:	6878      	ldr	r0, [r7, #4]
 800e11c:	f000 f95e 	bl	800e3dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e120:	2110      	movs	r1, #16
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 f8fa 	bl	800e31c <USB_FlushTxFifo>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d001      	beq.n	800e132 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e12e:	2301      	movs	r3, #1
 800e130:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f924 	bl	800e380 <USB_FlushRxFifo>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d001      	beq.n	800e142 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e13e:	2301      	movs	r3, #1
 800e140:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e148:	461a      	mov	r2, r3
 800e14a:	2300      	movs	r3, #0
 800e14c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e154:	461a      	mov	r2, r3
 800e156:	2300      	movs	r3, #0
 800e158:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e160:	461a      	mov	r2, r3
 800e162:	2300      	movs	r3, #0
 800e164:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e166:	2300      	movs	r3, #0
 800e168:	613b      	str	r3, [r7, #16]
 800e16a:	e043      	b.n	800e1f4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	015a      	lsls	r2, r3, #5
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	4413      	add	r3, r2
 800e174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e17e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e182:	d118      	bne.n	800e1b6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e184:	693b      	ldr	r3, [r7, #16]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d10a      	bne.n	800e1a0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	015a      	lsls	r2, r3, #5
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	4413      	add	r3, r2
 800e192:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e196:	461a      	mov	r2, r3
 800e198:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e19c:	6013      	str	r3, [r2, #0]
 800e19e:	e013      	b.n	800e1c8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	015a      	lsls	r2, r3, #5
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	4413      	add	r3, r2
 800e1a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e1b2:	6013      	str	r3, [r2, #0]
 800e1b4:	e008      	b.n	800e1c8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	015a      	lsls	r2, r3, #5
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	4413      	add	r3, r2
 800e1be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1c2:	461a      	mov	r2, r3
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e1c8:	693b      	ldr	r3, [r7, #16]
 800e1ca:	015a      	lsls	r2, r3, #5
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	4413      	add	r3, r2
 800e1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	015a      	lsls	r2, r3, #5
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e1ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	3301      	adds	r3, #1
 800e1f2:	613b      	str	r3, [r7, #16]
 800e1f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d3b5      	bcc.n	800e16c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e200:	2300      	movs	r3, #0
 800e202:	613b      	str	r3, [r7, #16]
 800e204:	e043      	b.n	800e28e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	015a      	lsls	r2, r3, #5
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	4413      	add	r3, r2
 800e20e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e218:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e21c:	d118      	bne.n	800e250 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d10a      	bne.n	800e23a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e224:	693b      	ldr	r3, [r7, #16]
 800e226:	015a      	lsls	r2, r3, #5
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	4413      	add	r3, r2
 800e22c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e230:	461a      	mov	r2, r3
 800e232:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e236:	6013      	str	r3, [r2, #0]
 800e238:	e013      	b.n	800e262 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e23a:	693b      	ldr	r3, [r7, #16]
 800e23c:	015a      	lsls	r2, r3, #5
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	4413      	add	r3, r2
 800e242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e246:	461a      	mov	r2, r3
 800e248:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e24c:	6013      	str	r3, [r2, #0]
 800e24e:	e008      	b.n	800e262 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	015a      	lsls	r2, r3, #5
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	4413      	add	r3, r2
 800e258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e25c:	461a      	mov	r2, r3
 800e25e:	2300      	movs	r3, #0
 800e260:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	015a      	lsls	r2, r3, #5
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	4413      	add	r3, r2
 800e26a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e26e:	461a      	mov	r2, r3
 800e270:	2300      	movs	r3, #0
 800e272:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	015a      	lsls	r2, r3, #5
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	4413      	add	r3, r2
 800e27c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e280:	461a      	mov	r2, r3
 800e282:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e286:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e288:	693b      	ldr	r3, [r7, #16]
 800e28a:	3301      	adds	r3, #1
 800e28c:	613b      	str	r3, [r7, #16]
 800e28e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e292:	461a      	mov	r2, r3
 800e294:	693b      	ldr	r3, [r7, #16]
 800e296:	4293      	cmp	r3, r2
 800e298:	d3b5      	bcc.n	800e206 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e2a0:	691b      	ldr	r3, [r3, #16]
 800e2a2:	68fa      	ldr	r2, [r7, #12]
 800e2a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e2a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e2ac:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e2ba:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e2bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d105      	bne.n	800e2d0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	699b      	ldr	r3, [r3, #24]
 800e2c8:	f043 0210 	orr.w	r2, r3, #16
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	699a      	ldr	r2, [r3, #24]
 800e2d4:	4b0f      	ldr	r3, [pc, #60]	@ (800e314 <USB_DevInit+0x2b4>)
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e2dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	699b      	ldr	r3, [r3, #24]
 800e2e8:	f043 0208 	orr.w	r2, r3, #8
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e2f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d105      	bne.n	800e304 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	699a      	ldr	r2, [r3, #24]
 800e2fc:	4b06      	ldr	r3, [pc, #24]	@ (800e318 <USB_DevInit+0x2b8>)
 800e2fe:	4313      	orrs	r3, r2
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e304:	7dfb      	ldrb	r3, [r7, #23]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3718      	adds	r7, #24
 800e30a:	46bd      	mov	sp, r7
 800e30c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e310:	b004      	add	sp, #16
 800e312:	4770      	bx	lr
 800e314:	803c3800 	.word	0x803c3800
 800e318:	40000004 	.word	0x40000004

0800e31c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e31c:	b480      	push	{r7}
 800e31e:	b085      	sub	sp, #20
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e326:	2300      	movs	r3, #0
 800e328:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	3301      	adds	r3, #1
 800e32e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e336:	d901      	bls.n	800e33c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e338:	2303      	movs	r3, #3
 800e33a:	e01b      	b.n	800e374 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	691b      	ldr	r3, [r3, #16]
 800e340:	2b00      	cmp	r3, #0
 800e342:	daf2      	bge.n	800e32a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e344:	2300      	movs	r3, #0
 800e346:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	019b      	lsls	r3, r3, #6
 800e34c:	f043 0220 	orr.w	r2, r3, #32
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	3301      	adds	r3, #1
 800e358:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e360:	d901      	bls.n	800e366 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e362:	2303      	movs	r3, #3
 800e364:	e006      	b.n	800e374 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	691b      	ldr	r3, [r3, #16]
 800e36a:	f003 0320 	and.w	r3, r3, #32
 800e36e:	2b20      	cmp	r3, #32
 800e370:	d0f0      	beq.n	800e354 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e372:	2300      	movs	r3, #0
}
 800e374:	4618      	mov	r0, r3
 800e376:	3714      	adds	r7, #20
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e380:	b480      	push	{r7}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e388:	2300      	movs	r3, #0
 800e38a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	3301      	adds	r3, #1
 800e390:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e398:	d901      	bls.n	800e39e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e39a:	2303      	movs	r3, #3
 800e39c:	e018      	b.n	800e3d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	691b      	ldr	r3, [r3, #16]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	daf2      	bge.n	800e38c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	2210      	movs	r2, #16
 800e3ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	3301      	adds	r3, #1
 800e3b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e3bc:	d901      	bls.n	800e3c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e3be:	2303      	movs	r3, #3
 800e3c0:	e006      	b.n	800e3d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	691b      	ldr	r3, [r3, #16]
 800e3c6:	f003 0310 	and.w	r3, r3, #16
 800e3ca:	2b10      	cmp	r3, #16
 800e3cc:	d0f0      	beq.n	800e3b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3714      	adds	r7, #20
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3da:	4770      	bx	lr

0800e3dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b085      	sub	sp, #20
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e3ec:	68fb      	ldr	r3, [r7, #12]
 800e3ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	78fb      	ldrb	r3, [r7, #3]
 800e3f6:	68f9      	ldr	r1, [r7, #12]
 800e3f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e3fc:	4313      	orrs	r3, r2
 800e3fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e400:	2300      	movs	r3, #0
}
 800e402:	4618      	mov	r0, r3
 800e404:	3714      	adds	r7, #20
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr

0800e40e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e40e:	b480      	push	{r7}
 800e410:	b085      	sub	sp, #20
 800e412:	af00      	add	r7, sp, #0
 800e414:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e428:	f023 0303 	bic.w	r3, r3, #3
 800e42c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	68fa      	ldr	r2, [r7, #12]
 800e438:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e43c:	f043 0302 	orr.w	r3, r3, #2
 800e440:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3714      	adds	r7, #20
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr

0800e450 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e450:	b480      	push	{r7}
 800e452:	b083      	sub	sp, #12
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	695b      	ldr	r3, [r3, #20]
 800e45c:	f003 0301 	and.w	r3, r3, #1
}
 800e460:	4618      	mov	r0, r3
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr

0800e46c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b085      	sub	sp, #20
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e474:	2300      	movs	r3, #0
 800e476:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	3301      	adds	r3, #1
 800e47c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e484:	d901      	bls.n	800e48a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e486:	2303      	movs	r3, #3
 800e488:	e01b      	b.n	800e4c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	691b      	ldr	r3, [r3, #16]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	daf2      	bge.n	800e478 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e492:	2300      	movs	r3, #0
 800e494:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	691b      	ldr	r3, [r3, #16]
 800e49a:	f043 0201 	orr.w	r2, r3, #1
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e4ae:	d901      	bls.n	800e4b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e4b0:	2303      	movs	r3, #3
 800e4b2:	e006      	b.n	800e4c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	691b      	ldr	r3, [r3, #16]
 800e4b8:	f003 0301 	and.w	r3, r3, #1
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d0f0      	beq.n	800e4a2 <USB_CoreReset+0x36>

  return HAL_OK;
 800e4c0:	2300      	movs	r3, #0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3714      	adds	r7, #20
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr
	...

0800e4d0 <siprintf>:
 800e4d0:	b40e      	push	{r1, r2, r3}
 800e4d2:	b510      	push	{r4, lr}
 800e4d4:	b09d      	sub	sp, #116	@ 0x74
 800e4d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800e4d8:	9002      	str	r0, [sp, #8]
 800e4da:	9006      	str	r0, [sp, #24]
 800e4dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e4e0:	480a      	ldr	r0, [pc, #40]	@ (800e50c <siprintf+0x3c>)
 800e4e2:	9107      	str	r1, [sp, #28]
 800e4e4:	9104      	str	r1, [sp, #16]
 800e4e6:	490a      	ldr	r1, [pc, #40]	@ (800e510 <siprintf+0x40>)
 800e4e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4ec:	9105      	str	r1, [sp, #20]
 800e4ee:	2400      	movs	r4, #0
 800e4f0:	a902      	add	r1, sp, #8
 800e4f2:	6800      	ldr	r0, [r0, #0]
 800e4f4:	9301      	str	r3, [sp, #4]
 800e4f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 800e4f8:	f000 f994 	bl	800e824 <_svfiprintf_r>
 800e4fc:	9b02      	ldr	r3, [sp, #8]
 800e4fe:	701c      	strb	r4, [r3, #0]
 800e500:	b01d      	add	sp, #116	@ 0x74
 800e502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e506:	b003      	add	sp, #12
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	24000014 	.word	0x24000014
 800e510:	ffff0208 	.word	0xffff0208

0800e514 <memset>:
 800e514:	4402      	add	r2, r0
 800e516:	4603      	mov	r3, r0
 800e518:	4293      	cmp	r3, r2
 800e51a:	d100      	bne.n	800e51e <memset+0xa>
 800e51c:	4770      	bx	lr
 800e51e:	f803 1b01 	strb.w	r1, [r3], #1
 800e522:	e7f9      	b.n	800e518 <memset+0x4>

0800e524 <__errno>:
 800e524:	4b01      	ldr	r3, [pc, #4]	@ (800e52c <__errno+0x8>)
 800e526:	6818      	ldr	r0, [r3, #0]
 800e528:	4770      	bx	lr
 800e52a:	bf00      	nop
 800e52c:	24000014 	.word	0x24000014

0800e530 <__libc_init_array>:
 800e530:	b570      	push	{r4, r5, r6, lr}
 800e532:	4d0d      	ldr	r5, [pc, #52]	@ (800e568 <__libc_init_array+0x38>)
 800e534:	4c0d      	ldr	r4, [pc, #52]	@ (800e56c <__libc_init_array+0x3c>)
 800e536:	1b64      	subs	r4, r4, r5
 800e538:	10a4      	asrs	r4, r4, #2
 800e53a:	2600      	movs	r6, #0
 800e53c:	42a6      	cmp	r6, r4
 800e53e:	d109      	bne.n	800e554 <__libc_init_array+0x24>
 800e540:	4d0b      	ldr	r5, [pc, #44]	@ (800e570 <__libc_init_array+0x40>)
 800e542:	4c0c      	ldr	r4, [pc, #48]	@ (800e574 <__libc_init_array+0x44>)
 800e544:	f000 fc64 	bl	800ee10 <_init>
 800e548:	1b64      	subs	r4, r4, r5
 800e54a:	10a4      	asrs	r4, r4, #2
 800e54c:	2600      	movs	r6, #0
 800e54e:	42a6      	cmp	r6, r4
 800e550:	d105      	bne.n	800e55e <__libc_init_array+0x2e>
 800e552:	bd70      	pop	{r4, r5, r6, pc}
 800e554:	f855 3b04 	ldr.w	r3, [r5], #4
 800e558:	4798      	blx	r3
 800e55a:	3601      	adds	r6, #1
 800e55c:	e7ee      	b.n	800e53c <__libc_init_array+0xc>
 800e55e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e562:	4798      	blx	r3
 800e564:	3601      	adds	r6, #1
 800e566:	e7f2      	b.n	800e54e <__libc_init_array+0x1e>
 800e568:	0800f090 	.word	0x0800f090
 800e56c:	0800f090 	.word	0x0800f090
 800e570:	0800f090 	.word	0x0800f090
 800e574:	0800f094 	.word	0x0800f094

0800e578 <__retarget_lock_acquire_recursive>:
 800e578:	4770      	bx	lr

0800e57a <__retarget_lock_release_recursive>:
 800e57a:	4770      	bx	lr

0800e57c <_free_r>:
 800e57c:	b538      	push	{r3, r4, r5, lr}
 800e57e:	4605      	mov	r5, r0
 800e580:	2900      	cmp	r1, #0
 800e582:	d041      	beq.n	800e608 <_free_r+0x8c>
 800e584:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e588:	1f0c      	subs	r4, r1, #4
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	bfb8      	it	lt
 800e58e:	18e4      	addlt	r4, r4, r3
 800e590:	f000 f8e0 	bl	800e754 <__malloc_lock>
 800e594:	4a1d      	ldr	r2, [pc, #116]	@ (800e60c <_free_r+0x90>)
 800e596:	6813      	ldr	r3, [r2, #0]
 800e598:	b933      	cbnz	r3, 800e5a8 <_free_r+0x2c>
 800e59a:	6063      	str	r3, [r4, #4]
 800e59c:	6014      	str	r4, [r2, #0]
 800e59e:	4628      	mov	r0, r5
 800e5a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5a4:	f000 b8dc 	b.w	800e760 <__malloc_unlock>
 800e5a8:	42a3      	cmp	r3, r4
 800e5aa:	d908      	bls.n	800e5be <_free_r+0x42>
 800e5ac:	6820      	ldr	r0, [r4, #0]
 800e5ae:	1821      	adds	r1, r4, r0
 800e5b0:	428b      	cmp	r3, r1
 800e5b2:	bf01      	itttt	eq
 800e5b4:	6819      	ldreq	r1, [r3, #0]
 800e5b6:	685b      	ldreq	r3, [r3, #4]
 800e5b8:	1809      	addeq	r1, r1, r0
 800e5ba:	6021      	streq	r1, [r4, #0]
 800e5bc:	e7ed      	b.n	800e59a <_free_r+0x1e>
 800e5be:	461a      	mov	r2, r3
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	b10b      	cbz	r3, 800e5c8 <_free_r+0x4c>
 800e5c4:	42a3      	cmp	r3, r4
 800e5c6:	d9fa      	bls.n	800e5be <_free_r+0x42>
 800e5c8:	6811      	ldr	r1, [r2, #0]
 800e5ca:	1850      	adds	r0, r2, r1
 800e5cc:	42a0      	cmp	r0, r4
 800e5ce:	d10b      	bne.n	800e5e8 <_free_r+0x6c>
 800e5d0:	6820      	ldr	r0, [r4, #0]
 800e5d2:	4401      	add	r1, r0
 800e5d4:	1850      	adds	r0, r2, r1
 800e5d6:	4283      	cmp	r3, r0
 800e5d8:	6011      	str	r1, [r2, #0]
 800e5da:	d1e0      	bne.n	800e59e <_free_r+0x22>
 800e5dc:	6818      	ldr	r0, [r3, #0]
 800e5de:	685b      	ldr	r3, [r3, #4]
 800e5e0:	6053      	str	r3, [r2, #4]
 800e5e2:	4408      	add	r0, r1
 800e5e4:	6010      	str	r0, [r2, #0]
 800e5e6:	e7da      	b.n	800e59e <_free_r+0x22>
 800e5e8:	d902      	bls.n	800e5f0 <_free_r+0x74>
 800e5ea:	230c      	movs	r3, #12
 800e5ec:	602b      	str	r3, [r5, #0]
 800e5ee:	e7d6      	b.n	800e59e <_free_r+0x22>
 800e5f0:	6820      	ldr	r0, [r4, #0]
 800e5f2:	1821      	adds	r1, r4, r0
 800e5f4:	428b      	cmp	r3, r1
 800e5f6:	bf04      	itt	eq
 800e5f8:	6819      	ldreq	r1, [r3, #0]
 800e5fa:	685b      	ldreq	r3, [r3, #4]
 800e5fc:	6063      	str	r3, [r4, #4]
 800e5fe:	bf04      	itt	eq
 800e600:	1809      	addeq	r1, r1, r0
 800e602:	6021      	streq	r1, [r4, #0]
 800e604:	6054      	str	r4, [r2, #4]
 800e606:	e7ca      	b.n	800e59e <_free_r+0x22>
 800e608:	bd38      	pop	{r3, r4, r5, pc}
 800e60a:	bf00      	nop
 800e60c:	24000bac 	.word	0x24000bac

0800e610 <sbrk_aligned>:
 800e610:	b570      	push	{r4, r5, r6, lr}
 800e612:	4e0f      	ldr	r6, [pc, #60]	@ (800e650 <sbrk_aligned+0x40>)
 800e614:	460c      	mov	r4, r1
 800e616:	6831      	ldr	r1, [r6, #0]
 800e618:	4605      	mov	r5, r0
 800e61a:	b911      	cbnz	r1, 800e622 <sbrk_aligned+0x12>
 800e61c:	f000 fba4 	bl	800ed68 <_sbrk_r>
 800e620:	6030      	str	r0, [r6, #0]
 800e622:	4621      	mov	r1, r4
 800e624:	4628      	mov	r0, r5
 800e626:	f000 fb9f 	bl	800ed68 <_sbrk_r>
 800e62a:	1c43      	adds	r3, r0, #1
 800e62c:	d103      	bne.n	800e636 <sbrk_aligned+0x26>
 800e62e:	f04f 34ff 	mov.w	r4, #4294967295
 800e632:	4620      	mov	r0, r4
 800e634:	bd70      	pop	{r4, r5, r6, pc}
 800e636:	1cc4      	adds	r4, r0, #3
 800e638:	f024 0403 	bic.w	r4, r4, #3
 800e63c:	42a0      	cmp	r0, r4
 800e63e:	d0f8      	beq.n	800e632 <sbrk_aligned+0x22>
 800e640:	1a21      	subs	r1, r4, r0
 800e642:	4628      	mov	r0, r5
 800e644:	f000 fb90 	bl	800ed68 <_sbrk_r>
 800e648:	3001      	adds	r0, #1
 800e64a:	d1f2      	bne.n	800e632 <sbrk_aligned+0x22>
 800e64c:	e7ef      	b.n	800e62e <sbrk_aligned+0x1e>
 800e64e:	bf00      	nop
 800e650:	24000ba8 	.word	0x24000ba8

0800e654 <_malloc_r>:
 800e654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e658:	1ccd      	adds	r5, r1, #3
 800e65a:	f025 0503 	bic.w	r5, r5, #3
 800e65e:	3508      	adds	r5, #8
 800e660:	2d0c      	cmp	r5, #12
 800e662:	bf38      	it	cc
 800e664:	250c      	movcc	r5, #12
 800e666:	2d00      	cmp	r5, #0
 800e668:	4606      	mov	r6, r0
 800e66a:	db01      	blt.n	800e670 <_malloc_r+0x1c>
 800e66c:	42a9      	cmp	r1, r5
 800e66e:	d904      	bls.n	800e67a <_malloc_r+0x26>
 800e670:	230c      	movs	r3, #12
 800e672:	6033      	str	r3, [r6, #0]
 800e674:	2000      	movs	r0, #0
 800e676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e67a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e750 <_malloc_r+0xfc>
 800e67e:	f000 f869 	bl	800e754 <__malloc_lock>
 800e682:	f8d8 3000 	ldr.w	r3, [r8]
 800e686:	461c      	mov	r4, r3
 800e688:	bb44      	cbnz	r4, 800e6dc <_malloc_r+0x88>
 800e68a:	4629      	mov	r1, r5
 800e68c:	4630      	mov	r0, r6
 800e68e:	f7ff ffbf 	bl	800e610 <sbrk_aligned>
 800e692:	1c43      	adds	r3, r0, #1
 800e694:	4604      	mov	r4, r0
 800e696:	d158      	bne.n	800e74a <_malloc_r+0xf6>
 800e698:	f8d8 4000 	ldr.w	r4, [r8]
 800e69c:	4627      	mov	r7, r4
 800e69e:	2f00      	cmp	r7, #0
 800e6a0:	d143      	bne.n	800e72a <_malloc_r+0xd6>
 800e6a2:	2c00      	cmp	r4, #0
 800e6a4:	d04b      	beq.n	800e73e <_malloc_r+0xea>
 800e6a6:	6823      	ldr	r3, [r4, #0]
 800e6a8:	4639      	mov	r1, r7
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	eb04 0903 	add.w	r9, r4, r3
 800e6b0:	f000 fb5a 	bl	800ed68 <_sbrk_r>
 800e6b4:	4581      	cmp	r9, r0
 800e6b6:	d142      	bne.n	800e73e <_malloc_r+0xea>
 800e6b8:	6821      	ldr	r1, [r4, #0]
 800e6ba:	1a6d      	subs	r5, r5, r1
 800e6bc:	4629      	mov	r1, r5
 800e6be:	4630      	mov	r0, r6
 800e6c0:	f7ff ffa6 	bl	800e610 <sbrk_aligned>
 800e6c4:	3001      	adds	r0, #1
 800e6c6:	d03a      	beq.n	800e73e <_malloc_r+0xea>
 800e6c8:	6823      	ldr	r3, [r4, #0]
 800e6ca:	442b      	add	r3, r5
 800e6cc:	6023      	str	r3, [r4, #0]
 800e6ce:	f8d8 3000 	ldr.w	r3, [r8]
 800e6d2:	685a      	ldr	r2, [r3, #4]
 800e6d4:	bb62      	cbnz	r2, 800e730 <_malloc_r+0xdc>
 800e6d6:	f8c8 7000 	str.w	r7, [r8]
 800e6da:	e00f      	b.n	800e6fc <_malloc_r+0xa8>
 800e6dc:	6822      	ldr	r2, [r4, #0]
 800e6de:	1b52      	subs	r2, r2, r5
 800e6e0:	d420      	bmi.n	800e724 <_malloc_r+0xd0>
 800e6e2:	2a0b      	cmp	r2, #11
 800e6e4:	d917      	bls.n	800e716 <_malloc_r+0xc2>
 800e6e6:	1961      	adds	r1, r4, r5
 800e6e8:	42a3      	cmp	r3, r4
 800e6ea:	6025      	str	r5, [r4, #0]
 800e6ec:	bf18      	it	ne
 800e6ee:	6059      	strne	r1, [r3, #4]
 800e6f0:	6863      	ldr	r3, [r4, #4]
 800e6f2:	bf08      	it	eq
 800e6f4:	f8c8 1000 	streq.w	r1, [r8]
 800e6f8:	5162      	str	r2, [r4, r5]
 800e6fa:	604b      	str	r3, [r1, #4]
 800e6fc:	4630      	mov	r0, r6
 800e6fe:	f000 f82f 	bl	800e760 <__malloc_unlock>
 800e702:	f104 000b 	add.w	r0, r4, #11
 800e706:	1d23      	adds	r3, r4, #4
 800e708:	f020 0007 	bic.w	r0, r0, #7
 800e70c:	1ac2      	subs	r2, r0, r3
 800e70e:	bf1c      	itt	ne
 800e710:	1a1b      	subne	r3, r3, r0
 800e712:	50a3      	strne	r3, [r4, r2]
 800e714:	e7af      	b.n	800e676 <_malloc_r+0x22>
 800e716:	6862      	ldr	r2, [r4, #4]
 800e718:	42a3      	cmp	r3, r4
 800e71a:	bf0c      	ite	eq
 800e71c:	f8c8 2000 	streq.w	r2, [r8]
 800e720:	605a      	strne	r2, [r3, #4]
 800e722:	e7eb      	b.n	800e6fc <_malloc_r+0xa8>
 800e724:	4623      	mov	r3, r4
 800e726:	6864      	ldr	r4, [r4, #4]
 800e728:	e7ae      	b.n	800e688 <_malloc_r+0x34>
 800e72a:	463c      	mov	r4, r7
 800e72c:	687f      	ldr	r7, [r7, #4]
 800e72e:	e7b6      	b.n	800e69e <_malloc_r+0x4a>
 800e730:	461a      	mov	r2, r3
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	42a3      	cmp	r3, r4
 800e736:	d1fb      	bne.n	800e730 <_malloc_r+0xdc>
 800e738:	2300      	movs	r3, #0
 800e73a:	6053      	str	r3, [r2, #4]
 800e73c:	e7de      	b.n	800e6fc <_malloc_r+0xa8>
 800e73e:	230c      	movs	r3, #12
 800e740:	6033      	str	r3, [r6, #0]
 800e742:	4630      	mov	r0, r6
 800e744:	f000 f80c 	bl	800e760 <__malloc_unlock>
 800e748:	e794      	b.n	800e674 <_malloc_r+0x20>
 800e74a:	6005      	str	r5, [r0, #0]
 800e74c:	e7d6      	b.n	800e6fc <_malloc_r+0xa8>
 800e74e:	bf00      	nop
 800e750:	24000bac 	.word	0x24000bac

0800e754 <__malloc_lock>:
 800e754:	4801      	ldr	r0, [pc, #4]	@ (800e75c <__malloc_lock+0x8>)
 800e756:	f7ff bf0f 	b.w	800e578 <__retarget_lock_acquire_recursive>
 800e75a:	bf00      	nop
 800e75c:	24000ba4 	.word	0x24000ba4

0800e760 <__malloc_unlock>:
 800e760:	4801      	ldr	r0, [pc, #4]	@ (800e768 <__malloc_unlock+0x8>)
 800e762:	f7ff bf0a 	b.w	800e57a <__retarget_lock_release_recursive>
 800e766:	bf00      	nop
 800e768:	24000ba4 	.word	0x24000ba4

0800e76c <__ssputs_r>:
 800e76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e770:	688e      	ldr	r6, [r1, #8]
 800e772:	461f      	mov	r7, r3
 800e774:	42be      	cmp	r6, r7
 800e776:	680b      	ldr	r3, [r1, #0]
 800e778:	4682      	mov	sl, r0
 800e77a:	460c      	mov	r4, r1
 800e77c:	4690      	mov	r8, r2
 800e77e:	d82d      	bhi.n	800e7dc <__ssputs_r+0x70>
 800e780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e784:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e788:	d026      	beq.n	800e7d8 <__ssputs_r+0x6c>
 800e78a:	6965      	ldr	r5, [r4, #20]
 800e78c:	6909      	ldr	r1, [r1, #16]
 800e78e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e792:	eba3 0901 	sub.w	r9, r3, r1
 800e796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e79a:	1c7b      	adds	r3, r7, #1
 800e79c:	444b      	add	r3, r9
 800e79e:	106d      	asrs	r5, r5, #1
 800e7a0:	429d      	cmp	r5, r3
 800e7a2:	bf38      	it	cc
 800e7a4:	461d      	movcc	r5, r3
 800e7a6:	0553      	lsls	r3, r2, #21
 800e7a8:	d527      	bpl.n	800e7fa <__ssputs_r+0x8e>
 800e7aa:	4629      	mov	r1, r5
 800e7ac:	f7ff ff52 	bl	800e654 <_malloc_r>
 800e7b0:	4606      	mov	r6, r0
 800e7b2:	b360      	cbz	r0, 800e80e <__ssputs_r+0xa2>
 800e7b4:	6921      	ldr	r1, [r4, #16]
 800e7b6:	464a      	mov	r2, r9
 800e7b8:	f000 fae6 	bl	800ed88 <memcpy>
 800e7bc:	89a3      	ldrh	r3, [r4, #12]
 800e7be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e7c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e7c6:	81a3      	strh	r3, [r4, #12]
 800e7c8:	6126      	str	r6, [r4, #16]
 800e7ca:	6165      	str	r5, [r4, #20]
 800e7cc:	444e      	add	r6, r9
 800e7ce:	eba5 0509 	sub.w	r5, r5, r9
 800e7d2:	6026      	str	r6, [r4, #0]
 800e7d4:	60a5      	str	r5, [r4, #8]
 800e7d6:	463e      	mov	r6, r7
 800e7d8:	42be      	cmp	r6, r7
 800e7da:	d900      	bls.n	800e7de <__ssputs_r+0x72>
 800e7dc:	463e      	mov	r6, r7
 800e7de:	6820      	ldr	r0, [r4, #0]
 800e7e0:	4632      	mov	r2, r6
 800e7e2:	4641      	mov	r1, r8
 800e7e4:	f000 faa6 	bl	800ed34 <memmove>
 800e7e8:	68a3      	ldr	r3, [r4, #8]
 800e7ea:	1b9b      	subs	r3, r3, r6
 800e7ec:	60a3      	str	r3, [r4, #8]
 800e7ee:	6823      	ldr	r3, [r4, #0]
 800e7f0:	4433      	add	r3, r6
 800e7f2:	6023      	str	r3, [r4, #0]
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7fa:	462a      	mov	r2, r5
 800e7fc:	f000 fad2 	bl	800eda4 <_realloc_r>
 800e800:	4606      	mov	r6, r0
 800e802:	2800      	cmp	r0, #0
 800e804:	d1e0      	bne.n	800e7c8 <__ssputs_r+0x5c>
 800e806:	6921      	ldr	r1, [r4, #16]
 800e808:	4650      	mov	r0, sl
 800e80a:	f7ff feb7 	bl	800e57c <_free_r>
 800e80e:	230c      	movs	r3, #12
 800e810:	f8ca 3000 	str.w	r3, [sl]
 800e814:	89a3      	ldrh	r3, [r4, #12]
 800e816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e81a:	81a3      	strh	r3, [r4, #12]
 800e81c:	f04f 30ff 	mov.w	r0, #4294967295
 800e820:	e7e9      	b.n	800e7f6 <__ssputs_r+0x8a>
	...

0800e824 <_svfiprintf_r>:
 800e824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e828:	4698      	mov	r8, r3
 800e82a:	898b      	ldrh	r3, [r1, #12]
 800e82c:	061b      	lsls	r3, r3, #24
 800e82e:	b09d      	sub	sp, #116	@ 0x74
 800e830:	4607      	mov	r7, r0
 800e832:	460d      	mov	r5, r1
 800e834:	4614      	mov	r4, r2
 800e836:	d510      	bpl.n	800e85a <_svfiprintf_r+0x36>
 800e838:	690b      	ldr	r3, [r1, #16]
 800e83a:	b973      	cbnz	r3, 800e85a <_svfiprintf_r+0x36>
 800e83c:	2140      	movs	r1, #64	@ 0x40
 800e83e:	f7ff ff09 	bl	800e654 <_malloc_r>
 800e842:	6028      	str	r0, [r5, #0]
 800e844:	6128      	str	r0, [r5, #16]
 800e846:	b930      	cbnz	r0, 800e856 <_svfiprintf_r+0x32>
 800e848:	230c      	movs	r3, #12
 800e84a:	603b      	str	r3, [r7, #0]
 800e84c:	f04f 30ff 	mov.w	r0, #4294967295
 800e850:	b01d      	add	sp, #116	@ 0x74
 800e852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e856:	2340      	movs	r3, #64	@ 0x40
 800e858:	616b      	str	r3, [r5, #20]
 800e85a:	2300      	movs	r3, #0
 800e85c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e85e:	2320      	movs	r3, #32
 800e860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e864:	f8cd 800c 	str.w	r8, [sp, #12]
 800e868:	2330      	movs	r3, #48	@ 0x30
 800e86a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ea08 <_svfiprintf_r+0x1e4>
 800e86e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e872:	f04f 0901 	mov.w	r9, #1
 800e876:	4623      	mov	r3, r4
 800e878:	469a      	mov	sl, r3
 800e87a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e87e:	b10a      	cbz	r2, 800e884 <_svfiprintf_r+0x60>
 800e880:	2a25      	cmp	r2, #37	@ 0x25
 800e882:	d1f9      	bne.n	800e878 <_svfiprintf_r+0x54>
 800e884:	ebba 0b04 	subs.w	fp, sl, r4
 800e888:	d00b      	beq.n	800e8a2 <_svfiprintf_r+0x7e>
 800e88a:	465b      	mov	r3, fp
 800e88c:	4622      	mov	r2, r4
 800e88e:	4629      	mov	r1, r5
 800e890:	4638      	mov	r0, r7
 800e892:	f7ff ff6b 	bl	800e76c <__ssputs_r>
 800e896:	3001      	adds	r0, #1
 800e898:	f000 80a7 	beq.w	800e9ea <_svfiprintf_r+0x1c6>
 800e89c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e89e:	445a      	add	r2, fp
 800e8a0:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	f000 809f 	beq.w	800e9ea <_svfiprintf_r+0x1c6>
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8b6:	f10a 0a01 	add.w	sl, sl, #1
 800e8ba:	9304      	str	r3, [sp, #16]
 800e8bc:	9307      	str	r3, [sp, #28]
 800e8be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8c2:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8c4:	4654      	mov	r4, sl
 800e8c6:	2205      	movs	r2, #5
 800e8c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8cc:	484e      	ldr	r0, [pc, #312]	@ (800ea08 <_svfiprintf_r+0x1e4>)
 800e8ce:	f7f1 fd0f 	bl	80002f0 <memchr>
 800e8d2:	9a04      	ldr	r2, [sp, #16]
 800e8d4:	b9d8      	cbnz	r0, 800e90e <_svfiprintf_r+0xea>
 800e8d6:	06d0      	lsls	r0, r2, #27
 800e8d8:	bf44      	itt	mi
 800e8da:	2320      	movmi	r3, #32
 800e8dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8e0:	0711      	lsls	r1, r2, #28
 800e8e2:	bf44      	itt	mi
 800e8e4:	232b      	movmi	r3, #43	@ 0x2b
 800e8e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8ea:	f89a 3000 	ldrb.w	r3, [sl]
 800e8ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8f0:	d015      	beq.n	800e91e <_svfiprintf_r+0xfa>
 800e8f2:	9a07      	ldr	r2, [sp, #28]
 800e8f4:	4654      	mov	r4, sl
 800e8f6:	2000      	movs	r0, #0
 800e8f8:	f04f 0c0a 	mov.w	ip, #10
 800e8fc:	4621      	mov	r1, r4
 800e8fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e902:	3b30      	subs	r3, #48	@ 0x30
 800e904:	2b09      	cmp	r3, #9
 800e906:	d94b      	bls.n	800e9a0 <_svfiprintf_r+0x17c>
 800e908:	b1b0      	cbz	r0, 800e938 <_svfiprintf_r+0x114>
 800e90a:	9207      	str	r2, [sp, #28]
 800e90c:	e014      	b.n	800e938 <_svfiprintf_r+0x114>
 800e90e:	eba0 0308 	sub.w	r3, r0, r8
 800e912:	fa09 f303 	lsl.w	r3, r9, r3
 800e916:	4313      	orrs	r3, r2
 800e918:	9304      	str	r3, [sp, #16]
 800e91a:	46a2      	mov	sl, r4
 800e91c:	e7d2      	b.n	800e8c4 <_svfiprintf_r+0xa0>
 800e91e:	9b03      	ldr	r3, [sp, #12]
 800e920:	1d19      	adds	r1, r3, #4
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	9103      	str	r1, [sp, #12]
 800e926:	2b00      	cmp	r3, #0
 800e928:	bfbb      	ittet	lt
 800e92a:	425b      	neglt	r3, r3
 800e92c:	f042 0202 	orrlt.w	r2, r2, #2
 800e930:	9307      	strge	r3, [sp, #28]
 800e932:	9307      	strlt	r3, [sp, #28]
 800e934:	bfb8      	it	lt
 800e936:	9204      	strlt	r2, [sp, #16]
 800e938:	7823      	ldrb	r3, [r4, #0]
 800e93a:	2b2e      	cmp	r3, #46	@ 0x2e
 800e93c:	d10a      	bne.n	800e954 <_svfiprintf_r+0x130>
 800e93e:	7863      	ldrb	r3, [r4, #1]
 800e940:	2b2a      	cmp	r3, #42	@ 0x2a
 800e942:	d132      	bne.n	800e9aa <_svfiprintf_r+0x186>
 800e944:	9b03      	ldr	r3, [sp, #12]
 800e946:	1d1a      	adds	r2, r3, #4
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	9203      	str	r2, [sp, #12]
 800e94c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e950:	3402      	adds	r4, #2
 800e952:	9305      	str	r3, [sp, #20]
 800e954:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ea18 <_svfiprintf_r+0x1f4>
 800e958:	7821      	ldrb	r1, [r4, #0]
 800e95a:	2203      	movs	r2, #3
 800e95c:	4650      	mov	r0, sl
 800e95e:	f7f1 fcc7 	bl	80002f0 <memchr>
 800e962:	b138      	cbz	r0, 800e974 <_svfiprintf_r+0x150>
 800e964:	9b04      	ldr	r3, [sp, #16]
 800e966:	eba0 000a 	sub.w	r0, r0, sl
 800e96a:	2240      	movs	r2, #64	@ 0x40
 800e96c:	4082      	lsls	r2, r0
 800e96e:	4313      	orrs	r3, r2
 800e970:	3401      	adds	r4, #1
 800e972:	9304      	str	r3, [sp, #16]
 800e974:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e978:	4824      	ldr	r0, [pc, #144]	@ (800ea0c <_svfiprintf_r+0x1e8>)
 800e97a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e97e:	2206      	movs	r2, #6
 800e980:	f7f1 fcb6 	bl	80002f0 <memchr>
 800e984:	2800      	cmp	r0, #0
 800e986:	d036      	beq.n	800e9f6 <_svfiprintf_r+0x1d2>
 800e988:	4b21      	ldr	r3, [pc, #132]	@ (800ea10 <_svfiprintf_r+0x1ec>)
 800e98a:	bb1b      	cbnz	r3, 800e9d4 <_svfiprintf_r+0x1b0>
 800e98c:	9b03      	ldr	r3, [sp, #12]
 800e98e:	3307      	adds	r3, #7
 800e990:	f023 0307 	bic.w	r3, r3, #7
 800e994:	3308      	adds	r3, #8
 800e996:	9303      	str	r3, [sp, #12]
 800e998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e99a:	4433      	add	r3, r6
 800e99c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e99e:	e76a      	b.n	800e876 <_svfiprintf_r+0x52>
 800e9a0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9a4:	460c      	mov	r4, r1
 800e9a6:	2001      	movs	r0, #1
 800e9a8:	e7a8      	b.n	800e8fc <_svfiprintf_r+0xd8>
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	3401      	adds	r4, #1
 800e9ae:	9305      	str	r3, [sp, #20]
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	f04f 0c0a 	mov.w	ip, #10
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9bc:	3a30      	subs	r2, #48	@ 0x30
 800e9be:	2a09      	cmp	r2, #9
 800e9c0:	d903      	bls.n	800e9ca <_svfiprintf_r+0x1a6>
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d0c6      	beq.n	800e954 <_svfiprintf_r+0x130>
 800e9c6:	9105      	str	r1, [sp, #20]
 800e9c8:	e7c4      	b.n	800e954 <_svfiprintf_r+0x130>
 800e9ca:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	2301      	movs	r3, #1
 800e9d2:	e7f0      	b.n	800e9b6 <_svfiprintf_r+0x192>
 800e9d4:	ab03      	add	r3, sp, #12
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	462a      	mov	r2, r5
 800e9da:	4b0e      	ldr	r3, [pc, #56]	@ (800ea14 <_svfiprintf_r+0x1f0>)
 800e9dc:	a904      	add	r1, sp, #16
 800e9de:	4638      	mov	r0, r7
 800e9e0:	f3af 8000 	nop.w
 800e9e4:	1c42      	adds	r2, r0, #1
 800e9e6:	4606      	mov	r6, r0
 800e9e8:	d1d6      	bne.n	800e998 <_svfiprintf_r+0x174>
 800e9ea:	89ab      	ldrh	r3, [r5, #12]
 800e9ec:	065b      	lsls	r3, r3, #25
 800e9ee:	f53f af2d 	bmi.w	800e84c <_svfiprintf_r+0x28>
 800e9f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e9f4:	e72c      	b.n	800e850 <_svfiprintf_r+0x2c>
 800e9f6:	ab03      	add	r3, sp, #12
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	462a      	mov	r2, r5
 800e9fc:	4b05      	ldr	r3, [pc, #20]	@ (800ea14 <_svfiprintf_r+0x1f0>)
 800e9fe:	a904      	add	r1, sp, #16
 800ea00:	4638      	mov	r0, r7
 800ea02:	f000 f879 	bl	800eaf8 <_printf_i>
 800ea06:	e7ed      	b.n	800e9e4 <_svfiprintf_r+0x1c0>
 800ea08:	0800f054 	.word	0x0800f054
 800ea0c:	0800f05e 	.word	0x0800f05e
 800ea10:	00000000 	.word	0x00000000
 800ea14:	0800e76d 	.word	0x0800e76d
 800ea18:	0800f05a 	.word	0x0800f05a

0800ea1c <_printf_common>:
 800ea1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea20:	4616      	mov	r6, r2
 800ea22:	4698      	mov	r8, r3
 800ea24:	688a      	ldr	r2, [r1, #8]
 800ea26:	690b      	ldr	r3, [r1, #16]
 800ea28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea2c:	4293      	cmp	r3, r2
 800ea2e:	bfb8      	it	lt
 800ea30:	4613      	movlt	r3, r2
 800ea32:	6033      	str	r3, [r6, #0]
 800ea34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea38:	4607      	mov	r7, r0
 800ea3a:	460c      	mov	r4, r1
 800ea3c:	b10a      	cbz	r2, 800ea42 <_printf_common+0x26>
 800ea3e:	3301      	adds	r3, #1
 800ea40:	6033      	str	r3, [r6, #0]
 800ea42:	6823      	ldr	r3, [r4, #0]
 800ea44:	0699      	lsls	r1, r3, #26
 800ea46:	bf42      	ittt	mi
 800ea48:	6833      	ldrmi	r3, [r6, #0]
 800ea4a:	3302      	addmi	r3, #2
 800ea4c:	6033      	strmi	r3, [r6, #0]
 800ea4e:	6825      	ldr	r5, [r4, #0]
 800ea50:	f015 0506 	ands.w	r5, r5, #6
 800ea54:	d106      	bne.n	800ea64 <_printf_common+0x48>
 800ea56:	f104 0a19 	add.w	sl, r4, #25
 800ea5a:	68e3      	ldr	r3, [r4, #12]
 800ea5c:	6832      	ldr	r2, [r6, #0]
 800ea5e:	1a9b      	subs	r3, r3, r2
 800ea60:	42ab      	cmp	r3, r5
 800ea62:	dc26      	bgt.n	800eab2 <_printf_common+0x96>
 800ea64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea68:	6822      	ldr	r2, [r4, #0]
 800ea6a:	3b00      	subs	r3, #0
 800ea6c:	bf18      	it	ne
 800ea6e:	2301      	movne	r3, #1
 800ea70:	0692      	lsls	r2, r2, #26
 800ea72:	d42b      	bmi.n	800eacc <_printf_common+0xb0>
 800ea74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea78:	4641      	mov	r1, r8
 800ea7a:	4638      	mov	r0, r7
 800ea7c:	47c8      	blx	r9
 800ea7e:	3001      	adds	r0, #1
 800ea80:	d01e      	beq.n	800eac0 <_printf_common+0xa4>
 800ea82:	6823      	ldr	r3, [r4, #0]
 800ea84:	6922      	ldr	r2, [r4, #16]
 800ea86:	f003 0306 	and.w	r3, r3, #6
 800ea8a:	2b04      	cmp	r3, #4
 800ea8c:	bf02      	ittt	eq
 800ea8e:	68e5      	ldreq	r5, [r4, #12]
 800ea90:	6833      	ldreq	r3, [r6, #0]
 800ea92:	1aed      	subeq	r5, r5, r3
 800ea94:	68a3      	ldr	r3, [r4, #8]
 800ea96:	bf0c      	ite	eq
 800ea98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ea9c:	2500      	movne	r5, #0
 800ea9e:	4293      	cmp	r3, r2
 800eaa0:	bfc4      	itt	gt
 800eaa2:	1a9b      	subgt	r3, r3, r2
 800eaa4:	18ed      	addgt	r5, r5, r3
 800eaa6:	2600      	movs	r6, #0
 800eaa8:	341a      	adds	r4, #26
 800eaaa:	42b5      	cmp	r5, r6
 800eaac:	d11a      	bne.n	800eae4 <_printf_common+0xc8>
 800eaae:	2000      	movs	r0, #0
 800eab0:	e008      	b.n	800eac4 <_printf_common+0xa8>
 800eab2:	2301      	movs	r3, #1
 800eab4:	4652      	mov	r2, sl
 800eab6:	4641      	mov	r1, r8
 800eab8:	4638      	mov	r0, r7
 800eaba:	47c8      	blx	r9
 800eabc:	3001      	adds	r0, #1
 800eabe:	d103      	bne.n	800eac8 <_printf_common+0xac>
 800eac0:	f04f 30ff 	mov.w	r0, #4294967295
 800eac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eac8:	3501      	adds	r5, #1
 800eaca:	e7c6      	b.n	800ea5a <_printf_common+0x3e>
 800eacc:	18e1      	adds	r1, r4, r3
 800eace:	1c5a      	adds	r2, r3, #1
 800ead0:	2030      	movs	r0, #48	@ 0x30
 800ead2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ead6:	4422      	add	r2, r4
 800ead8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eadc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eae0:	3302      	adds	r3, #2
 800eae2:	e7c7      	b.n	800ea74 <_printf_common+0x58>
 800eae4:	2301      	movs	r3, #1
 800eae6:	4622      	mov	r2, r4
 800eae8:	4641      	mov	r1, r8
 800eaea:	4638      	mov	r0, r7
 800eaec:	47c8      	blx	r9
 800eaee:	3001      	adds	r0, #1
 800eaf0:	d0e6      	beq.n	800eac0 <_printf_common+0xa4>
 800eaf2:	3601      	adds	r6, #1
 800eaf4:	e7d9      	b.n	800eaaa <_printf_common+0x8e>
	...

0800eaf8 <_printf_i>:
 800eaf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eafc:	7e0f      	ldrb	r7, [r1, #24]
 800eafe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eb00:	2f78      	cmp	r7, #120	@ 0x78
 800eb02:	4691      	mov	r9, r2
 800eb04:	4680      	mov	r8, r0
 800eb06:	460c      	mov	r4, r1
 800eb08:	469a      	mov	sl, r3
 800eb0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb0e:	d807      	bhi.n	800eb20 <_printf_i+0x28>
 800eb10:	2f62      	cmp	r7, #98	@ 0x62
 800eb12:	d80a      	bhi.n	800eb2a <_printf_i+0x32>
 800eb14:	2f00      	cmp	r7, #0
 800eb16:	f000 80d1 	beq.w	800ecbc <_printf_i+0x1c4>
 800eb1a:	2f58      	cmp	r7, #88	@ 0x58
 800eb1c:	f000 80b8 	beq.w	800ec90 <_printf_i+0x198>
 800eb20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eb28:	e03a      	b.n	800eba0 <_printf_i+0xa8>
 800eb2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eb2e:	2b15      	cmp	r3, #21
 800eb30:	d8f6      	bhi.n	800eb20 <_printf_i+0x28>
 800eb32:	a101      	add	r1, pc, #4	@ (adr r1, 800eb38 <_printf_i+0x40>)
 800eb34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb38:	0800eb91 	.word	0x0800eb91
 800eb3c:	0800eba5 	.word	0x0800eba5
 800eb40:	0800eb21 	.word	0x0800eb21
 800eb44:	0800eb21 	.word	0x0800eb21
 800eb48:	0800eb21 	.word	0x0800eb21
 800eb4c:	0800eb21 	.word	0x0800eb21
 800eb50:	0800eba5 	.word	0x0800eba5
 800eb54:	0800eb21 	.word	0x0800eb21
 800eb58:	0800eb21 	.word	0x0800eb21
 800eb5c:	0800eb21 	.word	0x0800eb21
 800eb60:	0800eb21 	.word	0x0800eb21
 800eb64:	0800eca3 	.word	0x0800eca3
 800eb68:	0800ebcf 	.word	0x0800ebcf
 800eb6c:	0800ec5d 	.word	0x0800ec5d
 800eb70:	0800eb21 	.word	0x0800eb21
 800eb74:	0800eb21 	.word	0x0800eb21
 800eb78:	0800ecc5 	.word	0x0800ecc5
 800eb7c:	0800eb21 	.word	0x0800eb21
 800eb80:	0800ebcf 	.word	0x0800ebcf
 800eb84:	0800eb21 	.word	0x0800eb21
 800eb88:	0800eb21 	.word	0x0800eb21
 800eb8c:	0800ec65 	.word	0x0800ec65
 800eb90:	6833      	ldr	r3, [r6, #0]
 800eb92:	1d1a      	adds	r2, r3, #4
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	6032      	str	r2, [r6, #0]
 800eb98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eba0:	2301      	movs	r3, #1
 800eba2:	e09c      	b.n	800ecde <_printf_i+0x1e6>
 800eba4:	6833      	ldr	r3, [r6, #0]
 800eba6:	6820      	ldr	r0, [r4, #0]
 800eba8:	1d19      	adds	r1, r3, #4
 800ebaa:	6031      	str	r1, [r6, #0]
 800ebac:	0606      	lsls	r6, r0, #24
 800ebae:	d501      	bpl.n	800ebb4 <_printf_i+0xbc>
 800ebb0:	681d      	ldr	r5, [r3, #0]
 800ebb2:	e003      	b.n	800ebbc <_printf_i+0xc4>
 800ebb4:	0645      	lsls	r5, r0, #25
 800ebb6:	d5fb      	bpl.n	800ebb0 <_printf_i+0xb8>
 800ebb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ebbc:	2d00      	cmp	r5, #0
 800ebbe:	da03      	bge.n	800ebc8 <_printf_i+0xd0>
 800ebc0:	232d      	movs	r3, #45	@ 0x2d
 800ebc2:	426d      	negs	r5, r5
 800ebc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebc8:	4858      	ldr	r0, [pc, #352]	@ (800ed2c <_printf_i+0x234>)
 800ebca:	230a      	movs	r3, #10
 800ebcc:	e011      	b.n	800ebf2 <_printf_i+0xfa>
 800ebce:	6821      	ldr	r1, [r4, #0]
 800ebd0:	6833      	ldr	r3, [r6, #0]
 800ebd2:	0608      	lsls	r0, r1, #24
 800ebd4:	f853 5b04 	ldr.w	r5, [r3], #4
 800ebd8:	d402      	bmi.n	800ebe0 <_printf_i+0xe8>
 800ebda:	0649      	lsls	r1, r1, #25
 800ebdc:	bf48      	it	mi
 800ebde:	b2ad      	uxthmi	r5, r5
 800ebe0:	2f6f      	cmp	r7, #111	@ 0x6f
 800ebe2:	4852      	ldr	r0, [pc, #328]	@ (800ed2c <_printf_i+0x234>)
 800ebe4:	6033      	str	r3, [r6, #0]
 800ebe6:	bf14      	ite	ne
 800ebe8:	230a      	movne	r3, #10
 800ebea:	2308      	moveq	r3, #8
 800ebec:	2100      	movs	r1, #0
 800ebee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ebf2:	6866      	ldr	r6, [r4, #4]
 800ebf4:	60a6      	str	r6, [r4, #8]
 800ebf6:	2e00      	cmp	r6, #0
 800ebf8:	db05      	blt.n	800ec06 <_printf_i+0x10e>
 800ebfa:	6821      	ldr	r1, [r4, #0]
 800ebfc:	432e      	orrs	r6, r5
 800ebfe:	f021 0104 	bic.w	r1, r1, #4
 800ec02:	6021      	str	r1, [r4, #0]
 800ec04:	d04b      	beq.n	800ec9e <_printf_i+0x1a6>
 800ec06:	4616      	mov	r6, r2
 800ec08:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec0c:	fb03 5711 	mls	r7, r3, r1, r5
 800ec10:	5dc7      	ldrb	r7, [r0, r7]
 800ec12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec16:	462f      	mov	r7, r5
 800ec18:	42bb      	cmp	r3, r7
 800ec1a:	460d      	mov	r5, r1
 800ec1c:	d9f4      	bls.n	800ec08 <_printf_i+0x110>
 800ec1e:	2b08      	cmp	r3, #8
 800ec20:	d10b      	bne.n	800ec3a <_printf_i+0x142>
 800ec22:	6823      	ldr	r3, [r4, #0]
 800ec24:	07df      	lsls	r7, r3, #31
 800ec26:	d508      	bpl.n	800ec3a <_printf_i+0x142>
 800ec28:	6923      	ldr	r3, [r4, #16]
 800ec2a:	6861      	ldr	r1, [r4, #4]
 800ec2c:	4299      	cmp	r1, r3
 800ec2e:	bfde      	ittt	le
 800ec30:	2330      	movle	r3, #48	@ 0x30
 800ec32:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec36:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec3a:	1b92      	subs	r2, r2, r6
 800ec3c:	6122      	str	r2, [r4, #16]
 800ec3e:	f8cd a000 	str.w	sl, [sp]
 800ec42:	464b      	mov	r3, r9
 800ec44:	aa03      	add	r2, sp, #12
 800ec46:	4621      	mov	r1, r4
 800ec48:	4640      	mov	r0, r8
 800ec4a:	f7ff fee7 	bl	800ea1c <_printf_common>
 800ec4e:	3001      	adds	r0, #1
 800ec50:	d14a      	bne.n	800ece8 <_printf_i+0x1f0>
 800ec52:	f04f 30ff 	mov.w	r0, #4294967295
 800ec56:	b004      	add	sp, #16
 800ec58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec5c:	6823      	ldr	r3, [r4, #0]
 800ec5e:	f043 0320 	orr.w	r3, r3, #32
 800ec62:	6023      	str	r3, [r4, #0]
 800ec64:	4832      	ldr	r0, [pc, #200]	@ (800ed30 <_printf_i+0x238>)
 800ec66:	2778      	movs	r7, #120	@ 0x78
 800ec68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec6c:	6823      	ldr	r3, [r4, #0]
 800ec6e:	6831      	ldr	r1, [r6, #0]
 800ec70:	061f      	lsls	r7, r3, #24
 800ec72:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec76:	d402      	bmi.n	800ec7e <_printf_i+0x186>
 800ec78:	065f      	lsls	r7, r3, #25
 800ec7a:	bf48      	it	mi
 800ec7c:	b2ad      	uxthmi	r5, r5
 800ec7e:	6031      	str	r1, [r6, #0]
 800ec80:	07d9      	lsls	r1, r3, #31
 800ec82:	bf44      	itt	mi
 800ec84:	f043 0320 	orrmi.w	r3, r3, #32
 800ec88:	6023      	strmi	r3, [r4, #0]
 800ec8a:	b11d      	cbz	r5, 800ec94 <_printf_i+0x19c>
 800ec8c:	2310      	movs	r3, #16
 800ec8e:	e7ad      	b.n	800ebec <_printf_i+0xf4>
 800ec90:	4826      	ldr	r0, [pc, #152]	@ (800ed2c <_printf_i+0x234>)
 800ec92:	e7e9      	b.n	800ec68 <_printf_i+0x170>
 800ec94:	6823      	ldr	r3, [r4, #0]
 800ec96:	f023 0320 	bic.w	r3, r3, #32
 800ec9a:	6023      	str	r3, [r4, #0]
 800ec9c:	e7f6      	b.n	800ec8c <_printf_i+0x194>
 800ec9e:	4616      	mov	r6, r2
 800eca0:	e7bd      	b.n	800ec1e <_printf_i+0x126>
 800eca2:	6833      	ldr	r3, [r6, #0]
 800eca4:	6825      	ldr	r5, [r4, #0]
 800eca6:	6961      	ldr	r1, [r4, #20]
 800eca8:	1d18      	adds	r0, r3, #4
 800ecaa:	6030      	str	r0, [r6, #0]
 800ecac:	062e      	lsls	r6, r5, #24
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	d501      	bpl.n	800ecb6 <_printf_i+0x1be>
 800ecb2:	6019      	str	r1, [r3, #0]
 800ecb4:	e002      	b.n	800ecbc <_printf_i+0x1c4>
 800ecb6:	0668      	lsls	r0, r5, #25
 800ecb8:	d5fb      	bpl.n	800ecb2 <_printf_i+0x1ba>
 800ecba:	8019      	strh	r1, [r3, #0]
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	6123      	str	r3, [r4, #16]
 800ecc0:	4616      	mov	r6, r2
 800ecc2:	e7bc      	b.n	800ec3e <_printf_i+0x146>
 800ecc4:	6833      	ldr	r3, [r6, #0]
 800ecc6:	1d1a      	adds	r2, r3, #4
 800ecc8:	6032      	str	r2, [r6, #0]
 800ecca:	681e      	ldr	r6, [r3, #0]
 800eccc:	6862      	ldr	r2, [r4, #4]
 800ecce:	2100      	movs	r1, #0
 800ecd0:	4630      	mov	r0, r6
 800ecd2:	f7f1 fb0d 	bl	80002f0 <memchr>
 800ecd6:	b108      	cbz	r0, 800ecdc <_printf_i+0x1e4>
 800ecd8:	1b80      	subs	r0, r0, r6
 800ecda:	6060      	str	r0, [r4, #4]
 800ecdc:	6863      	ldr	r3, [r4, #4]
 800ecde:	6123      	str	r3, [r4, #16]
 800ece0:	2300      	movs	r3, #0
 800ece2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ece6:	e7aa      	b.n	800ec3e <_printf_i+0x146>
 800ece8:	6923      	ldr	r3, [r4, #16]
 800ecea:	4632      	mov	r2, r6
 800ecec:	4649      	mov	r1, r9
 800ecee:	4640      	mov	r0, r8
 800ecf0:	47d0      	blx	sl
 800ecf2:	3001      	adds	r0, #1
 800ecf4:	d0ad      	beq.n	800ec52 <_printf_i+0x15a>
 800ecf6:	6823      	ldr	r3, [r4, #0]
 800ecf8:	079b      	lsls	r3, r3, #30
 800ecfa:	d413      	bmi.n	800ed24 <_printf_i+0x22c>
 800ecfc:	68e0      	ldr	r0, [r4, #12]
 800ecfe:	9b03      	ldr	r3, [sp, #12]
 800ed00:	4298      	cmp	r0, r3
 800ed02:	bfb8      	it	lt
 800ed04:	4618      	movlt	r0, r3
 800ed06:	e7a6      	b.n	800ec56 <_printf_i+0x15e>
 800ed08:	2301      	movs	r3, #1
 800ed0a:	4632      	mov	r2, r6
 800ed0c:	4649      	mov	r1, r9
 800ed0e:	4640      	mov	r0, r8
 800ed10:	47d0      	blx	sl
 800ed12:	3001      	adds	r0, #1
 800ed14:	d09d      	beq.n	800ec52 <_printf_i+0x15a>
 800ed16:	3501      	adds	r5, #1
 800ed18:	68e3      	ldr	r3, [r4, #12]
 800ed1a:	9903      	ldr	r1, [sp, #12]
 800ed1c:	1a5b      	subs	r3, r3, r1
 800ed1e:	42ab      	cmp	r3, r5
 800ed20:	dcf2      	bgt.n	800ed08 <_printf_i+0x210>
 800ed22:	e7eb      	b.n	800ecfc <_printf_i+0x204>
 800ed24:	2500      	movs	r5, #0
 800ed26:	f104 0619 	add.w	r6, r4, #25
 800ed2a:	e7f5      	b.n	800ed18 <_printf_i+0x220>
 800ed2c:	0800f065 	.word	0x0800f065
 800ed30:	0800f076 	.word	0x0800f076

0800ed34 <memmove>:
 800ed34:	4288      	cmp	r0, r1
 800ed36:	b510      	push	{r4, lr}
 800ed38:	eb01 0402 	add.w	r4, r1, r2
 800ed3c:	d902      	bls.n	800ed44 <memmove+0x10>
 800ed3e:	4284      	cmp	r4, r0
 800ed40:	4623      	mov	r3, r4
 800ed42:	d807      	bhi.n	800ed54 <memmove+0x20>
 800ed44:	1e43      	subs	r3, r0, #1
 800ed46:	42a1      	cmp	r1, r4
 800ed48:	d008      	beq.n	800ed5c <memmove+0x28>
 800ed4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed52:	e7f8      	b.n	800ed46 <memmove+0x12>
 800ed54:	4402      	add	r2, r0
 800ed56:	4601      	mov	r1, r0
 800ed58:	428a      	cmp	r2, r1
 800ed5a:	d100      	bne.n	800ed5e <memmove+0x2a>
 800ed5c:	bd10      	pop	{r4, pc}
 800ed5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed66:	e7f7      	b.n	800ed58 <memmove+0x24>

0800ed68 <_sbrk_r>:
 800ed68:	b538      	push	{r3, r4, r5, lr}
 800ed6a:	4d06      	ldr	r5, [pc, #24]	@ (800ed84 <_sbrk_r+0x1c>)
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	4604      	mov	r4, r0
 800ed70:	4608      	mov	r0, r1
 800ed72:	602b      	str	r3, [r5, #0]
 800ed74:	f7f3 f9c4 	bl	8002100 <_sbrk>
 800ed78:	1c43      	adds	r3, r0, #1
 800ed7a:	d102      	bne.n	800ed82 <_sbrk_r+0x1a>
 800ed7c:	682b      	ldr	r3, [r5, #0]
 800ed7e:	b103      	cbz	r3, 800ed82 <_sbrk_r+0x1a>
 800ed80:	6023      	str	r3, [r4, #0]
 800ed82:	bd38      	pop	{r3, r4, r5, pc}
 800ed84:	24000ba0 	.word	0x24000ba0

0800ed88 <memcpy>:
 800ed88:	440a      	add	r2, r1
 800ed8a:	4291      	cmp	r1, r2
 800ed8c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ed90:	d100      	bne.n	800ed94 <memcpy+0xc>
 800ed92:	4770      	bx	lr
 800ed94:	b510      	push	{r4, lr}
 800ed96:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ed9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ed9e:	4291      	cmp	r1, r2
 800eda0:	d1f9      	bne.n	800ed96 <memcpy+0xe>
 800eda2:	bd10      	pop	{r4, pc}

0800eda4 <_realloc_r>:
 800eda4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eda8:	4607      	mov	r7, r0
 800edaa:	4614      	mov	r4, r2
 800edac:	460d      	mov	r5, r1
 800edae:	b921      	cbnz	r1, 800edba <_realloc_r+0x16>
 800edb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800edb4:	4611      	mov	r1, r2
 800edb6:	f7ff bc4d 	b.w	800e654 <_malloc_r>
 800edba:	b92a      	cbnz	r2, 800edc8 <_realloc_r+0x24>
 800edbc:	f7ff fbde 	bl	800e57c <_free_r>
 800edc0:	4625      	mov	r5, r4
 800edc2:	4628      	mov	r0, r5
 800edc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edc8:	f000 f81a 	bl	800ee00 <_malloc_usable_size_r>
 800edcc:	4284      	cmp	r4, r0
 800edce:	4606      	mov	r6, r0
 800edd0:	d802      	bhi.n	800edd8 <_realloc_r+0x34>
 800edd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800edd6:	d8f4      	bhi.n	800edc2 <_realloc_r+0x1e>
 800edd8:	4621      	mov	r1, r4
 800edda:	4638      	mov	r0, r7
 800eddc:	f7ff fc3a 	bl	800e654 <_malloc_r>
 800ede0:	4680      	mov	r8, r0
 800ede2:	b908      	cbnz	r0, 800ede8 <_realloc_r+0x44>
 800ede4:	4645      	mov	r5, r8
 800ede6:	e7ec      	b.n	800edc2 <_realloc_r+0x1e>
 800ede8:	42b4      	cmp	r4, r6
 800edea:	4622      	mov	r2, r4
 800edec:	4629      	mov	r1, r5
 800edee:	bf28      	it	cs
 800edf0:	4632      	movcs	r2, r6
 800edf2:	f7ff ffc9 	bl	800ed88 <memcpy>
 800edf6:	4629      	mov	r1, r5
 800edf8:	4638      	mov	r0, r7
 800edfa:	f7ff fbbf 	bl	800e57c <_free_r>
 800edfe:	e7f1      	b.n	800ede4 <_realloc_r+0x40>

0800ee00 <_malloc_usable_size_r>:
 800ee00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee04:	1f18      	subs	r0, r3, #4
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	bfbc      	itt	lt
 800ee0a:	580b      	ldrlt	r3, [r1, r0]
 800ee0c:	18c0      	addlt	r0, r0, r3
 800ee0e:	4770      	bx	lr

0800ee10 <_init>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	bf00      	nop
 800ee14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee16:	bc08      	pop	{r3}
 800ee18:	469e      	mov	lr, r3
 800ee1a:	4770      	bx	lr

0800ee1c <_fini>:
 800ee1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1e:	bf00      	nop
 800ee20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee22:	bc08      	pop	{r3}
 800ee24:	469e      	mov	lr, r3
 800ee26:	4770      	bx	lr
