
Camera2LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abf0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800ae90  0800ae90  0000be90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800afbc  0800afbc  0000bfbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800afc4  0800afc4  0000bfc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800afc8  0800afc8  0000bfc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0800afcc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDescripSection 00000060  24000064  0800b030  0000c064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  240000c4  0800b090  0000c0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002619c  24000124  0800b0f0  0000c124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240262c0  0800b0f0  0000c2c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00028cb0  00000000  00000000  0000c152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ca4  00000000  00000000  00034e02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c68  00000000  00000000  00039aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001622  00000000  00000000  0003b710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ceaf  00000000  00000000  0003cd32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aebf  00000000  00000000  00079be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001753dd  00000000  00000000  000a4aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00219e7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e64  00000000  00000000  00219ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00221d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000124 	.word	0x24000124
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ae78 	.word	0x0800ae78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000128 	.word	0x24000128
 80002dc:	0800ae78 	.word	0x0800ae78

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b988 	b.w	80006b8 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	468e      	mov	lr, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	4688      	mov	r8, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d962      	bls.n	800049c <__udivmoddi4+0xdc>
 80003d6:	fab2 f682 	clz	r6, r2
 80003da:	b14e      	cbz	r6, 80003f0 <__udivmoddi4+0x30>
 80003dc:	f1c6 0320 	rsb	r3, r6, #32
 80003e0:	fa01 f806 	lsl.w	r8, r1, r6
 80003e4:	fa20 f303 	lsr.w	r3, r0, r3
 80003e8:	40b7      	lsls	r7, r6
 80003ea:	ea43 0808 	orr.w	r8, r3, r8
 80003ee:	40b4      	lsls	r4, r6
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	fa1f fc87 	uxth.w	ip, r7
 80003f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003fc:	0c23      	lsrs	r3, r4, #16
 80003fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000402:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000406:	fb01 f20c 	mul.w	r2, r1, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d909      	bls.n	8000422 <__udivmoddi4+0x62>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f101 30ff 	add.w	r0, r1, #4294967295
 8000414:	f080 80ea 	bcs.w	80005ec <__udivmoddi4+0x22c>
 8000418:	429a      	cmp	r2, r3
 800041a:	f240 80e7 	bls.w	80005ec <__udivmoddi4+0x22c>
 800041e:	3902      	subs	r1, #2
 8000420:	443b      	add	r3, r7
 8000422:	1a9a      	subs	r2, r3, r2
 8000424:	b2a3      	uxth	r3, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb00 fc0c 	mul.w	ip, r0, ip
 8000436:	459c      	cmp	ip, r3
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x8e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000440:	f080 80d6 	bcs.w	80005f0 <__udivmoddi4+0x230>
 8000444:	459c      	cmp	ip, r3
 8000446:	f240 80d3 	bls.w	80005f0 <__udivmoddi4+0x230>
 800044a:	443b      	add	r3, r7
 800044c:	3802      	subs	r0, #2
 800044e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000452:	eba3 030c 	sub.w	r3, r3, ip
 8000456:	2100      	movs	r1, #0
 8000458:	b11d      	cbz	r5, 8000462 <__udivmoddi4+0xa2>
 800045a:	40f3      	lsrs	r3, r6
 800045c:	2200      	movs	r2, #0
 800045e:	e9c5 3200 	strd	r3, r2, [r5]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d905      	bls.n	8000476 <__udivmoddi4+0xb6>
 800046a:	b10d      	cbz	r5, 8000470 <__udivmoddi4+0xb0>
 800046c:	e9c5 0100 	strd	r0, r1, [r5]
 8000470:	2100      	movs	r1, #0
 8000472:	4608      	mov	r0, r1
 8000474:	e7f5      	b.n	8000462 <__udivmoddi4+0xa2>
 8000476:	fab3 f183 	clz	r1, r3
 800047a:	2900      	cmp	r1, #0
 800047c:	d146      	bne.n	800050c <__udivmoddi4+0x14c>
 800047e:	4573      	cmp	r3, lr
 8000480:	d302      	bcc.n	8000488 <__udivmoddi4+0xc8>
 8000482:	4282      	cmp	r2, r0
 8000484:	f200 8105 	bhi.w	8000692 <__udivmoddi4+0x2d2>
 8000488:	1a84      	subs	r4, r0, r2
 800048a:	eb6e 0203 	sbc.w	r2, lr, r3
 800048e:	2001      	movs	r0, #1
 8000490:	4690      	mov	r8, r2
 8000492:	2d00      	cmp	r5, #0
 8000494:	d0e5      	beq.n	8000462 <__udivmoddi4+0xa2>
 8000496:	e9c5 4800 	strd	r4, r8, [r5]
 800049a:	e7e2      	b.n	8000462 <__udivmoddi4+0xa2>
 800049c:	2a00      	cmp	r2, #0
 800049e:	f000 8090 	beq.w	80005c2 <__udivmoddi4+0x202>
 80004a2:	fab2 f682 	clz	r6, r2
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	f040 80a4 	bne.w	80005f4 <__udivmoddi4+0x234>
 80004ac:	1a8a      	subs	r2, r1, r2
 80004ae:	0c03      	lsrs	r3, r0, #16
 80004b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b4:	b280      	uxth	r0, r0
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	2101      	movs	r1, #1
 80004ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80004be:	fb0e 221c 	mls	r2, lr, ip, r2
 80004c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004c6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x11e>
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004d4:	d202      	bcs.n	80004dc <__udivmoddi4+0x11c>
 80004d6:	429a      	cmp	r2, r3
 80004d8:	f200 80e0 	bhi.w	800069c <__udivmoddi4+0x2dc>
 80004dc:	46c4      	mov	ip, r8
 80004de:	1a9b      	subs	r3, r3, r2
 80004e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ec:	fb02 f404 	mul.w	r4, r2, r4
 80004f0:	429c      	cmp	r4, r3
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x144>
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x142>
 80004fc:	429c      	cmp	r4, r3
 80004fe:	f200 80ca 	bhi.w	8000696 <__udivmoddi4+0x2d6>
 8000502:	4602      	mov	r2, r0
 8000504:	1b1b      	subs	r3, r3, r4
 8000506:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800050a:	e7a5      	b.n	8000458 <__udivmoddi4+0x98>
 800050c:	f1c1 0620 	rsb	r6, r1, #32
 8000510:	408b      	lsls	r3, r1
 8000512:	fa22 f706 	lsr.w	r7, r2, r6
 8000516:	431f      	orrs	r7, r3
 8000518:	fa0e f401 	lsl.w	r4, lr, r1
 800051c:	fa20 f306 	lsr.w	r3, r0, r6
 8000520:	fa2e fe06 	lsr.w	lr, lr, r6
 8000524:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000528:	4323      	orrs	r3, r4
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	fa1f fc87 	uxth.w	ip, r7
 8000532:	fbbe f0f9 	udiv	r0, lr, r9
 8000536:	0c1c      	lsrs	r4, r3, #16
 8000538:	fb09 ee10 	mls	lr, r9, r0, lr
 800053c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000540:	fb00 fe0c 	mul.w	lr, r0, ip
 8000544:	45a6      	cmp	lr, r4
 8000546:	fa02 f201 	lsl.w	r2, r2, r1
 800054a:	d909      	bls.n	8000560 <__udivmoddi4+0x1a0>
 800054c:	193c      	adds	r4, r7, r4
 800054e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000552:	f080 809c 	bcs.w	800068e <__udivmoddi4+0x2ce>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f240 8099 	bls.w	800068e <__udivmoddi4+0x2ce>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	eba4 040e 	sub.w	r4, r4, lr
 8000564:	fa1f fe83 	uxth.w	lr, r3
 8000568:	fbb4 f3f9 	udiv	r3, r4, r9
 800056c:	fb09 4413 	mls	r4, r9, r3, r4
 8000570:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000574:	fb03 fc0c 	mul.w	ip, r3, ip
 8000578:	45a4      	cmp	ip, r4
 800057a:	d908      	bls.n	800058e <__udivmoddi4+0x1ce>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000582:	f080 8082 	bcs.w	800068a <__udivmoddi4+0x2ca>
 8000586:	45a4      	cmp	ip, r4
 8000588:	d97f      	bls.n	800068a <__udivmoddi4+0x2ca>
 800058a:	3b02      	subs	r3, #2
 800058c:	443c      	add	r4, r7
 800058e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000592:	eba4 040c 	sub.w	r4, r4, ip
 8000596:	fba0 ec02 	umull	lr, ip, r0, r2
 800059a:	4564      	cmp	r4, ip
 800059c:	4673      	mov	r3, lr
 800059e:	46e1      	mov	r9, ip
 80005a0:	d362      	bcc.n	8000668 <__udivmoddi4+0x2a8>
 80005a2:	d05f      	beq.n	8000664 <__udivmoddi4+0x2a4>
 80005a4:	b15d      	cbz	r5, 80005be <__udivmoddi4+0x1fe>
 80005a6:	ebb8 0203 	subs.w	r2, r8, r3
 80005aa:	eb64 0409 	sbc.w	r4, r4, r9
 80005ae:	fa04 f606 	lsl.w	r6, r4, r6
 80005b2:	fa22 f301 	lsr.w	r3, r2, r1
 80005b6:	431e      	orrs	r6, r3
 80005b8:	40cc      	lsrs	r4, r1
 80005ba:	e9c5 6400 	strd	r6, r4, [r5]
 80005be:	2100      	movs	r1, #0
 80005c0:	e74f      	b.n	8000462 <__udivmoddi4+0xa2>
 80005c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005c6:	0c01      	lsrs	r1, r0, #16
 80005c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005cc:	b280      	uxth	r0, r0
 80005ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005d2:	463b      	mov	r3, r7
 80005d4:	4638      	mov	r0, r7
 80005d6:	463c      	mov	r4, r7
 80005d8:	46b8      	mov	r8, r7
 80005da:	46be      	mov	lr, r7
 80005dc:	2620      	movs	r6, #32
 80005de:	fbb1 f1f7 	udiv	r1, r1, r7
 80005e2:	eba2 0208 	sub.w	r2, r2, r8
 80005e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005ea:	e766      	b.n	80004ba <__udivmoddi4+0xfa>
 80005ec:	4601      	mov	r1, r0
 80005ee:	e718      	b.n	8000422 <__udivmoddi4+0x62>
 80005f0:	4610      	mov	r0, r2
 80005f2:	e72c      	b.n	800044e <__udivmoddi4+0x8e>
 80005f4:	f1c6 0220 	rsb	r2, r6, #32
 80005f8:	fa2e f302 	lsr.w	r3, lr, r2
 80005fc:	40b7      	lsls	r7, r6
 80005fe:	40b1      	lsls	r1, r6
 8000600:	fa20 f202 	lsr.w	r2, r0, r2
 8000604:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000608:	430a      	orrs	r2, r1
 800060a:	fbb3 f8fe 	udiv	r8, r3, lr
 800060e:	b2bc      	uxth	r4, r7
 8000610:	fb0e 3318 	mls	r3, lr, r8, r3
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800061a:	fb08 f904 	mul.w	r9, r8, r4
 800061e:	40b0      	lsls	r0, r6
 8000620:	4589      	cmp	r9, r1
 8000622:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000626:	b280      	uxth	r0, r0
 8000628:	d93e      	bls.n	80006a8 <__udivmoddi4+0x2e8>
 800062a:	1879      	adds	r1, r7, r1
 800062c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000630:	d201      	bcs.n	8000636 <__udivmoddi4+0x276>
 8000632:	4589      	cmp	r9, r1
 8000634:	d81f      	bhi.n	8000676 <__udivmoddi4+0x2b6>
 8000636:	eba1 0109 	sub.w	r1, r1, r9
 800063a:	fbb1 f9fe 	udiv	r9, r1, lr
 800063e:	fb09 f804 	mul.w	r8, r9, r4
 8000642:	fb0e 1119 	mls	r1, lr, r9, r1
 8000646:	b292      	uxth	r2, r2
 8000648:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800064c:	4542      	cmp	r2, r8
 800064e:	d229      	bcs.n	80006a4 <__udivmoddi4+0x2e4>
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	f109 31ff 	add.w	r1, r9, #4294967295
 8000656:	d2c4      	bcs.n	80005e2 <__udivmoddi4+0x222>
 8000658:	4542      	cmp	r2, r8
 800065a:	d2c2      	bcs.n	80005e2 <__udivmoddi4+0x222>
 800065c:	f1a9 0102 	sub.w	r1, r9, #2
 8000660:	443a      	add	r2, r7
 8000662:	e7be      	b.n	80005e2 <__udivmoddi4+0x222>
 8000664:	45f0      	cmp	r8, lr
 8000666:	d29d      	bcs.n	80005a4 <__udivmoddi4+0x1e4>
 8000668:	ebbe 0302 	subs.w	r3, lr, r2
 800066c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000670:	3801      	subs	r0, #1
 8000672:	46e1      	mov	r9, ip
 8000674:	e796      	b.n	80005a4 <__udivmoddi4+0x1e4>
 8000676:	eba7 0909 	sub.w	r9, r7, r9
 800067a:	4449      	add	r1, r9
 800067c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000680:	fbb1 f9fe 	udiv	r9, r1, lr
 8000684:	fb09 f804 	mul.w	r8, r9, r4
 8000688:	e7db      	b.n	8000642 <__udivmoddi4+0x282>
 800068a:	4673      	mov	r3, lr
 800068c:	e77f      	b.n	800058e <__udivmoddi4+0x1ce>
 800068e:	4650      	mov	r0, sl
 8000690:	e766      	b.n	8000560 <__udivmoddi4+0x1a0>
 8000692:	4608      	mov	r0, r1
 8000694:	e6fd      	b.n	8000492 <__udivmoddi4+0xd2>
 8000696:	443b      	add	r3, r7
 8000698:	3a02      	subs	r2, #2
 800069a:	e733      	b.n	8000504 <__udivmoddi4+0x144>
 800069c:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a0:	443b      	add	r3, r7
 80006a2:	e71c      	b.n	80004de <__udivmoddi4+0x11e>
 80006a4:	4649      	mov	r1, r9
 80006a6:	e79c      	b.n	80005e2 <__udivmoddi4+0x222>
 80006a8:	eba1 0109 	sub.w	r1, r1, r9
 80006ac:	46c4      	mov	ip, r8
 80006ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b2:	fb09 f804 	mul.w	r8, r9, r4
 80006b6:	e7c4      	b.n	8000642 <__udivmoddi4+0x282>

080006b8 <__aeabi_idiv0>:
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop

080006bc <OV5640_WriteReg>:
		OV5640_FORMAT_RGB565
};

OV5640_CameraConfig* activeCameraConfigPtr = &activeCameraConfig;

HAL_StatusTypeDef OV5640_WriteReg(uint16_t regAddr, uint8_t data) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	b086      	sub	sp, #24
 80006c0:	af04      	add	r7, sp, #16
 80006c2:	4603      	mov	r3, r0
 80006c4:	460a      	mov	r2, r1
 80006c6:	80fb      	strh	r3, [r7, #6]
 80006c8:	4613      	mov	r3, r2
 80006ca:	717b      	strb	r3, [r7, #5]
	HAL_Delay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f001 fd35 	bl	800213c <HAL_Delay>


	return HAL_I2C_Mem_Write(&hi2c1, OV5640_I2C_ADDR_W, regAddr,
 80006d2:	88fa      	ldrh	r2, [r7, #6]
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	9302      	str	r3, [sp, #8]
 80006da:	2301      	movs	r3, #1
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	1d7b      	adds	r3, r7, #5
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2302      	movs	r3, #2
 80006e4:	2178      	movs	r1, #120	@ 0x78
 80006e6:	4804      	ldr	r0, [pc, #16]	@ (80006f8 <OV5640_WriteReg+0x3c>)
 80006e8:	f003 f8b4 	bl	8003854 <HAL_I2C_Mem_Write>
 80006ec:	4603      	mov	r3, r0
			I2C_MEMADD_SIZE_16BIT,&data,1,HAL_MAX_DELAY);

}
 80006ee:	4618      	mov	r0, r3
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	24025a84 	.word	0x24025a84

080006fc <OV5640_ReadReg>:

HAL_StatusTypeDef OV5640_ReadReg(uint16_t regAddr, uint8_t *dataPtr) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08e      	sub	sp, #56	@ 0x38
 8000700:	af04      	add	r7, sp, #16
 8000702:	4603      	mov	r3, r0
 8000704:	6039      	str	r1, [r7, #0]
 8000706:	80fb      	strh	r3, [r7, #6]
	char buff[25] = "readStart\r\n";
 8000708:	4a13      	ldr	r2, [pc, #76]	@ (8000758 <OV5640_ReadReg+0x5c>)
 800070a:	f107 030c 	add.w	r3, r7, #12
 800070e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000710:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000714:	f107 0318 	add.w	r3, r7, #24
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	731a      	strb	r2, [r3, #12]
	HAL_UART_Transmit(&huart3, &buff, sizeof(buff), HAL_MAX_DELAY);
 8000722:	f107 010c 	add.w	r1, r7, #12
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	2219      	movs	r2, #25
 800072c:	480b      	ldr	r0, [pc, #44]	@ (800075c <OV5640_ReadReg+0x60>)
 800072e:	f008 fae1 	bl	8008cf4 <HAL_UART_Transmit>
	return HAL_I2C_Mem_Read(&hi2c1, OV5640_I2C_ADDR_R, regAddr,
 8000732:	88fa      	ldrh	r2, [r7, #6]
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	9302      	str	r3, [sp, #8]
 800073a:	2301      	movs	r3, #1
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2302      	movs	r3, #2
 8000744:	2179      	movs	r1, #121	@ 0x79
 8000746:	4806      	ldr	r0, [pc, #24]	@ (8000760 <OV5640_ReadReg+0x64>)
 8000748:	f003 f998 	bl	8003a7c <HAL_I2C_Mem_Read>
 800074c:	4603      	mov	r3, r0
			I2C_MEMADD_SIZE_16BIT, dataPtr, 1, HAL_MAX_DELAY);
}
 800074e:	4618      	mov	r0, r3
 8000750:	3728      	adds	r7, #40	@ 0x28
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	0800ae90 	.word	0x0800ae90
 800075c:	24025bfc 	.word	0x24025bfc
 8000760:	24025a84 	.word	0x24025a84

08000764 <OV5640_PowerUpSequence>:
		return HAL_ERROR;
	}

	return HAL_OK;
}
HAL_StatusTypeDef OV5640_PowerUpSequence(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
	HAL_Delay(10);
 800076a:	200a      	movs	r0, #10
 800076c:	f001 fce6 	bl	800213c <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	2101      	movs	r1, #1
 8000774:	480f      	ldr	r0, [pc, #60]	@ (80007b4 <OV5640_PowerUpSequence+0x50>)
 8000776:	f002 ffb7 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800077a:	2005      	movs	r0, #5
 800077c:	f001 fcde 	bl	800213c <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RST_GPIO_Port, CAMERA_RST_Pin, GPIO_PIN_SET);
 8000780:	2201      	movs	r2, #1
 8000782:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000786:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <OV5640_PowerUpSequence+0x54>)
 8000788:	f002 ffae 	bl	80036e8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800078c:	2014      	movs	r0, #20
 800078e:	f001 fcd5 	bl	800213c <HAL_Delay>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000792:	2100      	movs	r1, #0
 8000794:	4809      	ldr	r0, [pc, #36]	@ (80007bc <OV5640_PowerUpSequence+0x58>)
 8000796:	f006 fff7 	bl	8007788 <HAL_TIM_PWM_Start>
	HAL_Delay(5);
 800079a:	2005      	movs	r0, #5
 800079c:	f001 fcce 	bl	800213c <HAL_Delay>
	HAL_StatusTypeDef status = OV5640_ConfigureCamera();
 80007a0:	f000 f884 	bl	80008ac <OV5640_ConfigureCamera>
 80007a4:	4603      	mov	r3, r0
 80007a6:	71fb      	strb	r3, [r7, #7]
	return status;
 80007a8:	79fb      	ldrb	r3, [r7, #7]

}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	58020000 	.word	0x58020000
 80007b8:	58021800 	.word	0x58021800
 80007bc:	24025bb0 	.word	0x24025bb0

080007c0 <OV5640_SetResolution>:
HAL_StatusTypeDef OV5640_SetResolution(void){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80007c6:	2300      	movs	r3, #0
 80007c8:	71fb      	strb	r3, [r7, #7]
	const uint16_t selectedWidth =OV5640_Resolutions[activeCameraConfigPtr->resolution].width;
 80007ca:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <OV5640_SetResolution+0xa0>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <OV5640_SetResolution+0xa4>)
 80007d4:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 80007d8:	80bb      	strh	r3, [r7, #4]
	const uint16_t selectedHeight = OV5640_Resolutions[activeCameraConfigPtr->resolution].height;
 80007da:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <OV5640_SetResolution+0xa0>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	4a20      	ldr	r2, [pc, #128]	@ (8000864 <OV5640_SetResolution+0xa4>)
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	4413      	add	r3, r2
 80007e6:	885b      	ldrh	r3, [r3, #2]
 80007e8:	807b      	strh	r3, [r7, #2]
	const uint8_t heightBit_H = selectedHeight>>8;
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	707b      	strb	r3, [r7, #1]
	status |= OV5640_WriteReg(OV5640_REG_OUT_WIDTH_H, (uint8_t)selectedWidth>>8);
 80007f2:	88bb      	ldrh	r3, [r7, #4]
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	121b      	asrs	r3, r3, #8
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	f643 0008 	movw	r0, #14344	@ 0x3808
 8000800:	f7ff ff5c 	bl	80006bc <OV5640_WriteReg>
 8000804:	4603      	mov	r3, r0
 8000806:	461a      	mov	r2, r3
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	4313      	orrs	r3, r2
 800080c:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_WIDTH_L, (uint8_t)selectedWidth&0xFF);
 800080e:	88bb      	ldrh	r3, [r7, #4]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	4619      	mov	r1, r3
 8000814:	f643 0009 	movw	r0, #14345	@ 0x3809
 8000818:	f7ff ff50 	bl	80006bc <OV5640_WriteReg>
 800081c:	4603      	mov	r3, r0
 800081e:	461a      	mov	r2, r3
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	4313      	orrs	r3, r2
 8000824:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_HEIGHT_H, heightBit_H);
 8000826:	787b      	ldrb	r3, [r7, #1]
 8000828:	4619      	mov	r1, r3
 800082a:	f643 000a 	movw	r0, #14346	@ 0x380a
 800082e:	f7ff ff45 	bl	80006bc <OV5640_WriteReg>
 8000832:	4603      	mov	r3, r0
 8000834:	461a      	mov	r2, r3
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4313      	orrs	r3, r2
 800083a:	71fb      	strb	r3, [r7, #7]
	status |= OV5640_WriteReg(OV5640_REG_OUT_HEIGHT_L, (uint8_t)selectedHeight&0xFF);
 800083c:	887b      	ldrh	r3, [r7, #2]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	4619      	mov	r1, r3
 8000842:	f643 000b 	movw	r0, #14347	@ 0x380b
 8000846:	f7ff ff39 	bl	80006bc <OV5640_WriteReg>
 800084a:	4603      	mov	r3, r0
 800084c:	461a      	mov	r2, r3
 800084e:	79fb      	ldrb	r3, [r7, #7]
 8000850:	4313      	orrs	r3, r2
 8000852:	71fb      	strb	r3, [r7, #7]
	return status;
 8000854:	79fb      	ldrb	r3, [r7, #7]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	24000000 	.word	0x24000000
 8000864:	0800af34 	.word	0x0800af34

08000868 <OV5640_SetFormat>:
HAL_StatusTypeDef OV5640_SetFormat(void){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	71fb      	strb	r3, [r7, #7]
	uint8_t formatData= OV5640_Formats[activeCameraConfigPtr->pixelFormat].formatValue;
 8000872:	4b0c      	ldr	r3, [pc, #48]	@ (80008a4 <OV5640_SetFormat+0x3c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	785b      	ldrb	r3, [r3, #1]
 8000878:	461a      	mov	r2, r3
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <OV5640_SetFormat+0x40>)
 800087c:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000880:	71bb      	strb	r3, [r7, #6]
	status |= OV5640_WriteReg(OV5640_REG_FORMAT_CTRL, formatData);
 8000882:	79bb      	ldrb	r3, [r7, #6]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 800088a:	f7ff ff17 	bl	80006bc <OV5640_WriteReg>
 800088e:	4603      	mov	r3, r0
 8000890:	461a      	mov	r2, r3
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	4313      	orrs	r3, r2
 8000896:	71fb      	strb	r3, [r7, #7]
	return status;
 8000898:	79fb      	ldrb	r3, [r7, #7]


}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	24000000 	.word	0x24000000
 80008a8:	0800af40 	.word	0x0800af40

080008ac <OV5640_ConfigureCamera>:
HAL_StatusTypeDef OV5640_ConfigureCamera(void){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b09c      	sub	sp, #112	@ 0x70
 80008b0:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t resetValue = 0x0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

	OV5640_ReadReg(OV5640_SOFTWARE_RESET, &resetValue);
 80008be:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 80008c2:	4619      	mov	r1, r3
 80008c4:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008c8:	f7ff ff18 	bl	80006fc <OV5640_ReadReg>
	resetValue |=0x80;
 80008cc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80008d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	OV5640_WriteReg(OV5640_SOFTWARE_RESET, resetValue);
 80008da:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80008de:	4619      	mov	r1, r3
 80008e0:	f243 0008 	movw	r0, #12296	@ 0x3008
 80008e4:	f7ff feea 	bl	80006bc <OV5640_WriteReg>
	HAL_Delay(10);
 80008e8:	200a      	movs	r0, #10
 80008ea:	f001 fc27 	bl	800213c <HAL_Delay>
	resetValue &= ~0x80;
 80008ee:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80008f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
	OV5640_WriteReg(OV5640_SOFTWARE_RESET, resetValue);
 80008fc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000900:	4619      	mov	r1, r3
 8000902:	f243 0008 	movw	r0, #12296	@ 0x3008
 8000906:	f7ff fed9 	bl	80006bc <OV5640_WriteReg>
	HAL_Delay(100);
 800090a:	2064      	movs	r0, #100	@ 0x64
 800090c:	f001 fc16 	bl	800213c <HAL_Delay>

	status |= OV5640_SetResolution();
 8000910:	f7ff ff56 	bl	80007c0 <OV5640_SetResolution>
 8000914:	4603      	mov	r3, r0
 8000916:	461a      	mov	r2, r3
 8000918:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800091c:	4313      	orrs	r3, r2
 800091e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	status |= OV5640_SetFormat();
 8000922:	f7ff ffa1 	bl	8000868 <OV5640_SetFormat>
 8000926:	4603      	mov	r3, r0
 8000928:	461a      	mov	r2, r3
 800092a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800092e:	4313      	orrs	r3, r2
 8000930:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

	status |= OV5640_WriteReg(OV5640_POLARITY_CTRL, OV5640_POLARITY);
 8000934:	2122      	movs	r1, #34	@ 0x22
 8000936:	f244 7040 	movw	r0, #18240	@ 0x4740
 800093a:	f7ff febf 	bl	80006bc <OV5640_WriteReg>
 800093e:	4603      	mov	r3, r0
 8000940:	461a      	mov	r2, r3
 8000942:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8000946:	4313      	orrs	r3, r2
 8000948:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	status |= OV5640_WriteReg(0x3017, 0xFF);
 800094c:	21ff      	movs	r1, #255	@ 0xff
 800094e:	f243 0017 	movw	r0, #12311	@ 0x3017
 8000952:	f7ff feb3 	bl	80006bc <OV5640_WriteReg>
 8000956:	4603      	mov	r3, r0
 8000958:	461a      	mov	r2, r3
 800095a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800095e:	4313      	orrs	r3, r2
 8000960:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	uint8_t heightH = 0, heightL = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
 800096a:	2300      	movs	r3, #0
 800096c:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
	OV5640_ReadReg(OV5640_REG_OUT_HEIGHT_H, &heightH);
 8000970:	f107 036a 	add.w	r3, r7, #106	@ 0x6a
 8000974:	4619      	mov	r1, r3
 8000976:	f643 000a 	movw	r0, #14346	@ 0x380a
 800097a:	f7ff febf 	bl	80006fc <OV5640_ReadReg>
	OV5640_ReadReg(OV5640_REG_OUT_HEIGHT_L, &heightL);
 800097e:	f107 0369 	add.w	r3, r7, #105	@ 0x69
 8000982:	4619      	mov	r1, r3
 8000984:	f643 000b 	movw	r0, #14347	@ 0x380b
 8000988:	f7ff feb8 	bl	80006fc <OV5640_ReadReg>
	char buff3[30];
	sprintf(buff3, "Height H: %d, L: %d\n\r", heightH, heightL);
 800098c:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 8000990:	461a      	mov	r2, r3
 8000992:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000996:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800099a:	4947      	ldr	r1, [pc, #284]	@ (8000ab8 <OV5640_ConfigureCamera+0x20c>)
 800099c:	f009 fdcc 	bl	800a538 <siprintf>
	HAL_UART_Transmit(&huart3, buff3, strlen(buff3), HAL_MAX_DELAY);
 80009a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fc9b 	bl	80002e0 <strlen>
 80009aa:	4603      	mov	r3, r0
 80009ac:	b29a      	uxth	r2, r3
 80009ae:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295
 80009b6:	4841      	ldr	r0, [pc, #260]	@ (8000abc <OV5640_ConfigureCamera+0x210>)
 80009b8:	f008 f99c 	bl	8008cf4 <HAL_UART_Transmit>
	uint8_t pol1;
	OV5640_ReadReg(OV5640_REG_FORMAT_CTRL, &pol1);
 80009bc:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 4086 	mov.w	r0, #17152	@ 0x4300
 80009c6:	f7ff fe99 	bl	80006fc <OV5640_ReadReg>
	char buff2[20];
	sprintf(buff2, "format: : %d\n\r", pol1);
 80009ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80009ce:	461a      	mov	r2, r3
 80009d0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009d4:	493a      	ldr	r1, [pc, #232]	@ (8000ac0 <OV5640_ConfigureCamera+0x214>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	f009 fdae 	bl	800a538 <siprintf>
	HAL_UART_Transmit(&huart3, buff2, strlen(buff2), HAL_MAX_DELAY);
 80009dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fc7d 	bl	80002e0 <strlen>
 80009e6:	4603      	mov	r3, r0
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80009ee:	f04f 33ff 	mov.w	r3, #4294967295
 80009f2:	4832      	ldr	r0, [pc, #200]	@ (8000abc <OV5640_ConfigureCamera+0x210>)
 80009f4:	f008 f97e 	bl	8008cf4 <HAL_UART_Transmit>
	OV5640_WriteReg(0x503D, 0x00);
 80009f8:	2100      	movs	r1, #0
 80009fa:	f245 003d 	movw	r0, #20541	@ 0x503d
 80009fe:	f7ff fe5d 	bl	80006bc <OV5640_WriteReg>
	HAL_Delay(10);
 8000a02:	200a      	movs	r0, #10
 8000a04:	f001 fb9a 	bl	800213c <HAL_Delay>
	uint16_t result = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	uint8_t resultL = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t resultH = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	//write format for format control register to make format rgb565
	char buff5[20];
	OV5640_ReadReg(OV5640_REG_OUT_HEIGHT_L, &resultL);
 8000a1a:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f643 000b 	movw	r0, #14347	@ 0x380b
 8000a24:	f7ff fe6a 	bl	80006fc <OV5640_ReadReg>
	OV5640_ReadReg(OV5640_REG_OUT_HEIGHT_H, &resultH);
 8000a28:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f643 000a 	movw	r0, #14346	@ 0x380a
 8000a32:	f7ff fe63 	bl	80006fc <OV5640_ReadReg>
	result = (resultH<<8)+resultL;
 8000a36:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000a42:	4413      	add	r3, r2
 8000a44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

	sprintf(buff5, "result height: %d\n\r", result);
 8000a48:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	491c      	ldr	r1, [pc, #112]	@ (8000ac4 <OV5640_ConfigureCamera+0x218>)
 8000a52:	4618      	mov	r0, r3
 8000a54:	f009 fd70 	bl	800a538 <siprintf>
	HAL_UART_Transmit(&huart3, buff5, strlen(buff5), HAL_MAX_DELAY);
 8000a58:	f107 0318 	add.w	r3, r7, #24
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fc3f 	bl	80002e0 <strlen>
 8000a62:	4603      	mov	r3, r0
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	f107 0118 	add.w	r1, r7, #24
 8000a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6e:	4813      	ldr	r0, [pc, #76]	@ (8000abc <OV5640_ConfigureCamera+0x210>)
 8000a70:	f008 f940 	bl	8008cf4 <HAL_UART_Transmit>
	uint8_t result1 = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	75fb      	strb	r3, [r7, #23]
	OV5640_ReadReg(OV5640_REG_OUT_WIDTH_L, &result1);
 8000a78:	f107 0317 	add.w	r3, r7, #23
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f643 0009 	movw	r0, #14345	@ 0x3809
 8000a82:	f7ff fe3b 	bl	80006fc <OV5640_ReadReg>
	char buff4[20];
	sprintf(buff4, "width: %d\n\r", result1);
 8000a86:	7dfb      	ldrb	r3, [r7, #23]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	490e      	ldr	r1, [pc, #56]	@ (8000ac8 <OV5640_ConfigureCamera+0x21c>)
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f009 fd52 	bl	800a538 <siprintf>

	HAL_UART_Transmit(&huart3, buff4, strlen(buff4), HAL_MAX_DELAY);
 8000a94:	463b      	mov	r3, r7
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fc22 	bl	80002e0 <strlen>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	b29a      	uxth	r2, r3
 8000aa0:	4639      	mov	r1, r7
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	4805      	ldr	r0, [pc, #20]	@ (8000abc <OV5640_ConfigureCamera+0x210>)
 8000aa8:	f008 f924 	bl	8008cf4 <HAL_UART_Transmit>
	return status;
 8000aac:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f



}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3770      	adds	r7, #112	@ 0x70
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	0800aeac 	.word	0x0800aeac
 8000abc:	24025bfc 	.word	0x24025bfc
 8000ac0:	0800aec4 	.word	0x0800aec4
 8000ac4:	0800aed4 	.word	0x0800aed4
 8000ac8:	0800aee8 	.word	0x0800aee8

08000acc <frameCapture>:
void frameCapture(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	@ 0x30
 8000ad0:	af00      	add	r7, sp, #0
	__HAL_RCC_DCMI_CLK_ENABLE();
 8000ad2:	4b39      	ldr	r3, [pc, #228]	@ (8000bb8 <frameCapture+0xec>)
 8000ad4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000ad8:	4a37      	ldr	r2, [pc, #220]	@ (8000bb8 <frameCapture+0xec>)
 8000ada:	f043 0301 	orr.w	r3, r3, #1
 8000ade:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000ae2:	4b35      	ldr	r3, [pc, #212]	@ (8000bb8 <frameCapture+0xec>)
 8000ae4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	623b      	str	r3, [r7, #32]
 8000aee:	6a3b      	ldr	r3, [r7, #32]

	uint16_t width = OV5640_Resolutions[activeCameraConfigPtr->resolution].width;
 8000af0:	4b32      	ldr	r3, [pc, #200]	@ (8000bbc <frameCapture+0xf0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	461a      	mov	r2, r3
 8000af8:	4b31      	ldr	r3, [pc, #196]	@ (8000bc0 <frameCapture+0xf4>)
 8000afa:	f833 3022 	ldrh.w	r3, [r3, r2, lsl #2]
 8000afe:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t height = OV5640_Resolutions[activeCameraConfigPtr->resolution].height;
 8000b00:	4b2e      	ldr	r3, [pc, #184]	@ (8000bbc <frameCapture+0xf0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	4a2e      	ldr	r2, [pc, #184]	@ (8000bc0 <frameCapture+0xf4>)
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	4413      	add	r3, r2
 8000b0c:	885b      	ldrh	r3, [r3, #2]
 8000b0e:	853b      	strh	r3, [r7, #40]	@ 0x28
	uint8_t pixelSize = OV5640_Formats[activeCameraConfigPtr->pixelFormat].bytesPerPixel;
 8000b10:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <frameCapture+0xf0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	785b      	ldrb	r3, [r3, #1]
 8000b16:	4a2b      	ldr	r2, [pc, #172]	@ (8000bc4 <frameCapture+0xf8>)
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4413      	add	r3, r2
 8000b1c:	885b      	ldrh	r3, [r3, #2]
 8000b1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	static uint32_t frameBuffer[240*320/2];

	// Enable DCMI
	DCMI->CR |= DCMI_CR_ENABLE;
 8000b22:	4b29      	ldr	r3, [pc, #164]	@ (8000bc8 <frameCapture+0xfc>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a28      	ldr	r2, [pc, #160]	@ (8000bc8 <frameCapture+0xfc>)
 8000b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b2c:	6013      	str	r3, [r2, #0]

	// Wait for VSYNC to go high (start of frame)
	while(!(DCMI->SR & DCMI_SR_VSYNC));
 8000b2e:	bf00      	nop
 8000b30:	4b25      	ldr	r3, [pc, #148]	@ (8000bc8 <frameCapture+0xfc>)
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f003 0302 	and.w	r3, r3, #2
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f9      	beq.n	8000b30 <frameCapture+0x64>

	// Wait for VSYNC to go low (active frame period)
	while(DCMI->SR & DCMI_SR_VSYNC);
 8000b3c:	bf00      	nop
 8000b3e:	4b22      	ldr	r3, [pc, #136]	@ (8000bc8 <frameCapture+0xfc>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1f9      	bne.n	8000b3e <frameCapture+0x72>

	// Now capture data during active frame
	DCMI->CR |= DCMI_CR_CAPTURE;
 8000b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc8 <frameCapture+0xfc>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc8 <frameCapture+0xfc>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6013      	str	r3, [r2, #0]

	// Read some pixels when FIFO has data
	for(int i = 0; i < sizeof(frameBuffer)/4; i++) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b5a:	e024      	b.n	8000ba6 <frameCapture+0xda>
		// Wait for data to be available
		while(!(DCMI->SR & DCMI_SR_FNE));  // FIFO not empty
 8000b5c:	bf00      	nop
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <frameCapture+0xfc>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f9      	beq.n	8000b5e <frameCapture+0x92>
		frameBuffer[i] = DCMI->DR;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	@ (8000bc8 <frameCapture+0xfc>)
 8000b6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000b6e:	4917      	ldr	r1, [pc, #92]	@ (8000bcc <frameCapture+0x100>)
 8000b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		char pixelBuff[30];
		sprintf(pixelBuff, "Pixel %d: 0x%08lX\n\r", i, frameBuffer[i]);
 8000b76:	4a15      	ldr	r2, [pc, #84]	@ (8000bcc <frameCapture+0x100>)
 8000b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b7e:	4638      	mov	r0, r7
 8000b80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b82:	4913      	ldr	r1, [pc, #76]	@ (8000bd0 <frameCapture+0x104>)
 8000b84:	f009 fcd8 	bl	800a538 <siprintf>
		HAL_UART_Transmit(&huart3, pixelBuff, strlen(pixelBuff), HAL_MAX_DELAY);
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f7ff fba8 	bl	80002e0 <strlen>
 8000b90:	4603      	mov	r3, r0
 8000b92:	b29a      	uxth	r2, r3
 8000b94:	4639      	mov	r1, r7
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	480e      	ldr	r0, [pc, #56]	@ (8000bd4 <frameCapture+0x108>)
 8000b9c:	f008 f8aa 	bl	8008cf4 <HAL_UART_Transmit>
	for(int i = 0; i < sizeof(frameBuffer)/4; i++) {
 8000ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ba8:	f5b3 4f16 	cmp.w	r3, #38400	@ 0x9600
 8000bac:	d3d6      	bcc.n	8000b5c <frameCapture+0x90>
	}

}
 8000bae:	bf00      	nop
 8000bb0:	bf00      	nop
 8000bb2:	3730      	adds	r7, #48	@ 0x30
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	58024400 	.word	0x58024400
 8000bbc:	24000000 	.word	0x24000000
 8000bc0:	0800af34 	.word	0x0800af34
 8000bc4:	0800af40 	.word	0x0800af40
 8000bc8:	48020000 	.word	0x48020000
 8000bcc:	24000144 	.word	0x24000144
 8000bd0:	0800aef4 	.word	0x0800aef4
 8000bd4:	24025bfc 	.word	0x24025bfc

08000bd8 <MX_DCMI_Init>:

DCMI_HandleTypeDef hdcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	@ (8000c38 <MX_DCMI_Init+0x60>)
 8000bde:	4a17      	ldr	r2, [pc, #92]	@ (8000c3c <MX_DCMI_Init+0x64>)
 8000be0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000be2:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MX_DCMI_Init+0x60>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000be8:	4b13      	ldr	r3, [pc, #76]	@ (8000c38 <MX_DCMI_Init+0x60>)
 8000bea:	2220      	movs	r2, #32
 8000bec:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000bee:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <MX_DCMI_Init+0x60>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <MX_DCMI_Init+0x60>)
 8000bf6:	2240      	movs	r2, #64	@ 0x40
 8000bf8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000c38 <MX_DCMI_Init+0x60>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	@ (8000c38 <MX_DCMI_Init+0x60>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	@ (8000c38 <MX_DCMI_Init+0x60>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <MX_DCMI_Init+0x60>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000c12:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MX_DCMI_Init+0x60>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000c18:	4b07      	ldr	r3, [pc, #28]	@ (8000c38 <MX_DCMI_Init+0x60>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	@ (8000c38 <MX_DCMI_Init+0x60>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	@ (8000c38 <MX_DCMI_Init+0x60>)
 8000c26:	f001 fbf3 	bl	8002410 <HAL_DCMI_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000c30:	f000 fcda 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	24025944 	.word	0x24025944
 8000c3c:	48020000 	.word	0x48020000

08000c40 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	@ 0x38
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a65      	ldr	r2, [pc, #404]	@ (8000df4 <HAL_DCMI_MspInit+0x1b4>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	f040 80c3 	bne.w	8000dea <HAL_DCMI_MspInit+0x1aa>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000c64:	4b64      	ldr	r3, [pc, #400]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000c66:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000c6a:	4a63      	ldr	r2, [pc, #396]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000c74:	4b60      	ldr	r3, [pc, #384]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000c76:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	623b      	str	r3, [r7, #32]
 8000c80:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c82:	4b5d      	ldr	r3, [pc, #372]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	4a5b      	ldr	r2, [pc, #364]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000c8a:	f043 0310 	orr.w	r3, r3, #16
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c92:	4b59      	ldr	r3, [pc, #356]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	f003 0310 	and.w	r3, r3, #16
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca0:	4b55      	ldr	r3, [pc, #340]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	4a54      	ldr	r2, [pc, #336]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb0:	4b51      	ldr	r3, [pc, #324]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b4e      	ldr	r3, [pc, #312]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cce:	4b4a      	ldr	r3, [pc, #296]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cdc:	4b46      	ldr	r3, [pc, #280]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	4a45      	ldr	r2, [pc, #276]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000ce4:	f043 0308 	orr.w	r3, r3, #8
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cec:	4b42      	ldr	r3, [pc, #264]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b3f      	ldr	r3, [pc, #252]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d00:	4a3d      	ldr	r2, [pc, #244]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000df8 <HAL_DCMI_MspInit+0x1b8>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d18:	2370      	movs	r3, #112	@ 0x70
 8000d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d28:	230d      	movs	r3, #13
 8000d2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4832      	ldr	r0, [pc, #200]	@ (8000dfc <HAL_DCMI_MspInit+0x1bc>)
 8000d34:	f002 fb28 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d38:	2310      	movs	r3, #16
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d48:	230d      	movs	r3, #13
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d50:	4619      	mov	r1, r3
 8000d52:	482b      	ldr	r0, [pc, #172]	@ (8000e00 <HAL_DCMI_MspInit+0x1c0>)
 8000d54:	f002 fb18 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d58:	2340      	movs	r3, #64	@ 0x40
 8000d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d68:	230d      	movs	r3, #13
 8000d6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d70:	4619      	mov	r1, r3
 8000d72:	4823      	ldr	r0, [pc, #140]	@ (8000e00 <HAL_DCMI_MspInit+0x1c0>)
 8000d74:	f002 fb08 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d78:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8000d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000d8a:	230d      	movs	r3, #13
 8000d8c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	481b      	ldr	r0, [pc, #108]	@ (8000e04 <HAL_DCMI_MspInit+0x1c4>)
 8000d96:	f002 faf7 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000daa:	230d      	movs	r3, #13
 8000dac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4814      	ldr	r0, [pc, #80]	@ (8000e08 <HAL_DCMI_MspInit+0x1c8>)
 8000db6:	f002 fae7 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dba:	2380      	movs	r3, #128	@ 0x80
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000dca:	230d      	movs	r3, #13
 8000dcc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <HAL_DCMI_MspInit+0x1cc>)
 8000dd6:	f002 fad7 	bl	8003388 <HAL_GPIO_Init>

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	204e      	movs	r0, #78	@ 0x4e
 8000de0:	f001 fae1 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000de4:	204e      	movs	r0, #78	@ 0x4e
 8000de6:	f001 faf8 	bl	80023da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8000dea:	bf00      	nop
 8000dec:	3738      	adds	r7, #56	@ 0x38
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	48020000 	.word	0x48020000
 8000df8:	58024400 	.word	0x58024400
 8000dfc:	58021000 	.word	0x58021000
 8000e00:	58020000 	.word	0x58020000
 8000e04:	58020800 	.word	0x58020800
 8000e08:	58020c00 	.word	0x58020c00
 8000e0c:	58020400 	.word	0x58020400

08000e10 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000e14:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <MX_ETH_Init+0x80>)
 8000e16:	4a1f      	ldr	r2, [pc, #124]	@ (8000e94 <MX_ETH_Init+0x84>)
 8000e18:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e98 <MX_ETH_Init+0x88>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000e20:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <MX_ETH_Init+0x88>)
 8000e22:	2280      	movs	r2, #128	@ 0x80
 8000e24:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000e26:	4b1c      	ldr	r3, [pc, #112]	@ (8000e98 <MX_ETH_Init+0x88>)
 8000e28:	22e1      	movs	r2, #225	@ 0xe1
 8000e2a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e98 <MX_ETH_Init+0x88>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000e32:	4b19      	ldr	r3, [pc, #100]	@ (8000e98 <MX_ETH_Init+0x88>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000e38:	4b17      	ldr	r3, [pc, #92]	@ (8000e98 <MX_ETH_Init+0x88>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000e3e:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <MX_ETH_Init+0x80>)
 8000e40:	4a15      	ldr	r2, [pc, #84]	@ (8000e98 <MX_ETH_Init+0x88>)
 8000e42:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <MX_ETH_Init+0x80>)
 8000e46:	2201      	movs	r2, #1
 8000e48:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000e4a:	4b11      	ldr	r3, [pc, #68]	@ (8000e90 <MX_ETH_Init+0x80>)
 8000e4c:	4a13      	ldr	r2, [pc, #76]	@ (8000e9c <MX_ETH_Init+0x8c>)
 8000e4e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000e50:	4b0f      	ldr	r3, [pc, #60]	@ (8000e90 <MX_ETH_Init+0x80>)
 8000e52:	4a13      	ldr	r2, [pc, #76]	@ (8000ea0 <MX_ETH_Init+0x90>)
 8000e54:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000e56:	4b0e      	ldr	r3, [pc, #56]	@ (8000e90 <MX_ETH_Init+0x80>)
 8000e58:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000e5c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000e5e:	480c      	ldr	r0, [pc, #48]	@ (8000e90 <MX_ETH_Init+0x80>)
 8000e60:	f001 fe5e 	bl	8002b20 <HAL_ETH_Init>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000e6a:	f000 fbbd 	bl	80015e8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000e6e:	2238      	movs	r2, #56	@ 0x38
 8000e70:	2100      	movs	r1, #0
 8000e72:	480c      	ldr	r0, [pc, #48]	@ (8000ea4 <MX_ETH_Init+0x94>)
 8000e74:	f009 fb82 	bl	800a57c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000e78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <MX_ETH_Init+0x94>)
 8000e7a:	2221      	movs	r2, #33	@ 0x21
 8000e7c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <MX_ETH_Init+0x94>)
 8000e80:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e84:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000e86:	4b07      	ldr	r3, [pc, #28]	@ (8000ea4 <MX_ETH_Init+0x94>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000e8c:	bf00      	nop
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	240259cc 	.word	0x240259cc
 8000e94:	40028000 	.word	0x40028000
 8000e98:	24025a7c 	.word	0x24025a7c
 8000e9c:	240000c4 	.word	0x240000c4
 8000ea0:	24000064 	.word	0x24000064
 8000ea4:	24025994 	.word	0x24025994

08000ea8 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	@ 0x38
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a59      	ldr	r2, [pc, #356]	@ (800102c <HAL_ETH_MspInit+0x184>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	f040 80ab 	bne.w	8001022 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ecc:	4b58      	ldr	r3, [pc, #352]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000ece:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ed2:	4a57      	ldr	r2, [pc, #348]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000ed4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ed8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000edc:	4b54      	ldr	r3, [pc, #336]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000ede:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ee2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ee6:	623b      	str	r3, [r7, #32]
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000eea:	4b51      	ldr	r3, [pc, #324]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000eec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ef0:	4a4f      	ldr	r2, [pc, #316]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000ef2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ef6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000efa:	4b4d      	ldr	r3, [pc, #308]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000efc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f08:	4b49      	ldr	r3, [pc, #292]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f0e:	4a48      	ldr	r2, [pc, #288]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f14:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f18:	4b45      	ldr	r3, [pc, #276]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f26:	4b42      	ldr	r3, [pc, #264]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2c:	4a40      	ldr	r2, [pc, #256]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f2e:	f043 0304 	orr.w	r3, r3, #4
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f36:	4b3e      	ldr	r3, [pc, #248]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	617b      	str	r3, [r7, #20]
 8000f42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b3a      	ldr	r3, [pc, #232]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4a:	4a39      	ldr	r2, [pc, #228]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f54:	4b36      	ldr	r3, [pc, #216]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f62:	4b33      	ldr	r3, [pc, #204]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f68:	4a31      	ldr	r2, [pc, #196]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f72:	4b2f      	ldr	r3, [pc, #188]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f80:	4b2b      	ldr	r3, [pc, #172]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f86:	4a2a      	ldr	r2, [pc, #168]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f90:	4b27      	ldr	r3, [pc, #156]	@ (8001030 <HAL_ETH_MspInit+0x188>)
 8000f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000f9e:	2332      	movs	r3, #50	@ 0x32
 8000fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fae:	230b      	movs	r3, #11
 8000fb0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481e      	ldr	r0, [pc, #120]	@ (8001034 <HAL_ETH_MspInit+0x18c>)
 8000fba:	f002 f9e5 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000fbe:	2386      	movs	r3, #134	@ 0x86
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fce:	230b      	movs	r3, #11
 8000fd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4817      	ldr	r0, [pc, #92]	@ (8001038 <HAL_ETH_MspInit+0x190>)
 8000fda:	f002 f9d5 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff0:	230b      	movs	r3, #11
 8000ff2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4810      	ldr	r0, [pc, #64]	@ (800103c <HAL_ETH_MspInit+0x194>)
 8000ffc:	f002 f9c4 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001000:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001004:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001006:	2302      	movs	r3, #2
 8001008:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001012:	230b      	movs	r3, #11
 8001014:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001016:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800101a:	4619      	mov	r1, r3
 800101c:	4808      	ldr	r0, [pc, #32]	@ (8001040 <HAL_ETH_MspInit+0x198>)
 800101e:	f002 f9b3 	bl	8003388 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001022:	bf00      	nop
 8001024:	3738      	adds	r7, #56	@ 0x38
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40028000 	.word	0x40028000
 8001030:	58024400 	.word	0x58024400
 8001034:	58020800 	.word	0x58020800
 8001038:	58020000 	.word	0x58020000
 800103c:	58020400 	.word	0x58020400
 8001040:	58021800 	.word	0x58021800

08001044 <MX_GPIO_Init>:
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	@ 0x30
 8001048:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800105a:	4b81      	ldr	r3, [pc, #516]	@ (8001260 <MX_GPIO_Init+0x21c>)
 800105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001060:	4a7f      	ldr	r2, [pc, #508]	@ (8001260 <MX_GPIO_Init+0x21c>)
 8001062:	f043 0310 	orr.w	r3, r3, #16
 8001066:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800106a:	4b7d      	ldr	r3, [pc, #500]	@ (8001260 <MX_GPIO_Init+0x21c>)
 800106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001070:	f003 0310 	and.w	r3, r3, #16
 8001074:	61bb      	str	r3, [r7, #24]
 8001076:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001078:	4b79      	ldr	r3, [pc, #484]	@ (8001260 <MX_GPIO_Init+0x21c>)
 800107a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800107e:	4a78      	ldr	r2, [pc, #480]	@ (8001260 <MX_GPIO_Init+0x21c>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001088:	4b75      	ldr	r3, [pc, #468]	@ (8001260 <MX_GPIO_Init+0x21c>)
 800108a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800108e:	f003 0304 	and.w	r3, r3, #4
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001096:	4b72      	ldr	r3, [pc, #456]	@ (8001260 <MX_GPIO_Init+0x21c>)
 8001098:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109c:	4a70      	ldr	r2, [pc, #448]	@ (8001260 <MX_GPIO_Init+0x21c>)
 800109e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a6:	4b6e      	ldr	r3, [pc, #440]	@ (8001260 <MX_GPIO_Init+0x21c>)
 80010a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b0:	613b      	str	r3, [r7, #16]
 80010b2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001260 <MX_GPIO_Init+0x21c>)
 80010b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ba:	4a69      	ldr	r2, [pc, #420]	@ (8001260 <MX_GPIO_Init+0x21c>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c4:	4b66      	ldr	r3, [pc, #408]	@ (8001260 <MX_GPIO_Init+0x21c>)
 80010c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4b63      	ldr	r3, [pc, #396]	@ (8001260 <MX_GPIO_Init+0x21c>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010d8:	4a61      	ldr	r2, [pc, #388]	@ (8001260 <MX_GPIO_Init+0x21c>)
 80010da:	f043 0302 	orr.w	r3, r3, #2
 80010de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010e2:	4b5f      	ldr	r3, [pc, #380]	@ (8001260 <MX_GPIO_Init+0x21c>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001260 <MX_GPIO_Init+0x21c>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001260 <MX_GPIO_Init+0x21c>)
 80010f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001100:	4b57      	ldr	r3, [pc, #348]	@ (8001260 <MX_GPIO_Init+0x21c>)
 8001102:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	4b54      	ldr	r3, [pc, #336]	@ (8001260 <MX_GPIO_Init+0x21c>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001114:	4a52      	ldr	r2, [pc, #328]	@ (8001260 <MX_GPIO_Init+0x21c>)
 8001116:	f043 0308 	orr.w	r3, r3, #8
 800111a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800111e:	4b50      	ldr	r3, [pc, #320]	@ (8001260 <MX_GPIO_Init+0x21c>)
 8001120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	603b      	str	r3, [r7, #0]
 800112a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_SET);
 800112c:	2201      	movs	r2, #1
 800112e:	2101      	movs	r1, #1
 8001130:	484c      	ldr	r0, [pc, #304]	@ (8001264 <MX_GPIO_Init+0x220>)
 8001132:	f002 fad9 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f245 0101 	movw	r1, #20481	@ 0x5001
 800113c:	484a      	ldr	r0, [pc, #296]	@ (8001268 <MX_GPIO_Init+0x224>)
 800113e:	f002 fad3 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_DC_Pin|CAMERA_RST_Pin|LCD_RESET_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f249 4102 	movw	r1, #37890	@ 0x9402
 8001148:	4848      	ldr	r0, [pc, #288]	@ (800126c <MX_GPIO_Init+0x228>)
 800114a:	f002 facd 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001154:	4846      	ldr	r0, [pc, #280]	@ (8001270 <MX_GPIO_Init+0x22c>)
 8001156:	f002 fac7 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	2102      	movs	r1, #2
 800115e:	4845      	ldr	r0, [pc, #276]	@ (8001274 <MX_GPIO_Init+0x230>)
 8001160:	f002 fac2 	bl	80036e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001164:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116a:	2300      	movs	r3, #0
 800116c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 031c 	add.w	r3, r7, #28
 8001176:	4619      	mov	r1, r3
 8001178:	483f      	ldr	r0, [pc, #252]	@ (8001278 <MX_GPIO_Init+0x234>)
 800117a:	f002 f905 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_PWDN_Pin */
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin;
 800117e:	2301      	movs	r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CAMERA_PWDN_GPIO_Port, &GPIO_InitStruct);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4619      	mov	r1, r3
 8001194:	4833      	ldr	r0, [pc, #204]	@ (8001264 <MX_GPIO_Init+0x220>)
 8001196:	f002 f8f7 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin I2C_SUCCESS_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|I2C_SUCCESS_Pin|LD3_Pin;
 800119a:	f245 0301 	movw	r3, #20481	@ 0x5001
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a0:	2301      	movs	r3, #1
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	482d      	ldr	r0, [pc, #180]	@ (8001268 <MX_GPIO_Init+0x224>)
 80011b4:	f002 f8e8 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin CAMERA_RST_Pin LCD_RESET_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|CAMERA_RST_Pin|LCD_RESET_Pin|LCD_CS_Pin;
 80011b8:	f249 4302 	movw	r3, #37890	@ 0x9402
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011be:	2301      	movs	r3, #1
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ca:	f107 031c 	add.w	r3, r7, #28
 80011ce:	4619      	mov	r1, r3
 80011d0:	4826      	ldr	r0, [pc, #152]	@ (800126c <MX_GPIO_Init+0x228>)
 80011d2:	f002 f8d9 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80011d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	4820      	ldr	r0, [pc, #128]	@ (8001270 <MX_GPIO_Init+0x22c>)
 80011f0:	f002 f8ca 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80011f4:	2380      	movs	r3, #128	@ 0x80
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4818      	ldr	r0, [pc, #96]	@ (800126c <MX_GPIO_Init+0x228>)
 800120a:	f002 f8bd 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800120e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	4619      	mov	r1, r3
 800122a:	480e      	ldr	r0, [pc, #56]	@ (8001264 <MX_GPIO_Init+0x220>)
 800122c:	f002 f8ac 	bl	8003388 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001230:	2302      	movs	r3, #2
 8001232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	480b      	ldr	r0, [pc, #44]	@ (8001274 <MX_GPIO_Init+0x230>)
 8001248:	f002 f89e 	bl	8003388 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_CLOSE);
 800124c:	2100      	movs	r1, #0
 800124e:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8001252:	f000 ffb7 	bl	80021c4 <HAL_SYSCFG_AnalogSwitchConfig>

}
 8001256:	bf00      	nop
 8001258:	3730      	adds	r7, #48	@ 0x30
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	58024400 	.word	0x58024400
 8001264:	58020000 	.word	0x58020000
 8001268:	58020400 	.word	0x58020400
 800126c:	58021800 	.word	0x58021800
 8001270:	58020c00 	.word	0x58020c00
 8001274:	58021000 	.word	0x58021000
 8001278:	58020800 	.word	0x58020800

0800127c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001280:	4b1b      	ldr	r3, [pc, #108]	@ (80012f0 <MX_I2C1_Init+0x74>)
 8001282:	4a1c      	ldr	r2, [pc, #112]	@ (80012f4 <MX_I2C1_Init+0x78>)
 8001284:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x60000008;
 8001286:	4b1a      	ldr	r3, [pc, #104]	@ (80012f0 <MX_I2C1_Init+0x74>)
 8001288:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <MX_I2C1_Init+0x7c>)
 800128a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <MX_I2C1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001292:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <MX_I2C1_Init+0x74>)
 8001294:	2201      	movs	r2, #1
 8001296:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001298:	4b15      	ldr	r3, [pc, #84]	@ (80012f0 <MX_I2C1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <MX_I2C1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_I2C1_Init+0x74>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_I2C1_Init+0x74>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012b6:	480e      	ldr	r0, [pc, #56]	@ (80012f0 <MX_I2C1_Init+0x74>)
 80012b8:	f002 fa30 	bl	800371c <HAL_I2C_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012c2:	f000 f991 	bl	80015e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012c6:	2100      	movs	r1, #0
 80012c8:	4809      	ldr	r0, [pc, #36]	@ (80012f0 <MX_I2C1_Init+0x74>)
 80012ca:	f002 ffb3 	bl	8004234 <HAL_I2CEx_ConfigAnalogFilter>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012d4:	f000 f988 	bl	80015e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012d8:	2100      	movs	r1, #0
 80012da:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <MX_I2C1_Init+0x74>)
 80012dc:	f002 fff5 	bl	80042ca <HAL_I2CEx_ConfigDigitalFilter>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012e6:	f000 f97f 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	24025a84 	.word	0x24025a84
 80012f4:	40005400 	.word	0x40005400
 80012f8:	60000008 	.word	0x60000008

080012fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0ba      	sub	sp, #232	@ 0xe8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001314:	f107 0310 	add.w	r3, r7, #16
 8001318:	22c0      	movs	r2, #192	@ 0xc0
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f009 f92d 	bl	800a57c <memset>
  if(i2cHandle->Instance==I2C1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a30      	ldr	r2, [pc, #192]	@ (80013e8 <HAL_I2C_MspInit+0xec>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d158      	bne.n	80013de <HAL_I2C_MspInit+0xe2>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800132c:	f04f 0208 	mov.w	r2, #8
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 8;
 8001338:	2308      	movs	r3, #8
 800133a:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 150;
 800133c:	2396      	movs	r3, #150	@ 0x96
 800133e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 10;
 8001340:	230a      	movs	r3, #10
 8001342:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 10;
 8001344:	230a      	movs	r3, #10
 8001346:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 10;
 8001348:	230a      	movs	r3, #10
 800134a:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_0;
 800134c:	2300      	movs	r3, #0
 800134e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001350:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001354:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_PLL3;
 800135a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800135e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4618      	mov	r0, r3
 8001368:	f004 f9ea 	bl	8005740 <HAL_RCCEx_PeriphCLKConfig>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_I2C_MspInit+0x7a>
    {
      Error_Handler();
 8001372:	f000 f939 	bl	80015e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	4b1d      	ldr	r3, [pc, #116]	@ (80013ec <HAL_I2C_MspInit+0xf0>)
 8001378:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800137c:	4a1b      	ldr	r2, [pc, #108]	@ (80013ec <HAL_I2C_MspInit+0xf0>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001386:	4b19      	ldr	r3, [pc, #100]	@ (80013ec <HAL_I2C_MspInit+0xf0>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001394:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001398:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139c:	2312      	movs	r3, #18
 800139e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ae:	2304      	movs	r3, #4
 80013b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80013b8:	4619      	mov	r1, r3
 80013ba:	480d      	ldr	r0, [pc, #52]	@ (80013f0 <HAL_I2C_MspInit+0xf4>)
 80013bc:	f001 ffe4 	bl	8003388 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <HAL_I2C_MspInit+0xf0>)
 80013c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013c6:	4a09      	ldr	r2, [pc, #36]	@ (80013ec <HAL_I2C_MspInit+0xf0>)
 80013c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <HAL_I2C_MspInit+0xf0>)
 80013d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013de:	bf00      	nop
 80013e0:	37e8      	adds	r7, #232	@ 0xe8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40005400 	.word	0x40005400
 80013ec:	58024400 	.word	0x58024400
 80013f0:	58020400 	.word	0x58020400

080013f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08c      	sub	sp, #48	@ 0x30
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013fa:	f000 fe0d 	bl	8002018 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fe:	f000 f871 	bl	80014e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001402:	f7ff fe1f 	bl	8001044 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001406:	f000 fd2f 	bl	8001e68 <MX_USB_OTG_FS_PCD_Init>
  MX_DCMI_Init();
 800140a:	f7ff fbe5 	bl	8000bd8 <MX_DCMI_Init>
  MX_I2C1_Init();
 800140e:	f7ff ff35 	bl	800127c <MX_I2C1_Init>
  MX_SPI1_Init();
 8001412:	f000 f8ef 	bl	80015f4 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001416:	f000 fb17 	bl	8001a48 <MX_TIM1_Init>
  MX_TIM4_Init();
 800141a:	f000 fb6b 	bl	8001af4 <MX_TIM4_Init>
  MX_ETH_Init();
 800141e:	f7ff fcf7 	bl	8000e10 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001422:	f000 fc5b 	bl	8001cdc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  extern DCMI_HandleTypeDef hdcmi;
  HAL_StatusTypeDef cameraConfigStatus = OV5640_PowerUpSequence();
 8001426:	f7ff f99d 	bl	8000764 <OV5640_PowerUpSequence>
 800142a:	4603      	mov	r3, r0
 800142c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t reg1 = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  OV5640_ReadReg(OV5640_POLARITY_CTRL,&reg1);
 8001436:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 800143a:	4619      	mov	r1, r3
 800143c:	f244 7040 	movw	r0, #18240	@ 0x4740
 8001440:	f7ff f95c 	bl	80006fc <OV5640_ReadReg>
  char buffReg1[20];
  sprintf(buffReg1, "Polarity: %d\r\n", reg1);
 8001444:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001448:	461a      	mov	r2, r3
 800144a:	f107 0318 	add.w	r3, r7, #24
 800144e:	4920      	ldr	r1, [pc, #128]	@ (80014d0 <main+0xdc>)
 8001450:	4618      	mov	r0, r3
 8001452:	f009 f871 	bl	800a538 <siprintf>
  HAL_UART_Transmit(&huart3, buffReg1, strlen(buffReg1), HAL_MAX_DELAY);
 8001456:	f107 0318 	add.w	r3, r7, #24
 800145a:	4618      	mov	r0, r3
 800145c:	f7fe ff40 	bl	80002e0 <strlen>
 8001460:	4603      	mov	r3, r0
 8001462:	b29a      	uxth	r2, r3
 8001464:	f107 0118 	add.w	r1, r7, #24
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
 800146c:	4819      	ldr	r0, [pc, #100]	@ (80014d4 <main+0xe0>)
 800146e:	f007 fc41 	bl	8008cf4 <HAL_UART_Transmit>
	if (cameraConfigStatus == HAL_OK){
 8001472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001476:	2b00      	cmp	r3, #0
 8001478:	d113      	bne.n	80014a2 <main+0xae>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin, GPIO_PIN_SET);
 800147a:	2201      	movs	r2, #1
 800147c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001480:	4815      	ldr	r0, [pc, #84]	@ (80014d8 <main+0xe4>)
 8001482:	f002 f931 	bl	80036e8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8001486:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800148a:	f000 fe57 	bl	800213c <HAL_Delay>
		HAL_GPIO_WritePin(I2C_SUCCESS_GPIO_Port, I2C_SUCCESS_Pin,GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001494:	4810      	ldr	r0, [pc, #64]	@ (80014d8 <main+0xe4>)
 8001496:	f002 f927 	bl	80036e8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800149a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800149e:	f000 fe4d 	bl	800213c <HAL_Delay>
	}

	frameCapture();
 80014a2:	f7ff fb13 	bl	8000acc <frameCapture>
	char buffFrame[20];
	sprintf(buffFrame, "Start of image: 0x%08lX,\n\r", DCMI->DR);
 80014a6:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <main+0xe8>)
 80014a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014aa:	1d3b      	adds	r3, r7, #4
 80014ac:	490c      	ldr	r1, [pc, #48]	@ (80014e0 <main+0xec>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f009 f842 	bl	800a538 <siprintf>
	HAL_UART_Transmit(&huart3, buffFrame, strlen(buffFrame),HAL_MAX_DELAY);
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7fe ff12 	bl	80002e0 <strlen>
 80014bc:	4603      	mov	r3, r0
 80014be:	b29a      	uxth	r2, r3
 80014c0:	1d39      	adds	r1, r7, #4
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
 80014c6:	4803      	ldr	r0, [pc, #12]	@ (80014d4 <main+0xe0>)
 80014c8:	f007 fc14 	bl	8008cf4 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <main+0xd8>
 80014d0:	0800af08 	.word	0x0800af08
 80014d4:	24025bfc 	.word	0x24025bfc
 80014d8:	58020400 	.word	0x58020400
 80014dc:	48020000 	.word	0x48020000
 80014e0:	0800af18 	.word	0x0800af18

080014e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b09c      	sub	sp, #112	@ 0x70
 80014e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014ee:	224c      	movs	r2, #76	@ 0x4c
 80014f0:	2100      	movs	r1, #0
 80014f2:	4618      	mov	r0, r3
 80014f4:	f009 f842 	bl	800a57c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014f8:	1d3b      	adds	r3, r7, #4
 80014fa:	2220      	movs	r2, #32
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f009 f83c 	bl	800a57c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001504:	2002      	movs	r0, #2
 8001506:	f003 f881 	bl	800460c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150a:	2300      	movs	r3, #0
 800150c:	603b      	str	r3, [r7, #0]
 800150e:	4b34      	ldr	r3, [pc, #208]	@ (80015e0 <SystemClock_Config+0xfc>)
 8001510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001512:	4a33      	ldr	r2, [pc, #204]	@ (80015e0 <SystemClock_Config+0xfc>)
 8001514:	f023 0301 	bic.w	r3, r3, #1
 8001518:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800151a:	4b31      	ldr	r3, [pc, #196]	@ (80015e0 <SystemClock_Config+0xfc>)
 800151c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	603b      	str	r3, [r7, #0]
 8001524:	4b2f      	ldr	r3, [pc, #188]	@ (80015e4 <SystemClock_Config+0x100>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a2e      	ldr	r2, [pc, #184]	@ (80015e4 <SystemClock_Config+0x100>)
 800152a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b2c      	ldr	r3, [pc, #176]	@ (80015e4 <SystemClock_Config+0x100>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001538:	603b      	str	r3, [r7, #0]
 800153a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800153c:	bf00      	nop
 800153e:	4b29      	ldr	r3, [pc, #164]	@ (80015e4 <SystemClock_Config+0x100>)
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001546:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800154a:	d1f8      	bne.n	800153e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800154c:	2321      	movs	r3, #33	@ 0x21
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001550:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001554:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001556:	2301      	movs	r3, #1
 8001558:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155e:	2302      	movs	r3, #2
 8001560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001562:	2302      	movs	r3, #2
 8001564:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001566:	2360      	movs	r3, #96	@ 0x60
 8001568:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800156a:	2304      	movs	r3, #4
 800156c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800156e:	2308      	movs	r3, #8
 8001570:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001572:	2302      	movs	r3, #2
 8001574:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001576:	2308      	movs	r3, #8
 8001578:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800157a:	2300      	movs	r3, #0
 800157c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001582:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001586:	4618      	mov	r0, r3
 8001588:	f003 f88a 	bl	80046a0 <HAL_RCC_OscConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001592:	f000 f829 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	233f      	movs	r3, #63	@ 0x3f
 8001598:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159a:	2303      	movs	r3, #3
 800159c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2101      	movs	r1, #1
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fcca 	bl	8004f54 <HAL_RCC_ClockConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80015c6:	f000 f80f 	bl	80015e8 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 80015ca:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015ce:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 80015d2:	2000      	movs	r0, #0
 80015d4:	f003 fe74 	bl	80052c0 <HAL_RCC_MCOConfig>
}
 80015d8:	bf00      	nop
 80015da:	3770      	adds	r7, #112	@ 0x70
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	58000400 	.word	0x58000400
 80015e4:	58024800 	.word	0x58024800

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <Error_Handler+0x8>

080015f4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80015f8:	4b28      	ldr	r3, [pc, #160]	@ (800169c <MX_SPI1_Init+0xa8>)
 80015fa:	4a29      	ldr	r2, [pc, #164]	@ (80016a0 <MX_SPI1_Init+0xac>)
 80015fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015fe:	4b27      	ldr	r3, [pc, #156]	@ (800169c <MX_SPI1_Init+0xa8>)
 8001600:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001604:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001606:	4b25      	ldr	r3, [pc, #148]	@ (800169c <MX_SPI1_Init+0xa8>)
 8001608:	2200      	movs	r2, #0
 800160a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800160c:	4b23      	ldr	r3, [pc, #140]	@ (800169c <MX_SPI1_Init+0xa8>)
 800160e:	2203      	movs	r2, #3
 8001610:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001612:	4b22      	ldr	r3, [pc, #136]	@ (800169c <MX_SPI1_Init+0xa8>)
 8001614:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001618:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800161a:	4b20      	ldr	r3, [pc, #128]	@ (800169c <MX_SPI1_Init+0xa8>)
 800161c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001620:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001622:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <MX_SPI1_Init+0xa8>)
 8001624:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001628:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800162a:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <MX_SPI1_Init+0xa8>)
 800162c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001630:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001632:	4b1a      	ldr	r3, [pc, #104]	@ (800169c <MX_SPI1_Init+0xa8>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001638:	4b18      	ldr	r3, [pc, #96]	@ (800169c <MX_SPI1_Init+0xa8>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163e:	4b17      	ldr	r3, [pc, #92]	@ (800169c <MX_SPI1_Init+0xa8>)
 8001640:	2200      	movs	r2, #0
 8001642:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001644:	4b15      	ldr	r3, [pc, #84]	@ (800169c <MX_SPI1_Init+0xa8>)
 8001646:	2200      	movs	r2, #0
 8001648:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800164a:	4b14      	ldr	r3, [pc, #80]	@ (800169c <MX_SPI1_Init+0xa8>)
 800164c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001650:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001652:	4b12      	ldr	r3, [pc, #72]	@ (800169c <MX_SPI1_Init+0xa8>)
 8001654:	2200      	movs	r2, #0
 8001656:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001658:	4b10      	ldr	r3, [pc, #64]	@ (800169c <MX_SPI1_Init+0xa8>)
 800165a:	2200      	movs	r2, #0
 800165c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800165e:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <MX_SPI1_Init+0xa8>)
 8001660:	2200      	movs	r2, #0
 8001662:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001664:	4b0d      	ldr	r3, [pc, #52]	@ (800169c <MX_SPI1_Init+0xa8>)
 8001666:	2200      	movs	r2, #0
 8001668:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800166a:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <MX_SPI1_Init+0xa8>)
 800166c:	2200      	movs	r2, #0
 800166e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001670:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <MX_SPI1_Init+0xa8>)
 8001672:	2200      	movs	r2, #0
 8001674:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001676:	4b09      	ldr	r3, [pc, #36]	@ (800169c <MX_SPI1_Init+0xa8>)
 8001678:	2200      	movs	r2, #0
 800167a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800167c:	4b07      	ldr	r3, [pc, #28]	@ (800169c <MX_SPI1_Init+0xa8>)
 800167e:	2200      	movs	r2, #0
 8001680:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001682:	4b06      	ldr	r3, [pc, #24]	@ (800169c <MX_SPI1_Init+0xa8>)
 8001684:	2200      	movs	r2, #0
 8001686:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	@ (800169c <MX_SPI1_Init+0xa8>)
 800168a:	f005 fe85 	bl	8007398 <HAL_SPI_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8001694:	f7ff ffa8 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24025ad8 	.word	0x24025ad8
 80016a0:	40013000 	.word	0x40013000

080016a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b0bc      	sub	sp, #240	@ 0xf0
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	22c0      	movs	r2, #192	@ 0xc0
 80016c2:	2100      	movs	r1, #0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f008 ff59 	bl	800a57c <memset>
  if(spiHandle->Instance==SPI1)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a4b      	ldr	r2, [pc, #300]	@ (80017fc <HAL_SPI_MspInit+0x158>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	f040 808e 	bne.w	80017f2 <HAL_SPI_MspInit+0x14e>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80016d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016da:	f04f 0300 	mov.w	r3, #0
 80016de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e6:	f107 0318 	add.w	r3, r7, #24
 80016ea:	4618      	mov	r0, r3
 80016ec:	f004 f828 	bl	8005740 <HAL_RCCEx_PeriphCLKConfig>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 80016f6:	f7ff ff77 	bl	80015e8 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fa:	4b41      	ldr	r3, [pc, #260]	@ (8001800 <HAL_SPI_MspInit+0x15c>)
 80016fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001700:	4a3f      	ldr	r2, [pc, #252]	@ (8001800 <HAL_SPI_MspInit+0x15c>)
 8001702:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001706:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800170a:	4b3d      	ldr	r3, [pc, #244]	@ (8001800 <HAL_SPI_MspInit+0x15c>)
 800170c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001710:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001718:	4b39      	ldr	r3, [pc, #228]	@ (8001800 <HAL_SPI_MspInit+0x15c>)
 800171a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800171e:	4a38      	ldr	r2, [pc, #224]	@ (8001800 <HAL_SPI_MspInit+0x15c>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001728:	4b35      	ldr	r3, [pc, #212]	@ (8001800 <HAL_SPI_MspInit+0x15c>)
 800172a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001736:	4b32      	ldr	r3, [pc, #200]	@ (8001800 <HAL_SPI_MspInit+0x15c>)
 8001738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800173c:	4a30      	ldr	r2, [pc, #192]	@ (8001800 <HAL_SPI_MspInit+0x15c>)
 800173e:	f043 0308 	orr.w	r3, r3, #8
 8001742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001746:	4b2e      	ldr	r3, [pc, #184]	@ (8001800 <HAL_SPI_MspInit+0x15c>)
 8001748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001754:	4b2a      	ldr	r3, [pc, #168]	@ (8001800 <HAL_SPI_MspInit+0x15c>)
 8001756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800175a:	4a29      	ldr	r2, [pc, #164]	@ (8001800 <HAL_SPI_MspInit+0x15c>)
 800175c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001764:	4b26      	ldr	r3, [pc, #152]	@ (8001800 <HAL_SPI_MspInit+0x15c>)
 8001766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800176a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001772:	2320      	movs	r3, #32
 8001774:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800178a:	2305      	movs	r3, #5
 800178c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001794:	4619      	mov	r1, r3
 8001796:	481b      	ldr	r0, [pc, #108]	@ (8001804 <HAL_SPI_MspInit+0x160>)
 8001798:	f001 fdf6 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800179c:	2380      	movs	r3, #128	@ 0x80
 800179e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017b4:	2305      	movs	r3, #5
 80017b6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ba:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017be:	4619      	mov	r1, r3
 80017c0:	4811      	ldr	r0, [pc, #68]	@ (8001808 <HAL_SPI_MspInit+0x164>)
 80017c2:	f001 fde1 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017da:	2300      	movs	r3, #0
 80017dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017e0:	2305      	movs	r3, #5
 80017e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017e6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80017ea:	4619      	mov	r1, r3
 80017ec:	4807      	ldr	r0, [pc, #28]	@ (800180c <HAL_SPI_MspInit+0x168>)
 80017ee:	f001 fdcb 	bl	8003388 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017f2:	bf00      	nop
 80017f4:	37f0      	adds	r7, #240	@ 0xf0
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40013000 	.word	0x40013000
 8001800:	58024400 	.word	0x58024400
 8001804:	58020000 	.word	0x58020000
 8001808:	58020c00 	.word	0x58020c00
 800180c:	58021800 	.word	0x58021800

08001810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	4b0a      	ldr	r3, [pc, #40]	@ (8001840 <HAL_MspInit+0x30>)
 8001818:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800181c:	4a08      	ldr	r2, [pc, #32]	@ (8001840 <HAL_MspInit+0x30>)
 800181e:	f043 0302 	orr.w	r3, r3, #2
 8001822:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <HAL_MspInit+0x30>)
 8001828:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	58024400 	.word	0x58024400

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <NMI_Handler+0x4>

0800184c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <MemManage_Handler+0x4>

0800185c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <UsageFault_Handler+0x4>

0800186c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr

08001896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800189a:	f000 fc2f 	bl	80020fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80018a8:	4802      	ldr	r0, [pc, #8]	@ (80018b4 <TIM4_IRQHandler+0x10>)
 80018aa:	f006 f87b 	bl	80079a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	24025bb0 	.word	0x24025bb0

080018b8 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 80018bc:	4802      	ldr	r0, [pc, #8]	@ (80018c8 <DCMI_IRQHandler+0x10>)
 80018be:	f000 fe21 	bl	8002504 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	24025944 	.word	0x24025944

080018cc <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 80018d4:	4a14      	ldr	r2, [pc, #80]	@ (8001928 <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	@ (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
		errno = ENOMEM;
 80018fc:	f008 fe46 	bl	800a58c <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	@ (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	24080000 	.word	0x24080000
 800192c:	00000400 	.word	0x00000400
 8001930:	24025b60 	.word	0x24025b60
 8001934:	240262c0 	.word	0x240262c0

08001938 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800193c:	4b37      	ldr	r3, [pc, #220]	@ (8001a1c <SystemInit+0xe4>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001942:	4a36      	ldr	r2, [pc, #216]	@ (8001a1c <SystemInit+0xe4>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800194c:	4b34      	ldr	r3, [pc, #208]	@ (8001a20 <SystemInit+0xe8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	2b06      	cmp	r3, #6
 8001956:	d807      	bhi.n	8001968 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001958:	4b31      	ldr	r3, [pc, #196]	@ (8001a20 <SystemInit+0xe8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f023 030f 	bic.w	r3, r3, #15
 8001960:	4a2f      	ldr	r2, [pc, #188]	@ (8001a20 <SystemInit+0xe8>)
 8001962:	f043 0307 	orr.w	r3, r3, #7
 8001966:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8001968:	4b2e      	ldr	r3, [pc, #184]	@ (8001a24 <SystemInit+0xec>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a2d      	ldr	r2, [pc, #180]	@ (8001a24 <SystemInit+0xec>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8001974:	4b2b      	ldr	r3, [pc, #172]	@ (8001a24 <SystemInit+0xec>)
 8001976:	2200      	movs	r2, #0
 8001978:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800197a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a24 <SystemInit+0xec>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4929      	ldr	r1, [pc, #164]	@ (8001a24 <SystemInit+0xec>)
 8001980:	4b29      	ldr	r3, [pc, #164]	@ (8001a28 <SystemInit+0xf0>)
 8001982:	4013      	ands	r3, r2
 8001984:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8001986:	4b26      	ldr	r3, [pc, #152]	@ (8001a20 <SystemInit+0xe8>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d007      	beq.n	80019a2 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8001992:	4b23      	ldr	r3, [pc, #140]	@ (8001a20 <SystemInit+0xe8>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 030f 	bic.w	r3, r3, #15
 800199a:	4a21      	ldr	r2, [pc, #132]	@ (8001a20 <SystemInit+0xe8>)
 800199c:	f043 0307 	orr.w	r3, r3, #7
 80019a0:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80019a2:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <SystemInit+0xec>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80019a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a24 <SystemInit+0xec>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80019ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001a24 <SystemInit+0xec>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80019b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <SystemInit+0xec>)
 80019b6:	4a1d      	ldr	r2, [pc, #116]	@ (8001a2c <SystemInit+0xf4>)
 80019b8:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001a24 <SystemInit+0xec>)
 80019bc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a30 <SystemInit+0xf8>)
 80019be:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80019c0:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <SystemInit+0xec>)
 80019c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a34 <SystemInit+0xfc>)
 80019c4:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80019c6:	4b17      	ldr	r3, [pc, #92]	@ (8001a24 <SystemInit+0xec>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80019cc:	4b15      	ldr	r3, [pc, #84]	@ (8001a24 <SystemInit+0xec>)
 80019ce:	4a19      	ldr	r2, [pc, #100]	@ (8001a34 <SystemInit+0xfc>)
 80019d0:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80019d2:	4b14      	ldr	r3, [pc, #80]	@ (8001a24 <SystemInit+0xec>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <SystemInit+0xec>)
 80019da:	4a16      	ldr	r2, [pc, #88]	@ (8001a34 <SystemInit+0xfc>)
 80019dc:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80019de:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <SystemInit+0xec>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	645a      	str	r2, [r3, #68]	@ 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <SystemInit+0xec>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001a24 <SystemInit+0xec>)
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ee:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <SystemInit+0xec>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80019f6:	4b10      	ldr	r3, [pc, #64]	@ (8001a38 <SystemInit+0x100>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <SystemInit+0x104>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a02:	d202      	bcs.n	8001a0a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <SystemInit+0x108>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a44 <SystemInit+0x10c>)
 8001a0c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001a10:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	e000ed00 	.word	0xe000ed00
 8001a20:	52002000 	.word	0x52002000
 8001a24:	58024400 	.word	0x58024400
 8001a28:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a2c:	02020200 	.word	0x02020200
 8001a30:	01ff0000 	.word	0x01ff0000
 8001a34:	01010280 	.word	0x01010280
 8001a38:	5c001000 	.word	0x5c001000
 8001a3c:	ffff0000 	.word	0xffff0000
 8001a40:	51008108 	.word	0x51008108
 8001a44:	52004000 	.word	0x52004000

08001a48 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a4e:	f107 030c 	add.w	r3, r7, #12
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]
 8001a5c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5e:	463b      	mov	r3, r7
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a68:	4b20      	ldr	r3, [pc, #128]	@ (8001aec <MX_TIM1_Init+0xa4>)
 8001a6a:	4a21      	ldr	r2, [pc, #132]	@ (8001af0 <MX_TIM1_Init+0xa8>)
 8001a6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <MX_TIM1_Init+0xa4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <MX_TIM1_Init+0xa4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aec <MX_TIM1_Init+0xa4>)
 8001a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a80:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a82:	4b1a      	ldr	r3, [pc, #104]	@ (8001aec <MX_TIM1_Init+0xa4>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a88:	4b18      	ldr	r3, [pc, #96]	@ (8001aec <MX_TIM1_Init+0xa4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a8e:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <MX_TIM1_Init+0xa4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a94:	4815      	ldr	r0, [pc, #84]	@ (8001aec <MX_TIM1_Init+0xa4>)
 8001a96:	f005 fdbe 	bl	8007616 <HAL_TIM_Base_Init>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001aa0:	f7ff fda2 	bl	80015e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480e      	ldr	r0, [pc, #56]	@ (8001aec <MX_TIM1_Init+0xa4>)
 8001ab4:	f006 fa8a 	bl	8007fcc <HAL_TIM_SlaveConfigSynchro>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001abe:	f7ff fd93 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ace:	463b      	mov	r3, r7
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4806      	ldr	r0, [pc, #24]	@ (8001aec <MX_TIM1_Init+0xa4>)
 8001ad4:	f007 f812 	bl	8008afc <HAL_TIMEx_MasterConfigSynchronization>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001ade:	f7ff fd83 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ae2:	bf00      	nop
 8001ae4:	3720      	adds	r7, #32
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	24025b64 	.word	0x24025b64
 8001af0:	40010000 	.word	0x40010000

08001af4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08e      	sub	sp, #56	@ 0x38
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b14:	463b      	mov	r3, r7
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
 8001b20:	611a      	str	r2, [r3, #16]
 8001b22:	615a      	str	r2, [r3, #20]
 8001b24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b26:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd8 <MX_TIM4_Init+0xe4>)
 8001b28:	4a2c      	ldr	r2, [pc, #176]	@ (8001bdc <MX_TIM4_Init+0xe8>)
 8001b2a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd8 <MX_TIM4_Init+0xe4>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b29      	ldr	r3, [pc, #164]	@ (8001bd8 <MX_TIM4_Init+0xe4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3;
 8001b38:	4b27      	ldr	r3, [pc, #156]	@ (8001bd8 <MX_TIM4_Init+0xe4>)
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b26      	ldr	r3, [pc, #152]	@ (8001bd8 <MX_TIM4_Init+0xe4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b24      	ldr	r3, [pc, #144]	@ (8001bd8 <MX_TIM4_Init+0xe4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b4a:	4823      	ldr	r0, [pc, #140]	@ (8001bd8 <MX_TIM4_Init+0xe4>)
 8001b4c:	f005 fd63 	bl	8007616 <HAL_TIM_Base_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001b56:	f7ff fd47 	bl	80015e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b60:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b64:	4619      	mov	r1, r3
 8001b66:	481c      	ldr	r0, [pc, #112]	@ (8001bd8 <MX_TIM4_Init+0xe4>)
 8001b68:	f006 f938 	bl	8007ddc <HAL_TIM_ConfigClockSource>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001b72:	f7ff fd39 	bl	80015e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b76:	4818      	ldr	r0, [pc, #96]	@ (8001bd8 <MX_TIM4_Init+0xe4>)
 8001b78:	f005 fda4 	bl	80076c4 <HAL_TIM_PWM_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001b82:	f7ff fd31 	bl	80015e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	4810      	ldr	r0, [pc, #64]	@ (8001bd8 <MX_TIM4_Init+0xe4>)
 8001b96:	f006 ffb1 	bl	8008afc <HAL_TIMEx_MasterConfigSynchronization>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ba0:	f7ff fd22 	bl	80015e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba4:	2360      	movs	r3, #96	@ 0x60
 8001ba6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bac:	2300      	movs	r3, #0
 8001bae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4807      	ldr	r0, [pc, #28]	@ (8001bd8 <MX_TIM4_Init+0xe4>)
 8001bbc:	f005 fffa 	bl	8007bb4 <HAL_TIM_PWM_ConfigChannel>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001bc6:	f7ff fd0f 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001bca:	4803      	ldr	r0, [pc, #12]	@ (8001bd8 <MX_TIM4_Init+0xe4>)
 8001bcc:	f000 f848 	bl	8001c60 <HAL_TIM_MspPostInit>

}
 8001bd0:	bf00      	nop
 8001bd2:	3738      	adds	r7, #56	@ 0x38
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	24025bb0 	.word	0x24025bb0
 8001bdc:	40000800 	.word	0x40000800

08001be0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a19      	ldr	r2, [pc, #100]	@ (8001c54 <HAL_TIM_Base_MspInit+0x74>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d10f      	bne.n	8001c12 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bf2:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <HAL_TIM_Base_MspInit+0x78>)
 8001bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001bf8:	4a17      	ldr	r2, [pc, #92]	@ (8001c58 <HAL_TIM_Base_MspInit+0x78>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001c02:	4b15      	ldr	r3, [pc, #84]	@ (8001c58 <HAL_TIM_Base_MspInit+0x78>)
 8001c04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c10:	e01b      	b.n	8001c4a <HAL_TIM_Base_MspInit+0x6a>
  else if(tim_baseHandle->Instance==TIM4)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a11      	ldr	r2, [pc, #68]	@ (8001c5c <HAL_TIM_Base_MspInit+0x7c>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d116      	bne.n	8001c4a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c58 <HAL_TIM_Base_MspInit+0x78>)
 8001c1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c22:	4a0d      	ldr	r2, [pc, #52]	@ (8001c58 <HAL_TIM_Base_MspInit+0x78>)
 8001c24:	f043 0304 	orr.w	r3, r3, #4
 8001c28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_TIM_Base_MspInit+0x78>)
 8001c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c32:	f003 0304 	and.w	r3, r3, #4
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	201e      	movs	r0, #30
 8001c40:	f000 fbb1 	bl	80023a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c44:	201e      	movs	r0, #30
 8001c46:	f000 fbc8 	bl	80023da <HAL_NVIC_EnableIRQ>
}
 8001c4a:	bf00      	nop
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40010000 	.word	0x40010000
 8001c58:	58024400 	.word	0x58024400
 8001c5c:	40000800 	.word	0x40000800

08001c60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c68:	f107 030c 	add.w	r3, r7, #12
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <HAL_TIM_MspPostInit+0x70>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d121      	bne.n	8001cc6 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <HAL_TIM_MspPostInit+0x74>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c88:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <HAL_TIM_MspPostInit+0x74>)
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c92:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <HAL_TIM_MspPostInit+0x74>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ca0:	2340      	movs	r3, #64	@ 0x40
 8001ca2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4807      	ldr	r0, [pc, #28]	@ (8001cd8 <HAL_TIM_MspPostInit+0x78>)
 8001cbc:	f001 fb64 	bl	8003388 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB6_FMP);
 8001cc0:	2010      	movs	r0, #16
 8001cc2:	f002 fb4f 	bl	8004364 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40000800 	.word	0x40000800
 8001cd4:	58024400 	.word	0x58024400
 8001cd8:	58020400 	.word	0x58020400

08001cdc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ce0:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001ce2:	4a23      	ldr	r2, [pc, #140]	@ (8001d70 <MX_USART3_UART_Init+0x94>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ce6:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001ce8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b1f      	ldr	r3, [pc, #124]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b17      	ldr	r3, [pc, #92]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d12:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d18:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d24:	4811      	ldr	r0, [pc, #68]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d26:	f006 ff95 	bl	8008c54 <HAL_UART_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d30:	f7ff fc5a 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d34:	2100      	movs	r1, #0
 8001d36:	480d      	ldr	r0, [pc, #52]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d38:	f008 f82b 	bl	8009d92 <HAL_UARTEx_SetTxFifoThreshold>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d42:	f7ff fc51 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d46:	2100      	movs	r1, #0
 8001d48:	4808      	ldr	r0, [pc, #32]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d4a:	f008 f860 	bl	8009e0e <HAL_UARTEx_SetRxFifoThreshold>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d54:	f7ff fc48 	bl	80015e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d58:	4804      	ldr	r0, [pc, #16]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d5a:	f007 ffe1 	bl	8009d20 <HAL_UARTEx_DisableFifoMode>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001d64:	f7ff fc40 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	24025bfc 	.word	0x24025bfc
 8001d70:	40004800 	.word	0x40004800

08001d74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b0ba      	sub	sp, #232	@ 0xe8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d8c:	f107 0310 	add.w	r3, r7, #16
 8001d90:	22c0      	movs	r2, #192	@ 0xc0
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f008 fbf1 	bl	800a57c <memset>
  if(uartHandle->Instance==USART3)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a2f      	ldr	r2, [pc, #188]	@ (8001e5c <HAL_UART_MspInit+0xe8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d156      	bne.n	8001e52 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001da4:	f04f 0202 	mov.w	r2, #2
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001db0:	2304      	movs	r3, #4
 8001db2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 240;
 8001db4:	23f0      	movs	r3, #240	@ 0xf0
 8001db6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001db8:	2308      	movs	r3, #8
 8001dba:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 8;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8001dc4:	2340      	movs	r3, #64	@ 0x40
 8001dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_PLL2;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dd6:	f107 0310 	add.w	r3, r7, #16
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 fcb0 	bl	8005740 <HAL_RCCEx_PeriphCLKConfig>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8001de6:	f7ff fbff 	bl	80015e8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dea:	4b1d      	ldr	r3, [pc, #116]	@ (8001e60 <HAL_UART_MspInit+0xec>)
 8001dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001df0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e60 <HAL_UART_MspInit+0xec>)
 8001df2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dfa:	4b19      	ldr	r3, [pc, #100]	@ (8001e60 <HAL_UART_MspInit+0xec>)
 8001dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001e00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e08:	4b15      	ldr	r3, [pc, #84]	@ (8001e60 <HAL_UART_MspInit+0xec>)
 8001e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e0e:	4a14      	ldr	r2, [pc, #80]	@ (8001e60 <HAL_UART_MspInit+0xec>)
 8001e10:	f043 0308 	orr.w	r3, r3, #8
 8001e14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e18:	4b11      	ldr	r3, [pc, #68]	@ (8001e60 <HAL_UART_MspInit+0xec>)
 8001e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e40:	2307      	movs	r3, #7
 8001e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e46:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4805      	ldr	r0, [pc, #20]	@ (8001e64 <HAL_UART_MspInit+0xf0>)
 8001e4e:	f001 fa9b 	bl	8003388 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001e52:	bf00      	nop
 8001e54:	37e8      	adds	r7, #232	@ 0xe8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	40004800 	.word	0x40004800
 8001e60:	58024400 	.word	0x58024400
 8001e64:	58020c00 	.word	0x58020c00

08001e68 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001e6c:	4b15      	ldr	r3, [pc, #84]	@ (8001ec4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e6e:	4a16      	ldr	r2, [pc, #88]	@ (8001ec8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001e70:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001e72:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e74:	2209      	movs	r2, #9
 8001e76:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001e78:	4b12      	ldr	r3, [pc, #72]	@ (8001ec4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001e84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e86:	2202      	movs	r2, #2
 8001e88:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	@ (8001ec4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eb0:	f002 fa7c 	bl	80043ac <HAL_PCD_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001eba:	f7ff fb95 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	24025c90 	.word	0x24025c90
 8001ec8:	40080000 	.word	0x40080000

08001ecc <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b0ba      	sub	sp, #232	@ 0xe8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
 8001ede:	609a      	str	r2, [r3, #8]
 8001ee0:	60da      	str	r2, [r3, #12]
 8001ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ee4:	f107 0310 	add.w	r3, r7, #16
 8001ee8:	22c0      	movs	r2, #192	@ 0xc0
 8001eea:	2100      	movs	r1, #0
 8001eec:	4618      	mov	r0, r3
 8001eee:	f008 fb45 	bl	800a57c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a30      	ldr	r2, [pc, #192]	@ (8001fb8 <HAL_PCD_MspInit+0xec>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d159      	bne.n	8001fb0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001efc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8001f08:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8001f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f10:	f107 0310 	add.w	r3, r7, #16
 8001f14:	4618      	mov	r0, r3
 8001f16:	f003 fc13 	bl	8005740 <HAL_RCCEx_PeriphCLKConfig>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8001f20:	f7ff fb62 	bl	80015e8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001f24:	f002 fbac 	bl	8004680 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f28:	4b24      	ldr	r3, [pc, #144]	@ (8001fbc <HAL_PCD_MspInit+0xf0>)
 8001f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f2e:	4a23      	ldr	r2, [pc, #140]	@ (8001fbc <HAL_PCD_MspInit+0xf0>)
 8001f30:	f043 0301 	orr.w	r3, r3, #1
 8001f34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f38:	4b20      	ldr	r3, [pc, #128]	@ (8001fbc <HAL_PCD_MspInit+0xf0>)
 8001f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4817      	ldr	r0, [pc, #92]	@ (8001fc0 <HAL_PCD_MspInit+0xf4>)
 8001f62:	f001 fa11 	bl	8003388 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001f66:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001f6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001f80:	230a      	movs	r3, #10
 8001f82:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f86:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	480c      	ldr	r0, [pc, #48]	@ (8001fc0 <HAL_PCD_MspInit+0xf4>)
 8001f8e:	f001 f9fb 	bl	8003388 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001f92:	4b0a      	ldr	r3, [pc, #40]	@ (8001fbc <HAL_PCD_MspInit+0xf0>)
 8001f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f98:	4a08      	ldr	r2, [pc, #32]	@ (8001fbc <HAL_PCD_MspInit+0xf0>)
 8001f9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f9e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_PCD_MspInit+0xf0>)
 8001fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	37e8      	adds	r7, #232	@ 0xe8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40080000 	.word	0x40080000
 8001fbc:	58024400 	.word	0x58024400
 8001fc0:	58020000 	.word	0x58020000

08001fc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ffc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fc8:	f7ff fcb6 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fcc:	480c      	ldr	r0, [pc, #48]	@ (8002000 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fce:	490d      	ldr	r1, [pc, #52]	@ (8002004 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe2:	4a0a      	ldr	r2, [pc, #40]	@ (800200c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fe4:	4c0a      	ldr	r4, [pc, #40]	@ (8002010 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ff2:	f008 fad1 	bl	800a598 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ff6:	f7ff f9fd 	bl	80013f4 <main>
  bx  lr
 8001ffa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ffc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002000:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002004:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8002008:	0800afcc 	.word	0x0800afcc
  ldr r2, =_sbss
 800200c:	24000124 	.word	0x24000124
  ldr r4, =_ebss
 8002010:	240262c0 	.word	0x240262c0

08002014 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002014:	e7fe      	b.n	8002014 <ADC3_IRQHandler>
	...

08002018 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201e:	2003      	movs	r0, #3
 8002020:	f000 f9b6 	bl	8002390 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002024:	f003 f9b6 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b15      	ldr	r3, [pc, #84]	@ (8002080 <HAL_Init+0x68>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	4913      	ldr	r1, [pc, #76]	@ (8002084 <HAL_Init+0x6c>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
 8002040:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002042:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <HAL_Init+0x68>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a0e      	ldr	r2, [pc, #56]	@ (8002084 <HAL_Init+0x6c>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	4a0b      	ldr	r2, [pc, #44]	@ (8002088 <HAL_Init+0x70>)
 800205a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800205c:	4a0b      	ldr	r2, [pc, #44]	@ (800208c <HAL_Init+0x74>)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002062:	2000      	movs	r0, #0
 8002064:	f000 f814 	bl	8002090 <HAL_InitTick>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e002      	b.n	8002078 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002072:	f7ff fbcd 	bl	8001810 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	58024400 	.word	0x58024400
 8002084:	0800af50 	.word	0x0800af50
 8002088:	24000008 	.word	0x24000008
 800208c:	24000004 	.word	0x24000004

08002090 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002098:	4b15      	ldr	r3, [pc, #84]	@ (80020f0 <HAL_InitTick+0x60>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d101      	bne.n	80020a4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e021      	b.n	80020e8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80020a4:	4b13      	ldr	r3, [pc, #76]	@ (80020f4 <HAL_InitTick+0x64>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <HAL_InitTick+0x60>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	4619      	mov	r1, r3
 80020ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	4618      	mov	r0, r3
 80020bc:	f000 f99b 	bl	80023f6 <HAL_SYSTICK_Config>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e00e      	b.n	80020e8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b0f      	cmp	r3, #15
 80020ce:	d80a      	bhi.n	80020e6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020d0:	2200      	movs	r2, #0
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	f04f 30ff 	mov.w	r0, #4294967295
 80020d8:	f000 f965 	bl	80023a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020dc:	4a06      	ldr	r2, [pc, #24]	@ (80020f8 <HAL_InitTick+0x68>)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	e000      	b.n	80020e8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	24000010 	.word	0x24000010
 80020f4:	24000004 	.word	0x24000004
 80020f8:	2400000c 	.word	0x2400000c

080020fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002100:	4b06      	ldr	r3, [pc, #24]	@ (800211c <HAL_IncTick+0x20>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	461a      	mov	r2, r3
 8002106:	4b06      	ldr	r3, [pc, #24]	@ (8002120 <HAL_IncTick+0x24>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4413      	add	r3, r2
 800210c:	4a04      	ldr	r2, [pc, #16]	@ (8002120 <HAL_IncTick+0x24>)
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	24000010 	.word	0x24000010
 8002120:	24026174 	.word	0x24026174

08002124 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return uwTick;
 8002128:	4b03      	ldr	r3, [pc, #12]	@ (8002138 <HAL_GetTick+0x14>)
 800212a:	681b      	ldr	r3, [r3, #0]
}
 800212c:	4618      	mov	r0, r3
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	24026174 	.word	0x24026174

0800213c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7ff ffee 	bl	8002124 <HAL_GetTick>
 8002148:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002154:	d005      	beq.n	8002162 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002156:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <HAL_Delay+0x44>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4413      	add	r3, r2
 8002160:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002162:	bf00      	nop
 8002164:	f7ff ffde 	bl	8002124 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	d8f7      	bhi.n	8002164 <HAL_Delay+0x28>
  {
  }
}
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	24000010 	.word	0x24000010

08002184 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002188:	4b03      	ldr	r3, [pc, #12]	@ (8002198 <HAL_GetREVID+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	0c1b      	lsrs	r3, r3, #16
}
 800218e:	4618      	mov	r0, r3
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	5c001000 	.word	0x5c001000

0800219c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80021ac:	4904      	ldr	r1, [pc, #16]	@ (80021c0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	58000400 	.word	0x58000400

080021c4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80021ce:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	43db      	mvns	r3, r3
 80021d6:	401a      	ands	r2, r3
 80021d8:	4904      	ldr	r1, [pc, #16]	@ (80021ec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	4313      	orrs	r3, r2
 80021de:	604b      	str	r3, [r1, #4]
}
 80021e0:	bf00      	nop
 80021e2:	370c      	adds	r7, #12
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	58000400 	.word	0x58000400

080021f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <__NVIC_SetPriorityGrouping+0x40>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	4313      	orrs	r3, r2
 800221c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221e:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <__NVIC_SetPriorityGrouping+0x40>)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	60d3      	str	r3, [r2, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00
 8002234:	05fa0000 	.word	0x05fa0000

08002238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0b      	blt.n	800227e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	88fb      	ldrh	r3, [r7, #6]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4907      	ldr	r1, [pc, #28]	@ (800228c <__NVIC_EnableIRQ+0x38>)
 800226e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	@ (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022ae:	0112      	lsls	r2, r2, #4
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	@ (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0112      	lsls	r2, r2, #4
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	@ 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b04      	cmp	r3, #4
 8002300:	bf28      	it	cs
 8002302:	2304      	movcs	r3, #4
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3304      	adds	r3, #4
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b03      	subs	r3, #3
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	@ 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3b01      	subs	r3, #1
 8002358:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800235c:	d301      	bcc.n	8002362 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235e:	2301      	movs	r3, #1
 8002360:	e00f      	b.n	8002382 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <SysTick_Config+0x40>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236a:	210f      	movs	r1, #15
 800236c:	f04f 30ff 	mov.w	r0, #4294967295
 8002370:	f7ff ff8e 	bl	8002290 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002374:	4b05      	ldr	r3, [pc, #20]	@ (800238c <SysTick_Config+0x40>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237a:	4b04      	ldr	r3, [pc, #16]	@ (800238c <SysTick_Config+0x40>)
 800237c:	2207      	movs	r2, #7
 800237e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	e000e010 	.word	0xe000e010

08002390 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ff29 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b086      	sub	sp, #24
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	60b9      	str	r1, [r7, #8]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff40 	bl	8002238 <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff90 	bl	80022e4 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5f 	bl	8002290 <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff33 	bl	8002254 <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa4 	bl	800234c <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e069      	b.n	80024f6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b00      	cmp	r3, #0
 800242c:	d102      	bne.n	8002434 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fc06 	bl	8000c40 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b2a      	ldr	r3, [pc, #168]	@ (8002500 <HAL_DCMI_Init+0xf0>)
 8002456:	400b      	ands	r3, r1
 8002458:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6819      	ldr	r1, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685a      	ldr	r2, [r3, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800246e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800247a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002486:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800248c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002492:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002498:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800249e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b10      	cmp	r3, #16
 80024ae:	d112      	bne.n	80024d6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	7f1b      	ldrb	r3, [r3, #28]
 80024b4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7f5b      	ldrb	r3, [r3, #29]
 80024ba:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80024bc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7f9b      	ldrb	r3, [r3, #30]
 80024c2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80024c4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	7fdb      	ldrb	r3, [r3, #31]
 80024cc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80024d2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80024d4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68da      	ldr	r2, [r3, #12]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f042 021e 	orr.w	r2, r2, #30
 80024e4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	ffe0f007 	.word	0xffe0f007

08002504 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d016      	beq.n	800254c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2204      	movs	r2, #4
 8002524:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252a:	f043 0202 	orr.w	r2, r3, #2
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2204      	movs	r2, #4
 8002536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800253e:	4a31      	ldr	r2, [pc, #196]	@ (8002604 <HAL_DCMI_IRQHandler+0x100>)
 8002540:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f8a4 	bl	8002694 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d016      	beq.n	8002584 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2202      	movs	r2, #2
 800255c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002562:	f043 0201 	orr.w	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2204      	movs	r2, #4
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002576:	4a23      	ldr	r2, [pc, #140]	@ (8002604 <HAL_DCMI_IRQHandler+0x100>)
 8002578:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f888 	bl	8002694 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d006      	beq.n	800259c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2210      	movs	r2, #16
 8002594:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f840 	bl	800261c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d006      	beq.n	80025b4 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2208      	movs	r2, #8
 80025ac:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f83e 	bl	8002630 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d01d      	beq.n	80025fa <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d107      	bne.n	80025dc <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 021e 	bic.w	r2, r2, #30
 80025da:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2201      	movs	r2, #1
 80025f2:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f000 f825 	bl	8002644 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 80025fa:	bf00      	nop
 80025fc:	3710      	adds	r7, #16
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	08002659 	.word	0x08002659

08002608 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002664:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800266a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266c:	2b02      	cmp	r3, #2
 800266e:	d009      	beq.n	8002684 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8002684:	68f8      	ldr	r0, [r7, #12]
 8002686:	f7ff ffbf 	bl	8002608 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
	...

08002694 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e237      	b.n	8002b16 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d004      	beq.n	80026bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2280      	movs	r2, #128	@ 0x80
 80026b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e22c      	b.n	8002b16 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5c      	ldr	r2, [pc, #368]	@ (8002834 <HAL_DMA_Abort_IT+0x1a0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d04a      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002838 <HAL_DMA_Abort_IT+0x1a4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d045      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a59      	ldr	r2, [pc, #356]	@ (800283c <HAL_DMA_Abort_IT+0x1a8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d040      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a58      	ldr	r2, [pc, #352]	@ (8002840 <HAL_DMA_Abort_IT+0x1ac>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d03b      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a56      	ldr	r2, [pc, #344]	@ (8002844 <HAL_DMA_Abort_IT+0x1b0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d036      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a55      	ldr	r2, [pc, #340]	@ (8002848 <HAL_DMA_Abort_IT+0x1b4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d031      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a53      	ldr	r2, [pc, #332]	@ (800284c <HAL_DMA_Abort_IT+0x1b8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d02c      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a52      	ldr	r2, [pc, #328]	@ (8002850 <HAL_DMA_Abort_IT+0x1bc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d027      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a50      	ldr	r2, [pc, #320]	@ (8002854 <HAL_DMA_Abort_IT+0x1c0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d022      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a4f      	ldr	r2, [pc, #316]	@ (8002858 <HAL_DMA_Abort_IT+0x1c4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d01d      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a4d      	ldr	r2, [pc, #308]	@ (800285c <HAL_DMA_Abort_IT+0x1c8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d018      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a4c      	ldr	r2, [pc, #304]	@ (8002860 <HAL_DMA_Abort_IT+0x1cc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d013      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a4a      	ldr	r2, [pc, #296]	@ (8002864 <HAL_DMA_Abort_IT+0x1d0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00e      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a49      	ldr	r2, [pc, #292]	@ (8002868 <HAL_DMA_Abort_IT+0x1d4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d009      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a47      	ldr	r2, [pc, #284]	@ (800286c <HAL_DMA_Abort_IT+0x1d8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d004      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a46      	ldr	r2, [pc, #280]	@ (8002870 <HAL_DMA_Abort_IT+0x1dc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d101      	bne.n	8002760 <HAL_DMA_Abort_IT+0xcc>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_DMA_Abort_IT+0xce>
 8002760:	2300      	movs	r3, #0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8086 	beq.w	8002874 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2204      	movs	r2, #4
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a2f      	ldr	r2, [pc, #188]	@ (8002834 <HAL_DMA_Abort_IT+0x1a0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d04a      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2e      	ldr	r2, [pc, #184]	@ (8002838 <HAL_DMA_Abort_IT+0x1a4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d045      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a2c      	ldr	r2, [pc, #176]	@ (800283c <HAL_DMA_Abort_IT+0x1a8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d040      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2b      	ldr	r2, [pc, #172]	@ (8002840 <HAL_DMA_Abort_IT+0x1ac>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d03b      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a29      	ldr	r2, [pc, #164]	@ (8002844 <HAL_DMA_Abort_IT+0x1b0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d036      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a28      	ldr	r2, [pc, #160]	@ (8002848 <HAL_DMA_Abort_IT+0x1b4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d031      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a26      	ldr	r2, [pc, #152]	@ (800284c <HAL_DMA_Abort_IT+0x1b8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d02c      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a25      	ldr	r2, [pc, #148]	@ (8002850 <HAL_DMA_Abort_IT+0x1bc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d027      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a23      	ldr	r2, [pc, #140]	@ (8002854 <HAL_DMA_Abort_IT+0x1c0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d022      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a22      	ldr	r2, [pc, #136]	@ (8002858 <HAL_DMA_Abort_IT+0x1c4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d01d      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a20      	ldr	r2, [pc, #128]	@ (800285c <HAL_DMA_Abort_IT+0x1c8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d018      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002860 <HAL_DMA_Abort_IT+0x1cc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d013      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002864 <HAL_DMA_Abort_IT+0x1d0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00e      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002868 <HAL_DMA_Abort_IT+0x1d4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d009      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1a      	ldr	r2, [pc, #104]	@ (800286c <HAL_DMA_Abort_IT+0x1d8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d004      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a19      	ldr	r2, [pc, #100]	@ (8002870 <HAL_DMA_Abort_IT+0x1dc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d108      	bne.n	8002822 <HAL_DMA_Abort_IT+0x18e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e178      	b.n	8002b14 <HAL_DMA_Abort_IT+0x480>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e16f      	b.n	8002b14 <HAL_DMA_Abort_IT+0x480>
 8002834:	40020010 	.word	0x40020010
 8002838:	40020028 	.word	0x40020028
 800283c:	40020040 	.word	0x40020040
 8002840:	40020058 	.word	0x40020058
 8002844:	40020070 	.word	0x40020070
 8002848:	40020088 	.word	0x40020088
 800284c:	400200a0 	.word	0x400200a0
 8002850:	400200b8 	.word	0x400200b8
 8002854:	40020410 	.word	0x40020410
 8002858:	40020428 	.word	0x40020428
 800285c:	40020440 	.word	0x40020440
 8002860:	40020458 	.word	0x40020458
 8002864:	40020470 	.word	0x40020470
 8002868:	40020488 	.word	0x40020488
 800286c:	400204a0 	.word	0x400204a0
 8002870:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 020e 	bic.w	r2, r2, #14
 8002882:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a6c      	ldr	r2, [pc, #432]	@ (8002a3c <HAL_DMA_Abort_IT+0x3a8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d04a      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6b      	ldr	r2, [pc, #428]	@ (8002a40 <HAL_DMA_Abort_IT+0x3ac>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d045      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a69      	ldr	r2, [pc, #420]	@ (8002a44 <HAL_DMA_Abort_IT+0x3b0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d040      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a68      	ldr	r2, [pc, #416]	@ (8002a48 <HAL_DMA_Abort_IT+0x3b4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d03b      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a66      	ldr	r2, [pc, #408]	@ (8002a4c <HAL_DMA_Abort_IT+0x3b8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d036      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a65      	ldr	r2, [pc, #404]	@ (8002a50 <HAL_DMA_Abort_IT+0x3bc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d031      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a63      	ldr	r2, [pc, #396]	@ (8002a54 <HAL_DMA_Abort_IT+0x3c0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d02c      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a62      	ldr	r2, [pc, #392]	@ (8002a58 <HAL_DMA_Abort_IT+0x3c4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d027      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a60      	ldr	r2, [pc, #384]	@ (8002a5c <HAL_DMA_Abort_IT+0x3c8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d022      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a60 <HAL_DMA_Abort_IT+0x3cc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d01d      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002a64 <HAL_DMA_Abort_IT+0x3d0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d018      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a68 <HAL_DMA_Abort_IT+0x3d4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d013      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a5a      	ldr	r2, [pc, #360]	@ (8002a6c <HAL_DMA_Abort_IT+0x3d8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00e      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a59      	ldr	r2, [pc, #356]	@ (8002a70 <HAL_DMA_Abort_IT+0x3dc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a57      	ldr	r2, [pc, #348]	@ (8002a74 <HAL_DMA_Abort_IT+0x3e0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a56      	ldr	r2, [pc, #344]	@ (8002a78 <HAL_DMA_Abort_IT+0x3e4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d108      	bne.n	8002936 <HAL_DMA_Abort_IT+0x2a2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e007      	b.n	8002946 <HAL_DMA_Abort_IT+0x2b2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a3c      	ldr	r2, [pc, #240]	@ (8002a3c <HAL_DMA_Abort_IT+0x3a8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d072      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3a      	ldr	r2, [pc, #232]	@ (8002a40 <HAL_DMA_Abort_IT+0x3ac>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d06d      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a39      	ldr	r2, [pc, #228]	@ (8002a44 <HAL_DMA_Abort_IT+0x3b0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d068      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a37      	ldr	r2, [pc, #220]	@ (8002a48 <HAL_DMA_Abort_IT+0x3b4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d063      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a36      	ldr	r2, [pc, #216]	@ (8002a4c <HAL_DMA_Abort_IT+0x3b8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d05e      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a34      	ldr	r2, [pc, #208]	@ (8002a50 <HAL_DMA_Abort_IT+0x3bc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d059      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a33      	ldr	r2, [pc, #204]	@ (8002a54 <HAL_DMA_Abort_IT+0x3c0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d054      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a31      	ldr	r2, [pc, #196]	@ (8002a58 <HAL_DMA_Abort_IT+0x3c4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d04f      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a30      	ldr	r2, [pc, #192]	@ (8002a5c <HAL_DMA_Abort_IT+0x3c8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d04a      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002a60 <HAL_DMA_Abort_IT+0x3cc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d045      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002a64 <HAL_DMA_Abort_IT+0x3d0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d040      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002a68 <HAL_DMA_Abort_IT+0x3d4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d03b      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a2a      	ldr	r2, [pc, #168]	@ (8002a6c <HAL_DMA_Abort_IT+0x3d8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d036      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a28      	ldr	r2, [pc, #160]	@ (8002a70 <HAL_DMA_Abort_IT+0x3dc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d031      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a27      	ldr	r2, [pc, #156]	@ (8002a74 <HAL_DMA_Abort_IT+0x3e0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d02c      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a25      	ldr	r2, [pc, #148]	@ (8002a78 <HAL_DMA_Abort_IT+0x3e4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d027      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a24      	ldr	r2, [pc, #144]	@ (8002a7c <HAL_DMA_Abort_IT+0x3e8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d022      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a22      	ldr	r2, [pc, #136]	@ (8002a80 <HAL_DMA_Abort_IT+0x3ec>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01d      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a21      	ldr	r2, [pc, #132]	@ (8002a84 <HAL_DMA_Abort_IT+0x3f0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d018      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1f      	ldr	r2, [pc, #124]	@ (8002a88 <HAL_DMA_Abort_IT+0x3f4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1e      	ldr	r2, [pc, #120]	@ (8002a8c <HAL_DMA_Abort_IT+0x3f8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00e      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8002a90 <HAL_DMA_Abort_IT+0x3fc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1b      	ldr	r2, [pc, #108]	@ (8002a94 <HAL_DMA_Abort_IT+0x400>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a19      	ldr	r2, [pc, #100]	@ (8002a98 <HAL_DMA_Abort_IT+0x404>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d132      	bne.n	8002a9c <HAL_DMA_Abort_IT+0x408>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e031      	b.n	8002a9e <HAL_DMA_Abort_IT+0x40a>
 8002a3a:	bf00      	nop
 8002a3c:	40020010 	.word	0x40020010
 8002a40:	40020028 	.word	0x40020028
 8002a44:	40020040 	.word	0x40020040
 8002a48:	40020058 	.word	0x40020058
 8002a4c:	40020070 	.word	0x40020070
 8002a50:	40020088 	.word	0x40020088
 8002a54:	400200a0 	.word	0x400200a0
 8002a58:	400200b8 	.word	0x400200b8
 8002a5c:	40020410 	.word	0x40020410
 8002a60:	40020428 	.word	0x40020428
 8002a64:	40020440 	.word	0x40020440
 8002a68:	40020458 	.word	0x40020458
 8002a6c:	40020470 	.word	0x40020470
 8002a70:	40020488 	.word	0x40020488
 8002a74:	400204a0 	.word	0x400204a0
 8002a78:	400204b8 	.word	0x400204b8
 8002a7c:	58025408 	.word	0x58025408
 8002a80:	5802541c 	.word	0x5802541c
 8002a84:	58025430 	.word	0x58025430
 8002a88:	58025444 	.word	0x58025444
 8002a8c:	58025458 	.word	0x58025458
 8002a90:	5802546c 	.word	0x5802546c
 8002a94:	58025480 	.word	0x58025480
 8002a98:	58025494 	.word	0x58025494
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d028      	beq.n	8002af4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ab0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ad0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00c      	beq.n	8002af4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ae8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002af2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop

08002b20 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e0e3      	b.n	8002cfa <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7fe f9af 	bl	8000ea8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d04 <HAL_ETH_Init+0x1e4>)
 8002b4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b50:	4a6c      	ldr	r2, [pc, #432]	@ (8002d04 <HAL_ETH_Init+0x1e4>)
 8002b52:	f043 0302 	orr.w	r3, r3, #2
 8002b56:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d04 <HAL_ETH_Init+0x1e4>)
 8002b5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	7a1b      	ldrb	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002b70:	2000      	movs	r0, #0
 8002b72:	f7ff fb13 	bl	800219c <HAL_SYSCFG_ETHInterfaceSelect>
 8002b76:	e003      	b.n	8002b80 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002b78:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8002b7c:	f7ff fb0e 	bl	800219c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8002b80:	4b61      	ldr	r3, [pc, #388]	@ (8002d08 <HAL_ETH_Init+0x1e8>)
 8002b82:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	f043 0301 	orr.w	r3, r3, #1
 8002b96:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002b9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b9c:	f7ff fac2 	bl	8002124 <HAL_GetTick>
 8002ba0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002ba2:	e011      	b.n	8002bc8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002ba4:	f7ff fabe 	bl	8002124 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002bb2:	d909      	bls.n	8002bc8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	22e0      	movs	r2, #224	@ 0xe0
 8002bc0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e098      	b.n	8002cfa <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1e4      	bne.n	8002ba4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f89e 	bl	8002d1c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002be0:	f002 fd52 	bl	8005688 <HAL_RCC_GetHCLKFreq>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4a49      	ldr	r2, [pc, #292]	@ (8002d0c <HAL_ETH_Init+0x1ec>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	0c9a      	lsrs	r2, r3, #18
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	3a01      	subs	r2, #1
 8002bf4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fa81 	bl	8003100 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c06:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002c0a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6812      	ldr	r2, [r2, #0]
 8002c12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002c16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c1a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	22e0      	movs	r2, #224	@ 0xe0
 8002c36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e05d      	b.n	8002cfa <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002c46:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8002c4a:	4b31      	ldr	r3, [pc, #196]	@ (8002d10 <HAL_ETH_Init+0x1f0>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6952      	ldr	r2, [r2, #20]
 8002c52:	0051      	lsls	r1, r2, #1
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002c5e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fae9 	bl	800323a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fb2f 	bl	80032cc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	3305      	adds	r3, #5
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	021a      	lsls	r2, r3, #8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	4619      	mov	r1, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	3303      	adds	r3, #3
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	061a      	lsls	r2, r3, #24
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	3302      	adds	r3, #2
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	041b      	lsls	r3, r3, #16
 8002ca0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002cac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002cba:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002cbc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	4b11      	ldr	r3, [pc, #68]	@ (8002d14 <HAL_ETH_Init+0x1f4>)
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8002d18 <HAL_ETH_Init+0x1f8>)
 8002ce2:	430b      	orrs	r3, r1
 8002ce4:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2210      	movs	r2, #16
 8002cf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	58024400 	.word	0x58024400
 8002d08:	58000400 	.word	0x58000400
 8002d0c:	431bde83 	.word	0x431bde83
 8002d10:	ffff8001 	.word	0xffff8001
 8002d14:	0c020060 	.word	0x0c020060
 8002d18:	0c20c000 	.word	0x0c20c000

08002d1c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002d2c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002d34:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002d36:	f002 fca7 	bl	8005688 <HAL_RCC_GetHCLKFreq>
 8002d3a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4a1a      	ldr	r2, [pc, #104]	@ (8002da8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d804      	bhi.n	8002d4e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d4a:	60fb      	str	r3, [r7, #12]
 8002d4c:	e022      	b.n	8002d94 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	4a16      	ldr	r2, [pc, #88]	@ (8002dac <HAL_ETH_SetMDIOClockRange+0x90>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d204      	bcs.n	8002d60 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e019      	b.n	8002d94 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4a13      	ldr	r2, [pc, #76]	@ (8002db0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d915      	bls.n	8002d94 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4a12      	ldr	r2, [pc, #72]	@ (8002db4 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d804      	bhi.n	8002d7a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	e00c      	b.n	8002d94 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4a0e      	ldr	r2, [pc, #56]	@ (8002db8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d804      	bhi.n	8002d8c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	e003      	b.n	8002d94 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8002d92:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	02160ebf 	.word	0x02160ebf
 8002dac:	03938700 	.word	0x03938700
 8002db0:	05f5e0ff 	.word	0x05f5e0ff
 8002db4:	08f0d17f 	.word	0x08f0d17f
 8002db8:	0ee6b27f 	.word	0x0ee6b27f

08002dbc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8002dce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	791b      	ldrb	r3, [r3, #4]
 8002dd4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8002dd6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	7b1b      	ldrb	r3, [r3, #12]
 8002ddc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8002dde:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	7b5b      	ldrb	r3, [r3, #13]
 8002de4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002de6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	7b9b      	ldrb	r3, [r3, #14]
 8002dec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8002dee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	7bdb      	ldrb	r3, [r3, #15]
 8002df4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002df6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	7c12      	ldrb	r2, [r2, #16]
 8002dfc:	2a00      	cmp	r2, #0
 8002dfe:	d102      	bne.n	8002e06 <ETH_SetMACConfig+0x4a>
 8002e00:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002e04:	e000      	b.n	8002e08 <ETH_SetMACConfig+0x4c>
 8002e06:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002e08:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	7c52      	ldrb	r2, [r2, #17]
 8002e0e:	2a00      	cmp	r2, #0
 8002e10:	d102      	bne.n	8002e18 <ETH_SetMACConfig+0x5c>
 8002e12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e16:	e000      	b.n	8002e1a <ETH_SetMACConfig+0x5e>
 8002e18:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002e1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	7c9b      	ldrb	r3, [r3, #18]
 8002e20:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002e22:	431a      	orrs	r2, r3
               macconf->Speed |
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8002e28:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8002e2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	7f1b      	ldrb	r3, [r3, #28]
 8002e34:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8002e36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	7f5b      	ldrb	r3, [r3, #29]
 8002e3c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8002e3e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	7f92      	ldrb	r2, [r2, #30]
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d102      	bne.n	8002e4e <ETH_SetMACConfig+0x92>
 8002e48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e4c:	e000      	b.n	8002e50 <ETH_SetMACConfig+0x94>
 8002e4e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8002e50:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	7fdb      	ldrb	r3, [r3, #31]
 8002e56:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8002e58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002e5a:	683a      	ldr	r2, [r7, #0]
 8002e5c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e60:	2a00      	cmp	r2, #0
 8002e62:	d102      	bne.n	8002e6a <ETH_SetMACConfig+0xae>
 8002e64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e68:	e000      	b.n	8002e6c <ETH_SetMACConfig+0xb0>
 8002e6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8002e6c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8002e72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e7a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8002e7c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8002e82:	4313      	orrs	r3, r2
 8002e84:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	4b56      	ldr	r3, [pc, #344]	@ (8002fe8 <ETH_SetMACConfig+0x22c>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	68f9      	ldr	r1, [r7, #12]
 8002e96:	430b      	orrs	r3, r1
 8002e98:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ea6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ea8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002eb0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8002eb2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002eba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8002ebc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8002ec4:	2a00      	cmp	r2, #0
 8002ec6:	d102      	bne.n	8002ece <ETH_SetMACConfig+0x112>
 8002ec8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ecc:	e000      	b.n	8002ed0 <ETH_SetMACConfig+0x114>
 8002ece:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8002ed0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4b42      	ldr	r3, [pc, #264]	@ (8002fec <ETH_SetMACConfig+0x230>)
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	6812      	ldr	r2, [r2, #0]
 8002ee8:	68f9      	ldr	r1, [r7, #12]
 8002eea:	430b      	orrs	r3, r1
 8002eec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ef4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	4b3a      	ldr	r3, [pc, #232]	@ (8002ff0 <ETH_SetMACConfig+0x234>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	68f9      	ldr	r1, [r7, #12]
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002f18:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f1e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8002f20:	683a      	ldr	r2, [r7, #0]
 8002f22:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002f26:	2a00      	cmp	r2, #0
 8002f28:	d101      	bne.n	8002f2e <ETH_SetMACConfig+0x172>
 8002f2a:	2280      	movs	r2, #128	@ 0x80
 8002f2c:	e000      	b.n	8002f30 <ETH_SetMACConfig+0x174>
 8002f2e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002f30:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f36:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002f42:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8002f46:	4013      	ands	r3, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	68f9      	ldr	r1, [r7, #12]
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8002f58:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002f60:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002f62:	4313      	orrs	r3, r2
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f6e:	f023 0103 	bic.w	r1, r3, #3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8002f86:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8002fa2:	2a00      	cmp	r2, #0
 8002fa4:	d101      	bne.n	8002faa <ETH_SetMACConfig+0x1ee>
 8002fa6:	2240      	movs	r2, #64	@ 0x40
 8002fa8:	e000      	b.n	8002fac <ETH_SetMACConfig+0x1f0>
 8002faa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8002fac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8002fb4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8002fb6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8002fbe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8002fcc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8002fdc:	bf00      	nop
 8002fde:	3714      	adds	r7, #20
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr
 8002fe8:	00048083 	.word	0x00048083
 8002fec:	c0f88000 	.word	0xc0f88000
 8002ff0:	fffffef0 	.word	0xfffffef0

08002ff4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b38      	ldr	r3, [pc, #224]	@ (80030ec <ETH_SetDMAConfig+0xf8>)
 800300a:	4013      	ands	r3, r2
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	6811      	ldr	r1, [r2, #0]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	430b      	orrs	r3, r1
 8003016:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800301a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	791b      	ldrb	r3, [r3, #4]
 8003020:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003026:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	7b1b      	ldrb	r3, [r3, #12]
 800302c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800302e:	4313      	orrs	r3, r2
 8003030:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	4b2c      	ldr	r3, [pc, #176]	@ (80030f0 <ETH_SetDMAConfig+0xfc>)
 800303e:	4013      	ands	r3, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	6812      	ldr	r2, [r2, #0]
 8003044:	68f9      	ldr	r1, [r7, #12]
 8003046:	430b      	orrs	r3, r1
 8003048:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800304c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	7b5b      	ldrb	r3, [r3, #13]
 8003052:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003058:	4313      	orrs	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003064:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8003068:	4b22      	ldr	r3, [pc, #136]	@ (80030f4 <ETH_SetDMAConfig+0x100>)
 800306a:	4013      	ands	r3, r2
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	68f9      	ldr	r1, [r7, #12]
 8003072:	430b      	orrs	r3, r1
 8003074:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003078:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	7d1b      	ldrb	r3, [r3, #20]
 8003084:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8003086:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	7f5b      	ldrb	r3, [r3, #29]
 800308c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800308e:	4313      	orrs	r3, r2
 8003090:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800309a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800309e:	4b16      	ldr	r3, [pc, #88]	@ (80030f8 <ETH_SetDMAConfig+0x104>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	68f9      	ldr	r1, [r7, #12]
 80030a8:	430b      	orrs	r3, r1
 80030aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030ae:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	7f1b      	ldrb	r3, [r3, #28]
 80030b6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030c8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <ETH_SetDMAConfig+0x108>)
 80030ce:	4013      	ands	r3, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6812      	ldr	r2, [r2, #0]
 80030d4:	68f9      	ldr	r1, [r7, #12]
 80030d6:	430b      	orrs	r3, r1
 80030d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030dc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80030e0:	bf00      	nop
 80030e2:	3714      	adds	r7, #20
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	ffff87fd 	.word	0xffff87fd
 80030f0:	ffff2ffe 	.word	0xffff2ffe
 80030f4:	fffec000 	.word	0xfffec000
 80030f8:	ffc0efef 	.word	0xffc0efef
 80030fc:	7fc0ffff 	.word	0x7fc0ffff

08003100 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b0a4      	sub	sp, #144	@ 0x90
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003108:	2301      	movs	r3, #1
 800310a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800310e:	2300      	movs	r3, #0
 8003110:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003112:	2300      	movs	r3, #0
 8003114:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003118:	2300      	movs	r3, #0
 800311a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800311e:	2301      	movs	r3, #1
 8003120:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800312a:	2301      	movs	r3, #1
 800312c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003130:	2300      	movs	r3, #0
 8003132:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800313c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003140:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003142:	2300      	movs	r3, #0
 8003144:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8003148:	2300      	movs	r3, #0
 800314a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8003158:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800315c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800315e:	2300      	movs	r3, #0
 8003160:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003164:	2300      	movs	r3, #0
 8003166:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800316e:	2300      	movs	r3, #0
 8003170:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003174:	2300      	movs	r3, #0
 8003176:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800317a:	2300      	movs	r3, #0
 800317c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 800317e:	2300      	movs	r3, #0
 8003180:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003182:	2300      	movs	r3, #0
 8003184:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800318c:	2300      	movs	r3, #0
 800318e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003192:	2301      	movs	r3, #1
 8003194:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8003198:	2320      	movs	r3, #32
 800319a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80031aa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80031b0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031b4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80031bc:	2302      	movs	r3, #2
 80031be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80031d4:	2301      	movs	r3, #1
 80031d6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80031da:	2300      	movs	r3, #0
 80031dc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80031e4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff fde6 	bl	8002dbc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80031f0:	2301      	movs	r3, #1
 80031f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80031f4:	2301      	movs	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80031fc:	2300      	movs	r3, #0
 80031fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003202:	2300      	movs	r3, #0
 8003204:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800320a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800320e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003214:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003218:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800321a:	2300      	movs	r3, #0
 800321c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8003220:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8003224:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003226:	f107 0308 	add.w	r3, r7, #8
 800322a:	4619      	mov	r1, r3
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff fee1 	bl	8002ff4 <ETH_SetDMAConfig>
}
 8003232:	bf00      	nop
 8003234:	3790      	adds	r7, #144	@ 0x90
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800323a:	b480      	push	{r7}
 800323c:	b085      	sub	sp, #20
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	e01d      	b.n	8003284 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68d9      	ldr	r1, [r3, #12]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	4613      	mov	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	440b      	add	r3, r1
 8003258:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2200      	movs	r2, #0
 8003264:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003272:	68b9      	ldr	r1, [r7, #8]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	3206      	adds	r2, #6
 800327a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	3301      	adds	r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2b03      	cmp	r3, #3
 8003288:	d9de      	bls.n	8003248 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003298:	461a      	mov	r2, r3
 800329a:	2303      	movs	r3, #3
 800329c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ac:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	68da      	ldr	r2, [r3, #12]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032bc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032d4:	2300      	movs	r3, #0
 80032d6:	60fb      	str	r3, [r7, #12]
 80032d8:	e023      	b.n	8003322 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6919      	ldr	r1, [r3, #16]
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4613      	mov	r3, r2
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	4413      	add	r3, r2
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	440b      	add	r3, r1
 80032ea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2200      	movs	r2, #0
 80032f6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2200      	movs	r2, #0
 8003302:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2200      	movs	r2, #0
 8003308:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2200      	movs	r2, #0
 800330e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	3212      	adds	r2, #18
 8003318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	3301      	adds	r3, #1
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2b03      	cmp	r3, #3
 8003326:	d9d8      	bls.n	80032da <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800334e:	461a      	mov	r2, r3
 8003350:	2303      	movs	r3, #3
 8003352:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003362:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003376:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 800337a:	bf00      	nop
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003388:	b480      	push	{r7}
 800338a:	b089      	sub	sp, #36	@ 0x24
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003396:	4b89      	ldr	r3, [pc, #548]	@ (80035bc <HAL_GPIO_Init+0x234>)
 8003398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800339a:	e194      	b.n	80036c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	2101      	movs	r1, #1
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 8186 	beq.w	80036c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d005      	beq.n	80033cc <HAL_GPIO_Init+0x44>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d130      	bne.n	800342e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	2203      	movs	r2, #3
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4013      	ands	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003402:	2201      	movs	r2, #1
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	43db      	mvns	r3, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4013      	ands	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	f003 0201 	and.w	r2, r3, #1
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69ba      	ldr	r2, [r7, #24]
 800342c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0303 	and.w	r3, r3, #3
 8003436:	2b03      	cmp	r3, #3
 8003438:	d017      	beq.n	800346a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	2203      	movs	r2, #3
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	689a      	ldr	r2, [r3, #8]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0303 	and.w	r3, r3, #3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d123      	bne.n	80034be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	08da      	lsrs	r2, r3, #3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3208      	adds	r2, #8
 800347e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	220f      	movs	r2, #15
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4013      	ands	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	08da      	lsrs	r2, r3, #3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3208      	adds	r2, #8
 80034b8:	69b9      	ldr	r1, [r7, #24]
 80034ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	2203      	movs	r2, #3
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 0203 	and.w	r2, r3, #3
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	005b      	lsls	r3, r3, #1
 80034e2:	fa02 f303 	lsl.w	r3, r2, r3
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80e0 	beq.w	80036c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003500:	4b2f      	ldr	r3, [pc, #188]	@ (80035c0 <HAL_GPIO_Init+0x238>)
 8003502:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003506:	4a2e      	ldr	r2, [pc, #184]	@ (80035c0 <HAL_GPIO_Init+0x238>)
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003510:	4b2b      	ldr	r3, [pc, #172]	@ (80035c0 <HAL_GPIO_Init+0x238>)
 8003512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800351e:	4a29      	ldr	r2, [pc, #164]	@ (80035c4 <HAL_GPIO_Init+0x23c>)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3302      	adds	r3, #2
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	220f      	movs	r2, #15
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a20      	ldr	r2, [pc, #128]	@ (80035c8 <HAL_GPIO_Init+0x240>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d052      	beq.n	80035f0 <HAL_GPIO_Init+0x268>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1f      	ldr	r2, [pc, #124]	@ (80035cc <HAL_GPIO_Init+0x244>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d031      	beq.n	80035b6 <HAL_GPIO_Init+0x22e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1e      	ldr	r2, [pc, #120]	@ (80035d0 <HAL_GPIO_Init+0x248>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d02b      	beq.n	80035b2 <HAL_GPIO_Init+0x22a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a1d      	ldr	r2, [pc, #116]	@ (80035d4 <HAL_GPIO_Init+0x24c>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d025      	beq.n	80035ae <HAL_GPIO_Init+0x226>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1c      	ldr	r2, [pc, #112]	@ (80035d8 <HAL_GPIO_Init+0x250>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01f      	beq.n	80035aa <HAL_GPIO_Init+0x222>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a1b      	ldr	r2, [pc, #108]	@ (80035dc <HAL_GPIO_Init+0x254>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d019      	beq.n	80035a6 <HAL_GPIO_Init+0x21e>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a1a      	ldr	r2, [pc, #104]	@ (80035e0 <HAL_GPIO_Init+0x258>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d013      	beq.n	80035a2 <HAL_GPIO_Init+0x21a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a19      	ldr	r2, [pc, #100]	@ (80035e4 <HAL_GPIO_Init+0x25c>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00d      	beq.n	800359e <HAL_GPIO_Init+0x216>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a18      	ldr	r2, [pc, #96]	@ (80035e8 <HAL_GPIO_Init+0x260>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <HAL_GPIO_Init+0x212>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a17      	ldr	r2, [pc, #92]	@ (80035ec <HAL_GPIO_Init+0x264>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d101      	bne.n	8003596 <HAL_GPIO_Init+0x20e>
 8003592:	2309      	movs	r3, #9
 8003594:	e02d      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 8003596:	230a      	movs	r3, #10
 8003598:	e02b      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 800359a:	2308      	movs	r3, #8
 800359c:	e029      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 800359e:	2307      	movs	r3, #7
 80035a0:	e027      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035a2:	2306      	movs	r3, #6
 80035a4:	e025      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035a6:	2305      	movs	r3, #5
 80035a8:	e023      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035aa:	2304      	movs	r3, #4
 80035ac:	e021      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035ae:	2303      	movs	r3, #3
 80035b0:	e01f      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e01d      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035b6:	2301      	movs	r3, #1
 80035b8:	e01b      	b.n	80035f2 <HAL_GPIO_Init+0x26a>
 80035ba:	bf00      	nop
 80035bc:	58000080 	.word	0x58000080
 80035c0:	58024400 	.word	0x58024400
 80035c4:	58000400 	.word	0x58000400
 80035c8:	58020000 	.word	0x58020000
 80035cc:	58020400 	.word	0x58020400
 80035d0:	58020800 	.word	0x58020800
 80035d4:	58020c00 	.word	0x58020c00
 80035d8:	58021000 	.word	0x58021000
 80035dc:	58021400 	.word	0x58021400
 80035e0:	58021800 	.word	0x58021800
 80035e4:	58021c00 	.word	0x58021c00
 80035e8:	58022000 	.word	0x58022000
 80035ec:	58022400 	.word	0x58022400
 80035f0:	2300      	movs	r3, #0
 80035f2:	69fa      	ldr	r2, [r7, #28]
 80035f4:	f002 0203 	and.w	r2, r2, #3
 80035f8:	0092      	lsls	r2, r2, #2
 80035fa:	4093      	lsls	r3, r2
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003602:	4938      	ldr	r1, [pc, #224]	@ (80036e4 <HAL_GPIO_Init+0x35c>)
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	089b      	lsrs	r3, r3, #2
 8003608:	3302      	adds	r3, #2
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	43db      	mvns	r3, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4013      	ands	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003636:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	43db      	mvns	r3, r3
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	4013      	ands	r3, r2
 800364e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003664:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	3301      	adds	r3, #1
 80036c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	fa22 f303 	lsr.w	r3, r2, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f47f ae63 	bne.w	800339c <HAL_GPIO_Init+0x14>
  }
}
 80036d6:	bf00      	nop
 80036d8:	bf00      	nop
 80036da:	3724      	adds	r7, #36	@ 0x24
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	58000400 	.word	0x58000400

080036e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	807b      	strh	r3, [r7, #2]
 80036f4:	4613      	mov	r3, r2
 80036f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036f8:	787b      	ldrb	r3, [r7, #1]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036fe:	887a      	ldrh	r2, [r7, #2]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003704:	e003      	b.n	800370e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003706:	887b      	ldrh	r3, [r7, #2]
 8003708:	041a      	lsls	r2, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	619a      	str	r2, [r3, #24]
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e08b      	b.n	8003846 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fdda 	bl	80012fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	@ 0x24
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0201 	bic.w	r2, r2, #1
 800375e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800376c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800377c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d107      	bne.n	8003796 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689a      	ldr	r2, [r3, #8]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	e006      	b.n	80037a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80037a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d108      	bne.n	80037be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	685a      	ldr	r2, [r3, #4]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	e007      	b.n	80037ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003850 <HAL_I2C_Init+0x134>)
 80037da:	430b      	orrs	r3, r1
 80037dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691a      	ldr	r2, [r3, #16]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	430a      	orrs	r2, r1
 8003806:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	69d9      	ldr	r1, [r3, #28]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1a      	ldr	r2, [r3, #32]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	02008000 	.word	0x02008000

08003854 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b088      	sub	sp, #32
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4603      	mov	r3, r0
 8003864:	817b      	strh	r3, [r7, #10]
 8003866:	460b      	mov	r3, r1
 8003868:	813b      	strh	r3, [r7, #8]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b20      	cmp	r3, #32
 8003878:	f040 80f9 	bne.w	8003a6e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_I2C_Mem_Write+0x34>
 8003882:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003884:	2b00      	cmp	r3, #0
 8003886:	d105      	bne.n	8003894 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800388e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0ed      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800389a:	2b01      	cmp	r3, #1
 800389c:	d101      	bne.n	80038a2 <HAL_I2C_Mem_Write+0x4e>
 800389e:	2302      	movs	r3, #2
 80038a0:	e0e6      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038aa:	f7fe fc3b 	bl	8002124 <HAL_GetTick>
 80038ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	9300      	str	r3, [sp, #0]
 80038b4:	2319      	movs	r3, #25
 80038b6:	2201      	movs	r2, #1
 80038b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fac3 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d001      	beq.n	80038cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0d1      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2221      	movs	r2, #33	@ 0x21
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2240      	movs	r2, #64	@ 0x40
 80038d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80038ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038f4:	88f8      	ldrh	r0, [r7, #6]
 80038f6:	893a      	ldrh	r2, [r7, #8]
 80038f8:	8979      	ldrh	r1, [r7, #10]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	4603      	mov	r3, r0
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f9d3 	bl	8003cb0 <I2C_RequestMemoryWrite>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0a9      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2bff      	cmp	r3, #255	@ 0xff
 8003924:	d90e      	bls.n	8003944 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	22ff      	movs	r2, #255	@ 0xff
 800392a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003930:	b2da      	uxtb	r2, r3
 8003932:	8979      	ldrh	r1, [r7, #10]
 8003934:	2300      	movs	r3, #0
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 fc47 	bl	80041d0 <I2C_TransferConfig>
 8003942:	e00f      	b.n	8003964 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003952:	b2da      	uxtb	r2, r3
 8003954:	8979      	ldrh	r1, [r7, #10]
 8003956:	2300      	movs	r3, #0
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800395e:	68f8      	ldr	r0, [r7, #12]
 8003960:	f000 fc36 	bl	80041d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fac6 	bl	8003efa <I2C_WaitOnTXISFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	e07b      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	781a      	ldrb	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003992:	b29b      	uxth	r3, r3
 8003994:	3b01      	subs	r3, #1
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039a0:	3b01      	subs	r3, #1
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d034      	beq.n	8003a1c <HAL_I2C_Mem_Write+0x1c8>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d130      	bne.n	8003a1c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c0:	2200      	movs	r2, #0
 80039c2:	2180      	movs	r1, #128	@ 0x80
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fa3f 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e04d      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2bff      	cmp	r3, #255	@ 0xff
 80039dc:	d90e      	bls.n	80039fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	22ff      	movs	r2, #255	@ 0xff
 80039e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	8979      	ldrh	r1, [r7, #10]
 80039ec:	2300      	movs	r3, #0
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f000 fbeb 	bl	80041d0 <I2C_TransferConfig>
 80039fa:	e00f      	b.n	8003a1c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	8979      	ldrh	r1, [r7, #10]
 8003a0e:	2300      	movs	r3, #0
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fbda 	bl	80041d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d19e      	bne.n	8003964 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 faac 	bl	8003f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	e01a      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6859      	ldr	r1, [r3, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <HAL_I2C_Mem_Write+0x224>)
 8003a4e:	400b      	ands	r3, r1
 8003a50:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2220      	movs	r2, #32
 8003a56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	e000      	b.n	8003a70 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a6e:	2302      	movs	r3, #2
  }
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	fe00e800 	.word	0xfe00e800

08003a7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	817b      	strh	r3, [r7, #10]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	813b      	strh	r3, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	f040 80fd 	bne.w	8003c9e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x34>
 8003aaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ab6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0f1      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_I2C_Mem_Read+0x4e>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e0ea      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ad2:	f7fe fb27 	bl	8002124 <HAL_GetTick>
 8003ad6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	2319      	movs	r3, #25
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f000 f9af 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0d5      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2222      	movs	r2, #34	@ 0x22
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2240      	movs	r2, #64	@ 0x40
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a3a      	ldr	r2, [r7, #32]
 8003b0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b1c:	88f8      	ldrh	r0, [r7, #6]
 8003b1e:	893a      	ldrh	r2, [r7, #8]
 8003b20:	8979      	ldrh	r1, [r7, #10]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	9301      	str	r3, [sp, #4]
 8003b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b28:	9300      	str	r3, [sp, #0]
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f913 	bl	8003d58 <I2C_RequestMemoryRead>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d005      	beq.n	8003b44 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e0ad      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	2bff      	cmp	r3, #255	@ 0xff
 8003b4c:	d90e      	bls.n	8003b6c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	22ff      	movs	r2, #255	@ 0xff
 8003b52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	8979      	ldrh	r1, [r7, #10]
 8003b5c:	4b52      	ldr	r3, [pc, #328]	@ (8003ca8 <HAL_I2C_Mem_Read+0x22c>)
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 fb33 	bl	80041d0 <I2C_TransferConfig>
 8003b6a:	e00f      	b.n	8003b8c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b7a:	b2da      	uxtb	r2, r3
 8003b7c:	8979      	ldrh	r1, [r7, #10]
 8003b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ca8 <HAL_I2C_Mem_Read+0x22c>)
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f000 fb22 	bl	80041d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	2200      	movs	r2, #0
 8003b94:	2104      	movs	r1, #4
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 f956 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e07c      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb0:	b2d2      	uxtb	r2, r2
 8003bb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d034      	beq.n	8003c4c <HAL_I2C_Mem_Read+0x1d0>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d130      	bne.n	8003c4c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2180      	movs	r1, #128	@ 0x80
 8003bf4:	68f8      	ldr	r0, [r7, #12]
 8003bf6:	f000 f927 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e04d      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2bff      	cmp	r3, #255	@ 0xff
 8003c0c:	d90e      	bls.n	8003c2c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	22ff      	movs	r2, #255	@ 0xff
 8003c12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c18:	b2da      	uxtb	r2, r3
 8003c1a:	8979      	ldrh	r1, [r7, #10]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 fad3 	bl	80041d0 <I2C_TransferConfig>
 8003c2a:	e00f      	b.n	8003c4c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3a:	b2da      	uxtb	r2, r3
 8003c3c:	8979      	ldrh	r1, [r7, #10]
 8003c3e:	2300      	movs	r3, #0
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 fac2 	bl	80041d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d19a      	bne.n	8003b8c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f994 	bl	8003f88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e01a      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6859      	ldr	r1, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cac <HAL_I2C_Mem_Read+0x230>)
 8003c7e:	400b      	ands	r3, r1
 8003c80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e000      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
  }
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	80002400 	.word	0x80002400
 8003cac:	fe00e800 	.word	0xfe00e800

08003cb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	4608      	mov	r0, r1
 8003cba:	4611      	mov	r1, r2
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	817b      	strh	r3, [r7, #10]
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	813b      	strh	r3, [r7, #8]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	8979      	ldrh	r1, [r7, #10]
 8003cd0:	4b20      	ldr	r3, [pc, #128]	@ (8003d54 <I2C_RequestMemoryWrite+0xa4>)
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003cd8:	68f8      	ldr	r0, [r7, #12]
 8003cda:	f000 fa79 	bl	80041d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	69b9      	ldr	r1, [r7, #24]
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f909 	bl	8003efa <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e02c      	b.n	8003d4c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf8:	893b      	ldrh	r3, [r7, #8]
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	629a      	str	r2, [r3, #40]	@ 0x28
 8003d02:	e015      	b.n	8003d30 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003d04:	893b      	ldrh	r3, [r7, #8]
 8003d06:	0a1b      	lsrs	r3, r3, #8
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	69b9      	ldr	r1, [r7, #24]
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f8ef 	bl	8003efa <I2C_WaitOnTXISFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e012      	b.n	8003d4c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d26:	893b      	ldrh	r3, [r7, #8]
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	9300      	str	r3, [sp, #0]
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	2200      	movs	r2, #0
 8003d38:	2180      	movs	r1, #128	@ 0x80
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f884 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	80002000 	.word	0x80002000

08003d58 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b086      	sub	sp, #24
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	4608      	mov	r0, r1
 8003d62:	4611      	mov	r1, r2
 8003d64:	461a      	mov	r2, r3
 8003d66:	4603      	mov	r3, r0
 8003d68:	817b      	strh	r3, [r7, #10]
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	813b      	strh	r3, [r7, #8]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d72:	88fb      	ldrh	r3, [r7, #6]
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	8979      	ldrh	r1, [r7, #10]
 8003d78:	4b20      	ldr	r3, [pc, #128]	@ (8003dfc <I2C_RequestMemoryRead+0xa4>)
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fa26 	bl	80041d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	69b9      	ldr	r1, [r7, #24]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 f8b6 	bl	8003efa <I2C_WaitOnTXISFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e02c      	b.n	8003df2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d105      	bne.n	8003daa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d9e:	893b      	ldrh	r3, [r7, #8]
 8003da0:	b2da      	uxtb	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	629a      	str	r2, [r3, #40]	@ 0x28
 8003da8:	e015      	b.n	8003dd6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003daa:	893b      	ldrh	r3, [r7, #8]
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	69b9      	ldr	r1, [r7, #24]
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f89c 	bl	8003efa <I2C_WaitOnTXISFlagUntilTimeout>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e012      	b.n	8003df2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dcc:	893b      	ldrh	r3, [r7, #8]
 8003dce:	b2da      	uxtb	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2140      	movs	r1, #64	@ 0x40
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f831 	bl	8003e48 <I2C_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e000      	b.n	8003df2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	80002000 	.word	0x80002000

08003e00 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d103      	bne.n	8003e1e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d007      	beq.n	8003e3c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699a      	ldr	r2, [r3, #24]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f042 0201 	orr.w	r2, r2, #1
 8003e3a:	619a      	str	r2, [r3, #24]
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	603b      	str	r3, [r7, #0]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e58:	e03b      	b.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	6839      	ldr	r1, [r7, #0]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f000 f8d6 	bl	8004010 <I2C_IsErrorOccurred>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e041      	b.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d02d      	beq.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e76:	f7fe f955 	bl	8002124 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d302      	bcc.n	8003e8c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d122      	bne.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d113      	bne.n	8003ed2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eae:	f043 0220 	orr.w	r2, r3, #32
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e00f      	b.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	699a      	ldr	r2, [r3, #24]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4013      	ands	r3, r2
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	bf0c      	ite	eq
 8003ee2:	2301      	moveq	r3, #1
 8003ee4:	2300      	movne	r3, #0
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d0b4      	beq.n	8003e5a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f06:	e033      	b.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f87f 	bl	8004010 <I2C_IsErrorOccurred>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e031      	b.n	8003f80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d025      	beq.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f24:	f7fe f8fe 	bl	8002124 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d302      	bcc.n	8003f3a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11a      	bne.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d013      	beq.n	8003f70 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4c:	f043 0220 	orr.w	r2, r3, #32
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e007      	b.n	8003f80 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d1c4      	bne.n	8003f08 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f94:	e02f      	b.n	8003ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	68b9      	ldr	r1, [r7, #8]
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f838 	bl	8004010 <I2C_IsErrorOccurred>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e02d      	b.n	8004006 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003faa:	f7fe f8bb 	bl	8002124 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d302      	bcc.n	8003fc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d11a      	bne.n	8003ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b20      	cmp	r3, #32
 8003fcc:	d013      	beq.n	8003ff6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd2:	f043 0220 	orr.w	r2, r3, #32
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e007      	b.n	8004006 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b20      	cmp	r3, #32
 8004002:	d1c8      	bne.n	8003f96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b08a      	sub	sp, #40	@ 0x28
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	699b      	ldr	r3, [r3, #24]
 8004028:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800402a:	2300      	movs	r3, #0
 800402c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	f003 0310 	and.w	r3, r3, #16
 8004038:	2b00      	cmp	r3, #0
 800403a:	d068      	beq.n	800410e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2210      	movs	r2, #16
 8004042:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004044:	e049      	b.n	80040da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404c:	d045      	beq.n	80040da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800404e:	f7fe f869 	bl	8002124 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <I2C_IsErrorOccurred+0x54>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d13a      	bne.n	80040da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800406e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004076:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004086:	d121      	bne.n	80040cc <I2C_IsErrorOccurred+0xbc>
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800408e:	d01d      	beq.n	80040cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004090:	7cfb      	ldrb	r3, [r7, #19]
 8004092:	2b20      	cmp	r3, #32
 8004094:	d01a      	beq.n	80040cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80040a6:	f7fe f83d 	bl	8002124 <HAL_GetTick>
 80040aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040ac:	e00e      	b.n	80040cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80040ae:	f7fe f839 	bl	8002124 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b19      	cmp	r3, #25
 80040ba:	d907      	bls.n	80040cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80040bc:	6a3b      	ldr	r3, [r7, #32]
 80040be:	f043 0320 	orr.w	r3, r3, #32
 80040c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80040ca:	e006      	b.n	80040da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	f003 0320 	and.w	r3, r3, #32
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d1e9      	bne.n	80040ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	f003 0320 	and.w	r3, r3, #32
 80040e4:	2b20      	cmp	r3, #32
 80040e6:	d003      	beq.n	80040f0 <I2C_IsErrorOccurred+0xe0>
 80040e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0aa      	beq.n	8004046 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80040f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d103      	bne.n	8004100 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2220      	movs	r2, #32
 80040fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	f043 0304 	orr.w	r3, r3, #4
 8004106:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004130:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	f043 0308 	orr.w	r3, r3, #8
 8004148:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004152:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004160:	2b00      	cmp	r3, #0
 8004162:	d00b      	beq.n	800417c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004164:	6a3b      	ldr	r3, [r7, #32]
 8004166:	f043 0302 	orr.w	r3, r3, #2
 800416a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004174:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800417c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01c      	beq.n	80041be <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f7ff fe3b 	bl	8003e00 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6859      	ldr	r1, [r3, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	4b0d      	ldr	r3, [pc, #52]	@ (80041cc <I2C_IsErrorOccurred+0x1bc>)
 8004196:	400b      	ands	r3, r1
 8004198:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	431a      	orrs	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80041be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3728      	adds	r7, #40	@ 0x28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	fe00e800 	.word	0xfe00e800

080041d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	607b      	str	r3, [r7, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	817b      	strh	r3, [r7, #10]
 80041de:	4613      	mov	r3, r2
 80041e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041e2:	897b      	ldrh	r3, [r7, #10]
 80041e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041e8:	7a7b      	ldrb	r3, [r7, #9]
 80041ea:	041b      	lsls	r3, r3, #16
 80041ec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041f0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80041f6:	6a3b      	ldr	r3, [r7, #32]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80041fe:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	0d5b      	lsrs	r3, r3, #21
 800420a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800420e:	4b08      	ldr	r3, [pc, #32]	@ (8004230 <I2C_TransferConfig+0x60>)
 8004210:	430b      	orrs	r3, r1
 8004212:	43db      	mvns	r3, r3
 8004214:	ea02 0103 	and.w	r1, r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004222:	bf00      	nop
 8004224:	371c      	adds	r7, #28
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	03ff63ff 	.word	0x03ff63ff

08004234 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b20      	cmp	r3, #32
 8004248:	d138      	bne.n	80042bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004254:	2302      	movs	r3, #2
 8004256:	e032      	b.n	80042be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2224      	movs	r2, #36	@ 0x24
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004286:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6819      	ldr	r1, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	683a      	ldr	r2, [r7, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	e000      	b.n	80042be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042bc:	2302      	movs	r3, #2
  }
}
 80042be:	4618      	mov	r0, r3
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b085      	sub	sp, #20
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
 80042d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d139      	bne.n	8004354 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d101      	bne.n	80042ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042ea:	2302      	movs	r3, #2
 80042ec:	e033      	b.n	8004356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2224      	movs	r2, #36	@ 0x24
 80042fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800431c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	021b      	lsls	r3, r3, #8
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004350:	2300      	movs	r3, #0
 8004352:	e000      	b.n	8004356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004354:	2302      	movs	r3, #2
  }
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
	...

08004364 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800436c:	4b0d      	ldr	r3, [pc, #52]	@ (80043a4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800436e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004372:	4a0c      	ldr	r2, [pc, #48]	@ (80043a4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8004374:	f043 0302 	orr.w	r3, r3, #2
 8004378:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800437c:	4b09      	ldr	r3, [pc, #36]	@ (80043a4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800437e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800438a:	4b07      	ldr	r3, [pc, #28]	@ (80043a8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	4906      	ldr	r1, [pc, #24]	@ (80043a8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4313      	orrs	r3, r2
 8004394:	604b      	str	r3, [r1, #4]
}
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	58024400 	.word	0x58024400
 80043a8:	58000400 	.word	0x58000400

080043ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b086      	sub	sp, #24
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e0fe      	b.n	80045bc <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd fd7a 	bl	8001ecc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2203      	movs	r2, #3
 80043dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f005 fe11 	bl	800a00c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	7c1a      	ldrb	r2, [r3, #16]
 80043f2:	f88d 2000 	strb.w	r2, [sp]
 80043f6:	3304      	adds	r3, #4
 80043f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043fa:	f005 fd95 	bl	8009f28 <USB_CoreInit>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2202      	movs	r2, #2
 8004408:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0d5      	b.n	80045bc <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f005 fe09 	bl	800a02e <USB_SetCurrentMode>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2202      	movs	r2, #2
 8004426:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e0c6      	b.n	80045bc <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800442e:	2300      	movs	r3, #0
 8004430:	73fb      	strb	r3, [r7, #15]
 8004432:	e04a      	b.n	80044ca <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004434:	7bfa      	ldrb	r2, [r7, #15]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	3315      	adds	r3, #21
 8004444:	2201      	movs	r2, #1
 8004446:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004448:	7bfa      	ldrb	r2, [r7, #15]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	3314      	adds	r3, #20
 8004458:	7bfa      	ldrb	r2, [r7, #15]
 800445a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800445c:	7bfa      	ldrb	r2, [r7, #15]
 800445e:	7bfb      	ldrb	r3, [r7, #15]
 8004460:	b298      	uxth	r0, r3
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	4613      	mov	r3, r2
 8004466:	00db      	lsls	r3, r3, #3
 8004468:	4413      	add	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	332e      	adds	r3, #46	@ 0x2e
 8004470:	4602      	mov	r2, r0
 8004472:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004474:	7bfa      	ldrb	r2, [r7, #15]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	4413      	add	r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	3318      	adds	r3, #24
 8004484:	2200      	movs	r2, #0
 8004486:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004488:	7bfa      	ldrb	r2, [r7, #15]
 800448a:	6879      	ldr	r1, [r7, #4]
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	4413      	add	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	331c      	adds	r3, #28
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800449c:	7bfa      	ldrb	r2, [r7, #15]
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	3320      	adds	r3, #32
 80044ac:	2200      	movs	r2, #0
 80044ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80044b0:	7bfa      	ldrb	r2, [r7, #15]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	3324      	adds	r3, #36	@ 0x24
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
 80044c6:	3301      	adds	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	791b      	ldrb	r3, [r3, #4]
 80044ce:	7bfa      	ldrb	r2, [r7, #15]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d3af      	bcc.n	8004434 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	e044      	b.n	8004564 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80044da:	7bfa      	ldrb	r2, [r7, #15]
 80044dc:	6879      	ldr	r1, [r7, #4]
 80044de:	4613      	mov	r3, r2
 80044e0:	00db      	lsls	r3, r3, #3
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	440b      	add	r3, r1
 80044e8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044f0:	7bfa      	ldrb	r2, [r7, #15]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004502:	7bfa      	ldrb	r2, [r7, #15]
 8004504:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004506:	7bfa      	ldrb	r2, [r7, #15]
 8004508:	6879      	ldr	r1, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004518:	2200      	movs	r2, #0
 800451a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800451c:	7bfa      	ldrb	r2, [r7, #15]
 800451e:	6879      	ldr	r1, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800452e:	2200      	movs	r2, #0
 8004530:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004532:	7bfa      	ldrb	r2, [r7, #15]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	4413      	add	r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004548:	7bfa      	ldrb	r2, [r7, #15]
 800454a:	6879      	ldr	r1, [r7, #4]
 800454c:	4613      	mov	r3, r2
 800454e:	00db      	lsls	r3, r3, #3
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	440b      	add	r3, r1
 8004556:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800455a:	2200      	movs	r2, #0
 800455c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	3301      	adds	r3, #1
 8004562:	73fb      	strb	r3, [r7, #15]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	791b      	ldrb	r3, [r3, #4]
 8004568:	7bfa      	ldrb	r2, [r7, #15]
 800456a:	429a      	cmp	r2, r3
 800456c:	d3b5      	bcc.n	80044da <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6818      	ldr	r0, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	7c1a      	ldrb	r2, [r3, #16]
 8004576:	f88d 2000 	strb.w	r2, [sp]
 800457a:	3304      	adds	r3, #4
 800457c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800457e:	f005 fda3 	bl	800a0c8 <USB_DevInit>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e013      	b.n	80045bc <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	7b1b      	ldrb	r3, [r3, #12]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d102      	bne.n	80045b0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f80a 	bl	80045c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f005 ff5e 	bl	800a476 <USB_DevDisconnect>

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	699b      	ldr	r3, [r3, #24]
 80045e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80045f2:	4b05      	ldr	r3, [pc, #20]	@ (8004608 <HAL_PCDEx_ActivateLPM+0x44>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3714      	adds	r7, #20
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr
 8004608:	10000003 	.word	0x10000003

0800460c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004614:	4b19      	ldr	r3, [pc, #100]	@ (800467c <HAL_PWREx_ConfigSupply+0x70>)
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b04      	cmp	r3, #4
 800461e:	d00a      	beq.n	8004636 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004620:	4b16      	ldr	r3, [pc, #88]	@ (800467c <HAL_PWREx_ConfigSupply+0x70>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	429a      	cmp	r2, r3
 800462c:	d001      	beq.n	8004632 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e01f      	b.n	8004672 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004632:	2300      	movs	r3, #0
 8004634:	e01d      	b.n	8004672 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004636:	4b11      	ldr	r3, [pc, #68]	@ (800467c <HAL_PWREx_ConfigSupply+0x70>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f023 0207 	bic.w	r2, r3, #7
 800463e:	490f      	ldr	r1, [pc, #60]	@ (800467c <HAL_PWREx_ConfigSupply+0x70>)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4313      	orrs	r3, r2
 8004644:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004646:	f7fd fd6d 	bl	8002124 <HAL_GetTick>
 800464a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800464c:	e009      	b.n	8004662 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800464e:	f7fd fd69 	bl	8002124 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800465c:	d901      	bls.n	8004662 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e007      	b.n	8004672 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004662:	4b06      	ldr	r3, [pc, #24]	@ (800467c <HAL_PWREx_ConfigSupply+0x70>)
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800466a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800466e:	d1ee      	bne.n	800464e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	58024800 	.word	0x58024800

08004680 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004684:	4b05      	ldr	r3, [pc, #20]	@ (800469c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004686:	68db      	ldr	r3, [r3, #12]
 8004688:	4a04      	ldr	r2, [pc, #16]	@ (800469c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800468a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800468e:	60d3      	str	r3, [r2, #12]
}
 8004690:	bf00      	nop
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	58024800 	.word	0x58024800

080046a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08c      	sub	sp, #48	@ 0x30
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	f000 bc48 	b.w	8004f44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8088 	beq.w	80047d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c2:	4b99      	ldr	r3, [pc, #612]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80046ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046cc:	4b96      	ldr	r3, [pc, #600]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 80046ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80046d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d007      	beq.n	80046e8 <HAL_RCC_OscConfig+0x48>
 80046d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046da:	2b18      	cmp	r3, #24
 80046dc:	d111      	bne.n	8004702 <HAL_RCC_OscConfig+0x62>
 80046de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046e0:	f003 0303 	and.w	r3, r3, #3
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d10c      	bne.n	8004702 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e8:	4b8f      	ldr	r3, [pc, #572]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d06d      	beq.n	80047d0 <HAL_RCC_OscConfig+0x130>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d169      	bne.n	80047d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f000 bc21 	b.w	8004f44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800470a:	d106      	bne.n	800471a <HAL_RCC_OscConfig+0x7a>
 800470c:	4b86      	ldr	r3, [pc, #536]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a85      	ldr	r2, [pc, #532]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004712:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	e02e      	b.n	8004778 <HAL_RCC_OscConfig+0xd8>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x9c>
 8004722:	4b81      	ldr	r3, [pc, #516]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a80      	ldr	r2, [pc, #512]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b7e      	ldr	r3, [pc, #504]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a7d      	ldr	r2, [pc, #500]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004734:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e01d      	b.n	8004778 <HAL_RCC_OscConfig+0xd8>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004744:	d10c      	bne.n	8004760 <HAL_RCC_OscConfig+0xc0>
 8004746:	4b78      	ldr	r3, [pc, #480]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a77      	ldr	r2, [pc, #476]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 800474c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	4b75      	ldr	r3, [pc, #468]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a74      	ldr	r2, [pc, #464]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	e00b      	b.n	8004778 <HAL_RCC_OscConfig+0xd8>
 8004760:	4b71      	ldr	r3, [pc, #452]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a70      	ldr	r2, [pc, #448]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800476a:	6013      	str	r3, [r2, #0]
 800476c:	4b6e      	ldr	r3, [pc, #440]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a6d      	ldr	r2, [pc, #436]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d013      	beq.n	80047a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004780:	f7fd fcd0 	bl	8002124 <HAL_GetTick>
 8004784:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004786:	e008      	b.n	800479a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004788:	f7fd fccc 	bl	8002124 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b64      	cmp	r3, #100	@ 0x64
 8004794:	d901      	bls.n	800479a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e3d4      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800479a:	4b63      	ldr	r3, [pc, #396]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d0f0      	beq.n	8004788 <HAL_RCC_OscConfig+0xe8>
 80047a6:	e014      	b.n	80047d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fd fcbc 	bl	8002124 <HAL_GetTick>
 80047ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047b0:	f7fd fcb8 	bl	8002124 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	@ 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e3c0      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80047c2:	4b59      	ldr	r3, [pc, #356]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x110>
 80047ce:	e000      	b.n	80047d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 80ca 	beq.w	8004974 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047e0:	4b51      	ldr	r3, [pc, #324]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047ea:	4b4f      	ldr	r3, [pc, #316]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 80047ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <HAL_RCC_OscConfig+0x166>
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	2b18      	cmp	r3, #24
 80047fa:	d156      	bne.n	80048aa <HAL_RCC_OscConfig+0x20a>
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d151      	bne.n	80048aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004806:	4b48      	ldr	r3, [pc, #288]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b00      	cmp	r3, #0
 8004810:	d005      	beq.n	800481e <HAL_RCC_OscConfig+0x17e>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e392      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800481e:	4b42      	ldr	r3, [pc, #264]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f023 0219 	bic.w	r2, r3, #25
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	493f      	ldr	r1, [pc, #252]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 800482c:	4313      	orrs	r3, r2
 800482e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fd fc78 	bl	8002124 <HAL_GetTick>
 8004834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004838:	f7fd fc74 	bl	8002124 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b02      	cmp	r3, #2
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e37c      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800484a:	4b37      	ldr	r3, [pc, #220]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0304 	and.w	r3, r3, #4
 8004852:	2b00      	cmp	r3, #0
 8004854:	d0f0      	beq.n	8004838 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004856:	f7fd fc95 	bl	8002184 <HAL_GetREVID>
 800485a:	4603      	mov	r3, r0
 800485c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004860:	4293      	cmp	r3, r2
 8004862:	d817      	bhi.n	8004894 <HAL_RCC_OscConfig+0x1f4>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b40      	cmp	r3, #64	@ 0x40
 800486a:	d108      	bne.n	800487e <HAL_RCC_OscConfig+0x1de>
 800486c:	4b2e      	ldr	r3, [pc, #184]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004874:	4a2c      	ldr	r2, [pc, #176]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800487a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800487c:	e07a      	b.n	8004974 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487e:	4b2a      	ldr	r3, [pc, #168]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	031b      	lsls	r3, r3, #12
 800488c:	4926      	ldr	r1, [pc, #152]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 800488e:	4313      	orrs	r3, r2
 8004890:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004892:	e06f      	b.n	8004974 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004894:	4b24      	ldr	r3, [pc, #144]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	061b      	lsls	r3, r3, #24
 80048a2:	4921      	ldr	r1, [pc, #132]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048a8:	e064      	b.n	8004974 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d047      	beq.n	8004942 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f023 0219 	bic.w	r2, r3, #25
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	491a      	ldr	r1, [pc, #104]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c4:	f7fd fc2e 	bl	8002124 <HAL_GetTick>
 80048c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048cc:	f7fd fc2a 	bl	8002124 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e332      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048de:	4b12      	ldr	r3, [pc, #72]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ea:	f7fd fc4b 	bl	8002184 <HAL_GetREVID>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d819      	bhi.n	800492c <HAL_RCC_OscConfig+0x28c>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2b40      	cmp	r3, #64	@ 0x40
 80048fe:	d108      	bne.n	8004912 <HAL_RCC_OscConfig+0x272>
 8004900:	4b09      	ldr	r3, [pc, #36]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004908:	4a07      	ldr	r2, [pc, #28]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 800490a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800490e:	6053      	str	r3, [r2, #4]
 8004910:	e030      	b.n	8004974 <HAL_RCC_OscConfig+0x2d4>
 8004912:	4b05      	ldr	r3, [pc, #20]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	031b      	lsls	r3, r3, #12
 8004920:	4901      	ldr	r1, [pc, #4]	@ (8004928 <HAL_RCC_OscConfig+0x288>)
 8004922:	4313      	orrs	r3, r2
 8004924:	604b      	str	r3, [r1, #4]
 8004926:	e025      	b.n	8004974 <HAL_RCC_OscConfig+0x2d4>
 8004928:	58024400 	.word	0x58024400
 800492c:	4b9a      	ldr	r3, [pc, #616]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	061b      	lsls	r3, r3, #24
 800493a:	4997      	ldr	r1, [pc, #604]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 800493c:	4313      	orrs	r3, r2
 800493e:	604b      	str	r3, [r1, #4]
 8004940:	e018      	b.n	8004974 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004942:	4b95      	ldr	r3, [pc, #596]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a94      	ldr	r2, [pc, #592]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004948:	f023 0301 	bic.w	r3, r3, #1
 800494c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800494e:	f7fd fbe9 	bl	8002124 <HAL_GetTick>
 8004952:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004956:	f7fd fbe5 	bl	8002124 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e2ed      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004968:	4b8b      	ldr	r3, [pc, #556]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0304 	and.w	r3, r3, #4
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1f0      	bne.n	8004956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0310 	and.w	r3, r3, #16
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80a9 	beq.w	8004ad4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004982:	4b85      	ldr	r3, [pc, #532]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800498a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800498c:	4b82      	ldr	r3, [pc, #520]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 800498e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004990:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b08      	cmp	r3, #8
 8004996:	d007      	beq.n	80049a8 <HAL_RCC_OscConfig+0x308>
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	2b18      	cmp	r3, #24
 800499c:	d13a      	bne.n	8004a14 <HAL_RCC_OscConfig+0x374>
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f003 0303 	and.w	r3, r3, #3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d135      	bne.n	8004a14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049a8:	4b7b      	ldr	r3, [pc, #492]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d005      	beq.n	80049c0 <HAL_RCC_OscConfig+0x320>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	2b80      	cmp	r3, #128	@ 0x80
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e2c1      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049c0:	f7fd fbe0 	bl	8002184 <HAL_GetREVID>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d817      	bhi.n	80049fe <HAL_RCC_OscConfig+0x35e>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	2b20      	cmp	r3, #32
 80049d4:	d108      	bne.n	80049e8 <HAL_RCC_OscConfig+0x348>
 80049d6:	4b70      	ldr	r3, [pc, #448]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80049de:	4a6e      	ldr	r2, [pc, #440]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 80049e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049e6:	e075      	b.n	8004ad4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049e8:	4b6b      	ldr	r3, [pc, #428]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	069b      	lsls	r3, r3, #26
 80049f6:	4968      	ldr	r1, [pc, #416]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049fc:	e06a      	b.n	8004ad4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049fe:	4b66      	ldr	r3, [pc, #408]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	061b      	lsls	r3, r3, #24
 8004a0c:	4962      	ldr	r1, [pc, #392]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a12:	e05f      	b.n	8004ad4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69db      	ldr	r3, [r3, #28]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d042      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a1c:	4b5e      	ldr	r3, [pc, #376]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a5d      	ldr	r2, [pc, #372]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a28:	f7fd fb7c 	bl	8002124 <HAL_GetTick>
 8004a2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a30:	f7fd fb78 	bl	8002124 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e280      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a42:	4b55      	ldr	r3, [pc, #340]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d0f0      	beq.n	8004a30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a4e:	f7fd fb99 	bl	8002184 <HAL_GetREVID>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d817      	bhi.n	8004a8c <HAL_RCC_OscConfig+0x3ec>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	2b20      	cmp	r3, #32
 8004a62:	d108      	bne.n	8004a76 <HAL_RCC_OscConfig+0x3d6>
 8004a64:	4b4c      	ldr	r3, [pc, #304]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004a6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a72:	6053      	str	r3, [r2, #4]
 8004a74:	e02e      	b.n	8004ad4 <HAL_RCC_OscConfig+0x434>
 8004a76:	4b48      	ldr	r3, [pc, #288]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	069b      	lsls	r3, r3, #26
 8004a84:	4944      	ldr	r1, [pc, #272]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	604b      	str	r3, [r1, #4]
 8004a8a:	e023      	b.n	8004ad4 <HAL_RCC_OscConfig+0x434>
 8004a8c:	4b42      	ldr	r3, [pc, #264]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	061b      	lsls	r3, r3, #24
 8004a9a:	493f      	ldr	r1, [pc, #252]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60cb      	str	r3, [r1, #12]
 8004aa0:	e018      	b.n	8004ad4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a3c      	ldr	r2, [pc, #240]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aae:	f7fd fb39 	bl	8002124 <HAL_GetTick>
 8004ab2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ab4:	e008      	b.n	8004ac8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004ab6:	f7fd fb35 	bl	8002124 <HAL_GetTick>
 8004aba:	4602      	mov	r2, r0
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e23d      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004ac8:	4b33      	ldr	r3, [pc, #204]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1f0      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0308 	and.w	r3, r3, #8
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d036      	beq.n	8004b4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d019      	beq.n	8004b1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aec:	4a2a      	ldr	r2, [pc, #168]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fd fb16 	bl	8002124 <HAL_GetTick>
 8004af8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004afc:	f7fd fb12 	bl	8002124 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e21a      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b0e:	4b22      	ldr	r3, [pc, #136]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCC_OscConfig+0x45c>
 8004b1a:	e018      	b.n	8004b4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b20:	4a1d      	ldr	r2, [pc, #116]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004b22:	f023 0301 	bic.w	r3, r3, #1
 8004b26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b28:	f7fd fafc 	bl	8002124 <HAL_GetTick>
 8004b2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b2e:	e008      	b.n	8004b42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b30:	f7fd faf8 	bl	8002124 <HAL_GetTick>
 8004b34:	4602      	mov	r2, r0
 8004b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e200      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b42:	4b15      	ldr	r3, [pc, #84]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b46:	f003 0302 	and.w	r3, r3, #2
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f0      	bne.n	8004b30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d039      	beq.n	8004bce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01c      	beq.n	8004b9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b62:	4b0d      	ldr	r3, [pc, #52]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a0c      	ldr	r2, [pc, #48]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b6e:	f7fd fad9 	bl	8002124 <HAL_GetTick>
 8004b72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b76:	f7fd fad5 	bl	8002124 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e1dd      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b88:	4b03      	ldr	r3, [pc, #12]	@ (8004b98 <HAL_RCC_OscConfig+0x4f8>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x4d6>
 8004b94:	e01b      	b.n	8004bce <HAL_RCC_OscConfig+0x52e>
 8004b96:	bf00      	nop
 8004b98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b9c:	4b9b      	ldr	r3, [pc, #620]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a9a      	ldr	r2, [pc, #616]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004ba2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ba6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ba8:	f7fd fabc 	bl	8002124 <HAL_GetTick>
 8004bac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004bb0:	f7fd fab8 	bl	8002124 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e1c0      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bc2:	4b92      	ldr	r3, [pc, #584]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0304 	and.w	r3, r3, #4
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8081 	beq.w	8004cde <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bdc:	4b8c      	ldr	r3, [pc, #560]	@ (8004e10 <HAL_RCC_OscConfig+0x770>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a8b      	ldr	r2, [pc, #556]	@ (8004e10 <HAL_RCC_OscConfig+0x770>)
 8004be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004be8:	f7fd fa9c 	bl	8002124 <HAL_GetTick>
 8004bec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bee:	e008      	b.n	8004c02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf0:	f7fd fa98 	bl	8002124 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	2b64      	cmp	r3, #100	@ 0x64
 8004bfc:	d901      	bls.n	8004c02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	e1a0      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c02:	4b83      	ldr	r3, [pc, #524]	@ (8004e10 <HAL_RCC_OscConfig+0x770>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d0f0      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d106      	bne.n	8004c24 <HAL_RCC_OscConfig+0x584>
 8004c16:	4b7d      	ldr	r3, [pc, #500]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c1c:	f043 0301 	orr.w	r3, r3, #1
 8004c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c22:	e02d      	b.n	8004c80 <HAL_RCC_OscConfig+0x5e0>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10c      	bne.n	8004c46 <HAL_RCC_OscConfig+0x5a6>
 8004c2c:	4b77      	ldr	r3, [pc, #476]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c30:	4a76      	ldr	r2, [pc, #472]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c38:	4b74      	ldr	r3, [pc, #464]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3c:	4a73      	ldr	r2, [pc, #460]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c3e:	f023 0304 	bic.w	r3, r3, #4
 8004c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c44:	e01c      	b.n	8004c80 <HAL_RCC_OscConfig+0x5e0>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	2b05      	cmp	r3, #5
 8004c4c:	d10c      	bne.n	8004c68 <HAL_RCC_OscConfig+0x5c8>
 8004c4e:	4b6f      	ldr	r3, [pc, #444]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c52:	4a6e      	ldr	r2, [pc, #440]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c54:	f043 0304 	orr.w	r3, r3, #4
 8004c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c5a:	4b6c      	ldr	r3, [pc, #432]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5e:	4a6b      	ldr	r2, [pc, #428]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c66:	e00b      	b.n	8004c80 <HAL_RCC_OscConfig+0x5e0>
 8004c68:	4b68      	ldr	r3, [pc, #416]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6c:	4a67      	ldr	r2, [pc, #412]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c6e:	f023 0301 	bic.w	r3, r3, #1
 8004c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c74:	4b65      	ldr	r3, [pc, #404]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c78:	4a64      	ldr	r2, [pc, #400]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004c7a:	f023 0304 	bic.w	r3, r3, #4
 8004c7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d015      	beq.n	8004cb4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c88:	f7fd fa4c 	bl	8002124 <HAL_GetTick>
 8004c8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c8e:	e00a      	b.n	8004ca6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c90:	f7fd fa48 	bl	8002124 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e14e      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004ca6:	4b59      	ldr	r3, [pc, #356]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0ee      	beq.n	8004c90 <HAL_RCC_OscConfig+0x5f0>
 8004cb2:	e014      	b.n	8004cde <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb4:	f7fd fa36 	bl	8002124 <HAL_GetTick>
 8004cb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cbc:	f7fd fa32 	bl	8002124 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e138      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cd2:	4b4e      	ldr	r3, [pc, #312]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1ee      	bne.n	8004cbc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 812d 	beq.w	8004f42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ce8:	4b48      	ldr	r3, [pc, #288]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004cf0:	2b18      	cmp	r3, #24
 8004cf2:	f000 80bd 	beq.w	8004e70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	f040 809e 	bne.w	8004e3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d00:	4b42      	ldr	r3, [pc, #264]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a41      	ldr	r2, [pc, #260]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7fd fa0a 	bl	8002124 <HAL_GetTick>
 8004d10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d14:	f7fd fa06 	bl	8002124 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e10e      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d26:	4b39      	ldr	r3, [pc, #228]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d32:	4b36      	ldr	r3, [pc, #216]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004d34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d36:	4b37      	ldr	r3, [pc, #220]	@ (8004e14 <HAL_RCC_OscConfig+0x774>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d42:	0112      	lsls	r2, r2, #4
 8004d44:	430a      	orrs	r2, r1
 8004d46:	4931      	ldr	r1, [pc, #196]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d50:	3b01      	subs	r3, #1
 8004d52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	025b      	lsls	r3, r3, #9
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	431a      	orrs	r2, r3
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d66:	3b01      	subs	r3, #1
 8004d68:	041b      	lsls	r3, r3, #16
 8004d6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d6e:	431a      	orrs	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d74:	3b01      	subs	r3, #1
 8004d76:	061b      	lsls	r3, r3, #24
 8004d78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d7c:	4923      	ldr	r1, [pc, #140]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004d82:	4b22      	ldr	r3, [pc, #136]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	4a21      	ldr	r2, [pc, #132]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d92:	4b21      	ldr	r3, [pc, #132]	@ (8004e18 <HAL_RCC_OscConfig+0x778>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d9a:	00d2      	lsls	r2, r2, #3
 8004d9c:	491b      	ldr	r1, [pc, #108]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004da2:	4b1a      	ldr	r3, [pc, #104]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	f023 020c 	bic.w	r2, r3, #12
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dae:	4917      	ldr	r1, [pc, #92]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004db4:	4b15      	ldr	r3, [pc, #84]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	f023 0202 	bic.w	r2, r3, #2
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc0:	4912      	ldr	r1, [pc, #72]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004dc6:	4b11      	ldr	r3, [pc, #68]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	4a10      	ldr	r2, [pc, #64]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004dde:	4b0b      	ldr	r3, [pc, #44]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	4a0a      	ldr	r2, [pc, #40]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004de8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004dea:	4b08      	ldr	r3, [pc, #32]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	4a07      	ldr	r2, [pc, #28]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004df0:	f043 0301 	orr.w	r3, r3, #1
 8004df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004df6:	4b05      	ldr	r3, [pc, #20]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a04      	ldr	r2, [pc, #16]	@ (8004e0c <HAL_RCC_OscConfig+0x76c>)
 8004dfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fd f98f 	bl	8002124 <HAL_GetTick>
 8004e06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e08:	e011      	b.n	8004e2e <HAL_RCC_OscConfig+0x78e>
 8004e0a:	bf00      	nop
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	58024800 	.word	0x58024800
 8004e14:	fffffc0c 	.word	0xfffffc0c
 8004e18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e1c:	f7fd f982 	bl	8002124 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d901      	bls.n	8004e2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	e08a      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e2e:	4b47      	ldr	r3, [pc, #284]	@ (8004f4c <HAL_RCC_OscConfig+0x8ac>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f0      	beq.n	8004e1c <HAL_RCC_OscConfig+0x77c>
 8004e3a:	e082      	b.n	8004f42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3c:	4b43      	ldr	r3, [pc, #268]	@ (8004f4c <HAL_RCC_OscConfig+0x8ac>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a42      	ldr	r2, [pc, #264]	@ (8004f4c <HAL_RCC_OscConfig+0x8ac>)
 8004e42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e48:	f7fd f96c 	bl	8002124 <HAL_GetTick>
 8004e4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e50:	f7fd f968 	bl	8002124 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e070      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e62:	4b3a      	ldr	r3, [pc, #232]	@ (8004f4c <HAL_RCC_OscConfig+0x8ac>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f0      	bne.n	8004e50 <HAL_RCC_OscConfig+0x7b0>
 8004e6e:	e068      	b.n	8004f42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e70:	4b36      	ldr	r3, [pc, #216]	@ (8004f4c <HAL_RCC_OscConfig+0x8ac>)
 8004e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e76:	4b35      	ldr	r3, [pc, #212]	@ (8004f4c <HAL_RCC_OscConfig+0x8ac>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d031      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	f003 0203 	and.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d12a      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	091b      	lsrs	r3, r3, #4
 8004e96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d122      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d11a      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	0a5b      	lsrs	r3, r3, #9
 8004eb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ebe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d111      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	0c1b      	lsrs	r3, r3, #16
 8004ec8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d108      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	0e1b      	lsrs	r3, r3, #24
 8004eda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ee2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d001      	beq.n	8004eec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e02b      	b.n	8004f44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004eec:	4b17      	ldr	r3, [pc, #92]	@ (8004f4c <HAL_RCC_OscConfig+0x8ac>)
 8004eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ef0:	08db      	lsrs	r3, r3, #3
 8004ef2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ef6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d01f      	beq.n	8004f42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f02:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <HAL_RCC_OscConfig+0x8ac>)
 8004f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f06:	4a11      	ldr	r2, [pc, #68]	@ (8004f4c <HAL_RCC_OscConfig+0x8ac>)
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f0e:	f7fd f909 	bl	8002124 <HAL_GetTick>
 8004f12:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004f14:	bf00      	nop
 8004f16:	f7fd f905 	bl	8002124 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d0f9      	beq.n	8004f16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f22:	4b0a      	ldr	r3, [pc, #40]	@ (8004f4c <HAL_RCC_OscConfig+0x8ac>)
 8004f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f26:	4b0a      	ldr	r3, [pc, #40]	@ (8004f50 <HAL_RCC_OscConfig+0x8b0>)
 8004f28:	4013      	ands	r3, r2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f2e:	00d2      	lsls	r2, r2, #3
 8004f30:	4906      	ldr	r1, [pc, #24]	@ (8004f4c <HAL_RCC_OscConfig+0x8ac>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004f36:	4b05      	ldr	r3, [pc, #20]	@ (8004f4c <HAL_RCC_OscConfig+0x8ac>)
 8004f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3a:	4a04      	ldr	r2, [pc, #16]	@ (8004f4c <HAL_RCC_OscConfig+0x8ac>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3730      	adds	r7, #48	@ 0x30
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	58024400 	.word	0x58024400
 8004f50:	ffff0007 	.word	0xffff0007

08004f54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b086      	sub	sp, #24
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d101      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e19c      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f68:	4b8a      	ldr	r3, [pc, #552]	@ (8005194 <HAL_RCC_ClockConfig+0x240>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 030f 	and.w	r3, r3, #15
 8004f70:	683a      	ldr	r2, [r7, #0]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d910      	bls.n	8004f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f76:	4b87      	ldr	r3, [pc, #540]	@ (8005194 <HAL_RCC_ClockConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f023 020f 	bic.w	r2, r3, #15
 8004f7e:	4985      	ldr	r1, [pc, #532]	@ (8005194 <HAL_RCC_ClockConfig+0x240>)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f86:	4b83      	ldr	r3, [pc, #524]	@ (8005194 <HAL_RCC_ClockConfig+0x240>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d001      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e184      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0304 	and.w	r3, r3, #4
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d010      	beq.n	8004fc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691a      	ldr	r2, [r3, #16]
 8004fa8:	4b7b      	ldr	r3, [pc, #492]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d908      	bls.n	8004fc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fb4:	4b78      	ldr	r3, [pc, #480]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	4975      	ldr	r1, [pc, #468]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d010      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	695a      	ldr	r2, [r3, #20]
 8004fd6:	4b70      	ldr	r3, [pc, #448]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d908      	bls.n	8004ff4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	496a      	ldr	r1, [pc, #424]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0310 	and.w	r3, r3, #16
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d010      	beq.n	8005022 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	4b64      	ldr	r3, [pc, #400]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800500c:	429a      	cmp	r2, r3
 800500e:	d908      	bls.n	8005022 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005010:	4b61      	ldr	r3, [pc, #388]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	495e      	ldr	r1, [pc, #376]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 800501e:	4313      	orrs	r3, r2
 8005020:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	2b00      	cmp	r3, #0
 800502c:	d010      	beq.n	8005050 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	4b59      	ldr	r3, [pc, #356]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800503a:	429a      	cmp	r2, r3
 800503c:	d908      	bls.n	8005050 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800503e:	4b56      	ldr	r3, [pc, #344]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	69db      	ldr	r3, [r3, #28]
 800504a:	4953      	ldr	r1, [pc, #332]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 800504c:	4313      	orrs	r3, r2
 800504e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d010      	beq.n	800507e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	4b4d      	ldr	r3, [pc, #308]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	f003 030f 	and.w	r3, r3, #15
 8005068:	429a      	cmp	r2, r3
 800506a:	d908      	bls.n	800507e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506c:	4b4a      	ldr	r3, [pc, #296]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f023 020f 	bic.w	r2, r3, #15
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	4947      	ldr	r1, [pc, #284]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 800507a:	4313      	orrs	r3, r2
 800507c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d055      	beq.n	8005136 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800508a:	4b43      	ldr	r3, [pc, #268]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	4940      	ldr	r1, [pc, #256]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005098:	4313      	orrs	r3, r2
 800509a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d107      	bne.n	80050b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80050a4:	4b3c      	ldr	r3, [pc, #240]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d121      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0f6      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b03      	cmp	r3, #3
 80050ba:	d107      	bne.n	80050cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050bc:	4b36      	ldr	r3, [pc, #216]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d115      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e0ea      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d107      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050d4:	4b30      	ldr	r3, [pc, #192]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d109      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0de      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050e4:	4b2c      	ldr	r3, [pc, #176]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e0d6      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050f4:	4b28      	ldr	r3, [pc, #160]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	f023 0207 	bic.w	r2, r3, #7
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	4925      	ldr	r1, [pc, #148]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005102:	4313      	orrs	r3, r2
 8005104:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005106:	f7fd f80d 	bl	8002124 <HAL_GetTick>
 800510a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510c:	e00a      	b.n	8005124 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510e:	f7fd f809 	bl	8002124 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511c:	4293      	cmp	r3, r2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e0be      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005124:	4b1c      	ldr	r3, [pc, #112]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	429a      	cmp	r2, r3
 8005134:	d1eb      	bne.n	800510e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d010      	beq.n	8005164 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	4b14      	ldr	r3, [pc, #80]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	429a      	cmp	r2, r3
 8005150:	d208      	bcs.n	8005164 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005152:	4b11      	ldr	r3, [pc, #68]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f023 020f 	bic.w	r2, r3, #15
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	490e      	ldr	r1, [pc, #56]	@ (8005198 <HAL_RCC_ClockConfig+0x244>)
 8005160:	4313      	orrs	r3, r2
 8005162:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005164:	4b0b      	ldr	r3, [pc, #44]	@ (8005194 <HAL_RCC_ClockConfig+0x240>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	683a      	ldr	r2, [r7, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d214      	bcs.n	800519c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005172:	4b08      	ldr	r3, [pc, #32]	@ (8005194 <HAL_RCC_ClockConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 020f 	bic.w	r2, r3, #15
 800517a:	4906      	ldr	r1, [pc, #24]	@ (8005194 <HAL_RCC_ClockConfig+0x240>)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	4313      	orrs	r3, r2
 8005180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005182:	4b04      	ldr	r3, [pc, #16]	@ (8005194 <HAL_RCC_ClockConfig+0x240>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	429a      	cmp	r2, r3
 800518e:	d005      	beq.n	800519c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e086      	b.n	80052a2 <HAL_RCC_ClockConfig+0x34e>
 8005194:	52002000 	.word	0x52002000
 8005198:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d010      	beq.n	80051ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	4b3f      	ldr	r3, [pc, #252]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d208      	bcs.n	80051ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051b8:	4b3c      	ldr	r3, [pc, #240]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	4939      	ldr	r1, [pc, #228]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d010      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695a      	ldr	r2, [r3, #20]
 80051da:	4b34      	ldr	r3, [pc, #208]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d208      	bcs.n	80051f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051e6:	4b31      	ldr	r3, [pc, #196]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	695b      	ldr	r3, [r3, #20]
 80051f2:	492e      	ldr	r1, [pc, #184]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d010      	beq.n	8005226 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	4b28      	ldr	r3, [pc, #160]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 800520a:	69db      	ldr	r3, [r3, #28]
 800520c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005210:	429a      	cmp	r2, r3
 8005212:	d208      	bcs.n	8005226 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005214:	4b25      	ldr	r3, [pc, #148]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	4922      	ldr	r1, [pc, #136]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 8005222:	4313      	orrs	r3, r2
 8005224:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d010      	beq.n	8005254 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	4b1d      	ldr	r3, [pc, #116]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 8005238:	6a1b      	ldr	r3, [r3, #32]
 800523a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800523e:	429a      	cmp	r2, r3
 8005240:	d208      	bcs.n	8005254 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005242:	4b1a      	ldr	r3, [pc, #104]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	4917      	ldr	r1, [pc, #92]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 8005250:	4313      	orrs	r3, r2
 8005252:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005254:	f000 f89e 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8005258:	4602      	mov	r2, r0
 800525a:	4b14      	ldr	r3, [pc, #80]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	0a1b      	lsrs	r3, r3, #8
 8005260:	f003 030f 	and.w	r3, r3, #15
 8005264:	4912      	ldr	r1, [pc, #72]	@ (80052b0 <HAL_RCC_ClockConfig+0x35c>)
 8005266:	5ccb      	ldrb	r3, [r1, r3]
 8005268:	f003 031f 	and.w	r3, r3, #31
 800526c:	fa22 f303 	lsr.w	r3, r2, r3
 8005270:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005272:	4b0e      	ldr	r3, [pc, #56]	@ (80052ac <HAL_RCC_ClockConfig+0x358>)
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	4a0d      	ldr	r2, [pc, #52]	@ (80052b0 <HAL_RCC_ClockConfig+0x35c>)
 800527c:	5cd3      	ldrb	r3, [r2, r3]
 800527e:	f003 031f 	and.w	r3, r3, #31
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	fa22 f303 	lsr.w	r3, r2, r3
 8005288:	4a0a      	ldr	r2, [pc, #40]	@ (80052b4 <HAL_RCC_ClockConfig+0x360>)
 800528a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800528c:	4a0a      	ldr	r2, [pc, #40]	@ (80052b8 <HAL_RCC_ClockConfig+0x364>)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005292:	4b0a      	ldr	r3, [pc, #40]	@ (80052bc <HAL_RCC_ClockConfig+0x368>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f7fc fefa 	bl	8002090 <HAL_InitTick>
 800529c:	4603      	mov	r3, r0
 800529e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	58024400 	.word	0x58024400
 80052b0:	0800af50 	.word	0x0800af50
 80052b4:	24000008 	.word	0x24000008
 80052b8:	24000004 	.word	0x24000004
 80052bc:	2400000c 	.word	0x2400000c

080052c0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08c      	sub	sp, #48	@ 0x30
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d12a      	bne.n	8005328 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80052d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005388 <HAL_RCC_MCOConfig+0xc8>)
 80052d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052d8:	4a2b      	ldr	r2, [pc, #172]	@ (8005388 <HAL_RCC_MCOConfig+0xc8>)
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80052e2:	4b29      	ldr	r3, [pc, #164]	@ (8005388 <HAL_RCC_MCOConfig+0xc8>)
 80052e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80052f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80052f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052f6:	2302      	movs	r3, #2
 80052f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052fa:	2303      	movs	r3, #3
 80052fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005302:	2300      	movs	r3, #0
 8005304:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8005306:	f107 031c 	add.w	r3, r7, #28
 800530a:	4619      	mov	r1, r3
 800530c:	481f      	ldr	r0, [pc, #124]	@ (800538c <HAL_RCC_MCOConfig+0xcc>)
 800530e:	f7fe f83b 	bl	8003388 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8005312:	4b1d      	ldr	r3, [pc, #116]	@ (8005388 <HAL_RCC_MCOConfig+0xc8>)
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800531a:	68b9      	ldr	r1, [r7, #8]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	430b      	orrs	r3, r1
 8005320:	4919      	ldr	r1, [pc, #100]	@ (8005388 <HAL_RCC_MCOConfig+0xc8>)
 8005322:	4313      	orrs	r3, r2
 8005324:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8005326:	e02a      	b.n	800537e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8005328:	4b17      	ldr	r3, [pc, #92]	@ (8005388 <HAL_RCC_MCOConfig+0xc8>)
 800532a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800532e:	4a16      	ldr	r2, [pc, #88]	@ (8005388 <HAL_RCC_MCOConfig+0xc8>)
 8005330:	f043 0304 	orr.w	r3, r3, #4
 8005334:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005338:	4b13      	ldr	r3, [pc, #76]	@ (8005388 <HAL_RCC_MCOConfig+0xc8>)
 800533a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800533e:	f003 0304 	and.w	r3, r3, #4
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8005346:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800534a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534c:	2302      	movs	r3, #2
 800534e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005350:	2303      	movs	r3, #3
 8005352:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005354:	2300      	movs	r3, #0
 8005356:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8005358:	2300      	movs	r3, #0
 800535a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800535c:	f107 031c 	add.w	r3, r7, #28
 8005360:	4619      	mov	r1, r3
 8005362:	480b      	ldr	r0, [pc, #44]	@ (8005390 <HAL_RCC_MCOConfig+0xd0>)
 8005364:	f7fe f810 	bl	8003388 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8005368:	4b07      	ldr	r3, [pc, #28]	@ (8005388 <HAL_RCC_MCOConfig+0xc8>)
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	01d9      	lsls	r1, r3, #7
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	430b      	orrs	r3, r1
 8005378:	4903      	ldr	r1, [pc, #12]	@ (8005388 <HAL_RCC_MCOConfig+0xc8>)
 800537a:	4313      	orrs	r3, r2
 800537c:	610b      	str	r3, [r1, #16]
}
 800537e:	bf00      	nop
 8005380:	3730      	adds	r7, #48	@ 0x30
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	58024400 	.word	0x58024400
 800538c:	58020000 	.word	0x58020000
 8005390:	58020800 	.word	0x58020800

08005394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005394:	b480      	push	{r7}
 8005396:	b089      	sub	sp, #36	@ 0x24
 8005398:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800539a:	4bb3      	ldr	r3, [pc, #716]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053a2:	2b18      	cmp	r3, #24
 80053a4:	f200 8155 	bhi.w	8005652 <HAL_RCC_GetSysClockFreq+0x2be>
 80053a8:	a201      	add	r2, pc, #4	@ (adr r2, 80053b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80053aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ae:	bf00      	nop
 80053b0:	08005415 	.word	0x08005415
 80053b4:	08005653 	.word	0x08005653
 80053b8:	08005653 	.word	0x08005653
 80053bc:	08005653 	.word	0x08005653
 80053c0:	08005653 	.word	0x08005653
 80053c4:	08005653 	.word	0x08005653
 80053c8:	08005653 	.word	0x08005653
 80053cc:	08005653 	.word	0x08005653
 80053d0:	0800543b 	.word	0x0800543b
 80053d4:	08005653 	.word	0x08005653
 80053d8:	08005653 	.word	0x08005653
 80053dc:	08005653 	.word	0x08005653
 80053e0:	08005653 	.word	0x08005653
 80053e4:	08005653 	.word	0x08005653
 80053e8:	08005653 	.word	0x08005653
 80053ec:	08005653 	.word	0x08005653
 80053f0:	08005441 	.word	0x08005441
 80053f4:	08005653 	.word	0x08005653
 80053f8:	08005653 	.word	0x08005653
 80053fc:	08005653 	.word	0x08005653
 8005400:	08005653 	.word	0x08005653
 8005404:	08005653 	.word	0x08005653
 8005408:	08005653 	.word	0x08005653
 800540c:	08005653 	.word	0x08005653
 8005410:	08005447 	.word	0x08005447
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005414:	4b94      	ldr	r3, [pc, #592]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b00      	cmp	r3, #0
 800541e:	d009      	beq.n	8005434 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005420:	4b91      	ldr	r3, [pc, #580]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	08db      	lsrs	r3, r3, #3
 8005426:	f003 0303 	and.w	r3, r3, #3
 800542a:	4a90      	ldr	r2, [pc, #576]	@ (800566c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800542c:	fa22 f303 	lsr.w	r3, r2, r3
 8005430:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005432:	e111      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005434:	4b8d      	ldr	r3, [pc, #564]	@ (800566c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005436:	61bb      	str	r3, [r7, #24]
      break;
 8005438:	e10e      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800543a:	4b8d      	ldr	r3, [pc, #564]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800543c:	61bb      	str	r3, [r7, #24]
      break;
 800543e:	e10b      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005440:	4b8c      	ldr	r3, [pc, #560]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005442:	61bb      	str	r3, [r7, #24]
      break;
 8005444:	e108      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005446:	4b88      	ldr	r3, [pc, #544]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005450:	4b85      	ldr	r3, [pc, #532]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005454:	091b      	lsrs	r3, r3, #4
 8005456:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800545a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800545c:	4b82      	ldr	r3, [pc, #520]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800545e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005466:	4b80      	ldr	r3, [pc, #512]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005468:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800546a:	08db      	lsrs	r3, r3, #3
 800546c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	ee07 3a90 	vmov	s15, r3
 800547a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	f000 80e1 	beq.w	800564c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b02      	cmp	r3, #2
 800548e:	f000 8083 	beq.w	8005598 <HAL_RCC_GetSysClockFreq+0x204>
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	2b02      	cmp	r3, #2
 8005496:	f200 80a1 	bhi.w	80055dc <HAL_RCC_GetSysClockFreq+0x248>
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0x114>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d056      	beq.n	8005554 <HAL_RCC_GetSysClockFreq+0x1c0>
 80054a6:	e099      	b.n	80055dc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80054a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d02d      	beq.n	8005510 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054b4:	4b6c      	ldr	r3, [pc, #432]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	08db      	lsrs	r3, r3, #3
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	4a6b      	ldr	r2, [pc, #428]	@ (800566c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80054c0:	fa22 f303 	lsr.w	r3, r2, r3
 80054c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	ee07 3a90 	vmov	s15, r3
 80054cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054de:	4b62      	ldr	r3, [pc, #392]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80054f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005678 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800550e:	e087      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800567c <HAL_RCC_GetSysClockFreq+0x2e8>
 800551e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005522:	4b51      	ldr	r3, [pc, #324]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005532:	ed97 6a02 	vldr	s12, [r7, #8]
 8005536:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005678 <HAL_RCC_GetSysClockFreq+0x2e4>
 800553a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005552:	e065      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005680 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005566:	4b40      	ldr	r3, [pc, #256]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800556a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005576:	ed97 6a02 	vldr	s12, [r7, #8]
 800557a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005678 <HAL_RCC_GetSysClockFreq+0x2e4>
 800557e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800558a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005596:	e043      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	ee07 3a90 	vmov	s15, r3
 800559e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005684 <HAL_RCC_GetSysClockFreq+0x2f0>
 80055a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055b2:	ee07 3a90 	vmov	s15, r3
 80055b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80055be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005678 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055da:	e021      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005680 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055f6:	ee07 3a90 	vmov	s15, r3
 80055fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005602:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005678 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800560a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800560e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800561a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800561e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005620:	4b11      	ldr	r3, [pc, #68]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005624:	0a5b      	lsrs	r3, r3, #9
 8005626:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800562a:	3301      	adds	r3, #1
 800562c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	ee07 3a90 	vmov	s15, r3
 8005634:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005638:	edd7 6a07 	vldr	s13, [r7, #28]
 800563c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005644:	ee17 3a90 	vmov	r3, s15
 8005648:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800564a:	e005      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	61bb      	str	r3, [r7, #24]
      break;
 8005650:	e002      	b.n	8005658 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005652:	4b07      	ldr	r3, [pc, #28]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005654:	61bb      	str	r3, [r7, #24]
      break;
 8005656:	bf00      	nop
  }

  return sysclockfreq;
 8005658:	69bb      	ldr	r3, [r7, #24]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3724      	adds	r7, #36	@ 0x24
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
 8005666:	bf00      	nop
 8005668:	58024400 	.word	0x58024400
 800566c:	03d09000 	.word	0x03d09000
 8005670:	003d0900 	.word	0x003d0900
 8005674:	007a1200 	.word	0x007a1200
 8005678:	46000000 	.word	0x46000000
 800567c:	4c742400 	.word	0x4c742400
 8005680:	4a742400 	.word	0x4a742400
 8005684:	4af42400 	.word	0x4af42400

08005688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800568e:	f7ff fe81 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8005692:	4602      	mov	r2, r0
 8005694:	4b10      	ldr	r3, [pc, #64]	@ (80056d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	0a1b      	lsrs	r3, r3, #8
 800569a:	f003 030f 	and.w	r3, r3, #15
 800569e:	490f      	ldr	r1, [pc, #60]	@ (80056dc <HAL_RCC_GetHCLKFreq+0x54>)
 80056a0:	5ccb      	ldrb	r3, [r1, r3]
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	fa22 f303 	lsr.w	r3, r2, r3
 80056aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80056ac:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	f003 030f 	and.w	r3, r3, #15
 80056b4:	4a09      	ldr	r2, [pc, #36]	@ (80056dc <HAL_RCC_GetHCLKFreq+0x54>)
 80056b6:	5cd3      	ldrb	r3, [r2, r3]
 80056b8:	f003 031f 	and.w	r3, r3, #31
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	fa22 f303 	lsr.w	r3, r2, r3
 80056c2:	4a07      	ldr	r2, [pc, #28]	@ (80056e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80056c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80056c6:	4a07      	ldr	r2, [pc, #28]	@ (80056e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80056cc:	4b04      	ldr	r3, [pc, #16]	@ (80056e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80056ce:	681b      	ldr	r3, [r3, #0]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	58024400 	.word	0x58024400
 80056dc:	0800af50 	.word	0x0800af50
 80056e0:	24000008 	.word	0x24000008
 80056e4:	24000004 	.word	0x24000004

080056e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80056ec:	f7ff ffcc 	bl	8005688 <HAL_RCC_GetHCLKFreq>
 80056f0:	4602      	mov	r2, r0
 80056f2:	4b06      	ldr	r3, [pc, #24]	@ (800570c <HAL_RCC_GetPCLK1Freq+0x24>)
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	091b      	lsrs	r3, r3, #4
 80056f8:	f003 0307 	and.w	r3, r3, #7
 80056fc:	4904      	ldr	r1, [pc, #16]	@ (8005710 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056fe:	5ccb      	ldrb	r3, [r1, r3]
 8005700:	f003 031f 	and.w	r3, r3, #31
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd80      	pop	{r7, pc}
 800570c:	58024400 	.word	0x58024400
 8005710:	0800af50 	.word	0x0800af50

08005714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005718:	f7ff ffb6 	bl	8005688 <HAL_RCC_GetHCLKFreq>
 800571c:	4602      	mov	r2, r0
 800571e:	4b06      	ldr	r3, [pc, #24]	@ (8005738 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	0a1b      	lsrs	r3, r3, #8
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	4904      	ldr	r1, [pc, #16]	@ (800573c <HAL_RCC_GetPCLK2Freq+0x28>)
 800572a:	5ccb      	ldrb	r3, [r1, r3]
 800572c:	f003 031f 	and.w	r3, r3, #31
 8005730:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005734:	4618      	mov	r0, r3
 8005736:	bd80      	pop	{r7, pc}
 8005738:	58024400 	.word	0x58024400
 800573c:	0800af50 	.word	0x0800af50

08005740 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005744:	b0ca      	sub	sp, #296	@ 0x128
 8005746:	af00      	add	r7, sp, #0
 8005748:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800574c:	2300      	movs	r3, #0
 800574e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005752:	2300      	movs	r3, #0
 8005754:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800575c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005760:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005764:	2500      	movs	r5, #0
 8005766:	ea54 0305 	orrs.w	r3, r4, r5
 800576a:	d049      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800576c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005770:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005772:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005776:	d02f      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005778:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800577c:	d828      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800577e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005782:	d01a      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005784:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005788:	d822      	bhi.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800578e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005792:	d007      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005794:	e01c      	b.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005796:	4bb8      	ldr	r3, [pc, #736]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800579a:	4ab7      	ldr	r2, [pc, #732]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800579c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80057a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057a2:	e01a      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80057a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a8:	3308      	adds	r3, #8
 80057aa:	2102      	movs	r1, #2
 80057ac:	4618      	mov	r0, r3
 80057ae:	f001 fc8f 	bl	80070d0 <RCCEx_PLL2_Config>
 80057b2:	4603      	mov	r3, r0
 80057b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057b8:	e00f      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80057ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057be:	3328      	adds	r3, #40	@ 0x28
 80057c0:	2102      	movs	r1, #2
 80057c2:	4618      	mov	r0, r3
 80057c4:	f001 fd36 	bl	8007234 <RCCEx_PLL3_Config>
 80057c8:	4603      	mov	r3, r0
 80057ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80057ce:	e004      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057d6:	e000      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80057d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10a      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80057e2:	4ba5      	ldr	r3, [pc, #660]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80057f0:	4aa1      	ldr	r2, [pc, #644]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057f2:	430b      	orrs	r3, r1
 80057f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80057f6:	e003      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800580c:	f04f 0900 	mov.w	r9, #0
 8005810:	ea58 0309 	orrs.w	r3, r8, r9
 8005814:	d047      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800581c:	2b04      	cmp	r3, #4
 800581e:	d82a      	bhi.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005820:	a201      	add	r2, pc, #4	@ (adr r2, 8005828 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	0800583d 	.word	0x0800583d
 800582c:	0800584b 	.word	0x0800584b
 8005830:	08005861 	.word	0x08005861
 8005834:	0800587f 	.word	0x0800587f
 8005838:	0800587f 	.word	0x0800587f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800583c:	4b8e      	ldr	r3, [pc, #568]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800583e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005840:	4a8d      	ldr	r2, [pc, #564]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005848:	e01a      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800584a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800584e:	3308      	adds	r3, #8
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f001 fc3c 	bl	80070d0 <RCCEx_PLL2_Config>
 8005858:	4603      	mov	r3, r0
 800585a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800585e:	e00f      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005864:	3328      	adds	r3, #40	@ 0x28
 8005866:	2100      	movs	r1, #0
 8005868:	4618      	mov	r0, r3
 800586a:	f001 fce3 	bl	8007234 <RCCEx_PLL3_Config>
 800586e:	4603      	mov	r3, r0
 8005870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005874:	e004      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800587c:	e000      	b.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800587e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005884:	2b00      	cmp	r3, #0
 8005886:	d10a      	bne.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005888:	4b7b      	ldr	r3, [pc, #492]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800588a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800588c:	f023 0107 	bic.w	r1, r3, #7
 8005890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005896:	4a78      	ldr	r2, [pc, #480]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005898:	430b      	orrs	r3, r1
 800589a:	6513      	str	r3, [r2, #80]	@ 0x50
 800589c:	e003      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800589e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80058a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80058b2:	f04f 0b00 	mov.w	fp, #0
 80058b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80058ba:	d04c      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80058bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80058c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058c6:	d030      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80058c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058cc:	d829      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80058d0:	d02d      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80058d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80058d4:	d825      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058d6:	2b80      	cmp	r3, #128	@ 0x80
 80058d8:	d018      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80058da:	2b80      	cmp	r3, #128	@ 0x80
 80058dc:	d821      	bhi.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80058e2:	2b40      	cmp	r3, #64	@ 0x40
 80058e4:	d007      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80058e6:	e01c      	b.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058e8:	4b63      	ldr	r3, [pc, #396]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ec:	4a62      	ldr	r2, [pc, #392]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80058ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80058f4:	e01c      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fa:	3308      	adds	r3, #8
 80058fc:	2100      	movs	r1, #0
 80058fe:	4618      	mov	r0, r3
 8005900:	f001 fbe6 	bl	80070d0 <RCCEx_PLL2_Config>
 8005904:	4603      	mov	r3, r0
 8005906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800590a:	e011      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800590c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005910:	3328      	adds	r3, #40	@ 0x28
 8005912:	2100      	movs	r1, #0
 8005914:	4618      	mov	r0, r3
 8005916:	f001 fc8d 	bl	8007234 <RCCEx_PLL3_Config>
 800591a:	4603      	mov	r3, r0
 800591c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005920:	e006      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005928:	e002      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800592a:	bf00      	nop
 800592c:	e000      	b.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800592e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005930:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005938:	4b4f      	ldr	r3, [pc, #316]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800593a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800593c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005946:	4a4c      	ldr	r2, [pc, #304]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005948:	430b      	orrs	r3, r1
 800594a:	6513      	str	r3, [r2, #80]	@ 0x50
 800594c:	e003      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800594e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005952:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005962:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005966:	2300      	movs	r3, #0
 8005968:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800596c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005970:	460b      	mov	r3, r1
 8005972:	4313      	orrs	r3, r2
 8005974:	d053      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800597e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005982:	d035      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005984:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005988:	d82e      	bhi.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800598a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800598e:	d031      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005990:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005994:	d828      	bhi.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005996:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800599a:	d01a      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800599c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80059a0:	d822      	bhi.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80059a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80059aa:	d007      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80059ac:	e01c      	b.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059ae:	4b32      	ldr	r3, [pc, #200]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b2:	4a31      	ldr	r2, [pc, #196]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80059b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059ba:	e01c      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c0:	3308      	adds	r3, #8
 80059c2:	2100      	movs	r1, #0
 80059c4:	4618      	mov	r0, r3
 80059c6:	f001 fb83 	bl	80070d0 <RCCEx_PLL2_Config>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80059d0:	e011      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d6:	3328      	adds	r3, #40	@ 0x28
 80059d8:	2100      	movs	r1, #0
 80059da:	4618      	mov	r0, r3
 80059dc:	f001 fc2a 	bl	8007234 <RCCEx_PLL3_Config>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059e6:	e006      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059ee:	e002      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059f0:	bf00      	nop
 80059f2:	e000      	b.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80059f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10b      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80059fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a02:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a0e:	4a1a      	ldr	r2, [pc, #104]	@ (8005a78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a14:	e003      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005a2a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005a34:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	d056      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005a46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a4a:	d038      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005a4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a50:	d831      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a56:	d034      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005a58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005a5c:	d82b      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a62:	d01d      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005a64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a68:	d825      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d006      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005a6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a72:	d00a      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005a74:	e01f      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005a76:	bf00      	nop
 8005a78:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a7c:	4ba2      	ldr	r3, [pc, #648]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a80:	4aa1      	ldr	r2, [pc, #644]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005a88:	e01c      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8e:	3308      	adds	r3, #8
 8005a90:	2100      	movs	r1, #0
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 fb1c 	bl	80070d0 <RCCEx_PLL2_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005a9e:	e011      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa4:	3328      	adds	r3, #40	@ 0x28
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 fbc3 	bl	8007234 <RCCEx_PLL3_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005ab4:	e006      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005abc:	e002      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005abe:	bf00      	nop
 8005ac0:	e000      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10b      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005acc:	4b8e      	ldr	r3, [pc, #568]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005adc:	4a8a      	ldr	r2, [pc, #552]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ae2:	e003      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005af8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005afc:	2300      	movs	r3, #0
 8005afe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005b02:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005b06:	460b      	mov	r3, r1
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	d03a      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b12:	2b30      	cmp	r3, #48	@ 0x30
 8005b14:	d01f      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005b16:	2b30      	cmp	r3, #48	@ 0x30
 8005b18:	d819      	bhi.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b1a:	2b20      	cmp	r3, #32
 8005b1c:	d00c      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005b1e:	2b20      	cmp	r3, #32
 8005b20:	d815      	bhi.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d019      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005b26:	2b10      	cmp	r3, #16
 8005b28:	d111      	bne.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b2a:	4b77      	ldr	r3, [pc, #476]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b2e:	4a76      	ldr	r2, [pc, #472]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b36:	e011      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b3c:	3308      	adds	r3, #8
 8005b3e:	2102      	movs	r1, #2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f001 fac5 	bl	80070d0 <RCCEx_PLL2_Config>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005b4c:	e006      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b54:	e002      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b56:	bf00      	nop
 8005b58:	e000      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10a      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b64:	4b68      	ldr	r3, [pc, #416]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b72:	4a65      	ldr	r2, [pc, #404]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005b74:	430b      	orrs	r3, r1
 8005b76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005b78:	e003      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005b8e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005b92:	2300      	movs	r3, #0
 8005b94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005b98:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	d051      	beq.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ba8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bac:	d035      	beq.n	8005c1a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005bae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005bb2:	d82e      	bhi.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bb8:	d031      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005bba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005bbe:	d828      	bhi.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bc4:	d01a      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005bca:	d822      	bhi.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d003      	beq.n	8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8005bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bd4:	d007      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8005bd6:	e01c      	b.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bdc:	4a4a      	ldr	r2, [pc, #296]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005be4:	e01c      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bea:	3308      	adds	r3, #8
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 fa6e 	bl	80070d0 <RCCEx_PLL2_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005bfa:	e011      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c00:	3328      	adds	r3, #40	@ 0x28
 8005c02:	2100      	movs	r1, #0
 8005c04:	4618      	mov	r0, r3
 8005c06:	f001 fb15 	bl	8007234 <RCCEx_PLL3_Config>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005c10:	e006      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c18:	e002      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c1a:	bf00      	nop
 8005c1c:	e000      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005c28:	4b37      	ldr	r3, [pc, #220]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c2c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c36:	4a34      	ldr	r2, [pc, #208]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005c38:	430b      	orrs	r3, r1
 8005c3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c3c:	e003      	b.n	8005c46 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c56:	2300      	movs	r3, #0
 8005c58:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005c5c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005c60:	460b      	mov	r3, r1
 8005c62:	4313      	orrs	r3, r2
 8005c64:	d056      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005c6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c70:	d033      	beq.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005c72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c76:	d82c      	bhi.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c7c:	d02f      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005c7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c82:	d826      	bhi.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c88:	d02b      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005c8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005c8e:	d820      	bhi.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c94:	d012      	beq.n	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005c96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c9a:	d81a      	bhi.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d022      	beq.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ca4:	d115      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005caa:	3308      	adds	r3, #8
 8005cac:	2101      	movs	r1, #1
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f001 fa0e 	bl	80070d0 <RCCEx_PLL2_Config>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cba:	e015      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc0:	3328      	adds	r3, #40	@ 0x28
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f001 fab5 	bl	8007234 <RCCEx_PLL3_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005cd0:	e00a      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cd8:	e006      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cda:	bf00      	nop
 8005cdc:	e004      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005cde:	bf00      	nop
 8005ce0:	e002      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ce2:	bf00      	nop
 8005ce4:	e000      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10d      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005cf0:	4b05      	ldr	r3, [pc, #20]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cfe:	4a02      	ldr	r2, [pc, #8]	@ (8005d08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005d00:	430b      	orrs	r3, r1
 8005d02:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d04:	e006      	b.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005d06:	bf00      	nop
 8005d08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d1c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005d20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d24:	2300      	movs	r3, #0
 8005d26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d2a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	4313      	orrs	r3, r2
 8005d32:	d055      	beq.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d40:	d033      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005d42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d46:	d82c      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d4c:	d02f      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d52:	d826      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d58:	d02b      	beq.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005d5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005d5e:	d820      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d64:	d012      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005d66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d6a:	d81a      	bhi.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d022      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005d70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d74:	d115      	bne.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f001 f9a6 	bl	80070d0 <RCCEx_PLL2_Config>
 8005d84:	4603      	mov	r3, r0
 8005d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005d8a:	e015      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d90:	3328      	adds	r3, #40	@ 0x28
 8005d92:	2101      	movs	r1, #1
 8005d94:	4618      	mov	r0, r3
 8005d96:	f001 fa4d 	bl	8007234 <RCCEx_PLL3_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005da0:	e00a      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005da8:	e006      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005daa:	bf00      	nop
 8005dac:	e004      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005dae:	bf00      	nop
 8005db0:	e002      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005db2:	bf00      	nop
 8005db4:	e000      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005db6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005db8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005dc0:	4ba3      	ldr	r3, [pc, #652]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dc4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005dd0:	4a9f      	ldr	r2, [pc, #636]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005dd6:	e003      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ddc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005df0:	2300      	movs	r3, #0
 8005df2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	d037      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e0a:	d00e      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005e0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e10:	d816      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d018      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005e16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e1a:	d111      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e1c:	4b8c      	ldr	r3, [pc, #560]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e20:	4a8b      	ldr	r2, [pc, #556]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e28:	e00f      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e2e:	3308      	adds	r3, #8
 8005e30:	2101      	movs	r1, #1
 8005e32:	4618      	mov	r0, r3
 8005e34:	f001 f94c 	bl	80070d0 <RCCEx_PLL2_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005e3e:	e004      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e46:	e000      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005e48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10a      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005e52:	4b7f      	ldr	r3, [pc, #508]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e60:	4a7b      	ldr	r2, [pc, #492]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e62:	430b      	orrs	r3, r1
 8005e64:	6513      	str	r3, [r2, #80]	@ 0x50
 8005e66:	e003      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e80:	2300      	movs	r3, #0
 8005e82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005e86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	d039      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d81c      	bhi.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005edd 	.word	0x08005edd
 8005ea4:	08005eb1 	.word	0x08005eb1
 8005ea8:	08005ebf 	.word	0x08005ebf
 8005eac:	08005edd 	.word	0x08005edd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005eb0:	4b67      	ldr	r3, [pc, #412]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb4:	4a66      	ldr	r2, [pc, #408]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ebc:	e00f      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ec2:	3308      	adds	r3, #8
 8005ec4:	2102      	movs	r1, #2
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f001 f902 	bl	80070d0 <RCCEx_PLL2_Config>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005ed2:	e004      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005eda:	e000      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005edc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10a      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005ee6:	4b5a      	ldr	r3, [pc, #360]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eea:	f023 0103 	bic.w	r1, r3, #3
 8005eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ef4:	4a56      	ldr	r2, [pc, #344]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005efa:	e003      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005efc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005f10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f14:	2300      	movs	r3, #0
 8005f16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4313      	orrs	r3, r2
 8005f22:	f000 809f 	beq.w	8006064 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f26:	4b4b      	ldr	r3, [pc, #300]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a4a      	ldr	r2, [pc, #296]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005f30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f32:	f7fc f8f7 	bl	8002124 <HAL_GetTick>
 8005f36:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f3a:	e00b      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f3c:	f7fc f8f2 	bl	8002124 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	2b64      	cmp	r3, #100	@ 0x64
 8005f4a:	d903      	bls.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f52:	e005      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f54:	4b3f      	ldr	r3, [pc, #252]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d0ed      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005f60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d179      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005f68:	4b39      	ldr	r3, [pc, #228]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005f74:	4053      	eors	r3, r2
 8005f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d015      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005f7e:	4b34      	ldr	r3, [pc, #208]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f8a:	4b31      	ldr	r3, [pc, #196]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f8e:	4a30      	ldr	r2, [pc, #192]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f94:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f96:	4b2e      	ldr	r3, [pc, #184]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005fa0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005fa2:	4a2b      	ldr	r2, [pc, #172]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005fa8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fb6:	d118      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb8:	f7fc f8b4 	bl	8002124 <HAL_GetTick>
 8005fbc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fc0:	e00d      	b.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fc2:	f7fc f8af 	bl	8002124 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005fcc:	1ad2      	subs	r2, r2, r3
 8005fce:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d903      	bls.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005fdc:	e005      	b.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fde:	4b1c      	ldr	r3, [pc, #112]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe2:	f003 0302 	and.w	r3, r3, #2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0eb      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d129      	bne.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ff6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ffe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006002:	d10e      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006004:	4b12      	ldr	r3, [pc, #72]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800600c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006010:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006014:	091a      	lsrs	r2, r3, #4
 8006016:	4b10      	ldr	r3, [pc, #64]	@ (8006058 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006018:	4013      	ands	r3, r2
 800601a:	4a0d      	ldr	r2, [pc, #52]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800601c:	430b      	orrs	r3, r1
 800601e:	6113      	str	r3, [r2, #16]
 8006020:	e005      	b.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006022:	4b0b      	ldr	r3, [pc, #44]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	4a0a      	ldr	r2, [pc, #40]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006028:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800602c:	6113      	str	r3, [r2, #16]
 800602e:	4b08      	ldr	r3, [pc, #32]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006030:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006036:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800603a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800603e:	4a04      	ldr	r2, [pc, #16]	@ (8006050 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006040:	430b      	orrs	r3, r1
 8006042:	6713      	str	r3, [r2, #112]	@ 0x70
 8006044:	e00e      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800604e:	e009      	b.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006050:	58024400 	.word	0x58024400
 8006054:	58024800 	.word	0x58024800
 8006058:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006060:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606c:	f002 0301 	and.w	r3, r2, #1
 8006070:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006074:	2300      	movs	r3, #0
 8006076:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800607a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800607e:	460b      	mov	r3, r1
 8006080:	4313      	orrs	r3, r2
 8006082:	f000 8089 	beq.w	8006198 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8006086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800608a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800608c:	2b28      	cmp	r3, #40	@ 0x28
 800608e:	d86b      	bhi.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8006090:	a201      	add	r2, pc, #4	@ (adr r2, 8006098 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8006092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006096:	bf00      	nop
 8006098:	08006171 	.word	0x08006171
 800609c:	08006169 	.word	0x08006169
 80060a0:	08006169 	.word	0x08006169
 80060a4:	08006169 	.word	0x08006169
 80060a8:	08006169 	.word	0x08006169
 80060ac:	08006169 	.word	0x08006169
 80060b0:	08006169 	.word	0x08006169
 80060b4:	08006169 	.word	0x08006169
 80060b8:	0800613d 	.word	0x0800613d
 80060bc:	08006169 	.word	0x08006169
 80060c0:	08006169 	.word	0x08006169
 80060c4:	08006169 	.word	0x08006169
 80060c8:	08006169 	.word	0x08006169
 80060cc:	08006169 	.word	0x08006169
 80060d0:	08006169 	.word	0x08006169
 80060d4:	08006169 	.word	0x08006169
 80060d8:	08006153 	.word	0x08006153
 80060dc:	08006169 	.word	0x08006169
 80060e0:	08006169 	.word	0x08006169
 80060e4:	08006169 	.word	0x08006169
 80060e8:	08006169 	.word	0x08006169
 80060ec:	08006169 	.word	0x08006169
 80060f0:	08006169 	.word	0x08006169
 80060f4:	08006169 	.word	0x08006169
 80060f8:	08006171 	.word	0x08006171
 80060fc:	08006169 	.word	0x08006169
 8006100:	08006169 	.word	0x08006169
 8006104:	08006169 	.word	0x08006169
 8006108:	08006169 	.word	0x08006169
 800610c:	08006169 	.word	0x08006169
 8006110:	08006169 	.word	0x08006169
 8006114:	08006169 	.word	0x08006169
 8006118:	08006171 	.word	0x08006171
 800611c:	08006169 	.word	0x08006169
 8006120:	08006169 	.word	0x08006169
 8006124:	08006169 	.word	0x08006169
 8006128:	08006169 	.word	0x08006169
 800612c:	08006169 	.word	0x08006169
 8006130:	08006169 	.word	0x08006169
 8006134:	08006169 	.word	0x08006169
 8006138:	08006171 	.word	0x08006171
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800613c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006140:	3308      	adds	r3, #8
 8006142:	2101      	movs	r1, #1
 8006144:	4618      	mov	r0, r3
 8006146:	f000 ffc3 	bl	80070d0 <RCCEx_PLL2_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006150:	e00f      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006156:	3328      	adds	r3, #40	@ 0x28
 8006158:	2101      	movs	r1, #1
 800615a:	4618      	mov	r0, r3
 800615c:	f001 f86a 	bl	8007234 <RCCEx_PLL3_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006166:	e004      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800616e:	e000      	b.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8006170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10a      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800617a:	4bbf      	ldr	r3, [pc, #764]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800617c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800617e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006182:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006186:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006188:	4abb      	ldr	r2, [pc, #748]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800618a:	430b      	orrs	r3, r1
 800618c:	6553      	str	r3, [r2, #84]	@ 0x54
 800618e:	e003      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006194:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f002 0302 	and.w	r3, r2, #2
 80061a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061a8:	2300      	movs	r3, #0
 80061aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80061ae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80061b2:	460b      	mov	r3, r1
 80061b4:	4313      	orrs	r3, r2
 80061b6:	d041      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80061b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80061be:	2b05      	cmp	r3, #5
 80061c0:	d824      	bhi.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80061c2:	a201      	add	r2, pc, #4	@ (adr r2, 80061c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80061c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c8:	08006215 	.word	0x08006215
 80061cc:	080061e1 	.word	0x080061e1
 80061d0:	080061f7 	.word	0x080061f7
 80061d4:	08006215 	.word	0x08006215
 80061d8:	08006215 	.word	0x08006215
 80061dc:	08006215 	.word	0x08006215
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e4:	3308      	adds	r3, #8
 80061e6:	2101      	movs	r1, #1
 80061e8:	4618      	mov	r0, r3
 80061ea:	f000 ff71 	bl	80070d0 <RCCEx_PLL2_Config>
 80061ee:	4603      	mov	r3, r0
 80061f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80061f4:	e00f      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fa:	3328      	adds	r3, #40	@ 0x28
 80061fc:	2101      	movs	r1, #1
 80061fe:	4618      	mov	r0, r3
 8006200:	f001 f818 	bl	8007234 <RCCEx_PLL3_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800620a:	e004      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006212:	e000      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8006214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10a      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800621e:	4b96      	ldr	r3, [pc, #600]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006222:	f023 0107 	bic.w	r1, r3, #7
 8006226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800622c:	4a92      	ldr	r2, [pc, #584]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800622e:	430b      	orrs	r3, r1
 8006230:	6553      	str	r3, [r2, #84]	@ 0x54
 8006232:	e003      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006234:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006238:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800623c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	f002 0304 	and.w	r3, r2, #4
 8006248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800624c:	2300      	movs	r3, #0
 800624e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006252:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006256:	460b      	mov	r3, r1
 8006258:	4313      	orrs	r3, r2
 800625a:	d044      	beq.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800625c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006260:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006264:	2b05      	cmp	r3, #5
 8006266:	d825      	bhi.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006268:	a201      	add	r2, pc, #4	@ (adr r2, 8006270 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	080062bd 	.word	0x080062bd
 8006274:	08006289 	.word	0x08006289
 8006278:	0800629f 	.word	0x0800629f
 800627c:	080062bd 	.word	0x080062bd
 8006280:	080062bd 	.word	0x080062bd
 8006284:	080062bd 	.word	0x080062bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628c:	3308      	adds	r3, #8
 800628e:	2101      	movs	r1, #1
 8006290:	4618      	mov	r0, r3
 8006292:	f000 ff1d 	bl	80070d0 <RCCEx_PLL2_Config>
 8006296:	4603      	mov	r3, r0
 8006298:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800629c:	e00f      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800629e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a2:	3328      	adds	r3, #40	@ 0x28
 80062a4:	2101      	movs	r1, #1
 80062a6:	4618      	mov	r0, r3
 80062a8:	f000 ffc4 	bl	8007234 <RCCEx_PLL3_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80062b2:	e004      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062ba:	e000      	b.n	80062be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80062bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10b      	bne.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80062c6:	4b6c      	ldr	r3, [pc, #432]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062ca:	f023 0107 	bic.w	r1, r3, #7
 80062ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80062d6:	4a68      	ldr	r2, [pc, #416]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80062d8:	430b      	orrs	r3, r1
 80062da:	6593      	str	r3, [r2, #88]	@ 0x58
 80062dc:	e003      	b.n	80062e6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80062e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ee:	f002 0320 	and.w	r3, r2, #32
 80062f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062f6:	2300      	movs	r3, #0
 80062f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006300:	460b      	mov	r3, r1
 8006302:	4313      	orrs	r3, r2
 8006304:	d055      	beq.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800630e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006312:	d033      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006314:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006318:	d82c      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800631a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800631e:	d02f      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006324:	d826      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006326:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800632a:	d02b      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800632c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006330:	d820      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006332:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006336:	d012      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800633c:	d81a      	bhi.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d022      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006342:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006346:	d115      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634c:	3308      	adds	r3, #8
 800634e:	2100      	movs	r1, #0
 8006350:	4618      	mov	r0, r3
 8006352:	f000 febd 	bl	80070d0 <RCCEx_PLL2_Config>
 8006356:	4603      	mov	r3, r0
 8006358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800635c:	e015      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800635e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006362:	3328      	adds	r3, #40	@ 0x28
 8006364:	2102      	movs	r1, #2
 8006366:	4618      	mov	r0, r3
 8006368:	f000 ff64 	bl	8007234 <RCCEx_PLL3_Config>
 800636c:	4603      	mov	r3, r0
 800636e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006372:	e00a      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800637a:	e006      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800637c:	bf00      	nop
 800637e:	e004      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006380:	bf00      	nop
 8006382:	e002      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006384:	bf00      	nop
 8006386:	e000      	b.n	800638a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800638a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10b      	bne.n	80063aa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006392:	4b39      	ldr	r3, [pc, #228]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006396:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a2:	4a35      	ldr	r2, [pc, #212]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80063a4:	430b      	orrs	r3, r1
 80063a6:	6553      	str	r3, [r2, #84]	@ 0x54
 80063a8:	e003      	b.n	80063b2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80063b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80063be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80063c2:	2300      	movs	r3, #0
 80063c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80063c8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80063cc:	460b      	mov	r3, r1
 80063ce:	4313      	orrs	r3, r2
 80063d0:	d058      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80063d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063da:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80063de:	d033      	beq.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80063e0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80063e4:	d82c      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ea:	d02f      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80063ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063f0:	d826      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063f6:	d02b      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80063f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063fc:	d820      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80063fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006402:	d012      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006404:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006408:	d81a      	bhi.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800640a:	2b00      	cmp	r3, #0
 800640c:	d022      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800640e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006412:	d115      	bne.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006418:	3308      	adds	r3, #8
 800641a:	2100      	movs	r1, #0
 800641c:	4618      	mov	r0, r3
 800641e:	f000 fe57 	bl	80070d0 <RCCEx_PLL2_Config>
 8006422:	4603      	mov	r3, r0
 8006424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006428:	e015      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800642a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800642e:	3328      	adds	r3, #40	@ 0x28
 8006430:	2102      	movs	r1, #2
 8006432:	4618      	mov	r0, r3
 8006434:	f000 fefe 	bl	8007234 <RCCEx_PLL3_Config>
 8006438:	4603      	mov	r3, r0
 800643a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800643e:	e00a      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006446:	e006      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006448:	bf00      	nop
 800644a:	e004      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800644c:	bf00      	nop
 800644e:	e002      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006450:	bf00      	nop
 8006452:	e000      	b.n	8006456 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006454:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800645a:	2b00      	cmp	r3, #0
 800645c:	d10e      	bne.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800645e:	4b06      	ldr	r3, [pc, #24]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006462:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800646e:	4a02      	ldr	r2, [pc, #8]	@ (8006478 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006470:	430b      	orrs	r3, r1
 8006472:	6593      	str	r3, [r2, #88]	@ 0x58
 8006474:	e006      	b.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8006476:	bf00      	nop
 8006478:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006480:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006490:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006494:	2300      	movs	r3, #0
 8006496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800649a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800649e:	460b      	mov	r3, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	d055      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80064a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064ac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80064b0:	d033      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80064b2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80064b6:	d82c      	bhi.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064bc:	d02f      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80064be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064c2:	d826      	bhi.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064c4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80064c8:	d02b      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80064ca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80064ce:	d820      	bhi.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064d4:	d012      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80064d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064da:	d81a      	bhi.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d022      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80064e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80064e4:	d115      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ea:	3308      	adds	r3, #8
 80064ec:	2100      	movs	r1, #0
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fdee 	bl	80070d0 <RCCEx_PLL2_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80064fa:	e015      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006500:	3328      	adds	r3, #40	@ 0x28
 8006502:	2102      	movs	r1, #2
 8006504:	4618      	mov	r0, r3
 8006506:	f000 fe95 	bl	8007234 <RCCEx_PLL3_Config>
 800650a:	4603      	mov	r3, r0
 800650c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006510:	e00a      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006518:	e006      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800651a:	bf00      	nop
 800651c:	e004      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800651e:	bf00      	nop
 8006520:	e002      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006522:	bf00      	nop
 8006524:	e000      	b.n	8006528 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006526:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006528:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10b      	bne.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006530:	4ba1      	ldr	r3, [pc, #644]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006534:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006540:	4a9d      	ldr	r2, [pc, #628]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006542:	430b      	orrs	r3, r1
 8006544:	6593      	str	r3, [r2, #88]	@ 0x58
 8006546:	e003      	b.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800654c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f002 0308 	and.w	r3, r2, #8
 800655c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006560:	2300      	movs	r3, #0
 8006562:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006566:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800656a:	460b      	mov	r3, r1
 800656c:	4313      	orrs	r3, r2
 800656e:	d01e      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006574:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800657c:	d10c      	bne.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800657e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006582:	3328      	adds	r3, #40	@ 0x28
 8006584:	2102      	movs	r1, #2
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fe54 	bl	8007234 <RCCEx_PLL3_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006598:	4b87      	ldr	r3, [pc, #540]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800659a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800659c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065a8:	4a83      	ldr	r2, [pc, #524]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065aa:	430b      	orrs	r3, r1
 80065ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80065ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	f002 0310 	and.w	r3, r2, #16
 80065ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065be:	2300      	movs	r3, #0
 80065c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80065c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80065c8:	460b      	mov	r3, r1
 80065ca:	4313      	orrs	r3, r2
 80065cc:	d01e      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80065ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80065d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065da:	d10c      	bne.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065e0:	3328      	adds	r3, #40	@ 0x28
 80065e2:	2102      	movs	r1, #2
 80065e4:	4618      	mov	r0, r3
 80065e6:	f000 fe25 	bl	8007234 <RCCEx_PLL3_Config>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d002      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80065f6:	4b70      	ldr	r3, [pc, #448]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80065f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80065fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006602:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006606:	4a6c      	ldr	r2, [pc, #432]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006608:	430b      	orrs	r3, r1
 800660a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800660c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006614:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006618:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800661c:	2300      	movs	r3, #0
 800661e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006622:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006626:	460b      	mov	r3, r1
 8006628:	4313      	orrs	r3, r2
 800662a:	d03e      	beq.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800662c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006630:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006634:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006638:	d022      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800663a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800663e:	d81b      	bhi.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006640:	2b00      	cmp	r3, #0
 8006642:	d003      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006648:	d00b      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800664a:	e015      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800664c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006650:	3308      	adds	r3, #8
 8006652:	2100      	movs	r1, #0
 8006654:	4618      	mov	r0, r3
 8006656:	f000 fd3b 	bl	80070d0 <RCCEx_PLL2_Config>
 800665a:	4603      	mov	r3, r0
 800665c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006660:	e00f      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006666:	3328      	adds	r3, #40	@ 0x28
 8006668:	2102      	movs	r1, #2
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fde2 	bl	8007234 <RCCEx_PLL3_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006676:	e004      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800667e:	e000      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006680:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800668a:	4b4b      	ldr	r3, [pc, #300]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800668c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800668e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006696:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800669a:	4a47      	ldr	r2, [pc, #284]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800669c:	430b      	orrs	r3, r1
 800669e:	6593      	str	r3, [r2, #88]	@ 0x58
 80066a0:	e003      	b.n	80066aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80066b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066b8:	2300      	movs	r3, #0
 80066ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80066c0:	460b      	mov	r3, r1
 80066c2:	4313      	orrs	r3, r2
 80066c4:	d03b      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80066c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066d2:	d01f      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80066d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80066d8:	d818      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80066da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066de:	d003      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80066e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80066e4:	d007      	beq.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80066e6:	e011      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e8:	4b33      	ldr	r3, [pc, #204]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ec:	4a32      	ldr	r2, [pc, #200]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80066ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80066f4:	e00f      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80066f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066fa:	3328      	adds	r3, #40	@ 0x28
 80066fc:	2101      	movs	r1, #1
 80066fe:	4618      	mov	r0, r3
 8006700:	f000 fd98 	bl	8007234 <RCCEx_PLL3_Config>
 8006704:	4603      	mov	r3, r0
 8006706:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800670a:	e004      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006712:	e000      	b.n	8006716 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10b      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800671e:	4b26      	ldr	r3, [pc, #152]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006722:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800672e:	4a22      	ldr	r2, [pc, #136]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006730:	430b      	orrs	r3, r1
 8006732:	6553      	str	r3, [r2, #84]	@ 0x54
 8006734:	e003      	b.n	800673e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006736:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800673a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800673e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800674a:	673b      	str	r3, [r7, #112]	@ 0x70
 800674c:	2300      	movs	r3, #0
 800674e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006750:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006754:	460b      	mov	r3, r1
 8006756:	4313      	orrs	r3, r2
 8006758:	d034      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800675a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800675e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006760:	2b00      	cmp	r3, #0
 8006762:	d003      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006768:	d007      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800676a:	e011      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800676c:	4b12      	ldr	r3, [pc, #72]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800676e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006770:	4a11      	ldr	r2, [pc, #68]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006778:	e00e      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800677a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677e:	3308      	adds	r3, #8
 8006780:	2102      	movs	r1, #2
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fca4 	bl	80070d0 <RCCEx_PLL2_Config>
 8006788:	4603      	mov	r3, r0
 800678a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800678e:	e003      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006796:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10d      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80067a0:	4b05      	ldr	r3, [pc, #20]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ae:	4a02      	ldr	r2, [pc, #8]	@ (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80067b0:	430b      	orrs	r3, r1
 80067b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80067b4:	e006      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80067b6:	bf00      	nop
 80067b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80067c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80067d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80067d2:	2300      	movs	r3, #0
 80067d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80067d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80067da:	460b      	mov	r3, r1
 80067dc:	4313      	orrs	r3, r2
 80067de:	d00c      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80067e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067e4:	3328      	adds	r3, #40	@ 0x28
 80067e6:	2102      	movs	r1, #2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f000 fd23 	bl	8007234 <RCCEx_PLL3_Config>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80067f4:	2301      	movs	r3, #1
 80067f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80067fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006806:	663b      	str	r3, [r7, #96]	@ 0x60
 8006808:	2300      	movs	r3, #0
 800680a:	667b      	str	r3, [r7, #100]	@ 0x64
 800680c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006810:	460b      	mov	r3, r1
 8006812:	4313      	orrs	r3, r2
 8006814:	d038      	beq.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800681a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800681e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006822:	d018      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006824:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006828:	d811      	bhi.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800682a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800682e:	d014      	beq.n	800685a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006830:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006834:	d80b      	bhi.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006836:	2b00      	cmp	r3, #0
 8006838:	d011      	beq.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800683a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800683e:	d106      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006840:	4bc3      	ldr	r3, [pc, #780]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006844:	4ac2      	ldr	r2, [pc, #776]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006846:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800684a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800684c:	e008      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006854:	e004      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006856:	bf00      	nop
 8006858:	e002      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800685a:	bf00      	nop
 800685c:	e000      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800685e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10b      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006868:	4bb9      	ldr	r3, [pc, #740]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800686a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800686c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006874:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006878:	4ab5      	ldr	r2, [pc, #724]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800687a:	430b      	orrs	r3, r1
 800687c:	6553      	str	r3, [r2, #84]	@ 0x54
 800687e:	e003      	b.n	8006888 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006894:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006896:	2300      	movs	r3, #0
 8006898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800689a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800689e:	460b      	mov	r3, r1
 80068a0:	4313      	orrs	r3, r2
 80068a2:	d009      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068a4:	4baa      	ldr	r3, [pc, #680]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80068ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068b2:	4aa7      	ldr	r2, [pc, #668]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068b4:	430b      	orrs	r3, r1
 80068b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80068b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80068c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80068c6:	2300      	movs	r3, #0
 80068c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80068ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80068ce:	460b      	mov	r3, r1
 80068d0:	4313      	orrs	r3, r2
 80068d2:	d00a      	beq.n	80068ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80068d4:	4b9e      	ldr	r3, [pc, #632]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80068dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80068e4:	4a9a      	ldr	r2, [pc, #616]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80068e6:	430b      	orrs	r3, r1
 80068e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80068f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068f8:	2300      	movs	r3, #0
 80068fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006900:	460b      	mov	r3, r1
 8006902:	4313      	orrs	r3, r2
 8006904:	d009      	beq.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006906:	4b92      	ldr	r3, [pc, #584]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006908:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800690a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800690e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006914:	4a8e      	ldr	r2, [pc, #568]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006916:	430b      	orrs	r3, r1
 8006918:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800691a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800691e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006922:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006926:	643b      	str	r3, [r7, #64]	@ 0x40
 8006928:	2300      	movs	r3, #0
 800692a:	647b      	str	r3, [r7, #68]	@ 0x44
 800692c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006930:	460b      	mov	r3, r1
 8006932:	4313      	orrs	r3, r2
 8006934:	d00e      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006936:	4b86      	ldr	r3, [pc, #536]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	4a85      	ldr	r2, [pc, #532]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800693c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006940:	6113      	str	r3, [r2, #16]
 8006942:	4b83      	ldr	r3, [pc, #524]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006944:	6919      	ldr	r1, [r3, #16]
 8006946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800694a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800694e:	4a80      	ldr	r2, [pc, #512]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006950:	430b      	orrs	r3, r1
 8006952:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006960:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006962:	2300      	movs	r3, #0
 8006964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006966:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800696a:	460b      	mov	r3, r1
 800696c:	4313      	orrs	r3, r2
 800696e:	d009      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006970:	4b77      	ldr	r3, [pc, #476]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006974:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800697c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800697e:	4a74      	ldr	r2, [pc, #464]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006980:	430b      	orrs	r3, r1
 8006982:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006990:	633b      	str	r3, [r7, #48]	@ 0x30
 8006992:	2300      	movs	r3, #0
 8006994:	637b      	str	r3, [r7, #52]	@ 0x34
 8006996:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800699a:	460b      	mov	r3, r1
 800699c:	4313      	orrs	r3, r2
 800699e:	d00a      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80069a0:	4b6b      	ldr	r3, [pc, #428]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80069a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069b0:	4a67      	ldr	r2, [pc, #412]	@ (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80069b2:	430b      	orrs	r3, r1
 80069b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80069b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069be:	2100      	movs	r1, #0
 80069c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80069cc:	460b      	mov	r3, r1
 80069ce:	4313      	orrs	r3, r2
 80069d0:	d011      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80069d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d6:	3308      	adds	r3, #8
 80069d8:	2100      	movs	r1, #0
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fb78 	bl	80070d0 <RCCEx_PLL2_Config>
 80069e0:	4603      	mov	r3, r0
 80069e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80069e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fe:	2100      	movs	r1, #0
 8006a00:	6239      	str	r1, [r7, #32]
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	d011      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a16:	3308      	adds	r3, #8
 8006a18:	2101      	movs	r1, #1
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fb58 	bl	80070d0 <RCCEx_PLL2_Config>
 8006a20:	4603      	mov	r3, r0
 8006a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d003      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a3e:	2100      	movs	r1, #0
 8006a40:	61b9      	str	r1, [r7, #24]
 8006a42:	f003 0304 	and.w	r3, r3, #4
 8006a46:	61fb      	str	r3, [r7, #28]
 8006a48:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	d011      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a56:	3308      	adds	r3, #8
 8006a58:	2102      	movs	r1, #2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fb38 	bl	80070d0 <RCCEx_PLL2_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006a66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7e:	2100      	movs	r1, #0
 8006a80:	6139      	str	r1, [r7, #16]
 8006a82:	f003 0308 	and.w	r3, r3, #8
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4313      	orrs	r3, r2
 8006a90:	d011      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a96:	3328      	adds	r3, #40	@ 0x28
 8006a98:	2100      	movs	r1, #0
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fbca 	bl	8007234 <RCCEx_PLL3_Config>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ab2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006abe:	2100      	movs	r1, #0
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	f003 0310 	and.w	r3, r3, #16
 8006ac6:	60fb      	str	r3, [r7, #12]
 8006ac8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006acc:	460b      	mov	r3, r1
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	d011      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ad6:	3328      	adds	r3, #40	@ 0x28
 8006ad8:	2101      	movs	r1, #1
 8006ada:	4618      	mov	r0, r3
 8006adc:	f000 fbaa 	bl	8007234 <RCCEx_PLL3_Config>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006af2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8006af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006afe:	2100      	movs	r1, #0
 8006b00:	6039      	str	r1, [r7, #0]
 8006b02:	f003 0320 	and.w	r3, r3, #32
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	d011      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b16:	3328      	adds	r3, #40	@ 0x28
 8006b18:	2102      	movs	r1, #2
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 fb8a 	bl	8007234 <RCCEx_PLL3_Config>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006b26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d003      	beq.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006b36:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	e000      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b50:	58024400 	.word	0x58024400

08006b54 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b58:	f7fe fd96 	bl	8005688 <HAL_RCC_GetHCLKFreq>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	4b06      	ldr	r3, [pc, #24]	@ (8006b78 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b60:	6a1b      	ldr	r3, [r3, #32]
 8006b62:	091b      	lsrs	r3, r3, #4
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	4904      	ldr	r1, [pc, #16]	@ (8006b7c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b6a:	5ccb      	ldrb	r3, [r1, r3]
 8006b6c:	f003 031f 	and.w	r3, r3, #31
 8006b70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	58024400 	.word	0x58024400
 8006b7c:	0800af50 	.word	0x0800af50

08006b80 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b089      	sub	sp, #36	@ 0x24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b88:	4ba1      	ldr	r3, [pc, #644]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8c:	f003 0303 	and.w	r3, r3, #3
 8006b90:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006b92:	4b9f      	ldr	r3, [pc, #636]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b96:	0b1b      	lsrs	r3, r3, #12
 8006b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b9c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006b9e:	4b9c      	ldr	r3, [pc, #624]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba2:	091b      	lsrs	r3, r3, #4
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006baa:	4b99      	ldr	r3, [pc, #612]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bae:	08db      	lsrs	r3, r3, #3
 8006bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	fb02 f303 	mul.w	r3, r2, r3
 8006bba:	ee07 3a90 	vmov	s15, r3
 8006bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bc2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 8111 	beq.w	8006df0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	f000 8083 	beq.w	8006cdc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	f200 80a1 	bhi.w	8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d003      	beq.n	8006bec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d056      	beq.n	8006c98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006bea:	e099      	b.n	8006d20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bec:	4b88      	ldr	r3, [pc, #544]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0320 	and.w	r3, r3, #32
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d02d      	beq.n	8006c54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bf8:	4b85      	ldr	r3, [pc, #532]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	08db      	lsrs	r3, r3, #3
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	4a84      	ldr	r2, [pc, #528]	@ (8006e14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c04:	fa22 f303 	lsr.w	r3, r2, r3
 8006c08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	ee07 3a90 	vmov	s15, r3
 8006c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c22:	4b7b      	ldr	r3, [pc, #492]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c52:	e087      	b.n	8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c66:	4b6a      	ldr	r3, [pc, #424]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c96:	e065      	b.n	8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006caa:	4b59      	ldr	r3, [pc, #356]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cbe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cda:	e043      	b.n	8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cee:	4b48      	ldr	r3, [pc, #288]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d1e:	e021      	b.n	8006d64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	ee07 3a90 	vmov	s15, r3
 8006d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006e20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d32:	4b37      	ldr	r3, [pc, #220]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3a:	ee07 3a90 	vmov	s15, r3
 8006d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006d64:	4b2a      	ldr	r3, [pc, #168]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d68:	0a5b      	lsrs	r3, r3, #9
 8006d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d6e:	ee07 3a90 	vmov	s15, r3
 8006d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d8a:	ee17 2a90 	vmov	r2, s15
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006d92:	4b1f      	ldr	r3, [pc, #124]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d96:	0c1b      	lsrs	r3, r3, #16
 8006d98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d9c:	ee07 3a90 	vmov	s15, r3
 8006da0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006da8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dac:	edd7 6a07 	vldr	s13, [r7, #28]
 8006db0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006db8:	ee17 2a90 	vmov	r2, s15
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006dc0:	4b13      	ldr	r3, [pc, #76]	@ (8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc4:	0e1b      	lsrs	r3, r3, #24
 8006dc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dca:	ee07 3a90 	vmov	s15, r3
 8006dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dda:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006de2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006de6:	ee17 2a90 	vmov	r2, s15
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006dee:	e008      	b.n	8006e02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	609a      	str	r2, [r3, #8]
}
 8006e02:	bf00      	nop
 8006e04:	3724      	adds	r7, #36	@ 0x24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	58024400 	.word	0x58024400
 8006e14:	03d09000 	.word	0x03d09000
 8006e18:	46000000 	.word	0x46000000
 8006e1c:	4c742400 	.word	0x4c742400
 8006e20:	4a742400 	.word	0x4a742400
 8006e24:	4af42400 	.word	0x4af42400

08006e28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b089      	sub	sp, #36	@ 0x24
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e30:	4ba1      	ldr	r3, [pc, #644]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e34:	f003 0303 	and.w	r3, r3, #3
 8006e38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006e3a:	4b9f      	ldr	r3, [pc, #636]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e3e:	0d1b      	lsrs	r3, r3, #20
 8006e40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e46:	4b9c      	ldr	r3, [pc, #624]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4a:	0a1b      	lsrs	r3, r3, #8
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006e52:	4b99      	ldr	r3, [pc, #612]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e56:	08db      	lsrs	r3, r3, #3
 8006e58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	fb02 f303 	mul.w	r3, r2, r3
 8006e62:	ee07 3a90 	vmov	s15, r3
 8006e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8111 	beq.w	8007098 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	f000 8083 	beq.w	8006f84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	f200 80a1 	bhi.w	8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d003      	beq.n	8006e94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	2b01      	cmp	r3, #1
 8006e90:	d056      	beq.n	8006f40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006e92:	e099      	b.n	8006fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e94:	4b88      	ldr	r3, [pc, #544]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d02d      	beq.n	8006efc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ea0:	4b85      	ldr	r3, [pc, #532]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	08db      	lsrs	r3, r3, #3
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	4a84      	ldr	r2, [pc, #528]	@ (80070bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
 8006eb0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	ee07 3a90 	vmov	s15, r3
 8006eb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eca:	4b7b      	ldr	r3, [pc, #492]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ede:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ef6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006efa:	e087      	b.n	800700c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	ee07 3a90 	vmov	s15, r3
 8006f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80070c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f0e:	4b6a      	ldr	r3, [pc, #424]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f16:	ee07 3a90 	vmov	s15, r3
 8006f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f3e:	e065      	b.n	800700c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	ee07 3a90 	vmov	s15, r3
 8006f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80070c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f52:	4b59      	ldr	r3, [pc, #356]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f5a:	ee07 3a90 	vmov	s15, r3
 8006f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f82:	e043      	b.n	800700c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80070cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f96:	4b48      	ldr	r3, [pc, #288]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f9e:	ee07 3a90 	vmov	s15, r3
 8006fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006faa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fc6:	e021      	b.n	800700c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	ee07 3a90 	vmov	s15, r3
 8006fce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80070c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006fd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fda:	4b37      	ldr	r3, [pc, #220]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80070c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ff2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ff6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ffa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ffe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007006:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800700a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800700c:	4b2a      	ldr	r3, [pc, #168]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800700e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007010:	0a5b      	lsrs	r3, r3, #9
 8007012:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007016:	ee07 3a90 	vmov	s15, r3
 800701a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007022:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007026:	edd7 6a07 	vldr	s13, [r7, #28]
 800702a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800702e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007032:	ee17 2a90 	vmov	r2, s15
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800703a:	4b1f      	ldr	r3, [pc, #124]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800703c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703e:	0c1b      	lsrs	r3, r3, #16
 8007040:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007050:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007054:	edd7 6a07 	vldr	s13, [r7, #28]
 8007058:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007060:	ee17 2a90 	vmov	r2, s15
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007068:	4b13      	ldr	r3, [pc, #76]	@ (80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800706a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706c:	0e1b      	lsrs	r3, r3, #24
 800706e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007072:	ee07 3a90 	vmov	s15, r3
 8007076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800707e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007082:	edd7 6a07 	vldr	s13, [r7, #28]
 8007086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800708a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800708e:	ee17 2a90 	vmov	r2, s15
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007096:	e008      	b.n	80070aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2200      	movs	r2, #0
 80070a8:	609a      	str	r2, [r3, #8]
}
 80070aa:	bf00      	nop
 80070ac:	3724      	adds	r7, #36	@ 0x24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	58024400 	.word	0x58024400
 80070bc:	03d09000 	.word	0x03d09000
 80070c0:	46000000 	.word	0x46000000
 80070c4:	4c742400 	.word	0x4c742400
 80070c8:	4a742400 	.word	0x4a742400
 80070cc:	4af42400 	.word	0x4af42400

080070d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80070de:	4b53      	ldr	r3, [pc, #332]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80070e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070e2:	f003 0303 	and.w	r3, r3, #3
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d101      	bne.n	80070ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e099      	b.n	8007222 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80070ee:	4b4f      	ldr	r3, [pc, #316]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a4e      	ldr	r2, [pc, #312]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80070f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80070f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070fa:	f7fb f813 	bl	8002124 <HAL_GetTick>
 80070fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007100:	e008      	b.n	8007114 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007102:	f7fb f80f 	bl	8002124 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	2b02      	cmp	r3, #2
 800710e:	d901      	bls.n	8007114 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e086      	b.n	8007222 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007114:	4b45      	ldr	r3, [pc, #276]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1f0      	bne.n	8007102 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007120:	4b42      	ldr	r3, [pc, #264]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007124:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	031b      	lsls	r3, r3, #12
 800712e:	493f      	ldr	r1, [pc, #252]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007130:	4313      	orrs	r3, r2
 8007132:	628b      	str	r3, [r1, #40]	@ 0x28
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	685b      	ldr	r3, [r3, #4]
 8007138:	3b01      	subs	r3, #1
 800713a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	689b      	ldr	r3, [r3, #8]
 8007142:	3b01      	subs	r3, #1
 8007144:	025b      	lsls	r3, r3, #9
 8007146:	b29b      	uxth	r3, r3
 8007148:	431a      	orrs	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	3b01      	subs	r3, #1
 8007150:	041b      	lsls	r3, r3, #16
 8007152:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007156:	431a      	orrs	r2, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	691b      	ldr	r3, [r3, #16]
 800715c:	3b01      	subs	r3, #1
 800715e:	061b      	lsls	r3, r3, #24
 8007160:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007164:	4931      	ldr	r1, [pc, #196]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007166:	4313      	orrs	r3, r2
 8007168:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800716a:	4b30      	ldr	r3, [pc, #192]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 800716c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	695b      	ldr	r3, [r3, #20]
 8007176:	492d      	ldr	r1, [pc, #180]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007178:	4313      	orrs	r3, r2
 800717a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800717c:	4b2b      	ldr	r3, [pc, #172]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 800717e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007180:	f023 0220 	bic.w	r2, r3, #32
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	699b      	ldr	r3, [r3, #24]
 8007188:	4928      	ldr	r1, [pc, #160]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 800718a:	4313      	orrs	r3, r2
 800718c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800718e:	4b27      	ldr	r3, [pc, #156]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007192:	4a26      	ldr	r2, [pc, #152]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007194:	f023 0310 	bic.w	r3, r3, #16
 8007198:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800719a:	4b24      	ldr	r3, [pc, #144]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 800719c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800719e:	4b24      	ldr	r3, [pc, #144]	@ (8007230 <RCCEx_PLL2_Config+0x160>)
 80071a0:	4013      	ands	r3, r2
 80071a2:	687a      	ldr	r2, [r7, #4]
 80071a4:	69d2      	ldr	r2, [r2, #28]
 80071a6:	00d2      	lsls	r2, r2, #3
 80071a8:	4920      	ldr	r1, [pc, #128]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80071ae:	4b1f      	ldr	r3, [pc, #124]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b2:	4a1e      	ldr	r2, [pc, #120]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071b4:	f043 0310 	orr.w	r3, r3, #16
 80071b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d106      	bne.n	80071ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80071c0:	4b1a      	ldr	r3, [pc, #104]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c4:	4a19      	ldr	r2, [pc, #100]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80071ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071cc:	e00f      	b.n	80071ee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d106      	bne.n	80071e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80071d4:	4b15      	ldr	r3, [pc, #84]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d8:	4a14      	ldr	r2, [pc, #80]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80071de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80071e0:	e005      	b.n	80071ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80071e2:	4b12      	ldr	r3, [pc, #72]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071e6:	4a11      	ldr	r2, [pc, #68]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80071ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80071ee:	4b0f      	ldr	r3, [pc, #60]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a0e      	ldr	r2, [pc, #56]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 80071f4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80071f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071fa:	f7fa ff93 	bl	8002124 <HAL_GetTick>
 80071fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007200:	e008      	b.n	8007214 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007202:	f7fa ff8f 	bl	8002124 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d901      	bls.n	8007214 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e006      	b.n	8007222 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007214:	4b05      	ldr	r3, [pc, #20]	@ (800722c <RCCEx_PLL2_Config+0x15c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0f0      	beq.n	8007202 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007220:	7bfb      	ldrb	r3, [r7, #15]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
 800722a:	bf00      	nop
 800722c:	58024400 	.word	0x58024400
 8007230:	ffff0007 	.word	0xffff0007

08007234 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007242:	4b53      	ldr	r3, [pc, #332]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007246:	f003 0303 	and.w	r3, r3, #3
 800724a:	2b03      	cmp	r3, #3
 800724c:	d101      	bne.n	8007252 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e099      	b.n	8007386 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007252:	4b4f      	ldr	r3, [pc, #316]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a4e      	ldr	r2, [pc, #312]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800725c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800725e:	f7fa ff61 	bl	8002124 <HAL_GetTick>
 8007262:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007264:	e008      	b.n	8007278 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007266:	f7fa ff5d 	bl	8002124 <HAL_GetTick>
 800726a:	4602      	mov	r2, r0
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	2b02      	cmp	r3, #2
 8007272:	d901      	bls.n	8007278 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007274:	2303      	movs	r3, #3
 8007276:	e086      	b.n	8007386 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007278:	4b45      	ldr	r3, [pc, #276]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1f0      	bne.n	8007266 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007284:	4b42      	ldr	r3, [pc, #264]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007288:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	051b      	lsls	r3, r3, #20
 8007292:	493f      	ldr	r1, [pc, #252]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007294:	4313      	orrs	r3, r2
 8007296:	628b      	str	r3, [r1, #40]	@ 0x28
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	3b01      	subs	r3, #1
 800729e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	689b      	ldr	r3, [r3, #8]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	025b      	lsls	r3, r3, #9
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	431a      	orrs	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68db      	ldr	r3, [r3, #12]
 80072b2:	3b01      	subs	r3, #1
 80072b4:	041b      	lsls	r3, r3, #16
 80072b6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80072ba:	431a      	orrs	r2, r3
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	061b      	lsls	r3, r3, #24
 80072c4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80072c8:	4931      	ldr	r1, [pc, #196]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80072ce:	4b30      	ldr	r3, [pc, #192]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	695b      	ldr	r3, [r3, #20]
 80072da:	492d      	ldr	r1, [pc, #180]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80072e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	699b      	ldr	r3, [r3, #24]
 80072ec:	4928      	ldr	r1, [pc, #160]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80072f2:	4b27      	ldr	r3, [pc, #156]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f6:	4a26      	ldr	r2, [pc, #152]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 80072f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80072fe:	4b24      	ldr	r3, [pc, #144]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007300:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007302:	4b24      	ldr	r3, [pc, #144]	@ (8007394 <RCCEx_PLL3_Config+0x160>)
 8007304:	4013      	ands	r3, r2
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	69d2      	ldr	r2, [r2, #28]
 800730a:	00d2      	lsls	r2, r2, #3
 800730c:	4920      	ldr	r1, [pc, #128]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800730e:	4313      	orrs	r3, r2
 8007310:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007312:	4b1f      	ldr	r3, [pc, #124]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007316:	4a1e      	ldr	r2, [pc, #120]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800731c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d106      	bne.n	8007332 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007324:	4b1a      	ldr	r3, [pc, #104]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007328:	4a19      	ldr	r2, [pc, #100]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800732a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800732e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007330:	e00f      	b.n	8007352 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d106      	bne.n	8007346 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007338:	4b15      	ldr	r3, [pc, #84]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800733a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733c:	4a14      	ldr	r2, [pc, #80]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800733e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007342:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007344:	e005      	b.n	8007352 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007346:	4b12      	ldr	r3, [pc, #72]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734a:	4a11      	ldr	r2, [pc, #68]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800734c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007350:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007352:	4b0f      	ldr	r3, [pc, #60]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a0e      	ldr	r2, [pc, #56]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 8007358:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800735c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800735e:	f7fa fee1 	bl	8002124 <HAL_GetTick>
 8007362:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007364:	e008      	b.n	8007378 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007366:	f7fa fedd 	bl	8002124 <HAL_GetTick>
 800736a:	4602      	mov	r2, r0
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d901      	bls.n	8007378 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007374:	2303      	movs	r3, #3
 8007376:	e006      	b.n	8007386 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007378:	4b05      	ldr	r3, [pc, #20]	@ (8007390 <RCCEx_PLL3_Config+0x15c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007380:	2b00      	cmp	r3, #0
 8007382:	d0f0      	beq.n	8007366 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007384:	7bfb      	ldrb	r3, [r7, #15]
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	58024400 	.word	0x58024400
 8007394:	ffff0007 	.word	0xffff0007

08007398 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e10f      	b.n	80075ca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2200      	movs	r2, #0
 80073ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a87      	ldr	r2, [pc, #540]	@ (80075d4 <HAL_SPI_Init+0x23c>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d00f      	beq.n	80073da <HAL_SPI_Init+0x42>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a86      	ldr	r2, [pc, #536]	@ (80075d8 <HAL_SPI_Init+0x240>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d00a      	beq.n	80073da <HAL_SPI_Init+0x42>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a84      	ldr	r2, [pc, #528]	@ (80075dc <HAL_SPI_Init+0x244>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d005      	beq.n	80073da <HAL_SPI_Init+0x42>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	2b0f      	cmp	r3, #15
 80073d4:	d901      	bls.n	80073da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e0f7      	b.n	80075ca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f900 	bl	80075e0 <SPI_GetPacketSize>
 80073e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a7b      	ldr	r2, [pc, #492]	@ (80075d4 <HAL_SPI_Init+0x23c>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00c      	beq.n	8007406 <HAL_SPI_Init+0x6e>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a79      	ldr	r2, [pc, #484]	@ (80075d8 <HAL_SPI_Init+0x240>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d007      	beq.n	8007406 <HAL_SPI_Init+0x6e>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a78      	ldr	r2, [pc, #480]	@ (80075dc <HAL_SPI_Init+0x244>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d002      	beq.n	8007406 <HAL_SPI_Init+0x6e>
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2b08      	cmp	r3, #8
 8007404:	d811      	bhi.n	800742a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800740a:	4a72      	ldr	r2, [pc, #456]	@ (80075d4 <HAL_SPI_Init+0x23c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d009      	beq.n	8007424 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a70      	ldr	r2, [pc, #448]	@ (80075d8 <HAL_SPI_Init+0x240>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d004      	beq.n	8007424 <HAL_SPI_Init+0x8c>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a6f      	ldr	r2, [pc, #444]	@ (80075dc <HAL_SPI_Init+0x244>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d104      	bne.n	800742e <HAL_SPI_Init+0x96>
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b10      	cmp	r3, #16
 8007428:	d901      	bls.n	800742e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e0cd      	b.n	80075ca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8007434:	b2db      	uxtb	r3, r3
 8007436:	2b00      	cmp	r3, #0
 8007438:	d106      	bne.n	8007448 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fa f92e 	bl	80016a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0201 	bic.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800746a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007474:	d119      	bne.n	80074aa <HAL_SPI_Init+0x112>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800747e:	d103      	bne.n	8007488 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007484:	2b00      	cmp	r3, #0
 8007486:	d008      	beq.n	800749a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10c      	bne.n	80074aa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007498:	d107      	bne.n	80074aa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80074a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00f      	beq.n	80074d6 <HAL_SPI_Init+0x13e>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	2b06      	cmp	r3, #6
 80074bc:	d90b      	bls.n	80074d6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	601a      	str	r2, [r3, #0]
 80074d4:	e007      	b.n	80074e6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80074e4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	69da      	ldr	r2, [r3, #28]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ee:	431a      	orrs	r2, r3
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074f8:	ea42 0103 	orr.w	r1, r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68da      	ldr	r2, [r3, #12]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007510:	431a      	orrs	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	431a      	orrs	r2, r3
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	6a1b      	ldr	r3, [r3, #32]
 800752e:	431a      	orrs	r2, r3
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800753a:	431a      	orrs	r2, r3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	431a      	orrs	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007546:	ea42 0103 	orr.w	r1, r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	430a      	orrs	r2, r1
 8007554:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d113      	bne.n	8007586 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007570:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007584:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f022 0201 	bic.w	r2, r2, #1
 8007594:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	430a      	orrs	r2, r1
 80075b6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 80075c8:	2300      	movs	r3, #0
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	40013000 	.word	0x40013000
 80075d8:	40003800 	.word	0x40003800
 80075dc:	40003c00 	.word	0x40003c00

080075e0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b085      	sub	sp, #20
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	3301      	adds	r3, #1
 80075f0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	3301      	adds	r3, #1
 80075f8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	3307      	adds	r3, #7
 80075fe:	08db      	lsrs	r3, r3, #3
 8007600:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	fb02 f303 	mul.w	r3, r2, r3
}
 800760a:	4618      	mov	r0, r3
 800760c:	3714      	adds	r7, #20
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e049      	b.n	80076bc <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800762e:	b2db      	uxtb	r3, r3
 8007630:	2b00      	cmp	r3, #0
 8007632:	d106      	bne.n	8007642 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f7fa facf 	bl	8001be0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2202      	movs	r2, #2
 8007646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	3304      	adds	r3, #4
 8007652:	4619      	mov	r1, r3
 8007654:	4610      	mov	r0, r2
 8007656:	f000 fd2d 	bl	80080b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80076ba:	2300      	movs	r3, #0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b082      	sub	sp, #8
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e049      	b.n	800776a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d106      	bne.n	80076f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 f841 	bl	8007772 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	3304      	adds	r3, #4
 8007700:	4619      	mov	r1, r3
 8007702:	4610      	mov	r0, r2
 8007704:	f000 fcd6 	bl	80080b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800777a:	bf00      	nop
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
	...

08007788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d109      	bne.n	80077ac <HAL_TIM_PWM_Start+0x24>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	bf14      	ite	ne
 80077a4:	2301      	movne	r3, #1
 80077a6:	2300      	moveq	r3, #0
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	e03c      	b.n	8007826 <HAL_TIM_PWM_Start+0x9e>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d109      	bne.n	80077c6 <HAL_TIM_PWM_Start+0x3e>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	bf14      	ite	ne
 80077be:	2301      	movne	r3, #1
 80077c0:	2300      	moveq	r3, #0
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	e02f      	b.n	8007826 <HAL_TIM_PWM_Start+0x9e>
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b08      	cmp	r3, #8
 80077ca:	d109      	bne.n	80077e0 <HAL_TIM_PWM_Start+0x58>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	bf14      	ite	ne
 80077d8:	2301      	movne	r3, #1
 80077da:	2300      	moveq	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	e022      	b.n	8007826 <HAL_TIM_PWM_Start+0x9e>
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b0c      	cmp	r3, #12
 80077e4:	d109      	bne.n	80077fa <HAL_TIM_PWM_Start+0x72>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	bf14      	ite	ne
 80077f2:	2301      	movne	r3, #1
 80077f4:	2300      	moveq	r3, #0
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	e015      	b.n	8007826 <HAL_TIM_PWM_Start+0x9e>
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	2b10      	cmp	r3, #16
 80077fe:	d109      	bne.n	8007814 <HAL_TIM_PWM_Start+0x8c>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007806:	b2db      	uxtb	r3, r3
 8007808:	2b01      	cmp	r3, #1
 800780a:	bf14      	ite	ne
 800780c:	2301      	movne	r3, #1
 800780e:	2300      	moveq	r3, #0
 8007810:	b2db      	uxtb	r3, r3
 8007812:	e008      	b.n	8007826 <HAL_TIM_PWM_Start+0x9e>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b01      	cmp	r3, #1
 800781e:	bf14      	ite	ne
 8007820:	2301      	movne	r3, #1
 8007822:	2300      	moveq	r3, #0
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b00      	cmp	r3, #0
 8007828:	d001      	beq.n	800782e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	e0a1      	b.n	8007972 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d104      	bne.n	800783e <HAL_TIM_PWM_Start+0xb6>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800783c:	e023      	b.n	8007886 <HAL_TIM_PWM_Start+0xfe>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b04      	cmp	r3, #4
 8007842:	d104      	bne.n	800784e <HAL_TIM_PWM_Start+0xc6>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800784c:	e01b      	b.n	8007886 <HAL_TIM_PWM_Start+0xfe>
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b08      	cmp	r3, #8
 8007852:	d104      	bne.n	800785e <HAL_TIM_PWM_Start+0xd6>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2202      	movs	r2, #2
 8007858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800785c:	e013      	b.n	8007886 <HAL_TIM_PWM_Start+0xfe>
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	2b0c      	cmp	r3, #12
 8007862:	d104      	bne.n	800786e <HAL_TIM_PWM_Start+0xe6>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2202      	movs	r2, #2
 8007868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800786c:	e00b      	b.n	8007886 <HAL_TIM_PWM_Start+0xfe>
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	2b10      	cmp	r3, #16
 8007872:	d104      	bne.n	800787e <HAL_TIM_PWM_Start+0xf6>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800787c:	e003      	b.n	8007886 <HAL_TIM_PWM_Start+0xfe>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2202      	movs	r2, #2
 8007882:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2201      	movs	r2, #1
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	4618      	mov	r0, r3
 8007890:	f001 f90e 	bl	8008ab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a38      	ldr	r2, [pc, #224]	@ (800797c <HAL_TIM_PWM_Start+0x1f4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d013      	beq.n	80078c6 <HAL_TIM_PWM_Start+0x13e>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a37      	ldr	r2, [pc, #220]	@ (8007980 <HAL_TIM_PWM_Start+0x1f8>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d00e      	beq.n	80078c6 <HAL_TIM_PWM_Start+0x13e>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a35      	ldr	r2, [pc, #212]	@ (8007984 <HAL_TIM_PWM_Start+0x1fc>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d009      	beq.n	80078c6 <HAL_TIM_PWM_Start+0x13e>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a34      	ldr	r2, [pc, #208]	@ (8007988 <HAL_TIM_PWM_Start+0x200>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d004      	beq.n	80078c6 <HAL_TIM_PWM_Start+0x13e>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a32      	ldr	r2, [pc, #200]	@ (800798c <HAL_TIM_PWM_Start+0x204>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d101      	bne.n	80078ca <HAL_TIM_PWM_Start+0x142>
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <HAL_TIM_PWM_Start+0x144>
 80078ca:	2300      	movs	r3, #0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d007      	beq.n	80078e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80078de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a25      	ldr	r2, [pc, #148]	@ (800797c <HAL_TIM_PWM_Start+0x1f4>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d022      	beq.n	8007930 <HAL_TIM_PWM_Start+0x1a8>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078f2:	d01d      	beq.n	8007930 <HAL_TIM_PWM_Start+0x1a8>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a25      	ldr	r2, [pc, #148]	@ (8007990 <HAL_TIM_PWM_Start+0x208>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d018      	beq.n	8007930 <HAL_TIM_PWM_Start+0x1a8>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a24      	ldr	r2, [pc, #144]	@ (8007994 <HAL_TIM_PWM_Start+0x20c>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d013      	beq.n	8007930 <HAL_TIM_PWM_Start+0x1a8>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a22      	ldr	r2, [pc, #136]	@ (8007998 <HAL_TIM_PWM_Start+0x210>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d00e      	beq.n	8007930 <HAL_TIM_PWM_Start+0x1a8>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a1a      	ldr	r2, [pc, #104]	@ (8007980 <HAL_TIM_PWM_Start+0x1f8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d009      	beq.n	8007930 <HAL_TIM_PWM_Start+0x1a8>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a1e      	ldr	r2, [pc, #120]	@ (800799c <HAL_TIM_PWM_Start+0x214>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d004      	beq.n	8007930 <HAL_TIM_PWM_Start+0x1a8>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a16      	ldr	r2, [pc, #88]	@ (8007984 <HAL_TIM_PWM_Start+0x1fc>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d115      	bne.n	800795c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689a      	ldr	r2, [r3, #8]
 8007936:	4b1a      	ldr	r3, [pc, #104]	@ (80079a0 <HAL_TIM_PWM_Start+0x218>)
 8007938:	4013      	ands	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2b06      	cmp	r3, #6
 8007940:	d015      	beq.n	800796e <HAL_TIM_PWM_Start+0x1e6>
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007948:	d011      	beq.n	800796e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f042 0201 	orr.w	r2, r2, #1
 8007958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800795a:	e008      	b.n	800796e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f042 0201 	orr.w	r2, r2, #1
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	e000      	b.n	8007970 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800796e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3710      	adds	r7, #16
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40010000 	.word	0x40010000
 8007980:	40010400 	.word	0x40010400
 8007984:	40014000 	.word	0x40014000
 8007988:	40014400 	.word	0x40014400
 800798c:	40014800 	.word	0x40014800
 8007990:	40000400 	.word	0x40000400
 8007994:	40000800 	.word	0x40000800
 8007998:	40000c00 	.word	0x40000c00
 800799c:	40001800 	.word	0x40001800
 80079a0:	00010007 	.word	0x00010007

080079a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f003 0302 	and.w	r3, r3, #2
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d020      	beq.n	8007a08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f003 0302 	and.w	r3, r3, #2
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d01b      	beq.n	8007a08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f06f 0202 	mvn.w	r2, #2
 80079d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	699b      	ldr	r3, [r3, #24]
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 fb42 	bl	8008078 <HAL_TIM_IC_CaptureCallback>
 80079f4:	e005      	b.n	8007a02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 fb34 	bl	8008064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fb45 	bl	800808c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	f003 0304 	and.w	r3, r3, #4
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d020      	beq.n	8007a54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d01b      	beq.n	8007a54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f06f 0204 	mvn.w	r2, #4
 8007a24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fb1c 	bl	8008078 <HAL_TIM_IC_CaptureCallback>
 8007a40:	e005      	b.n	8007a4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 fb0e 	bl	8008064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 fb1f 	bl	800808c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	f003 0308 	and.w	r3, r3, #8
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d020      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f003 0308 	and.w	r3, r3, #8
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d01b      	beq.n	8007aa0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0208 	mvn.w	r2, #8
 8007a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2204      	movs	r2, #4
 8007a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	f003 0303 	and.w	r3, r3, #3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 faf6 	bl	8008078 <HAL_TIM_IC_CaptureCallback>
 8007a8c:	e005      	b.n	8007a9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fae8 	bl	8008064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 faf9 	bl	800808c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f003 0310 	and.w	r3, r3, #16
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d020      	beq.n	8007aec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f003 0310 	and.w	r3, r3, #16
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d01b      	beq.n	8007aec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f06f 0210 	mvn.w	r2, #16
 8007abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2208      	movs	r2, #8
 8007ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fad0 	bl	8008078 <HAL_TIM_IC_CaptureCallback>
 8007ad8:	e005      	b.n	8007ae6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fac2 	bl	8008064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 fad3 	bl	800808c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00c      	beq.n	8007b10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d007      	beq.n	8007b10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f06f 0201 	mvn.w	r2, #1
 8007b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 faa0 	bl	8008050 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d104      	bne.n	8007b24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00c      	beq.n	8007b3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d007      	beq.n	8007b3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 f877 	bl	8008c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00c      	beq.n	8007b62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d007      	beq.n	8007b62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 f86f 	bl	8008c40 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d00c      	beq.n	8007b86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d007      	beq.n	8007b86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fa8d 	bl	80080a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f003 0320 	and.w	r3, r3, #32
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00c      	beq.n	8007baa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f06f 0220 	mvn.w	r2, #32
 8007ba2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 f837 	bl	8008c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007baa:	bf00      	nop
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
	...

08007bb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d101      	bne.n	8007bd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bce:	2302      	movs	r3, #2
 8007bd0:	e0ff      	b.n	8007dd2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b14      	cmp	r3, #20
 8007bde:	f200 80f0 	bhi.w	8007dc2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007be2:	a201      	add	r2, pc, #4	@ (adr r2, 8007be8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be8:	08007c3d 	.word	0x08007c3d
 8007bec:	08007dc3 	.word	0x08007dc3
 8007bf0:	08007dc3 	.word	0x08007dc3
 8007bf4:	08007dc3 	.word	0x08007dc3
 8007bf8:	08007c7d 	.word	0x08007c7d
 8007bfc:	08007dc3 	.word	0x08007dc3
 8007c00:	08007dc3 	.word	0x08007dc3
 8007c04:	08007dc3 	.word	0x08007dc3
 8007c08:	08007cbf 	.word	0x08007cbf
 8007c0c:	08007dc3 	.word	0x08007dc3
 8007c10:	08007dc3 	.word	0x08007dc3
 8007c14:	08007dc3 	.word	0x08007dc3
 8007c18:	08007cff 	.word	0x08007cff
 8007c1c:	08007dc3 	.word	0x08007dc3
 8007c20:	08007dc3 	.word	0x08007dc3
 8007c24:	08007dc3 	.word	0x08007dc3
 8007c28:	08007d41 	.word	0x08007d41
 8007c2c:	08007dc3 	.word	0x08007dc3
 8007c30:	08007dc3 	.word	0x08007dc3
 8007c34:	08007dc3 	.word	0x08007dc3
 8007c38:	08007d81 	.word	0x08007d81
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68b9      	ldr	r1, [r7, #8]
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fad6 	bl	80081f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	699a      	ldr	r2, [r3, #24]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f042 0208 	orr.w	r2, r2, #8
 8007c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699a      	ldr	r2, [r3, #24]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f022 0204 	bic.w	r2, r2, #4
 8007c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6999      	ldr	r1, [r3, #24]
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	691a      	ldr	r2, [r3, #16]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	430a      	orrs	r2, r1
 8007c78:	619a      	str	r2, [r3, #24]
      break;
 8007c7a:	e0a5      	b.n	8007dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	68b9      	ldr	r1, [r7, #8]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 fb46 	bl	8008314 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699a      	ldr	r2, [r3, #24]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007c96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	699a      	ldr	r2, [r3, #24]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ca6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	6999      	ldr	r1, [r3, #24]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	021a      	lsls	r2, r3, #8
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	619a      	str	r2, [r3, #24]
      break;
 8007cbc:	e084      	b.n	8007dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68b9      	ldr	r1, [r7, #8]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 fbaf 	bl	8008428 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	69da      	ldr	r2, [r3, #28]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f042 0208 	orr.w	r2, r2, #8
 8007cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69da      	ldr	r2, [r3, #28]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0204 	bic.w	r2, r2, #4
 8007ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	69d9      	ldr	r1, [r3, #28]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	691a      	ldr	r2, [r3, #16]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	61da      	str	r2, [r3, #28]
      break;
 8007cfc:	e064      	b.n	8007dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68b9      	ldr	r1, [r7, #8]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f000 fc17 	bl	8008538 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	69da      	ldr	r2, [r3, #28]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	69da      	ldr	r2, [r3, #28]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	69d9      	ldr	r1, [r3, #28]
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	021a      	lsls	r2, r3, #8
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	61da      	str	r2, [r3, #28]
      break;
 8007d3e:	e043      	b.n	8007dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68b9      	ldr	r1, [r7, #8]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 fc60 	bl	800860c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f042 0208 	orr.w	r2, r2, #8
 8007d5a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 0204 	bic.w	r2, r2, #4
 8007d6a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	691a      	ldr	r2, [r3, #16]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007d7e:	e023      	b.n	8007dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68b9      	ldr	r1, [r7, #8]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fca4 	bl	80086d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007d9a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007daa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	021a      	lsls	r2, r3, #8
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8007dc0:	e002      	b.n	8007dc8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007dd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop

08007ddc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007df0:	2b01      	cmp	r3, #1
 8007df2:	d101      	bne.n	8007df8 <HAL_TIM_ConfigClockSource+0x1c>
 8007df4:	2302      	movs	r3, #2
 8007df6:	e0dc      	b.n	8007fb2 <HAL_TIM_ConfigClockSource+0x1d6>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2202      	movs	r2, #2
 8007e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	4b6a      	ldr	r3, [pc, #424]	@ (8007fbc <HAL_TIM_ConfigClockSource+0x1e0>)
 8007e14:	4013      	ands	r3, r2
 8007e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68ba      	ldr	r2, [r7, #8]
 8007e26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a64      	ldr	r2, [pc, #400]	@ (8007fc0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	f000 80a9 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e34:	4a62      	ldr	r2, [pc, #392]	@ (8007fc0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	f200 80ae 	bhi.w	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e3c:	4a61      	ldr	r2, [pc, #388]	@ (8007fc4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	f000 80a1 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e44:	4a5f      	ldr	r2, [pc, #380]	@ (8007fc4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	f200 80a6 	bhi.w	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e4c:	4a5e      	ldr	r2, [pc, #376]	@ (8007fc8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	f000 8099 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e54:	4a5c      	ldr	r2, [pc, #368]	@ (8007fc8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	f200 809e 	bhi.w	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e5c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007e60:	f000 8091 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e64:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007e68:	f200 8096 	bhi.w	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e70:	f000 8089 	beq.w	8007f86 <HAL_TIM_ConfigClockSource+0x1aa>
 8007e74:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e78:	f200 808e 	bhi.w	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e80:	d03e      	beq.n	8007f00 <HAL_TIM_ConfigClockSource+0x124>
 8007e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e86:	f200 8087 	bhi.w	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e8e:	f000 8086 	beq.w	8007f9e <HAL_TIM_ConfigClockSource+0x1c2>
 8007e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e96:	d87f      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
 8007e98:	2b70      	cmp	r3, #112	@ 0x70
 8007e9a:	d01a      	beq.n	8007ed2 <HAL_TIM_ConfigClockSource+0xf6>
 8007e9c:	2b70      	cmp	r3, #112	@ 0x70
 8007e9e:	d87b      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ea0:	2b60      	cmp	r3, #96	@ 0x60
 8007ea2:	d050      	beq.n	8007f46 <HAL_TIM_ConfigClockSource+0x16a>
 8007ea4:	2b60      	cmp	r3, #96	@ 0x60
 8007ea6:	d877      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ea8:	2b50      	cmp	r3, #80	@ 0x50
 8007eaa:	d03c      	beq.n	8007f26 <HAL_TIM_ConfigClockSource+0x14a>
 8007eac:	2b50      	cmp	r3, #80	@ 0x50
 8007eae:	d873      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
 8007eb0:	2b40      	cmp	r3, #64	@ 0x40
 8007eb2:	d058      	beq.n	8007f66 <HAL_TIM_ConfigClockSource+0x18a>
 8007eb4:	2b40      	cmp	r3, #64	@ 0x40
 8007eb6:	d86f      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
 8007eb8:	2b30      	cmp	r3, #48	@ 0x30
 8007eba:	d064      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ebc:	2b30      	cmp	r3, #48	@ 0x30
 8007ebe:	d86b      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ec0:	2b20      	cmp	r3, #32
 8007ec2:	d060      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ec4:	2b20      	cmp	r3, #32
 8007ec6:	d867      	bhi.n	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d05c      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ecc:	2b10      	cmp	r3, #16
 8007ece:	d05a      	beq.n	8007f86 <HAL_TIM_ConfigClockSource+0x1aa>
 8007ed0:	e062      	b.n	8007f98 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007ee2:	f000 fdc5 	bl	8008a70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007ef4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	609a      	str	r2, [r3, #8]
      break;
 8007efe:	e04f      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f10:	f000 fdae 	bl	8008a70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f22:	609a      	str	r2, [r3, #8]
      break;
 8007f24:	e03c      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f32:	461a      	mov	r2, r3
 8007f34:	f000 fd1e 	bl	8008974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2150      	movs	r1, #80	@ 0x50
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 fd78 	bl	8008a34 <TIM_ITRx_SetConfig>
      break;
 8007f44:	e02c      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f52:	461a      	mov	r2, r3
 8007f54:	f000 fd3d 	bl	80089d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2160      	movs	r1, #96	@ 0x60
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fd68 	bl	8008a34 <TIM_ITRx_SetConfig>
      break;
 8007f64:	e01c      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f72:	461a      	mov	r2, r3
 8007f74:	f000 fcfe 	bl	8008974 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2140      	movs	r1, #64	@ 0x40
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f000 fd58 	bl	8008a34 <TIM_ITRx_SetConfig>
      break;
 8007f84:	e00c      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4610      	mov	r0, r2
 8007f92:	f000 fd4f 	bl	8008a34 <TIM_ITRx_SetConfig>
      break;
 8007f96:	e003      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f9c:	e000      	b.n	8007fa0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007f9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	3710      	adds	r7, #16
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bd80      	pop	{r7, pc}
 8007fba:	bf00      	nop
 8007fbc:	ffceff88 	.word	0xffceff88
 8007fc0:	00100040 	.word	0x00100040
 8007fc4:	00100030 	.word	0x00100030
 8007fc8:	00100020 	.word	0x00100020

08007fcc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d101      	bne.n	8007fe4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007fe0:	2302      	movs	r3, #2
 8007fe2:	e031      	b.n	8008048 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2202      	movs	r2, #2
 8007ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fbd2 	bl	80087a0 <TIM_SlaveTimer_SetConfig>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d009      	beq.n	8008016 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2201      	movs	r2, #1
 8008006:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e018      	b.n	8008048 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68da      	ldr	r2, [r3, #12]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008024:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008034:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008058:	bf00      	nop
 800805a:	370c      	adds	r7, #12
 800805c:	46bd      	mov	sp, r7
 800805e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008062:	4770      	bx	lr

08008064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008064:	b480      	push	{r7}
 8008066:	b083      	sub	sp, #12
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800806c:	bf00      	nop
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b085      	sub	sp, #20
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	4a43      	ldr	r2, [pc, #268]	@ (80081d4 <TIM_Base_SetConfig+0x120>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d013      	beq.n	80080f4 <TIM_Base_SetConfig+0x40>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d2:	d00f      	beq.n	80080f4 <TIM_Base_SetConfig+0x40>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a40      	ldr	r2, [pc, #256]	@ (80081d8 <TIM_Base_SetConfig+0x124>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d00b      	beq.n	80080f4 <TIM_Base_SetConfig+0x40>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	4a3f      	ldr	r2, [pc, #252]	@ (80081dc <TIM_Base_SetConfig+0x128>)
 80080e0:	4293      	cmp	r3, r2
 80080e2:	d007      	beq.n	80080f4 <TIM_Base_SetConfig+0x40>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a3e      	ldr	r2, [pc, #248]	@ (80081e0 <TIM_Base_SetConfig+0x12c>)
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d003      	beq.n	80080f4 <TIM_Base_SetConfig+0x40>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a3d      	ldr	r2, [pc, #244]	@ (80081e4 <TIM_Base_SetConfig+0x130>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d108      	bne.n	8008106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a32      	ldr	r2, [pc, #200]	@ (80081d4 <TIM_Base_SetConfig+0x120>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d01f      	beq.n	800814e <TIM_Base_SetConfig+0x9a>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008114:	d01b      	beq.n	800814e <TIM_Base_SetConfig+0x9a>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a2f      	ldr	r2, [pc, #188]	@ (80081d8 <TIM_Base_SetConfig+0x124>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d017      	beq.n	800814e <TIM_Base_SetConfig+0x9a>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a2e      	ldr	r2, [pc, #184]	@ (80081dc <TIM_Base_SetConfig+0x128>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d013      	beq.n	800814e <TIM_Base_SetConfig+0x9a>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a2d      	ldr	r2, [pc, #180]	@ (80081e0 <TIM_Base_SetConfig+0x12c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d00f      	beq.n	800814e <TIM_Base_SetConfig+0x9a>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a2c      	ldr	r2, [pc, #176]	@ (80081e4 <TIM_Base_SetConfig+0x130>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d00b      	beq.n	800814e <TIM_Base_SetConfig+0x9a>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a2b      	ldr	r2, [pc, #172]	@ (80081e8 <TIM_Base_SetConfig+0x134>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d007      	beq.n	800814e <TIM_Base_SetConfig+0x9a>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a2a      	ldr	r2, [pc, #168]	@ (80081ec <TIM_Base_SetConfig+0x138>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d003      	beq.n	800814e <TIM_Base_SetConfig+0x9a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a29      	ldr	r2, [pc, #164]	@ (80081f0 <TIM_Base_SetConfig+0x13c>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d108      	bne.n	8008160 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008154:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	4313      	orrs	r3, r2
 800815e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	4313      	orrs	r3, r2
 800816c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	689a      	ldr	r2, [r3, #8]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	4a14      	ldr	r2, [pc, #80]	@ (80081d4 <TIM_Base_SetConfig+0x120>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d00f      	beq.n	80081a6 <TIM_Base_SetConfig+0xf2>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a16      	ldr	r2, [pc, #88]	@ (80081e4 <TIM_Base_SetConfig+0x130>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d00b      	beq.n	80081a6 <TIM_Base_SetConfig+0xf2>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a15      	ldr	r2, [pc, #84]	@ (80081e8 <TIM_Base_SetConfig+0x134>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d007      	beq.n	80081a6 <TIM_Base_SetConfig+0xf2>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a14      	ldr	r2, [pc, #80]	@ (80081ec <TIM_Base_SetConfig+0x138>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d003      	beq.n	80081a6 <TIM_Base_SetConfig+0xf2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a13      	ldr	r2, [pc, #76]	@ (80081f0 <TIM_Base_SetConfig+0x13c>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d103      	bne.n	80081ae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	691a      	ldr	r2, [r3, #16]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f043 0204 	orr.w	r2, r3, #4
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2201      	movs	r2, #1
 80081be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	601a      	str	r2, [r3, #0]
}
 80081c6:	bf00      	nop
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	40010000 	.word	0x40010000
 80081d8:	40000400 	.word	0x40000400
 80081dc:	40000800 	.word	0x40000800
 80081e0:	40000c00 	.word	0x40000c00
 80081e4:	40010400 	.word	0x40010400
 80081e8:	40014000 	.word	0x40014000
 80081ec:	40014400 	.word	0x40014400
 80081f0:	40014800 	.word	0x40014800

080081f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6a1b      	ldr	r3, [r3, #32]
 8008202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6a1b      	ldr	r3, [r3, #32]
 8008208:	f023 0201 	bic.w	r2, r3, #1
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	4b37      	ldr	r3, [pc, #220]	@ (80082fc <TIM_OC1_SetConfig+0x108>)
 8008220:	4013      	ands	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f023 0303 	bic.w	r3, r3, #3
 800822a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	4313      	orrs	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f023 0302 	bic.w	r3, r3, #2
 800823c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	4313      	orrs	r3, r2
 8008246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4a2d      	ldr	r2, [pc, #180]	@ (8008300 <TIM_OC1_SetConfig+0x10c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d00f      	beq.n	8008270 <TIM_OC1_SetConfig+0x7c>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a2c      	ldr	r2, [pc, #176]	@ (8008304 <TIM_OC1_SetConfig+0x110>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d00b      	beq.n	8008270 <TIM_OC1_SetConfig+0x7c>
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a2b      	ldr	r2, [pc, #172]	@ (8008308 <TIM_OC1_SetConfig+0x114>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d007      	beq.n	8008270 <TIM_OC1_SetConfig+0x7c>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	4a2a      	ldr	r2, [pc, #168]	@ (800830c <TIM_OC1_SetConfig+0x118>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d003      	beq.n	8008270 <TIM_OC1_SetConfig+0x7c>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a29      	ldr	r2, [pc, #164]	@ (8008310 <TIM_OC1_SetConfig+0x11c>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d10c      	bne.n	800828a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	f023 0308 	bic.w	r3, r3, #8
 8008276:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f023 0304 	bic.w	r3, r3, #4
 8008288:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a1c      	ldr	r2, [pc, #112]	@ (8008300 <TIM_OC1_SetConfig+0x10c>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d00f      	beq.n	80082b2 <TIM_OC1_SetConfig+0xbe>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a1b      	ldr	r2, [pc, #108]	@ (8008304 <TIM_OC1_SetConfig+0x110>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d00b      	beq.n	80082b2 <TIM_OC1_SetConfig+0xbe>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4a1a      	ldr	r2, [pc, #104]	@ (8008308 <TIM_OC1_SetConfig+0x114>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d007      	beq.n	80082b2 <TIM_OC1_SetConfig+0xbe>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a19      	ldr	r2, [pc, #100]	@ (800830c <TIM_OC1_SetConfig+0x118>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d003      	beq.n	80082b2 <TIM_OC1_SetConfig+0xbe>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a18      	ldr	r2, [pc, #96]	@ (8008310 <TIM_OC1_SetConfig+0x11c>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d111      	bne.n	80082d6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082b2:	693b      	ldr	r3, [r7, #16]
 80082b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80082c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	695b      	ldr	r3, [r3, #20]
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	693a      	ldr	r2, [r7, #16]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	621a      	str	r2, [r3, #32]
}
 80082f0:	bf00      	nop
 80082f2:	371c      	adds	r7, #28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr
 80082fc:	fffeff8f 	.word	0xfffeff8f
 8008300:	40010000 	.word	0x40010000
 8008304:	40010400 	.word	0x40010400
 8008308:	40014000 	.word	0x40014000
 800830c:	40014400 	.word	0x40014400
 8008310:	40014800 	.word	0x40014800

08008314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	f023 0210 	bic.w	r2, r3, #16
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	4b34      	ldr	r3, [pc, #208]	@ (8008410 <TIM_OC2_SetConfig+0xfc>)
 8008340:	4013      	ands	r3, r2
 8008342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800834a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4313      	orrs	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	f023 0320 	bic.w	r3, r3, #32
 800835e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	011b      	lsls	r3, r3, #4
 8008366:	697a      	ldr	r2, [r7, #20]
 8008368:	4313      	orrs	r3, r2
 800836a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a29      	ldr	r2, [pc, #164]	@ (8008414 <TIM_OC2_SetConfig+0x100>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d003      	beq.n	800837c <TIM_OC2_SetConfig+0x68>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a28      	ldr	r2, [pc, #160]	@ (8008418 <TIM_OC2_SetConfig+0x104>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d10d      	bne.n	8008398 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	68db      	ldr	r3, [r3, #12]
 8008388:	011b      	lsls	r3, r3, #4
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a1e      	ldr	r2, [pc, #120]	@ (8008414 <TIM_OC2_SetConfig+0x100>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d00f      	beq.n	80083c0 <TIM_OC2_SetConfig+0xac>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a1d      	ldr	r2, [pc, #116]	@ (8008418 <TIM_OC2_SetConfig+0x104>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00b      	beq.n	80083c0 <TIM_OC2_SetConfig+0xac>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a1c      	ldr	r2, [pc, #112]	@ (800841c <TIM_OC2_SetConfig+0x108>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d007      	beq.n	80083c0 <TIM_OC2_SetConfig+0xac>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a1b      	ldr	r2, [pc, #108]	@ (8008420 <TIM_OC2_SetConfig+0x10c>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_OC2_SetConfig+0xac>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a1a      	ldr	r2, [pc, #104]	@ (8008424 <TIM_OC2_SetConfig+0x110>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d113      	bne.n	80083e8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	695b      	ldr	r3, [r3, #20]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	4313      	orrs	r3, r2
 80083da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	693a      	ldr	r2, [r7, #16]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	685a      	ldr	r2, [r3, #4]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	697a      	ldr	r2, [r7, #20]
 8008400:	621a      	str	r2, [r3, #32]
}
 8008402:	bf00      	nop
 8008404:	371c      	adds	r7, #28
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	feff8fff 	.word	0xfeff8fff
 8008414:	40010000 	.word	0x40010000
 8008418:	40010400 	.word	0x40010400
 800841c:	40014000 	.word	0x40014000
 8008420:	40014400 	.word	0x40014400
 8008424:	40014800 	.word	0x40014800

08008428 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6a1b      	ldr	r3, [r3, #32]
 800843c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	4b33      	ldr	r3, [pc, #204]	@ (8008520 <TIM_OC3_SetConfig+0xf8>)
 8008454:	4013      	ands	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 0303 	bic.w	r3, r3, #3
 800845e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	4313      	orrs	r3, r2
 8008468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008470:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	021b      	lsls	r3, r3, #8
 8008478:	697a      	ldr	r2, [r7, #20]
 800847a:	4313      	orrs	r3, r2
 800847c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a28      	ldr	r2, [pc, #160]	@ (8008524 <TIM_OC3_SetConfig+0xfc>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d003      	beq.n	800848e <TIM_OC3_SetConfig+0x66>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a27      	ldr	r2, [pc, #156]	@ (8008528 <TIM_OC3_SetConfig+0x100>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d10d      	bne.n	80084aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008494:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	68db      	ldr	r3, [r3, #12]
 800849a:	021b      	lsls	r3, r3, #8
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	4313      	orrs	r3, r2
 80084a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008524 <TIM_OC3_SetConfig+0xfc>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d00f      	beq.n	80084d2 <TIM_OC3_SetConfig+0xaa>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a1c      	ldr	r2, [pc, #112]	@ (8008528 <TIM_OC3_SetConfig+0x100>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d00b      	beq.n	80084d2 <TIM_OC3_SetConfig+0xaa>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a1b      	ldr	r2, [pc, #108]	@ (800852c <TIM_OC3_SetConfig+0x104>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d007      	beq.n	80084d2 <TIM_OC3_SetConfig+0xaa>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a1a      	ldr	r2, [pc, #104]	@ (8008530 <TIM_OC3_SetConfig+0x108>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d003      	beq.n	80084d2 <TIM_OC3_SetConfig+0xaa>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	4a19      	ldr	r2, [pc, #100]	@ (8008534 <TIM_OC3_SetConfig+0x10c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d113      	bne.n	80084fa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	695b      	ldr	r3, [r3, #20]
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	011b      	lsls	r3, r3, #4
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	4313      	orrs	r3, r2
 80084f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	693a      	ldr	r2, [r7, #16]
 80084fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685a      	ldr	r2, [r3, #4]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	621a      	str	r2, [r3, #32]
}
 8008514:	bf00      	nop
 8008516:	371c      	adds	r7, #28
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	fffeff8f 	.word	0xfffeff8f
 8008524:	40010000 	.word	0x40010000
 8008528:	40010400 	.word	0x40010400
 800852c:	40014000 	.word	0x40014000
 8008530:	40014400 	.word	0x40014400
 8008534:	40014800 	.word	0x40014800

08008538 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008538:	b480      	push	{r7}
 800853a:	b087      	sub	sp, #28
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6a1b      	ldr	r3, [r3, #32]
 8008546:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1b      	ldr	r3, [r3, #32]
 800854c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008560:	68fa      	ldr	r2, [r7, #12]
 8008562:	4b24      	ldr	r3, [pc, #144]	@ (80085f4 <TIM_OC4_SetConfig+0xbc>)
 8008564:	4013      	ands	r3, r2
 8008566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800856e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	021b      	lsls	r3, r3, #8
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4313      	orrs	r3, r2
 800857a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008582:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	689b      	ldr	r3, [r3, #8]
 8008588:	031b      	lsls	r3, r3, #12
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	4313      	orrs	r3, r2
 800858e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a19      	ldr	r2, [pc, #100]	@ (80085f8 <TIM_OC4_SetConfig+0xc0>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d00f      	beq.n	80085b8 <TIM_OC4_SetConfig+0x80>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a18      	ldr	r2, [pc, #96]	@ (80085fc <TIM_OC4_SetConfig+0xc4>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d00b      	beq.n	80085b8 <TIM_OC4_SetConfig+0x80>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a17      	ldr	r2, [pc, #92]	@ (8008600 <TIM_OC4_SetConfig+0xc8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d007      	beq.n	80085b8 <TIM_OC4_SetConfig+0x80>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	4a16      	ldr	r2, [pc, #88]	@ (8008604 <TIM_OC4_SetConfig+0xcc>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d003      	beq.n	80085b8 <TIM_OC4_SetConfig+0x80>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	4a15      	ldr	r2, [pc, #84]	@ (8008608 <TIM_OC4_SetConfig+0xd0>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d109      	bne.n	80085cc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	695b      	ldr	r3, [r3, #20]
 80085c4:	019b      	lsls	r3, r3, #6
 80085c6:	697a      	ldr	r2, [r7, #20]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	621a      	str	r2, [r3, #32]
}
 80085e6:	bf00      	nop
 80085e8:	371c      	adds	r7, #28
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	feff8fff 	.word	0xfeff8fff
 80085f8:	40010000 	.word	0x40010000
 80085fc:	40010400 	.word	0x40010400
 8008600:	40014000 	.word	0x40014000
 8008604:	40014400 	.word	0x40014400
 8008608:	40014800 	.word	0x40014800

0800860c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800860c:	b480      	push	{r7}
 800860e:	b087      	sub	sp, #28
 8008610:	af00      	add	r7, sp, #0
 8008612:	6078      	str	r0, [r7, #4]
 8008614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6a1b      	ldr	r3, [r3, #32]
 800861a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	4b21      	ldr	r3, [pc, #132]	@ (80086bc <TIM_OC5_SetConfig+0xb0>)
 8008638:	4013      	ands	r3, r2
 800863a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	4313      	orrs	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800864c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	041b      	lsls	r3, r3, #16
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	4313      	orrs	r3, r2
 8008658:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	4a18      	ldr	r2, [pc, #96]	@ (80086c0 <TIM_OC5_SetConfig+0xb4>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d00f      	beq.n	8008682 <TIM_OC5_SetConfig+0x76>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	4a17      	ldr	r2, [pc, #92]	@ (80086c4 <TIM_OC5_SetConfig+0xb8>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d00b      	beq.n	8008682 <TIM_OC5_SetConfig+0x76>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	4a16      	ldr	r2, [pc, #88]	@ (80086c8 <TIM_OC5_SetConfig+0xbc>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d007      	beq.n	8008682 <TIM_OC5_SetConfig+0x76>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a15      	ldr	r2, [pc, #84]	@ (80086cc <TIM_OC5_SetConfig+0xc0>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d003      	beq.n	8008682 <TIM_OC5_SetConfig+0x76>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a14      	ldr	r2, [pc, #80]	@ (80086d0 <TIM_OC5_SetConfig+0xc4>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d109      	bne.n	8008696 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008688:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	695b      	ldr	r3, [r3, #20]
 800868e:	021b      	lsls	r3, r3, #8
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	4313      	orrs	r3, r2
 8008694:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	697a      	ldr	r2, [r7, #20]
 800869a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68fa      	ldr	r2, [r7, #12]
 80086a0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	685a      	ldr	r2, [r3, #4]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	621a      	str	r2, [r3, #32]
}
 80086b0:	bf00      	nop
 80086b2:	371c      	adds	r7, #28
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	fffeff8f 	.word	0xfffeff8f
 80086c0:	40010000 	.word	0x40010000
 80086c4:	40010400 	.word	0x40010400
 80086c8:	40014000 	.word	0x40014000
 80086cc:	40014400 	.word	0x40014400
 80086d0:	40014800 	.word	0x40014800

080086d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a1b      	ldr	r3, [r3, #32]
 80086e8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80086fc:	68fa      	ldr	r2, [r7, #12]
 80086fe:	4b22      	ldr	r3, [pc, #136]	@ (8008788 <TIM_OC6_SetConfig+0xb4>)
 8008700:	4013      	ands	r3, r2
 8008702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	021b      	lsls	r3, r3, #8
 800870a:	68fa      	ldr	r2, [r7, #12]
 800870c:	4313      	orrs	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008716:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	051b      	lsls	r3, r3, #20
 800871e:	693a      	ldr	r2, [r7, #16]
 8008720:	4313      	orrs	r3, r2
 8008722:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	4a19      	ldr	r2, [pc, #100]	@ (800878c <TIM_OC6_SetConfig+0xb8>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d00f      	beq.n	800874c <TIM_OC6_SetConfig+0x78>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	4a18      	ldr	r2, [pc, #96]	@ (8008790 <TIM_OC6_SetConfig+0xbc>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d00b      	beq.n	800874c <TIM_OC6_SetConfig+0x78>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	4a17      	ldr	r2, [pc, #92]	@ (8008794 <TIM_OC6_SetConfig+0xc0>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d007      	beq.n	800874c <TIM_OC6_SetConfig+0x78>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a16      	ldr	r2, [pc, #88]	@ (8008798 <TIM_OC6_SetConfig+0xc4>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d003      	beq.n	800874c <TIM_OC6_SetConfig+0x78>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a15      	ldr	r2, [pc, #84]	@ (800879c <TIM_OC6_SetConfig+0xc8>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d109      	bne.n	8008760 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008752:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	029b      	lsls	r3, r3, #10
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	4313      	orrs	r3, r2
 800875e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	697a      	ldr	r2, [r7, #20]
 8008764:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	685a      	ldr	r2, [r3, #4]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	693a      	ldr	r2, [r7, #16]
 8008778:	621a      	str	r2, [r3, #32]
}
 800877a:	bf00      	nop
 800877c:	371c      	adds	r7, #28
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	feff8fff 	.word	0xfeff8fff
 800878c:	40010000 	.word	0x40010000
 8008790:	40010400 	.word	0x40010400
 8008794:	40014000 	.word	0x40014000
 8008798:	40014400 	.word	0x40014400
 800879c:	40014800 	.word	0x40014800

080087a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80087aa:	2300      	movs	r3, #0
 80087ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	4b65      	ldr	r3, [pc, #404]	@ (8008950 <TIM_SlaveTimer_SetConfig+0x1b0>)
 80087ba:	4013      	ands	r3, r2
 80087bc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	693a      	ldr	r2, [r7, #16]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	4b62      	ldr	r3, [pc, #392]	@ (8008954 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80087cc:	4013      	ands	r3, r2
 80087ce:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	693a      	ldr	r2, [r7, #16]
 80087e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	4a5c      	ldr	r2, [pc, #368]	@ (8008958 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	f000 80ab 	beq.w	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087ee:	4a5a      	ldr	r2, [pc, #360]	@ (8008958 <TIM_SlaveTimer_SetConfig+0x1b8>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	f200 80a4 	bhi.w	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 80087f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80087fa:	f000 80a3 	beq.w	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 80087fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008802:	f200 809c 	bhi.w	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 8008806:	4a55      	ldr	r2, [pc, #340]	@ (800895c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008808:	4293      	cmp	r3, r2
 800880a:	f000 809b 	beq.w	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 800880e:	4a53      	ldr	r2, [pc, #332]	@ (800895c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8008810:	4293      	cmp	r3, r2
 8008812:	f200 8094 	bhi.w	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 8008816:	4a52      	ldr	r2, [pc, #328]	@ (8008960 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8008818:	4293      	cmp	r3, r2
 800881a:	f000 8093 	beq.w	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 800881e:	4a50      	ldr	r2, [pc, #320]	@ (8008960 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8008820:	4293      	cmp	r3, r2
 8008822:	f200 808c 	bhi.w	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 8008826:	4a4f      	ldr	r2, [pc, #316]	@ (8008964 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8008828:	4293      	cmp	r3, r2
 800882a:	f000 808b 	beq.w	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 800882e:	4a4d      	ldr	r2, [pc, #308]	@ (8008964 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8008830:	4293      	cmp	r3, r2
 8008832:	f200 8084 	bhi.w	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 8008836:	4a4c      	ldr	r2, [pc, #304]	@ (8008968 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8008838:	4293      	cmp	r3, r2
 800883a:	f000 8083 	beq.w	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 800883e:	4a4a      	ldr	r2, [pc, #296]	@ (8008968 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8008840:	4293      	cmp	r3, r2
 8008842:	d87c      	bhi.n	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 8008844:	4a49      	ldr	r2, [pc, #292]	@ (800896c <TIM_SlaveTimer_SetConfig+0x1cc>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d07c      	beq.n	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 800884a:	4a48      	ldr	r2, [pc, #288]	@ (800896c <TIM_SlaveTimer_SetConfig+0x1cc>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d876      	bhi.n	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 8008850:	4a47      	ldr	r2, [pc, #284]	@ (8008970 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d076      	beq.n	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008856:	4a46      	ldr	r2, [pc, #280]	@ (8008970 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d870      	bhi.n	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 800885c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008860:	d070      	beq.n	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008862:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8008866:	d86a      	bhi.n	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 8008868:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800886c:	d06a      	beq.n	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 800886e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008872:	d864      	bhi.n	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 8008874:	2b70      	cmp	r3, #112	@ 0x70
 8008876:	d01a      	beq.n	80088ae <TIM_SlaveTimer_SetConfig+0x10e>
 8008878:	2b70      	cmp	r3, #112	@ 0x70
 800887a:	d860      	bhi.n	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 800887c:	2b60      	cmp	r3, #96	@ 0x60
 800887e:	d054      	beq.n	800892a <TIM_SlaveTimer_SetConfig+0x18a>
 8008880:	2b60      	cmp	r3, #96	@ 0x60
 8008882:	d85c      	bhi.n	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 8008884:	2b50      	cmp	r3, #80	@ 0x50
 8008886:	d046      	beq.n	8008916 <TIM_SlaveTimer_SetConfig+0x176>
 8008888:	2b50      	cmp	r3, #80	@ 0x50
 800888a:	d858      	bhi.n	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 800888c:	2b40      	cmp	r3, #64	@ 0x40
 800888e:	d019      	beq.n	80088c4 <TIM_SlaveTimer_SetConfig+0x124>
 8008890:	2b40      	cmp	r3, #64	@ 0x40
 8008892:	d854      	bhi.n	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 8008894:	2b30      	cmp	r3, #48	@ 0x30
 8008896:	d055      	beq.n	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 8008898:	2b30      	cmp	r3, #48	@ 0x30
 800889a:	d850      	bhi.n	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 800889c:	2b20      	cmp	r3, #32
 800889e:	d051      	beq.n	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 80088a0:	2b20      	cmp	r3, #32
 80088a2:	d84c      	bhi.n	800893e <TIM_SlaveTimer_SetConfig+0x19e>
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d04d      	beq.n	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 80088a8:	2b10      	cmp	r3, #16
 80088aa:	d04b      	beq.n	8008944 <TIM_SlaveTimer_SetConfig+0x1a4>
 80088ac:	e047      	b.n	800893e <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80088be:	f000 f8d7 	bl	8008a70 <TIM_ETR_SetConfig>
      break;
 80088c2:	e040      	b.n	8008946 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b05      	cmp	r3, #5
 80088ca:	d101      	bne.n	80088d0 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e03b      	b.n	8008948 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	6a1a      	ldr	r2, [r3, #32]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 0201 	bic.w	r2, r2, #1
 80088e6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80088f6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	011b      	lsls	r3, r3, #4
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	4313      	orrs	r3, r2
 8008902:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68ba      	ldr	r2, [r7, #8]
 800890a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68fa      	ldr	r2, [r7, #12]
 8008912:	621a      	str	r2, [r3, #32]
      break;
 8008914:	e017      	b.n	8008946 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800891a:	683b      	ldr	r3, [r7, #0]
 800891c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008922:	461a      	mov	r2, r3
 8008924:	f000 f826 	bl	8008974 <TIM_TI1_ConfigInputStage>
      break;
 8008928:	e00d      	b.n	8008946 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008936:	461a      	mov	r2, r3
 8008938:	f000 f84b 	bl	80089d2 <TIM_TI2_ConfigInputStage>
      break;
 800893c:	e003      	b.n	8008946 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	75fb      	strb	r3, [r7, #23]
      break;
 8008942:	e000      	b.n	8008946 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8008944:	bf00      	nop
  }

  return status;
 8008946:	7dfb      	ldrb	r3, [r7, #23]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3718      	adds	r7, #24
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}
 8008950:	ffcfff8f 	.word	0xffcfff8f
 8008954:	fffefff8 	.word	0xfffefff8
 8008958:	00200010 	.word	0x00200010
 800895c:	00100070 	.word	0x00100070
 8008960:	00100060 	.word	0x00100060
 8008964:	00100050 	.word	0x00100050
 8008968:	00100040 	.word	0x00100040
 800896c:	00100030 	.word	0x00100030
 8008970:	00100020 	.word	0x00100020

08008974 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008974:	b480      	push	{r7}
 8008976:	b087      	sub	sp, #28
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6a1b      	ldr	r3, [r3, #32]
 8008984:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	f023 0201 	bic.w	r2, r3, #1
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800899e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	011b      	lsls	r3, r3, #4
 80089a4:	693a      	ldr	r2, [r7, #16]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	f023 030a 	bic.w	r3, r3, #10
 80089b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	693a      	ldr	r2, [r7, #16]
 80089be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	621a      	str	r2, [r3, #32]
}
 80089c6:	bf00      	nop
 80089c8:	371c      	adds	r7, #28
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b087      	sub	sp, #28
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	f023 0210 	bic.w	r2, r3, #16
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	699b      	ldr	r3, [r3, #24]
 80089f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80089fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	031b      	lsls	r3, r3, #12
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a0e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	011b      	lsls	r3, r3, #4
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	621a      	str	r2, [r3, #32]
}
 8008a26:	bf00      	nop
 8008a28:	371c      	adds	r7, #28
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
	...

08008a34 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a44:	68fa      	ldr	r2, [r7, #12]
 8008a46:	4b09      	ldr	r3, [pc, #36]	@ (8008a6c <TIM_ITRx_SetConfig+0x38>)
 8008a48:	4013      	ands	r3, r2
 8008a4a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	f043 0307 	orr.w	r3, r3, #7
 8008a56:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68fa      	ldr	r2, [r7, #12]
 8008a5c:	609a      	str	r2, [r3, #8]
}
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	ffcfff8f 	.word	0xffcfff8f

08008a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b087      	sub	sp, #28
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	60f8      	str	r0, [r7, #12]
 8008a78:	60b9      	str	r1, [r7, #8]
 8008a7a:	607a      	str	r2, [r7, #4]
 8008a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	021a      	lsls	r2, r3, #8
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	431a      	orrs	r2, r3
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	697a      	ldr	r2, [r7, #20]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	697a      	ldr	r2, [r7, #20]
 8008aa2:	609a      	str	r2, [r3, #8]
}
 8008aa4:	bf00      	nop
 8008aa6:	371c      	adds	r7, #28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f003 031f 	and.w	r3, r3, #31
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6a1a      	ldr	r2, [r3, #32]
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	401a      	ands	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6a1a      	ldr	r2, [r3, #32]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	f003 031f 	and.w	r3, r3, #31
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ae8:	431a      	orrs	r2, r3
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	621a      	str	r2, [r3, #32]
}
 8008aee:	bf00      	nop
 8008af0:	371c      	adds	r7, #28
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
	...

08008afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d101      	bne.n	8008b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e06d      	b.n	8008bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a30      	ldr	r2, [pc, #192]	@ (8008bfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d004      	beq.n	8008b48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a2f      	ldr	r2, [pc, #188]	@ (8008c00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d108      	bne.n	8008b5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	68fa      	ldr	r2, [r7, #12]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a20      	ldr	r2, [pc, #128]	@ (8008bfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d022      	beq.n	8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b86:	d01d      	beq.n	8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8008c04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d018      	beq.n	8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a1c      	ldr	r2, [pc, #112]	@ (8008c08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d013      	beq.n	8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8008c0c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00e      	beq.n	8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a15      	ldr	r2, [pc, #84]	@ (8008c00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d009      	beq.n	8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a16      	ldr	r2, [pc, #88]	@ (8008c10 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d004      	beq.n	8008bc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a15      	ldr	r2, [pc, #84]	@ (8008c14 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d10c      	bne.n	8008bde <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	68ba      	ldr	r2, [r7, #8]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68ba      	ldr	r2, [r7, #8]
 8008bdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	40010000 	.word	0x40010000
 8008c00:	40010400 	.word	0x40010400
 8008c04:	40000400 	.word	0x40000400
 8008c08:	40000800 	.word	0x40000800
 8008c0c:	40000c00 	.word	0x40000c00
 8008c10:	40001800 	.word	0x40001800
 8008c14:	40014000 	.word	0x40014000

08008c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b082      	sub	sp, #8
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e042      	b.n	8008cec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d106      	bne.n	8008c7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7f9 f87b 	bl	8001d74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2224      	movs	r2, #36	@ 0x24
 8008c82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f022 0201 	bic.w	r2, r2, #1
 8008c94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 fe1e 	bl	80098e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 f8b3 	bl	8008e10 <UART_SetConfig>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d101      	bne.n	8008cb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e01b      	b.n	8008cec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	689a      	ldr	r2, [r3, #8]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f042 0201 	orr.w	r2, r2, #1
 8008ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fe9d 	bl	8009a24 <UART_CheckIdleState>
 8008cea:	4603      	mov	r3, r0
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b08a      	sub	sp, #40	@ 0x28
 8008cf8:	af02      	add	r7, sp, #8
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	603b      	str	r3, [r7, #0]
 8008d00:	4613      	mov	r3, r2
 8008d02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d0a:	2b20      	cmp	r3, #32
 8008d0c:	d17b      	bne.n	8008e06 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d002      	beq.n	8008d1a <HAL_UART_Transmit+0x26>
 8008d14:	88fb      	ldrh	r3, [r7, #6]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d101      	bne.n	8008d1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e074      	b.n	8008e08 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2221      	movs	r2, #33	@ 0x21
 8008d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d2e:	f7f9 f9f9 	bl	8002124 <HAL_GetTick>
 8008d32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	88fa      	ldrh	r2, [r7, #6]
 8008d38:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	88fa      	ldrh	r2, [r7, #6]
 8008d40:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d4c:	d108      	bne.n	8008d60 <HAL_UART_Transmit+0x6c>
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	691b      	ldr	r3, [r3, #16]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d104      	bne.n	8008d60 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008d56:	2300      	movs	r3, #0
 8008d58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	61bb      	str	r3, [r7, #24]
 8008d5e:	e003      	b.n	8008d68 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d64:	2300      	movs	r3, #0
 8008d66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d68:	e030      	b.n	8008dcc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	2200      	movs	r2, #0
 8008d72:	2180      	movs	r1, #128	@ 0x80
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 feff 	bl	8009b78 <UART_WaitOnFlagUntilTimeout>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2220      	movs	r2, #32
 8008d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e03d      	b.n	8008e08 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10b      	bne.n	8008daa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	881b      	ldrh	r3, [r3, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008da0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	3302      	adds	r3, #2
 8008da6:	61bb      	str	r3, [r7, #24]
 8008da8:	e007      	b.n	8008dba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	781a      	ldrb	r2, [r3, #0]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	3301      	adds	r3, #1
 8008db8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	3b01      	subs	r3, #1
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d1c8      	bne.n	8008d6a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008dd8:	683b      	ldr	r3, [r7, #0]
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2200      	movs	r2, #0
 8008de0:	2140      	movs	r1, #64	@ 0x40
 8008de2:	68f8      	ldr	r0, [r7, #12]
 8008de4:	f000 fec8 	bl	8009b78 <UART_WaitOnFlagUntilTimeout>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d005      	beq.n	8008dfa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2220      	movs	r2, #32
 8008df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e006      	b.n	8008e08 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2220      	movs	r2, #32
 8008dfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008e02:	2300      	movs	r3, #0
 8008e04:	e000      	b.n	8008e08 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008e06:	2302      	movs	r3, #2
  }
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3720      	adds	r7, #32
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}

08008e10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e14:	b092      	sub	sp, #72	@ 0x48
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	689a      	ldr	r2, [r3, #8]
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	431a      	orrs	r2, r3
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	695b      	ldr	r3, [r3, #20]
 8008e2e:	431a      	orrs	r2, r3
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	69db      	ldr	r3, [r3, #28]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	4bbe      	ldr	r3, [pc, #760]	@ (8009138 <UART_SetConfig+0x328>)
 8008e40:	4013      	ands	r3, r2
 8008e42:	697a      	ldr	r2, [r7, #20]
 8008e44:	6812      	ldr	r2, [r2, #0]
 8008e46:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e48:	430b      	orrs	r3, r1
 8008e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	685b      	ldr	r3, [r3, #4]
 8008e52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	430a      	orrs	r2, r1
 8008e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4ab3      	ldr	r2, [pc, #716]	@ (800913c <UART_SetConfig+0x32c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d004      	beq.n	8008e7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689a      	ldr	r2, [r3, #8]
 8008e82:	4baf      	ldr	r3, [pc, #700]	@ (8009140 <UART_SetConfig+0x330>)
 8008e84:	4013      	ands	r3, r2
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	6812      	ldr	r2, [r2, #0]
 8008e8a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008e8c:	430b      	orrs	r3, r1
 8008e8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e96:	f023 010f 	bic.w	r1, r3, #15
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	430a      	orrs	r2, r1
 8008ea4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4aa6      	ldr	r2, [pc, #664]	@ (8009144 <UART_SetConfig+0x334>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d177      	bne.n	8008fa0 <UART_SetConfig+0x190>
 8008eb0:	4ba5      	ldr	r3, [pc, #660]	@ (8009148 <UART_SetConfig+0x338>)
 8008eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008eb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008eb8:	2b28      	cmp	r3, #40	@ 0x28
 8008eba:	d86d      	bhi.n	8008f98 <UART_SetConfig+0x188>
 8008ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ec4 <UART_SetConfig+0xb4>)
 8008ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec2:	bf00      	nop
 8008ec4:	08008f69 	.word	0x08008f69
 8008ec8:	08008f99 	.word	0x08008f99
 8008ecc:	08008f99 	.word	0x08008f99
 8008ed0:	08008f99 	.word	0x08008f99
 8008ed4:	08008f99 	.word	0x08008f99
 8008ed8:	08008f99 	.word	0x08008f99
 8008edc:	08008f99 	.word	0x08008f99
 8008ee0:	08008f99 	.word	0x08008f99
 8008ee4:	08008f71 	.word	0x08008f71
 8008ee8:	08008f99 	.word	0x08008f99
 8008eec:	08008f99 	.word	0x08008f99
 8008ef0:	08008f99 	.word	0x08008f99
 8008ef4:	08008f99 	.word	0x08008f99
 8008ef8:	08008f99 	.word	0x08008f99
 8008efc:	08008f99 	.word	0x08008f99
 8008f00:	08008f99 	.word	0x08008f99
 8008f04:	08008f79 	.word	0x08008f79
 8008f08:	08008f99 	.word	0x08008f99
 8008f0c:	08008f99 	.word	0x08008f99
 8008f10:	08008f99 	.word	0x08008f99
 8008f14:	08008f99 	.word	0x08008f99
 8008f18:	08008f99 	.word	0x08008f99
 8008f1c:	08008f99 	.word	0x08008f99
 8008f20:	08008f99 	.word	0x08008f99
 8008f24:	08008f81 	.word	0x08008f81
 8008f28:	08008f99 	.word	0x08008f99
 8008f2c:	08008f99 	.word	0x08008f99
 8008f30:	08008f99 	.word	0x08008f99
 8008f34:	08008f99 	.word	0x08008f99
 8008f38:	08008f99 	.word	0x08008f99
 8008f3c:	08008f99 	.word	0x08008f99
 8008f40:	08008f99 	.word	0x08008f99
 8008f44:	08008f89 	.word	0x08008f89
 8008f48:	08008f99 	.word	0x08008f99
 8008f4c:	08008f99 	.word	0x08008f99
 8008f50:	08008f99 	.word	0x08008f99
 8008f54:	08008f99 	.word	0x08008f99
 8008f58:	08008f99 	.word	0x08008f99
 8008f5c:	08008f99 	.word	0x08008f99
 8008f60:	08008f99 	.word	0x08008f99
 8008f64:	08008f91 	.word	0x08008f91
 8008f68:	2301      	movs	r3, #1
 8008f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f6e:	e222      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8008f70:	2304      	movs	r3, #4
 8008f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f76:	e21e      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8008f78:	2308      	movs	r3, #8
 8008f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f7e:	e21a      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8008f80:	2310      	movs	r3, #16
 8008f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f86:	e216      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8008f88:	2320      	movs	r3, #32
 8008f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f8e:	e212      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8008f90:	2340      	movs	r3, #64	@ 0x40
 8008f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f96:	e20e      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8008f98:	2380      	movs	r3, #128	@ 0x80
 8008f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008f9e:	e20a      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4a69      	ldr	r2, [pc, #420]	@ (800914c <UART_SetConfig+0x33c>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d130      	bne.n	800900c <UART_SetConfig+0x1fc>
 8008faa:	4b67      	ldr	r3, [pc, #412]	@ (8009148 <UART_SetConfig+0x338>)
 8008fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fae:	f003 0307 	and.w	r3, r3, #7
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	d826      	bhi.n	8009004 <UART_SetConfig+0x1f4>
 8008fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8008fbc <UART_SetConfig+0x1ac>)
 8008fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fbc:	08008fd5 	.word	0x08008fd5
 8008fc0:	08008fdd 	.word	0x08008fdd
 8008fc4:	08008fe5 	.word	0x08008fe5
 8008fc8:	08008fed 	.word	0x08008fed
 8008fcc:	08008ff5 	.word	0x08008ff5
 8008fd0:	08008ffd 	.word	0x08008ffd
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fda:	e1ec      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8008fdc:	2304      	movs	r3, #4
 8008fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fe2:	e1e8      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8008fe4:	2308      	movs	r3, #8
 8008fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008fea:	e1e4      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8008fec:	2310      	movs	r3, #16
 8008fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ff2:	e1e0      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8008ff4:	2320      	movs	r3, #32
 8008ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008ffa:	e1dc      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8008ffc:	2340      	movs	r3, #64	@ 0x40
 8008ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009002:	e1d8      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009004:	2380      	movs	r3, #128	@ 0x80
 8009006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800900a:	e1d4      	b.n	80093b6 <UART_SetConfig+0x5a6>
 800900c:	697b      	ldr	r3, [r7, #20]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a4f      	ldr	r2, [pc, #316]	@ (8009150 <UART_SetConfig+0x340>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d130      	bne.n	8009078 <UART_SetConfig+0x268>
 8009016:	4b4c      	ldr	r3, [pc, #304]	@ (8009148 <UART_SetConfig+0x338>)
 8009018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800901a:	f003 0307 	and.w	r3, r3, #7
 800901e:	2b05      	cmp	r3, #5
 8009020:	d826      	bhi.n	8009070 <UART_SetConfig+0x260>
 8009022:	a201      	add	r2, pc, #4	@ (adr r2, 8009028 <UART_SetConfig+0x218>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	08009041 	.word	0x08009041
 800902c:	08009049 	.word	0x08009049
 8009030:	08009051 	.word	0x08009051
 8009034:	08009059 	.word	0x08009059
 8009038:	08009061 	.word	0x08009061
 800903c:	08009069 	.word	0x08009069
 8009040:	2300      	movs	r3, #0
 8009042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009046:	e1b6      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009048:	2304      	movs	r3, #4
 800904a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800904e:	e1b2      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009050:	2308      	movs	r3, #8
 8009052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009056:	e1ae      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009058:	2310      	movs	r3, #16
 800905a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800905e:	e1aa      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009060:	2320      	movs	r3, #32
 8009062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009066:	e1a6      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009068:	2340      	movs	r3, #64	@ 0x40
 800906a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800906e:	e1a2      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009070:	2380      	movs	r3, #128	@ 0x80
 8009072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009076:	e19e      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a35      	ldr	r2, [pc, #212]	@ (8009154 <UART_SetConfig+0x344>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d130      	bne.n	80090e4 <UART_SetConfig+0x2d4>
 8009082:	4b31      	ldr	r3, [pc, #196]	@ (8009148 <UART_SetConfig+0x338>)
 8009084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	2b05      	cmp	r3, #5
 800908c:	d826      	bhi.n	80090dc <UART_SetConfig+0x2cc>
 800908e:	a201      	add	r2, pc, #4	@ (adr r2, 8009094 <UART_SetConfig+0x284>)
 8009090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009094:	080090ad 	.word	0x080090ad
 8009098:	080090b5 	.word	0x080090b5
 800909c:	080090bd 	.word	0x080090bd
 80090a0:	080090c5 	.word	0x080090c5
 80090a4:	080090cd 	.word	0x080090cd
 80090a8:	080090d5 	.word	0x080090d5
 80090ac:	2300      	movs	r3, #0
 80090ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090b2:	e180      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80090b4:	2304      	movs	r3, #4
 80090b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ba:	e17c      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80090bc:	2308      	movs	r3, #8
 80090be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090c2:	e178      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80090c4:	2310      	movs	r3, #16
 80090c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090ca:	e174      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80090cc:	2320      	movs	r3, #32
 80090ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090d2:	e170      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80090d4:	2340      	movs	r3, #64	@ 0x40
 80090d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090da:	e16c      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80090dc:	2380      	movs	r3, #128	@ 0x80
 80090de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80090e2:	e168      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009158 <UART_SetConfig+0x348>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d142      	bne.n	8009174 <UART_SetConfig+0x364>
 80090ee:	4b16      	ldr	r3, [pc, #88]	@ (8009148 <UART_SetConfig+0x338>)
 80090f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090f2:	f003 0307 	and.w	r3, r3, #7
 80090f6:	2b05      	cmp	r3, #5
 80090f8:	d838      	bhi.n	800916c <UART_SetConfig+0x35c>
 80090fa:	a201      	add	r2, pc, #4	@ (adr r2, 8009100 <UART_SetConfig+0x2f0>)
 80090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009100:	08009119 	.word	0x08009119
 8009104:	08009121 	.word	0x08009121
 8009108:	08009129 	.word	0x08009129
 800910c:	08009131 	.word	0x08009131
 8009110:	0800915d 	.word	0x0800915d
 8009114:	08009165 	.word	0x08009165
 8009118:	2300      	movs	r3, #0
 800911a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800911e:	e14a      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009120:	2304      	movs	r3, #4
 8009122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009126:	e146      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009128:	2308      	movs	r3, #8
 800912a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800912e:	e142      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009130:	2310      	movs	r3, #16
 8009132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009136:	e13e      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009138:	cfff69f3 	.word	0xcfff69f3
 800913c:	58000c00 	.word	0x58000c00
 8009140:	11fff4ff 	.word	0x11fff4ff
 8009144:	40011000 	.word	0x40011000
 8009148:	58024400 	.word	0x58024400
 800914c:	40004400 	.word	0x40004400
 8009150:	40004800 	.word	0x40004800
 8009154:	40004c00 	.word	0x40004c00
 8009158:	40005000 	.word	0x40005000
 800915c:	2320      	movs	r3, #32
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009162:	e128      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009164:	2340      	movs	r3, #64	@ 0x40
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800916a:	e124      	b.n	80093b6 <UART_SetConfig+0x5a6>
 800916c:	2380      	movs	r3, #128	@ 0x80
 800916e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009172:	e120      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4acb      	ldr	r2, [pc, #812]	@ (80094a8 <UART_SetConfig+0x698>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d176      	bne.n	800926c <UART_SetConfig+0x45c>
 800917e:	4bcb      	ldr	r3, [pc, #812]	@ (80094ac <UART_SetConfig+0x69c>)
 8009180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009182:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009186:	2b28      	cmp	r3, #40	@ 0x28
 8009188:	d86c      	bhi.n	8009264 <UART_SetConfig+0x454>
 800918a:	a201      	add	r2, pc, #4	@ (adr r2, 8009190 <UART_SetConfig+0x380>)
 800918c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009190:	08009235 	.word	0x08009235
 8009194:	08009265 	.word	0x08009265
 8009198:	08009265 	.word	0x08009265
 800919c:	08009265 	.word	0x08009265
 80091a0:	08009265 	.word	0x08009265
 80091a4:	08009265 	.word	0x08009265
 80091a8:	08009265 	.word	0x08009265
 80091ac:	08009265 	.word	0x08009265
 80091b0:	0800923d 	.word	0x0800923d
 80091b4:	08009265 	.word	0x08009265
 80091b8:	08009265 	.word	0x08009265
 80091bc:	08009265 	.word	0x08009265
 80091c0:	08009265 	.word	0x08009265
 80091c4:	08009265 	.word	0x08009265
 80091c8:	08009265 	.word	0x08009265
 80091cc:	08009265 	.word	0x08009265
 80091d0:	08009245 	.word	0x08009245
 80091d4:	08009265 	.word	0x08009265
 80091d8:	08009265 	.word	0x08009265
 80091dc:	08009265 	.word	0x08009265
 80091e0:	08009265 	.word	0x08009265
 80091e4:	08009265 	.word	0x08009265
 80091e8:	08009265 	.word	0x08009265
 80091ec:	08009265 	.word	0x08009265
 80091f0:	0800924d 	.word	0x0800924d
 80091f4:	08009265 	.word	0x08009265
 80091f8:	08009265 	.word	0x08009265
 80091fc:	08009265 	.word	0x08009265
 8009200:	08009265 	.word	0x08009265
 8009204:	08009265 	.word	0x08009265
 8009208:	08009265 	.word	0x08009265
 800920c:	08009265 	.word	0x08009265
 8009210:	08009255 	.word	0x08009255
 8009214:	08009265 	.word	0x08009265
 8009218:	08009265 	.word	0x08009265
 800921c:	08009265 	.word	0x08009265
 8009220:	08009265 	.word	0x08009265
 8009224:	08009265 	.word	0x08009265
 8009228:	08009265 	.word	0x08009265
 800922c:	08009265 	.word	0x08009265
 8009230:	0800925d 	.word	0x0800925d
 8009234:	2301      	movs	r3, #1
 8009236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923a:	e0bc      	b.n	80093b6 <UART_SetConfig+0x5a6>
 800923c:	2304      	movs	r3, #4
 800923e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009242:	e0b8      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009244:	2308      	movs	r3, #8
 8009246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800924a:	e0b4      	b.n	80093b6 <UART_SetConfig+0x5a6>
 800924c:	2310      	movs	r3, #16
 800924e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009252:	e0b0      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009254:	2320      	movs	r3, #32
 8009256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800925a:	e0ac      	b.n	80093b6 <UART_SetConfig+0x5a6>
 800925c:	2340      	movs	r3, #64	@ 0x40
 800925e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009262:	e0a8      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009264:	2380      	movs	r3, #128	@ 0x80
 8009266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800926a:	e0a4      	b.n	80093b6 <UART_SetConfig+0x5a6>
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a8f      	ldr	r2, [pc, #572]	@ (80094b0 <UART_SetConfig+0x6a0>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d130      	bne.n	80092d8 <UART_SetConfig+0x4c8>
 8009276:	4b8d      	ldr	r3, [pc, #564]	@ (80094ac <UART_SetConfig+0x69c>)
 8009278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800927a:	f003 0307 	and.w	r3, r3, #7
 800927e:	2b05      	cmp	r3, #5
 8009280:	d826      	bhi.n	80092d0 <UART_SetConfig+0x4c0>
 8009282:	a201      	add	r2, pc, #4	@ (adr r2, 8009288 <UART_SetConfig+0x478>)
 8009284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009288:	080092a1 	.word	0x080092a1
 800928c:	080092a9 	.word	0x080092a9
 8009290:	080092b1 	.word	0x080092b1
 8009294:	080092b9 	.word	0x080092b9
 8009298:	080092c1 	.word	0x080092c1
 800929c:	080092c9 	.word	0x080092c9
 80092a0:	2300      	movs	r3, #0
 80092a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092a6:	e086      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80092a8:	2304      	movs	r3, #4
 80092aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ae:	e082      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80092b0:	2308      	movs	r3, #8
 80092b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092b6:	e07e      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80092b8:	2310      	movs	r3, #16
 80092ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092be:	e07a      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80092c0:	2320      	movs	r3, #32
 80092c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092c6:	e076      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80092c8:	2340      	movs	r3, #64	@ 0x40
 80092ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092ce:	e072      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80092d0:	2380      	movs	r3, #128	@ 0x80
 80092d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80092d6:	e06e      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a75      	ldr	r2, [pc, #468]	@ (80094b4 <UART_SetConfig+0x6a4>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d130      	bne.n	8009344 <UART_SetConfig+0x534>
 80092e2:	4b72      	ldr	r3, [pc, #456]	@ (80094ac <UART_SetConfig+0x69c>)
 80092e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092e6:	f003 0307 	and.w	r3, r3, #7
 80092ea:	2b05      	cmp	r3, #5
 80092ec:	d826      	bhi.n	800933c <UART_SetConfig+0x52c>
 80092ee:	a201      	add	r2, pc, #4	@ (adr r2, 80092f4 <UART_SetConfig+0x4e4>)
 80092f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092f4:	0800930d 	.word	0x0800930d
 80092f8:	08009315 	.word	0x08009315
 80092fc:	0800931d 	.word	0x0800931d
 8009300:	08009325 	.word	0x08009325
 8009304:	0800932d 	.word	0x0800932d
 8009308:	08009335 	.word	0x08009335
 800930c:	2300      	movs	r3, #0
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009312:	e050      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009314:	2304      	movs	r3, #4
 8009316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800931a:	e04c      	b.n	80093b6 <UART_SetConfig+0x5a6>
 800931c:	2308      	movs	r3, #8
 800931e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009322:	e048      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009324:	2310      	movs	r3, #16
 8009326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800932a:	e044      	b.n	80093b6 <UART_SetConfig+0x5a6>
 800932c:	2320      	movs	r3, #32
 800932e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009332:	e040      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009334:	2340      	movs	r3, #64	@ 0x40
 8009336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800933a:	e03c      	b.n	80093b6 <UART_SetConfig+0x5a6>
 800933c:	2380      	movs	r3, #128	@ 0x80
 800933e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009342:	e038      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a5b      	ldr	r2, [pc, #364]	@ (80094b8 <UART_SetConfig+0x6a8>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d130      	bne.n	80093b0 <UART_SetConfig+0x5a0>
 800934e:	4b57      	ldr	r3, [pc, #348]	@ (80094ac <UART_SetConfig+0x69c>)
 8009350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009352:	f003 0307 	and.w	r3, r3, #7
 8009356:	2b05      	cmp	r3, #5
 8009358:	d826      	bhi.n	80093a8 <UART_SetConfig+0x598>
 800935a:	a201      	add	r2, pc, #4	@ (adr r2, 8009360 <UART_SetConfig+0x550>)
 800935c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009360:	08009379 	.word	0x08009379
 8009364:	08009381 	.word	0x08009381
 8009368:	08009389 	.word	0x08009389
 800936c:	08009391 	.word	0x08009391
 8009370:	08009399 	.word	0x08009399
 8009374:	080093a1 	.word	0x080093a1
 8009378:	2302      	movs	r3, #2
 800937a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800937e:	e01a      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009380:	2304      	movs	r3, #4
 8009382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009386:	e016      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009388:	2308      	movs	r3, #8
 800938a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800938e:	e012      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009390:	2310      	movs	r3, #16
 8009392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009396:	e00e      	b.n	80093b6 <UART_SetConfig+0x5a6>
 8009398:	2320      	movs	r3, #32
 800939a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800939e:	e00a      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80093a0:	2340      	movs	r3, #64	@ 0x40
 80093a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093a6:	e006      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80093a8:	2380      	movs	r3, #128	@ 0x80
 80093aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80093ae:	e002      	b.n	80093b6 <UART_SetConfig+0x5a6>
 80093b0:	2380      	movs	r3, #128	@ 0x80
 80093b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a3f      	ldr	r2, [pc, #252]	@ (80094b8 <UART_SetConfig+0x6a8>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	f040 80f8 	bne.w	80095b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80093c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80093c6:	2b20      	cmp	r3, #32
 80093c8:	dc46      	bgt.n	8009458 <UART_SetConfig+0x648>
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	f2c0 8082 	blt.w	80094d4 <UART_SetConfig+0x6c4>
 80093d0:	3b02      	subs	r3, #2
 80093d2:	2b1e      	cmp	r3, #30
 80093d4:	d87e      	bhi.n	80094d4 <UART_SetConfig+0x6c4>
 80093d6:	a201      	add	r2, pc, #4	@ (adr r2, 80093dc <UART_SetConfig+0x5cc>)
 80093d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093dc:	0800945f 	.word	0x0800945f
 80093e0:	080094d5 	.word	0x080094d5
 80093e4:	08009467 	.word	0x08009467
 80093e8:	080094d5 	.word	0x080094d5
 80093ec:	080094d5 	.word	0x080094d5
 80093f0:	080094d5 	.word	0x080094d5
 80093f4:	08009477 	.word	0x08009477
 80093f8:	080094d5 	.word	0x080094d5
 80093fc:	080094d5 	.word	0x080094d5
 8009400:	080094d5 	.word	0x080094d5
 8009404:	080094d5 	.word	0x080094d5
 8009408:	080094d5 	.word	0x080094d5
 800940c:	080094d5 	.word	0x080094d5
 8009410:	080094d5 	.word	0x080094d5
 8009414:	08009487 	.word	0x08009487
 8009418:	080094d5 	.word	0x080094d5
 800941c:	080094d5 	.word	0x080094d5
 8009420:	080094d5 	.word	0x080094d5
 8009424:	080094d5 	.word	0x080094d5
 8009428:	080094d5 	.word	0x080094d5
 800942c:	080094d5 	.word	0x080094d5
 8009430:	080094d5 	.word	0x080094d5
 8009434:	080094d5 	.word	0x080094d5
 8009438:	080094d5 	.word	0x080094d5
 800943c:	080094d5 	.word	0x080094d5
 8009440:	080094d5 	.word	0x080094d5
 8009444:	080094d5 	.word	0x080094d5
 8009448:	080094d5 	.word	0x080094d5
 800944c:	080094d5 	.word	0x080094d5
 8009450:	080094d5 	.word	0x080094d5
 8009454:	080094c7 	.word	0x080094c7
 8009458:	2b40      	cmp	r3, #64	@ 0x40
 800945a:	d037      	beq.n	80094cc <UART_SetConfig+0x6bc>
 800945c:	e03a      	b.n	80094d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800945e:	f7fd fb79 	bl	8006b54 <HAL_RCCEx_GetD3PCLK1Freq>
 8009462:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009464:	e03c      	b.n	80094e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800946a:	4618      	mov	r0, r3
 800946c:	f7fd fb88 	bl	8006b80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009474:	e034      	b.n	80094e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009476:	f107 0318 	add.w	r3, r7, #24
 800947a:	4618      	mov	r0, r3
 800947c:	f7fd fcd4 	bl	8006e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009480:	69fb      	ldr	r3, [r7, #28]
 8009482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009484:	e02c      	b.n	80094e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009486:	4b09      	ldr	r3, [pc, #36]	@ (80094ac <UART_SetConfig+0x69c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f003 0320 	and.w	r3, r3, #32
 800948e:	2b00      	cmp	r3, #0
 8009490:	d016      	beq.n	80094c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009492:	4b06      	ldr	r3, [pc, #24]	@ (80094ac <UART_SetConfig+0x69c>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	08db      	lsrs	r3, r3, #3
 8009498:	f003 0303 	and.w	r3, r3, #3
 800949c:	4a07      	ldr	r2, [pc, #28]	@ (80094bc <UART_SetConfig+0x6ac>)
 800949e:	fa22 f303 	lsr.w	r3, r2, r3
 80094a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80094a4:	e01c      	b.n	80094e0 <UART_SetConfig+0x6d0>
 80094a6:	bf00      	nop
 80094a8:	40011400 	.word	0x40011400
 80094ac:	58024400 	.word	0x58024400
 80094b0:	40007800 	.word	0x40007800
 80094b4:	40007c00 	.word	0x40007c00
 80094b8:	58000c00 	.word	0x58000c00
 80094bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80094c0:	4b9d      	ldr	r3, [pc, #628]	@ (8009738 <UART_SetConfig+0x928>)
 80094c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094c4:	e00c      	b.n	80094e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80094c6:	4b9d      	ldr	r3, [pc, #628]	@ (800973c <UART_SetConfig+0x92c>)
 80094c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094ca:	e009      	b.n	80094e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80094d2:	e005      	b.n	80094e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80094d4:	2300      	movs	r3, #0
 80094d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80094de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80094e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f000 81de 	beq.w	80098a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ec:	4a94      	ldr	r2, [pc, #592]	@ (8009740 <UART_SetConfig+0x930>)
 80094ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f2:	461a      	mov	r2, r3
 80094f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80094fa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	4613      	mov	r3, r2
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	4413      	add	r3, r2
 8009506:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009508:	429a      	cmp	r2, r3
 800950a:	d305      	bcc.n	8009518 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	685b      	ldr	r3, [r3, #4]
 8009510:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009514:	429a      	cmp	r2, r3
 8009516:	d903      	bls.n	8009520 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800951e:	e1c1      	b.n	80098a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009520:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009522:	2200      	movs	r2, #0
 8009524:	60bb      	str	r3, [r7, #8]
 8009526:	60fa      	str	r2, [r7, #12]
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800952c:	4a84      	ldr	r2, [pc, #528]	@ (8009740 <UART_SetConfig+0x930>)
 800952e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009532:	b29b      	uxth	r3, r3
 8009534:	2200      	movs	r2, #0
 8009536:	603b      	str	r3, [r7, #0]
 8009538:	607a      	str	r2, [r7, #4]
 800953a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800953e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009542:	f7f6 ff25 	bl	8000390 <__aeabi_uldivmod>
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4610      	mov	r0, r2
 800954c:	4619      	mov	r1, r3
 800954e:	f04f 0200 	mov.w	r2, #0
 8009552:	f04f 0300 	mov.w	r3, #0
 8009556:	020b      	lsls	r3, r1, #8
 8009558:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800955c:	0202      	lsls	r2, r0, #8
 800955e:	6979      	ldr	r1, [r7, #20]
 8009560:	6849      	ldr	r1, [r1, #4]
 8009562:	0849      	lsrs	r1, r1, #1
 8009564:	2000      	movs	r0, #0
 8009566:	460c      	mov	r4, r1
 8009568:	4605      	mov	r5, r0
 800956a:	eb12 0804 	adds.w	r8, r2, r4
 800956e:	eb43 0905 	adc.w	r9, r3, r5
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	469a      	mov	sl, r3
 800957a:	4693      	mov	fp, r2
 800957c:	4652      	mov	r2, sl
 800957e:	465b      	mov	r3, fp
 8009580:	4640      	mov	r0, r8
 8009582:	4649      	mov	r1, r9
 8009584:	f7f6 ff04 	bl	8000390 <__aeabi_uldivmod>
 8009588:	4602      	mov	r2, r0
 800958a:	460b      	mov	r3, r1
 800958c:	4613      	mov	r3, r2
 800958e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009592:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009596:	d308      	bcc.n	80095aa <UART_SetConfig+0x79a>
 8009598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800959a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800959e:	d204      	bcs.n	80095aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80095a6:	60da      	str	r2, [r3, #12]
 80095a8:	e17c      	b.n	80098a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80095aa:	2301      	movs	r3, #1
 80095ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80095b0:	e178      	b.n	80098a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095ba:	f040 80c5 	bne.w	8009748 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80095be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80095c2:	2b20      	cmp	r3, #32
 80095c4:	dc48      	bgt.n	8009658 <UART_SetConfig+0x848>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	db7b      	blt.n	80096c2 <UART_SetConfig+0x8b2>
 80095ca:	2b20      	cmp	r3, #32
 80095cc:	d879      	bhi.n	80096c2 <UART_SetConfig+0x8b2>
 80095ce:	a201      	add	r2, pc, #4	@ (adr r2, 80095d4 <UART_SetConfig+0x7c4>)
 80095d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d4:	0800965f 	.word	0x0800965f
 80095d8:	08009667 	.word	0x08009667
 80095dc:	080096c3 	.word	0x080096c3
 80095e0:	080096c3 	.word	0x080096c3
 80095e4:	0800966f 	.word	0x0800966f
 80095e8:	080096c3 	.word	0x080096c3
 80095ec:	080096c3 	.word	0x080096c3
 80095f0:	080096c3 	.word	0x080096c3
 80095f4:	0800967f 	.word	0x0800967f
 80095f8:	080096c3 	.word	0x080096c3
 80095fc:	080096c3 	.word	0x080096c3
 8009600:	080096c3 	.word	0x080096c3
 8009604:	080096c3 	.word	0x080096c3
 8009608:	080096c3 	.word	0x080096c3
 800960c:	080096c3 	.word	0x080096c3
 8009610:	080096c3 	.word	0x080096c3
 8009614:	0800968f 	.word	0x0800968f
 8009618:	080096c3 	.word	0x080096c3
 800961c:	080096c3 	.word	0x080096c3
 8009620:	080096c3 	.word	0x080096c3
 8009624:	080096c3 	.word	0x080096c3
 8009628:	080096c3 	.word	0x080096c3
 800962c:	080096c3 	.word	0x080096c3
 8009630:	080096c3 	.word	0x080096c3
 8009634:	080096c3 	.word	0x080096c3
 8009638:	080096c3 	.word	0x080096c3
 800963c:	080096c3 	.word	0x080096c3
 8009640:	080096c3 	.word	0x080096c3
 8009644:	080096c3 	.word	0x080096c3
 8009648:	080096c3 	.word	0x080096c3
 800964c:	080096c3 	.word	0x080096c3
 8009650:	080096c3 	.word	0x080096c3
 8009654:	080096b5 	.word	0x080096b5
 8009658:	2b40      	cmp	r3, #64	@ 0x40
 800965a:	d02e      	beq.n	80096ba <UART_SetConfig+0x8aa>
 800965c:	e031      	b.n	80096c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800965e:	f7fc f843 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 8009662:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009664:	e033      	b.n	80096ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009666:	f7fc f855 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 800966a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800966c:	e02f      	b.n	80096ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800966e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009672:	4618      	mov	r0, r3
 8009674:	f7fd fa84 	bl	8006b80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009678:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800967a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800967c:	e027      	b.n	80096ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800967e:	f107 0318 	add.w	r3, r7, #24
 8009682:	4618      	mov	r0, r3
 8009684:	f7fd fbd0 	bl	8006e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009688:	69fb      	ldr	r3, [r7, #28]
 800968a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800968c:	e01f      	b.n	80096ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800968e:	4b2d      	ldr	r3, [pc, #180]	@ (8009744 <UART_SetConfig+0x934>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f003 0320 	and.w	r3, r3, #32
 8009696:	2b00      	cmp	r3, #0
 8009698:	d009      	beq.n	80096ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800969a:	4b2a      	ldr	r3, [pc, #168]	@ (8009744 <UART_SetConfig+0x934>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	08db      	lsrs	r3, r3, #3
 80096a0:	f003 0303 	and.w	r3, r3, #3
 80096a4:	4a24      	ldr	r2, [pc, #144]	@ (8009738 <UART_SetConfig+0x928>)
 80096a6:	fa22 f303 	lsr.w	r3, r2, r3
 80096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80096ac:	e00f      	b.n	80096ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80096ae:	4b22      	ldr	r3, [pc, #136]	@ (8009738 <UART_SetConfig+0x928>)
 80096b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096b2:	e00c      	b.n	80096ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80096b4:	4b21      	ldr	r3, [pc, #132]	@ (800973c <UART_SetConfig+0x92c>)
 80096b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096b8:	e009      	b.n	80096ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80096c0:	e005      	b.n	80096ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80096c2:	2300      	movs	r3, #0
 80096c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80096cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f000 80e7 	beq.w	80098a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096da:	4a19      	ldr	r2, [pc, #100]	@ (8009740 <UART_SetConfig+0x930>)
 80096dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096e0:	461a      	mov	r2, r3
 80096e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80096e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80096e8:	005a      	lsls	r2, r3, #1
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	085b      	lsrs	r3, r3, #1
 80096f0:	441a      	add	r2, r3
 80096f2:	697b      	ldr	r3, [r7, #20]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80096fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096fe:	2b0f      	cmp	r3, #15
 8009700:	d916      	bls.n	8009730 <UART_SetConfig+0x920>
 8009702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009708:	d212      	bcs.n	8009730 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800970a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800970c:	b29b      	uxth	r3, r3
 800970e:	f023 030f 	bic.w	r3, r3, #15
 8009712:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009716:	085b      	lsrs	r3, r3, #1
 8009718:	b29b      	uxth	r3, r3
 800971a:	f003 0307 	and.w	r3, r3, #7
 800971e:	b29a      	uxth	r2, r3
 8009720:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009722:	4313      	orrs	r3, r2
 8009724:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800972c:	60da      	str	r2, [r3, #12]
 800972e:	e0b9      	b.n	80098a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009736:	e0b5      	b.n	80098a4 <UART_SetConfig+0xa94>
 8009738:	03d09000 	.word	0x03d09000
 800973c:	003d0900 	.word	0x003d0900
 8009740:	0800af60 	.word	0x0800af60
 8009744:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009748:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800974c:	2b20      	cmp	r3, #32
 800974e:	dc49      	bgt.n	80097e4 <UART_SetConfig+0x9d4>
 8009750:	2b00      	cmp	r3, #0
 8009752:	db7c      	blt.n	800984e <UART_SetConfig+0xa3e>
 8009754:	2b20      	cmp	r3, #32
 8009756:	d87a      	bhi.n	800984e <UART_SetConfig+0xa3e>
 8009758:	a201      	add	r2, pc, #4	@ (adr r2, 8009760 <UART_SetConfig+0x950>)
 800975a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975e:	bf00      	nop
 8009760:	080097eb 	.word	0x080097eb
 8009764:	080097f3 	.word	0x080097f3
 8009768:	0800984f 	.word	0x0800984f
 800976c:	0800984f 	.word	0x0800984f
 8009770:	080097fb 	.word	0x080097fb
 8009774:	0800984f 	.word	0x0800984f
 8009778:	0800984f 	.word	0x0800984f
 800977c:	0800984f 	.word	0x0800984f
 8009780:	0800980b 	.word	0x0800980b
 8009784:	0800984f 	.word	0x0800984f
 8009788:	0800984f 	.word	0x0800984f
 800978c:	0800984f 	.word	0x0800984f
 8009790:	0800984f 	.word	0x0800984f
 8009794:	0800984f 	.word	0x0800984f
 8009798:	0800984f 	.word	0x0800984f
 800979c:	0800984f 	.word	0x0800984f
 80097a0:	0800981b 	.word	0x0800981b
 80097a4:	0800984f 	.word	0x0800984f
 80097a8:	0800984f 	.word	0x0800984f
 80097ac:	0800984f 	.word	0x0800984f
 80097b0:	0800984f 	.word	0x0800984f
 80097b4:	0800984f 	.word	0x0800984f
 80097b8:	0800984f 	.word	0x0800984f
 80097bc:	0800984f 	.word	0x0800984f
 80097c0:	0800984f 	.word	0x0800984f
 80097c4:	0800984f 	.word	0x0800984f
 80097c8:	0800984f 	.word	0x0800984f
 80097cc:	0800984f 	.word	0x0800984f
 80097d0:	0800984f 	.word	0x0800984f
 80097d4:	0800984f 	.word	0x0800984f
 80097d8:	0800984f 	.word	0x0800984f
 80097dc:	0800984f 	.word	0x0800984f
 80097e0:	08009841 	.word	0x08009841
 80097e4:	2b40      	cmp	r3, #64	@ 0x40
 80097e6:	d02e      	beq.n	8009846 <UART_SetConfig+0xa36>
 80097e8:	e031      	b.n	800984e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80097ea:	f7fb ff7d 	bl	80056e8 <HAL_RCC_GetPCLK1Freq>
 80097ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097f0:	e033      	b.n	800985a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80097f2:	f7fb ff8f 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 80097f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80097f8:	e02f      	b.n	800985a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fd f9be 	bl	8006b80 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009808:	e027      	b.n	800985a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800980a:	f107 0318 	add.w	r3, r7, #24
 800980e:	4618      	mov	r0, r3
 8009810:	f7fd fb0a 	bl	8006e28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009818:	e01f      	b.n	800985a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800981a:	4b2d      	ldr	r3, [pc, #180]	@ (80098d0 <UART_SetConfig+0xac0>)
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f003 0320 	and.w	r3, r3, #32
 8009822:	2b00      	cmp	r3, #0
 8009824:	d009      	beq.n	800983a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009826:	4b2a      	ldr	r3, [pc, #168]	@ (80098d0 <UART_SetConfig+0xac0>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	08db      	lsrs	r3, r3, #3
 800982c:	f003 0303 	and.w	r3, r3, #3
 8009830:	4a28      	ldr	r2, [pc, #160]	@ (80098d4 <UART_SetConfig+0xac4>)
 8009832:	fa22 f303 	lsr.w	r3, r2, r3
 8009836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009838:	e00f      	b.n	800985a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800983a:	4b26      	ldr	r3, [pc, #152]	@ (80098d4 <UART_SetConfig+0xac4>)
 800983c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800983e:	e00c      	b.n	800985a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009840:	4b25      	ldr	r3, [pc, #148]	@ (80098d8 <UART_SetConfig+0xac8>)
 8009842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009844:	e009      	b.n	800985a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009846:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800984a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800984c:	e005      	b.n	800985a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009852:	2301      	movs	r3, #1
 8009854:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009858:	bf00      	nop
    }

    if (pclk != 0U)
 800985a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800985c:	2b00      	cmp	r3, #0
 800985e:	d021      	beq.n	80098a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009864:	4a1d      	ldr	r2, [pc, #116]	@ (80098dc <UART_SetConfig+0xacc>)
 8009866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800986a:	461a      	mov	r2, r3
 800986c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800986e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	085b      	lsrs	r3, r3, #1
 8009878:	441a      	add	r2, r3
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009882:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009886:	2b0f      	cmp	r3, #15
 8009888:	d909      	bls.n	800989e <UART_SetConfig+0xa8e>
 800988a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800988c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009890:	d205      	bcs.n	800989e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009894:	b29a      	uxth	r2, r3
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60da      	str	r2, [r3, #12]
 800989c:	e002      	b.n	80098a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	2200      	movs	r2, #0
 80098b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2200      	movs	r2, #0
 80098be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80098c0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3748      	adds	r7, #72	@ 0x48
 80098c8:	46bd      	mov	sp, r7
 80098ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098ce:	bf00      	nop
 80098d0:	58024400 	.word	0x58024400
 80098d4:	03d09000 	.word	0x03d09000
 80098d8:	003d0900 	.word	0x003d0900
 80098dc:	0800af60 	.word	0x0800af60

080098e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b083      	sub	sp, #12
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ec:	f003 0308 	and.w	r3, r3, #8
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d00a      	beq.n	800990a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	430a      	orrs	r2, r1
 8009908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00a      	beq.n	800992c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	430a      	orrs	r2, r1
 800992a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009930:	f003 0302 	and.w	r3, r3, #2
 8009934:	2b00      	cmp	r3, #0
 8009936:	d00a      	beq.n	800994e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	430a      	orrs	r2, r1
 800994c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009952:	f003 0304 	and.w	r3, r3, #4
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00a      	beq.n	8009970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	685b      	ldr	r3, [r3, #4]
 8009960:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	430a      	orrs	r2, r1
 800996e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009974:	f003 0310 	and.w	r3, r3, #16
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00a      	beq.n	8009992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	430a      	orrs	r2, r1
 8009990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009996:	f003 0320 	and.w	r3, r3, #32
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00a      	beq.n	80099b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	430a      	orrs	r2, r1
 80099b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d01a      	beq.n	80099f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	430a      	orrs	r2, r1
 80099d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099de:	d10a      	bne.n	80099f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00a      	beq.n	8009a18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	430a      	orrs	r2, r1
 8009a16:	605a      	str	r2, [r3, #4]
  }
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b098      	sub	sp, #96	@ 0x60
 8009a28:	af02      	add	r7, sp, #8
 8009a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009a34:	f7f8 fb76 	bl	8002124 <HAL_GetTick>
 8009a38:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 0308 	and.w	r3, r3, #8
 8009a44:	2b08      	cmp	r3, #8
 8009a46:	d12f      	bne.n	8009aa8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a48:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a4c:	9300      	str	r3, [sp, #0]
 8009a4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a50:	2200      	movs	r2, #0
 8009a52:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009a56:	6878      	ldr	r0, [r7, #4]
 8009a58:	f000 f88e 	bl	8009b78 <UART_WaitOnFlagUntilTimeout>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d022      	beq.n	8009aa8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a6a:	e853 3f00 	ldrex	r3, [r3]
 8009a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a76:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a80:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a82:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a84:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009a86:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a88:	e841 2300 	strex	r3, r2, [r1]
 8009a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009a8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1e6      	bne.n	8009a62 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2220      	movs	r2, #32
 8009a98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	e063      	b.n	8009b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 0304 	and.w	r3, r3, #4
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d149      	bne.n	8009b4a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ab6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f857 	bl	8009b78 <UART_WaitOnFlagUntilTimeout>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d03c      	beq.n	8009b4a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad8:	e853 3f00 	ldrex	r3, [r3]
 8009adc:	623b      	str	r3, [r7, #32]
   return(result);
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ae4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	461a      	mov	r2, r3
 8009aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009aee:	633b      	str	r3, [r7, #48]	@ 0x30
 8009af0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009af6:	e841 2300 	strex	r3, r2, [r1]
 8009afa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d1e6      	bne.n	8009ad0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	3308      	adds	r3, #8
 8009b08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	e853 3f00 	ldrex	r3, [r3]
 8009b10:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f023 0301 	bic.w	r3, r3, #1
 8009b18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	3308      	adds	r3, #8
 8009b20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b22:	61fa      	str	r2, [r7, #28]
 8009b24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b26:	69b9      	ldr	r1, [r7, #24]
 8009b28:	69fa      	ldr	r2, [r7, #28]
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	617b      	str	r3, [r7, #20]
   return(result);
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1e5      	bne.n	8009b02 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2220      	movs	r2, #32
 8009b3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b46:	2303      	movs	r3, #3
 8009b48:	e012      	b.n	8009b70 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2220      	movs	r2, #32
 8009b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2200      	movs	r2, #0
 8009b64:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3758      	adds	r7, #88	@ 0x58
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	603b      	str	r3, [r7, #0]
 8009b84:	4613      	mov	r3, r2
 8009b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b88:	e04f      	b.n	8009c2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b90:	d04b      	beq.n	8009c2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b92:	f7f8 fac7 	bl	8002124 <HAL_GetTick>
 8009b96:	4602      	mov	r2, r0
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	69ba      	ldr	r2, [r7, #24]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d302      	bcc.n	8009ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d101      	bne.n	8009bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009ba8:	2303      	movs	r3, #3
 8009baa:	e04e      	b.n	8009c4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f003 0304 	and.w	r3, r3, #4
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d037      	beq.n	8009c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	2b80      	cmp	r3, #128	@ 0x80
 8009bbe:	d034      	beq.n	8009c2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	2b40      	cmp	r3, #64	@ 0x40
 8009bc4:	d031      	beq.n	8009c2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	69db      	ldr	r3, [r3, #28]
 8009bcc:	f003 0308 	and.w	r3, r3, #8
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	d110      	bne.n	8009bf6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	2208      	movs	r2, #8
 8009bda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f000 f839 	bl	8009c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2208      	movs	r2, #8
 8009be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2200      	movs	r2, #0
 8009bee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009bf2:	2301      	movs	r3, #1
 8009bf4:	e029      	b.n	8009c4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	69db      	ldr	r3, [r3, #28]
 8009bfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009c00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009c04:	d111      	bne.n	8009c2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 f81f 	bl	8009c54 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e00f      	b.n	8009c4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	69da      	ldr	r2, [r3, #28]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	4013      	ands	r3, r2
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	bf0c      	ite	eq
 8009c3a:	2301      	moveq	r3, #1
 8009c3c:	2300      	movne	r3, #0
 8009c3e:	b2db      	uxtb	r3, r3
 8009c40:	461a      	mov	r2, r3
 8009c42:	79fb      	ldrb	r3, [r7, #7]
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d0a0      	beq.n	8009b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}
	...

08009c54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b095      	sub	sp, #84	@ 0x54
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	461a      	mov	r2, r3
 8009c78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c7c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1e6      	bne.n	8009c5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3308      	adds	r3, #8
 8009c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c96:	6a3b      	ldr	r3, [r7, #32]
 8009c98:	e853 3f00 	ldrex	r3, [r3]
 8009c9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c9e:	69fa      	ldr	r2, [r7, #28]
 8009ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8009d1c <UART_EndRxTransfer+0xc8>)
 8009ca2:	4013      	ands	r3, r2
 8009ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	3308      	adds	r3, #8
 8009cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009cae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cb6:	e841 2300 	strex	r3, r2, [r1]
 8009cba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e5      	bne.n	8009c8e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d118      	bne.n	8009cfc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	e853 3f00 	ldrex	r3, [r3]
 8009cd6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	f023 0310 	bic.w	r3, r3, #16
 8009cde:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	461a      	mov	r2, r3
 8009ce6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009ce8:	61bb      	str	r3, [r7, #24]
 8009cea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cec:	6979      	ldr	r1, [r7, #20]
 8009cee:	69ba      	ldr	r2, [r7, #24]
 8009cf0:	e841 2300 	strex	r3, r2, [r1]
 8009cf4:	613b      	str	r3, [r7, #16]
   return(result);
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1e6      	bne.n	8009cca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2220      	movs	r2, #32
 8009d00:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009d10:	bf00      	nop
 8009d12:	3754      	adds	r7, #84	@ 0x54
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	effffffe 	.word	0xeffffffe

08009d20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d101      	bne.n	8009d36 <HAL_UARTEx_DisableFifoMode+0x16>
 8009d32:	2302      	movs	r3, #2
 8009d34:	e027      	b.n	8009d86 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2224      	movs	r2, #36	@ 0x24
 8009d42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f022 0201 	bic.w	r2, r2, #1
 8009d5c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009d64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2220      	movs	r2, #32
 8009d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr

08009d92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d101      	bne.n	8009daa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009da6:	2302      	movs	r3, #2
 8009da8:	e02d      	b.n	8009e06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2224      	movs	r2, #36	@ 0x24
 8009db6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f022 0201 	bic.w	r2, r2, #1
 8009dd0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	683a      	ldr	r2, [r7, #0]
 8009de2:	430a      	orrs	r2, r1
 8009de4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f850 	bl	8009e8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2220      	movs	r2, #32
 8009df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3710      	adds	r7, #16
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b084      	sub	sp, #16
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d101      	bne.n	8009e26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e22:	2302      	movs	r3, #2
 8009e24:	e02d      	b.n	8009e82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2224      	movs	r2, #36	@ 0x24
 8009e32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0201 	bic.w	r2, r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	683a      	ldr	r2, [r7, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f812 	bl	8009e8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2220      	movs	r2, #32
 8009e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e80:	2300      	movs	r3, #0
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3710      	adds	r7, #16
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b085      	sub	sp, #20
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d108      	bne.n	8009eae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009eac:	e031      	b.n	8009f12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009eae:	2310      	movs	r3, #16
 8009eb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009eb2:	2310      	movs	r3, #16
 8009eb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	0e5b      	lsrs	r3, r3, #25
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	f003 0307 	and.w	r3, r3, #7
 8009ec4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	0f5b      	lsrs	r3, r3, #29
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	f003 0307 	and.w	r3, r3, #7
 8009ed4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
 8009ed8:	7b3a      	ldrb	r2, [r7, #12]
 8009eda:	4911      	ldr	r1, [pc, #68]	@ (8009f20 <UARTEx_SetNbDataToProcess+0x94>)
 8009edc:	5c8a      	ldrb	r2, [r1, r2]
 8009ede:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ee2:	7b3a      	ldrb	r2, [r7, #12]
 8009ee4:	490f      	ldr	r1, [pc, #60]	@ (8009f24 <UARTEx_SetNbDataToProcess+0x98>)
 8009ee6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ee8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eec:	b29a      	uxth	r2, r3
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009ef4:	7bfb      	ldrb	r3, [r7, #15]
 8009ef6:	7b7a      	ldrb	r2, [r7, #13]
 8009ef8:	4909      	ldr	r1, [pc, #36]	@ (8009f20 <UARTEx_SetNbDataToProcess+0x94>)
 8009efa:	5c8a      	ldrb	r2, [r1, r2]
 8009efc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f00:	7b7a      	ldrb	r2, [r7, #13]
 8009f02:	4908      	ldr	r1, [pc, #32]	@ (8009f24 <UARTEx_SetNbDataToProcess+0x98>)
 8009f04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f06:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009f12:	bf00      	nop
 8009f14:	3714      	adds	r7, #20
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr
 8009f1e:	bf00      	nop
 8009f20:	0800af78 	.word	0x0800af78
 8009f24:	0800af80 	.word	0x0800af80

08009f28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f28:	b084      	sub	sp, #16
 8009f2a:	b580      	push	{r7, lr}
 8009f2c:	b084      	sub	sp, #16
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	f107 001c 	add.w	r0, r7, #28
 8009f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f3a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d121      	bne.n	8009f86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f46:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68da      	ldr	r2, [r3, #12]
 8009f52:	4b2c      	ldr	r3, [pc, #176]	@ (800a004 <USB_CoreInit+0xdc>)
 8009f54:	4013      	ands	r3, r2
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	68db      	ldr	r3, [r3, #12]
 8009f5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009f66:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009f6a:	2b01      	cmp	r3, #1
 8009f6c:	d105      	bne.n	8009f7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 faaa 	bl	800a4d4 <USB_CoreReset>
 8009f80:	4603      	mov	r3, r0
 8009f82:	73fb      	strb	r3, [r7, #15]
 8009f84:	e01b      	b.n	8009fbe <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa9e 	bl	800a4d4 <USB_CoreReset>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009f9c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d106      	bne.n	8009fb2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	639a      	str	r2, [r3, #56]	@ 0x38
 8009fb0:	e005      	b.n	8009fbe <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fb6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009fbe:	7fbb      	ldrb	r3, [r7, #30]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d116      	bne.n	8009ff2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009fc8:	b29a      	uxth	r2, r3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009fd2:	4b0d      	ldr	r3, [pc, #52]	@ (800a008 <USB_CoreInit+0xe0>)
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	689b      	ldr	r3, [r3, #8]
 8009fde:	f043 0206 	orr.w	r2, r3, #6
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	689b      	ldr	r3, [r3, #8]
 8009fea:	f043 0220 	orr.w	r2, r3, #32
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ffe:	b004      	add	sp, #16
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	ffbdffbf 	.word	0xffbdffbf
 800a008:	03ee0000 	.word	0x03ee0000

0800a00c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	689b      	ldr	r3, [r3, #8]
 800a018:	f023 0201 	bic.w	r2, r3, #1
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	460b      	mov	r3, r1
 800a038:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a04a:	78fb      	ldrb	r3, [r7, #3]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d115      	bne.n	800a07c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a05c:	200a      	movs	r0, #10
 800a05e:	f7f8 f86d 	bl	800213c <HAL_Delay>
      ms += 10U;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	330a      	adds	r3, #10
 800a066:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fa25 	bl	800a4b8 <USB_GetMode>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b01      	cmp	r3, #1
 800a072:	d01e      	beq.n	800a0b2 <USB_SetCurrentMode+0x84>
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2bc7      	cmp	r3, #199	@ 0xc7
 800a078:	d9f0      	bls.n	800a05c <USB_SetCurrentMode+0x2e>
 800a07a:	e01a      	b.n	800a0b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a07c:	78fb      	ldrb	r3, [r7, #3]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d115      	bne.n	800a0ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a08e:	200a      	movs	r0, #10
 800a090:	f7f8 f854 	bl	800213c <HAL_Delay>
      ms += 10U;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	330a      	adds	r3, #10
 800a098:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 fa0c 	bl	800a4b8 <USB_GetMode>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d005      	beq.n	800a0b2 <USB_SetCurrentMode+0x84>
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	2bc7      	cmp	r3, #199	@ 0xc7
 800a0aa:	d9f0      	bls.n	800a08e <USB_SetCurrentMode+0x60>
 800a0ac:	e001      	b.n	800a0b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	e005      	b.n	800a0be <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2bc8      	cmp	r3, #200	@ 0xc8
 800a0b6:	d101      	bne.n	800a0bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e000      	b.n	800a0be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a0bc:	2300      	movs	r3, #0
}
 800a0be:	4618      	mov	r0, r3
 800a0c0:	3710      	adds	r7, #16
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
	...

0800a0c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b086      	sub	sp, #24
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a0d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	613b      	str	r3, [r7, #16]
 800a0e6:	e009      	b.n	800a0fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	3340      	adds	r3, #64	@ 0x40
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	613b      	str	r3, [r7, #16]
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	2b0e      	cmp	r3, #14
 800a100:	d9f2      	bls.n	800a0e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a102:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a106:	2b00      	cmp	r3, #0
 800a108:	d11c      	bne.n	800a144 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a118:	f043 0302 	orr.w	r3, r3, #2
 800a11c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a122:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	601a      	str	r2, [r3, #0]
 800a142:	e005      	b.n	800a150 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a148:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a156:	461a      	mov	r2, r3
 800a158:	2300      	movs	r3, #0
 800a15a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a15c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a160:	2b01      	cmp	r3, #1
 800a162:	d10d      	bne.n	800a180 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d104      	bne.n	800a176 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a16c:	2100      	movs	r1, #0
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f968 	bl	800a444 <USB_SetDevSpeed>
 800a174:	e008      	b.n	800a188 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a176:	2101      	movs	r1, #1
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 f963 	bl	800a444 <USB_SetDevSpeed>
 800a17e:	e003      	b.n	800a188 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a180:	2103      	movs	r1, #3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f95e 	bl	800a444 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a188:	2110      	movs	r1, #16
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f8fa 	bl	800a384 <USB_FlushTxFifo>
 800a190:	4603      	mov	r3, r0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d001      	beq.n	800a19a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 f924 	bl	800a3e8 <USB_FlushRxFifo>
 800a1a0:	4603      	mov	r3, r0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d001      	beq.n	800a1aa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1bc:	461a      	mov	r2, r3
 800a1be:	2300      	movs	r3, #0
 800a1c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	613b      	str	r3, [r7, #16]
 800a1d2:	e043      	b.n	800a25c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	015a      	lsls	r2, r3, #5
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	4413      	add	r3, r2
 800a1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1ea:	d118      	bne.n	800a21e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d10a      	bne.n	800a208 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	015a      	lsls	r2, r3, #5
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1fe:	461a      	mov	r2, r3
 800a200:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	e013      	b.n	800a230 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a214:	461a      	mov	r2, r3
 800a216:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a21a:	6013      	str	r3, [r2, #0]
 800a21c:	e008      	b.n	800a230 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4413      	add	r3, r2
 800a226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a22a:	461a      	mov	r2, r3
 800a22c:	2300      	movs	r3, #0
 800a22e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a230:	693b      	ldr	r3, [r7, #16]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a23c:	461a      	mov	r2, r3
 800a23e:	2300      	movs	r3, #0
 800a240:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	015a      	lsls	r2, r3, #5
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	4413      	add	r3, r2
 800a24a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a24e:	461a      	mov	r2, r3
 800a250:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a254:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	3301      	adds	r3, #1
 800a25a:	613b      	str	r3, [r7, #16]
 800a25c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a260:	461a      	mov	r2, r3
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	4293      	cmp	r3, r2
 800a266:	d3b5      	bcc.n	800a1d4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a268:	2300      	movs	r3, #0
 800a26a:	613b      	str	r3, [r7, #16]
 800a26c:	e043      	b.n	800a2f6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a26e:	693b      	ldr	r3, [r7, #16]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a280:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a284:	d118      	bne.n	800a2b8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d10a      	bne.n	800a2a2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a298:	461a      	mov	r2, r3
 800a29a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a29e:	6013      	str	r3, [r2, #0]
 800a2a0:	e013      	b.n	800a2ca <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	015a      	lsls	r2, r3, #5
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a2b4:	6013      	str	r3, [r2, #0]
 800a2b6:	e008      	b.n	800a2ca <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2c4:	461a      	mov	r2, r3
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	015a      	lsls	r2, r3, #5
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	2300      	movs	r3, #0
 800a2da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a2ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	3301      	adds	r3, #1
 800a2f4:	613b      	str	r3, [r7, #16]
 800a2f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d3b5      	bcc.n	800a26e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a310:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a314:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2200      	movs	r2, #0
 800a31a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a322:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a324:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d105      	bne.n	800a338 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	699b      	ldr	r3, [r3, #24]
 800a330:	f043 0210 	orr.w	r2, r3, #16
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	699a      	ldr	r2, [r3, #24]
 800a33c:	4b0f      	ldr	r3, [pc, #60]	@ (800a37c <USB_DevInit+0x2b4>)
 800a33e:	4313      	orrs	r3, r2
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a344:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d005      	beq.n	800a358 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	699b      	ldr	r3, [r3, #24]
 800a350:	f043 0208 	orr.w	r2, r3, #8
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a358:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a35c:	2b01      	cmp	r3, #1
 800a35e:	d105      	bne.n	800a36c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	699a      	ldr	r2, [r3, #24]
 800a364:	4b06      	ldr	r3, [pc, #24]	@ (800a380 <USB_DevInit+0x2b8>)
 800a366:	4313      	orrs	r3, r2
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3718      	adds	r7, #24
 800a372:	46bd      	mov	sp, r7
 800a374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a378:	b004      	add	sp, #16
 800a37a:	4770      	bx	lr
 800a37c:	803c3800 	.word	0x803c3800
 800a380:	40000004 	.word	0x40000004

0800a384 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a38e:	2300      	movs	r3, #0
 800a390:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	3301      	adds	r3, #1
 800a396:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a39e:	d901      	bls.n	800a3a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e01b      	b.n	800a3dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	691b      	ldr	r3, [r3, #16]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	daf2      	bge.n	800a392 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	019b      	lsls	r3, r3, #6
 800a3b4:	f043 0220 	orr.w	r2, r3, #32
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a3c8:	d901      	bls.n	800a3ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a3ca:	2303      	movs	r3, #3
 800a3cc:	e006      	b.n	800a3dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	f003 0320 	and.w	r3, r3, #32
 800a3d6:	2b20      	cmp	r3, #32
 800a3d8:	d0f0      	beq.n	800a3bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a3da:	2300      	movs	r3, #0
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a400:	d901      	bls.n	800a406 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a402:	2303      	movs	r3, #3
 800a404:	e018      	b.n	800a438 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	daf2      	bge.n	800a3f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a40e:	2300      	movs	r3, #0
 800a410:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2210      	movs	r2, #16
 800a416:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	3301      	adds	r3, #1
 800a41c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a424:	d901      	bls.n	800a42a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a426:	2303      	movs	r3, #3
 800a428:	e006      	b.n	800a438 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	f003 0310 	and.w	r3, r3, #16
 800a432:	2b10      	cmp	r3, #16
 800a434:	d0f0      	beq.n	800a418 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a436:	2300      	movs	r3, #0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr

0800a444 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	460b      	mov	r3, r1
 800a44e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	68f9      	ldr	r1, [r7, #12]
 800a460:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a464:	4313      	orrs	r3, r2
 800a466:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr

0800a476 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a476:	b480      	push	{r7}
 800a478:	b085      	sub	sp, #20
 800a47a:	af00      	add	r7, sp, #0
 800a47c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68fa      	ldr	r2, [r7, #12]
 800a48c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a490:	f023 0303 	bic.w	r3, r3, #3
 800a494:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a4a4:	f043 0302 	orr.w	r3, r3, #2
 800a4a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3714      	adds	r7, #20
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	695b      	ldr	r3, [r3, #20]
 800a4c4:	f003 0301 	and.w	r3, r3, #1
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a4d4:	b480      	push	{r7}
 800a4d6:	b085      	sub	sp, #20
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4ec:	d901      	bls.n	800a4f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e01b      	b.n	800a52a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	daf2      	bge.n	800a4e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	f043 0201 	orr.w	r2, r3, #1
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3301      	adds	r3, #1
 800a50e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a516:	d901      	bls.n	800a51c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a518:	2303      	movs	r3, #3
 800a51a:	e006      	b.n	800a52a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	2b01      	cmp	r3, #1
 800a526:	d0f0      	beq.n	800a50a <USB_CoreReset+0x36>

  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
	...

0800a538 <siprintf>:
 800a538:	b40e      	push	{r1, r2, r3}
 800a53a:	b510      	push	{r4, lr}
 800a53c:	b09d      	sub	sp, #116	@ 0x74
 800a53e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a540:	9002      	str	r0, [sp, #8]
 800a542:	9006      	str	r0, [sp, #24]
 800a544:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a548:	480a      	ldr	r0, [pc, #40]	@ (800a574 <siprintf+0x3c>)
 800a54a:	9107      	str	r1, [sp, #28]
 800a54c:	9104      	str	r1, [sp, #16]
 800a54e:	490a      	ldr	r1, [pc, #40]	@ (800a578 <siprintf+0x40>)
 800a550:	f853 2b04 	ldr.w	r2, [r3], #4
 800a554:	9105      	str	r1, [sp, #20]
 800a556:	2400      	movs	r4, #0
 800a558:	a902      	add	r1, sp, #8
 800a55a:	6800      	ldr	r0, [r0, #0]
 800a55c:	9301      	str	r3, [sp, #4]
 800a55e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a560:	f000 f994 	bl	800a88c <_svfiprintf_r>
 800a564:	9b02      	ldr	r3, [sp, #8]
 800a566:	701c      	strb	r4, [r3, #0]
 800a568:	b01d      	add	sp, #116	@ 0x74
 800a56a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a56e:	b003      	add	sp, #12
 800a570:	4770      	bx	lr
 800a572:	bf00      	nop
 800a574:	24000014 	.word	0x24000014
 800a578:	ffff0208 	.word	0xffff0208

0800a57c <memset>:
 800a57c:	4402      	add	r2, r0
 800a57e:	4603      	mov	r3, r0
 800a580:	4293      	cmp	r3, r2
 800a582:	d100      	bne.n	800a586 <memset+0xa>
 800a584:	4770      	bx	lr
 800a586:	f803 1b01 	strb.w	r1, [r3], #1
 800a58a:	e7f9      	b.n	800a580 <memset+0x4>

0800a58c <__errno>:
 800a58c:	4b01      	ldr	r3, [pc, #4]	@ (800a594 <__errno+0x8>)
 800a58e:	6818      	ldr	r0, [r3, #0]
 800a590:	4770      	bx	lr
 800a592:	bf00      	nop
 800a594:	24000014 	.word	0x24000014

0800a598 <__libc_init_array>:
 800a598:	b570      	push	{r4, r5, r6, lr}
 800a59a:	4d0d      	ldr	r5, [pc, #52]	@ (800a5d0 <__libc_init_array+0x38>)
 800a59c:	4c0d      	ldr	r4, [pc, #52]	@ (800a5d4 <__libc_init_array+0x3c>)
 800a59e:	1b64      	subs	r4, r4, r5
 800a5a0:	10a4      	asrs	r4, r4, #2
 800a5a2:	2600      	movs	r6, #0
 800a5a4:	42a6      	cmp	r6, r4
 800a5a6:	d109      	bne.n	800a5bc <__libc_init_array+0x24>
 800a5a8:	4d0b      	ldr	r5, [pc, #44]	@ (800a5d8 <__libc_init_array+0x40>)
 800a5aa:	4c0c      	ldr	r4, [pc, #48]	@ (800a5dc <__libc_init_array+0x44>)
 800a5ac:	f000 fc64 	bl	800ae78 <_init>
 800a5b0:	1b64      	subs	r4, r4, r5
 800a5b2:	10a4      	asrs	r4, r4, #2
 800a5b4:	2600      	movs	r6, #0
 800a5b6:	42a6      	cmp	r6, r4
 800a5b8:	d105      	bne.n	800a5c6 <__libc_init_array+0x2e>
 800a5ba:	bd70      	pop	{r4, r5, r6, pc}
 800a5bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5c0:	4798      	blx	r3
 800a5c2:	3601      	adds	r6, #1
 800a5c4:	e7ee      	b.n	800a5a4 <__libc_init_array+0xc>
 800a5c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5ca:	4798      	blx	r3
 800a5cc:	3601      	adds	r6, #1
 800a5ce:	e7f2      	b.n	800a5b6 <__libc_init_array+0x1e>
 800a5d0:	0800afc4 	.word	0x0800afc4
 800a5d4:	0800afc4 	.word	0x0800afc4
 800a5d8:	0800afc4 	.word	0x0800afc4
 800a5dc:	0800afc8 	.word	0x0800afc8

0800a5e0 <__retarget_lock_acquire_recursive>:
 800a5e0:	4770      	bx	lr

0800a5e2 <__retarget_lock_release_recursive>:
 800a5e2:	4770      	bx	lr

0800a5e4 <_free_r>:
 800a5e4:	b538      	push	{r3, r4, r5, lr}
 800a5e6:	4605      	mov	r5, r0
 800a5e8:	2900      	cmp	r1, #0
 800a5ea:	d041      	beq.n	800a670 <_free_r+0x8c>
 800a5ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5f0:	1f0c      	subs	r4, r1, #4
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	bfb8      	it	lt
 800a5f6:	18e4      	addlt	r4, r4, r3
 800a5f8:	f000 f8e0 	bl	800a7bc <__malloc_lock>
 800a5fc:	4a1d      	ldr	r2, [pc, #116]	@ (800a674 <_free_r+0x90>)
 800a5fe:	6813      	ldr	r3, [r2, #0]
 800a600:	b933      	cbnz	r3, 800a610 <_free_r+0x2c>
 800a602:	6063      	str	r3, [r4, #4]
 800a604:	6014      	str	r4, [r2, #0]
 800a606:	4628      	mov	r0, r5
 800a608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a60c:	f000 b8dc 	b.w	800a7c8 <__malloc_unlock>
 800a610:	42a3      	cmp	r3, r4
 800a612:	d908      	bls.n	800a626 <_free_r+0x42>
 800a614:	6820      	ldr	r0, [r4, #0]
 800a616:	1821      	adds	r1, r4, r0
 800a618:	428b      	cmp	r3, r1
 800a61a:	bf01      	itttt	eq
 800a61c:	6819      	ldreq	r1, [r3, #0]
 800a61e:	685b      	ldreq	r3, [r3, #4]
 800a620:	1809      	addeq	r1, r1, r0
 800a622:	6021      	streq	r1, [r4, #0]
 800a624:	e7ed      	b.n	800a602 <_free_r+0x1e>
 800a626:	461a      	mov	r2, r3
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	b10b      	cbz	r3, 800a630 <_free_r+0x4c>
 800a62c:	42a3      	cmp	r3, r4
 800a62e:	d9fa      	bls.n	800a626 <_free_r+0x42>
 800a630:	6811      	ldr	r1, [r2, #0]
 800a632:	1850      	adds	r0, r2, r1
 800a634:	42a0      	cmp	r0, r4
 800a636:	d10b      	bne.n	800a650 <_free_r+0x6c>
 800a638:	6820      	ldr	r0, [r4, #0]
 800a63a:	4401      	add	r1, r0
 800a63c:	1850      	adds	r0, r2, r1
 800a63e:	4283      	cmp	r3, r0
 800a640:	6011      	str	r1, [r2, #0]
 800a642:	d1e0      	bne.n	800a606 <_free_r+0x22>
 800a644:	6818      	ldr	r0, [r3, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	6053      	str	r3, [r2, #4]
 800a64a:	4408      	add	r0, r1
 800a64c:	6010      	str	r0, [r2, #0]
 800a64e:	e7da      	b.n	800a606 <_free_r+0x22>
 800a650:	d902      	bls.n	800a658 <_free_r+0x74>
 800a652:	230c      	movs	r3, #12
 800a654:	602b      	str	r3, [r5, #0]
 800a656:	e7d6      	b.n	800a606 <_free_r+0x22>
 800a658:	6820      	ldr	r0, [r4, #0]
 800a65a:	1821      	adds	r1, r4, r0
 800a65c:	428b      	cmp	r3, r1
 800a65e:	bf04      	itt	eq
 800a660:	6819      	ldreq	r1, [r3, #0]
 800a662:	685b      	ldreq	r3, [r3, #4]
 800a664:	6063      	str	r3, [r4, #4]
 800a666:	bf04      	itt	eq
 800a668:	1809      	addeq	r1, r1, r0
 800a66a:	6021      	streq	r1, [r4, #0]
 800a66c:	6054      	str	r4, [r2, #4]
 800a66e:	e7ca      	b.n	800a606 <_free_r+0x22>
 800a670:	bd38      	pop	{r3, r4, r5, pc}
 800a672:	bf00      	nop
 800a674:	240262bc 	.word	0x240262bc

0800a678 <sbrk_aligned>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	4e0f      	ldr	r6, [pc, #60]	@ (800a6b8 <sbrk_aligned+0x40>)
 800a67c:	460c      	mov	r4, r1
 800a67e:	6831      	ldr	r1, [r6, #0]
 800a680:	4605      	mov	r5, r0
 800a682:	b911      	cbnz	r1, 800a68a <sbrk_aligned+0x12>
 800a684:	f000 fba4 	bl	800add0 <_sbrk_r>
 800a688:	6030      	str	r0, [r6, #0]
 800a68a:	4621      	mov	r1, r4
 800a68c:	4628      	mov	r0, r5
 800a68e:	f000 fb9f 	bl	800add0 <_sbrk_r>
 800a692:	1c43      	adds	r3, r0, #1
 800a694:	d103      	bne.n	800a69e <sbrk_aligned+0x26>
 800a696:	f04f 34ff 	mov.w	r4, #4294967295
 800a69a:	4620      	mov	r0, r4
 800a69c:	bd70      	pop	{r4, r5, r6, pc}
 800a69e:	1cc4      	adds	r4, r0, #3
 800a6a0:	f024 0403 	bic.w	r4, r4, #3
 800a6a4:	42a0      	cmp	r0, r4
 800a6a6:	d0f8      	beq.n	800a69a <sbrk_aligned+0x22>
 800a6a8:	1a21      	subs	r1, r4, r0
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	f000 fb90 	bl	800add0 <_sbrk_r>
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	d1f2      	bne.n	800a69a <sbrk_aligned+0x22>
 800a6b4:	e7ef      	b.n	800a696 <sbrk_aligned+0x1e>
 800a6b6:	bf00      	nop
 800a6b8:	240262b8 	.word	0x240262b8

0800a6bc <_malloc_r>:
 800a6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6c0:	1ccd      	adds	r5, r1, #3
 800a6c2:	f025 0503 	bic.w	r5, r5, #3
 800a6c6:	3508      	adds	r5, #8
 800a6c8:	2d0c      	cmp	r5, #12
 800a6ca:	bf38      	it	cc
 800a6cc:	250c      	movcc	r5, #12
 800a6ce:	2d00      	cmp	r5, #0
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	db01      	blt.n	800a6d8 <_malloc_r+0x1c>
 800a6d4:	42a9      	cmp	r1, r5
 800a6d6:	d904      	bls.n	800a6e2 <_malloc_r+0x26>
 800a6d8:	230c      	movs	r3, #12
 800a6da:	6033      	str	r3, [r6, #0]
 800a6dc:	2000      	movs	r0, #0
 800a6de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a7b8 <_malloc_r+0xfc>
 800a6e6:	f000 f869 	bl	800a7bc <__malloc_lock>
 800a6ea:	f8d8 3000 	ldr.w	r3, [r8]
 800a6ee:	461c      	mov	r4, r3
 800a6f0:	bb44      	cbnz	r4, 800a744 <_malloc_r+0x88>
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f7ff ffbf 	bl	800a678 <sbrk_aligned>
 800a6fa:	1c43      	adds	r3, r0, #1
 800a6fc:	4604      	mov	r4, r0
 800a6fe:	d158      	bne.n	800a7b2 <_malloc_r+0xf6>
 800a700:	f8d8 4000 	ldr.w	r4, [r8]
 800a704:	4627      	mov	r7, r4
 800a706:	2f00      	cmp	r7, #0
 800a708:	d143      	bne.n	800a792 <_malloc_r+0xd6>
 800a70a:	2c00      	cmp	r4, #0
 800a70c:	d04b      	beq.n	800a7a6 <_malloc_r+0xea>
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	4639      	mov	r1, r7
 800a712:	4630      	mov	r0, r6
 800a714:	eb04 0903 	add.w	r9, r4, r3
 800a718:	f000 fb5a 	bl	800add0 <_sbrk_r>
 800a71c:	4581      	cmp	r9, r0
 800a71e:	d142      	bne.n	800a7a6 <_malloc_r+0xea>
 800a720:	6821      	ldr	r1, [r4, #0]
 800a722:	1a6d      	subs	r5, r5, r1
 800a724:	4629      	mov	r1, r5
 800a726:	4630      	mov	r0, r6
 800a728:	f7ff ffa6 	bl	800a678 <sbrk_aligned>
 800a72c:	3001      	adds	r0, #1
 800a72e:	d03a      	beq.n	800a7a6 <_malloc_r+0xea>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	442b      	add	r3, r5
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	f8d8 3000 	ldr.w	r3, [r8]
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	bb62      	cbnz	r2, 800a798 <_malloc_r+0xdc>
 800a73e:	f8c8 7000 	str.w	r7, [r8]
 800a742:	e00f      	b.n	800a764 <_malloc_r+0xa8>
 800a744:	6822      	ldr	r2, [r4, #0]
 800a746:	1b52      	subs	r2, r2, r5
 800a748:	d420      	bmi.n	800a78c <_malloc_r+0xd0>
 800a74a:	2a0b      	cmp	r2, #11
 800a74c:	d917      	bls.n	800a77e <_malloc_r+0xc2>
 800a74e:	1961      	adds	r1, r4, r5
 800a750:	42a3      	cmp	r3, r4
 800a752:	6025      	str	r5, [r4, #0]
 800a754:	bf18      	it	ne
 800a756:	6059      	strne	r1, [r3, #4]
 800a758:	6863      	ldr	r3, [r4, #4]
 800a75a:	bf08      	it	eq
 800a75c:	f8c8 1000 	streq.w	r1, [r8]
 800a760:	5162      	str	r2, [r4, r5]
 800a762:	604b      	str	r3, [r1, #4]
 800a764:	4630      	mov	r0, r6
 800a766:	f000 f82f 	bl	800a7c8 <__malloc_unlock>
 800a76a:	f104 000b 	add.w	r0, r4, #11
 800a76e:	1d23      	adds	r3, r4, #4
 800a770:	f020 0007 	bic.w	r0, r0, #7
 800a774:	1ac2      	subs	r2, r0, r3
 800a776:	bf1c      	itt	ne
 800a778:	1a1b      	subne	r3, r3, r0
 800a77a:	50a3      	strne	r3, [r4, r2]
 800a77c:	e7af      	b.n	800a6de <_malloc_r+0x22>
 800a77e:	6862      	ldr	r2, [r4, #4]
 800a780:	42a3      	cmp	r3, r4
 800a782:	bf0c      	ite	eq
 800a784:	f8c8 2000 	streq.w	r2, [r8]
 800a788:	605a      	strne	r2, [r3, #4]
 800a78a:	e7eb      	b.n	800a764 <_malloc_r+0xa8>
 800a78c:	4623      	mov	r3, r4
 800a78e:	6864      	ldr	r4, [r4, #4]
 800a790:	e7ae      	b.n	800a6f0 <_malloc_r+0x34>
 800a792:	463c      	mov	r4, r7
 800a794:	687f      	ldr	r7, [r7, #4]
 800a796:	e7b6      	b.n	800a706 <_malloc_r+0x4a>
 800a798:	461a      	mov	r2, r3
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	42a3      	cmp	r3, r4
 800a79e:	d1fb      	bne.n	800a798 <_malloc_r+0xdc>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	6053      	str	r3, [r2, #4]
 800a7a4:	e7de      	b.n	800a764 <_malloc_r+0xa8>
 800a7a6:	230c      	movs	r3, #12
 800a7a8:	6033      	str	r3, [r6, #0]
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	f000 f80c 	bl	800a7c8 <__malloc_unlock>
 800a7b0:	e794      	b.n	800a6dc <_malloc_r+0x20>
 800a7b2:	6005      	str	r5, [r0, #0]
 800a7b4:	e7d6      	b.n	800a764 <_malloc_r+0xa8>
 800a7b6:	bf00      	nop
 800a7b8:	240262bc 	.word	0x240262bc

0800a7bc <__malloc_lock>:
 800a7bc:	4801      	ldr	r0, [pc, #4]	@ (800a7c4 <__malloc_lock+0x8>)
 800a7be:	f7ff bf0f 	b.w	800a5e0 <__retarget_lock_acquire_recursive>
 800a7c2:	bf00      	nop
 800a7c4:	240262b4 	.word	0x240262b4

0800a7c8 <__malloc_unlock>:
 800a7c8:	4801      	ldr	r0, [pc, #4]	@ (800a7d0 <__malloc_unlock+0x8>)
 800a7ca:	f7ff bf0a 	b.w	800a5e2 <__retarget_lock_release_recursive>
 800a7ce:	bf00      	nop
 800a7d0:	240262b4 	.word	0x240262b4

0800a7d4 <__ssputs_r>:
 800a7d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7d8:	688e      	ldr	r6, [r1, #8]
 800a7da:	461f      	mov	r7, r3
 800a7dc:	42be      	cmp	r6, r7
 800a7de:	680b      	ldr	r3, [r1, #0]
 800a7e0:	4682      	mov	sl, r0
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	4690      	mov	r8, r2
 800a7e6:	d82d      	bhi.n	800a844 <__ssputs_r+0x70>
 800a7e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a7f0:	d026      	beq.n	800a840 <__ssputs_r+0x6c>
 800a7f2:	6965      	ldr	r5, [r4, #20]
 800a7f4:	6909      	ldr	r1, [r1, #16]
 800a7f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7fa:	eba3 0901 	sub.w	r9, r3, r1
 800a7fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a802:	1c7b      	adds	r3, r7, #1
 800a804:	444b      	add	r3, r9
 800a806:	106d      	asrs	r5, r5, #1
 800a808:	429d      	cmp	r5, r3
 800a80a:	bf38      	it	cc
 800a80c:	461d      	movcc	r5, r3
 800a80e:	0553      	lsls	r3, r2, #21
 800a810:	d527      	bpl.n	800a862 <__ssputs_r+0x8e>
 800a812:	4629      	mov	r1, r5
 800a814:	f7ff ff52 	bl	800a6bc <_malloc_r>
 800a818:	4606      	mov	r6, r0
 800a81a:	b360      	cbz	r0, 800a876 <__ssputs_r+0xa2>
 800a81c:	6921      	ldr	r1, [r4, #16]
 800a81e:	464a      	mov	r2, r9
 800a820:	f000 fae6 	bl	800adf0 <memcpy>
 800a824:	89a3      	ldrh	r3, [r4, #12]
 800a826:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a82a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a82e:	81a3      	strh	r3, [r4, #12]
 800a830:	6126      	str	r6, [r4, #16]
 800a832:	6165      	str	r5, [r4, #20]
 800a834:	444e      	add	r6, r9
 800a836:	eba5 0509 	sub.w	r5, r5, r9
 800a83a:	6026      	str	r6, [r4, #0]
 800a83c:	60a5      	str	r5, [r4, #8]
 800a83e:	463e      	mov	r6, r7
 800a840:	42be      	cmp	r6, r7
 800a842:	d900      	bls.n	800a846 <__ssputs_r+0x72>
 800a844:	463e      	mov	r6, r7
 800a846:	6820      	ldr	r0, [r4, #0]
 800a848:	4632      	mov	r2, r6
 800a84a:	4641      	mov	r1, r8
 800a84c:	f000 faa6 	bl	800ad9c <memmove>
 800a850:	68a3      	ldr	r3, [r4, #8]
 800a852:	1b9b      	subs	r3, r3, r6
 800a854:	60a3      	str	r3, [r4, #8]
 800a856:	6823      	ldr	r3, [r4, #0]
 800a858:	4433      	add	r3, r6
 800a85a:	6023      	str	r3, [r4, #0]
 800a85c:	2000      	movs	r0, #0
 800a85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a862:	462a      	mov	r2, r5
 800a864:	f000 fad2 	bl	800ae0c <_realloc_r>
 800a868:	4606      	mov	r6, r0
 800a86a:	2800      	cmp	r0, #0
 800a86c:	d1e0      	bne.n	800a830 <__ssputs_r+0x5c>
 800a86e:	6921      	ldr	r1, [r4, #16]
 800a870:	4650      	mov	r0, sl
 800a872:	f7ff feb7 	bl	800a5e4 <_free_r>
 800a876:	230c      	movs	r3, #12
 800a878:	f8ca 3000 	str.w	r3, [sl]
 800a87c:	89a3      	ldrh	r3, [r4, #12]
 800a87e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a882:	81a3      	strh	r3, [r4, #12]
 800a884:	f04f 30ff 	mov.w	r0, #4294967295
 800a888:	e7e9      	b.n	800a85e <__ssputs_r+0x8a>
	...

0800a88c <_svfiprintf_r>:
 800a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a890:	4698      	mov	r8, r3
 800a892:	898b      	ldrh	r3, [r1, #12]
 800a894:	061b      	lsls	r3, r3, #24
 800a896:	b09d      	sub	sp, #116	@ 0x74
 800a898:	4607      	mov	r7, r0
 800a89a:	460d      	mov	r5, r1
 800a89c:	4614      	mov	r4, r2
 800a89e:	d510      	bpl.n	800a8c2 <_svfiprintf_r+0x36>
 800a8a0:	690b      	ldr	r3, [r1, #16]
 800a8a2:	b973      	cbnz	r3, 800a8c2 <_svfiprintf_r+0x36>
 800a8a4:	2140      	movs	r1, #64	@ 0x40
 800a8a6:	f7ff ff09 	bl	800a6bc <_malloc_r>
 800a8aa:	6028      	str	r0, [r5, #0]
 800a8ac:	6128      	str	r0, [r5, #16]
 800a8ae:	b930      	cbnz	r0, 800a8be <_svfiprintf_r+0x32>
 800a8b0:	230c      	movs	r3, #12
 800a8b2:	603b      	str	r3, [r7, #0]
 800a8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b8:	b01d      	add	sp, #116	@ 0x74
 800a8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8be:	2340      	movs	r3, #64	@ 0x40
 800a8c0:	616b      	str	r3, [r5, #20]
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8c6:	2320      	movs	r3, #32
 800a8c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8d0:	2330      	movs	r3, #48	@ 0x30
 800a8d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aa70 <_svfiprintf_r+0x1e4>
 800a8d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8da:	f04f 0901 	mov.w	r9, #1
 800a8de:	4623      	mov	r3, r4
 800a8e0:	469a      	mov	sl, r3
 800a8e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8e6:	b10a      	cbz	r2, 800a8ec <_svfiprintf_r+0x60>
 800a8e8:	2a25      	cmp	r2, #37	@ 0x25
 800a8ea:	d1f9      	bne.n	800a8e0 <_svfiprintf_r+0x54>
 800a8ec:	ebba 0b04 	subs.w	fp, sl, r4
 800a8f0:	d00b      	beq.n	800a90a <_svfiprintf_r+0x7e>
 800a8f2:	465b      	mov	r3, fp
 800a8f4:	4622      	mov	r2, r4
 800a8f6:	4629      	mov	r1, r5
 800a8f8:	4638      	mov	r0, r7
 800a8fa:	f7ff ff6b 	bl	800a7d4 <__ssputs_r>
 800a8fe:	3001      	adds	r0, #1
 800a900:	f000 80a7 	beq.w	800aa52 <_svfiprintf_r+0x1c6>
 800a904:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a906:	445a      	add	r2, fp
 800a908:	9209      	str	r2, [sp, #36]	@ 0x24
 800a90a:	f89a 3000 	ldrb.w	r3, [sl]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f000 809f 	beq.w	800aa52 <_svfiprintf_r+0x1c6>
 800a914:	2300      	movs	r3, #0
 800a916:	f04f 32ff 	mov.w	r2, #4294967295
 800a91a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a91e:	f10a 0a01 	add.w	sl, sl, #1
 800a922:	9304      	str	r3, [sp, #16]
 800a924:	9307      	str	r3, [sp, #28]
 800a926:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a92a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a92c:	4654      	mov	r4, sl
 800a92e:	2205      	movs	r2, #5
 800a930:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a934:	484e      	ldr	r0, [pc, #312]	@ (800aa70 <_svfiprintf_r+0x1e4>)
 800a936:	f7f5 fcdb 	bl	80002f0 <memchr>
 800a93a:	9a04      	ldr	r2, [sp, #16]
 800a93c:	b9d8      	cbnz	r0, 800a976 <_svfiprintf_r+0xea>
 800a93e:	06d0      	lsls	r0, r2, #27
 800a940:	bf44      	itt	mi
 800a942:	2320      	movmi	r3, #32
 800a944:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a948:	0711      	lsls	r1, r2, #28
 800a94a:	bf44      	itt	mi
 800a94c:	232b      	movmi	r3, #43	@ 0x2b
 800a94e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a952:	f89a 3000 	ldrb.w	r3, [sl]
 800a956:	2b2a      	cmp	r3, #42	@ 0x2a
 800a958:	d015      	beq.n	800a986 <_svfiprintf_r+0xfa>
 800a95a:	9a07      	ldr	r2, [sp, #28]
 800a95c:	4654      	mov	r4, sl
 800a95e:	2000      	movs	r0, #0
 800a960:	f04f 0c0a 	mov.w	ip, #10
 800a964:	4621      	mov	r1, r4
 800a966:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a96a:	3b30      	subs	r3, #48	@ 0x30
 800a96c:	2b09      	cmp	r3, #9
 800a96e:	d94b      	bls.n	800aa08 <_svfiprintf_r+0x17c>
 800a970:	b1b0      	cbz	r0, 800a9a0 <_svfiprintf_r+0x114>
 800a972:	9207      	str	r2, [sp, #28]
 800a974:	e014      	b.n	800a9a0 <_svfiprintf_r+0x114>
 800a976:	eba0 0308 	sub.w	r3, r0, r8
 800a97a:	fa09 f303 	lsl.w	r3, r9, r3
 800a97e:	4313      	orrs	r3, r2
 800a980:	9304      	str	r3, [sp, #16]
 800a982:	46a2      	mov	sl, r4
 800a984:	e7d2      	b.n	800a92c <_svfiprintf_r+0xa0>
 800a986:	9b03      	ldr	r3, [sp, #12]
 800a988:	1d19      	adds	r1, r3, #4
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	9103      	str	r1, [sp, #12]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	bfbb      	ittet	lt
 800a992:	425b      	neglt	r3, r3
 800a994:	f042 0202 	orrlt.w	r2, r2, #2
 800a998:	9307      	strge	r3, [sp, #28]
 800a99a:	9307      	strlt	r3, [sp, #28]
 800a99c:	bfb8      	it	lt
 800a99e:	9204      	strlt	r2, [sp, #16]
 800a9a0:	7823      	ldrb	r3, [r4, #0]
 800a9a2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9a4:	d10a      	bne.n	800a9bc <_svfiprintf_r+0x130>
 800a9a6:	7863      	ldrb	r3, [r4, #1]
 800a9a8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9aa:	d132      	bne.n	800aa12 <_svfiprintf_r+0x186>
 800a9ac:	9b03      	ldr	r3, [sp, #12]
 800a9ae:	1d1a      	adds	r2, r3, #4
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	9203      	str	r2, [sp, #12]
 800a9b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9b8:	3402      	adds	r4, #2
 800a9ba:	9305      	str	r3, [sp, #20]
 800a9bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800aa80 <_svfiprintf_r+0x1f4>
 800a9c0:	7821      	ldrb	r1, [r4, #0]
 800a9c2:	2203      	movs	r2, #3
 800a9c4:	4650      	mov	r0, sl
 800a9c6:	f7f5 fc93 	bl	80002f0 <memchr>
 800a9ca:	b138      	cbz	r0, 800a9dc <_svfiprintf_r+0x150>
 800a9cc:	9b04      	ldr	r3, [sp, #16]
 800a9ce:	eba0 000a 	sub.w	r0, r0, sl
 800a9d2:	2240      	movs	r2, #64	@ 0x40
 800a9d4:	4082      	lsls	r2, r0
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	3401      	adds	r4, #1
 800a9da:	9304      	str	r3, [sp, #16]
 800a9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9e0:	4824      	ldr	r0, [pc, #144]	@ (800aa74 <_svfiprintf_r+0x1e8>)
 800a9e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9e6:	2206      	movs	r2, #6
 800a9e8:	f7f5 fc82 	bl	80002f0 <memchr>
 800a9ec:	2800      	cmp	r0, #0
 800a9ee:	d036      	beq.n	800aa5e <_svfiprintf_r+0x1d2>
 800a9f0:	4b21      	ldr	r3, [pc, #132]	@ (800aa78 <_svfiprintf_r+0x1ec>)
 800a9f2:	bb1b      	cbnz	r3, 800aa3c <_svfiprintf_r+0x1b0>
 800a9f4:	9b03      	ldr	r3, [sp, #12]
 800a9f6:	3307      	adds	r3, #7
 800a9f8:	f023 0307 	bic.w	r3, r3, #7
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	9303      	str	r3, [sp, #12]
 800aa00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa02:	4433      	add	r3, r6
 800aa04:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa06:	e76a      	b.n	800a8de <_svfiprintf_r+0x52>
 800aa08:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	2001      	movs	r0, #1
 800aa10:	e7a8      	b.n	800a964 <_svfiprintf_r+0xd8>
 800aa12:	2300      	movs	r3, #0
 800aa14:	3401      	adds	r4, #1
 800aa16:	9305      	str	r3, [sp, #20]
 800aa18:	4619      	mov	r1, r3
 800aa1a:	f04f 0c0a 	mov.w	ip, #10
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa24:	3a30      	subs	r2, #48	@ 0x30
 800aa26:	2a09      	cmp	r2, #9
 800aa28:	d903      	bls.n	800aa32 <_svfiprintf_r+0x1a6>
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d0c6      	beq.n	800a9bc <_svfiprintf_r+0x130>
 800aa2e:	9105      	str	r1, [sp, #20]
 800aa30:	e7c4      	b.n	800a9bc <_svfiprintf_r+0x130>
 800aa32:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa36:	4604      	mov	r4, r0
 800aa38:	2301      	movs	r3, #1
 800aa3a:	e7f0      	b.n	800aa1e <_svfiprintf_r+0x192>
 800aa3c:	ab03      	add	r3, sp, #12
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	462a      	mov	r2, r5
 800aa42:	4b0e      	ldr	r3, [pc, #56]	@ (800aa7c <_svfiprintf_r+0x1f0>)
 800aa44:	a904      	add	r1, sp, #16
 800aa46:	4638      	mov	r0, r7
 800aa48:	f3af 8000 	nop.w
 800aa4c:	1c42      	adds	r2, r0, #1
 800aa4e:	4606      	mov	r6, r0
 800aa50:	d1d6      	bne.n	800aa00 <_svfiprintf_r+0x174>
 800aa52:	89ab      	ldrh	r3, [r5, #12]
 800aa54:	065b      	lsls	r3, r3, #25
 800aa56:	f53f af2d 	bmi.w	800a8b4 <_svfiprintf_r+0x28>
 800aa5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa5c:	e72c      	b.n	800a8b8 <_svfiprintf_r+0x2c>
 800aa5e:	ab03      	add	r3, sp, #12
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	462a      	mov	r2, r5
 800aa64:	4b05      	ldr	r3, [pc, #20]	@ (800aa7c <_svfiprintf_r+0x1f0>)
 800aa66:	a904      	add	r1, sp, #16
 800aa68:	4638      	mov	r0, r7
 800aa6a:	f000 f879 	bl	800ab60 <_printf_i>
 800aa6e:	e7ed      	b.n	800aa4c <_svfiprintf_r+0x1c0>
 800aa70:	0800af88 	.word	0x0800af88
 800aa74:	0800af92 	.word	0x0800af92
 800aa78:	00000000 	.word	0x00000000
 800aa7c:	0800a7d5 	.word	0x0800a7d5
 800aa80:	0800af8e 	.word	0x0800af8e

0800aa84 <_printf_common>:
 800aa84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa88:	4616      	mov	r6, r2
 800aa8a:	4698      	mov	r8, r3
 800aa8c:	688a      	ldr	r2, [r1, #8]
 800aa8e:	690b      	ldr	r3, [r1, #16]
 800aa90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800aa94:	4293      	cmp	r3, r2
 800aa96:	bfb8      	it	lt
 800aa98:	4613      	movlt	r3, r2
 800aa9a:	6033      	str	r3, [r6, #0]
 800aa9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800aaa0:	4607      	mov	r7, r0
 800aaa2:	460c      	mov	r4, r1
 800aaa4:	b10a      	cbz	r2, 800aaaa <_printf_common+0x26>
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	6033      	str	r3, [r6, #0]
 800aaaa:	6823      	ldr	r3, [r4, #0]
 800aaac:	0699      	lsls	r1, r3, #26
 800aaae:	bf42      	ittt	mi
 800aab0:	6833      	ldrmi	r3, [r6, #0]
 800aab2:	3302      	addmi	r3, #2
 800aab4:	6033      	strmi	r3, [r6, #0]
 800aab6:	6825      	ldr	r5, [r4, #0]
 800aab8:	f015 0506 	ands.w	r5, r5, #6
 800aabc:	d106      	bne.n	800aacc <_printf_common+0x48>
 800aabe:	f104 0a19 	add.w	sl, r4, #25
 800aac2:	68e3      	ldr	r3, [r4, #12]
 800aac4:	6832      	ldr	r2, [r6, #0]
 800aac6:	1a9b      	subs	r3, r3, r2
 800aac8:	42ab      	cmp	r3, r5
 800aaca:	dc26      	bgt.n	800ab1a <_printf_common+0x96>
 800aacc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800aad0:	6822      	ldr	r2, [r4, #0]
 800aad2:	3b00      	subs	r3, #0
 800aad4:	bf18      	it	ne
 800aad6:	2301      	movne	r3, #1
 800aad8:	0692      	lsls	r2, r2, #26
 800aada:	d42b      	bmi.n	800ab34 <_printf_common+0xb0>
 800aadc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aae0:	4641      	mov	r1, r8
 800aae2:	4638      	mov	r0, r7
 800aae4:	47c8      	blx	r9
 800aae6:	3001      	adds	r0, #1
 800aae8:	d01e      	beq.n	800ab28 <_printf_common+0xa4>
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	6922      	ldr	r2, [r4, #16]
 800aaee:	f003 0306 	and.w	r3, r3, #6
 800aaf2:	2b04      	cmp	r3, #4
 800aaf4:	bf02      	ittt	eq
 800aaf6:	68e5      	ldreq	r5, [r4, #12]
 800aaf8:	6833      	ldreq	r3, [r6, #0]
 800aafa:	1aed      	subeq	r5, r5, r3
 800aafc:	68a3      	ldr	r3, [r4, #8]
 800aafe:	bf0c      	ite	eq
 800ab00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab04:	2500      	movne	r5, #0
 800ab06:	4293      	cmp	r3, r2
 800ab08:	bfc4      	itt	gt
 800ab0a:	1a9b      	subgt	r3, r3, r2
 800ab0c:	18ed      	addgt	r5, r5, r3
 800ab0e:	2600      	movs	r6, #0
 800ab10:	341a      	adds	r4, #26
 800ab12:	42b5      	cmp	r5, r6
 800ab14:	d11a      	bne.n	800ab4c <_printf_common+0xc8>
 800ab16:	2000      	movs	r0, #0
 800ab18:	e008      	b.n	800ab2c <_printf_common+0xa8>
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	4652      	mov	r2, sl
 800ab1e:	4641      	mov	r1, r8
 800ab20:	4638      	mov	r0, r7
 800ab22:	47c8      	blx	r9
 800ab24:	3001      	adds	r0, #1
 800ab26:	d103      	bne.n	800ab30 <_printf_common+0xac>
 800ab28:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab30:	3501      	adds	r5, #1
 800ab32:	e7c6      	b.n	800aac2 <_printf_common+0x3e>
 800ab34:	18e1      	adds	r1, r4, r3
 800ab36:	1c5a      	adds	r2, r3, #1
 800ab38:	2030      	movs	r0, #48	@ 0x30
 800ab3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ab3e:	4422      	add	r2, r4
 800ab40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ab44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ab48:	3302      	adds	r3, #2
 800ab4a:	e7c7      	b.n	800aadc <_printf_common+0x58>
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	4622      	mov	r2, r4
 800ab50:	4641      	mov	r1, r8
 800ab52:	4638      	mov	r0, r7
 800ab54:	47c8      	blx	r9
 800ab56:	3001      	adds	r0, #1
 800ab58:	d0e6      	beq.n	800ab28 <_printf_common+0xa4>
 800ab5a:	3601      	adds	r6, #1
 800ab5c:	e7d9      	b.n	800ab12 <_printf_common+0x8e>
	...

0800ab60 <_printf_i>:
 800ab60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab64:	7e0f      	ldrb	r7, [r1, #24]
 800ab66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ab68:	2f78      	cmp	r7, #120	@ 0x78
 800ab6a:	4691      	mov	r9, r2
 800ab6c:	4680      	mov	r8, r0
 800ab6e:	460c      	mov	r4, r1
 800ab70:	469a      	mov	sl, r3
 800ab72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ab76:	d807      	bhi.n	800ab88 <_printf_i+0x28>
 800ab78:	2f62      	cmp	r7, #98	@ 0x62
 800ab7a:	d80a      	bhi.n	800ab92 <_printf_i+0x32>
 800ab7c:	2f00      	cmp	r7, #0
 800ab7e:	f000 80d1 	beq.w	800ad24 <_printf_i+0x1c4>
 800ab82:	2f58      	cmp	r7, #88	@ 0x58
 800ab84:	f000 80b8 	beq.w	800acf8 <_printf_i+0x198>
 800ab88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ab90:	e03a      	b.n	800ac08 <_printf_i+0xa8>
 800ab92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ab96:	2b15      	cmp	r3, #21
 800ab98:	d8f6      	bhi.n	800ab88 <_printf_i+0x28>
 800ab9a:	a101      	add	r1, pc, #4	@ (adr r1, 800aba0 <_printf_i+0x40>)
 800ab9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aba0:	0800abf9 	.word	0x0800abf9
 800aba4:	0800ac0d 	.word	0x0800ac0d
 800aba8:	0800ab89 	.word	0x0800ab89
 800abac:	0800ab89 	.word	0x0800ab89
 800abb0:	0800ab89 	.word	0x0800ab89
 800abb4:	0800ab89 	.word	0x0800ab89
 800abb8:	0800ac0d 	.word	0x0800ac0d
 800abbc:	0800ab89 	.word	0x0800ab89
 800abc0:	0800ab89 	.word	0x0800ab89
 800abc4:	0800ab89 	.word	0x0800ab89
 800abc8:	0800ab89 	.word	0x0800ab89
 800abcc:	0800ad0b 	.word	0x0800ad0b
 800abd0:	0800ac37 	.word	0x0800ac37
 800abd4:	0800acc5 	.word	0x0800acc5
 800abd8:	0800ab89 	.word	0x0800ab89
 800abdc:	0800ab89 	.word	0x0800ab89
 800abe0:	0800ad2d 	.word	0x0800ad2d
 800abe4:	0800ab89 	.word	0x0800ab89
 800abe8:	0800ac37 	.word	0x0800ac37
 800abec:	0800ab89 	.word	0x0800ab89
 800abf0:	0800ab89 	.word	0x0800ab89
 800abf4:	0800accd 	.word	0x0800accd
 800abf8:	6833      	ldr	r3, [r6, #0]
 800abfa:	1d1a      	adds	r2, r3, #4
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	6032      	str	r2, [r6, #0]
 800ac00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ac04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e09c      	b.n	800ad46 <_printf_i+0x1e6>
 800ac0c:	6833      	ldr	r3, [r6, #0]
 800ac0e:	6820      	ldr	r0, [r4, #0]
 800ac10:	1d19      	adds	r1, r3, #4
 800ac12:	6031      	str	r1, [r6, #0]
 800ac14:	0606      	lsls	r6, r0, #24
 800ac16:	d501      	bpl.n	800ac1c <_printf_i+0xbc>
 800ac18:	681d      	ldr	r5, [r3, #0]
 800ac1a:	e003      	b.n	800ac24 <_printf_i+0xc4>
 800ac1c:	0645      	lsls	r5, r0, #25
 800ac1e:	d5fb      	bpl.n	800ac18 <_printf_i+0xb8>
 800ac20:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ac24:	2d00      	cmp	r5, #0
 800ac26:	da03      	bge.n	800ac30 <_printf_i+0xd0>
 800ac28:	232d      	movs	r3, #45	@ 0x2d
 800ac2a:	426d      	negs	r5, r5
 800ac2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac30:	4858      	ldr	r0, [pc, #352]	@ (800ad94 <_printf_i+0x234>)
 800ac32:	230a      	movs	r3, #10
 800ac34:	e011      	b.n	800ac5a <_printf_i+0xfa>
 800ac36:	6821      	ldr	r1, [r4, #0]
 800ac38:	6833      	ldr	r3, [r6, #0]
 800ac3a:	0608      	lsls	r0, r1, #24
 800ac3c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ac40:	d402      	bmi.n	800ac48 <_printf_i+0xe8>
 800ac42:	0649      	lsls	r1, r1, #25
 800ac44:	bf48      	it	mi
 800ac46:	b2ad      	uxthmi	r5, r5
 800ac48:	2f6f      	cmp	r7, #111	@ 0x6f
 800ac4a:	4852      	ldr	r0, [pc, #328]	@ (800ad94 <_printf_i+0x234>)
 800ac4c:	6033      	str	r3, [r6, #0]
 800ac4e:	bf14      	ite	ne
 800ac50:	230a      	movne	r3, #10
 800ac52:	2308      	moveq	r3, #8
 800ac54:	2100      	movs	r1, #0
 800ac56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ac5a:	6866      	ldr	r6, [r4, #4]
 800ac5c:	60a6      	str	r6, [r4, #8]
 800ac5e:	2e00      	cmp	r6, #0
 800ac60:	db05      	blt.n	800ac6e <_printf_i+0x10e>
 800ac62:	6821      	ldr	r1, [r4, #0]
 800ac64:	432e      	orrs	r6, r5
 800ac66:	f021 0104 	bic.w	r1, r1, #4
 800ac6a:	6021      	str	r1, [r4, #0]
 800ac6c:	d04b      	beq.n	800ad06 <_printf_i+0x1a6>
 800ac6e:	4616      	mov	r6, r2
 800ac70:	fbb5 f1f3 	udiv	r1, r5, r3
 800ac74:	fb03 5711 	mls	r7, r3, r1, r5
 800ac78:	5dc7      	ldrb	r7, [r0, r7]
 800ac7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ac7e:	462f      	mov	r7, r5
 800ac80:	42bb      	cmp	r3, r7
 800ac82:	460d      	mov	r5, r1
 800ac84:	d9f4      	bls.n	800ac70 <_printf_i+0x110>
 800ac86:	2b08      	cmp	r3, #8
 800ac88:	d10b      	bne.n	800aca2 <_printf_i+0x142>
 800ac8a:	6823      	ldr	r3, [r4, #0]
 800ac8c:	07df      	lsls	r7, r3, #31
 800ac8e:	d508      	bpl.n	800aca2 <_printf_i+0x142>
 800ac90:	6923      	ldr	r3, [r4, #16]
 800ac92:	6861      	ldr	r1, [r4, #4]
 800ac94:	4299      	cmp	r1, r3
 800ac96:	bfde      	ittt	le
 800ac98:	2330      	movle	r3, #48	@ 0x30
 800ac9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac9e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800aca2:	1b92      	subs	r2, r2, r6
 800aca4:	6122      	str	r2, [r4, #16]
 800aca6:	f8cd a000 	str.w	sl, [sp]
 800acaa:	464b      	mov	r3, r9
 800acac:	aa03      	add	r2, sp, #12
 800acae:	4621      	mov	r1, r4
 800acb0:	4640      	mov	r0, r8
 800acb2:	f7ff fee7 	bl	800aa84 <_printf_common>
 800acb6:	3001      	adds	r0, #1
 800acb8:	d14a      	bne.n	800ad50 <_printf_i+0x1f0>
 800acba:	f04f 30ff 	mov.w	r0, #4294967295
 800acbe:	b004      	add	sp, #16
 800acc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	f043 0320 	orr.w	r3, r3, #32
 800acca:	6023      	str	r3, [r4, #0]
 800accc:	4832      	ldr	r0, [pc, #200]	@ (800ad98 <_printf_i+0x238>)
 800acce:	2778      	movs	r7, #120	@ 0x78
 800acd0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800acd4:	6823      	ldr	r3, [r4, #0]
 800acd6:	6831      	ldr	r1, [r6, #0]
 800acd8:	061f      	lsls	r7, r3, #24
 800acda:	f851 5b04 	ldr.w	r5, [r1], #4
 800acde:	d402      	bmi.n	800ace6 <_printf_i+0x186>
 800ace0:	065f      	lsls	r7, r3, #25
 800ace2:	bf48      	it	mi
 800ace4:	b2ad      	uxthmi	r5, r5
 800ace6:	6031      	str	r1, [r6, #0]
 800ace8:	07d9      	lsls	r1, r3, #31
 800acea:	bf44      	itt	mi
 800acec:	f043 0320 	orrmi.w	r3, r3, #32
 800acf0:	6023      	strmi	r3, [r4, #0]
 800acf2:	b11d      	cbz	r5, 800acfc <_printf_i+0x19c>
 800acf4:	2310      	movs	r3, #16
 800acf6:	e7ad      	b.n	800ac54 <_printf_i+0xf4>
 800acf8:	4826      	ldr	r0, [pc, #152]	@ (800ad94 <_printf_i+0x234>)
 800acfa:	e7e9      	b.n	800acd0 <_printf_i+0x170>
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	f023 0320 	bic.w	r3, r3, #32
 800ad02:	6023      	str	r3, [r4, #0]
 800ad04:	e7f6      	b.n	800acf4 <_printf_i+0x194>
 800ad06:	4616      	mov	r6, r2
 800ad08:	e7bd      	b.n	800ac86 <_printf_i+0x126>
 800ad0a:	6833      	ldr	r3, [r6, #0]
 800ad0c:	6825      	ldr	r5, [r4, #0]
 800ad0e:	6961      	ldr	r1, [r4, #20]
 800ad10:	1d18      	adds	r0, r3, #4
 800ad12:	6030      	str	r0, [r6, #0]
 800ad14:	062e      	lsls	r6, r5, #24
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	d501      	bpl.n	800ad1e <_printf_i+0x1be>
 800ad1a:	6019      	str	r1, [r3, #0]
 800ad1c:	e002      	b.n	800ad24 <_printf_i+0x1c4>
 800ad1e:	0668      	lsls	r0, r5, #25
 800ad20:	d5fb      	bpl.n	800ad1a <_printf_i+0x1ba>
 800ad22:	8019      	strh	r1, [r3, #0]
 800ad24:	2300      	movs	r3, #0
 800ad26:	6123      	str	r3, [r4, #16]
 800ad28:	4616      	mov	r6, r2
 800ad2a:	e7bc      	b.n	800aca6 <_printf_i+0x146>
 800ad2c:	6833      	ldr	r3, [r6, #0]
 800ad2e:	1d1a      	adds	r2, r3, #4
 800ad30:	6032      	str	r2, [r6, #0]
 800ad32:	681e      	ldr	r6, [r3, #0]
 800ad34:	6862      	ldr	r2, [r4, #4]
 800ad36:	2100      	movs	r1, #0
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f7f5 fad9 	bl	80002f0 <memchr>
 800ad3e:	b108      	cbz	r0, 800ad44 <_printf_i+0x1e4>
 800ad40:	1b80      	subs	r0, r0, r6
 800ad42:	6060      	str	r0, [r4, #4]
 800ad44:	6863      	ldr	r3, [r4, #4]
 800ad46:	6123      	str	r3, [r4, #16]
 800ad48:	2300      	movs	r3, #0
 800ad4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ad4e:	e7aa      	b.n	800aca6 <_printf_i+0x146>
 800ad50:	6923      	ldr	r3, [r4, #16]
 800ad52:	4632      	mov	r2, r6
 800ad54:	4649      	mov	r1, r9
 800ad56:	4640      	mov	r0, r8
 800ad58:	47d0      	blx	sl
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	d0ad      	beq.n	800acba <_printf_i+0x15a>
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	079b      	lsls	r3, r3, #30
 800ad62:	d413      	bmi.n	800ad8c <_printf_i+0x22c>
 800ad64:	68e0      	ldr	r0, [r4, #12]
 800ad66:	9b03      	ldr	r3, [sp, #12]
 800ad68:	4298      	cmp	r0, r3
 800ad6a:	bfb8      	it	lt
 800ad6c:	4618      	movlt	r0, r3
 800ad6e:	e7a6      	b.n	800acbe <_printf_i+0x15e>
 800ad70:	2301      	movs	r3, #1
 800ad72:	4632      	mov	r2, r6
 800ad74:	4649      	mov	r1, r9
 800ad76:	4640      	mov	r0, r8
 800ad78:	47d0      	blx	sl
 800ad7a:	3001      	adds	r0, #1
 800ad7c:	d09d      	beq.n	800acba <_printf_i+0x15a>
 800ad7e:	3501      	adds	r5, #1
 800ad80:	68e3      	ldr	r3, [r4, #12]
 800ad82:	9903      	ldr	r1, [sp, #12]
 800ad84:	1a5b      	subs	r3, r3, r1
 800ad86:	42ab      	cmp	r3, r5
 800ad88:	dcf2      	bgt.n	800ad70 <_printf_i+0x210>
 800ad8a:	e7eb      	b.n	800ad64 <_printf_i+0x204>
 800ad8c:	2500      	movs	r5, #0
 800ad8e:	f104 0619 	add.w	r6, r4, #25
 800ad92:	e7f5      	b.n	800ad80 <_printf_i+0x220>
 800ad94:	0800af99 	.word	0x0800af99
 800ad98:	0800afaa 	.word	0x0800afaa

0800ad9c <memmove>:
 800ad9c:	4288      	cmp	r0, r1
 800ad9e:	b510      	push	{r4, lr}
 800ada0:	eb01 0402 	add.w	r4, r1, r2
 800ada4:	d902      	bls.n	800adac <memmove+0x10>
 800ada6:	4284      	cmp	r4, r0
 800ada8:	4623      	mov	r3, r4
 800adaa:	d807      	bhi.n	800adbc <memmove+0x20>
 800adac:	1e43      	subs	r3, r0, #1
 800adae:	42a1      	cmp	r1, r4
 800adb0:	d008      	beq.n	800adc4 <memmove+0x28>
 800adb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800adba:	e7f8      	b.n	800adae <memmove+0x12>
 800adbc:	4402      	add	r2, r0
 800adbe:	4601      	mov	r1, r0
 800adc0:	428a      	cmp	r2, r1
 800adc2:	d100      	bne.n	800adc6 <memmove+0x2a>
 800adc4:	bd10      	pop	{r4, pc}
 800adc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800adca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800adce:	e7f7      	b.n	800adc0 <memmove+0x24>

0800add0 <_sbrk_r>:
 800add0:	b538      	push	{r3, r4, r5, lr}
 800add2:	4d06      	ldr	r5, [pc, #24]	@ (800adec <_sbrk_r+0x1c>)
 800add4:	2300      	movs	r3, #0
 800add6:	4604      	mov	r4, r0
 800add8:	4608      	mov	r0, r1
 800adda:	602b      	str	r3, [r5, #0]
 800addc:	f7f6 fd76 	bl	80018cc <_sbrk>
 800ade0:	1c43      	adds	r3, r0, #1
 800ade2:	d102      	bne.n	800adea <_sbrk_r+0x1a>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	b103      	cbz	r3, 800adea <_sbrk_r+0x1a>
 800ade8:	6023      	str	r3, [r4, #0]
 800adea:	bd38      	pop	{r3, r4, r5, pc}
 800adec:	240262b0 	.word	0x240262b0

0800adf0 <memcpy>:
 800adf0:	440a      	add	r2, r1
 800adf2:	4291      	cmp	r1, r2
 800adf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800adf8:	d100      	bne.n	800adfc <memcpy+0xc>
 800adfa:	4770      	bx	lr
 800adfc:	b510      	push	{r4, lr}
 800adfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae06:	4291      	cmp	r1, r2
 800ae08:	d1f9      	bne.n	800adfe <memcpy+0xe>
 800ae0a:	bd10      	pop	{r4, pc}

0800ae0c <_realloc_r>:
 800ae0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae10:	4607      	mov	r7, r0
 800ae12:	4614      	mov	r4, r2
 800ae14:	460d      	mov	r5, r1
 800ae16:	b921      	cbnz	r1, 800ae22 <_realloc_r+0x16>
 800ae18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae1c:	4611      	mov	r1, r2
 800ae1e:	f7ff bc4d 	b.w	800a6bc <_malloc_r>
 800ae22:	b92a      	cbnz	r2, 800ae30 <_realloc_r+0x24>
 800ae24:	f7ff fbde 	bl	800a5e4 <_free_r>
 800ae28:	4625      	mov	r5, r4
 800ae2a:	4628      	mov	r0, r5
 800ae2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae30:	f000 f81a 	bl	800ae68 <_malloc_usable_size_r>
 800ae34:	4284      	cmp	r4, r0
 800ae36:	4606      	mov	r6, r0
 800ae38:	d802      	bhi.n	800ae40 <_realloc_r+0x34>
 800ae3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae3e:	d8f4      	bhi.n	800ae2a <_realloc_r+0x1e>
 800ae40:	4621      	mov	r1, r4
 800ae42:	4638      	mov	r0, r7
 800ae44:	f7ff fc3a 	bl	800a6bc <_malloc_r>
 800ae48:	4680      	mov	r8, r0
 800ae4a:	b908      	cbnz	r0, 800ae50 <_realloc_r+0x44>
 800ae4c:	4645      	mov	r5, r8
 800ae4e:	e7ec      	b.n	800ae2a <_realloc_r+0x1e>
 800ae50:	42b4      	cmp	r4, r6
 800ae52:	4622      	mov	r2, r4
 800ae54:	4629      	mov	r1, r5
 800ae56:	bf28      	it	cs
 800ae58:	4632      	movcs	r2, r6
 800ae5a:	f7ff ffc9 	bl	800adf0 <memcpy>
 800ae5e:	4629      	mov	r1, r5
 800ae60:	4638      	mov	r0, r7
 800ae62:	f7ff fbbf 	bl	800a5e4 <_free_r>
 800ae66:	e7f1      	b.n	800ae4c <_realloc_r+0x40>

0800ae68 <_malloc_usable_size_r>:
 800ae68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae6c:	1f18      	subs	r0, r3, #4
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	bfbc      	itt	lt
 800ae72:	580b      	ldrlt	r3, [r1, r0]
 800ae74:	18c0      	addlt	r0, r0, r3
 800ae76:	4770      	bx	lr

0800ae78 <_init>:
 800ae78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae7a:	bf00      	nop
 800ae7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae7e:	bc08      	pop	{r3}
 800ae80:	469e      	mov	lr, r3
 800ae82:	4770      	bx	lr

0800ae84 <_fini>:
 800ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae86:	bf00      	nop
 800ae88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae8a:	bc08      	pop	{r3}
 800ae8c:	469e      	mov	lr, r3
 800ae8e:	4770      	bx	lr
